
BLDCDriver_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a7dc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006f8  0800a970  0800a970  0001a970  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b068  0800b068  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b068  0800b068  0001b068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b070  0800b070  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b070  0800b070  0001b070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b074  0800b074  0001b074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800b078  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000066a0  200001e8  0800b260  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006888  0800b260  00026888  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000192c3  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003a8e  00000000  00000000  000394db  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012e8  00000000  00000000  0003cf70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001118  00000000  00000000  0003e258  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023968  00000000  00000000  0003f370  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012702  00000000  00000000  00062cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c7980  00000000  00000000  000753da  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013cd5a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d74  00000000  00000000  0013cdd8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a954 	.word	0x0800a954

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800a954 	.word	0x0800a954

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b972 	b.w	8000f44 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	4688      	mov	r8, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14b      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4615      	mov	r5, r2
 8000c8a:	d967      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0720 	rsb	r7, r2, #32
 8000c96:	fa01 f302 	lsl.w	r3, r1, r2
 8000c9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c9e:	4095      	lsls	r5, r2
 8000ca0:	ea47 0803 	orr.w	r8, r7, r3
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cb0:	fa1f fc85 	uxth.w	ip, r5
 8000cb4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cb8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18eb      	adds	r3, r5, r3
 8000cc6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cca:	f080 811b 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8118 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000cd4:	3f02      	subs	r7, #2
 8000cd6:	442b      	add	r3, r5
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cec:	45a4      	cmp	ip, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	192c      	adds	r4, r5, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8107 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	f240 8104 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000d00:	3802      	subs	r0, #2
 8000d02:	442c      	add	r4, r5
 8000d04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d08:	eba4 040c 	sub.w	r4, r4, ip
 8000d0c:	2700      	movs	r7, #0
 8000d0e:	b11e      	cbz	r6, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c6 4300 	strd	r4, r3, [r6]
 8000d18:	4639      	mov	r1, r7
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0xbe>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80eb 	beq.w	8000efe <__udivmoddi4+0x286>
 8000d28:	2700      	movs	r7, #0
 8000d2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d2e:	4638      	mov	r0, r7
 8000d30:	4639      	mov	r1, r7
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f783 	clz	r7, r3
 8000d3a:	2f00      	cmp	r7, #0
 8000d3c:	d147      	bne.n	8000dce <__udivmoddi4+0x156>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0xd0>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80fa 	bhi.w	8000f3c <__udivmoddi4+0x2c4>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	4698      	mov	r8, r3
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d0e0      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000d56:	e9c6 4800 	strd	r4, r8, [r6]
 8000d5a:	e7dd      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000d5c:	b902      	cbnz	r2, 8000d60 <__udivmoddi4+0xe8>
 8000d5e:	deff      	udf	#255	; 0xff
 8000d60:	fab2 f282 	clz	r2, r2
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f040 808f 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d6a:	1b49      	subs	r1, r1, r5
 8000d6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d70:	fa1f f885 	uxth.w	r8, r5
 8000d74:	2701      	movs	r7, #1
 8000d76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d7a:	0c23      	lsrs	r3, r4, #16
 8000d7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb08 f10c 	mul.w	r1, r8, ip
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8c:	18eb      	adds	r3, r5, r3
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4299      	cmp	r1, r3
 8000d96:	f200 80cd 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1a59      	subs	r1, r3, r1
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000da8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x14c>
 8000db4:	192c      	adds	r4, r5, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x14a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80b6 	bhi.w	8000f2e <__udivmoddi4+0x2b6>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e79f      	b.n	8000d0e <__udivmoddi4+0x96>
 8000dce:	f1c7 0c20 	rsb	ip, r7, #32
 8000dd2:	40bb      	lsls	r3, r7
 8000dd4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dd8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ddc:	fa01 f407 	lsl.w	r4, r1, r7
 8000de0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000de4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000de8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dec:	4325      	orrs	r5, r4
 8000dee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000df2:	0c2c      	lsrs	r4, r5, #16
 8000df4:	fb08 3319 	mls	r3, r8, r9, r3
 8000df8:	fa1f fa8e 	uxth.w	sl, lr
 8000dfc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e00:	fb09 f40a 	mul.w	r4, r9, sl
 8000e04:	429c      	cmp	r4, r3
 8000e06:	fa02 f207 	lsl.w	r2, r2, r7
 8000e0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1e 0303 	adds.w	r3, lr, r3
 8000e14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e18:	f080 8087 	bcs.w	8000f2a <__udivmoddi4+0x2b2>
 8000e1c:	429c      	cmp	r4, r3
 8000e1e:	f240 8084 	bls.w	8000f2a <__udivmoddi4+0x2b2>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4473      	add	r3, lr
 8000e28:	1b1b      	subs	r3, r3, r4
 8000e2a:	b2ad      	uxth	r5, r5
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e3c:	45a2      	cmp	sl, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1e 0404 	adds.w	r4, lr, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e48:	d26b      	bcs.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4a:	45a2      	cmp	sl, r4
 8000e4c:	d969      	bls.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4474      	add	r4, lr
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5a:	eba4 040a 	sub.w	r4, r4, sl
 8000e5e:	454c      	cmp	r4, r9
 8000e60:	46c2      	mov	sl, r8
 8000e62:	464b      	mov	r3, r9
 8000e64:	d354      	bcc.n	8000f10 <__udivmoddi4+0x298>
 8000e66:	d051      	beq.n	8000f0c <__udivmoddi4+0x294>
 8000e68:	2e00      	cmp	r6, #0
 8000e6a:	d069      	beq.n	8000f40 <__udivmoddi4+0x2c8>
 8000e6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e70:	eb64 0403 	sbc.w	r4, r4, r3
 8000e74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	40fc      	lsrs	r4, r7
 8000e7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e80:	e9c6 5400 	strd	r5, r4, [r6]
 8000e84:	2700      	movs	r7, #0
 8000e86:	e747      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e90:	4095      	lsls	r5, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	fa21 f303 	lsr.w	r3, r1, r3
 8000e9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e9e:	4338      	orrs	r0, r7
 8000ea0:	0c01      	lsrs	r1, r0, #16
 8000ea2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ea6:	fa1f f885 	uxth.w	r8, r5
 8000eaa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb2:	fb07 f308 	mul.w	r3, r7, r8
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ebc:	d907      	bls.n	8000ece <__udivmoddi4+0x256>
 8000ebe:	1869      	adds	r1, r5, r1
 8000ec0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ec4:	d22f      	bcs.n	8000f26 <__udivmoddi4+0x2ae>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d92d      	bls.n	8000f26 <__udivmoddi4+0x2ae>
 8000eca:	3f02      	subs	r7, #2
 8000ecc:	4429      	add	r1, r5
 8000ece:	1acb      	subs	r3, r1, r3
 8000ed0:	b281      	uxth	r1, r0
 8000ed2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ede:	fb00 f308 	mul.w	r3, r0, r8
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x27e>
 8000ee6:	1869      	adds	r1, r5, r1
 8000ee8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eec:	d217      	bcs.n	8000f1e <__udivmoddi4+0x2a6>
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	d915      	bls.n	8000f1e <__udivmoddi4+0x2a6>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	4429      	add	r1, r5
 8000ef6:	1ac9      	subs	r1, r1, r3
 8000ef8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000efc:	e73b      	b.n	8000d76 <__udivmoddi4+0xfe>
 8000efe:	4637      	mov	r7, r6
 8000f00:	4630      	mov	r0, r6
 8000f02:	e709      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f04:	4607      	mov	r7, r0
 8000f06:	e6e7      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f08:	4618      	mov	r0, r3
 8000f0a:	e6fb      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f0c:	4541      	cmp	r1, r8
 8000f0e:	d2ab      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f10:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f14:	eb69 020e 	sbc.w	r2, r9, lr
 8000f18:	3801      	subs	r0, #1
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	e7a4      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f1e:	4660      	mov	r0, ip
 8000f20:	e7e9      	b.n	8000ef6 <__udivmoddi4+0x27e>
 8000f22:	4618      	mov	r0, r3
 8000f24:	e795      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f26:	4667      	mov	r7, ip
 8000f28:	e7d1      	b.n	8000ece <__udivmoddi4+0x256>
 8000f2a:	4681      	mov	r9, r0
 8000f2c:	e77c      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f2e:	3802      	subs	r0, #2
 8000f30:	442c      	add	r4, r5
 8000f32:	e747      	b.n	8000dc4 <__udivmoddi4+0x14c>
 8000f34:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f38:	442b      	add	r3, r5
 8000f3a:	e72f      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	e708      	b.n	8000d52 <__udivmoddi4+0xda>
 8000f40:	4637      	mov	r7, r6
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0xa0>

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f4e:	463b      	mov	r3, r7
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000f5a:	4b30      	ldr	r3, [pc, #192]	; (800101c <MX_ADC1_Init+0xd4>)
 8000f5c:	4a30      	ldr	r2, [pc, #192]	; (8001020 <MX_ADC1_Init+0xd8>)
 8000f5e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f60:	4b2e      	ldr	r3, [pc, #184]	; (800101c <MX_ADC1_Init+0xd4>)
 8000f62:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f66:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f68:	4b2c      	ldr	r3, [pc, #176]	; (800101c <MX_ADC1_Init+0xd4>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000f6e:	4b2b      	ldr	r3, [pc, #172]	; (800101c <MX_ADC1_Init+0xd4>)
 8000f70:	2201      	movs	r2, #1
 8000f72:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f74:	4b29      	ldr	r3, [pc, #164]	; (800101c <MX_ADC1_Init+0xd4>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f7a:	4b28      	ldr	r3, [pc, #160]	; (800101c <MX_ADC1_Init+0xd4>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000f82:	4b26      	ldr	r3, [pc, #152]	; (800101c <MX_ADC1_Init+0xd4>)
 8000f84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f88:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 8000f8a:	4b24      	ldr	r3, [pc, #144]	; (800101c <MX_ADC1_Init+0xd4>)
 8000f8c:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8000f90:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f92:	4b22      	ldr	r3, [pc, #136]	; (800101c <MX_ADC1_Init+0xd4>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000f98:	4b20      	ldr	r3, [pc, #128]	; (800101c <MX_ADC1_Init+0xd4>)
 8000f9a:	2203      	movs	r2, #3
 8000f9c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f9e:	4b1f      	ldr	r3, [pc, #124]	; (800101c <MX_ADC1_Init+0xd4>)
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000fa6:	4b1d      	ldr	r3, [pc, #116]	; (800101c <MX_ADC1_Init+0xd4>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fac:	481b      	ldr	r0, [pc, #108]	; (800101c <MX_ADC1_Init+0xd4>)
 8000fae:	f002 f839 	bl	8003024 <HAL_ADC_Init>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000fb8:	f001 f98a 	bl	80022d0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000fbc:	230a      	movs	r3, #10
 8000fbe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fc8:	463b      	mov	r3, r7
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4813      	ldr	r0, [pc, #76]	; (800101c <MX_ADC1_Init+0xd4>)
 8000fce:	f002 fabd 	bl	800354c <HAL_ADC_ConfigChannel>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000fd8:	f001 f97a 	bl	80022d0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000fdc:	230b      	movs	r3, #11
 8000fde:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fe4:	463b      	mov	r3, r7
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	480c      	ldr	r0, [pc, #48]	; (800101c <MX_ADC1_Init+0xd4>)
 8000fea:	f002 faaf 	bl	800354c <HAL_ADC_ConfigChannel>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000ff4:	f001 f96c 	bl	80022d0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000ff8:	230c      	movs	r3, #12
 8000ffa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001000:	463b      	mov	r3, r7
 8001002:	4619      	mov	r1, r3
 8001004:	4805      	ldr	r0, [pc, #20]	; (800101c <MX_ADC1_Init+0xd4>)
 8001006:	f002 faa1 	bl	800354c <HAL_ADC_ConfigChannel>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8001010:	f001 f95e 	bl	80022d0 <Error_Handler>
  }

}
 8001014:	bf00      	nop
 8001016:	3710      	adds	r7, #16
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	20000270 	.word	0x20000270
 8001020:	40012000 	.word	0x40012000

08001024 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b08a      	sub	sp, #40	; 0x28
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102c:	f107 0314 	add.w	r3, r7, #20
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	60da      	str	r2, [r3, #12]
 800103a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a40      	ldr	r2, [pc, #256]	; (8001144 <HAL_ADC_MspInit+0x120>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d179      	bne.n	800113a <HAL_ADC_MspInit+0x116>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	613b      	str	r3, [r7, #16]
 800104a:	4b3f      	ldr	r3, [pc, #252]	; (8001148 <HAL_ADC_MspInit+0x124>)
 800104c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104e:	4a3e      	ldr	r2, [pc, #248]	; (8001148 <HAL_ADC_MspInit+0x124>)
 8001050:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001054:	6453      	str	r3, [r2, #68]	; 0x44
 8001056:	4b3c      	ldr	r3, [pc, #240]	; (8001148 <HAL_ADC_MspInit+0x124>)
 8001058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800105e:	613b      	str	r3, [r7, #16]
 8001060:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	60fb      	str	r3, [r7, #12]
 8001066:	4b38      	ldr	r3, [pc, #224]	; (8001148 <HAL_ADC_MspInit+0x124>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	4a37      	ldr	r2, [pc, #220]	; (8001148 <HAL_ADC_MspInit+0x124>)
 800106c:	f043 0304 	orr.w	r3, r3, #4
 8001070:	6313      	str	r3, [r2, #48]	; 0x30
 8001072:	4b35      	ldr	r3, [pc, #212]	; (8001148 <HAL_ADC_MspInit+0x124>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	f003 0304 	and.w	r3, r3, #4
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	60bb      	str	r3, [r7, #8]
 8001082:	4b31      	ldr	r3, [pc, #196]	; (8001148 <HAL_ADC_MspInit+0x124>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	4a30      	ldr	r2, [pc, #192]	; (8001148 <HAL_ADC_MspInit+0x124>)
 8001088:	f043 0301 	orr.w	r3, r3, #1
 800108c:	6313      	str	r3, [r2, #48]	; 0x30
 800108e:	4b2e      	ldr	r3, [pc, #184]	; (8001148 <HAL_ADC_MspInit+0x124>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	60bb      	str	r3, [r7, #8]
 8001098:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> ADC1_IN13
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800109a:	230f      	movs	r3, #15
 800109c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800109e:	2303      	movs	r3, #3
 80010a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010a6:	f107 0314 	add.w	r3, r7, #20
 80010aa:	4619      	mov	r1, r3
 80010ac:	4827      	ldr	r0, [pc, #156]	; (800114c <HAL_ADC_MspInit+0x128>)
 80010ae:	f003 f999 	bl	80043e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80010b2:	2307      	movs	r3, #7
 80010b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010b6:	2303      	movs	r3, #3
 80010b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010be:	f107 0314 	add.w	r3, r7, #20
 80010c2:	4619      	mov	r1, r3
 80010c4:	4822      	ldr	r0, [pc, #136]	; (8001150 <HAL_ADC_MspInit+0x12c>)
 80010c6:	f003 f98d 	bl	80043e4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80010ca:	4b22      	ldr	r3, [pc, #136]	; (8001154 <HAL_ADC_MspInit+0x130>)
 80010cc:	4a22      	ldr	r2, [pc, #136]	; (8001158 <HAL_ADC_MspInit+0x134>)
 80010ce:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80010d0:	4b20      	ldr	r3, [pc, #128]	; (8001154 <HAL_ADC_MspInit+0x130>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010d6:	4b1f      	ldr	r3, [pc, #124]	; (8001154 <HAL_ADC_MspInit+0x130>)
 80010d8:	2200      	movs	r2, #0
 80010da:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010dc:	4b1d      	ldr	r3, [pc, #116]	; (8001154 <HAL_ADC_MspInit+0x130>)
 80010de:	2200      	movs	r2, #0
 80010e0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80010e2:	4b1c      	ldr	r3, [pc, #112]	; (8001154 <HAL_ADC_MspInit+0x130>)
 80010e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010e8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010ea:	4b1a      	ldr	r3, [pc, #104]	; (8001154 <HAL_ADC_MspInit+0x130>)
 80010ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010f0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010f2:	4b18      	ldr	r3, [pc, #96]	; (8001154 <HAL_ADC_MspInit+0x130>)
 80010f4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010f8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80010fa:	4b16      	ldr	r3, [pc, #88]	; (8001154 <HAL_ADC_MspInit+0x130>)
 80010fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001100:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001102:	4b14      	ldr	r3, [pc, #80]	; (8001154 <HAL_ADC_MspInit+0x130>)
 8001104:	2200      	movs	r2, #0
 8001106:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001108:	4b12      	ldr	r3, [pc, #72]	; (8001154 <HAL_ADC_MspInit+0x130>)
 800110a:	2200      	movs	r2, #0
 800110c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800110e:	4811      	ldr	r0, [pc, #68]	; (8001154 <HAL_ADC_MspInit+0x130>)
 8001110:	f002 fdd8 	bl	8003cc4 <HAL_DMA_Init>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800111a:	f001 f8d9 	bl	80022d0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a0c      	ldr	r2, [pc, #48]	; (8001154 <HAL_ADC_MspInit+0x130>)
 8001122:	639a      	str	r2, [r3, #56]	; 0x38
 8001124:	4a0b      	ldr	r2, [pc, #44]	; (8001154 <HAL_ADC_MspInit+0x130>)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800112a:	2200      	movs	r2, #0
 800112c:	2100      	movs	r1, #0
 800112e:	2012      	movs	r0, #18
 8001130:	f002 fd91 	bl	8003c56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001134:	2012      	movs	r0, #18
 8001136:	f002 fdaa 	bl	8003c8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800113a:	bf00      	nop
 800113c:	3728      	adds	r7, #40	; 0x28
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40012000 	.word	0x40012000
 8001148:	40023800 	.word	0x40023800
 800114c:	40020800 	.word	0x40020800
 8001150:	40020000 	.word	0x40020000
 8001154:	200002b8 	.word	0x200002b8
 8001158:	40026410 	.word	0x40026410

0800115c <AS5147Read>:
/*
 * Read Register
 * @param	address : AS5147 regigster address
 * @return	16 bit data
 */
uint16_t AS5147Read(uint16_t address) {
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af02      	add	r7, sp, #8
 8001162:	4603      	mov	r3, r0
 8001164:	80fb      	strh	r3, [r7, #6]
	uint8_t txdata[2] = {((AS5147AddParityBit(address | 0x4000) & 0xFF00) >> 8), (AS5147AddParityBit(address | 0x4000) & 0x00FF)};
 8001166:	88fb      	ldrh	r3, [r7, #6]
 8001168:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800116c:	b29b      	uxth	r3, r3
 800116e:	4618      	mov	r0, r3
 8001170:	f000 f844 	bl	80011fc <AS5147AddParityBit>
 8001174:	4603      	mov	r3, r0
 8001176:	121b      	asrs	r3, r3, #8
 8001178:	b2db      	uxtb	r3, r3
 800117a:	733b      	strb	r3, [r7, #12]
 800117c:	88fb      	ldrh	r3, [r7, #6]
 800117e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001182:	b29b      	uxth	r3, r3
 8001184:	4618      	mov	r0, r3
 8001186:	f000 f839 	bl	80011fc <AS5147AddParityBit>
 800118a:	4603      	mov	r3, r0
 800118c:	b2db      	uxtb	r3, r3
 800118e:	737b      	strb	r3, [r7, #13]
	uint8_t rxdata[2] = {};
 8001190:	2300      	movs	r3, #0
 8001192:	813b      	strh	r3, [r7, #8]
	AS5147Select();
 8001194:	f000 f81a 	bl	80011cc <AS5147Select>
	HAL_SPI_TransmitReceive(&AS5147_SPI_HANDLER, txdata, rxdata, 2, 1);
 8001198:	f107 0208 	add.w	r2, r7, #8
 800119c:	f107 010c 	add.w	r1, r7, #12
 80011a0:	2301      	movs	r3, #1
 80011a2:	9300      	str	r3, [sp, #0]
 80011a4:	2302      	movs	r3, #2
 80011a6:	4808      	ldr	r0, [pc, #32]	; (80011c8 <AS5147Read+0x6c>)
 80011a8:	f003 ffa2 	bl	80050f0 <HAL_SPI_TransmitReceive>
	AS5147Deselect();
 80011ac:	f000 f81a 	bl	80011e4 <AS5147Deselect>
	return ((rxdata[0] << 8) | rxdata[1]);
 80011b0:	7a3b      	ldrb	r3, [r7, #8]
 80011b2:	021b      	lsls	r3, r3, #8
 80011b4:	b21a      	sxth	r2, r3
 80011b6:	7a7b      	ldrb	r3, [r7, #9]
 80011b8:	b21b      	sxth	r3, r3
 80011ba:	4313      	orrs	r3, r2
 80011bc:	b21b      	sxth	r3, r3
 80011be:	b29b      	uxth	r3, r3
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3710      	adds	r7, #16
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20006544 	.word	0x20006544

080011cc <AS5147Select>:
/*
 * Select
 * @param
 * @return
 */
static void AS5147Select(void) {
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(AS5147_CS_PORT, AS5147_CS_PIN, GPIO_PIN_RESET);
 80011d0:	2200      	movs	r2, #0
 80011d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011d6:	4802      	ldr	r0, [pc, #8]	; (80011e0 <AS5147Select+0x14>)
 80011d8:	f003 fab6 	bl	8004748 <HAL_GPIO_WritePin>
}
 80011dc:	bf00      	nop
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	40020000 	.word	0x40020000

080011e4 <AS5147Deselect>:
/*
 * Deselect
 * @param
 * @return
 */
static void AS5147Deselect(void) {
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(AS5147_CS_PORT, AS5147_CS_PIN, GPIO_PIN_SET);
 80011e8:	2201      	movs	r2, #1
 80011ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011ee:	4802      	ldr	r0, [pc, #8]	; (80011f8 <AS5147Deselect+0x14>)
 80011f0:	f003 faaa 	bl	8004748 <HAL_GPIO_WritePin>
}
 80011f4:	bf00      	nop
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40020000 	.word	0x40020000

080011fc <AS5147AddParityBit>:
/*
 * Parity Calculation
 * @param	raw_data
 * @return	parity bit + raw_data
 */
static uint16_t AS5147AddParityBit(uint16_t raw_data) {
 80011fc:	b480      	push	{r7}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	80fb      	strh	r3, [r7, #6]
	uint16_t parity = raw_data;
 8001206:	88fb      	ldrh	r3, [r7, #6]
 8001208:	81fb      	strh	r3, [r7, #14]
	parity ^= parity >> 8;
 800120a:	89fb      	ldrh	r3, [r7, #14]
 800120c:	0a1b      	lsrs	r3, r3, #8
 800120e:	b29a      	uxth	r2, r3
 8001210:	89fb      	ldrh	r3, [r7, #14]
 8001212:	4053      	eors	r3, r2
 8001214:	81fb      	strh	r3, [r7, #14]
	parity ^= parity >> 4;
 8001216:	89fb      	ldrh	r3, [r7, #14]
 8001218:	091b      	lsrs	r3, r3, #4
 800121a:	b29a      	uxth	r2, r3
 800121c:	89fb      	ldrh	r3, [r7, #14]
 800121e:	4053      	eors	r3, r2
 8001220:	81fb      	strh	r3, [r7, #14]
	parity ^= parity >> 2;
 8001222:	89fb      	ldrh	r3, [r7, #14]
 8001224:	089b      	lsrs	r3, r3, #2
 8001226:	b29a      	uxth	r2, r3
 8001228:	89fb      	ldrh	r3, [r7, #14]
 800122a:	4053      	eors	r3, r2
 800122c:	81fb      	strh	r3, [r7, #14]
	parity ^= parity >> 1;
 800122e:	89fb      	ldrh	r3, [r7, #14]
 8001230:	085b      	lsrs	r3, r3, #1
 8001232:	b29a      	uxth	r2, r3
 8001234:	89fb      	ldrh	r3, [r7, #14]
 8001236:	4053      	eors	r3, r2
 8001238:	81fb      	strh	r3, [r7, #14]

	return (raw_data | ((parity & 0x0001) << 15));
 800123a:	89fb      	ldrh	r3, [r7, #14]
 800123c:	03db      	lsls	r3, r3, #15
 800123e:	b21a      	sxth	r2, r3
 8001240:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001244:	4313      	orrs	r3, r2
 8001246:	b21b      	sxth	r3, r3
 8001248:	b29b      	uxth	r3, r3
}
 800124a:	4618      	mov	r0, r3
 800124c:	3714      	adds	r7, #20
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
	...

08001258 <BLDCVqConstControl>:
static uint16_t curt_sense_data[ADC_CURT_SENSE_BUFFER_SIZE] = {};
static uint16_t curt_sense_data_log[ADC_CURT_SENSE_BUFFER_SIZE][ADC_MOV_AVE_SIZE] = {};
static uint32_t curt_sense_data_ave[ADC_CURT_SENSE_BUFFER_SIZE] = {};
static uint32_t curt_sense_data_offset[ADC_CURT_SENSE_BUFFER_SIZE] = {};

void BLDCVqConstControl(float vol_d, float vol_q) {
 8001258:	b5b0      	push	{r4, r5, r7, lr}
 800125a:	b094      	sub	sp, #80	; 0x50
 800125c:	af00      	add	r7, sp, #0
 800125e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001262:	edc7 0a00 	vstr	s1, [r7]
	float curt_alpha, curt_beta; 	//I_alpha, I_beta current[A]
    float curt_d, curt_q;			//Id, Iq current[A]

    static volatile float vol_u, vol_v, vol_w;
    volatile float vol_alpha, vol_beta;
    const float pwm_max  	= __HAL_TIM_GET_AUTORELOAD(&htim8);
 8001266:	4b30      	ldr	r3, [pc, #192]	; (8001328 <BLDCVqConstControl+0xd0>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800126c:	ee07 3a90 	vmov	s15, r3
 8001270:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001274:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    const float pwm_half 	= __HAL_TIM_GET_AUTORELOAD(&htim8) / 2.0f;
 8001278:	4b2b      	ldr	r3, [pc, #172]	; (8001328 <BLDCVqConstControl+0xd0>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800127e:	ee07 3a90 	vmov	s15, r3
 8001282:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001286:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800128a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800128e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    const float pwm_per_vol = __HAL_TIM_GET_AUTORELOAD(&htim8) / 18.0f;		//TODO:18.0 -> measured voltage
 8001292:	4b25      	ldr	r3, [pc, #148]	; (8001328 <BLDCVqConstControl+0xd0>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001298:	ee07 3a90 	vmov	s15, r3
 800129c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012a0:	eef3 6a02 	vmov.f32	s13, #50	; 0x41900000  18.0
 80012a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012a8:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

    float theta, sinth, costh;
	uint16_t theta_data;

	theta_data = (AS5147Read(AS5147_ANGLECOM) & 0x3FFF);		//mask lower 14bit
 80012ac:	f643 70ff 	movw	r0, #16383	; 0x3fff
 80012b0:	f7ff ff54 	bl	800115c <AS5147Read>
 80012b4:	4603      	mov	r3, r0
 80012b6:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80012ba:	87fb      	strh	r3, [r7, #62]	; 0x3e
	theta = fmodf(((float)theta_data + ((float)0x3FFF / 12) - 361), ((float)0x3FFF / 12)) * ((float)(2 * M_PI * 12) / 0x3FFF);
 80012bc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80012be:	ee07 3a90 	vmov	s15, r3
 80012c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012c6:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800132c <BLDCVqConstControl+0xd4>
 80012ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80012ce:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001330 <BLDCVqConstControl+0xd8>
 80012d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80012d6:	eddf 0a15 	vldr	s1, [pc, #84]	; 800132c <BLDCVqConstControl+0xd4>
 80012da:	eeb0 0a67 	vmov.f32	s0, s15
 80012de:	f008 fd49 	bl	8009d74 <fmodf>
 80012e2:	eeb0 7a40 	vmov.f32	s14, s0
 80012e6:	eddf 7a13 	vldr	s15, [pc, #76]	; 8001334 <BLDCVqConstControl+0xdc>
 80012ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012ee:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	sinth = sinf(theta);
 80012f2:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 80012f6:	f008 fcfb 	bl	8009cf0 <sinf>
 80012fa:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
	costh = cosf(theta);
 80012fe:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 8001302:	f008 fc63 	bl	8009bcc <cosf>
 8001306:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30

	for (int8_t i = 0; i < ADC_CURT_SENSE_BUFFER_SIZE; i++) {
 800130a:	2300      	movs	r3, #0
 800130c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001310:	e04b      	b.n	80013aa <BLDCVqConstControl+0x152>
		curt_sense_data_ave[i] = 0;
 8001312:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8001316:	4a08      	ldr	r2, [pc, #32]	; (8001338 <BLDCVqConstControl+0xe0>)
 8001318:	2100      	movs	r1, #0
 800131a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int16_t j = 0; j < ADC_MOV_AVE_SIZE; j++) {
 800131e:	2300      	movs	r3, #0
 8001320:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8001324:	e028      	b.n	8001378 <BLDCVqConstControl+0x120>
 8001326:	bf00      	nop
 8001328:	2000659c 	.word	0x2000659c
 800132c:	44aaa800 	.word	0x44aaa800
 8001330:	43b48000 	.word	0x43b48000
 8001334:	3b96ce3f 	.word	0x3b96ce3f
 8001338:	20000230 	.word	0x20000230
			curt_sense_data_ave[i] += curt_sense_data_log[i][j];
 800133c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8001340:	4ad7      	ldr	r2, [pc, #860]	; (80016a0 <BLDCVqConstControl+0x448>)
 8001342:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001346:	f997 204f 	ldrsb.w	r2, [r7, #79]	; 0x4f
 800134a:	f9b7 004c 	ldrsh.w	r0, [r7, #76]	; 0x4c
 800134e:	4cd5      	ldr	r4, [pc, #852]	; (80016a4 <BLDCVqConstControl+0x44c>)
 8001350:	4613      	mov	r3, r2
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	4413      	add	r3, r2
 8001356:	4403      	add	r3, r0
 8001358:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 800135c:	461a      	mov	r2, r3
 800135e:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8001362:	440a      	add	r2, r1
 8001364:	49ce      	ldr	r1, [pc, #824]	; (80016a0 <BLDCVqConstControl+0x448>)
 8001366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int16_t j = 0; j < ADC_MOV_AVE_SIZE; j++) {
 800136a:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800136e:	b29b      	uxth	r3, r3
 8001370:	3301      	adds	r3, #1
 8001372:	b29b      	uxth	r3, r3
 8001374:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8001378:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800137c:	2b04      	cmp	r3, #4
 800137e:	dddd      	ble.n	800133c <BLDCVqConstControl+0xe4>
		}
		curt_sense_data_ave[i] /= ADC_MOV_AVE_SIZE;
 8001380:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8001384:	4ac6      	ldr	r2, [pc, #792]	; (80016a0 <BLDCVqConstControl+0x448>)
 8001386:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800138a:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800138e:	49c6      	ldr	r1, [pc, #792]	; (80016a8 <BLDCVqConstControl+0x450>)
 8001390:	fba1 1202 	umull	r1, r2, r1, r2
 8001394:	0892      	lsrs	r2, r2, #2
 8001396:	49c2      	ldr	r1, [pc, #776]	; (80016a0 <BLDCVqConstControl+0x448>)
 8001398:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int8_t i = 0; i < ADC_CURT_SENSE_BUFFER_SIZE; i++) {
 800139c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	3301      	adds	r3, #1
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80013aa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d9af      	bls.n	8001312 <BLDCVqConstControl+0xba>
	}

	//current control
	curt_u = ((int)curt_sense_data_ave[0] - (int)curt_sense_data_offset[0]) * 3.3f / 4096.0f * 25.0f;	//TODO:use amplifier gain
 80013b2:	4bbb      	ldr	r3, [pc, #748]	; (80016a0 <BLDCVqConstControl+0x448>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	461a      	mov	r2, r3
 80013b8:	4bbc      	ldr	r3, [pc, #752]	; (80016ac <BLDCVqConstControl+0x454>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	ee07 3a90 	vmov	s15, r3
 80013c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013c6:	ed9f 7aba 	vldr	s14, [pc, #744]	; 80016b0 <BLDCVqConstControl+0x458>
 80013ca:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013ce:	eddf 6ab9 	vldr	s13, [pc, #740]	; 80016b4 <BLDCVqConstControl+0x45c>
 80013d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013d6:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80013da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013de:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	curt_v = ((int)curt_sense_data_ave[1] - (int)curt_sense_data_offset[1]) * 3.3f / 4096.0f * 25.0f;
 80013e2:	4baf      	ldr	r3, [pc, #700]	; (80016a0 <BLDCVqConstControl+0x448>)
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	461a      	mov	r2, r3
 80013e8:	4bb0      	ldr	r3, [pc, #704]	; (80016ac <BLDCVqConstControl+0x454>)
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	ee07 3a90 	vmov	s15, r3
 80013f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013f6:	ed9f 7aae 	vldr	s14, [pc, #696]	; 80016b0 <BLDCVqConstControl+0x458>
 80013fa:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013fe:	eddf 6aad 	vldr	s13, [pc, #692]	; 80016b4 <BLDCVqConstControl+0x45c>
 8001402:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001406:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800140a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800140e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	curt_w = ((int)curt_sense_data_ave[2] - (int)curt_sense_data_offset[2]) * 3.3f / 4096.0f * 25.0f;
 8001412:	4ba3      	ldr	r3, [pc, #652]	; (80016a0 <BLDCVqConstControl+0x448>)
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	461a      	mov	r2, r3
 8001418:	4ba4      	ldr	r3, [pc, #656]	; (80016ac <BLDCVqConstControl+0x454>)
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	ee07 3a90 	vmov	s15, r3
 8001422:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001426:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 80016b0 <BLDCVqConstControl+0x458>
 800142a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800142e:	eddf 6aa1 	vldr	s13, [pc, #644]	; 80016b4 <BLDCVqConstControl+0x45c>
 8001432:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001436:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800143a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800143e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	else if (vol_v >= vol_w && vol_v >= vol_u) {curt_v = -curt_w - curt_u;}
	else if (vol_w >= vol_u && vol_w >= vol_v) {curt_w = -curt_u - curt_v;}
	*/

	//current UVW -> alpha,beta
	curt_alpha = 0.8169496580928f * (curt_u - 0.5 * (curt_v + curt_w));
 8001442:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001444:	f7ff f880 	bl	8000548 <__aeabi_f2d>
 8001448:	4604      	mov	r4, r0
 800144a:	460d      	mov	r5, r1
 800144c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001450:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001454:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001458:	ee17 0a90 	vmov	r0, s15
 800145c:	f7ff f874 	bl	8000548 <__aeabi_f2d>
 8001460:	f04f 0200 	mov.w	r2, #0
 8001464:	4b94      	ldr	r3, [pc, #592]	; (80016b8 <BLDCVqConstControl+0x460>)
 8001466:	f7ff f8c7 	bl	80005f8 <__aeabi_dmul>
 800146a:	4602      	mov	r2, r0
 800146c:	460b      	mov	r3, r1
 800146e:	4620      	mov	r0, r4
 8001470:	4629      	mov	r1, r5
 8001472:	f7fe ff09 	bl	8000288 <__aeabi_dsub>
 8001476:	4603      	mov	r3, r0
 8001478:	460c      	mov	r4, r1
 800147a:	4618      	mov	r0, r3
 800147c:	4621      	mov	r1, r4
 800147e:	a384      	add	r3, pc, #528	; (adr r3, 8001690 <BLDCVqConstControl+0x438>)
 8001480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001484:	f7ff f8b8 	bl	80005f8 <__aeabi_dmul>
 8001488:	4603      	mov	r3, r0
 800148a:	460c      	mov	r4, r1
 800148c:	4618      	mov	r0, r3
 800148e:	4621      	mov	r1, r4
 8001490:	f7ff fb8a 	bl	8000ba8 <__aeabi_d2f>
 8001494:	4603      	mov	r3, r0
 8001496:	623b      	str	r3, [r7, #32]
	curt_beta  = 0.7071067811866f * (curt_v - curt_w);
 8001498:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800149c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80014a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014a4:	ed9f 7a85 	vldr	s14, [pc, #532]	; 80016bc <BLDCVqConstControl+0x464>
 80014a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014ac:	edc7 7a07 	vstr	s15, [r7, #28]

	//current alpha,beta -> dq
	curt_d =  curt_alpha * costh + curt_beta * sinth;
 80014b0:	ed97 7a08 	vldr	s14, [r7, #32]
 80014b4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80014b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80014c0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80014c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014cc:	edc7 7a06 	vstr	s15, [r7, #24]
	curt_q = -curt_alpha * sinth + curt_beta * costh;
 80014d0:	edd7 7a08 	vldr	s15, [r7, #32]
 80014d4:	eeb1 7a67 	vneg.f32	s14, s15
 80014d8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80014dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80014e4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80014e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014f0:	edc7 7a05 	vstr	s15, [r7, #20]


	//Vd,Vq control
	//dq -> alpha,beta
	vol_alpha = vol_d * costh - vol_q * sinth;
 80014f4:	ed97 7a01 	vldr	s14, [r7, #4]
 80014f8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80014fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001500:	edd7 6a00 	vldr	s13, [r7]
 8001504:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001508:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800150c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001510:	edc7 7a04 	vstr	s15, [r7, #16]
	vol_beta  = vol_d * sinth + vol_q * costh;
 8001514:	ed97 7a01 	vldr	s14, [r7, #4]
 8001518:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800151c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001520:	edd7 6a00 	vldr	s13, [r7]
 8001524:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001528:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800152c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001530:	edc7 7a03 	vstr	s15, [r7, #12]

	//alpha,beta -> UVW
	vol_u =  0.81649658f * vol_alpha;
 8001534:	edd7 7a04 	vldr	s15, [r7, #16]
 8001538:	ed9f 7a61 	vldr	s14, [pc, #388]	; 80016c0 <BLDCVqConstControl+0x468>
 800153c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001540:	4b60      	ldr	r3, [pc, #384]	; (80016c4 <BLDCVqConstControl+0x46c>)
 8001542:	edc3 7a00 	vstr	s15, [r3]
    vol_v = -0.40824829f * vol_alpha + 0.707106781 * vol_beta;
 8001546:	edd7 7a04 	vldr	s15, [r7, #16]
 800154a:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 80016c8 <BLDCVqConstControl+0x470>
 800154e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001552:	ee17 0a90 	vmov	r0, s15
 8001556:	f7fe fff7 	bl	8000548 <__aeabi_f2d>
 800155a:	4604      	mov	r4, r0
 800155c:	460d      	mov	r5, r1
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	4618      	mov	r0, r3
 8001562:	f7fe fff1 	bl	8000548 <__aeabi_f2d>
 8001566:	a34c      	add	r3, pc, #304	; (adr r3, 8001698 <BLDCVqConstControl+0x440>)
 8001568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800156c:	f7ff f844 	bl	80005f8 <__aeabi_dmul>
 8001570:	4602      	mov	r2, r0
 8001572:	460b      	mov	r3, r1
 8001574:	4620      	mov	r0, r4
 8001576:	4629      	mov	r1, r5
 8001578:	f7fe fe88 	bl	800028c <__adddf3>
 800157c:	4603      	mov	r3, r0
 800157e:	460c      	mov	r4, r1
 8001580:	4618      	mov	r0, r3
 8001582:	4621      	mov	r1, r4
 8001584:	f7ff fb10 	bl	8000ba8 <__aeabi_d2f>
 8001588:	4602      	mov	r2, r0
 800158a:	4b50      	ldr	r3, [pc, #320]	; (80016cc <BLDCVqConstControl+0x474>)
 800158c:	601a      	str	r2, [r3, #0]
    vol_w = -0.40824829f * vol_alpha - 0.707106781 * vol_beta;
 800158e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001592:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 80016c8 <BLDCVqConstControl+0x470>
 8001596:	ee67 7a87 	vmul.f32	s15, s15, s14
 800159a:	ee17 0a90 	vmov	r0, s15
 800159e:	f7fe ffd3 	bl	8000548 <__aeabi_f2d>
 80015a2:	4604      	mov	r4, r0
 80015a4:	460d      	mov	r5, r1
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7fe ffcd 	bl	8000548 <__aeabi_f2d>
 80015ae:	a33a      	add	r3, pc, #232	; (adr r3, 8001698 <BLDCVqConstControl+0x440>)
 80015b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b4:	f7ff f820 	bl	80005f8 <__aeabi_dmul>
 80015b8:	4602      	mov	r2, r0
 80015ba:	460b      	mov	r3, r1
 80015bc:	4620      	mov	r0, r4
 80015be:	4629      	mov	r1, r5
 80015c0:	f7fe fe62 	bl	8000288 <__aeabi_dsub>
 80015c4:	4603      	mov	r3, r0
 80015c6:	460c      	mov	r4, r1
 80015c8:	4618      	mov	r0, r3
 80015ca:	4621      	mov	r1, r4
 80015cc:	f7ff faec 	bl	8000ba8 <__aeabi_d2f>
 80015d0:	4602      	mov	r2, r0
 80015d2:	4b3f      	ldr	r3, [pc, #252]	; (80016d0 <BLDCVqConstControl+0x478>)
 80015d4:	601a      	str	r2, [r3, #0]

	if (5000 <= idx && idx < 6000) {
 80015d6:	4b3f      	ldr	r3, [pc, #252]	; (80016d4 <BLDCVqConstControl+0x47c>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f241 3287 	movw	r2, #4999	; 0x1387
 80015de:	4293      	cmp	r3, r2
 80015e0:	f340 808b 	ble.w	80016fa <BLDCVqConstControl+0x4a2>
 80015e4:	4b3b      	ldr	r3, [pc, #236]	; (80016d4 <BLDCVqConstControl+0x47c>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f241 726f 	movw	r2, #5999	; 0x176f
 80015ec:	4293      	cmp	r3, r2
 80015ee:	f300 8084 	bgt.w	80016fa <BLDCVqConstControl+0x4a2>
		g_curt[idx - 5000][0] = vol_u;
 80015f2:	4b38      	ldr	r3, [pc, #224]	; (80016d4 <BLDCVqConstControl+0x47c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f5a3 529c 	sub.w	r2, r3, #4992	; 0x1380
 80015fa:	3a08      	subs	r2, #8
 80015fc:	4b31      	ldr	r3, [pc, #196]	; (80016c4 <BLDCVqConstControl+0x46c>)
 80015fe:	6819      	ldr	r1, [r3, #0]
 8001600:	4835      	ldr	r0, [pc, #212]	; (80016d8 <BLDCVqConstControl+0x480>)
 8001602:	4613      	mov	r3, r2
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	4413      	add	r3, r2
 8001608:	00db      	lsls	r3, r3, #3
 800160a:	4403      	add	r3, r0
 800160c:	6019      	str	r1, [r3, #0]
		g_curt[idx - 5000][1] = vol_v;
 800160e:	4b31      	ldr	r3, [pc, #196]	; (80016d4 <BLDCVqConstControl+0x47c>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f5a3 529c 	sub.w	r2, r3, #4992	; 0x1380
 8001616:	3a08      	subs	r2, #8
 8001618:	4b2c      	ldr	r3, [pc, #176]	; (80016cc <BLDCVqConstControl+0x474>)
 800161a:	6819      	ldr	r1, [r3, #0]
 800161c:	482e      	ldr	r0, [pc, #184]	; (80016d8 <BLDCVqConstControl+0x480>)
 800161e:	4613      	mov	r3, r2
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	4413      	add	r3, r2
 8001624:	00db      	lsls	r3, r3, #3
 8001626:	4403      	add	r3, r0
 8001628:	3304      	adds	r3, #4
 800162a:	6019      	str	r1, [r3, #0]
		g_curt[idx - 5000][2] = vol_w;
 800162c:	4b29      	ldr	r3, [pc, #164]	; (80016d4 <BLDCVqConstControl+0x47c>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f5a3 529c 	sub.w	r2, r3, #4992	; 0x1380
 8001634:	3a08      	subs	r2, #8
 8001636:	4b26      	ldr	r3, [pc, #152]	; (80016d0 <BLDCVqConstControl+0x478>)
 8001638:	6819      	ldr	r1, [r3, #0]
 800163a:	4827      	ldr	r0, [pc, #156]	; (80016d8 <BLDCVqConstControl+0x480>)
 800163c:	4613      	mov	r3, r2
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	4413      	add	r3, r2
 8001642:	00db      	lsls	r3, r3, #3
 8001644:	4403      	add	r3, r0
 8001646:	3308      	adds	r3, #8
 8001648:	6019      	str	r1, [r3, #0]
		g_curt[idx - 5000][3] = curt_u;
 800164a:	4b22      	ldr	r3, [pc, #136]	; (80016d4 <BLDCVqConstControl+0x47c>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f5a3 529c 	sub.w	r2, r3, #4992	; 0x1380
 8001652:	3a08      	subs	r2, #8
 8001654:	4920      	ldr	r1, [pc, #128]	; (80016d8 <BLDCVqConstControl+0x480>)
 8001656:	4613      	mov	r3, r2
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	4413      	add	r3, r2
 800165c:	00db      	lsls	r3, r3, #3
 800165e:	440b      	add	r3, r1
 8001660:	330c      	adds	r3, #12
 8001662:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001664:	601a      	str	r2, [r3, #0]
		g_curt[idx - 5000][4] = curt_v;
 8001666:	4b1b      	ldr	r3, [pc, #108]	; (80016d4 <BLDCVqConstControl+0x47c>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f5a3 529c 	sub.w	r2, r3, #4992	; 0x1380
 800166e:	3a08      	subs	r2, #8
 8001670:	4919      	ldr	r1, [pc, #100]	; (80016d8 <BLDCVqConstControl+0x480>)
 8001672:	4613      	mov	r3, r2
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	4413      	add	r3, r2
 8001678:	00db      	lsls	r3, r3, #3
 800167a:	440b      	add	r3, r1
 800167c:	3310      	adds	r3, #16
 800167e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001680:	601a      	str	r2, [r3, #0]
		g_curt[idx - 5000][5] = curt_w;
 8001682:	4b14      	ldr	r3, [pc, #80]	; (80016d4 <BLDCVqConstControl+0x47c>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f5a3 529c 	sub.w	r2, r3, #4992	; 0x1380
 800168a:	3a08      	subs	r2, #8
 800168c:	e026      	b.n	80016dc <BLDCVqConstControl+0x484>
 800168e:	bf00      	nop
 8001690:	a0000000 	.word	0xa0000000
 8001694:	3fea2473 	.word	0x3fea2473
 8001698:	6665983e 	.word	0x6665983e
 800169c:	3fe6a09e 	.word	0x3fe6a09e
 80016a0:	20000230 	.word	0x20000230
 80016a4:	20000210 	.word	0x20000210
 80016a8:	cccccccd 	.word	0xcccccccd
 80016ac:	2000023c 	.word	0x2000023c
 80016b0:	40533333 	.word	0x40533333
 80016b4:	45800000 	.word	0x45800000
 80016b8:	3fe00000 	.word	0x3fe00000
 80016bc:	3f3504f3 	.word	0x3f3504f3
 80016c0:	3f5105eb 	.word	0x3f5105eb
 80016c4:	20000248 	.word	0x20000248
 80016c8:	bed105eb 	.word	0xbed105eb
 80016cc:	2000024c 	.word	0x2000024c
 80016d0:	20000250 	.word	0x20000250
 80016d4:	20000204 	.word	0x20000204
 80016d8:	20000318 	.word	0x20000318
 80016dc:	494c      	ldr	r1, [pc, #304]	; (8001810 <BLDCVqConstControl+0x5b8>)
 80016de:	4613      	mov	r3, r2
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	4413      	add	r3, r2
 80016e4:	00db      	lsls	r3, r3, #3
 80016e6:	440b      	add	r3, r1
 80016e8:	3314      	adds	r3, #20
 80016ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016ec:	601a      	str	r2, [r3, #0]
		idx++;
 80016ee:	4b49      	ldr	r3, [pc, #292]	; (8001814 <BLDCVqConstControl+0x5bc>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	3301      	adds	r3, #1
 80016f4:	4a47      	ldr	r2, [pc, #284]	; (8001814 <BLDCVqConstControl+0x5bc>)
 80016f6:	6013      	str	r3, [r2, #0]
 80016f8:	e00a      	b.n	8001710 <BLDCVqConstControl+0x4b8>
	} else if (idx < 5000) {
 80016fa:	4b46      	ldr	r3, [pc, #280]	; (8001814 <BLDCVqConstControl+0x5bc>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f241 3287 	movw	r2, #4999	; 0x1387
 8001702:	4293      	cmp	r3, r2
 8001704:	dc04      	bgt.n	8001710 <BLDCVqConstControl+0x4b8>
		idx++;
 8001706:	4b43      	ldr	r3, [pc, #268]	; (8001814 <BLDCVqConstControl+0x5bc>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	3301      	adds	r3, #1
 800170c:	4a41      	ldr	r2, [pc, #260]	; (8001814 <BLDCVqConstControl+0x5bc>)
 800170e:	6013      	str	r3, [r2, #0]
	}

    vol_u = fmaxf(fminf(pwm_half + vol_u * pwm_per_vol, pwm_max), 0);
 8001710:	4b41      	ldr	r3, [pc, #260]	; (8001818 <BLDCVqConstControl+0x5c0>)
 8001712:	ed93 7a00 	vldr	s14, [r3]
 8001716:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800171a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800171e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001722:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001726:	edd7 0a12 	vldr	s1, [r7, #72]	; 0x48
 800172a:	eeb0 0a67 	vmov.f32	s0, s15
 800172e:	f008 faa8 	bl	8009c82 <fminf>
 8001732:	eef0 7a40 	vmov.f32	s15, s0
 8001736:	eddf 0a39 	vldr	s1, [pc, #228]	; 800181c <BLDCVqConstControl+0x5c4>
 800173a:	eeb0 0a67 	vmov.f32	s0, s15
 800173e:	f008 fa85 	bl	8009c4c <fmaxf>
 8001742:	eef0 7a40 	vmov.f32	s15, s0
 8001746:	4b34      	ldr	r3, [pc, #208]	; (8001818 <BLDCVqConstControl+0x5c0>)
 8001748:	edc3 7a00 	vstr	s15, [r3]
    vol_v = fmaxf(fminf(pwm_half + vol_v * pwm_per_vol, pwm_max), 0);
 800174c:	4b34      	ldr	r3, [pc, #208]	; (8001820 <BLDCVqConstControl+0x5c8>)
 800174e:	ed93 7a00 	vldr	s14, [r3]
 8001752:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001756:	ee27 7a27 	vmul.f32	s14, s14, s15
 800175a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800175e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001762:	edd7 0a12 	vldr	s1, [r7, #72]	; 0x48
 8001766:	eeb0 0a67 	vmov.f32	s0, s15
 800176a:	f008 fa8a 	bl	8009c82 <fminf>
 800176e:	eef0 7a40 	vmov.f32	s15, s0
 8001772:	eddf 0a2a 	vldr	s1, [pc, #168]	; 800181c <BLDCVqConstControl+0x5c4>
 8001776:	eeb0 0a67 	vmov.f32	s0, s15
 800177a:	f008 fa67 	bl	8009c4c <fmaxf>
 800177e:	eef0 7a40 	vmov.f32	s15, s0
 8001782:	4b27      	ldr	r3, [pc, #156]	; (8001820 <BLDCVqConstControl+0x5c8>)
 8001784:	edc3 7a00 	vstr	s15, [r3]
    vol_w = fmaxf(fminf(pwm_half + vol_w * pwm_per_vol, pwm_max), 0);
 8001788:	4b26      	ldr	r3, [pc, #152]	; (8001824 <BLDCVqConstControl+0x5cc>)
 800178a:	ed93 7a00 	vldr	s14, [r3]
 800178e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001792:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001796:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800179a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800179e:	edd7 0a12 	vldr	s1, [r7, #72]	; 0x48
 80017a2:	eeb0 0a67 	vmov.f32	s0, s15
 80017a6:	f008 fa6c 	bl	8009c82 <fminf>
 80017aa:	eef0 7a40 	vmov.f32	s15, s0
 80017ae:	eddf 0a1b 	vldr	s1, [pc, #108]	; 800181c <BLDCVqConstControl+0x5c4>
 80017b2:	eeb0 0a67 	vmov.f32	s0, s15
 80017b6:	f008 fa49 	bl	8009c4c <fmaxf>
 80017ba:	eef0 7a40 	vmov.f32	s15, s0
 80017be:	4b19      	ldr	r3, [pc, #100]	; (8001824 <BLDCVqConstControl+0x5cc>)
 80017c0:	edc3 7a00 	vstr	s15, [r3]

    //output PWM
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, (uint16_t)vol_u);
 80017c4:	4b14      	ldr	r3, [pc, #80]	; (8001818 <BLDCVqConstControl+0x5c0>)
 80017c6:	edd3 7a00 	vldr	s15, [r3]
 80017ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017ce:	ee17 3a90 	vmov	r3, s15
 80017d2:	b29a      	uxth	r2, r3
 80017d4:	4b14      	ldr	r3, [pc, #80]	; (8001828 <BLDCVqConstControl+0x5d0>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, (uint16_t)vol_v);
 80017da:	4b11      	ldr	r3, [pc, #68]	; (8001820 <BLDCVqConstControl+0x5c8>)
 80017dc:	edd3 7a00 	vldr	s15, [r3]
 80017e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017e4:	ee17 3a90 	vmov	r3, s15
 80017e8:	b29a      	uxth	r2, r3
 80017ea:	4b0f      	ldr	r3, [pc, #60]	; (8001828 <BLDCVqConstControl+0x5d0>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, (uint16_t)vol_w);
 80017f0:	4b0c      	ldr	r3, [pc, #48]	; (8001824 <BLDCVqConstControl+0x5cc>)
 80017f2:	edd3 7a00 	vldr	s15, [r3]
 80017f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017fa:	ee17 3a90 	vmov	r3, s15
 80017fe:	b29a      	uxth	r2, r3
 8001800:	4b09      	ldr	r3, [pc, #36]	; (8001828 <BLDCVqConstControl+0x5d0>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001806:	bf00      	nop
 8001808:	3750      	adds	r7, #80	; 0x50
 800180a:	46bd      	mov	sp, r7
 800180c:	bdb0      	pop	{r4, r5, r7, pc}
 800180e:	bf00      	nop
 8001810:	20000318 	.word	0x20000318
 8001814:	20000204 	.word	0x20000204
 8001818:	20000248 	.word	0x20000248
 800181c:	00000000 	.word	0x00000000
 8001820:	2000024c 	.word	0x2000024c
 8001824:	20000250 	.word	0x20000250
 8001828:	2000659c 	.word	0x2000659c

0800182c <HAL_ADC_ConvCpltCallback>:
 * ADC Conversion Complete Callback(unique function of HAL)
 * @param
 * @return
 * @note	for debugging
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 800182c:	b490      	push	{r4, r7}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
	static int16_t index = 0;
	for (int8_t i = 0; i < ADC_CURT_SENSE_BUFFER_SIZE; i++) {
 8001834:	2300      	movs	r3, #0
 8001836:	73fb      	strb	r3, [r7, #15]
 8001838:	e018      	b.n	800186c <HAL_ADC_ConvCpltCallback+0x40>
		curt_sense_data_log[i][index] = curt_sense_data[i];
 800183a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800183e:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001842:	4917      	ldr	r1, [pc, #92]	; (80018a0 <HAL_ADC_ConvCpltCallback+0x74>)
 8001844:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001848:	460c      	mov	r4, r1
 800184a:	4916      	ldr	r1, [pc, #88]	; (80018a4 <HAL_ADC_ConvCpltCallback+0x78>)
 800184c:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8001850:	4915      	ldr	r1, [pc, #84]	; (80018a8 <HAL_ADC_ConvCpltCallback+0x7c>)
 8001852:	4613      	mov	r3, r2
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	4413      	add	r3, r2
 8001858:	4423      	add	r3, r4
 800185a:	4602      	mov	r2, r0
 800185c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (int8_t i = 0; i < ADC_CURT_SENSE_BUFFER_SIZE; i++) {
 8001860:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001864:	b2db      	uxtb	r3, r3
 8001866:	3301      	adds	r3, #1
 8001868:	b2db      	uxtb	r3, r3
 800186a:	73fb      	strb	r3, [r7, #15]
 800186c:	7bfb      	ldrb	r3, [r7, #15]
 800186e:	2b02      	cmp	r3, #2
 8001870:	d9e3      	bls.n	800183a <HAL_ADC_ConvCpltCallback+0xe>
	}
	index = (index + 1) % ADC_MOV_AVE_SIZE;
 8001872:	4b0b      	ldr	r3, [pc, #44]	; (80018a0 <HAL_ADC_ConvCpltCallback+0x74>)
 8001874:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001878:	1c5a      	adds	r2, r3, #1
 800187a:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <HAL_ADC_ConvCpltCallback+0x80>)
 800187c:	fb83 1302 	smull	r1, r3, r3, r2
 8001880:	1059      	asrs	r1, r3, #1
 8001882:	17d3      	asrs	r3, r2, #31
 8001884:	1ac9      	subs	r1, r1, r3
 8001886:	460b      	mov	r3, r1
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	440b      	add	r3, r1
 800188c:	1ad1      	subs	r1, r2, r3
 800188e:	b20a      	sxth	r2, r1
 8001890:	4b03      	ldr	r3, [pc, #12]	; (80018a0 <HAL_ADC_ConvCpltCallback+0x74>)
 8001892:	801a      	strh	r2, [r3, #0]

//	printf("%d %d %d\n", curt_sense_data[0], curt_sense_data[1], curt_sense_data[2]);
}
 8001894:	bf00      	nop
 8001896:	3710      	adds	r7, #16
 8001898:	46bd      	mov	sp, r7
 800189a:	bc90      	pop	{r4, r7}
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	20000254 	.word	0x20000254
 80018a4:	20000208 	.word	0x20000208
 80018a8:	20000210 	.word	0x20000210
 80018ac:	66666667 	.word	0x66666667

080018b0 <BLDCGetCurrentSenseOffset>:

void BLDCGetCurrentSenseOffset(void) {
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
	const int32_t num_offset = 100;
 80018b6:	2364      	movs	r3, #100	; 0x64
 80018b8:	60bb      	str	r3, [r7, #8]

 	curt_sense_data_offset[0] = curt_sense_data_offset[1] = curt_sense_data_offset[2] = 0;
 80018ba:	4b3e      	ldr	r3, [pc, #248]	; (80019b4 <BLDCGetCurrentSenseOffset+0x104>)
 80018bc:	2200      	movs	r2, #0
 80018be:	609a      	str	r2, [r3, #8]
 80018c0:	4b3c      	ldr	r3, [pc, #240]	; (80019b4 <BLDCGetCurrentSenseOffset+0x104>)
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	4a3b      	ldr	r2, [pc, #236]	; (80019b4 <BLDCGetCurrentSenseOffset+0x104>)
 80018c6:	6053      	str	r3, [r2, #4]
 80018c8:	4b3a      	ldr	r3, [pc, #232]	; (80019b4 <BLDCGetCurrentSenseOffset+0x104>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	4a39      	ldr	r2, [pc, #228]	; (80019b4 <BLDCGetCurrentSenseOffset+0x104>)
 80018ce:	6013      	str	r3, [r2, #0]
 	for (int32_t i = 0; i < num_offset; i++) {
 80018d0:	2300      	movs	r3, #0
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	e021      	b.n	800191a <BLDCGetCurrentSenseOffset+0x6a>
 		curt_sense_data_offset[0] += curt_sense_data[0];
 80018d6:	4b37      	ldr	r3, [pc, #220]	; (80019b4 <BLDCGetCurrentSenseOffset+0x104>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a37      	ldr	r2, [pc, #220]	; (80019b8 <BLDCGetCurrentSenseOffset+0x108>)
 80018dc:	8812      	ldrh	r2, [r2, #0]
 80018de:	4413      	add	r3, r2
 80018e0:	4a34      	ldr	r2, [pc, #208]	; (80019b4 <BLDCGetCurrentSenseOffset+0x104>)
 80018e2:	6013      	str	r3, [r2, #0]
 		curt_sense_data_offset[1] += curt_sense_data[1];
 80018e4:	4b33      	ldr	r3, [pc, #204]	; (80019b4 <BLDCGetCurrentSenseOffset+0x104>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	4a33      	ldr	r2, [pc, #204]	; (80019b8 <BLDCGetCurrentSenseOffset+0x108>)
 80018ea:	8852      	ldrh	r2, [r2, #2]
 80018ec:	4413      	add	r3, r2
 80018ee:	4a31      	ldr	r2, [pc, #196]	; (80019b4 <BLDCGetCurrentSenseOffset+0x104>)
 80018f0:	6053      	str	r3, [r2, #4]
 		curt_sense_data_offset[2] += curt_sense_data[2];
 80018f2:	4b30      	ldr	r3, [pc, #192]	; (80019b4 <BLDCGetCurrentSenseOffset+0x104>)
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	4a30      	ldr	r2, [pc, #192]	; (80019b8 <BLDCGetCurrentSenseOffset+0x108>)
 80018f8:	8892      	ldrh	r2, [r2, #4]
 80018fa:	4413      	add	r3, r2
 80018fc:	4a2d      	ldr	r2, [pc, #180]	; (80019b4 <BLDCGetCurrentSenseOffset+0x104>)
 80018fe:	6093      	str	r3, [r2, #8]
 		for (volatile int32_t j = 0; j < 1000; j++) {;}		//short wait
 8001900:	2300      	movs	r3, #0
 8001902:	607b      	str	r3, [r7, #4]
 8001904:	e002      	b.n	800190c <BLDCGetCurrentSenseOffset+0x5c>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	3301      	adds	r3, #1
 800190a:	607b      	str	r3, [r7, #4]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001912:	dbf8      	blt.n	8001906 <BLDCGetCurrentSenseOffset+0x56>
 	for (int32_t i = 0; i < num_offset; i++) {
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	3301      	adds	r3, #1
 8001918:	60fb      	str	r3, [r7, #12]
 800191a:	68fa      	ldr	r2, [r7, #12]
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	429a      	cmp	r2, r3
 8001920:	dbd9      	blt.n	80018d6 <BLDCGetCurrentSenseOffset+0x26>
 	}
 	curt_sense_data_offset[0] = (int)(curt_sense_data_offset[0] / num_offset + 0.50f);	//ROUND(curt_sense_data_offset / num_offset)
 8001922:	4b24      	ldr	r3, [pc, #144]	; (80019b4 <BLDCGetCurrentSenseOffset+0x104>)
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	fbb2 f3f3 	udiv	r3, r2, r3
 800192c:	ee07 3a90 	vmov	s15, r3
 8001930:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001934:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001938:	ee77 7a87 	vadd.f32	s15, s15, s14
 800193c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001940:	ee17 2a90 	vmov	r2, s15
 8001944:	4b1b      	ldr	r3, [pc, #108]	; (80019b4 <BLDCGetCurrentSenseOffset+0x104>)
 8001946:	601a      	str	r2, [r3, #0]
 	curt_sense_data_offset[1] = (int)(curt_sense_data_offset[1] / num_offset + 0.50f);
 8001948:	4b1a      	ldr	r3, [pc, #104]	; (80019b4 <BLDCGetCurrentSenseOffset+0x104>)
 800194a:	685a      	ldr	r2, [r3, #4]
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001952:	ee07 3a90 	vmov	s15, r3
 8001956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800195a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800195e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001962:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001966:	ee17 2a90 	vmov	r2, s15
 800196a:	4b12      	ldr	r3, [pc, #72]	; (80019b4 <BLDCGetCurrentSenseOffset+0x104>)
 800196c:	605a      	str	r2, [r3, #4]
 	curt_sense_data_offset[2] = (int)(curt_sense_data_offset[2] / num_offset + 0.50f);
 800196e:	4b11      	ldr	r3, [pc, #68]	; (80019b4 <BLDCGetCurrentSenseOffset+0x104>)
 8001970:	689a      	ldr	r2, [r3, #8]
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	fbb2 f3f3 	udiv	r3, r2, r3
 8001978:	ee07 3a90 	vmov	s15, r3
 800197c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001980:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001984:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001988:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800198c:	ee17 2a90 	vmov	r2, s15
 8001990:	4b08      	ldr	r3, [pc, #32]	; (80019b4 <BLDCGetCurrentSenseOffset+0x104>)
 8001992:	609a      	str	r2, [r3, #8]
 	printf("%d %d %d\n", (int)curt_sense_data_offset[0], (int)curt_sense_data_offset[1], (int)curt_sense_data_offset[2]);
 8001994:	4b07      	ldr	r3, [pc, #28]	; (80019b4 <BLDCGetCurrentSenseOffset+0x104>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4619      	mov	r1, r3
 800199a:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <BLDCGetCurrentSenseOffset+0x104>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	461a      	mov	r2, r3
 80019a0:	4b04      	ldr	r3, [pc, #16]	; (80019b4 <BLDCGetCurrentSenseOffset+0x104>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	4805      	ldr	r0, [pc, #20]	; (80019bc <BLDCGetCurrentSenseOffset+0x10c>)
 80019a6:	f006 f92d 	bl	8007c04 <iprintf>
}
 80019aa:	bf00      	nop
 80019ac:	3710      	adds	r7, #16
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	2000023c 	.word	0x2000023c
 80019b8:	20000208 	.word	0x20000208
 80019bc:	0800a970 	.word	0x0800a970

080019c0 <BLDCStartCurrentSense>:
 * @param
 * @return
 * @note	Triggered by tim8(at the center of center aligned PWM.
 * 			Data will be automatically transfered to the variable by DMA
 */
void BLDCStartCurrentSense(void) {
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)curt_sense_data, ADC_CURT_SENSE_BUFFER_SIZE);
 80019c4:	2203      	movs	r2, #3
 80019c6:	4903      	ldr	r1, [pc, #12]	; (80019d4 <BLDCStartCurrentSense+0x14>)
 80019c8:	4803      	ldr	r0, [pc, #12]	; (80019d8 <BLDCStartCurrentSense+0x18>)
 80019ca:	f001 fcaf 	bl	800332c <HAL_ADC_Start_DMA>
}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	20000208 	.word	0x20000208
 80019d8:	20000270 	.word	0x20000270

080019dc <BLDCEnable>:
/*
 * Enable BLDC Motor(Enable Gate Driver & Start TIM8 PWM Generation)
 * @param
 * @return
 */
void BLDCEnable(void) {
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);		//EN_GATE = HIGH
 80019e0:	2201      	movs	r2, #1
 80019e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019e6:	4814      	ldr	r0, [pc, #80]	; (8001a38 <BLDCEnable+0x5c>)
 80019e8:	f002 feae 	bl	8004748 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);
 80019ec:	4b13      	ldr	r3, [pc, #76]	; (8001a3c <BLDCEnable+0x60>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2200      	movs	r2, #0
 80019f2:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);
 80019f4:	4b11      	ldr	r3, [pc, #68]	; (8001a3c <BLDCEnable+0x60>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2200      	movs	r2, #0
 80019fa:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, 0);
 80019fc:	4b0f      	ldr	r3, [pc, #60]	; (8001a3c <BLDCEnable+0x60>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2200      	movs	r2, #0
 8001a02:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, __HAL_TIM_GET_AUTORELOAD(&htim8) - 1);
 8001a04:	4b0d      	ldr	r3, [pc, #52]	; (8001a3c <BLDCEnable+0x60>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a0a:	4b0c      	ldr	r3, [pc, #48]	; (8001a3c <BLDCEnable+0x60>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	3a01      	subs	r2, #1
 8001a10:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001a12:	2100      	movs	r1, #0
 8001a14:	4809      	ldr	r0, [pc, #36]	; (8001a3c <BLDCEnable+0x60>)
 8001a16:	f003 fe33 	bl	8005680 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8001a1a:	2104      	movs	r1, #4
 8001a1c:	4807      	ldr	r0, [pc, #28]	; (8001a3c <BLDCEnable+0x60>)
 8001a1e:	f003 fe2f 	bl	8005680 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8001a22:	2108      	movs	r1, #8
 8001a24:	4805      	ldr	r0, [pc, #20]	; (8001a3c <BLDCEnable+0x60>)
 8001a26:	f003 fe2b 	bl	8005680 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8001a2a:	210c      	movs	r1, #12
 8001a2c:	4803      	ldr	r0, [pc, #12]	; (8001a3c <BLDCEnable+0x60>)
 8001a2e:	f003 fe27 	bl	8005680 <HAL_TIM_PWM_Start>
}
 8001a32:	bf00      	nop
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	40020000 	.word	0x40020000
 8001a3c:	2000659c 	.word	0x2000659c

08001a40 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	607b      	str	r3, [r7, #4]
 8001a4a:	4b14      	ldr	r3, [pc, #80]	; (8001a9c <MX_DMA_Init+0x5c>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	4a13      	ldr	r2, [pc, #76]	; (8001a9c <MX_DMA_Init+0x5c>)
 8001a50:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a54:	6313      	str	r3, [r2, #48]	; 0x30
 8001a56:	4b11      	ldr	r3, [pc, #68]	; (8001a9c <MX_DMA_Init+0x5c>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a5e:	607b      	str	r3, [r7, #4]
 8001a60:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001a62:	2200      	movs	r2, #0
 8001a64:	2100      	movs	r1, #0
 8001a66:	2038      	movs	r0, #56	; 0x38
 8001a68:	f002 f8f5 	bl	8003c56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001a6c:	2038      	movs	r0, #56	; 0x38
 8001a6e:	f002 f90e 	bl	8003c8e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001a72:	2200      	movs	r2, #0
 8001a74:	2100      	movs	r1, #0
 8001a76:	203a      	movs	r0, #58	; 0x3a
 8001a78:	f002 f8ed 	bl	8003c56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001a7c:	203a      	movs	r0, #58	; 0x3a
 8001a7e:	f002 f906 	bl	8003c8e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8001a82:	2200      	movs	r2, #0
 8001a84:	2100      	movs	r1, #0
 8001a86:	2046      	movs	r0, #70	; 0x46
 8001a88:	f002 f8e5 	bl	8003c56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001a8c:	2046      	movs	r0, #70	; 0x46
 8001a8e:	f002 f8fe 	bl	8003c8e <HAL_NVIC_EnableIRQ>

}
 8001a92:	bf00      	nop
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40023800 	.word	0x40023800

08001aa0 <dma_printf_init>:
#include "dma_ring.h"
#include <stdbool.h>

struct dma_printf_info dmi;

void dma_printf_init(UART_HandleTypeDef *printf_huart){
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
    dmi.huart = printf_huart;
 8001aa8:	4a09      	ldr	r2, [pc, #36]	; (8001ad0 <dma_printf_init+0x30>)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
    dma_ring_init(&dmi.tx_ring);
 8001ab0:	4807      	ldr	r0, [pc, #28]	; (8001ad0 <dma_printf_init+0x30>)
 8001ab2:	f000 f87d 	bl	8001bb0 <dma_ring_init>
    dmi.sending = false;
 8001ab6:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <dma_printf_init+0x30>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    dmi.previous_send_len = 0;
 8001abe:	4b04      	ldr	r3, [pc, #16]	; (8001ad0 <dma_printf_init+0x30>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
}
 8001ac6:	bf00      	nop
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	200060d8 	.word	0x200060d8

08001ad4 <dma_printf_putc>:

void dma_printf_putc(uint8_t c){
 8001ad4:	b590      	push	{r4, r7, lr}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	4603      	mov	r3, r0
 8001adc:	71fb      	strb	r3, [r7, #7]
    dma_ring_putc(&dmi.tx_ring, c);
 8001ade:	79fb      	ldrb	r3, [r7, #7]
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4814      	ldr	r0, [pc, #80]	; (8001b34 <dma_printf_putc+0x60>)
 8001ae4:	f000 f87f 	bl	8001be6 <dma_ring_putc>
    if(!dmi.sending){
 8001ae8:	4b12      	ldr	r3, [pc, #72]	; (8001b34 <dma_printf_putc+0x60>)
 8001aea:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d11b      	bne.n	8001b2a <dma_printf_putc+0x56>
        uint16_t len = (uint16_t)dma_ring_available_linear(&dmi.tx_ring);
 8001af2:	4810      	ldr	r0, [pc, #64]	; (8001b34 <dma_printf_putc+0x60>)
 8001af4:	f000 f8ac 	bl	8001c50 <dma_ring_available_linear>
 8001af8:	4603      	mov	r3, r0
 8001afa:	81fb      	strh	r3, [r7, #14]
        dmi.previous_send_len = len;
 8001afc:	89fb      	ldrh	r3, [r7, #14]
 8001afe:	4a0d      	ldr	r2, [pc, #52]	; (8001b34 <dma_printf_putc+0x60>)
 8001b00:	f8c2 3410 	str.w	r3, [r2, #1040]	; 0x410
        dmi.sending = true;
 8001b04:	4b0b      	ldr	r3, [pc, #44]	; (8001b34 <dma_printf_putc+0x60>)
 8001b06:	2201      	movs	r2, #1
 8001b08:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        HAL_UART_Transmit_DMA(dmi.huart, dmi.tx_ring.buf+dma_ring_get_r_ptr(&dmi.tx_ring), len);
 8001b0c:	4b09      	ldr	r3, [pc, #36]	; (8001b34 <dma_printf_putc+0x60>)
 8001b0e:	f8d3 440c 	ldr.w	r4, [r3, #1036]	; 0x40c
 8001b12:	4808      	ldr	r0, [pc, #32]	; (8001b34 <dma_printf_putc+0x60>)
 8001b14:	f000 f8bf 	bl	8001c96 <dma_ring_get_r_ptr>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	4b05      	ldr	r3, [pc, #20]	; (8001b34 <dma_printf_putc+0x60>)
 8001b1e:	4413      	add	r3, r2
 8001b20:	89fa      	ldrh	r2, [r7, #14]
 8001b22:	4619      	mov	r1, r3
 8001b24:	4620      	mov	r0, r4
 8001b26:	f004 fd2b 	bl	8006580 <HAL_UART_Transmit_DMA>
    }
}
 8001b2a:	bf00      	nop
 8001b2c:	3714      	adds	r7, #20
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd90      	pop	{r4, r7, pc}
 8001b32:	bf00      	nop
 8001b34:	200060d8 	.word	0x200060d8

08001b38 <dma_printf_send_it>:

void dma_printf_send_it(UART_HandleTypeDef *printf_huart) {
 8001b38:	b590      	push	{r4, r7, lr}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
    if(dmi.huart != printf_huart) return;
 8001b40:	4b1a      	ldr	r3, [pc, #104]	; (8001bac <dma_printf_send_it+0x74>)
 8001b42:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d12b      	bne.n	8001ba4 <dma_printf_send_it+0x6c>

    dma_ring_forward_r_ptr(&dmi.tx_ring, dmi.previous_send_len);
 8001b4c:	4b17      	ldr	r3, [pc, #92]	; (8001bac <dma_printf_send_it+0x74>)
 8001b4e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8001b52:	4619      	mov	r1, r3
 8001b54:	4815      	ldr	r0, [pc, #84]	; (8001bac <dma_printf_send_it+0x74>)
 8001b56:	f000 f8ab 	bl	8001cb0 <dma_ring_forward_r_ptr>
    uint16_t len = (uint16_t)dma_ring_available_linear(&dmi.tx_ring);
 8001b5a:	4814      	ldr	r0, [pc, #80]	; (8001bac <dma_printf_send_it+0x74>)
 8001b5c:	f000 f878 	bl	8001c50 <dma_ring_available_linear>
 8001b60:	4603      	mov	r3, r0
 8001b62:	81fb      	strh	r3, [r7, #14]
    if (len > 0 ) {
 8001b64:	89fb      	ldrh	r3, [r7, #14]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d017      	beq.n	8001b9a <dma_printf_send_it+0x62>
        dmi.previous_send_len = len;
 8001b6a:	89fb      	ldrh	r3, [r7, #14]
 8001b6c:	4a0f      	ldr	r2, [pc, #60]	; (8001bac <dma_printf_send_it+0x74>)
 8001b6e:	f8c2 3410 	str.w	r3, [r2, #1040]	; 0x410
        dmi.sending = true;
 8001b72:	4b0e      	ldr	r3, [pc, #56]	; (8001bac <dma_printf_send_it+0x74>)
 8001b74:	2201      	movs	r2, #1
 8001b76:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        HAL_UART_Transmit_DMA(dmi.huart, dmi.tx_ring.buf+dma_ring_get_r_ptr(&dmi.tx_ring), len);
 8001b7a:	4b0c      	ldr	r3, [pc, #48]	; (8001bac <dma_printf_send_it+0x74>)
 8001b7c:	f8d3 440c 	ldr.w	r4, [r3, #1036]	; 0x40c
 8001b80:	480a      	ldr	r0, [pc, #40]	; (8001bac <dma_printf_send_it+0x74>)
 8001b82:	f000 f888 	bl	8001c96 <dma_ring_get_r_ptr>
 8001b86:	4603      	mov	r3, r0
 8001b88:	461a      	mov	r2, r3
 8001b8a:	4b08      	ldr	r3, [pc, #32]	; (8001bac <dma_printf_send_it+0x74>)
 8001b8c:	4413      	add	r3, r2
 8001b8e:	89fa      	ldrh	r2, [r7, #14]
 8001b90:	4619      	mov	r1, r3
 8001b92:	4620      	mov	r0, r4
 8001b94:	f004 fcf4 	bl	8006580 <HAL_UART_Transmit_DMA>
 8001b98:	e005      	b.n	8001ba6 <dma_printf_send_it+0x6e>
    }else{
        dmi.sending = false;
 8001b9a:	4b04      	ldr	r3, [pc, #16]	; (8001bac <dma_printf_send_it+0x74>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8001ba2:	e000      	b.n	8001ba6 <dma_printf_send_it+0x6e>
    if(dmi.huart != printf_huart) return;
 8001ba4:	bf00      	nop
    }
}
 8001ba6:	3714      	adds	r7, #20
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd90      	pop	{r4, r7, pc}
 8001bac:	200060d8 	.word	0x200060d8

08001bb0 <dma_ring_init>:
#include "dma_ring.h"
#include "main.h"
#include <stdio.h>

void dma_ring_init(struct dma_ring_buf *ring){
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  ring->buf_size = RING_BUF_SIZE;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bbe:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
  ring->w_ptr = 0;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
  ring->r_ptr = 0;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
  ring->overwrite_cnt = 0;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
}
 8001bda:	bf00      	nop
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr

08001be6 <dma_ring_putc>:
  *c = ring->buf[ring->r_ptr];
  ring->r_ptr = next_ptr;
  return RING_SUCCESS;
}

int dma_ring_putc(struct dma_ring_buf *ring, uint8_t c){
 8001be6:	b480      	push	{r7}
 8001be8:	b085      	sub	sp, #20
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
 8001bee:	460b      	mov	r3, r1
 8001bf0:	70fb      	strb	r3, [r7, #3]
  uint16_t next_ptr = ring->w_ptr+1;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	81fb      	strh	r3, [r7, #14]
  if(next_ptr >= ring->buf_size) next_ptr = 0;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8001c02:	89fa      	ldrh	r2, [r7, #14]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d301      	bcc.n	8001c0c <dma_ring_putc+0x26>
 8001c08:	2300      	movs	r3, #0
 8001c0a:	81fb      	strh	r3, [r7, #14]

  if(next_ptr == ring->r_ptr){
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8001c12:	89fa      	ldrh	r2, [r7, #14]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d109      	bne.n	8001c2c <dma_ring_putc+0x46>
    ring->overwrite_cnt++;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 8001c1e:	3301      	adds	r3, #1
 8001c20:	b29a      	uxth	r2, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
    return RING_FAIL;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e00b      	b.n	8001c44 <dma_ring_putc+0x5e>
  }
  ring->buf[ring->w_ptr] = c;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8001c32:	4619      	mov	r1, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	78fa      	ldrb	r2, [r7, #3]
 8001c38:	545a      	strb	r2, [r3, r1]
  ring->w_ptr = next_ptr;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	89fa      	ldrh	r2, [r7, #14]
 8001c3e:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
  return RING_SUCCESS;
 8001c42:	2300      	movs	r3, #0
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3714      	adds	r7, #20
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <dma_ring_available_linear>:
    return ring->w_ptr - ring->r_ptr;
  }else{
    return ring->buf_size + ring->w_ptr - ring->r_ptr;
  }
}
int dma_ring_available_linear(struct dma_ring_buf *ring){
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  if(ring->w_ptr >= ring->r_ptr){
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d308      	bcc.n	8001c7a <dma_ring_available_linear+0x2a>
    return ring->w_ptr - ring->r_ptr;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8001c6e:	461a      	mov	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	e007      	b.n	8001c8a <dma_ring_available_linear+0x3a>
  }else{
    return ring->buf_size - ring->r_ptr;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8001c80:	461a      	mov	r2, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8001c88:	1ad3      	subs	r3, r2, r3
  }
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr

08001c96 <dma_ring_get_r_ptr>:

uint16_t dma_ring_get_w_ptr(struct dma_ring_buf *ring){
  return ring->w_ptr;
}

uint16_t dma_ring_get_r_ptr(struct dma_ring_buf *ring){
 8001c96:	b480      	push	{r7}
 8001c98:	b083      	sub	sp, #12
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
  return ring->r_ptr;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <dma_ring_forward_r_ptr>:

void dma_ring_forward_r_ptr(struct dma_ring_buf *ring, int len){
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
  while(len > 0){
 8001cba:	e018      	b.n	8001cee <dma_ring_forward_r_ptr+0x3e>
    if(ring->r_ptr+1 >= ring->buf_size){
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	f8b2 2400 	ldrh.w	r2, [r2, #1024]	; 0x400
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	db04      	blt.n	8001cd8 <dma_ring_forward_r_ptr+0x28>
      ring->r_ptr = 0;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8001cd6:	e007      	b.n	8001ce8 <dma_ring_forward_r_ptr+0x38>
    }else{
      ring->r_ptr += 1;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8001cde:	3301      	adds	r3, #1
 8001ce0:	b29a      	uxth	r2, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
    }
    len--;
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	3b01      	subs	r3, #1
 8001cec:	603b      	str	r3, [r7, #0]
  while(len > 0){
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	dce3      	bgt.n	8001cbc <dma_ring_forward_r_ptr+0xc>
  }
}
 8001cf4:	bf00      	nop
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <DRV8305Init>:
/*
 * Initialize DRV8305
 * @param
 * @return
 */
void DRV8305Init(void) {
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
	DRV8305Write(DRV8305_GATE_DRIVER_CONTROL, 0x0296);	//6 PWM mode -> 3 PWM mode
 8001d04:	f240 2196 	movw	r1, #662	; 0x296
 8001d08:	2007      	movs	r0, #7
 8001d0a:	f000 f80d 	bl	8001d28 <DRV8305Write>
	DRV8305Write(DRV8305_SHUNT_AMP_CONTROL, 0x0715);	//Current Amp : x10 -> x20, current sense calibration on
 8001d0e:	f240 7115 	movw	r1, #1813	; 0x715
 8001d12:	200a      	movs	r0, #10
 8001d14:	f000 f808 	bl	8001d28 <DRV8305Write>
	BLDCGetCurrentSenseOffset();						//get current sense offset(calibration)
 8001d18:	f7ff fdca 	bl	80018b0 <BLDCGetCurrentSenseOffset>
	DRV8305Write(DRV8305_SHUNT_AMP_CONTROL, 0x0015);	//Current Amp : x10 -> x20, current sense calibration off
 8001d1c:	2115      	movs	r1, #21
 8001d1e:	200a      	movs	r0, #10
 8001d20:	f000 f802 	bl	8001d28 <DRV8305Write>
}
 8001d24:	bf00      	nop
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <DRV8305Write>:
 * Write Register
 * @param	address : DRV8305 regigster address(8bit)
 * 			data : data to write(11bit)
 * @return
 */
uint16_t DRV8305Write(uint8_t address, uint16_t data) {
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af02      	add	r7, sp, #8
 8001d2e:	4603      	mov	r3, r0
 8001d30:	460a      	mov	r2, r1
 8001d32:	71fb      	strb	r3, [r7, #7]
 8001d34:	4613      	mov	r3, r2
 8001d36:	80bb      	strh	r3, [r7, #4]
	uint16_t adr_data = (address << 11) | (data & 0x07FF);		//0(1bit) + address(4bit) + data(11bit) = 16bit
 8001d38:	79fb      	ldrb	r3, [r7, #7]
 8001d3a:	02db      	lsls	r3, r3, #11
 8001d3c:	b21a      	sxth	r2, r3
 8001d3e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001d42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d46:	b21b      	sxth	r3, r3
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	b21b      	sxth	r3, r3
 8001d4c:	81fb      	strh	r3, [r7, #14]
	uint8_t txdata[2] = {adr_data >> 8, adr_data & 0xFF};		//{msb8bit, lsb8bit}
 8001d4e:	89fb      	ldrh	r3, [r7, #14]
 8001d50:	0a1b      	lsrs	r3, r3, #8
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	733b      	strb	r3, [r7, #12]
 8001d58:	89fb      	ldrh	r3, [r7, #14]
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	737b      	strb	r3, [r7, #13]
	uint8_t rxdata[2] = {};
 8001d5e:	2300      	movs	r3, #0
 8001d60:	813b      	strh	r3, [r7, #8]
	DRV8305Select();
 8001d62:	f000 f84d 	bl	8001e00 <DRV8305Select>
	HAL_SPI_TransmitReceive(&DRV8305_SPI_HANDLER, txdata, rxdata, 2, 1);
 8001d66:	f107 0208 	add.w	r2, r7, #8
 8001d6a:	f107 010c 	add.w	r1, r7, #12
 8001d6e:	2301      	movs	r3, #1
 8001d70:	9300      	str	r3, [sp, #0]
 8001d72:	2302      	movs	r3, #2
 8001d74:	4809      	ldr	r0, [pc, #36]	; (8001d9c <DRV8305Write+0x74>)
 8001d76:	f003 f9bb 	bl	80050f0 <HAL_SPI_TransmitReceive>
	DRV8305Deselect();
 8001d7a:	f000 f84d 	bl	8001e18 <DRV8305Deselect>
	return (((rxdata[0] & 0x07) << 8) | rxdata[1]);
 8001d7e:	7a3b      	ldrb	r3, [r7, #8]
 8001d80:	021b      	lsls	r3, r3, #8
 8001d82:	b21b      	sxth	r3, r3
 8001d84:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001d88:	b21a      	sxth	r2, r3
 8001d8a:	7a7b      	ldrb	r3, [r7, #9]
 8001d8c:	b21b      	sxth	r3, r3
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	b21b      	sxth	r3, r3
 8001d92:	b29b      	uxth	r3, r3
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3710      	adds	r7, #16
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	200064ec 	.word	0x200064ec

08001da0 <DRV8305Read>:
/*
 * Read Register
 * @param	address : DRV8305 regigster address(8bit)
 * @return	data in the designated address(11bit)
 */
uint16_t DRV8305Read(uint8_t address) {
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b086      	sub	sp, #24
 8001da4:	af02      	add	r7, sp, #8
 8001da6:	4603      	mov	r3, r0
 8001da8:	71fb      	strb	r3, [r7, #7]
	uint8_t txdata[2] = {(address << 3) | 0x80, 0x00};
 8001daa:	79fb      	ldrb	r3, [r7, #7]
 8001dac:	00db      	lsls	r3, r3, #3
 8001dae:	b25b      	sxtb	r3, r3
 8001db0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001db4:	b25b      	sxtb	r3, r3
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	733b      	strb	r3, [r7, #12]
 8001dba:	2300      	movs	r3, #0
 8001dbc:	737b      	strb	r3, [r7, #13]
	uint8_t rxdata[2] = {};
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	813b      	strh	r3, [r7, #8]
	DRV8305Select();
 8001dc2:	f000 f81d 	bl	8001e00 <DRV8305Select>
	HAL_SPI_TransmitReceive(&DRV8305_SPI_HANDLER, txdata, rxdata, 2, 1);
 8001dc6:	f107 0208 	add.w	r2, r7, #8
 8001dca:	f107 010c 	add.w	r1, r7, #12
 8001dce:	2301      	movs	r3, #1
 8001dd0:	9300      	str	r3, [sp, #0]
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	4809      	ldr	r0, [pc, #36]	; (8001dfc <DRV8305Read+0x5c>)
 8001dd6:	f003 f98b 	bl	80050f0 <HAL_SPI_TransmitReceive>
	DRV8305Deselect();
 8001dda:	f000 f81d 	bl	8001e18 <DRV8305Deselect>
	return (((rxdata[0] & 0x07) << 8) | rxdata[1]);
 8001dde:	7a3b      	ldrb	r3, [r7, #8]
 8001de0:	021b      	lsls	r3, r3, #8
 8001de2:	b21b      	sxth	r3, r3
 8001de4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001de8:	b21a      	sxth	r2, r3
 8001dea:	7a7b      	ldrb	r3, [r7, #9]
 8001dec:	b21b      	sxth	r3, r3
 8001dee:	4313      	orrs	r3, r2
 8001df0:	b21b      	sxth	r3, r3
 8001df2:	b29b      	uxth	r3, r3
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3710      	adds	r7, #16
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	200064ec 	.word	0x200064ec

08001e00 <DRV8305Select>:
/*
 * Select
 * @param
 * @return
 */
static void DRV8305Select(void) {
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DRV8305_CS_PORT, DRV8305_CS_PIN, GPIO_PIN_RESET);
 8001e04:	2200      	movs	r2, #0
 8001e06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e0a:	4802      	ldr	r0, [pc, #8]	; (8001e14 <DRV8305Select+0x14>)
 8001e0c:	f002 fc9c 	bl	8004748 <HAL_GPIO_WritePin>
}
 8001e10:	bf00      	nop
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40020400 	.word	0x40020400

08001e18 <DRV8305Deselect>:
/*
 * Deselect
 * @param
 * @return
 */
static void DRV8305Deselect(void) {
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DRV8305_CS_PORT, DRV8305_CS_PIN, GPIO_PIN_SET);
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e22:	4802      	ldr	r0, [pc, #8]	; (8001e2c <DRV8305Deselect+0x14>)
 8001e24:	f002 fc90 	bl	8004748 <HAL_GPIO_WritePin>
}
 8001e28:	bf00      	nop
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40020400 	.word	0x40020400

08001e30 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b088      	sub	sp, #32
 8001e34:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e36:	f107 030c 	add.w	r3, r7, #12
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	601a      	str	r2, [r3, #0]
 8001e3e:	605a      	str	r2, [r3, #4]
 8001e40:	609a      	str	r2, [r3, #8]
 8001e42:	60da      	str	r2, [r3, #12]
 8001e44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e46:	2300      	movs	r3, #0
 8001e48:	60bb      	str	r3, [r7, #8]
 8001e4a:	4b45      	ldr	r3, [pc, #276]	; (8001f60 <MX_GPIO_Init+0x130>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4e:	4a44      	ldr	r2, [pc, #272]	; (8001f60 <MX_GPIO_Init+0x130>)
 8001e50:	f043 0304 	orr.w	r3, r3, #4
 8001e54:	6313      	str	r3, [r2, #48]	; 0x30
 8001e56:	4b42      	ldr	r3, [pc, #264]	; (8001f60 <MX_GPIO_Init+0x130>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5a:	f003 0304 	and.w	r3, r3, #4
 8001e5e:	60bb      	str	r3, [r7, #8]
 8001e60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e62:	2300      	movs	r3, #0
 8001e64:	607b      	str	r3, [r7, #4]
 8001e66:	4b3e      	ldr	r3, [pc, #248]	; (8001f60 <MX_GPIO_Init+0x130>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6a:	4a3d      	ldr	r2, [pc, #244]	; (8001f60 <MX_GPIO_Init+0x130>)
 8001e6c:	f043 0301 	orr.w	r3, r3, #1
 8001e70:	6313      	str	r3, [r2, #48]	; 0x30
 8001e72:	4b3b      	ldr	r3, [pc, #236]	; (8001f60 <MX_GPIO_Init+0x130>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	607b      	str	r3, [r7, #4]
 8001e7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e7e:	2300      	movs	r3, #0
 8001e80:	603b      	str	r3, [r7, #0]
 8001e82:	4b37      	ldr	r3, [pc, #220]	; (8001f60 <MX_GPIO_Init+0x130>)
 8001e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e86:	4a36      	ldr	r2, [pc, #216]	; (8001f60 <MX_GPIO_Init+0x130>)
 8001e88:	f043 0302 	orr.w	r3, r3, #2
 8001e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e8e:	4b34      	ldr	r3, [pc, #208]	; (8001f60 <MX_GPIO_Init+0x130>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	603b      	str	r3, [r7, #0]
 8001e98:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f248 11d0 	movw	r1, #33232	; 0x81d0
 8001ea0:	4830      	ldr	r0, [pc, #192]	; (8001f64 <MX_GPIO_Init+0x134>)
 8001ea2:	f002 fc51 	bl	8004748 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12, GPIO_PIN_RESET);
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f241 0103 	movw	r1, #4099	; 0x1003
 8001eac:	482e      	ldr	r0, [pc, #184]	; (8001f68 <MX_GPIO_Init+0x138>)
 8001eae:	f002 fc4b 	bl	8004748 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA6 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_8;
 8001eb2:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001eb6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec4:	f107 030c 	add.w	r3, r7, #12
 8001ec8:	4619      	mov	r1, r3
 8001eca:	4826      	ldr	r0, [pc, #152]	; (8001f64 <MX_GPIO_Init+0x134>)
 8001ecc:	f002 fa8a 	bl	80043e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA7 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_15;
 8001ed0:	f248 0380 	movw	r3, #32896	; 0x8080
 8001ed4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eda:	2300      	movs	r3, #0
 8001edc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee2:	f107 030c 	add.w	r3, r7, #12
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	481e      	ldr	r0, [pc, #120]	; (8001f64 <MX_GPIO_Init+0x134>)
 8001eea:	f002 fa7b 	bl	80043e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12;
 8001eee:	f241 0303 	movw	r3, #4099	; 0x1003
 8001ef2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001efc:	2303      	movs	r3, #3
 8001efe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f00:	f107 030c 	add.w	r3, r7, #12
 8001f04:	4619      	mov	r1, r3
 8001f06:	4818      	ldr	r0, [pc, #96]	; (8001f68 <MX_GPIO_Init+0x138>)
 8001f08:	f002 fa6c 	bl	80043e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001f0c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f12:	2300      	movs	r3, #0
 8001f14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f16:	2301      	movs	r3, #1
 8001f18:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f1a:	f107 030c 	add.w	r3, r7, #12
 8001f1e:	4619      	mov	r1, r3
 8001f20:	4811      	ldr	r0, [pc, #68]	; (8001f68 <MX_GPIO_Init+0x138>)
 8001f22:	f002 fa5f 	bl	80043e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f30:	2301      	movs	r3, #1
 8001f32:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f34:	f107 030c 	add.w	r3, r7, #12
 8001f38:	4619      	mov	r1, r3
 8001f3a:	480c      	ldr	r0, [pc, #48]	; (8001f6c <MX_GPIO_Init+0x13c>)
 8001f3c:	f002 fa52 	bl	80043e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001f40:	2380      	movs	r3, #128	; 0x80
 8001f42:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f44:	2300      	movs	r3, #0
 8001f46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f4c:	f107 030c 	add.w	r3, r7, #12
 8001f50:	4619      	mov	r1, r3
 8001f52:	4805      	ldr	r0, [pc, #20]	; (8001f68 <MX_GPIO_Init+0x138>)
 8001f54:	f002 fa46 	bl	80043e4 <HAL_GPIO_Init>

}
 8001f58:	bf00      	nop
 8001f5a:	3720      	adds	r7, #32
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	40023800 	.word	0x40023800
 8001f64:	40020000 	.word	0x40020000
 8001f68:	40020400 	.word	0x40020400
 8001f6c:	40020800 	.word	0x40020800

08001f70 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6) {
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a0f      	ldr	r2, [pc, #60]	; (8001fbc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d118      	bne.n	8001fb4 <HAL_TIM_PeriodElapsedCallback+0x44>
		static int32_t t = 0;

		BLDCVqConstControl(0, 3.0f);
 8001f82:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8001f86:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8001fc0 <HAL_TIM_PeriodElapsedCallback+0x50>
 8001f8a:	f7ff f965 	bl	8001258 <BLDCVqConstControl>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
		}
		*/

		if (t >= 5000) {
 8001f8e:	4b0d      	ldr	r3, [pc, #52]	; (8001fc4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f241 3287 	movw	r2, #4999	; 0x1387
 8001f96:	4293      	cmp	r3, r2
 8001f98:	dd07      	ble.n	8001faa <HAL_TIM_PeriodElapsedCallback+0x3a>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8001f9a:	2140      	movs	r1, #64	; 0x40
 8001f9c:	480a      	ldr	r0, [pc, #40]	; (8001fc8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001f9e:	f002 fbec 	bl	800477a <HAL_GPIO_TogglePin>
			t = 0;
 8001fa2:	4b08      	ldr	r3, [pc, #32]	; (8001fc4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
		} else {
			t++;
		}
	}
}
 8001fa8:	e004      	b.n	8001fb4 <HAL_TIM_PeriodElapsedCallback+0x44>
			t++;
 8001faa:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	3301      	adds	r3, #1
 8001fb0:	4a04      	ldr	r2, [pc, #16]	; (8001fc4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001fb2:	6013      	str	r3, [r2, #0]
}
 8001fb4:	bf00      	nop
 8001fb6:	3708      	adds	r7, #8
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	40001000 	.word	0x40001000
 8001fc0:	00000000 	.word	0x00000000
 8001fc4:	20000258 	.word	0x20000258
 8001fc8:	40020000 	.word	0x40020000

08001fcc <__io_putchar>:
#ifdef __GNUC__
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
void __io_putchar(uint8_t ch) {
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	71fb      	strb	r3, [r7, #7]
	dma_printf_putc(ch);
 8001fd6:	79fb      	ldrb	r3, [r7, #7]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff fd7b 	bl	8001ad4 <dma_printf_putc>
}
 8001fde:	bf00      	nop
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
	...

08001fe8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fe8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fec:	b090      	sub	sp, #64	; 0x40
 8001fee:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ff0:	f000 ff84 	bl	8002efc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ff4:	f000 f8de 	bl	80021b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ff8:	f7ff ff1a 	bl	8001e30 <MX_GPIO_Init>
  MX_DMA_Init();
 8001ffc:	f7ff fd20 	bl	8001a40 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002000:	f000 fe72 	bl	8002ce8 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8002004:	f000 f96c 	bl	80022e0 <MX_SPI2_Init>
  MX_TIM8_Init();
 8002008:	f000 fc52 	bl	80028b0 <MX_TIM8_Init>
  MX_SPI3_Init();
 800200c:	f000 f99e 	bl	800234c <MX_SPI3_Init>
  MX_TIM6_Init();
 8002010:	f000 fc18 	bl	8002844 <MX_TIM6_Init>
  MX_ADC1_Init();
 8002014:	f7fe ff98 	bl	8000f48 <MX_ADC1_Init>
  MX_TIM2_Init();
 8002018:	f000 fb90 	bl	800273c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  //wait after power on
  HAL_Delay(10);
 800201c:	200a      	movs	r0, #10
 800201e:	f000 ffdf 	bl	8002fe0 <HAL_Delay>

  //printf settings
  dma_printf_init(&huart1);
 8002022:	485b      	ldr	r0, [pc, #364]	; (8002190 <main+0x1a8>)
 8002024:	f7ff fd3c 	bl	8001aa0 <dma_printf_init>
  setbuf(stdin, NULL);
 8002028:	4b5a      	ldr	r3, [pc, #360]	; (8002194 <main+0x1ac>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	2100      	movs	r1, #0
 8002030:	4618      	mov	r0, r3
 8002032:	f005 fe63 	bl	8007cfc <setbuf>
  setbuf(stdout, NULL);
 8002036:	4b57      	ldr	r3, [pc, #348]	; (8002194 <main+0x1ac>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	2100      	movs	r1, #0
 800203e:	4618      	mov	r0, r3
 8002040:	f005 fe5c 	bl	8007cfc <setbuf>
  setbuf(stderr, NULL);
 8002044:	4b53      	ldr	r3, [pc, #332]	; (8002194 <main+0x1ac>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	2100      	movs	r1, #0
 800204c:	4618      	mov	r0, r3
 800204e:	f005 fe55 	bl	8007cfc <setbuf>
  printf("Hello BLDCDriver_v1!\n");
 8002052:	4851      	ldr	r0, [pc, #324]	; (8002198 <main+0x1b0>)
 8002054:	f005 fe4a 	bl	8007cec <puts>

  //dummy spi com(to avoid error at the first com)
  AS5147Read(AS5147_ANGLECOM);
 8002058:	f643 70ff 	movw	r0, #16383	; 0x3fff
 800205c:	f7ff f87e 	bl	800115c <AS5147Read>
  DRV8305Read(DRV8305_WARNING_WATCHDOG_RESET);
 8002060:	2001      	movs	r0, #1
 8002062:	f7ff fe9d 	bl	8001da0 <DRV8305Read>

  //current sense
  BLDCStartCurrentSense();
 8002066:	f7ff fcab 	bl	80019c0 <BLDCStartCurrentSense>

  //Enable BLDC and initialize gate-driver
  BLDCEnable();		//must be run before DRV8305Init()
 800206a:	f7ff fcb7 	bl	80019dc <BLDCEnable>
  DRV8305Init();
 800206e:	f7ff fe47 	bl	8001d00 <DRV8305Init>

  while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_RESET);
 8002072:	bf00      	nop
 8002074:	2180      	movs	r1, #128	; 0x80
 8002076:	4849      	ldr	r0, [pc, #292]	; (800219c <main+0x1b4>)
 8002078:	f002 fb4e 	bl	8004718 <HAL_GPIO_ReadPin>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d0f8      	beq.n	8002074 <main+0x8c>
//  BLDCCalibZeroPos();

  //start timer interrupt
  HAL_TIM_Base_Start_IT(&htim6);
 8002082:	4847      	ldr	r0, [pc, #284]	; (80021a0 <main+0x1b8>)
 8002084:	f003 faad 	bl	80055e2 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (idx == 6000) {
 8002088:	4b46      	ldr	r3, [pc, #280]	; (80021a4 <main+0x1bc>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f241 7270 	movw	r2, #6000	; 0x1770
 8002090:	4293      	cmp	r3, r2
 8002092:	d174      	bne.n	800217e <main+0x196>
		  for (int32_t i = 0; i < 1000; i++) {
 8002094:	2300      	movs	r3, #0
 8002096:	617b      	str	r3, [r7, #20]
 8002098:	e069      	b.n	800216e <main+0x186>
			  printf("%f %f %f %f %f %f\n", g_curt[i][0], g_curt[i][1], g_curt[i][2], g_curt[i][3], g_curt[i][4], g_curt[i][5]);
 800209a:	4943      	ldr	r1, [pc, #268]	; (80021a8 <main+0x1c0>)
 800209c:	697a      	ldr	r2, [r7, #20]
 800209e:	4613      	mov	r3, r2
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	4413      	add	r3, r2
 80020a4:	00db      	lsls	r3, r3, #3
 80020a6:	440b      	add	r3, r1
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7fe fa4c 	bl	8000548 <__aeabi_f2d>
 80020b0:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80020b4:	493c      	ldr	r1, [pc, #240]	; (80021a8 <main+0x1c0>)
 80020b6:	697a      	ldr	r2, [r7, #20]
 80020b8:	4613      	mov	r3, r2
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	4413      	add	r3, r2
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	440b      	add	r3, r1
 80020c2:	3304      	adds	r3, #4
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7fe fa3e 	bl	8000548 <__aeabi_f2d>
 80020cc:	4604      	mov	r4, r0
 80020ce:	460d      	mov	r5, r1
 80020d0:	4935      	ldr	r1, [pc, #212]	; (80021a8 <main+0x1c0>)
 80020d2:	697a      	ldr	r2, [r7, #20]
 80020d4:	4613      	mov	r3, r2
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	4413      	add	r3, r2
 80020da:	00db      	lsls	r3, r3, #3
 80020dc:	440b      	add	r3, r1
 80020de:	3308      	adds	r3, #8
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7fe fa30 	bl	8000548 <__aeabi_f2d>
 80020e8:	4680      	mov	r8, r0
 80020ea:	4689      	mov	r9, r1
 80020ec:	492e      	ldr	r1, [pc, #184]	; (80021a8 <main+0x1c0>)
 80020ee:	697a      	ldr	r2, [r7, #20]
 80020f0:	4613      	mov	r3, r2
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	4413      	add	r3, r2
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	440b      	add	r3, r1
 80020fa:	330c      	adds	r3, #12
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4618      	mov	r0, r3
 8002100:	f7fe fa22 	bl	8000548 <__aeabi_f2d>
 8002104:	4682      	mov	sl, r0
 8002106:	468b      	mov	fp, r1
 8002108:	4927      	ldr	r1, [pc, #156]	; (80021a8 <main+0x1c0>)
 800210a:	697a      	ldr	r2, [r7, #20]
 800210c:	4613      	mov	r3, r2
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	4413      	add	r3, r2
 8002112:	00db      	lsls	r3, r3, #3
 8002114:	440b      	add	r3, r1
 8002116:	3310      	adds	r3, #16
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4618      	mov	r0, r3
 800211c:	f7fe fa14 	bl	8000548 <__aeabi_f2d>
 8002120:	e9c7 0100 	strd	r0, r1, [r7]
 8002124:	4920      	ldr	r1, [pc, #128]	; (80021a8 <main+0x1c0>)
 8002126:	697a      	ldr	r2, [r7, #20]
 8002128:	4613      	mov	r3, r2
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	4413      	add	r3, r2
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	440b      	add	r3, r1
 8002132:	3314      	adds	r3, #20
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4618      	mov	r0, r3
 8002138:	f7fe fa06 	bl	8000548 <__aeabi_f2d>
 800213c:	4602      	mov	r2, r0
 800213e:	460b      	mov	r3, r1
 8002140:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8002144:	ed97 7b00 	vldr	d7, [r7]
 8002148:	ed8d 7b06 	vstr	d7, [sp, #24]
 800214c:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8002150:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002154:	e9cd 4500 	strd	r4, r5, [sp]
 8002158:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800215c:	4813      	ldr	r0, [pc, #76]	; (80021ac <main+0x1c4>)
 800215e:	f005 fd51 	bl	8007c04 <iprintf>
			  HAL_Delay(5);
 8002162:	2005      	movs	r0, #5
 8002164:	f000 ff3c 	bl	8002fe0 <HAL_Delay>
		  for (int32_t i = 0; i < 1000; i++) {
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	3301      	adds	r3, #1
 800216c:	617b      	str	r3, [r7, #20]
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002174:	db91      	blt.n	800209a <main+0xb2>
		  }
		  idx = 6001;
 8002176:	4b0b      	ldr	r3, [pc, #44]	; (80021a4 <main+0x1bc>)
 8002178:	f241 7271 	movw	r2, #6001	; 0x1771
 800217c:	601a      	str	r2, [r3, #0]
	  }
	  //LED
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 800217e:	2110      	movs	r1, #16
 8002180:	480b      	ldr	r0, [pc, #44]	; (80021b0 <main+0x1c8>)
 8002182:	f002 fafa 	bl	800477a <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8002186:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800218a:	f000 ff29 	bl	8002fe0 <HAL_Delay>
	  if (idx == 6000) {
 800218e:	e77b      	b.n	8002088 <main+0xa0>
 8002190:	20006840 	.word	0x20006840
 8002194:	20000014 	.word	0x20000014
 8002198:	0800a97c 	.word	0x0800a97c
 800219c:	40020400 	.word	0x40020400
 80021a0:	200065dc 	.word	0x200065dc
 80021a4:	20000204 	.word	0x20000204
 80021a8:	20000318 	.word	0x20000318
 80021ac:	0800a994 	.word	0x0800a994
 80021b0:	40020000 	.word	0x40020000

080021b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b094      	sub	sp, #80	; 0x50
 80021b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021ba:	f107 0320 	add.w	r3, r7, #32
 80021be:	2230      	movs	r2, #48	; 0x30
 80021c0:	2100      	movs	r1, #0
 80021c2:	4618      	mov	r0, r3
 80021c4:	f005 f8ba 	bl	800733c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021c8:	f107 030c 	add.w	r3, r7, #12
 80021cc:	2200      	movs	r2, #0
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	605a      	str	r2, [r3, #4]
 80021d2:	609a      	str	r2, [r3, #8]
 80021d4:	60da      	str	r2, [r3, #12]
 80021d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80021d8:	2300      	movs	r3, #0
 80021da:	60bb      	str	r3, [r7, #8]
 80021dc:	4b28      	ldr	r3, [pc, #160]	; (8002280 <SystemClock_Config+0xcc>)
 80021de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e0:	4a27      	ldr	r2, [pc, #156]	; (8002280 <SystemClock_Config+0xcc>)
 80021e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021e6:	6413      	str	r3, [r2, #64]	; 0x40
 80021e8:	4b25      	ldr	r3, [pc, #148]	; (8002280 <SystemClock_Config+0xcc>)
 80021ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f0:	60bb      	str	r3, [r7, #8]
 80021f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021f4:	2300      	movs	r3, #0
 80021f6:	607b      	str	r3, [r7, #4]
 80021f8:	4b22      	ldr	r3, [pc, #136]	; (8002284 <SystemClock_Config+0xd0>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a21      	ldr	r2, [pc, #132]	; (8002284 <SystemClock_Config+0xd0>)
 80021fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002202:	6013      	str	r3, [r2, #0]
 8002204:	4b1f      	ldr	r3, [pc, #124]	; (8002284 <SystemClock_Config+0xd0>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800220c:	607b      	str	r3, [r7, #4]
 800220e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002210:	2302      	movs	r3, #2
 8002212:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002214:	2301      	movs	r3, #1
 8002216:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002218:	2310      	movs	r3, #16
 800221a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800221c:	2302      	movs	r3, #2
 800221e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002220:	2300      	movs	r3, #0
 8002222:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002224:	2308      	movs	r3, #8
 8002226:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002228:	23a8      	movs	r3, #168	; 0xa8
 800222a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800222c:	2302      	movs	r3, #2
 800222e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002230:	2304      	movs	r3, #4
 8002232:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002234:	f107 0320 	add.w	r3, r7, #32
 8002238:	4618      	mov	r0, r3
 800223a:	f002 fab9 	bl	80047b0 <HAL_RCC_OscConfig>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002244:	f000 f844 	bl	80022d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002248:	230f      	movs	r3, #15
 800224a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800224c:	2302      	movs	r3, #2
 800224e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002250:	2300      	movs	r3, #0
 8002252:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002254:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002258:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800225a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800225e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002260:	f107 030c 	add.w	r3, r7, #12
 8002264:	2105      	movs	r1, #5
 8002266:	4618      	mov	r0, r3
 8002268:	f002 fd12 	bl	8004c90 <HAL_RCC_ClockConfig>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002272:	f000 f82d 	bl	80022d0 <Error_Handler>
  }
}
 8002276:	bf00      	nop
 8002278:	3750      	adds	r7, #80	; 0x50
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	40023800 	.word	0x40023800
 8002284:	40007000 	.word	0x40007000

08002288 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
//UART Callback for printf(...)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle) {
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
	uart_flag=1;
 8002290:	4b05      	ldr	r3, [pc, #20]	; (80022a8 <HAL_UART_RxCpltCallback+0x20>)
 8002292:	2201      	movs	r2, #1
 8002294:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart1, uart_buf, 4);
 8002296:	2204      	movs	r2, #4
 8002298:	4904      	ldr	r1, [pc, #16]	; (80022ac <HAL_UART_RxCpltCallback+0x24>)
 800229a:	4805      	ldr	r0, [pc, #20]	; (80022b0 <HAL_UART_RxCpltCallback+0x28>)
 800229c:	f004 f91b 	bl	80064d6 <HAL_UART_Receive_IT>
}
 80022a0:	bf00      	nop
 80022a2:	3708      	adds	r7, #8
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	20000256 	.word	0x20000256
 80022ac:	20000000 	.word	0x20000000
 80022b0:	20006840 	.word	0x20006840

080022b4 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
    uart_com_send_it(huart);
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f000 fc5d 	bl	8002b7c <uart_com_send_it>
    dma_printf_send_it(huart);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f7ff fc38 	bl	8001b38 <dma_printf_send_it>
}
 80022c8:	bf00      	nop
 80022ca:	3708      	adds	r7, #8
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80022d4:	bf00      	nop
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
	...

080022e0 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 80022e4:	4b17      	ldr	r3, [pc, #92]	; (8002344 <MX_SPI2_Init+0x64>)
 80022e6:	4a18      	ldr	r2, [pc, #96]	; (8002348 <MX_SPI2_Init+0x68>)
 80022e8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80022ea:	4b16      	ldr	r3, [pc, #88]	; (8002344 <MX_SPI2_Init+0x64>)
 80022ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80022f0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80022f2:	4b14      	ldr	r3, [pc, #80]	; (8002344 <MX_SPI2_Init+0x64>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80022f8:	4b12      	ldr	r3, [pc, #72]	; (8002344 <MX_SPI2_Init+0x64>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80022fe:	4b11      	ldr	r3, [pc, #68]	; (8002344 <MX_SPI2_Init+0x64>)
 8002300:	2200      	movs	r2, #0
 8002302:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002304:	4b0f      	ldr	r3, [pc, #60]	; (8002344 <MX_SPI2_Init+0x64>)
 8002306:	2201      	movs	r2, #1
 8002308:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800230a:	4b0e      	ldr	r3, [pc, #56]	; (8002344 <MX_SPI2_Init+0x64>)
 800230c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002310:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002312:	4b0c      	ldr	r3, [pc, #48]	; (8002344 <MX_SPI2_Init+0x64>)
 8002314:	2218      	movs	r2, #24
 8002316:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002318:	4b0a      	ldr	r3, [pc, #40]	; (8002344 <MX_SPI2_Init+0x64>)
 800231a:	2200      	movs	r2, #0
 800231c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800231e:	4b09      	ldr	r3, [pc, #36]	; (8002344 <MX_SPI2_Init+0x64>)
 8002320:	2200      	movs	r2, #0
 8002322:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002324:	4b07      	ldr	r3, [pc, #28]	; (8002344 <MX_SPI2_Init+0x64>)
 8002326:	2200      	movs	r2, #0
 8002328:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800232a:	4b06      	ldr	r3, [pc, #24]	; (8002344 <MX_SPI2_Init+0x64>)
 800232c:	220a      	movs	r2, #10
 800232e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002330:	4804      	ldr	r0, [pc, #16]	; (8002344 <MX_SPI2_Init+0x64>)
 8002332:	f002 fe79 	bl	8005028 <HAL_SPI_Init>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800233c:	f7ff ffc8 	bl	80022d0 <Error_Handler>
  }

}
 8002340:	bf00      	nop
 8002342:	bd80      	pop	{r7, pc}
 8002344:	200064ec 	.word	0x200064ec
 8002348:	40003800 	.word	0x40003800

0800234c <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8002350:	4b17      	ldr	r3, [pc, #92]	; (80023b0 <MX_SPI3_Init+0x64>)
 8002352:	4a18      	ldr	r2, [pc, #96]	; (80023b4 <MX_SPI3_Init+0x68>)
 8002354:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002356:	4b16      	ldr	r3, [pc, #88]	; (80023b0 <MX_SPI3_Init+0x64>)
 8002358:	f44f 7282 	mov.w	r2, #260	; 0x104
 800235c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800235e:	4b14      	ldr	r3, [pc, #80]	; (80023b0 <MX_SPI3_Init+0x64>)
 8002360:	2200      	movs	r2, #0
 8002362:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002364:	4b12      	ldr	r3, [pc, #72]	; (80023b0 <MX_SPI3_Init+0x64>)
 8002366:	2200      	movs	r2, #0
 8002368:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800236a:	4b11      	ldr	r3, [pc, #68]	; (80023b0 <MX_SPI3_Init+0x64>)
 800236c:	2200      	movs	r2, #0
 800236e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002370:	4b0f      	ldr	r3, [pc, #60]	; (80023b0 <MX_SPI3_Init+0x64>)
 8002372:	2201      	movs	r2, #1
 8002374:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002376:	4b0e      	ldr	r3, [pc, #56]	; (80023b0 <MX_SPI3_Init+0x64>)
 8002378:	f44f 7200 	mov.w	r2, #512	; 0x200
 800237c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800237e:	4b0c      	ldr	r3, [pc, #48]	; (80023b0 <MX_SPI3_Init+0x64>)
 8002380:	2208      	movs	r2, #8
 8002382:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002384:	4b0a      	ldr	r3, [pc, #40]	; (80023b0 <MX_SPI3_Init+0x64>)
 8002386:	2200      	movs	r2, #0
 8002388:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800238a:	4b09      	ldr	r3, [pc, #36]	; (80023b0 <MX_SPI3_Init+0x64>)
 800238c:	2200      	movs	r2, #0
 800238e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002390:	4b07      	ldr	r3, [pc, #28]	; (80023b0 <MX_SPI3_Init+0x64>)
 8002392:	2200      	movs	r2, #0
 8002394:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8002396:	4b06      	ldr	r3, [pc, #24]	; (80023b0 <MX_SPI3_Init+0x64>)
 8002398:	220a      	movs	r2, #10
 800239a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800239c:	4804      	ldr	r0, [pc, #16]	; (80023b0 <MX_SPI3_Init+0x64>)
 800239e:	f002 fe43 	bl	8005028 <HAL_SPI_Init>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80023a8:	f7ff ff92 	bl	80022d0 <Error_Handler>
  }

}
 80023ac:	bf00      	nop
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	20006544 	.word	0x20006544
 80023b4:	40003c00 	.word	0x40003c00

080023b8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b08c      	sub	sp, #48	; 0x30
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c0:	f107 031c 	add.w	r3, r7, #28
 80023c4:	2200      	movs	r2, #0
 80023c6:	601a      	str	r2, [r3, #0]
 80023c8:	605a      	str	r2, [r3, #4]
 80023ca:	609a      	str	r2, [r3, #8]
 80023cc:	60da      	str	r2, [r3, #12]
 80023ce:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a33      	ldr	r2, [pc, #204]	; (80024a4 <HAL_SPI_MspInit+0xec>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d12d      	bne.n	8002436 <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80023da:	2300      	movs	r3, #0
 80023dc:	61bb      	str	r3, [r7, #24]
 80023de:	4b32      	ldr	r3, [pc, #200]	; (80024a8 <HAL_SPI_MspInit+0xf0>)
 80023e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e2:	4a31      	ldr	r2, [pc, #196]	; (80024a8 <HAL_SPI_MspInit+0xf0>)
 80023e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023e8:	6413      	str	r3, [r2, #64]	; 0x40
 80023ea:	4b2f      	ldr	r3, [pc, #188]	; (80024a8 <HAL_SPI_MspInit+0xf0>)
 80023ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023f2:	61bb      	str	r3, [r7, #24]
 80023f4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023f6:	2300      	movs	r3, #0
 80023f8:	617b      	str	r3, [r7, #20]
 80023fa:	4b2b      	ldr	r3, [pc, #172]	; (80024a8 <HAL_SPI_MspInit+0xf0>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fe:	4a2a      	ldr	r2, [pc, #168]	; (80024a8 <HAL_SPI_MspInit+0xf0>)
 8002400:	f043 0302 	orr.w	r3, r3, #2
 8002404:	6313      	str	r3, [r2, #48]	; 0x30
 8002406:	4b28      	ldr	r3, [pc, #160]	; (80024a8 <HAL_SPI_MspInit+0xf0>)
 8002408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	617b      	str	r3, [r7, #20]
 8002410:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002412:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002416:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002418:	2302      	movs	r3, #2
 800241a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241c:	2300      	movs	r3, #0
 800241e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002420:	2303      	movs	r3, #3
 8002422:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002424:	2305      	movs	r3, #5
 8002426:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002428:	f107 031c 	add.w	r3, r7, #28
 800242c:	4619      	mov	r1, r3
 800242e:	481f      	ldr	r0, [pc, #124]	; (80024ac <HAL_SPI_MspInit+0xf4>)
 8002430:	f001 ffd8 	bl	80043e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8002434:	e031      	b.n	800249a <HAL_SPI_MspInit+0xe2>
  else if(spiHandle->Instance==SPI3)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a1d      	ldr	r2, [pc, #116]	; (80024b0 <HAL_SPI_MspInit+0xf8>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d12c      	bne.n	800249a <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002440:	2300      	movs	r3, #0
 8002442:	613b      	str	r3, [r7, #16]
 8002444:	4b18      	ldr	r3, [pc, #96]	; (80024a8 <HAL_SPI_MspInit+0xf0>)
 8002446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002448:	4a17      	ldr	r2, [pc, #92]	; (80024a8 <HAL_SPI_MspInit+0xf0>)
 800244a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800244e:	6413      	str	r3, [r2, #64]	; 0x40
 8002450:	4b15      	ldr	r3, [pc, #84]	; (80024a8 <HAL_SPI_MspInit+0xf0>)
 8002452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002454:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002458:	613b      	str	r3, [r7, #16]
 800245a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800245c:	2300      	movs	r3, #0
 800245e:	60fb      	str	r3, [r7, #12]
 8002460:	4b11      	ldr	r3, [pc, #68]	; (80024a8 <HAL_SPI_MspInit+0xf0>)
 8002462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002464:	4a10      	ldr	r2, [pc, #64]	; (80024a8 <HAL_SPI_MspInit+0xf0>)
 8002466:	f043 0304 	orr.w	r3, r3, #4
 800246a:	6313      	str	r3, [r2, #48]	; 0x30
 800246c:	4b0e      	ldr	r3, [pc, #56]	; (80024a8 <HAL_SPI_MspInit+0xf0>)
 800246e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002470:	f003 0304 	and.w	r3, r3, #4
 8002474:	60fb      	str	r3, [r7, #12]
 8002476:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002478:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800247c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800247e:	2302      	movs	r3, #2
 8002480:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002482:	2300      	movs	r3, #0
 8002484:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002486:	2303      	movs	r3, #3
 8002488:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800248a:	2306      	movs	r3, #6
 800248c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800248e:	f107 031c 	add.w	r3, r7, #28
 8002492:	4619      	mov	r1, r3
 8002494:	4807      	ldr	r0, [pc, #28]	; (80024b4 <HAL_SPI_MspInit+0xfc>)
 8002496:	f001 ffa5 	bl	80043e4 <HAL_GPIO_Init>
}
 800249a:	bf00      	nop
 800249c:	3730      	adds	r7, #48	; 0x30
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	40003800 	.word	0x40003800
 80024a8:	40023800 	.word	0x40023800
 80024ac:	40020400 	.word	0x40020400
 80024b0:	40003c00 	.word	0x40003c00
 80024b4:	40020800 	.word	0x40020800

080024b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024be:	2300      	movs	r3, #0
 80024c0:	607b      	str	r3, [r7, #4]
 80024c2:	4b10      	ldr	r3, [pc, #64]	; (8002504 <HAL_MspInit+0x4c>)
 80024c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c6:	4a0f      	ldr	r2, [pc, #60]	; (8002504 <HAL_MspInit+0x4c>)
 80024c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024cc:	6453      	str	r3, [r2, #68]	; 0x44
 80024ce:	4b0d      	ldr	r3, [pc, #52]	; (8002504 <HAL_MspInit+0x4c>)
 80024d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024d6:	607b      	str	r3, [r7, #4]
 80024d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024da:	2300      	movs	r3, #0
 80024dc:	603b      	str	r3, [r7, #0]
 80024de:	4b09      	ldr	r3, [pc, #36]	; (8002504 <HAL_MspInit+0x4c>)
 80024e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e2:	4a08      	ldr	r2, [pc, #32]	; (8002504 <HAL_MspInit+0x4c>)
 80024e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024e8:	6413      	str	r3, [r2, #64]	; 0x40
 80024ea:	4b06      	ldr	r3, [pc, #24]	; (8002504 <HAL_MspInit+0x4c>)
 80024ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f2:	603b      	str	r3, [r7, #0]
 80024f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024f6:	bf00      	nop
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	40023800 	.word	0x40023800

08002508 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800250c:	bf00      	nop
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr

08002516 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002516:	b480      	push	{r7}
 8002518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800251a:	e7fe      	b.n	800251a <HardFault_Handler+0x4>

0800251c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002520:	e7fe      	b.n	8002520 <MemManage_Handler+0x4>

08002522 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002522:	b480      	push	{r7}
 8002524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002526:	e7fe      	b.n	8002526 <BusFault_Handler+0x4>

08002528 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800252c:	e7fe      	b.n	800252c <UsageFault_Handler+0x4>

0800252e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800252e:	b480      	push	{r7}
 8002530:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002532:	bf00      	nop
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002540:	bf00      	nop
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr

0800254a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800254a:	b480      	push	{r7}
 800254c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800254e:	bf00      	nop
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800255c:	f000 fd20 	bl	8002fa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002560:	bf00      	nop
 8002562:	bd80      	pop	{r7, pc}

08002564 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002568:	4802      	ldr	r0, [pc, #8]	; (8002574 <ADC_IRQHandler+0x10>)
 800256a:	f000 fd9e 	bl	80030aa <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800256e:	bf00      	nop
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	20000270 	.word	0x20000270

08002578 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800257c:	4802      	ldr	r0, [pc, #8]	; (8002588 <USART1_IRQHandler+0x10>)
 800257e:	f004 f86b 	bl	8006658 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002582:	bf00      	nop
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	20006840 	.word	0x20006840

0800258c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002590:	4802      	ldr	r0, [pc, #8]	; (800259c <TIM6_DAC_IRQHandler+0x10>)
 8002592:	f003 f8b3 	bl	80056fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002596:	bf00      	nop
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	200065dc 	.word	0x200065dc

080025a0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80025a4:	4802      	ldr	r0, [pc, #8]	; (80025b0 <DMA2_Stream0_IRQHandler+0x10>)
 80025a6:	f001 fcb5 	bl	8003f14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80025aa:	bf00      	nop
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	200002b8 	.word	0x200002b8

080025b4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80025b8:	4802      	ldr	r0, [pc, #8]	; (80025c4 <DMA2_Stream2_IRQHandler+0x10>)
 80025ba:	f001 fcab 	bl	8003f14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80025be:	bf00      	nop
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	200067e0 	.word	0x200067e0

080025c8 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80025cc:	4802      	ldr	r0, [pc, #8]	; (80025d8 <DMA2_Stream7_IRQHandler+0x10>)
 80025ce:	f001 fca1 	bl	8003f14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80025d2:	bf00      	nop
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	20006780 	.word	0x20006780

080025dc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b086      	sub	sp, #24
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025e8:	2300      	movs	r3, #0
 80025ea:	617b      	str	r3, [r7, #20]
 80025ec:	e00a      	b.n	8002604 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80025ee:	f3af 8000 	nop.w
 80025f2:	4601      	mov	r1, r0
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	1c5a      	adds	r2, r3, #1
 80025f8:	60ba      	str	r2, [r7, #8]
 80025fa:	b2ca      	uxtb	r2, r1
 80025fc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	3301      	adds	r3, #1
 8002602:	617b      	str	r3, [r7, #20]
 8002604:	697a      	ldr	r2, [r7, #20]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	429a      	cmp	r2, r3
 800260a:	dbf0      	blt.n	80025ee <_read+0x12>
	}

return len;
 800260c:	687b      	ldr	r3, [r7, #4]
}
 800260e:	4618      	mov	r0, r3
 8002610:	3718      	adds	r7, #24
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002616:	b580      	push	{r7, lr}
 8002618:	b086      	sub	sp, #24
 800261a:	af00      	add	r7, sp, #0
 800261c:	60f8      	str	r0, [r7, #12]
 800261e:	60b9      	str	r1, [r7, #8]
 8002620:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002622:	2300      	movs	r3, #0
 8002624:	617b      	str	r3, [r7, #20]
 8002626:	e009      	b.n	800263c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	1c5a      	adds	r2, r3, #1
 800262c:	60ba      	str	r2, [r7, #8]
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	4618      	mov	r0, r3
 8002632:	f7ff fccb 	bl	8001fcc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	3301      	adds	r3, #1
 800263a:	617b      	str	r3, [r7, #20]
 800263c:	697a      	ldr	r2, [r7, #20]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	429a      	cmp	r2, r3
 8002642:	dbf1      	blt.n	8002628 <_write+0x12>
	}
	return len;
 8002644:	687b      	ldr	r3, [r7, #4]
}
 8002646:	4618      	mov	r0, r3
 8002648:	3718      	adds	r7, #24
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <_close>:

int _close(int file)
{
 800264e:	b480      	push	{r7}
 8002650:	b083      	sub	sp, #12
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
	return -1;
 8002656:	f04f 33ff 	mov.w	r3, #4294967295
}
 800265a:	4618      	mov	r0, r3
 800265c:	370c      	adds	r7, #12
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr

08002666 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002666:	b480      	push	{r7}
 8002668:	b083      	sub	sp, #12
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
 800266e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002676:	605a      	str	r2, [r3, #4]
	return 0;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	370c      	adds	r7, #12
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr

08002686 <_isatty>:

int _isatty(int file)
{
 8002686:	b480      	push	{r7}
 8002688:	b083      	sub	sp, #12
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
	return 1;
 800268e:	2301      	movs	r3, #1
}
 8002690:	4618      	mov	r0, r3
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800269c:	b480      	push	{r7}
 800269e:	b085      	sub	sp, #20
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	607a      	str	r2, [r7, #4]
	return 0;
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3714      	adds	r7, #20
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
	...

080026b8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80026c0:	4b11      	ldr	r3, [pc, #68]	; (8002708 <_sbrk+0x50>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d102      	bne.n	80026ce <_sbrk+0x16>
		heap_end = &end;
 80026c8:	4b0f      	ldr	r3, [pc, #60]	; (8002708 <_sbrk+0x50>)
 80026ca:	4a10      	ldr	r2, [pc, #64]	; (800270c <_sbrk+0x54>)
 80026cc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80026ce:	4b0e      	ldr	r3, [pc, #56]	; (8002708 <_sbrk+0x50>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80026d4:	4b0c      	ldr	r3, [pc, #48]	; (8002708 <_sbrk+0x50>)
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	4413      	add	r3, r2
 80026dc:	466a      	mov	r2, sp
 80026de:	4293      	cmp	r3, r2
 80026e0:	d907      	bls.n	80026f2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80026e2:	f004 fe01 	bl	80072e8 <__errno>
 80026e6:	4602      	mov	r2, r0
 80026e8:	230c      	movs	r3, #12
 80026ea:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80026ec:	f04f 33ff 	mov.w	r3, #4294967295
 80026f0:	e006      	b.n	8002700 <_sbrk+0x48>
	}

	heap_end += incr;
 80026f2:	4b05      	ldr	r3, [pc, #20]	; (8002708 <_sbrk+0x50>)
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4413      	add	r3, r2
 80026fa:	4a03      	ldr	r2, [pc, #12]	; (8002708 <_sbrk+0x50>)
 80026fc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80026fe:	68fb      	ldr	r3, [r7, #12]
}
 8002700:	4618      	mov	r0, r3
 8002702:	3710      	adds	r7, #16
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	2000025c 	.word	0x2000025c
 800270c:	20006888 	.word	0x20006888

08002710 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002714:	4b08      	ldr	r3, [pc, #32]	; (8002738 <SystemInit+0x28>)
 8002716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800271a:	4a07      	ldr	r2, [pc, #28]	; (8002738 <SystemInit+0x28>)
 800271c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002720:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002724:	4b04      	ldr	r3, [pc, #16]	; (8002738 <SystemInit+0x28>)
 8002726:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800272a:	609a      	str	r2, [r3, #8]
#endif
}
 800272c:	bf00      	nop
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	e000ed00 	.word	0xe000ed00

0800273c <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b08e      	sub	sp, #56	; 0x38
 8002740:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002742:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002746:	2200      	movs	r2, #0
 8002748:	601a      	str	r2, [r3, #0]
 800274a:	605a      	str	r2, [r3, #4]
 800274c:	609a      	str	r2, [r3, #8]
 800274e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002750:	f107 0320 	add.w	r3, r7, #32
 8002754:	2200      	movs	r2, #0
 8002756:	601a      	str	r2, [r3, #0]
 8002758:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800275a:	1d3b      	adds	r3, r7, #4
 800275c:	2200      	movs	r2, #0
 800275e:	601a      	str	r2, [r3, #0]
 8002760:	605a      	str	r2, [r3, #4]
 8002762:	609a      	str	r2, [r3, #8]
 8002764:	60da      	str	r2, [r3, #12]
 8002766:	611a      	str	r2, [r3, #16]
 8002768:	615a      	str	r2, [r3, #20]
 800276a:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 800276c:	4b34      	ldr	r3, [pc, #208]	; (8002840 <MX_TIM2_Init+0x104>)
 800276e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002772:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 42000-1;
 8002774:	4b32      	ldr	r3, [pc, #200]	; (8002840 <MX_TIM2_Init+0x104>)
 8002776:	f24a 420f 	movw	r2, #41999	; 0xa40f
 800277a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800277c:	4b30      	ldr	r3, [pc, #192]	; (8002840 <MX_TIM2_Init+0x104>)
 800277e:	2220      	movs	r2, #32
 8002780:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8002782:	4b2f      	ldr	r3, [pc, #188]	; (8002840 <MX_TIM2_Init+0x104>)
 8002784:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002788:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800278a:	4b2d      	ldr	r3, [pc, #180]	; (8002840 <MX_TIM2_Init+0x104>)
 800278c:	2200      	movs	r2, #0
 800278e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002790:	4b2b      	ldr	r3, [pc, #172]	; (8002840 <MX_TIM2_Init+0x104>)
 8002792:	2280      	movs	r2, #128	; 0x80
 8002794:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002796:	482a      	ldr	r0, [pc, #168]	; (8002840 <MX_TIM2_Init+0x104>)
 8002798:	f002 fef8 	bl	800558c <HAL_TIM_Base_Init>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80027a2:	f7ff fd95 	bl	80022d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027aa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80027ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027b0:	4619      	mov	r1, r3
 80027b2:	4823      	ldr	r0, [pc, #140]	; (8002840 <MX_TIM2_Init+0x104>)
 80027b4:	f003 f970 	bl	8005a98 <HAL_TIM_ConfigClockSource>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80027be:	f7ff fd87 	bl	80022d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80027c2:	481f      	ldr	r0, [pc, #124]	; (8002840 <MX_TIM2_Init+0x104>)
 80027c4:	f002 ff31 	bl	800562a <HAL_TIM_PWM_Init>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d001      	beq.n	80027d2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80027ce:	f7ff fd7f 	bl	80022d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 80027d2:	2350      	movs	r3, #80	; 0x50
 80027d4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027d6:	2300      	movs	r3, #0
 80027d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80027da:	f107 0320 	add.w	r3, r7, #32
 80027de:	4619      	mov	r1, r3
 80027e0:	4817      	ldr	r0, [pc, #92]	; (8002840 <MX_TIM2_Init+0x104>)
 80027e2:	f003 fd49 	bl	8006278 <HAL_TIMEx_MasterConfigSynchronization>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d001      	beq.n	80027f0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80027ec:	f7ff fd70 	bl	80022d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027f0:	2360      	movs	r3, #96	; 0x60
 80027f2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80027f4:	2300      	movs	r3, #0
 80027f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027f8:	2300      	movs	r3, #0
 80027fa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027fc:	2300      	movs	r3, #0
 80027fe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002800:	1d3b      	adds	r3, r7, #4
 8002802:	2200      	movs	r2, #0
 8002804:	4619      	mov	r1, r3
 8002806:	480e      	ldr	r0, [pc, #56]	; (8002840 <MX_TIM2_Init+0x104>)
 8002808:	f003 f880 	bl	800590c <HAL_TIM_PWM_ConfigChannel>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002812:	f7ff fd5d 	bl	80022d0 <Error_Handler>
  }
  sConfigOC.Pulse = 998;
 8002816:	f240 33e6 	movw	r3, #998	; 0x3e6
 800281a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800281c:	1d3b      	adds	r3, r7, #4
 800281e:	2204      	movs	r2, #4
 8002820:	4619      	mov	r1, r3
 8002822:	4807      	ldr	r0, [pc, #28]	; (8002840 <MX_TIM2_Init+0x104>)
 8002824:	f003 f872 	bl	800590c <HAL_TIM_PWM_ConfigChannel>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <MX_TIM2_Init+0xf6>
  {
    Error_Handler();
 800282e:	f7ff fd4f 	bl	80022d0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8002832:	4803      	ldr	r0, [pc, #12]	; (8002840 <MX_TIM2_Init+0x104>)
 8002834:	f000 f942 	bl	8002abc <HAL_TIM_MspPostInit>

}
 8002838:	bf00      	nop
 800283a:	3738      	adds	r7, #56	; 0x38
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	2000661c 	.word	0x2000661c

08002844 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800284a:	463b      	mov	r3, r7
 800284c:	2200      	movs	r2, #0
 800284e:	601a      	str	r2, [r3, #0]
 8002850:	605a      	str	r2, [r3, #4]

  htim6.Instance = TIM6;
 8002852:	4b15      	ldr	r3, [pc, #84]	; (80028a8 <MX_TIM6_Init+0x64>)
 8002854:	4a15      	ldr	r2, [pc, #84]	; (80028ac <MX_TIM6_Init+0x68>)
 8002856:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8002858:	4b13      	ldr	r3, [pc, #76]	; (80028a8 <MX_TIM6_Init+0x64>)
 800285a:	2200      	movs	r2, #0
 800285c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800285e:	4b12      	ldr	r3, [pc, #72]	; (80028a8 <MX_TIM6_Init+0x64>)
 8002860:	2200      	movs	r2, #0
 8002862:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 8400;
 8002864:	4b10      	ldr	r3, [pc, #64]	; (80028a8 <MX_TIM6_Init+0x64>)
 8002866:	f242 02d0 	movw	r2, #8400	; 0x20d0
 800286a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800286c:	4b0e      	ldr	r3, [pc, #56]	; (80028a8 <MX_TIM6_Init+0x64>)
 800286e:	2200      	movs	r2, #0
 8002870:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002872:	480d      	ldr	r0, [pc, #52]	; (80028a8 <MX_TIM6_Init+0x64>)
 8002874:	f002 fe8a 	bl	800558c <HAL_TIM_Base_Init>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800287e:	f7ff fd27 	bl	80022d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002882:	2300      	movs	r3, #0
 8002884:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002886:	2300      	movs	r3, #0
 8002888:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800288a:	463b      	mov	r3, r7
 800288c:	4619      	mov	r1, r3
 800288e:	4806      	ldr	r0, [pc, #24]	; (80028a8 <MX_TIM6_Init+0x64>)
 8002890:	f003 fcf2 	bl	8006278 <HAL_TIMEx_MasterConfigSynchronization>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800289a:	f7ff fd19 	bl	80022d0 <Error_Handler>
  }

}
 800289e:	bf00      	nop
 80028a0:	3708      	adds	r7, #8
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	200065dc 	.word	0x200065dc
 80028ac:	40001000 	.word	0x40001000

080028b0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b092      	sub	sp, #72	; 0x48
 80028b4:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028b6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80028ba:	2200      	movs	r2, #0
 80028bc:	601a      	str	r2, [r3, #0]
 80028be:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80028c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028c4:	2200      	movs	r2, #0
 80028c6:	601a      	str	r2, [r3, #0]
 80028c8:	605a      	str	r2, [r3, #4]
 80028ca:	609a      	str	r2, [r3, #8]
 80028cc:	60da      	str	r2, [r3, #12]
 80028ce:	611a      	str	r2, [r3, #16]
 80028d0:	615a      	str	r2, [r3, #20]
 80028d2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80028d4:	1d3b      	adds	r3, r7, #4
 80028d6:	2220      	movs	r2, #32
 80028d8:	2100      	movs	r1, #0
 80028da:	4618      	mov	r0, r3
 80028dc:	f004 fd2e 	bl	800733c <memset>

  htim8.Instance = TIM8;
 80028e0:	4b45      	ldr	r3, [pc, #276]	; (80029f8 <MX_TIM8_Init+0x148>)
 80028e2:	4a46      	ldr	r2, [pc, #280]	; (80029fc <MX_TIM8_Init+0x14c>)
 80028e4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80028e6:	4b44      	ldr	r3, [pc, #272]	; (80029f8 <MX_TIM8_Init+0x148>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80028ec:	4b42      	ldr	r3, [pc, #264]	; (80029f8 <MX_TIM8_Init+0x148>)
 80028ee:	2220      	movs	r2, #32
 80028f0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 2100-1;
 80028f2:	4b41      	ldr	r3, [pc, #260]	; (80029f8 <MX_TIM8_Init+0x148>)
 80028f4:	f640 0233 	movw	r2, #2099	; 0x833
 80028f8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028fa:	4b3f      	ldr	r3, [pc, #252]	; (80029f8 <MX_TIM8_Init+0x148>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002900:	4b3d      	ldr	r3, [pc, #244]	; (80029f8 <MX_TIM8_Init+0x148>)
 8002902:	2200      	movs	r2, #0
 8002904:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002906:	4b3c      	ldr	r3, [pc, #240]	; (80029f8 <MX_TIM8_Init+0x148>)
 8002908:	2200      	movs	r2, #0
 800290a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800290c:	483a      	ldr	r0, [pc, #232]	; (80029f8 <MX_TIM8_Init+0x148>)
 800290e:	f002 fe8c 	bl	800562a <HAL_TIM_PWM_Init>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d001      	beq.n	800291c <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8002918:	f7ff fcda 	bl	80022d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 800291c:	2370      	movs	r3, #112	; 0x70
 800291e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002920:	2300      	movs	r3, #0
 8002922:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002924:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002928:	4619      	mov	r1, r3
 800292a:	4833      	ldr	r0, [pc, #204]	; (80029f8 <MX_TIM8_Init+0x148>)
 800292c:	f003 fca4 	bl	8006278 <HAL_TIMEx_MasterConfigSynchronization>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8002936:	f7ff fccb 	bl	80022d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800293a:	2360      	movs	r3, #96	; 0x60
 800293c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800293e:	2300      	movs	r3, #0
 8002940:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002942:	2300      	movs	r3, #0
 8002944:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002946:	2300      	movs	r3, #0
 8002948:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800294a:	2300      	movs	r3, #0
 800294c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800294e:	2300      	movs	r3, #0
 8002950:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002952:	2300      	movs	r3, #0
 8002954:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002956:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800295a:	2200      	movs	r2, #0
 800295c:	4619      	mov	r1, r3
 800295e:	4826      	ldr	r0, [pc, #152]	; (80029f8 <MX_TIM8_Init+0x148>)
 8002960:	f002 ffd4 	bl	800590c <HAL_TIM_PWM_ConfigChannel>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 800296a:	f7ff fcb1 	bl	80022d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800296e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002972:	2204      	movs	r2, #4
 8002974:	4619      	mov	r1, r3
 8002976:	4820      	ldr	r0, [pc, #128]	; (80029f8 <MX_TIM8_Init+0x148>)
 8002978:	f002 ffc8 	bl	800590c <HAL_TIM_PWM_ConfigChannel>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 8002982:	f7ff fca5 	bl	80022d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002986:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800298a:	2208      	movs	r2, #8
 800298c:	4619      	mov	r1, r3
 800298e:	481a      	ldr	r0, [pc, #104]	; (80029f8 <MX_TIM8_Init+0x148>)
 8002990:	f002 ffbc 	bl	800590c <HAL_TIM_PWM_ConfigChannel>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <MX_TIM8_Init+0xee>
  {
    Error_Handler();
 800299a:	f7ff fc99 	bl	80022d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800299e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029a2:	220c      	movs	r2, #12
 80029a4:	4619      	mov	r1, r3
 80029a6:	4814      	ldr	r0, [pc, #80]	; (80029f8 <MX_TIM8_Init+0x148>)
 80029a8:	f002 ffb0 	bl	800590c <HAL_TIM_PWM_ConfigChannel>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d001      	beq.n	80029b6 <MX_TIM8_Init+0x106>
  {
    Error_Handler();
 80029b2:	f7ff fc8d 	bl	80022d0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80029b6:	2300      	movs	r3, #0
 80029b8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80029ba:	2300      	movs	r3, #0
 80029bc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80029be:	2300      	movs	r3, #0
 80029c0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80029c2:	2300      	movs	r3, #0
 80029c4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80029c6:	2300      	movs	r3, #0
 80029c8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80029ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029ce:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80029d0:	2300      	movs	r3, #0
 80029d2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80029d4:	1d3b      	adds	r3, r7, #4
 80029d6:	4619      	mov	r1, r3
 80029d8:	4807      	ldr	r0, [pc, #28]	; (80029f8 <MX_TIM8_Init+0x148>)
 80029da:	f003 fcc9 	bl	8006370 <HAL_TIMEx_ConfigBreakDeadTime>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d001      	beq.n	80029e8 <MX_TIM8_Init+0x138>
  {
    Error_Handler();
 80029e4:	f7ff fc74 	bl	80022d0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 80029e8:	4803      	ldr	r0, [pc, #12]	; (80029f8 <MX_TIM8_Init+0x148>)
 80029ea:	f000 f867 	bl	8002abc <HAL_TIM_MspPostInit>

}
 80029ee:	bf00      	nop
 80029f0:	3748      	adds	r7, #72	; 0x48
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	2000659c 	.word	0x2000659c
 80029fc:	40010400 	.word	0x40010400

08002a00 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a10:	d10e      	bne.n	8002a30 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a12:	2300      	movs	r3, #0
 8002a14:	60fb      	str	r3, [r7, #12]
 8002a16:	4b16      	ldr	r3, [pc, #88]	; (8002a70 <HAL_TIM_Base_MspInit+0x70>)
 8002a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1a:	4a15      	ldr	r2, [pc, #84]	; (8002a70 <HAL_TIM_Base_MspInit+0x70>)
 8002a1c:	f043 0301 	orr.w	r3, r3, #1
 8002a20:	6413      	str	r3, [r2, #64]	; 0x40
 8002a22:	4b13      	ldr	r3, [pc, #76]	; (8002a70 <HAL_TIM_Base_MspInit+0x70>)
 8002a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	60fb      	str	r3, [r7, #12]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8002a2e:	e01a      	b.n	8002a66 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM6)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a0f      	ldr	r2, [pc, #60]	; (8002a74 <HAL_TIM_Base_MspInit+0x74>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d115      	bne.n	8002a66 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	60bb      	str	r3, [r7, #8]
 8002a3e:	4b0c      	ldr	r3, [pc, #48]	; (8002a70 <HAL_TIM_Base_MspInit+0x70>)
 8002a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a42:	4a0b      	ldr	r2, [pc, #44]	; (8002a70 <HAL_TIM_Base_MspInit+0x70>)
 8002a44:	f043 0310 	orr.w	r3, r3, #16
 8002a48:	6413      	str	r3, [r2, #64]	; 0x40
 8002a4a:	4b09      	ldr	r3, [pc, #36]	; (8002a70 <HAL_TIM_Base_MspInit+0x70>)
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4e:	f003 0310 	and.w	r3, r3, #16
 8002a52:	60bb      	str	r3, [r7, #8]
 8002a54:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002a56:	2200      	movs	r2, #0
 8002a58:	2100      	movs	r1, #0
 8002a5a:	2036      	movs	r0, #54	; 0x36
 8002a5c:	f001 f8fb 	bl	8003c56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002a60:	2036      	movs	r0, #54	; 0x36
 8002a62:	f001 f914 	bl	8003c8e <HAL_NVIC_EnableIRQ>
}
 8002a66:	bf00      	nop
 8002a68:	3710      	adds	r7, #16
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	40023800 	.word	0x40023800
 8002a74:	40001000 	.word	0x40001000

08002a78 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM8)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a0b      	ldr	r2, [pc, #44]	; (8002ab4 <HAL_TIM_PWM_MspInit+0x3c>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d10d      	bne.n	8002aa6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	60fb      	str	r3, [r7, #12]
 8002a8e:	4b0a      	ldr	r3, [pc, #40]	; (8002ab8 <HAL_TIM_PWM_MspInit+0x40>)
 8002a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a92:	4a09      	ldr	r2, [pc, #36]	; (8002ab8 <HAL_TIM_PWM_MspInit+0x40>)
 8002a94:	f043 0302 	orr.w	r3, r3, #2
 8002a98:	6453      	str	r3, [r2, #68]	; 0x44
 8002a9a:	4b07      	ldr	r3, [pc, #28]	; (8002ab8 <HAL_TIM_PWM_MspInit+0x40>)
 8002a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	60fb      	str	r3, [r7, #12]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002aa6:	bf00      	nop
 8002aa8:	3714      	adds	r7, #20
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	40010400 	.word	0x40010400
 8002ab8:	40023800 	.word	0x40023800

08002abc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b08a      	sub	sp, #40	; 0x28
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ac4:	f107 0314 	add.w	r3, r7, #20
 8002ac8:	2200      	movs	r2, #0
 8002aca:	601a      	str	r2, [r3, #0]
 8002acc:	605a      	str	r2, [r3, #4]
 8002ace:	609a      	str	r2, [r3, #8]
 8002ad0:	60da      	str	r2, [r3, #12]
 8002ad2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002adc:	d11e      	bne.n	8002b1c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ade:	2300      	movs	r3, #0
 8002ae0:	613b      	str	r3, [r7, #16]
 8002ae2:	4b22      	ldr	r3, [pc, #136]	; (8002b6c <HAL_TIM_MspPostInit+0xb0>)
 8002ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae6:	4a21      	ldr	r2, [pc, #132]	; (8002b6c <HAL_TIM_MspPostInit+0xb0>)
 8002ae8:	f043 0301 	orr.w	r3, r3, #1
 8002aec:	6313      	str	r3, [r2, #48]	; 0x30
 8002aee:	4b1f      	ldr	r3, [pc, #124]	; (8002b6c <HAL_TIM_MspPostInit+0xb0>)
 8002af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	613b      	str	r3, [r7, #16]
 8002af8:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA5     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002afa:	2320      	movs	r3, #32
 8002afc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002afe:	2302      	movs	r3, #2
 8002b00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b02:	2300      	movs	r3, #0
 8002b04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b06:	2300      	movs	r3, #0
 8002b08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b0e:	f107 0314 	add.w	r3, r7, #20
 8002b12:	4619      	mov	r1, r3
 8002b14:	4816      	ldr	r0, [pc, #88]	; (8002b70 <HAL_TIM_MspPostInit+0xb4>)
 8002b16:	f001 fc65 	bl	80043e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002b1a:	e023      	b.n	8002b64 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM8)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a14      	ldr	r2, [pc, #80]	; (8002b74 <HAL_TIM_MspPostInit+0xb8>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d11e      	bne.n	8002b64 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b26:	2300      	movs	r3, #0
 8002b28:	60fb      	str	r3, [r7, #12]
 8002b2a:	4b10      	ldr	r3, [pc, #64]	; (8002b6c <HAL_TIM_MspPostInit+0xb0>)
 8002b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2e:	4a0f      	ldr	r2, [pc, #60]	; (8002b6c <HAL_TIM_MspPostInit+0xb0>)
 8002b30:	f043 0304 	orr.w	r3, r3, #4
 8002b34:	6313      	str	r3, [r2, #48]	; 0x30
 8002b36:	4b0d      	ldr	r3, [pc, #52]	; (8002b6c <HAL_TIM_MspPostInit+0xb0>)
 8002b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3a:	f003 0304 	and.w	r3, r3, #4
 8002b3e:	60fb      	str	r3, [r7, #12]
 8002b40:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8002b42:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002b46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b48:	2302      	movs	r3, #2
 8002b4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b50:	2303      	movs	r3, #3
 8002b52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002b54:	2303      	movs	r3, #3
 8002b56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b58:	f107 0314 	add.w	r3, r7, #20
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	4806      	ldr	r0, [pc, #24]	; (8002b78 <HAL_TIM_MspPostInit+0xbc>)
 8002b60:	f001 fc40 	bl	80043e4 <HAL_GPIO_Init>
}
 8002b64:	bf00      	nop
 8002b66:	3728      	adds	r7, #40	; 0x28
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	40023800 	.word	0x40023800
 8002b70:	40020000 	.word	0x40020000
 8002b74:	40010400 	.word	0x40010400
 8002b78:	40020800 	.word	0x40020800

08002b7c <uart_com_send_it>:
    uart_com_putc(value.u32_val&0xFF);
    uart_com_putc(UART_COM_END_0);
    uart_com_putc(UART_COM_END_1);
}

void uart_com_send_it(UART_HandleTypeDef *huart) {
 8002b7c:	b590      	push	{r4, r7, lr}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
    if(uart_com_ring_tx.huart != huart) return;
 8002b84:	4b18      	ldr	r3, [pc, #96]	; (8002be8 <uart_com_send_it+0x6c>)
 8002b86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d127      	bne.n	8002be0 <uart_com_send_it+0x64>

    uart_com_ring_forward_r_ptr(&uart_com_ring_tx, previous_send_len);
 8002b90:	4b16      	ldr	r3, [pc, #88]	; (8002bec <uart_com_send_it+0x70>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4619      	mov	r1, r3
 8002b96:	4814      	ldr	r0, [pc, #80]	; (8002be8 <uart_com_send_it+0x6c>)
 8002b98:	f000 f87c 	bl	8002c94 <uart_com_ring_forward_r_ptr>
    uint16_t len = (uint16_t)uart_com_ring_available_linear(&uart_com_ring_tx);
 8002b9c:	4812      	ldr	r0, [pc, #72]	; (8002be8 <uart_com_send_it+0x6c>)
 8002b9e:	f000 f847 	bl	8002c30 <uart_com_ring_available_linear>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	81fb      	strh	r3, [r7, #14]
    if (len > 0 ) {
 8002ba6:	89fb      	ldrh	r3, [r7, #14]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d015      	beq.n	8002bd8 <uart_com_send_it+0x5c>
        previous_send_len = len;
 8002bac:	89fb      	ldrh	r3, [r7, #14]
 8002bae:	4a0f      	ldr	r2, [pc, #60]	; (8002bec <uart_com_send_it+0x70>)
 8002bb0:	6013      	str	r3, [r2, #0]
        send_lock = 1;
 8002bb2:	4b0f      	ldr	r3, [pc, #60]	; (8002bf0 <uart_com_send_it+0x74>)
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	601a      	str	r2, [r3, #0]
        HAL_UART_Transmit_DMA(uart_com_ring_tx.huart, uart_com_ring_tx.buf+uart_com_ring_get_r_ptr(&uart_com_ring_tx), len);
 8002bb8:	4b0b      	ldr	r3, [pc, #44]	; (8002be8 <uart_com_send_it+0x6c>)
 8002bba:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 8002bbe:	480a      	ldr	r0, [pc, #40]	; (8002be8 <uart_com_send_it+0x6c>)
 8002bc0:	f000 f85a 	bl	8002c78 <uart_com_ring_get_r_ptr>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	4b07      	ldr	r3, [pc, #28]	; (8002be8 <uart_com_send_it+0x6c>)
 8002bca:	4413      	add	r3, r2
 8002bcc:	89fa      	ldrh	r2, [r7, #14]
 8002bce:	4619      	mov	r1, r3
 8002bd0:	4620      	mov	r0, r4
 8002bd2:	f003 fcd5 	bl	8006580 <HAL_UART_Transmit_DMA>
 8002bd6:	e004      	b.n	8002be2 <uart_com_send_it+0x66>
    }else{
        send_lock = 0;
 8002bd8:	4b05      	ldr	r3, [pc, #20]	; (8002bf0 <uart_com_send_it+0x74>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	601a      	str	r2, [r3, #0]
 8002bde:	e000      	b.n	8002be2 <uart_com_send_it+0x66>
    if(uart_com_ring_tx.huart != huart) return;
 8002be0:	bf00      	nop
    }
}
 8002be2:	3714      	adds	r7, #20
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd90      	pop	{r4, r7, pc}
 8002be8:	20006660 	.word	0x20006660
 8002bec:	20000264 	.word	0x20000264
 8002bf0:	20000260 	.word	0x20000260

08002bf4 <update_w_ptr>:
#include "main.h"
#include <stdio.h>

static void update_w_ptr(struct ring_buf *ring){
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
    if(ring->type == RING_TYPE_RX_CIRCULAR){
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d10e      	bne.n	8002c24 <update_w_ptr+0x30>
        ring->w_ptr = (uint16_t) ((ring->buf_size - ring->huart->hdmarx->Instance->W_PTR) & 0xFFFF);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f8b3 2080 	ldrh.w	r2, [r3, #128]	; 0x80
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	b29a      	uxth	r2, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
    }
}
 8002c24:	bf00      	nop
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <uart_com_ring_available_linear>:
    }else{
        return ring->buf_size + ring->w_ptr - ring->r_ptr;
    }
}

int uart_com_ring_available_linear(struct ring_buf *ring){
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
    update_w_ptr(ring);
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f7ff ffdb 	bl	8002bf4 <update_w_ptr>

    if(ring->w_ptr >= ring->r_ptr){
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d308      	bcc.n	8002c60 <uart_com_ring_available_linear+0x30>
        return ring->w_ptr - ring->r_ptr;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8002c54:	461a      	mov	r2, r3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	e007      	b.n	8002c70 <uart_com_ring_available_linear+0x40>
    }else{
        return ring->buf_size - ring->r_ptr;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8002c66:	461a      	mov	r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8002c6e:	1ad3      	subs	r3, r2, r3
    }
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3708      	adds	r7, #8
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <uart_com_ring_get_r_ptr>:
    update_w_ptr(ring);

    return ring->w_ptr;
}

uint16_t uart_com_ring_get_r_ptr(struct ring_buf *ring){
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
    update_w_ptr(ring);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f7ff ffb7 	bl	8002bf4 <update_w_ptr>

    return ring->r_ptr;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3708      	adds	r7, #8
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <uart_com_ring_forward_r_ptr>:

void uart_com_ring_forward_r_ptr(struct ring_buf *ring, int len){
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	6039      	str	r1, [r7, #0]
    update_w_ptr(ring);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f7ff ffa8 	bl	8002bf4 <update_w_ptr>

    while(len > 0){
 8002ca4:	e018      	b.n	8002cd8 <uart_com_ring_forward_r_ptr+0x44>
        if(ring->r_ptr+1 >= ring->buf_size){
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8002cac:	3301      	adds	r3, #1
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	f8b2 2080 	ldrh.w	r2, [r2, #128]	; 0x80
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	db04      	blt.n	8002cc2 <uart_com_ring_forward_r_ptr+0x2e>
            ring->r_ptr = 0;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 8002cc0:	e007      	b.n	8002cd2 <uart_com_ring_forward_r_ptr+0x3e>
        }else{
            ring->r_ptr += 1;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8002cc8:	3301      	adds	r3, #1
 8002cca:	b29a      	uxth	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
        }
        len--;
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	3b01      	subs	r3, #1
 8002cd6:	603b      	str	r3, [r7, #0]
    while(len > 0){
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	dce3      	bgt.n	8002ca6 <uart_com_ring_forward_r_ptr+0x12>
    }
}
 8002cde:	bf00      	nop
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
	...

08002ce8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8002cec:	4b11      	ldr	r3, [pc, #68]	; (8002d34 <MX_USART1_UART_Init+0x4c>)
 8002cee:	4a12      	ldr	r2, [pc, #72]	; (8002d38 <MX_USART1_UART_Init+0x50>)
 8002cf0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002cf2:	4b10      	ldr	r3, [pc, #64]	; (8002d34 <MX_USART1_UART_Init+0x4c>)
 8002cf4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002cf8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002cfa:	4b0e      	ldr	r3, [pc, #56]	; (8002d34 <MX_USART1_UART_Init+0x4c>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002d00:	4b0c      	ldr	r3, [pc, #48]	; (8002d34 <MX_USART1_UART_Init+0x4c>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002d06:	4b0b      	ldr	r3, [pc, #44]	; (8002d34 <MX_USART1_UART_Init+0x4c>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002d0c:	4b09      	ldr	r3, [pc, #36]	; (8002d34 <MX_USART1_UART_Init+0x4c>)
 8002d0e:	220c      	movs	r2, #12
 8002d10:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d12:	4b08      	ldr	r3, [pc, #32]	; (8002d34 <MX_USART1_UART_Init+0x4c>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d18:	4b06      	ldr	r3, [pc, #24]	; (8002d34 <MX_USART1_UART_Init+0x4c>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002d1e:	4805      	ldr	r0, [pc, #20]	; (8002d34 <MX_USART1_UART_Init+0x4c>)
 8002d20:	f003 fb8c 	bl	800643c <HAL_UART_Init>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002d2a:	f7ff fad1 	bl	80022d0 <Error_Handler>
  }

}
 8002d2e:	bf00      	nop
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	20006840 	.word	0x20006840
 8002d38:	40011000 	.word	0x40011000

08002d3c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b08a      	sub	sp, #40	; 0x28
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d44:	f107 0314 	add.w	r3, r7, #20
 8002d48:	2200      	movs	r2, #0
 8002d4a:	601a      	str	r2, [r3, #0]
 8002d4c:	605a      	str	r2, [r3, #4]
 8002d4e:	609a      	str	r2, [r3, #8]
 8002d50:	60da      	str	r2, [r3, #12]
 8002d52:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a4c      	ldr	r2, [pc, #304]	; (8002e8c <HAL_UART_MspInit+0x150>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	f040 8092 	bne.w	8002e84 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d60:	2300      	movs	r3, #0
 8002d62:	613b      	str	r3, [r7, #16]
 8002d64:	4b4a      	ldr	r3, [pc, #296]	; (8002e90 <HAL_UART_MspInit+0x154>)
 8002d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d68:	4a49      	ldr	r2, [pc, #292]	; (8002e90 <HAL_UART_MspInit+0x154>)
 8002d6a:	f043 0310 	orr.w	r3, r3, #16
 8002d6e:	6453      	str	r3, [r2, #68]	; 0x44
 8002d70:	4b47      	ldr	r3, [pc, #284]	; (8002e90 <HAL_UART_MspInit+0x154>)
 8002d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d74:	f003 0310 	and.w	r3, r3, #16
 8002d78:	613b      	str	r3, [r7, #16]
 8002d7a:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	60fb      	str	r3, [r7, #12]
 8002d80:	4b43      	ldr	r3, [pc, #268]	; (8002e90 <HAL_UART_MspInit+0x154>)
 8002d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d84:	4a42      	ldr	r2, [pc, #264]	; (8002e90 <HAL_UART_MspInit+0x154>)
 8002d86:	f043 0301 	orr.w	r3, r3, #1
 8002d8a:	6313      	str	r3, [r2, #48]	; 0x30
 8002d8c:	4b40      	ldr	r3, [pc, #256]	; (8002e90 <HAL_UART_MspInit+0x154>)
 8002d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d90:	f003 0301 	and.w	r3, r3, #1
 8002d94:	60fb      	str	r3, [r7, #12]
 8002d96:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002d98:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002d9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d9e:	2302      	movs	r3, #2
 8002da0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da2:	2300      	movs	r3, #0
 8002da4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002da6:	2303      	movs	r3, #3
 8002da8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002daa:	2307      	movs	r3, #7
 8002dac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dae:	f107 0314 	add.w	r3, r7, #20
 8002db2:	4619      	mov	r1, r3
 8002db4:	4837      	ldr	r0, [pc, #220]	; (8002e94 <HAL_UART_MspInit+0x158>)
 8002db6:	f001 fb15 	bl	80043e4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002dba:	4b37      	ldr	r3, [pc, #220]	; (8002e98 <HAL_UART_MspInit+0x15c>)
 8002dbc:	4a37      	ldr	r2, [pc, #220]	; (8002e9c <HAL_UART_MspInit+0x160>)
 8002dbe:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002dc0:	4b35      	ldr	r3, [pc, #212]	; (8002e98 <HAL_UART_MspInit+0x15c>)
 8002dc2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002dc6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002dc8:	4b33      	ldr	r3, [pc, #204]	; (8002e98 <HAL_UART_MspInit+0x15c>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002dce:	4b32      	ldr	r3, [pc, #200]	; (8002e98 <HAL_UART_MspInit+0x15c>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002dd4:	4b30      	ldr	r3, [pc, #192]	; (8002e98 <HAL_UART_MspInit+0x15c>)
 8002dd6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002dda:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ddc:	4b2e      	ldr	r3, [pc, #184]	; (8002e98 <HAL_UART_MspInit+0x15c>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002de2:	4b2d      	ldr	r3, [pc, #180]	; (8002e98 <HAL_UART_MspInit+0x15c>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002de8:	4b2b      	ldr	r3, [pc, #172]	; (8002e98 <HAL_UART_MspInit+0x15c>)
 8002dea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002dee:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002df0:	4b29      	ldr	r3, [pc, #164]	; (8002e98 <HAL_UART_MspInit+0x15c>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002df6:	4b28      	ldr	r3, [pc, #160]	; (8002e98 <HAL_UART_MspInit+0x15c>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002dfc:	4826      	ldr	r0, [pc, #152]	; (8002e98 <HAL_UART_MspInit+0x15c>)
 8002dfe:	f000 ff61 	bl	8003cc4 <HAL_DMA_Init>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d001      	beq.n	8002e0c <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8002e08:	f7ff fa62 	bl	80022d0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4a22      	ldr	r2, [pc, #136]	; (8002e98 <HAL_UART_MspInit+0x15c>)
 8002e10:	635a      	str	r2, [r3, #52]	; 0x34
 8002e12:	4a21      	ldr	r2, [pc, #132]	; (8002e98 <HAL_UART_MspInit+0x15c>)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002e18:	4b21      	ldr	r3, [pc, #132]	; (8002ea0 <HAL_UART_MspInit+0x164>)
 8002e1a:	4a22      	ldr	r2, [pc, #136]	; (8002ea4 <HAL_UART_MspInit+0x168>)
 8002e1c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002e1e:	4b20      	ldr	r3, [pc, #128]	; (8002ea0 <HAL_UART_MspInit+0x164>)
 8002e20:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e24:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e26:	4b1e      	ldr	r3, [pc, #120]	; (8002ea0 <HAL_UART_MspInit+0x164>)
 8002e28:	2240      	movs	r2, #64	; 0x40
 8002e2a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e2c:	4b1c      	ldr	r3, [pc, #112]	; (8002ea0 <HAL_UART_MspInit+0x164>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002e32:	4b1b      	ldr	r3, [pc, #108]	; (8002ea0 <HAL_UART_MspInit+0x164>)
 8002e34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e38:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e3a:	4b19      	ldr	r3, [pc, #100]	; (8002ea0 <HAL_UART_MspInit+0x164>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e40:	4b17      	ldr	r3, [pc, #92]	; (8002ea0 <HAL_UART_MspInit+0x164>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002e46:	4b16      	ldr	r3, [pc, #88]	; (8002ea0 <HAL_UART_MspInit+0x164>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002e4c:	4b14      	ldr	r3, [pc, #80]	; (8002ea0 <HAL_UART_MspInit+0x164>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e52:	4b13      	ldr	r3, [pc, #76]	; (8002ea0 <HAL_UART_MspInit+0x164>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002e58:	4811      	ldr	r0, [pc, #68]	; (8002ea0 <HAL_UART_MspInit+0x164>)
 8002e5a:	f000 ff33 	bl	8003cc4 <HAL_DMA_Init>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d001      	beq.n	8002e68 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 8002e64:	f7ff fa34 	bl	80022d0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	4a0d      	ldr	r2, [pc, #52]	; (8002ea0 <HAL_UART_MspInit+0x164>)
 8002e6c:	631a      	str	r2, [r3, #48]	; 0x30
 8002e6e:	4a0c      	ldr	r2, [pc, #48]	; (8002ea0 <HAL_UART_MspInit+0x164>)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002e74:	2200      	movs	r2, #0
 8002e76:	2100      	movs	r1, #0
 8002e78:	2025      	movs	r0, #37	; 0x25
 8002e7a:	f000 feec 	bl	8003c56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002e7e:	2025      	movs	r0, #37	; 0x25
 8002e80:	f000 ff05 	bl	8003c8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002e84:	bf00      	nop
 8002e86:	3728      	adds	r7, #40	; 0x28
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	40011000 	.word	0x40011000
 8002e90:	40023800 	.word	0x40023800
 8002e94:	40020000 	.word	0x40020000
 8002e98:	200067e0 	.word	0x200067e0
 8002e9c:	40026440 	.word	0x40026440
 8002ea0:	20006780 	.word	0x20006780
 8002ea4:	400264b8 	.word	0x400264b8

08002ea8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002ea8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ee0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002eac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002eae:	e003      	b.n	8002eb8 <LoopCopyDataInit>

08002eb0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002eb0:	4b0c      	ldr	r3, [pc, #48]	; (8002ee4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002eb2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002eb4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002eb6:	3104      	adds	r1, #4

08002eb8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002eb8:	480b      	ldr	r0, [pc, #44]	; (8002ee8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002eba:	4b0c      	ldr	r3, [pc, #48]	; (8002eec <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002ebc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002ebe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002ec0:	d3f6      	bcc.n	8002eb0 <CopyDataInit>
  ldr  r2, =_sbss
 8002ec2:	4a0b      	ldr	r2, [pc, #44]	; (8002ef0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002ec4:	e002      	b.n	8002ecc <LoopFillZerobss>

08002ec6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002ec6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002ec8:	f842 3b04 	str.w	r3, [r2], #4

08002ecc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002ecc:	4b09      	ldr	r3, [pc, #36]	; (8002ef4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002ece:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002ed0:	d3f9      	bcc.n	8002ec6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002ed2:	f7ff fc1d 	bl	8002710 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ed6:	f004 fa0d 	bl	80072f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002eda:	f7ff f885 	bl	8001fe8 <main>
  bx  lr    
 8002ede:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002ee0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002ee4:	0800b078 	.word	0x0800b078
  ldr  r0, =_sdata
 8002ee8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002eec:	200001e8 	.word	0x200001e8
  ldr  r2, =_sbss
 8002ef0:	200001e8 	.word	0x200001e8
  ldr  r3, = _ebss
 8002ef4:	20006888 	.word	0x20006888

08002ef8 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ef8:	e7fe      	b.n	8002ef8 <CAN1_RX0_IRQHandler>
	...

08002efc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f00:	4b0e      	ldr	r3, [pc, #56]	; (8002f3c <HAL_Init+0x40>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a0d      	ldr	r2, [pc, #52]	; (8002f3c <HAL_Init+0x40>)
 8002f06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f0c:	4b0b      	ldr	r3, [pc, #44]	; (8002f3c <HAL_Init+0x40>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a0a      	ldr	r2, [pc, #40]	; (8002f3c <HAL_Init+0x40>)
 8002f12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f18:	4b08      	ldr	r3, [pc, #32]	; (8002f3c <HAL_Init+0x40>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a07      	ldr	r2, [pc, #28]	; (8002f3c <HAL_Init+0x40>)
 8002f1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f24:	2003      	movs	r0, #3
 8002f26:	f000 fe8b 	bl	8003c40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f2a:	2000      	movs	r0, #0
 8002f2c:	f000 f808 	bl	8002f40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f30:	f7ff fac2 	bl	80024b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	40023c00 	.word	0x40023c00

08002f40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f48:	4b12      	ldr	r3, [pc, #72]	; (8002f94 <HAL_InitTick+0x54>)
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	4b12      	ldr	r3, [pc, #72]	; (8002f98 <HAL_InitTick+0x58>)
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	4619      	mov	r1, r3
 8002f52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f56:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f000 fea3 	bl	8003caa <HAL_SYSTICK_Config>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d001      	beq.n	8002f6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e00e      	b.n	8002f8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2b0f      	cmp	r3, #15
 8002f72:	d80a      	bhi.n	8002f8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f74:	2200      	movs	r2, #0
 8002f76:	6879      	ldr	r1, [r7, #4]
 8002f78:	f04f 30ff 	mov.w	r0, #4294967295
 8002f7c:	f000 fe6b 	bl	8003c56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f80:	4a06      	ldr	r2, [pc, #24]	; (8002f9c <HAL_InitTick+0x5c>)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f86:	2300      	movs	r3, #0
 8002f88:	e000      	b.n	8002f8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3708      	adds	r7, #8
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	20000008 	.word	0x20000008
 8002f98:	20000010 	.word	0x20000010
 8002f9c:	2000000c 	.word	0x2000000c

08002fa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fa4:	4b06      	ldr	r3, [pc, #24]	; (8002fc0 <HAL_IncTick+0x20>)
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	461a      	mov	r2, r3
 8002faa:	4b06      	ldr	r3, [pc, #24]	; (8002fc4 <HAL_IncTick+0x24>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4413      	add	r3, r2
 8002fb0:	4a04      	ldr	r2, [pc, #16]	; (8002fc4 <HAL_IncTick+0x24>)
 8002fb2:	6013      	str	r3, [r2, #0]
}
 8002fb4:	bf00      	nop
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	20000010 	.word	0x20000010
 8002fc4:	20006880 	.word	0x20006880

08002fc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	af00      	add	r7, sp, #0
  return uwTick;
 8002fcc:	4b03      	ldr	r3, [pc, #12]	; (8002fdc <HAL_GetTick+0x14>)
 8002fce:	681b      	ldr	r3, [r3, #0]
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop
 8002fdc:	20006880 	.word	0x20006880

08002fe0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fe8:	f7ff ffee 	bl	8002fc8 <HAL_GetTick>
 8002fec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff8:	d005      	beq.n	8003006 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ffa:	4b09      	ldr	r3, [pc, #36]	; (8003020 <HAL_Delay+0x40>)
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	461a      	mov	r2, r3
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	4413      	add	r3, r2
 8003004:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003006:	bf00      	nop
 8003008:	f7ff ffde 	bl	8002fc8 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	429a      	cmp	r2, r3
 8003016:	d8f7      	bhi.n	8003008 <HAL_Delay+0x28>
  {
  }
}
 8003018:	bf00      	nop
 800301a:	3710      	adds	r7, #16
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}
 8003020:	20000010 	.word	0x20000010

08003024 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800302c:	2300      	movs	r3, #0
 800302e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d101      	bne.n	800303a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e033      	b.n	80030a2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303e:	2b00      	cmp	r3, #0
 8003040:	d109      	bne.n	8003056 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f7fd ffee 	bl	8001024 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305a:	f003 0310 	and.w	r3, r3, #16
 800305e:	2b00      	cmp	r3, #0
 8003060:	d118      	bne.n	8003094 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003066:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800306a:	f023 0302 	bic.w	r3, r3, #2
 800306e:	f043 0202 	orr.w	r2, r3, #2
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f000 fb8a 	bl	8003790 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003086:	f023 0303 	bic.w	r3, r3, #3
 800308a:	f043 0201 	orr.w	r2, r3, #1
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	641a      	str	r2, [r3, #64]	; 0x40
 8003092:	e001      	b.n	8003098 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80030a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3710      	adds	r7, #16
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}

080030aa <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80030aa:	b580      	push	{r7, lr}
 80030ac:	b084      	sub	sp, #16
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80030b2:	2300      	movs	r3, #0
 80030b4:	60fb      	str	r3, [r7, #12]
 80030b6:	2300      	movs	r3, #0
 80030b8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0302 	and.w	r3, r3, #2
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	bf0c      	ite	eq
 80030c8:	2301      	moveq	r3, #1
 80030ca:	2300      	movne	r3, #0
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f003 0320 	and.w	r3, r3, #32
 80030da:	2b20      	cmp	r3, #32
 80030dc:	bf0c      	ite	eq
 80030de:	2301      	moveq	r3, #1
 80030e0:	2300      	movne	r3, #0
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d049      	beq.n	8003180 <HAL_ADC_IRQHandler+0xd6>
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d046      	beq.n	8003180 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f6:	f003 0310 	and.w	r3, r3, #16
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d105      	bne.n	800310a <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003102:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d12b      	bne.n	8003170 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800311c:	2b00      	cmp	r3, #0
 800311e:	d127      	bne.n	8003170 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003126:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800312a:	2b00      	cmp	r3, #0
 800312c:	d006      	beq.n	800313c <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003138:	2b00      	cmp	r3, #0
 800313a:	d119      	bne.n	8003170 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	685a      	ldr	r2, [r3, #4]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f022 0220 	bic.w	r2, r2, #32
 800314a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003150:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d105      	bne.n	8003170 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003168:	f043 0201 	orr.w	r2, r3, #1
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f7fe fb5b 	bl	800182c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f06f 0212 	mvn.w	r2, #18
 800317e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0304 	and.w	r3, r3, #4
 800318a:	2b04      	cmp	r3, #4
 800318c:	bf0c      	ite	eq
 800318e:	2301      	moveq	r3, #1
 8003190:	2300      	movne	r3, #0
 8003192:	b2db      	uxtb	r3, r3
 8003194:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031a0:	2b80      	cmp	r3, #128	; 0x80
 80031a2:	bf0c      	ite	eq
 80031a4:	2301      	moveq	r3, #1
 80031a6:	2300      	movne	r3, #0
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d057      	beq.n	8003262 <HAL_ADC_IRQHandler+0x1b8>
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d054      	beq.n	8003262 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031bc:	f003 0310 	and.w	r3, r3, #16
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d105      	bne.n	80031d0 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d139      	bne.n	8003252 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d006      	beq.n	80031fa <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d12b      	bne.n	8003252 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003204:	2b00      	cmp	r3, #0
 8003206:	d124      	bne.n	8003252 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003212:	2b00      	cmp	r3, #0
 8003214:	d11d      	bne.n	8003252 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800321a:	2b00      	cmp	r3, #0
 800321c:	d119      	bne.n	8003252 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	685a      	ldr	r2, [r3, #4]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800322c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003232:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003242:	2b00      	cmp	r3, #0
 8003244:	d105      	bne.n	8003252 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324a:	f043 0201 	orr.w	r2, r3, #1
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 fc1a 	bl	8003a8c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f06f 020c 	mvn.w	r2, #12
 8003260:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0301 	and.w	r3, r3, #1
 800326c:	2b01      	cmp	r3, #1
 800326e:	bf0c      	ite	eq
 8003270:	2301      	moveq	r3, #1
 8003272:	2300      	movne	r3, #0
 8003274:	b2db      	uxtb	r3, r3
 8003276:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003282:	2b40      	cmp	r3, #64	; 0x40
 8003284:	bf0c      	ite	eq
 8003286:	2301      	moveq	r3, #1
 8003288:	2300      	movne	r3, #0
 800328a:	b2db      	uxtb	r3, r3
 800328c:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d017      	beq.n	80032c4 <HAL_ADC_IRQHandler+0x21a>
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d014      	beq.n	80032c4 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0301 	and.w	r3, r3, #1
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d10d      	bne.n	80032c4 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ac:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f000 f935 	bl	8003524 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f06f 0201 	mvn.w	r2, #1
 80032c2:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0320 	and.w	r3, r3, #32
 80032ce:	2b20      	cmp	r3, #32
 80032d0:	bf0c      	ite	eq
 80032d2:	2301      	moveq	r3, #1
 80032d4:	2300      	movne	r3, #0
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80032e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032e8:	bf0c      	ite	eq
 80032ea:	2301      	moveq	r3, #1
 80032ec:	2300      	movne	r3, #0
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d015      	beq.n	8003324 <HAL_ADC_IRQHandler+0x27a>
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d012      	beq.n	8003324 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003302:	f043 0202 	orr.w	r2, r3, #2
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f06f 0220 	mvn.w	r2, #32
 8003312:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f000 f90f 	bl	8003538 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f06f 0220 	mvn.w	r2, #32
 8003322:	601a      	str	r2, [r3, #0]
  }
}
 8003324:	bf00      	nop
 8003326:	3710      	adds	r7, #16
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}

0800332c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b086      	sub	sp, #24
 8003330:	af00      	add	r7, sp, #0
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	60b9      	str	r1, [r7, #8]
 8003336:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003338:	2300      	movs	r3, #0
 800333a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003342:	2b01      	cmp	r3, #1
 8003344:	d101      	bne.n	800334a <HAL_ADC_Start_DMA+0x1e>
 8003346:	2302      	movs	r3, #2
 8003348:	e0cc      	b.n	80034e4 <HAL_ADC_Start_DMA+0x1b8>
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2201      	movs	r2, #1
 800334e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f003 0301 	and.w	r3, r3, #1
 800335c:	2b01      	cmp	r3, #1
 800335e:	d018      	beq.n	8003392 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	689a      	ldr	r2, [r3, #8]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f042 0201 	orr.w	r2, r2, #1
 800336e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003370:	4b5e      	ldr	r3, [pc, #376]	; (80034ec <HAL_ADC_Start_DMA+0x1c0>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a5e      	ldr	r2, [pc, #376]	; (80034f0 <HAL_ADC_Start_DMA+0x1c4>)
 8003376:	fba2 2303 	umull	r2, r3, r2, r3
 800337a:	0c9a      	lsrs	r2, r3, #18
 800337c:	4613      	mov	r3, r2
 800337e:	005b      	lsls	r3, r3, #1
 8003380:	4413      	add	r3, r2
 8003382:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003384:	e002      	b.n	800338c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	3b01      	subs	r3, #1
 800338a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1f9      	bne.n	8003386 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f003 0301 	and.w	r3, r3, #1
 800339c:	2b01      	cmp	r3, #1
 800339e:	f040 80a0 	bne.w	80034e2 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80033aa:	f023 0301 	bic.w	r3, r3, #1
 80033ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d007      	beq.n	80033d4 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80033cc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033e0:	d106      	bne.n	80033f0 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e6:	f023 0206 	bic.w	r2, r3, #6
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	645a      	str	r2, [r3, #68]	; 0x44
 80033ee:	e002      	b.n	80033f6 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2200      	movs	r2, #0
 80033f4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80033fe:	4b3d      	ldr	r3, [pc, #244]	; (80034f4 <HAL_ADC_Start_DMA+0x1c8>)
 8003400:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003406:	4a3c      	ldr	r2, [pc, #240]	; (80034f8 <HAL_ADC_Start_DMA+0x1cc>)
 8003408:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800340e:	4a3b      	ldr	r2, [pc, #236]	; (80034fc <HAL_ADC_Start_DMA+0x1d0>)
 8003410:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003416:	4a3a      	ldr	r2, [pc, #232]	; (8003500 <HAL_ADC_Start_DMA+0x1d4>)
 8003418:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003422:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	685a      	ldr	r2, [r3, #4]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003432:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	689a      	ldr	r2, [r3, #8]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003442:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	334c      	adds	r3, #76	; 0x4c
 800344e:	4619      	mov	r1, r3
 8003450:	68ba      	ldr	r2, [r7, #8]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f000 fce4 	bl	8003e20 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f003 031f 	and.w	r3, r3, #31
 8003460:	2b00      	cmp	r3, #0
 8003462:	d12a      	bne.n	80034ba <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a26      	ldr	r2, [pc, #152]	; (8003504 <HAL_ADC_Start_DMA+0x1d8>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d015      	beq.n	800349a <HAL_ADC_Start_DMA+0x16e>
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a25      	ldr	r2, [pc, #148]	; (8003508 <HAL_ADC_Start_DMA+0x1dc>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d105      	bne.n	8003484 <HAL_ADC_Start_DMA+0x158>
 8003478:	4b1e      	ldr	r3, [pc, #120]	; (80034f4 <HAL_ADC_Start_DMA+0x1c8>)
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f003 031f 	and.w	r3, r3, #31
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00a      	beq.n	800349a <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a20      	ldr	r2, [pc, #128]	; (800350c <HAL_ADC_Start_DMA+0x1e0>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d129      	bne.n	80034e2 <HAL_ADC_Start_DMA+0x1b6>
 800348e:	4b19      	ldr	r3, [pc, #100]	; (80034f4 <HAL_ADC_Start_DMA+0x1c8>)
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f003 031f 	and.w	r3, r3, #31
 8003496:	2b0f      	cmp	r3, #15
 8003498:	d823      	bhi.n	80034e2 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d11c      	bne.n	80034e2 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	689a      	ldr	r2, [r3, #8]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80034b6:	609a      	str	r2, [r3, #8]
 80034b8:	e013      	b.n	80034e2 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a11      	ldr	r2, [pc, #68]	; (8003504 <HAL_ADC_Start_DMA+0x1d8>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d10e      	bne.n	80034e2 <HAL_ADC_Start_DMA+0x1b6>
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d107      	bne.n	80034e2 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	689a      	ldr	r2, [r3, #8]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80034e0:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80034e2:	2300      	movs	r3, #0
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3718      	adds	r7, #24
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	20000008 	.word	0x20000008
 80034f0:	431bde83 	.word	0x431bde83
 80034f4:	40012300 	.word	0x40012300
 80034f8:	08003989 	.word	0x08003989
 80034fc:	08003a43 	.word	0x08003a43
 8003500:	08003a5f 	.word	0x08003a5f
 8003504:	40012000 	.word	0x40012000
 8003508:	40012100 	.word	0x40012100
 800350c:	40012200 	.word	0x40012200

08003510 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003518:	bf00      	nop
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800352c:	bf00      	nop
 800352e:	370c      	adds	r7, #12
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr

08003538 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003540:	bf00      	nop
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800354c:	b480      	push	{r7}
 800354e:	b085      	sub	sp, #20
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003556:	2300      	movs	r3, #0
 8003558:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003560:	2b01      	cmp	r3, #1
 8003562:	d101      	bne.n	8003568 <HAL_ADC_ConfigChannel+0x1c>
 8003564:	2302      	movs	r3, #2
 8003566:	e105      	b.n	8003774 <HAL_ADC_ConfigChannel+0x228>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2b09      	cmp	r3, #9
 8003576:	d925      	bls.n	80035c4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	68d9      	ldr	r1, [r3, #12]
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	b29b      	uxth	r3, r3
 8003584:	461a      	mov	r2, r3
 8003586:	4613      	mov	r3, r2
 8003588:	005b      	lsls	r3, r3, #1
 800358a:	4413      	add	r3, r2
 800358c:	3b1e      	subs	r3, #30
 800358e:	2207      	movs	r2, #7
 8003590:	fa02 f303 	lsl.w	r3, r2, r3
 8003594:	43da      	mvns	r2, r3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	400a      	ands	r2, r1
 800359c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68d9      	ldr	r1, [r3, #12]
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	689a      	ldr	r2, [r3, #8]
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	4618      	mov	r0, r3
 80035b0:	4603      	mov	r3, r0
 80035b2:	005b      	lsls	r3, r3, #1
 80035b4:	4403      	add	r3, r0
 80035b6:	3b1e      	subs	r3, #30
 80035b8:	409a      	lsls	r2, r3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	430a      	orrs	r2, r1
 80035c0:	60da      	str	r2, [r3, #12]
 80035c2:	e022      	b.n	800360a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	6919      	ldr	r1, [r3, #16]
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	461a      	mov	r2, r3
 80035d2:	4613      	mov	r3, r2
 80035d4:	005b      	lsls	r3, r3, #1
 80035d6:	4413      	add	r3, r2
 80035d8:	2207      	movs	r2, #7
 80035da:	fa02 f303 	lsl.w	r3, r2, r3
 80035de:	43da      	mvns	r2, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	400a      	ands	r2, r1
 80035e6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	6919      	ldr	r1, [r3, #16]
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	689a      	ldr	r2, [r3, #8]
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	4618      	mov	r0, r3
 80035fa:	4603      	mov	r3, r0
 80035fc:	005b      	lsls	r3, r3, #1
 80035fe:	4403      	add	r3, r0
 8003600:	409a      	lsls	r2, r3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	430a      	orrs	r2, r1
 8003608:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	2b06      	cmp	r3, #6
 8003610:	d824      	bhi.n	800365c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	685a      	ldr	r2, [r3, #4]
 800361c:	4613      	mov	r3, r2
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	4413      	add	r3, r2
 8003622:	3b05      	subs	r3, #5
 8003624:	221f      	movs	r2, #31
 8003626:	fa02 f303 	lsl.w	r3, r2, r3
 800362a:	43da      	mvns	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	400a      	ands	r2, r1
 8003632:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	b29b      	uxth	r3, r3
 8003640:	4618      	mov	r0, r3
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	685a      	ldr	r2, [r3, #4]
 8003646:	4613      	mov	r3, r2
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	4413      	add	r3, r2
 800364c:	3b05      	subs	r3, #5
 800364e:	fa00 f203 	lsl.w	r2, r0, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	430a      	orrs	r2, r1
 8003658:	635a      	str	r2, [r3, #52]	; 0x34
 800365a:	e04c      	b.n	80036f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	2b0c      	cmp	r3, #12
 8003662:	d824      	bhi.n	80036ae <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	685a      	ldr	r2, [r3, #4]
 800366e:	4613      	mov	r3, r2
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	4413      	add	r3, r2
 8003674:	3b23      	subs	r3, #35	; 0x23
 8003676:	221f      	movs	r2, #31
 8003678:	fa02 f303 	lsl.w	r3, r2, r3
 800367c:	43da      	mvns	r2, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	400a      	ands	r2, r1
 8003684:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	b29b      	uxth	r3, r3
 8003692:	4618      	mov	r0, r3
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	685a      	ldr	r2, [r3, #4]
 8003698:	4613      	mov	r3, r2
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	4413      	add	r3, r2
 800369e:	3b23      	subs	r3, #35	; 0x23
 80036a0:	fa00 f203 	lsl.w	r2, r0, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	430a      	orrs	r2, r1
 80036aa:	631a      	str	r2, [r3, #48]	; 0x30
 80036ac:	e023      	b.n	80036f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	685a      	ldr	r2, [r3, #4]
 80036b8:	4613      	mov	r3, r2
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	4413      	add	r3, r2
 80036be:	3b41      	subs	r3, #65	; 0x41
 80036c0:	221f      	movs	r2, #31
 80036c2:	fa02 f303 	lsl.w	r3, r2, r3
 80036c6:	43da      	mvns	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	400a      	ands	r2, r1
 80036ce:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	b29b      	uxth	r3, r3
 80036dc:	4618      	mov	r0, r3
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	685a      	ldr	r2, [r3, #4]
 80036e2:	4613      	mov	r3, r2
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	4413      	add	r3, r2
 80036e8:	3b41      	subs	r3, #65	; 0x41
 80036ea:	fa00 f203 	lsl.w	r2, r0, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	430a      	orrs	r2, r1
 80036f4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80036f6:	4b22      	ldr	r3, [pc, #136]	; (8003780 <HAL_ADC_ConfigChannel+0x234>)
 80036f8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a21      	ldr	r2, [pc, #132]	; (8003784 <HAL_ADC_ConfigChannel+0x238>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d109      	bne.n	8003718 <HAL_ADC_ConfigChannel+0x1cc>
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2b12      	cmp	r3, #18
 800370a:	d105      	bne.n	8003718 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a19      	ldr	r2, [pc, #100]	; (8003784 <HAL_ADC_ConfigChannel+0x238>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d123      	bne.n	800376a <HAL_ADC_ConfigChannel+0x21e>
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2b10      	cmp	r3, #16
 8003728:	d003      	beq.n	8003732 <HAL_ADC_ConfigChannel+0x1e6>
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2b11      	cmp	r3, #17
 8003730:	d11b      	bne.n	800376a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	2b10      	cmp	r3, #16
 8003744:	d111      	bne.n	800376a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003746:	4b10      	ldr	r3, [pc, #64]	; (8003788 <HAL_ADC_ConfigChannel+0x23c>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a10      	ldr	r2, [pc, #64]	; (800378c <HAL_ADC_ConfigChannel+0x240>)
 800374c:	fba2 2303 	umull	r2, r3, r2, r3
 8003750:	0c9a      	lsrs	r2, r3, #18
 8003752:	4613      	mov	r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	4413      	add	r3, r2
 8003758:	005b      	lsls	r3, r3, #1
 800375a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800375c:	e002      	b.n	8003764 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	3b01      	subs	r3, #1
 8003762:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1f9      	bne.n	800375e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003772:	2300      	movs	r3, #0
}
 8003774:	4618      	mov	r0, r3
 8003776:	3714      	adds	r7, #20
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr
 8003780:	40012300 	.word	0x40012300
 8003784:	40012000 	.word	0x40012000
 8003788:	20000008 	.word	0x20000008
 800378c:	431bde83 	.word	0x431bde83

08003790 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003790:	b480      	push	{r7}
 8003792:	b085      	sub	sp, #20
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003798:	4b79      	ldr	r3, [pc, #484]	; (8003980 <ADC_Init+0x1f0>)
 800379a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	685a      	ldr	r2, [r3, #4]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	431a      	orrs	r2, r3
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	685a      	ldr	r2, [r3, #4]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	6859      	ldr	r1, [r3, #4]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	691b      	ldr	r3, [r3, #16]
 80037d0:	021a      	lsls	r2, r3, #8
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	430a      	orrs	r2, r1
 80037d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	685a      	ldr	r2, [r3, #4]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80037e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	6859      	ldr	r1, [r3, #4]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	689a      	ldr	r2, [r3, #8]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	430a      	orrs	r2, r1
 80037fa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	689a      	ldr	r2, [r3, #8]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800380a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	6899      	ldr	r1, [r3, #8]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	68da      	ldr	r2, [r3, #12]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	430a      	orrs	r2, r1
 800381c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003822:	4a58      	ldr	r2, [pc, #352]	; (8003984 <ADC_Init+0x1f4>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d022      	beq.n	800386e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	689a      	ldr	r2, [r3, #8]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003836:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	6899      	ldr	r1, [r3, #8]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	430a      	orrs	r2, r1
 8003848:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	689a      	ldr	r2, [r3, #8]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003858:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	6899      	ldr	r1, [r3, #8]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	430a      	orrs	r2, r1
 800386a:	609a      	str	r2, [r3, #8]
 800386c:	e00f      	b.n	800388e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	689a      	ldr	r2, [r3, #8]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800387c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	689a      	ldr	r2, [r3, #8]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800388c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	689a      	ldr	r2, [r3, #8]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f022 0202 	bic.w	r2, r2, #2
 800389c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	6899      	ldr	r1, [r3, #8]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	7e1b      	ldrb	r3, [r3, #24]
 80038a8:	005a      	lsls	r2, r3, #1
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	430a      	orrs	r2, r1
 80038b0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d01b      	beq.n	80038f4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	685a      	ldr	r2, [r3, #4]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038ca:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	685a      	ldr	r2, [r3, #4]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80038da:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	6859      	ldr	r1, [r3, #4]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e6:	3b01      	subs	r3, #1
 80038e8:	035a      	lsls	r2, r3, #13
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	430a      	orrs	r2, r1
 80038f0:	605a      	str	r2, [r3, #4]
 80038f2:	e007      	b.n	8003904 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	685a      	ldr	r2, [r3, #4]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003902:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003912:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	69db      	ldr	r3, [r3, #28]
 800391e:	3b01      	subs	r3, #1
 8003920:	051a      	lsls	r2, r3, #20
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	430a      	orrs	r2, r1
 8003928:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	689a      	ldr	r2, [r3, #8]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003938:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	6899      	ldr	r1, [r3, #8]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003946:	025a      	lsls	r2, r3, #9
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	430a      	orrs	r2, r1
 800394e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	689a      	ldr	r2, [r3, #8]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800395e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	6899      	ldr	r1, [r3, #8]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	029a      	lsls	r2, r3, #10
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	430a      	orrs	r2, r1
 8003972:	609a      	str	r2, [r3, #8]
}
 8003974:	bf00      	nop
 8003976:	3714      	adds	r7, #20
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr
 8003980:	40012300 	.word	0x40012300
 8003984:	0f000001 	.word	0x0f000001

08003988 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003994:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d13c      	bne.n	8003a1c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d12b      	bne.n	8003a14 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d127      	bne.n	8003a14 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ca:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d006      	beq.n	80039e0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d119      	bne.n	8003a14 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	685a      	ldr	r2, [r3, #4]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f022 0220 	bic.w	r2, r2, #32
 80039ee:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d105      	bne.n	8003a14 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0c:	f043 0201 	orr.w	r2, r3, #1
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003a14:	68f8      	ldr	r0, [r7, #12]
 8003a16:	f7fd ff09 	bl	800182c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003a1a:	e00e      	b.n	8003a3a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a20:	f003 0310 	and.w	r3, r3, #16
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d003      	beq.n	8003a30 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003a28:	68f8      	ldr	r0, [r7, #12]
 8003a2a:	f7ff fd85 	bl	8003538 <HAL_ADC_ErrorCallback>
}
 8003a2e:	e004      	b.n	8003a3a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	4798      	blx	r3
}
 8003a3a:	bf00      	nop
 8003a3c:	3710      	adds	r7, #16
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}

08003a42 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003a42:	b580      	push	{r7, lr}
 8003a44:	b084      	sub	sp, #16
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a4e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003a50:	68f8      	ldr	r0, [r7, #12]
 8003a52:	f7ff fd5d 	bl	8003510 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a56:	bf00      	nop
 8003a58:	3710      	adds	r7, #16
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}

08003a5e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003a5e:	b580      	push	{r7, lr}
 8003a60:	b084      	sub	sp, #16
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a6a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2240      	movs	r2, #64	; 0x40
 8003a70:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a76:	f043 0204 	orr.w	r2, r3, #4
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003a7e:	68f8      	ldr	r0, [r7, #12]
 8003a80:	f7ff fd5a 	bl	8003538 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a84:	bf00      	nop
 8003a86:	3710      	adds	r7, #16
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003a94:	bf00      	nop
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b085      	sub	sp, #20
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f003 0307 	and.w	r3, r3, #7
 8003aae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ab0:	4b0c      	ldr	r3, [pc, #48]	; (8003ae4 <__NVIC_SetPriorityGrouping+0x44>)
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ab6:	68ba      	ldr	r2, [r7, #8]
 8003ab8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003abc:	4013      	ands	r3, r2
 8003abe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ac8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003acc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ad0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ad2:	4a04      	ldr	r2, [pc, #16]	; (8003ae4 <__NVIC_SetPriorityGrouping+0x44>)
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	60d3      	str	r3, [r2, #12]
}
 8003ad8:	bf00      	nop
 8003ada:	3714      	adds	r7, #20
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr
 8003ae4:	e000ed00 	.word	0xe000ed00

08003ae8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003aec:	4b04      	ldr	r3, [pc, #16]	; (8003b00 <__NVIC_GetPriorityGrouping+0x18>)
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	0a1b      	lsrs	r3, r3, #8
 8003af2:	f003 0307 	and.w	r3, r3, #7
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr
 8003b00:	e000ed00 	.word	0xe000ed00

08003b04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	db0b      	blt.n	8003b2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b16:	79fb      	ldrb	r3, [r7, #7]
 8003b18:	f003 021f 	and.w	r2, r3, #31
 8003b1c:	4907      	ldr	r1, [pc, #28]	; (8003b3c <__NVIC_EnableIRQ+0x38>)
 8003b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b22:	095b      	lsrs	r3, r3, #5
 8003b24:	2001      	movs	r0, #1
 8003b26:	fa00 f202 	lsl.w	r2, r0, r2
 8003b2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b2e:	bf00      	nop
 8003b30:	370c      	adds	r7, #12
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	e000e100 	.word	0xe000e100

08003b40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	4603      	mov	r3, r0
 8003b48:	6039      	str	r1, [r7, #0]
 8003b4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	db0a      	blt.n	8003b6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	b2da      	uxtb	r2, r3
 8003b58:	490c      	ldr	r1, [pc, #48]	; (8003b8c <__NVIC_SetPriority+0x4c>)
 8003b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b5e:	0112      	lsls	r2, r2, #4
 8003b60:	b2d2      	uxtb	r2, r2
 8003b62:	440b      	add	r3, r1
 8003b64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b68:	e00a      	b.n	8003b80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	b2da      	uxtb	r2, r3
 8003b6e:	4908      	ldr	r1, [pc, #32]	; (8003b90 <__NVIC_SetPriority+0x50>)
 8003b70:	79fb      	ldrb	r3, [r7, #7]
 8003b72:	f003 030f 	and.w	r3, r3, #15
 8003b76:	3b04      	subs	r3, #4
 8003b78:	0112      	lsls	r2, r2, #4
 8003b7a:	b2d2      	uxtb	r2, r2
 8003b7c:	440b      	add	r3, r1
 8003b7e:	761a      	strb	r2, [r3, #24]
}
 8003b80:	bf00      	nop
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr
 8003b8c:	e000e100 	.word	0xe000e100
 8003b90:	e000ed00 	.word	0xe000ed00

08003b94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b089      	sub	sp, #36	; 0x24
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f003 0307 	and.w	r3, r3, #7
 8003ba6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	f1c3 0307 	rsb	r3, r3, #7
 8003bae:	2b04      	cmp	r3, #4
 8003bb0:	bf28      	it	cs
 8003bb2:	2304      	movcs	r3, #4
 8003bb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	3304      	adds	r3, #4
 8003bba:	2b06      	cmp	r3, #6
 8003bbc:	d902      	bls.n	8003bc4 <NVIC_EncodePriority+0x30>
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	3b03      	subs	r3, #3
 8003bc2:	e000      	b.n	8003bc6 <NVIC_EncodePriority+0x32>
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bc8:	f04f 32ff 	mov.w	r2, #4294967295
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd2:	43da      	mvns	r2, r3
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	401a      	ands	r2, r3
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003bdc:	f04f 31ff 	mov.w	r1, #4294967295
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	fa01 f303 	lsl.w	r3, r1, r3
 8003be6:	43d9      	mvns	r1, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bec:	4313      	orrs	r3, r2
         );
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3724      	adds	r7, #36	; 0x24
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr
	...

08003bfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	3b01      	subs	r3, #1
 8003c08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c0c:	d301      	bcc.n	8003c12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e00f      	b.n	8003c32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c12:	4a0a      	ldr	r2, [pc, #40]	; (8003c3c <SysTick_Config+0x40>)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	3b01      	subs	r3, #1
 8003c18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c1a:	210f      	movs	r1, #15
 8003c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c20:	f7ff ff8e 	bl	8003b40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c24:	4b05      	ldr	r3, [pc, #20]	; (8003c3c <SysTick_Config+0x40>)
 8003c26:	2200      	movs	r2, #0
 8003c28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c2a:	4b04      	ldr	r3, [pc, #16]	; (8003c3c <SysTick_Config+0x40>)
 8003c2c:	2207      	movs	r2, #7
 8003c2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3708      	adds	r7, #8
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	e000e010 	.word	0xe000e010

08003c40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b082      	sub	sp, #8
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f7ff ff29 	bl	8003aa0 <__NVIC_SetPriorityGrouping>
}
 8003c4e:	bf00      	nop
 8003c50:	3708      	adds	r7, #8
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}

08003c56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c56:	b580      	push	{r7, lr}
 8003c58:	b086      	sub	sp, #24
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	60b9      	str	r1, [r7, #8]
 8003c60:	607a      	str	r2, [r7, #4]
 8003c62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c64:	2300      	movs	r3, #0
 8003c66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c68:	f7ff ff3e 	bl	8003ae8 <__NVIC_GetPriorityGrouping>
 8003c6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	68b9      	ldr	r1, [r7, #8]
 8003c72:	6978      	ldr	r0, [r7, #20]
 8003c74:	f7ff ff8e 	bl	8003b94 <NVIC_EncodePriority>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c7e:	4611      	mov	r1, r2
 8003c80:	4618      	mov	r0, r3
 8003c82:	f7ff ff5d 	bl	8003b40 <__NVIC_SetPriority>
}
 8003c86:	bf00      	nop
 8003c88:	3718      	adds	r7, #24
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}

08003c8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c8e:	b580      	push	{r7, lr}
 8003c90:	b082      	sub	sp, #8
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	4603      	mov	r3, r0
 8003c96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f7ff ff31 	bl	8003b04 <__NVIC_EnableIRQ>
}
 8003ca2:	bf00      	nop
 8003ca4:	3708      	adds	r7, #8
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}

08003caa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003caa:	b580      	push	{r7, lr}
 8003cac:	b082      	sub	sp, #8
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f7ff ffa2 	bl	8003bfc <SysTick_Config>
 8003cb8:	4603      	mov	r3, r0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3708      	adds	r7, #8
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
	...

08003cc4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b086      	sub	sp, #24
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003cd0:	f7ff f97a 	bl	8002fc8 <HAL_GetTick>
 8003cd4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d101      	bne.n	8003ce0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e099      	b.n	8003e14 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2202      	movs	r2, #2
 8003cec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f022 0201 	bic.w	r2, r2, #1
 8003cfe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d00:	e00f      	b.n	8003d22 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d02:	f7ff f961 	bl	8002fc8 <HAL_GetTick>
 8003d06:	4602      	mov	r2, r0
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	2b05      	cmp	r3, #5
 8003d0e:	d908      	bls.n	8003d22 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2220      	movs	r2, #32
 8003d14:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2203      	movs	r2, #3
 8003d1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e078      	b.n	8003e14 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0301 	and.w	r3, r3, #1
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d1e8      	bne.n	8003d02 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003d38:	697a      	ldr	r2, [r7, #20]
 8003d3a:	4b38      	ldr	r3, [pc, #224]	; (8003e1c <HAL_DMA_Init+0x158>)
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	685a      	ldr	r2, [r3, #4]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	691b      	ldr	r3, [r3, #16]
 8003d54:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d66:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6a1b      	ldr	r3, [r3, #32]
 8003d6c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d6e:	697a      	ldr	r2, [r7, #20]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d78:	2b04      	cmp	r3, #4
 8003d7a:	d107      	bne.n	8003d8c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d84:	4313      	orrs	r3, r2
 8003d86:	697a      	ldr	r2, [r7, #20]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	697a      	ldr	r2, [r7, #20]
 8003d92:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	695b      	ldr	r3, [r3, #20]
 8003d9a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	f023 0307 	bic.w	r3, r3, #7
 8003da2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da8:	697a      	ldr	r2, [r7, #20]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db2:	2b04      	cmp	r3, #4
 8003db4:	d117      	bne.n	8003de6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dba:	697a      	ldr	r2, [r7, #20]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d00e      	beq.n	8003de6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f000 fa91 	bl	80042f0 <DMA_CheckFifoParam>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d008      	beq.n	8003de6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2240      	movs	r2, #64	; 0x40
 8003dd8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2201      	movs	r2, #1
 8003dde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003de2:	2301      	movs	r3, #1
 8003de4:	e016      	b.n	8003e14 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	697a      	ldr	r2, [r7, #20]
 8003dec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 fa48 	bl	8004284 <DMA_CalcBaseAndBitshift>
 8003df4:	4603      	mov	r3, r0
 8003df6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dfc:	223f      	movs	r2, #63	; 0x3f
 8003dfe:	409a      	lsls	r2, r3
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003e12:	2300      	movs	r3, #0
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3718      	adds	r7, #24
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	f010803f 	.word	0xf010803f

08003e20 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b086      	sub	sp, #24
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	60b9      	str	r1, [r7, #8]
 8003e2a:	607a      	str	r2, [r7, #4]
 8003e2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e36:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d101      	bne.n	8003e46 <HAL_DMA_Start_IT+0x26>
 8003e42:	2302      	movs	r3, #2
 8003e44:	e040      	b.n	8003ec8 <HAL_DMA_Start_IT+0xa8>
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d12f      	bne.n	8003eba <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2202      	movs	r2, #2
 8003e5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2200      	movs	r2, #0
 8003e66:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	68b9      	ldr	r1, [r7, #8]
 8003e6e:	68f8      	ldr	r0, [r7, #12]
 8003e70:	f000 f9da 	bl	8004228 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e78:	223f      	movs	r2, #63	; 0x3f
 8003e7a:	409a      	lsls	r2, r3
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f042 0216 	orr.w	r2, r2, #22
 8003e8e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d007      	beq.n	8003ea8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f042 0208 	orr.w	r2, r2, #8
 8003ea6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f042 0201 	orr.w	r2, r2, #1
 8003eb6:	601a      	str	r2, [r3, #0]
 8003eb8:	e005      	b.n	8003ec6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003ec2:	2302      	movs	r3, #2
 8003ec4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003ec6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3718      	adds	r7, #24
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	2b02      	cmp	r3, #2
 8003ee2:	d004      	beq.n	8003eee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2280      	movs	r2, #128	; 0x80
 8003ee8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e00c      	b.n	8003f08 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2205      	movs	r2, #5
 8003ef2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f022 0201 	bic.w	r2, r2, #1
 8003f04:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b086      	sub	sp, #24
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003f20:	4b92      	ldr	r3, [pc, #584]	; (800416c <HAL_DMA_IRQHandler+0x258>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a92      	ldr	r2, [pc, #584]	; (8004170 <HAL_DMA_IRQHandler+0x25c>)
 8003f26:	fba2 2303 	umull	r2, r3, r2, r3
 8003f2a:	0a9b      	lsrs	r3, r3, #10
 8003f2c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f32:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f3e:	2208      	movs	r2, #8
 8003f40:	409a      	lsls	r2, r3
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	4013      	ands	r3, r2
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d01a      	beq.n	8003f80 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0304 	and.w	r3, r3, #4
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d013      	beq.n	8003f80 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f022 0204 	bic.w	r2, r2, #4
 8003f66:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f6c:	2208      	movs	r2, #8
 8003f6e:	409a      	lsls	r2, r3
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f78:	f043 0201 	orr.w	r2, r3, #1
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f84:	2201      	movs	r2, #1
 8003f86:	409a      	lsls	r2, r3
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d012      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	695b      	ldr	r3, [r3, #20]
 8003f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d00b      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	409a      	lsls	r2, r3
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fae:	f043 0202 	orr.w	r2, r3, #2
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fba:	2204      	movs	r2, #4
 8003fbc:	409a      	lsls	r2, r3
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d012      	beq.n	8003fec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0302 	and.w	r3, r3, #2
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d00b      	beq.n	8003fec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fd8:	2204      	movs	r2, #4
 8003fda:	409a      	lsls	r2, r3
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fe4:	f043 0204 	orr.w	r2, r3, #4
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ff0:	2210      	movs	r2, #16
 8003ff2:	409a      	lsls	r2, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d043      	beq.n	8004084 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0308 	and.w	r3, r3, #8
 8004006:	2b00      	cmp	r3, #0
 8004008:	d03c      	beq.n	8004084 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800400e:	2210      	movs	r2, #16
 8004010:	409a      	lsls	r2, r3
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004020:	2b00      	cmp	r3, #0
 8004022:	d018      	beq.n	8004056 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d108      	bne.n	8004044 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004036:	2b00      	cmp	r3, #0
 8004038:	d024      	beq.n	8004084 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	4798      	blx	r3
 8004042:	e01f      	b.n	8004084 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004048:	2b00      	cmp	r3, #0
 800404a:	d01b      	beq.n	8004084 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	4798      	blx	r3
 8004054:	e016      	b.n	8004084 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004060:	2b00      	cmp	r3, #0
 8004062:	d107      	bne.n	8004074 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f022 0208 	bic.w	r2, r2, #8
 8004072:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004078:	2b00      	cmp	r3, #0
 800407a:	d003      	beq.n	8004084 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004088:	2220      	movs	r2, #32
 800408a:	409a      	lsls	r2, r3
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	4013      	ands	r3, r2
 8004090:	2b00      	cmp	r3, #0
 8004092:	f000 808e 	beq.w	80041b2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0310 	and.w	r3, r3, #16
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	f000 8086 	beq.w	80041b2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040aa:	2220      	movs	r2, #32
 80040ac:	409a      	lsls	r2, r3
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	2b05      	cmp	r3, #5
 80040bc:	d136      	bne.n	800412c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f022 0216 	bic.w	r2, r2, #22
 80040cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	695a      	ldr	r2, [r3, #20]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d103      	bne.n	80040ee <HAL_DMA_IRQHandler+0x1da>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d007      	beq.n	80040fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f022 0208 	bic.w	r2, r2, #8
 80040fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004102:	223f      	movs	r2, #63	; 0x3f
 8004104:	409a      	lsls	r2, r3
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2201      	movs	r2, #1
 8004116:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800411e:	2b00      	cmp	r3, #0
 8004120:	d07d      	beq.n	800421e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	4798      	blx	r3
        }
        return;
 800412a:	e078      	b.n	800421e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d01c      	beq.n	8004174 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d108      	bne.n	800415a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800414c:	2b00      	cmp	r3, #0
 800414e:	d030      	beq.n	80041b2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	4798      	blx	r3
 8004158:	e02b      	b.n	80041b2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800415e:	2b00      	cmp	r3, #0
 8004160:	d027      	beq.n	80041b2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	4798      	blx	r3
 800416a:	e022      	b.n	80041b2 <HAL_DMA_IRQHandler+0x29e>
 800416c:	20000008 	.word	0x20000008
 8004170:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800417e:	2b00      	cmp	r3, #0
 8004180:	d10f      	bne.n	80041a2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f022 0210 	bic.w	r2, r2, #16
 8004190:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2201      	movs	r2, #1
 800419e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d003      	beq.n	80041b2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d032      	beq.n	8004220 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041be:	f003 0301 	and.w	r3, r3, #1
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d022      	beq.n	800420c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2205      	movs	r2, #5
 80041ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f022 0201 	bic.w	r2, r2, #1
 80041dc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	3301      	adds	r3, #1
 80041e2:	60bb      	str	r3, [r7, #8]
 80041e4:	697a      	ldr	r2, [r7, #20]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d307      	bcc.n	80041fa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0301 	and.w	r3, r3, #1
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d1f2      	bne.n	80041de <HAL_DMA_IRQHandler+0x2ca>
 80041f8:	e000      	b.n	80041fc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80041fa:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004210:	2b00      	cmp	r3, #0
 8004212:	d005      	beq.n	8004220 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	4798      	blx	r3
 800421c:	e000      	b.n	8004220 <HAL_DMA_IRQHandler+0x30c>
        return;
 800421e:	bf00      	nop
    }
  }
}
 8004220:	3718      	adds	r7, #24
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop

08004228 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004228:	b480      	push	{r7}
 800422a:	b085      	sub	sp, #20
 800422c:	af00      	add	r7, sp, #0
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	607a      	str	r2, [r7, #4]
 8004234:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004244:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	683a      	ldr	r2, [r7, #0]
 800424c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	2b40      	cmp	r3, #64	; 0x40
 8004254:	d108      	bne.n	8004268 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	68ba      	ldr	r2, [r7, #8]
 8004264:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004266:	e007      	b.n	8004278 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	68ba      	ldr	r2, [r7, #8]
 800426e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	60da      	str	r2, [r3, #12]
}
 8004278:	bf00      	nop
 800427a:	3714      	adds	r7, #20
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004284:	b480      	push	{r7}
 8004286:	b085      	sub	sp, #20
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	b2db      	uxtb	r3, r3
 8004292:	3b10      	subs	r3, #16
 8004294:	4a14      	ldr	r2, [pc, #80]	; (80042e8 <DMA_CalcBaseAndBitshift+0x64>)
 8004296:	fba2 2303 	umull	r2, r3, r2, r3
 800429a:	091b      	lsrs	r3, r3, #4
 800429c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800429e:	4a13      	ldr	r2, [pc, #76]	; (80042ec <DMA_CalcBaseAndBitshift+0x68>)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	4413      	add	r3, r2
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	461a      	mov	r2, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2b03      	cmp	r3, #3
 80042b0:	d909      	bls.n	80042c6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80042ba:	f023 0303 	bic.w	r3, r3, #3
 80042be:	1d1a      	adds	r2, r3, #4
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	659a      	str	r2, [r3, #88]	; 0x58
 80042c4:	e007      	b.n	80042d6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80042ce:	f023 0303 	bic.w	r3, r3, #3
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3714      	adds	r7, #20
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr
 80042e6:	bf00      	nop
 80042e8:	aaaaaaab 	.word	0xaaaaaaab
 80042ec:	0800a9c0 	.word	0x0800a9c0

080042f0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b085      	sub	sp, #20
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042f8:	2300      	movs	r3, #0
 80042fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004300:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	699b      	ldr	r3, [r3, #24]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d11f      	bne.n	800434a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	2b03      	cmp	r3, #3
 800430e:	d855      	bhi.n	80043bc <DMA_CheckFifoParam+0xcc>
 8004310:	a201      	add	r2, pc, #4	; (adr r2, 8004318 <DMA_CheckFifoParam+0x28>)
 8004312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004316:	bf00      	nop
 8004318:	08004329 	.word	0x08004329
 800431c:	0800433b 	.word	0x0800433b
 8004320:	08004329 	.word	0x08004329
 8004324:	080043bd 	.word	0x080043bd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800432c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d045      	beq.n	80043c0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004338:	e042      	b.n	80043c0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800433e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004342:	d13f      	bne.n	80043c4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004348:	e03c      	b.n	80043c4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	699b      	ldr	r3, [r3, #24]
 800434e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004352:	d121      	bne.n	8004398 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	2b03      	cmp	r3, #3
 8004358:	d836      	bhi.n	80043c8 <DMA_CheckFifoParam+0xd8>
 800435a:	a201      	add	r2, pc, #4	; (adr r2, 8004360 <DMA_CheckFifoParam+0x70>)
 800435c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004360:	08004371 	.word	0x08004371
 8004364:	08004377 	.word	0x08004377
 8004368:	08004371 	.word	0x08004371
 800436c:	08004389 	.word	0x08004389
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	73fb      	strb	r3, [r7, #15]
      break;
 8004374:	e02f      	b.n	80043d6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800437a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d024      	beq.n	80043cc <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004386:	e021      	b.n	80043cc <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800438c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004390:	d11e      	bne.n	80043d0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004396:	e01b      	b.n	80043d0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	2b02      	cmp	r3, #2
 800439c:	d902      	bls.n	80043a4 <DMA_CheckFifoParam+0xb4>
 800439e:	2b03      	cmp	r3, #3
 80043a0:	d003      	beq.n	80043aa <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80043a2:	e018      	b.n	80043d6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	73fb      	strb	r3, [r7, #15]
      break;
 80043a8:	e015      	b.n	80043d6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d00e      	beq.n	80043d4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	73fb      	strb	r3, [r7, #15]
      break;
 80043ba:	e00b      	b.n	80043d4 <DMA_CheckFifoParam+0xe4>
      break;
 80043bc:	bf00      	nop
 80043be:	e00a      	b.n	80043d6 <DMA_CheckFifoParam+0xe6>
      break;
 80043c0:	bf00      	nop
 80043c2:	e008      	b.n	80043d6 <DMA_CheckFifoParam+0xe6>
      break;
 80043c4:	bf00      	nop
 80043c6:	e006      	b.n	80043d6 <DMA_CheckFifoParam+0xe6>
      break;
 80043c8:	bf00      	nop
 80043ca:	e004      	b.n	80043d6 <DMA_CheckFifoParam+0xe6>
      break;
 80043cc:	bf00      	nop
 80043ce:	e002      	b.n	80043d6 <DMA_CheckFifoParam+0xe6>
      break;   
 80043d0:	bf00      	nop
 80043d2:	e000      	b.n	80043d6 <DMA_CheckFifoParam+0xe6>
      break;
 80043d4:	bf00      	nop
    }
  } 
  
  return status; 
 80043d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3714      	adds	r7, #20
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b089      	sub	sp, #36	; 0x24
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80043ee:	2300      	movs	r3, #0
 80043f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80043f2:	2300      	movs	r3, #0
 80043f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80043f6:	2300      	movs	r3, #0
 80043f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80043fa:	2300      	movs	r3, #0
 80043fc:	61fb      	str	r3, [r7, #28]
 80043fe:	e16b      	b.n	80046d8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004400:	2201      	movs	r2, #1
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	fa02 f303 	lsl.w	r3, r2, r3
 8004408:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	697a      	ldr	r2, [r7, #20]
 8004410:	4013      	ands	r3, r2
 8004412:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004414:	693a      	ldr	r2, [r7, #16]
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	429a      	cmp	r2, r3
 800441a:	f040 815a 	bne.w	80046d2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	2b01      	cmp	r3, #1
 8004424:	d00b      	beq.n	800443e <HAL_GPIO_Init+0x5a>
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	2b02      	cmp	r3, #2
 800442c:	d007      	beq.n	800443e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004432:	2b11      	cmp	r3, #17
 8004434:	d003      	beq.n	800443e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	2b12      	cmp	r3, #18
 800443c:	d130      	bne.n	80044a0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	005b      	lsls	r3, r3, #1
 8004448:	2203      	movs	r2, #3
 800444a:	fa02 f303 	lsl.w	r3, r2, r3
 800444e:	43db      	mvns	r3, r3
 8004450:	69ba      	ldr	r2, [r7, #24]
 8004452:	4013      	ands	r3, r2
 8004454:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	68da      	ldr	r2, [r3, #12]
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	005b      	lsls	r3, r3, #1
 800445e:	fa02 f303 	lsl.w	r3, r2, r3
 8004462:	69ba      	ldr	r2, [r7, #24]
 8004464:	4313      	orrs	r3, r2
 8004466:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	69ba      	ldr	r2, [r7, #24]
 800446c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004474:	2201      	movs	r2, #1
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	fa02 f303 	lsl.w	r3, r2, r3
 800447c:	43db      	mvns	r3, r3
 800447e:	69ba      	ldr	r2, [r7, #24]
 8004480:	4013      	ands	r3, r2
 8004482:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	091b      	lsrs	r3, r3, #4
 800448a:	f003 0201 	and.w	r2, r3, #1
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	fa02 f303 	lsl.w	r3, r2, r3
 8004494:	69ba      	ldr	r2, [r7, #24]
 8004496:	4313      	orrs	r3, r2
 8004498:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	69ba      	ldr	r2, [r7, #24]
 800449e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	005b      	lsls	r3, r3, #1
 80044aa:	2203      	movs	r2, #3
 80044ac:	fa02 f303 	lsl.w	r3, r2, r3
 80044b0:	43db      	mvns	r3, r3
 80044b2:	69ba      	ldr	r2, [r7, #24]
 80044b4:	4013      	ands	r3, r2
 80044b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	689a      	ldr	r2, [r3, #8]
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	005b      	lsls	r3, r3, #1
 80044c0:	fa02 f303 	lsl.w	r3, r2, r3
 80044c4:	69ba      	ldr	r2, [r7, #24]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	69ba      	ldr	r2, [r7, #24]
 80044ce:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d003      	beq.n	80044e0 <HAL_GPIO_Init+0xfc>
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	2b12      	cmp	r3, #18
 80044de:	d123      	bne.n	8004528 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	08da      	lsrs	r2, r3, #3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	3208      	adds	r2, #8
 80044e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	f003 0307 	and.w	r3, r3, #7
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	220f      	movs	r2, #15
 80044f8:	fa02 f303 	lsl.w	r3, r2, r3
 80044fc:	43db      	mvns	r3, r3
 80044fe:	69ba      	ldr	r2, [r7, #24]
 8004500:	4013      	ands	r3, r2
 8004502:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	691a      	ldr	r2, [r3, #16]
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	f003 0307 	and.w	r3, r3, #7
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	fa02 f303 	lsl.w	r3, r2, r3
 8004514:	69ba      	ldr	r2, [r7, #24]
 8004516:	4313      	orrs	r3, r2
 8004518:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	08da      	lsrs	r2, r3, #3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	3208      	adds	r2, #8
 8004522:	69b9      	ldr	r1, [r7, #24]
 8004524:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	005b      	lsls	r3, r3, #1
 8004532:	2203      	movs	r2, #3
 8004534:	fa02 f303 	lsl.w	r3, r2, r3
 8004538:	43db      	mvns	r3, r3
 800453a:	69ba      	ldr	r2, [r7, #24]
 800453c:	4013      	ands	r3, r2
 800453e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	f003 0203 	and.w	r2, r3, #3
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	005b      	lsls	r3, r3, #1
 800454c:	fa02 f303 	lsl.w	r3, r2, r3
 8004550:	69ba      	ldr	r2, [r7, #24]
 8004552:	4313      	orrs	r3, r2
 8004554:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	69ba      	ldr	r2, [r7, #24]
 800455a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004564:	2b00      	cmp	r3, #0
 8004566:	f000 80b4 	beq.w	80046d2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800456a:	2300      	movs	r3, #0
 800456c:	60fb      	str	r3, [r7, #12]
 800456e:	4b5f      	ldr	r3, [pc, #380]	; (80046ec <HAL_GPIO_Init+0x308>)
 8004570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004572:	4a5e      	ldr	r2, [pc, #376]	; (80046ec <HAL_GPIO_Init+0x308>)
 8004574:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004578:	6453      	str	r3, [r2, #68]	; 0x44
 800457a:	4b5c      	ldr	r3, [pc, #368]	; (80046ec <HAL_GPIO_Init+0x308>)
 800457c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800457e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004582:	60fb      	str	r3, [r7, #12]
 8004584:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004586:	4a5a      	ldr	r2, [pc, #360]	; (80046f0 <HAL_GPIO_Init+0x30c>)
 8004588:	69fb      	ldr	r3, [r7, #28]
 800458a:	089b      	lsrs	r3, r3, #2
 800458c:	3302      	adds	r3, #2
 800458e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004592:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	f003 0303 	and.w	r3, r3, #3
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	220f      	movs	r2, #15
 800459e:	fa02 f303 	lsl.w	r3, r2, r3
 80045a2:	43db      	mvns	r3, r3
 80045a4:	69ba      	ldr	r2, [r7, #24]
 80045a6:	4013      	ands	r3, r2
 80045a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a51      	ldr	r2, [pc, #324]	; (80046f4 <HAL_GPIO_Init+0x310>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d02b      	beq.n	800460a <HAL_GPIO_Init+0x226>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a50      	ldr	r2, [pc, #320]	; (80046f8 <HAL_GPIO_Init+0x314>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d025      	beq.n	8004606 <HAL_GPIO_Init+0x222>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a4f      	ldr	r2, [pc, #316]	; (80046fc <HAL_GPIO_Init+0x318>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d01f      	beq.n	8004602 <HAL_GPIO_Init+0x21e>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a4e      	ldr	r2, [pc, #312]	; (8004700 <HAL_GPIO_Init+0x31c>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d019      	beq.n	80045fe <HAL_GPIO_Init+0x21a>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a4d      	ldr	r2, [pc, #308]	; (8004704 <HAL_GPIO_Init+0x320>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d013      	beq.n	80045fa <HAL_GPIO_Init+0x216>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a4c      	ldr	r2, [pc, #304]	; (8004708 <HAL_GPIO_Init+0x324>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d00d      	beq.n	80045f6 <HAL_GPIO_Init+0x212>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a4b      	ldr	r2, [pc, #300]	; (800470c <HAL_GPIO_Init+0x328>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d007      	beq.n	80045f2 <HAL_GPIO_Init+0x20e>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a4a      	ldr	r2, [pc, #296]	; (8004710 <HAL_GPIO_Init+0x32c>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d101      	bne.n	80045ee <HAL_GPIO_Init+0x20a>
 80045ea:	2307      	movs	r3, #7
 80045ec:	e00e      	b.n	800460c <HAL_GPIO_Init+0x228>
 80045ee:	2308      	movs	r3, #8
 80045f0:	e00c      	b.n	800460c <HAL_GPIO_Init+0x228>
 80045f2:	2306      	movs	r3, #6
 80045f4:	e00a      	b.n	800460c <HAL_GPIO_Init+0x228>
 80045f6:	2305      	movs	r3, #5
 80045f8:	e008      	b.n	800460c <HAL_GPIO_Init+0x228>
 80045fa:	2304      	movs	r3, #4
 80045fc:	e006      	b.n	800460c <HAL_GPIO_Init+0x228>
 80045fe:	2303      	movs	r3, #3
 8004600:	e004      	b.n	800460c <HAL_GPIO_Init+0x228>
 8004602:	2302      	movs	r3, #2
 8004604:	e002      	b.n	800460c <HAL_GPIO_Init+0x228>
 8004606:	2301      	movs	r3, #1
 8004608:	e000      	b.n	800460c <HAL_GPIO_Init+0x228>
 800460a:	2300      	movs	r3, #0
 800460c:	69fa      	ldr	r2, [r7, #28]
 800460e:	f002 0203 	and.w	r2, r2, #3
 8004612:	0092      	lsls	r2, r2, #2
 8004614:	4093      	lsls	r3, r2
 8004616:	69ba      	ldr	r2, [r7, #24]
 8004618:	4313      	orrs	r3, r2
 800461a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800461c:	4934      	ldr	r1, [pc, #208]	; (80046f0 <HAL_GPIO_Init+0x30c>)
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	089b      	lsrs	r3, r3, #2
 8004622:	3302      	adds	r3, #2
 8004624:	69ba      	ldr	r2, [r7, #24]
 8004626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800462a:	4b3a      	ldr	r3, [pc, #232]	; (8004714 <HAL_GPIO_Init+0x330>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	43db      	mvns	r3, r3
 8004634:	69ba      	ldr	r2, [r7, #24]
 8004636:	4013      	ands	r3, r2
 8004638:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d003      	beq.n	800464e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004646:	69ba      	ldr	r2, [r7, #24]
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	4313      	orrs	r3, r2
 800464c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800464e:	4a31      	ldr	r2, [pc, #196]	; (8004714 <HAL_GPIO_Init+0x330>)
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004654:	4b2f      	ldr	r3, [pc, #188]	; (8004714 <HAL_GPIO_Init+0x330>)
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	43db      	mvns	r3, r3
 800465e:	69ba      	ldr	r2, [r7, #24]
 8004660:	4013      	ands	r3, r2
 8004662:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800466c:	2b00      	cmp	r3, #0
 800466e:	d003      	beq.n	8004678 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004670:	69ba      	ldr	r2, [r7, #24]
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	4313      	orrs	r3, r2
 8004676:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004678:	4a26      	ldr	r2, [pc, #152]	; (8004714 <HAL_GPIO_Init+0x330>)
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800467e:	4b25      	ldr	r3, [pc, #148]	; (8004714 <HAL_GPIO_Init+0x330>)
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	43db      	mvns	r3, r3
 8004688:	69ba      	ldr	r2, [r7, #24]
 800468a:	4013      	ands	r3, r2
 800468c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d003      	beq.n	80046a2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800469a:	69ba      	ldr	r2, [r7, #24]
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	4313      	orrs	r3, r2
 80046a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80046a2:	4a1c      	ldr	r2, [pc, #112]	; (8004714 <HAL_GPIO_Init+0x330>)
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80046a8:	4b1a      	ldr	r3, [pc, #104]	; (8004714 <HAL_GPIO_Init+0x330>)
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	43db      	mvns	r3, r3
 80046b2:	69ba      	ldr	r2, [r7, #24]
 80046b4:	4013      	ands	r3, r2
 80046b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d003      	beq.n	80046cc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80046c4:	69ba      	ldr	r2, [r7, #24]
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80046cc:	4a11      	ldr	r2, [pc, #68]	; (8004714 <HAL_GPIO_Init+0x330>)
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	3301      	adds	r3, #1
 80046d6:	61fb      	str	r3, [r7, #28]
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	2b0f      	cmp	r3, #15
 80046dc:	f67f ae90 	bls.w	8004400 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80046e0:	bf00      	nop
 80046e2:	3724      	adds	r7, #36	; 0x24
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr
 80046ec:	40023800 	.word	0x40023800
 80046f0:	40013800 	.word	0x40013800
 80046f4:	40020000 	.word	0x40020000
 80046f8:	40020400 	.word	0x40020400
 80046fc:	40020800 	.word	0x40020800
 8004700:	40020c00 	.word	0x40020c00
 8004704:	40021000 	.word	0x40021000
 8004708:	40021400 	.word	0x40021400
 800470c:	40021800 	.word	0x40021800
 8004710:	40021c00 	.word	0x40021c00
 8004714:	40013c00 	.word	0x40013c00

08004718 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004718:	b480      	push	{r7}
 800471a:	b085      	sub	sp, #20
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	460b      	mov	r3, r1
 8004722:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	691a      	ldr	r2, [r3, #16]
 8004728:	887b      	ldrh	r3, [r7, #2]
 800472a:	4013      	ands	r3, r2
 800472c:	2b00      	cmp	r3, #0
 800472e:	d002      	beq.n	8004736 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004730:	2301      	movs	r3, #1
 8004732:	73fb      	strb	r3, [r7, #15]
 8004734:	e001      	b.n	800473a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004736:	2300      	movs	r3, #0
 8004738:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800473a:	7bfb      	ldrb	r3, [r7, #15]
}
 800473c:	4618      	mov	r0, r3
 800473e:	3714      	adds	r7, #20
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr

08004748 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	460b      	mov	r3, r1
 8004752:	807b      	strh	r3, [r7, #2]
 8004754:	4613      	mov	r3, r2
 8004756:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004758:	787b      	ldrb	r3, [r7, #1]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d003      	beq.n	8004766 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800475e:	887a      	ldrh	r2, [r7, #2]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004764:	e003      	b.n	800476e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004766:	887b      	ldrh	r3, [r7, #2]
 8004768:	041a      	lsls	r2, r3, #16
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	619a      	str	r2, [r3, #24]
}
 800476e:	bf00      	nop
 8004770:	370c      	adds	r7, #12
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr

0800477a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800477a:	b480      	push	{r7}
 800477c:	b083      	sub	sp, #12
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
 8004782:	460b      	mov	r3, r1
 8004784:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	695a      	ldr	r2, [r3, #20]
 800478a:	887b      	ldrh	r3, [r7, #2]
 800478c:	401a      	ands	r2, r3
 800478e:	887b      	ldrh	r3, [r7, #2]
 8004790:	429a      	cmp	r2, r3
 8004792:	d104      	bne.n	800479e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004794:	887b      	ldrh	r3, [r7, #2]
 8004796:	041a      	lsls	r2, r3, #16
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800479c:	e002      	b.n	80047a4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800479e:	887a      	ldrh	r2, [r7, #2]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	619a      	str	r2, [r3, #24]
}
 80047a4:	bf00      	nop
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b086      	sub	sp, #24
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d101      	bne.n	80047c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e25b      	b.n	8004c7a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0301 	and.w	r3, r3, #1
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d075      	beq.n	80048ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047ce:	4ba3      	ldr	r3, [pc, #652]	; (8004a5c <HAL_RCC_OscConfig+0x2ac>)
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	f003 030c 	and.w	r3, r3, #12
 80047d6:	2b04      	cmp	r3, #4
 80047d8:	d00c      	beq.n	80047f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047da:	4ba0      	ldr	r3, [pc, #640]	; (8004a5c <HAL_RCC_OscConfig+0x2ac>)
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047e2:	2b08      	cmp	r3, #8
 80047e4:	d112      	bne.n	800480c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047e6:	4b9d      	ldr	r3, [pc, #628]	; (8004a5c <HAL_RCC_OscConfig+0x2ac>)
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047f2:	d10b      	bne.n	800480c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047f4:	4b99      	ldr	r3, [pc, #612]	; (8004a5c <HAL_RCC_OscConfig+0x2ac>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d05b      	beq.n	80048b8 <HAL_RCC_OscConfig+0x108>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d157      	bne.n	80048b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e236      	b.n	8004c7a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004814:	d106      	bne.n	8004824 <HAL_RCC_OscConfig+0x74>
 8004816:	4b91      	ldr	r3, [pc, #580]	; (8004a5c <HAL_RCC_OscConfig+0x2ac>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a90      	ldr	r2, [pc, #576]	; (8004a5c <HAL_RCC_OscConfig+0x2ac>)
 800481c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004820:	6013      	str	r3, [r2, #0]
 8004822:	e01d      	b.n	8004860 <HAL_RCC_OscConfig+0xb0>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800482c:	d10c      	bne.n	8004848 <HAL_RCC_OscConfig+0x98>
 800482e:	4b8b      	ldr	r3, [pc, #556]	; (8004a5c <HAL_RCC_OscConfig+0x2ac>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a8a      	ldr	r2, [pc, #552]	; (8004a5c <HAL_RCC_OscConfig+0x2ac>)
 8004834:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004838:	6013      	str	r3, [r2, #0]
 800483a:	4b88      	ldr	r3, [pc, #544]	; (8004a5c <HAL_RCC_OscConfig+0x2ac>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a87      	ldr	r2, [pc, #540]	; (8004a5c <HAL_RCC_OscConfig+0x2ac>)
 8004840:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004844:	6013      	str	r3, [r2, #0]
 8004846:	e00b      	b.n	8004860 <HAL_RCC_OscConfig+0xb0>
 8004848:	4b84      	ldr	r3, [pc, #528]	; (8004a5c <HAL_RCC_OscConfig+0x2ac>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a83      	ldr	r2, [pc, #524]	; (8004a5c <HAL_RCC_OscConfig+0x2ac>)
 800484e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004852:	6013      	str	r3, [r2, #0]
 8004854:	4b81      	ldr	r3, [pc, #516]	; (8004a5c <HAL_RCC_OscConfig+0x2ac>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a80      	ldr	r2, [pc, #512]	; (8004a5c <HAL_RCC_OscConfig+0x2ac>)
 800485a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800485e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d013      	beq.n	8004890 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004868:	f7fe fbae 	bl	8002fc8 <HAL_GetTick>
 800486c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800486e:	e008      	b.n	8004882 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004870:	f7fe fbaa 	bl	8002fc8 <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	2b64      	cmp	r3, #100	; 0x64
 800487c:	d901      	bls.n	8004882 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e1fb      	b.n	8004c7a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004882:	4b76      	ldr	r3, [pc, #472]	; (8004a5c <HAL_RCC_OscConfig+0x2ac>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d0f0      	beq.n	8004870 <HAL_RCC_OscConfig+0xc0>
 800488e:	e014      	b.n	80048ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004890:	f7fe fb9a 	bl	8002fc8 <HAL_GetTick>
 8004894:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004896:	e008      	b.n	80048aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004898:	f7fe fb96 	bl	8002fc8 <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	2b64      	cmp	r3, #100	; 0x64
 80048a4:	d901      	bls.n	80048aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e1e7      	b.n	8004c7a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048aa:	4b6c      	ldr	r3, [pc, #432]	; (8004a5c <HAL_RCC_OscConfig+0x2ac>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d1f0      	bne.n	8004898 <HAL_RCC_OscConfig+0xe8>
 80048b6:	e000      	b.n	80048ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0302 	and.w	r3, r3, #2
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d063      	beq.n	800498e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80048c6:	4b65      	ldr	r3, [pc, #404]	; (8004a5c <HAL_RCC_OscConfig+0x2ac>)
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	f003 030c 	and.w	r3, r3, #12
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d00b      	beq.n	80048ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048d2:	4b62      	ldr	r3, [pc, #392]	; (8004a5c <HAL_RCC_OscConfig+0x2ac>)
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80048da:	2b08      	cmp	r3, #8
 80048dc:	d11c      	bne.n	8004918 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048de:	4b5f      	ldr	r3, [pc, #380]	; (8004a5c <HAL_RCC_OscConfig+0x2ac>)
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d116      	bne.n	8004918 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048ea:	4b5c      	ldr	r3, [pc, #368]	; (8004a5c <HAL_RCC_OscConfig+0x2ac>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0302 	and.w	r3, r3, #2
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d005      	beq.n	8004902 <HAL_RCC_OscConfig+0x152>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d001      	beq.n	8004902 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e1bb      	b.n	8004c7a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004902:	4b56      	ldr	r3, [pc, #344]	; (8004a5c <HAL_RCC_OscConfig+0x2ac>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	691b      	ldr	r3, [r3, #16]
 800490e:	00db      	lsls	r3, r3, #3
 8004910:	4952      	ldr	r1, [pc, #328]	; (8004a5c <HAL_RCC_OscConfig+0x2ac>)
 8004912:	4313      	orrs	r3, r2
 8004914:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004916:	e03a      	b.n	800498e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d020      	beq.n	8004962 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004920:	4b4f      	ldr	r3, [pc, #316]	; (8004a60 <HAL_RCC_OscConfig+0x2b0>)
 8004922:	2201      	movs	r2, #1
 8004924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004926:	f7fe fb4f 	bl	8002fc8 <HAL_GetTick>
 800492a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800492c:	e008      	b.n	8004940 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800492e:	f7fe fb4b 	bl	8002fc8 <HAL_GetTick>
 8004932:	4602      	mov	r2, r0
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	2b02      	cmp	r3, #2
 800493a:	d901      	bls.n	8004940 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	e19c      	b.n	8004c7a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004940:	4b46      	ldr	r3, [pc, #280]	; (8004a5c <HAL_RCC_OscConfig+0x2ac>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0302 	and.w	r3, r3, #2
 8004948:	2b00      	cmp	r3, #0
 800494a:	d0f0      	beq.n	800492e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800494c:	4b43      	ldr	r3, [pc, #268]	; (8004a5c <HAL_RCC_OscConfig+0x2ac>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	691b      	ldr	r3, [r3, #16]
 8004958:	00db      	lsls	r3, r3, #3
 800495a:	4940      	ldr	r1, [pc, #256]	; (8004a5c <HAL_RCC_OscConfig+0x2ac>)
 800495c:	4313      	orrs	r3, r2
 800495e:	600b      	str	r3, [r1, #0]
 8004960:	e015      	b.n	800498e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004962:	4b3f      	ldr	r3, [pc, #252]	; (8004a60 <HAL_RCC_OscConfig+0x2b0>)
 8004964:	2200      	movs	r2, #0
 8004966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004968:	f7fe fb2e 	bl	8002fc8 <HAL_GetTick>
 800496c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800496e:	e008      	b.n	8004982 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004970:	f7fe fb2a 	bl	8002fc8 <HAL_GetTick>
 8004974:	4602      	mov	r2, r0
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	2b02      	cmp	r3, #2
 800497c:	d901      	bls.n	8004982 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e17b      	b.n	8004c7a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004982:	4b36      	ldr	r3, [pc, #216]	; (8004a5c <HAL_RCC_OscConfig+0x2ac>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 0302 	and.w	r3, r3, #2
 800498a:	2b00      	cmp	r3, #0
 800498c:	d1f0      	bne.n	8004970 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 0308 	and.w	r3, r3, #8
 8004996:	2b00      	cmp	r3, #0
 8004998:	d030      	beq.n	80049fc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	695b      	ldr	r3, [r3, #20]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d016      	beq.n	80049d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049a2:	4b30      	ldr	r3, [pc, #192]	; (8004a64 <HAL_RCC_OscConfig+0x2b4>)
 80049a4:	2201      	movs	r2, #1
 80049a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049a8:	f7fe fb0e 	bl	8002fc8 <HAL_GetTick>
 80049ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049ae:	e008      	b.n	80049c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049b0:	f7fe fb0a 	bl	8002fc8 <HAL_GetTick>
 80049b4:	4602      	mov	r2, r0
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d901      	bls.n	80049c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e15b      	b.n	8004c7a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049c2:	4b26      	ldr	r3, [pc, #152]	; (8004a5c <HAL_RCC_OscConfig+0x2ac>)
 80049c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049c6:	f003 0302 	and.w	r3, r3, #2
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d0f0      	beq.n	80049b0 <HAL_RCC_OscConfig+0x200>
 80049ce:	e015      	b.n	80049fc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049d0:	4b24      	ldr	r3, [pc, #144]	; (8004a64 <HAL_RCC_OscConfig+0x2b4>)
 80049d2:	2200      	movs	r2, #0
 80049d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049d6:	f7fe faf7 	bl	8002fc8 <HAL_GetTick>
 80049da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049dc:	e008      	b.n	80049f0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049de:	f7fe faf3 	bl	8002fc8 <HAL_GetTick>
 80049e2:	4602      	mov	r2, r0
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	d901      	bls.n	80049f0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80049ec:	2303      	movs	r3, #3
 80049ee:	e144      	b.n	8004c7a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049f0:	4b1a      	ldr	r3, [pc, #104]	; (8004a5c <HAL_RCC_OscConfig+0x2ac>)
 80049f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049f4:	f003 0302 	and.w	r3, r3, #2
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d1f0      	bne.n	80049de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 0304 	and.w	r3, r3, #4
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	f000 80a0 	beq.w	8004b4a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a0e:	4b13      	ldr	r3, [pc, #76]	; (8004a5c <HAL_RCC_OscConfig+0x2ac>)
 8004a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d10f      	bne.n	8004a3a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	60bb      	str	r3, [r7, #8]
 8004a1e:	4b0f      	ldr	r3, [pc, #60]	; (8004a5c <HAL_RCC_OscConfig+0x2ac>)
 8004a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a22:	4a0e      	ldr	r2, [pc, #56]	; (8004a5c <HAL_RCC_OscConfig+0x2ac>)
 8004a24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a28:	6413      	str	r3, [r2, #64]	; 0x40
 8004a2a:	4b0c      	ldr	r3, [pc, #48]	; (8004a5c <HAL_RCC_OscConfig+0x2ac>)
 8004a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a32:	60bb      	str	r3, [r7, #8]
 8004a34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a36:	2301      	movs	r3, #1
 8004a38:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a3a:	4b0b      	ldr	r3, [pc, #44]	; (8004a68 <HAL_RCC_OscConfig+0x2b8>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d121      	bne.n	8004a8a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a46:	4b08      	ldr	r3, [pc, #32]	; (8004a68 <HAL_RCC_OscConfig+0x2b8>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a07      	ldr	r2, [pc, #28]	; (8004a68 <HAL_RCC_OscConfig+0x2b8>)
 8004a4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a52:	f7fe fab9 	bl	8002fc8 <HAL_GetTick>
 8004a56:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a58:	e011      	b.n	8004a7e <HAL_RCC_OscConfig+0x2ce>
 8004a5a:	bf00      	nop
 8004a5c:	40023800 	.word	0x40023800
 8004a60:	42470000 	.word	0x42470000
 8004a64:	42470e80 	.word	0x42470e80
 8004a68:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a6c:	f7fe faac 	bl	8002fc8 <HAL_GetTick>
 8004a70:	4602      	mov	r2, r0
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	2b02      	cmp	r3, #2
 8004a78:	d901      	bls.n	8004a7e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e0fd      	b.n	8004c7a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a7e:	4b81      	ldr	r3, [pc, #516]	; (8004c84 <HAL_RCC_OscConfig+0x4d4>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d0f0      	beq.n	8004a6c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d106      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x2f0>
 8004a92:	4b7d      	ldr	r3, [pc, #500]	; (8004c88 <HAL_RCC_OscConfig+0x4d8>)
 8004a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a96:	4a7c      	ldr	r2, [pc, #496]	; (8004c88 <HAL_RCC_OscConfig+0x4d8>)
 8004a98:	f043 0301 	orr.w	r3, r3, #1
 8004a9c:	6713      	str	r3, [r2, #112]	; 0x70
 8004a9e:	e01c      	b.n	8004ada <HAL_RCC_OscConfig+0x32a>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	2b05      	cmp	r3, #5
 8004aa6:	d10c      	bne.n	8004ac2 <HAL_RCC_OscConfig+0x312>
 8004aa8:	4b77      	ldr	r3, [pc, #476]	; (8004c88 <HAL_RCC_OscConfig+0x4d8>)
 8004aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aac:	4a76      	ldr	r2, [pc, #472]	; (8004c88 <HAL_RCC_OscConfig+0x4d8>)
 8004aae:	f043 0304 	orr.w	r3, r3, #4
 8004ab2:	6713      	str	r3, [r2, #112]	; 0x70
 8004ab4:	4b74      	ldr	r3, [pc, #464]	; (8004c88 <HAL_RCC_OscConfig+0x4d8>)
 8004ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab8:	4a73      	ldr	r2, [pc, #460]	; (8004c88 <HAL_RCC_OscConfig+0x4d8>)
 8004aba:	f043 0301 	orr.w	r3, r3, #1
 8004abe:	6713      	str	r3, [r2, #112]	; 0x70
 8004ac0:	e00b      	b.n	8004ada <HAL_RCC_OscConfig+0x32a>
 8004ac2:	4b71      	ldr	r3, [pc, #452]	; (8004c88 <HAL_RCC_OscConfig+0x4d8>)
 8004ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ac6:	4a70      	ldr	r2, [pc, #448]	; (8004c88 <HAL_RCC_OscConfig+0x4d8>)
 8004ac8:	f023 0301 	bic.w	r3, r3, #1
 8004acc:	6713      	str	r3, [r2, #112]	; 0x70
 8004ace:	4b6e      	ldr	r3, [pc, #440]	; (8004c88 <HAL_RCC_OscConfig+0x4d8>)
 8004ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ad2:	4a6d      	ldr	r2, [pc, #436]	; (8004c88 <HAL_RCC_OscConfig+0x4d8>)
 8004ad4:	f023 0304 	bic.w	r3, r3, #4
 8004ad8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d015      	beq.n	8004b0e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ae2:	f7fe fa71 	bl	8002fc8 <HAL_GetTick>
 8004ae6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ae8:	e00a      	b.n	8004b00 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004aea:	f7fe fa6d 	bl	8002fc8 <HAL_GetTick>
 8004aee:	4602      	mov	r2, r0
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d901      	bls.n	8004b00 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004afc:	2303      	movs	r3, #3
 8004afe:	e0bc      	b.n	8004c7a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b00:	4b61      	ldr	r3, [pc, #388]	; (8004c88 <HAL_RCC_OscConfig+0x4d8>)
 8004b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b04:	f003 0302 	and.w	r3, r3, #2
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d0ee      	beq.n	8004aea <HAL_RCC_OscConfig+0x33a>
 8004b0c:	e014      	b.n	8004b38 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b0e:	f7fe fa5b 	bl	8002fc8 <HAL_GetTick>
 8004b12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b14:	e00a      	b.n	8004b2c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b16:	f7fe fa57 	bl	8002fc8 <HAL_GetTick>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	1ad3      	subs	r3, r2, r3
 8004b20:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d901      	bls.n	8004b2c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	e0a6      	b.n	8004c7a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b2c:	4b56      	ldr	r3, [pc, #344]	; (8004c88 <HAL_RCC_OscConfig+0x4d8>)
 8004b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b30:	f003 0302 	and.w	r3, r3, #2
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d1ee      	bne.n	8004b16 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b38:	7dfb      	ldrb	r3, [r7, #23]
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d105      	bne.n	8004b4a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b3e:	4b52      	ldr	r3, [pc, #328]	; (8004c88 <HAL_RCC_OscConfig+0x4d8>)
 8004b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b42:	4a51      	ldr	r2, [pc, #324]	; (8004c88 <HAL_RCC_OscConfig+0x4d8>)
 8004b44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b48:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	699b      	ldr	r3, [r3, #24]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	f000 8092 	beq.w	8004c78 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b54:	4b4c      	ldr	r3, [pc, #304]	; (8004c88 <HAL_RCC_OscConfig+0x4d8>)
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	f003 030c 	and.w	r3, r3, #12
 8004b5c:	2b08      	cmp	r3, #8
 8004b5e:	d05c      	beq.n	8004c1a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	699b      	ldr	r3, [r3, #24]
 8004b64:	2b02      	cmp	r3, #2
 8004b66:	d141      	bne.n	8004bec <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b68:	4b48      	ldr	r3, [pc, #288]	; (8004c8c <HAL_RCC_OscConfig+0x4dc>)
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b6e:	f7fe fa2b 	bl	8002fc8 <HAL_GetTick>
 8004b72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b74:	e008      	b.n	8004b88 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b76:	f7fe fa27 	bl	8002fc8 <HAL_GetTick>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d901      	bls.n	8004b88 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	e078      	b.n	8004c7a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b88:	4b3f      	ldr	r3, [pc, #252]	; (8004c88 <HAL_RCC_OscConfig+0x4d8>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d1f0      	bne.n	8004b76 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	69da      	ldr	r2, [r3, #28]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a1b      	ldr	r3, [r3, #32]
 8004b9c:	431a      	orrs	r2, r3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba2:	019b      	lsls	r3, r3, #6
 8004ba4:	431a      	orrs	r2, r3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004baa:	085b      	lsrs	r3, r3, #1
 8004bac:	3b01      	subs	r3, #1
 8004bae:	041b      	lsls	r3, r3, #16
 8004bb0:	431a      	orrs	r2, r3
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb6:	061b      	lsls	r3, r3, #24
 8004bb8:	4933      	ldr	r1, [pc, #204]	; (8004c88 <HAL_RCC_OscConfig+0x4d8>)
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004bbe:	4b33      	ldr	r3, [pc, #204]	; (8004c8c <HAL_RCC_OscConfig+0x4dc>)
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bc4:	f7fe fa00 	bl	8002fc8 <HAL_GetTick>
 8004bc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bca:	e008      	b.n	8004bde <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bcc:	f7fe f9fc 	bl	8002fc8 <HAL_GetTick>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	2b02      	cmp	r3, #2
 8004bd8:	d901      	bls.n	8004bde <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e04d      	b.n	8004c7a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bde:	4b2a      	ldr	r3, [pc, #168]	; (8004c88 <HAL_RCC_OscConfig+0x4d8>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d0f0      	beq.n	8004bcc <HAL_RCC_OscConfig+0x41c>
 8004bea:	e045      	b.n	8004c78 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bec:	4b27      	ldr	r3, [pc, #156]	; (8004c8c <HAL_RCC_OscConfig+0x4dc>)
 8004bee:	2200      	movs	r2, #0
 8004bf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bf2:	f7fe f9e9 	bl	8002fc8 <HAL_GetTick>
 8004bf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bf8:	e008      	b.n	8004c0c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bfa:	f7fe f9e5 	bl	8002fc8 <HAL_GetTick>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	2b02      	cmp	r3, #2
 8004c06:	d901      	bls.n	8004c0c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004c08:	2303      	movs	r3, #3
 8004c0a:	e036      	b.n	8004c7a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c0c:	4b1e      	ldr	r3, [pc, #120]	; (8004c88 <HAL_RCC_OscConfig+0x4d8>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d1f0      	bne.n	8004bfa <HAL_RCC_OscConfig+0x44a>
 8004c18:	e02e      	b.n	8004c78 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	699b      	ldr	r3, [r3, #24]
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d101      	bne.n	8004c26 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e029      	b.n	8004c7a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c26:	4b18      	ldr	r3, [pc, #96]	; (8004c88 <HAL_RCC_OscConfig+0x4d8>)
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	69db      	ldr	r3, [r3, #28]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d11c      	bne.n	8004c74 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d115      	bne.n	8004c74 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004c48:	68fa      	ldr	r2, [r7, #12]
 8004c4a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c4e:	4013      	ands	r3, r2
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d10d      	bne.n	8004c74 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d106      	bne.n	8004c74 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d001      	beq.n	8004c78 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e000      	b.n	8004c7a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004c78:	2300      	movs	r3, #0
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3718      	adds	r7, #24
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	40007000 	.word	0x40007000
 8004c88:	40023800 	.word	0x40023800
 8004c8c:	42470060 	.word	0x42470060

08004c90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b084      	sub	sp, #16
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d101      	bne.n	8004ca4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e0cc      	b.n	8004e3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ca4:	4b68      	ldr	r3, [pc, #416]	; (8004e48 <HAL_RCC_ClockConfig+0x1b8>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 030f 	and.w	r3, r3, #15
 8004cac:	683a      	ldr	r2, [r7, #0]
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d90c      	bls.n	8004ccc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cb2:	4b65      	ldr	r3, [pc, #404]	; (8004e48 <HAL_RCC_ClockConfig+0x1b8>)
 8004cb4:	683a      	ldr	r2, [r7, #0]
 8004cb6:	b2d2      	uxtb	r2, r2
 8004cb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cba:	4b63      	ldr	r3, [pc, #396]	; (8004e48 <HAL_RCC_ClockConfig+0x1b8>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 030f 	and.w	r3, r3, #15
 8004cc2:	683a      	ldr	r2, [r7, #0]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d001      	beq.n	8004ccc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e0b8      	b.n	8004e3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0302 	and.w	r3, r3, #2
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d020      	beq.n	8004d1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0304 	and.w	r3, r3, #4
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d005      	beq.n	8004cf0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ce4:	4b59      	ldr	r3, [pc, #356]	; (8004e4c <HAL_RCC_ClockConfig+0x1bc>)
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	4a58      	ldr	r2, [pc, #352]	; (8004e4c <HAL_RCC_ClockConfig+0x1bc>)
 8004cea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004cee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0308 	and.w	r3, r3, #8
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d005      	beq.n	8004d08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004cfc:	4b53      	ldr	r3, [pc, #332]	; (8004e4c <HAL_RCC_ClockConfig+0x1bc>)
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	4a52      	ldr	r2, [pc, #328]	; (8004e4c <HAL_RCC_ClockConfig+0x1bc>)
 8004d02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d08:	4b50      	ldr	r3, [pc, #320]	; (8004e4c <HAL_RCC_ClockConfig+0x1bc>)
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	494d      	ldr	r1, [pc, #308]	; (8004e4c <HAL_RCC_ClockConfig+0x1bc>)
 8004d16:	4313      	orrs	r3, r2
 8004d18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 0301 	and.w	r3, r3, #1
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d044      	beq.n	8004db0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d107      	bne.n	8004d3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d2e:	4b47      	ldr	r3, [pc, #284]	; (8004e4c <HAL_RCC_ClockConfig+0x1bc>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d119      	bne.n	8004d6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e07f      	b.n	8004e3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	2b02      	cmp	r3, #2
 8004d44:	d003      	beq.n	8004d4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d4a:	2b03      	cmp	r3, #3
 8004d4c:	d107      	bne.n	8004d5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d4e:	4b3f      	ldr	r3, [pc, #252]	; (8004e4c <HAL_RCC_ClockConfig+0x1bc>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d109      	bne.n	8004d6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e06f      	b.n	8004e3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d5e:	4b3b      	ldr	r3, [pc, #236]	; (8004e4c <HAL_RCC_ClockConfig+0x1bc>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0302 	and.w	r3, r3, #2
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d101      	bne.n	8004d6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e067      	b.n	8004e3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d6e:	4b37      	ldr	r3, [pc, #220]	; (8004e4c <HAL_RCC_ClockConfig+0x1bc>)
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	f023 0203 	bic.w	r2, r3, #3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	4934      	ldr	r1, [pc, #208]	; (8004e4c <HAL_RCC_ClockConfig+0x1bc>)
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d80:	f7fe f922 	bl	8002fc8 <HAL_GetTick>
 8004d84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d86:	e00a      	b.n	8004d9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d88:	f7fe f91e 	bl	8002fc8 <HAL_GetTick>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d901      	bls.n	8004d9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e04f      	b.n	8004e3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d9e:	4b2b      	ldr	r3, [pc, #172]	; (8004e4c <HAL_RCC_ClockConfig+0x1bc>)
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	f003 020c 	and.w	r2, r3, #12
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d1eb      	bne.n	8004d88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004db0:	4b25      	ldr	r3, [pc, #148]	; (8004e48 <HAL_RCC_ClockConfig+0x1b8>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 030f 	and.w	r3, r3, #15
 8004db8:	683a      	ldr	r2, [r7, #0]
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d20c      	bcs.n	8004dd8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dbe:	4b22      	ldr	r3, [pc, #136]	; (8004e48 <HAL_RCC_ClockConfig+0x1b8>)
 8004dc0:	683a      	ldr	r2, [r7, #0]
 8004dc2:	b2d2      	uxtb	r2, r2
 8004dc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dc6:	4b20      	ldr	r3, [pc, #128]	; (8004e48 <HAL_RCC_ClockConfig+0x1b8>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 030f 	and.w	r3, r3, #15
 8004dce:	683a      	ldr	r2, [r7, #0]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d001      	beq.n	8004dd8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e032      	b.n	8004e3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0304 	and.w	r3, r3, #4
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d008      	beq.n	8004df6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004de4:	4b19      	ldr	r3, [pc, #100]	; (8004e4c <HAL_RCC_ClockConfig+0x1bc>)
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	4916      	ldr	r1, [pc, #88]	; (8004e4c <HAL_RCC_ClockConfig+0x1bc>)
 8004df2:	4313      	orrs	r3, r2
 8004df4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 0308 	and.w	r3, r3, #8
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d009      	beq.n	8004e16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e02:	4b12      	ldr	r3, [pc, #72]	; (8004e4c <HAL_RCC_ClockConfig+0x1bc>)
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	00db      	lsls	r3, r3, #3
 8004e10:	490e      	ldr	r1, [pc, #56]	; (8004e4c <HAL_RCC_ClockConfig+0x1bc>)
 8004e12:	4313      	orrs	r3, r2
 8004e14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e16:	f000 f821 	bl	8004e5c <HAL_RCC_GetSysClockFreq>
 8004e1a:	4601      	mov	r1, r0
 8004e1c:	4b0b      	ldr	r3, [pc, #44]	; (8004e4c <HAL_RCC_ClockConfig+0x1bc>)
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	091b      	lsrs	r3, r3, #4
 8004e22:	f003 030f 	and.w	r3, r3, #15
 8004e26:	4a0a      	ldr	r2, [pc, #40]	; (8004e50 <HAL_RCC_ClockConfig+0x1c0>)
 8004e28:	5cd3      	ldrb	r3, [r2, r3]
 8004e2a:	fa21 f303 	lsr.w	r3, r1, r3
 8004e2e:	4a09      	ldr	r2, [pc, #36]	; (8004e54 <HAL_RCC_ClockConfig+0x1c4>)
 8004e30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004e32:	4b09      	ldr	r3, [pc, #36]	; (8004e58 <HAL_RCC_ClockConfig+0x1c8>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4618      	mov	r0, r3
 8004e38:	f7fe f882 	bl	8002f40 <HAL_InitTick>

  return HAL_OK;
 8004e3c:	2300      	movs	r3, #0
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3710      	adds	r7, #16
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	40023c00 	.word	0x40023c00
 8004e4c:	40023800 	.word	0x40023800
 8004e50:	0800a9a8 	.word	0x0800a9a8
 8004e54:	20000008 	.word	0x20000008
 8004e58:	2000000c 	.word	0x2000000c

08004e5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e5e:	b085      	sub	sp, #20
 8004e60:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004e62:	2300      	movs	r3, #0
 8004e64:	607b      	str	r3, [r7, #4]
 8004e66:	2300      	movs	r3, #0
 8004e68:	60fb      	str	r3, [r7, #12]
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e72:	4b50      	ldr	r3, [pc, #320]	; (8004fb4 <HAL_RCC_GetSysClockFreq+0x158>)
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	f003 030c 	and.w	r3, r3, #12
 8004e7a:	2b04      	cmp	r3, #4
 8004e7c:	d007      	beq.n	8004e8e <HAL_RCC_GetSysClockFreq+0x32>
 8004e7e:	2b08      	cmp	r3, #8
 8004e80:	d008      	beq.n	8004e94 <HAL_RCC_GetSysClockFreq+0x38>
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	f040 808d 	bne.w	8004fa2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e88:	4b4b      	ldr	r3, [pc, #300]	; (8004fb8 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004e8a:	60bb      	str	r3, [r7, #8]
       break;
 8004e8c:	e08c      	b.n	8004fa8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e8e:	4b4b      	ldr	r3, [pc, #300]	; (8004fbc <HAL_RCC_GetSysClockFreq+0x160>)
 8004e90:	60bb      	str	r3, [r7, #8]
      break;
 8004e92:	e089      	b.n	8004fa8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e94:	4b47      	ldr	r3, [pc, #284]	; (8004fb4 <HAL_RCC_GetSysClockFreq+0x158>)
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e9c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e9e:	4b45      	ldr	r3, [pc, #276]	; (8004fb4 <HAL_RCC_GetSysClockFreq+0x158>)
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d023      	beq.n	8004ef2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004eaa:	4b42      	ldr	r3, [pc, #264]	; (8004fb4 <HAL_RCC_GetSysClockFreq+0x158>)
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	099b      	lsrs	r3, r3, #6
 8004eb0:	f04f 0400 	mov.w	r4, #0
 8004eb4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004eb8:	f04f 0200 	mov.w	r2, #0
 8004ebc:	ea03 0501 	and.w	r5, r3, r1
 8004ec0:	ea04 0602 	and.w	r6, r4, r2
 8004ec4:	4a3d      	ldr	r2, [pc, #244]	; (8004fbc <HAL_RCC_GetSysClockFreq+0x160>)
 8004ec6:	fb02 f106 	mul.w	r1, r2, r6
 8004eca:	2200      	movs	r2, #0
 8004ecc:	fb02 f205 	mul.w	r2, r2, r5
 8004ed0:	440a      	add	r2, r1
 8004ed2:	493a      	ldr	r1, [pc, #232]	; (8004fbc <HAL_RCC_GetSysClockFreq+0x160>)
 8004ed4:	fba5 0101 	umull	r0, r1, r5, r1
 8004ed8:	1853      	adds	r3, r2, r1
 8004eda:	4619      	mov	r1, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f04f 0400 	mov.w	r4, #0
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	4623      	mov	r3, r4
 8004ee6:	f7fb feaf 	bl	8000c48 <__aeabi_uldivmod>
 8004eea:	4603      	mov	r3, r0
 8004eec:	460c      	mov	r4, r1
 8004eee:	60fb      	str	r3, [r7, #12]
 8004ef0:	e049      	b.n	8004f86 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ef2:	4b30      	ldr	r3, [pc, #192]	; (8004fb4 <HAL_RCC_GetSysClockFreq+0x158>)
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	099b      	lsrs	r3, r3, #6
 8004ef8:	f04f 0400 	mov.w	r4, #0
 8004efc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004f00:	f04f 0200 	mov.w	r2, #0
 8004f04:	ea03 0501 	and.w	r5, r3, r1
 8004f08:	ea04 0602 	and.w	r6, r4, r2
 8004f0c:	4629      	mov	r1, r5
 8004f0e:	4632      	mov	r2, r6
 8004f10:	f04f 0300 	mov.w	r3, #0
 8004f14:	f04f 0400 	mov.w	r4, #0
 8004f18:	0154      	lsls	r4, r2, #5
 8004f1a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004f1e:	014b      	lsls	r3, r1, #5
 8004f20:	4619      	mov	r1, r3
 8004f22:	4622      	mov	r2, r4
 8004f24:	1b49      	subs	r1, r1, r5
 8004f26:	eb62 0206 	sbc.w	r2, r2, r6
 8004f2a:	f04f 0300 	mov.w	r3, #0
 8004f2e:	f04f 0400 	mov.w	r4, #0
 8004f32:	0194      	lsls	r4, r2, #6
 8004f34:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004f38:	018b      	lsls	r3, r1, #6
 8004f3a:	1a5b      	subs	r3, r3, r1
 8004f3c:	eb64 0402 	sbc.w	r4, r4, r2
 8004f40:	f04f 0100 	mov.w	r1, #0
 8004f44:	f04f 0200 	mov.w	r2, #0
 8004f48:	00e2      	lsls	r2, r4, #3
 8004f4a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004f4e:	00d9      	lsls	r1, r3, #3
 8004f50:	460b      	mov	r3, r1
 8004f52:	4614      	mov	r4, r2
 8004f54:	195b      	adds	r3, r3, r5
 8004f56:	eb44 0406 	adc.w	r4, r4, r6
 8004f5a:	f04f 0100 	mov.w	r1, #0
 8004f5e:	f04f 0200 	mov.w	r2, #0
 8004f62:	02a2      	lsls	r2, r4, #10
 8004f64:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004f68:	0299      	lsls	r1, r3, #10
 8004f6a:	460b      	mov	r3, r1
 8004f6c:	4614      	mov	r4, r2
 8004f6e:	4618      	mov	r0, r3
 8004f70:	4621      	mov	r1, r4
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f04f 0400 	mov.w	r4, #0
 8004f78:	461a      	mov	r2, r3
 8004f7a:	4623      	mov	r3, r4
 8004f7c:	f7fb fe64 	bl	8000c48 <__aeabi_uldivmod>
 8004f80:	4603      	mov	r3, r0
 8004f82:	460c      	mov	r4, r1
 8004f84:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004f86:	4b0b      	ldr	r3, [pc, #44]	; (8004fb4 <HAL_RCC_GetSysClockFreq+0x158>)
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	0c1b      	lsrs	r3, r3, #16
 8004f8c:	f003 0303 	and.w	r3, r3, #3
 8004f90:	3301      	adds	r3, #1
 8004f92:	005b      	lsls	r3, r3, #1
 8004f94:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004f96:	68fa      	ldr	r2, [r7, #12]
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f9e:	60bb      	str	r3, [r7, #8]
      break;
 8004fa0:	e002      	b.n	8004fa8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004fa2:	4b05      	ldr	r3, [pc, #20]	; (8004fb8 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004fa4:	60bb      	str	r3, [r7, #8]
      break;
 8004fa6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fa8:	68bb      	ldr	r3, [r7, #8]
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3714      	adds	r7, #20
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	40023800 	.word	0x40023800
 8004fb8:	00f42400 	.word	0x00f42400
 8004fbc:	017d7840 	.word	0x017d7840

08004fc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fc4:	4b03      	ldr	r3, [pc, #12]	; (8004fd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop
 8004fd4:	20000008 	.word	0x20000008

08004fd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004fdc:	f7ff fff0 	bl	8004fc0 <HAL_RCC_GetHCLKFreq>
 8004fe0:	4601      	mov	r1, r0
 8004fe2:	4b05      	ldr	r3, [pc, #20]	; (8004ff8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	0a9b      	lsrs	r3, r3, #10
 8004fe8:	f003 0307 	and.w	r3, r3, #7
 8004fec:	4a03      	ldr	r2, [pc, #12]	; (8004ffc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fee:	5cd3      	ldrb	r3, [r2, r3]
 8004ff0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	bd80      	pop	{r7, pc}
 8004ff8:	40023800 	.word	0x40023800
 8004ffc:	0800a9b8 	.word	0x0800a9b8

08005000 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005004:	f7ff ffdc 	bl	8004fc0 <HAL_RCC_GetHCLKFreq>
 8005008:	4601      	mov	r1, r0
 800500a:	4b05      	ldr	r3, [pc, #20]	; (8005020 <HAL_RCC_GetPCLK2Freq+0x20>)
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	0b5b      	lsrs	r3, r3, #13
 8005010:	f003 0307 	and.w	r3, r3, #7
 8005014:	4a03      	ldr	r2, [pc, #12]	; (8005024 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005016:	5cd3      	ldrb	r3, [r2, r3]
 8005018:	fa21 f303 	lsr.w	r3, r1, r3
}
 800501c:	4618      	mov	r0, r3
 800501e:	bd80      	pop	{r7, pc}
 8005020:	40023800 	.word	0x40023800
 8005024:	0800a9b8 	.word	0x0800a9b8

08005028 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d101      	bne.n	800503a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e056      	b.n	80050e8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005046:	b2db      	uxtb	r3, r3
 8005048:	2b00      	cmp	r3, #0
 800504a:	d106      	bne.n	800505a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f7fd f9af 	bl	80023b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2202      	movs	r2, #2
 800505e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005070:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	685a      	ldr	r2, [r3, #4]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	431a      	orrs	r2, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	431a      	orrs	r2, r3
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	691b      	ldr	r3, [r3, #16]
 8005086:	431a      	orrs	r2, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	695b      	ldr	r3, [r3, #20]
 800508c:	431a      	orrs	r2, r3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	699b      	ldr	r3, [r3, #24]
 8005092:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005096:	431a      	orrs	r2, r3
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	69db      	ldr	r3, [r3, #28]
 800509c:	431a      	orrs	r2, r3
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6a1b      	ldr	r3, [r3, #32]
 80050a2:	ea42 0103 	orr.w	r1, r2, r3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	430a      	orrs	r2, r1
 80050b0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	699b      	ldr	r3, [r3, #24]
 80050b6:	0c1b      	lsrs	r3, r3, #16
 80050b8:	f003 0104 	and.w	r1, r3, #4
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	430a      	orrs	r2, r1
 80050c6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	69da      	ldr	r2, [r3, #28]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050d6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2201      	movs	r2, #1
 80050e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80050e6:	2300      	movs	r3, #0
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3708      	adds	r7, #8
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b08c      	sub	sp, #48	; 0x30
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	60b9      	str	r1, [r7, #8]
 80050fa:	607a      	str	r2, [r7, #4]
 80050fc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80050fe:	2301      	movs	r3, #1
 8005100:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005102:	2300      	movs	r3, #0
 8005104:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800510e:	2b01      	cmp	r3, #1
 8005110:	d101      	bne.n	8005116 <HAL_SPI_TransmitReceive+0x26>
 8005112:	2302      	movs	r3, #2
 8005114:	e18a      	b.n	800542c <HAL_SPI_TransmitReceive+0x33c>
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2201      	movs	r2, #1
 800511a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800511e:	f7fd ff53 	bl	8002fc8 <HAL_GetTick>
 8005122:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800512a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005134:	887b      	ldrh	r3, [r7, #2]
 8005136:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005138:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800513c:	2b01      	cmp	r3, #1
 800513e:	d00f      	beq.n	8005160 <HAL_SPI_TransmitReceive+0x70>
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005146:	d107      	bne.n	8005158 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d103      	bne.n	8005158 <HAL_SPI_TransmitReceive+0x68>
 8005150:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005154:	2b04      	cmp	r3, #4
 8005156:	d003      	beq.n	8005160 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005158:	2302      	movs	r3, #2
 800515a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800515e:	e15b      	b.n	8005418 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d005      	beq.n	8005172 <HAL_SPI_TransmitReceive+0x82>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d002      	beq.n	8005172 <HAL_SPI_TransmitReceive+0x82>
 800516c:	887b      	ldrh	r3, [r7, #2]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d103      	bne.n	800517a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005178:	e14e      	b.n	8005418 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005180:	b2db      	uxtb	r3, r3
 8005182:	2b04      	cmp	r3, #4
 8005184:	d003      	beq.n	800518e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2205      	movs	r2, #5
 800518a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2200      	movs	r2, #0
 8005192:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	887a      	ldrh	r2, [r7, #2]
 800519e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	887a      	ldrh	r2, [r7, #2]
 80051a4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	68ba      	ldr	r2, [r7, #8]
 80051aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	887a      	ldrh	r2, [r7, #2]
 80051b0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	887a      	ldrh	r2, [r7, #2]
 80051b6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2200      	movs	r2, #0
 80051bc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2200      	movs	r2, #0
 80051c2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ce:	2b40      	cmp	r3, #64	; 0x40
 80051d0:	d007      	beq.n	80051e2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051e0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051ea:	d178      	bne.n	80052de <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d002      	beq.n	80051fa <HAL_SPI_TransmitReceive+0x10a>
 80051f4:	8b7b      	ldrh	r3, [r7, #26]
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d166      	bne.n	80052c8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051fe:	881a      	ldrh	r2, [r3, #0]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800520a:	1c9a      	adds	r2, r3, #2
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005214:	b29b      	uxth	r3, r3
 8005216:	3b01      	subs	r3, #1
 8005218:	b29a      	uxth	r2, r3
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800521e:	e053      	b.n	80052c8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	f003 0302 	and.w	r3, r3, #2
 800522a:	2b02      	cmp	r3, #2
 800522c:	d11b      	bne.n	8005266 <HAL_SPI_TransmitReceive+0x176>
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005232:	b29b      	uxth	r3, r3
 8005234:	2b00      	cmp	r3, #0
 8005236:	d016      	beq.n	8005266 <HAL_SPI_TransmitReceive+0x176>
 8005238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800523a:	2b01      	cmp	r3, #1
 800523c:	d113      	bne.n	8005266 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005242:	881a      	ldrh	r2, [r3, #0]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800524e:	1c9a      	adds	r2, r3, #2
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005258:	b29b      	uxth	r3, r3
 800525a:	3b01      	subs	r3, #1
 800525c:	b29a      	uxth	r2, r3
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005262:	2300      	movs	r3, #0
 8005264:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	f003 0301 	and.w	r3, r3, #1
 8005270:	2b01      	cmp	r3, #1
 8005272:	d119      	bne.n	80052a8 <HAL_SPI_TransmitReceive+0x1b8>
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005278:	b29b      	uxth	r3, r3
 800527a:	2b00      	cmp	r3, #0
 800527c:	d014      	beq.n	80052a8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	68da      	ldr	r2, [r3, #12]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005288:	b292      	uxth	r2, r2
 800528a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005290:	1c9a      	adds	r2, r3, #2
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800529a:	b29b      	uxth	r3, r3
 800529c:	3b01      	subs	r3, #1
 800529e:	b29a      	uxth	r2, r3
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80052a4:	2301      	movs	r3, #1
 80052a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80052a8:	f7fd fe8e 	bl	8002fc8 <HAL_GetTick>
 80052ac:	4602      	mov	r2, r0
 80052ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d807      	bhi.n	80052c8 <HAL_SPI_TransmitReceive+0x1d8>
 80052b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052be:	d003      	beq.n	80052c8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80052c0:	2303      	movs	r3, #3
 80052c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80052c6:	e0a7      	b.n	8005418 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d1a6      	bne.n	8005220 <HAL_SPI_TransmitReceive+0x130>
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d1a1      	bne.n	8005220 <HAL_SPI_TransmitReceive+0x130>
 80052dc:	e07c      	b.n	80053d8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d002      	beq.n	80052ec <HAL_SPI_TransmitReceive+0x1fc>
 80052e6:	8b7b      	ldrh	r3, [r7, #26]
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d16b      	bne.n	80053c4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	330c      	adds	r3, #12
 80052f6:	7812      	ldrb	r2, [r2, #0]
 80052f8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052fe:	1c5a      	adds	r2, r3, #1
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005308:	b29b      	uxth	r3, r3
 800530a:	3b01      	subs	r3, #1
 800530c:	b29a      	uxth	r2, r3
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005312:	e057      	b.n	80053c4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	f003 0302 	and.w	r3, r3, #2
 800531e:	2b02      	cmp	r3, #2
 8005320:	d11c      	bne.n	800535c <HAL_SPI_TransmitReceive+0x26c>
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005326:	b29b      	uxth	r3, r3
 8005328:	2b00      	cmp	r3, #0
 800532a:	d017      	beq.n	800535c <HAL_SPI_TransmitReceive+0x26c>
 800532c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800532e:	2b01      	cmp	r3, #1
 8005330:	d114      	bne.n	800535c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	330c      	adds	r3, #12
 800533c:	7812      	ldrb	r2, [r2, #0]
 800533e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005344:	1c5a      	adds	r2, r3, #1
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800534e:	b29b      	uxth	r3, r3
 8005350:	3b01      	subs	r3, #1
 8005352:	b29a      	uxth	r2, r3
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005358:	2300      	movs	r3, #0
 800535a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	f003 0301 	and.w	r3, r3, #1
 8005366:	2b01      	cmp	r3, #1
 8005368:	d119      	bne.n	800539e <HAL_SPI_TransmitReceive+0x2ae>
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800536e:	b29b      	uxth	r3, r3
 8005370:	2b00      	cmp	r3, #0
 8005372:	d014      	beq.n	800539e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	68da      	ldr	r2, [r3, #12]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800537e:	b2d2      	uxtb	r2, r2
 8005380:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005386:	1c5a      	adds	r2, r3, #1
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005390:	b29b      	uxth	r3, r3
 8005392:	3b01      	subs	r3, #1
 8005394:	b29a      	uxth	r2, r3
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800539a:	2301      	movs	r3, #1
 800539c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800539e:	f7fd fe13 	bl	8002fc8 <HAL_GetTick>
 80053a2:	4602      	mov	r2, r0
 80053a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a6:	1ad3      	subs	r3, r2, r3
 80053a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d803      	bhi.n	80053b6 <HAL_SPI_TransmitReceive+0x2c6>
 80053ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053b4:	d102      	bne.n	80053bc <HAL_SPI_TransmitReceive+0x2cc>
 80053b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d103      	bne.n	80053c4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80053bc:	2303      	movs	r3, #3
 80053be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80053c2:	e029      	b.n	8005418 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d1a2      	bne.n	8005314 <HAL_SPI_TransmitReceive+0x224>
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d19d      	bne.n	8005314 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80053d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80053dc:	68f8      	ldr	r0, [r7, #12]
 80053de:	f000 f893 	bl	8005508 <SPI_EndRxTxTransaction>
 80053e2:	4603      	mov	r3, r0
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d006      	beq.n	80053f6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2220      	movs	r2, #32
 80053f2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80053f4:	e010      	b.n	8005418 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d10b      	bne.n	8005416 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80053fe:	2300      	movs	r3, #0
 8005400:	617b      	str	r3, [r7, #20]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	617b      	str	r3, [r7, #20]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	617b      	str	r3, [r7, #20]
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	e000      	b.n	8005418 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005416:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2200      	movs	r2, #0
 8005424:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005428:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800542c:	4618      	mov	r0, r3
 800542e:	3730      	adds	r7, #48	; 0x30
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	603b      	str	r3, [r7, #0]
 8005440:	4613      	mov	r3, r2
 8005442:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005444:	e04c      	b.n	80054e0 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800544c:	d048      	beq.n	80054e0 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800544e:	f7fd fdbb 	bl	8002fc8 <HAL_GetTick>
 8005452:	4602      	mov	r2, r0
 8005454:	69bb      	ldr	r3, [r7, #24]
 8005456:	1ad3      	subs	r3, r2, r3
 8005458:	683a      	ldr	r2, [r7, #0]
 800545a:	429a      	cmp	r2, r3
 800545c:	d902      	bls.n	8005464 <SPI_WaitFlagStateUntilTimeout+0x30>
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d13d      	bne.n	80054e0 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	685a      	ldr	r2, [r3, #4]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005472:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800547c:	d111      	bne.n	80054a2 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005486:	d004      	beq.n	8005492 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005490:	d107      	bne.n	80054a2 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054a0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054aa:	d10f      	bne.n	80054cc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054ba:	601a      	str	r2, [r3, #0]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054ca:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2200      	movs	r2, #0
 80054d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80054dc:	2303      	movs	r3, #3
 80054de:	e00f      	b.n	8005500 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	689a      	ldr	r2, [r3, #8]
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	4013      	ands	r3, r2
 80054ea:	68ba      	ldr	r2, [r7, #8]
 80054ec:	429a      	cmp	r2, r3
 80054ee:	bf0c      	ite	eq
 80054f0:	2301      	moveq	r3, #1
 80054f2:	2300      	movne	r3, #0
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	461a      	mov	r2, r3
 80054f8:	79fb      	ldrb	r3, [r7, #7]
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d1a3      	bne.n	8005446 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80054fe:	2300      	movs	r3, #0
}
 8005500:	4618      	mov	r0, r3
 8005502:	3710      	adds	r7, #16
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b088      	sub	sp, #32
 800550c:	af02      	add	r7, sp, #8
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	60b9      	str	r1, [r7, #8]
 8005512:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005514:	4b1b      	ldr	r3, [pc, #108]	; (8005584 <SPI_EndRxTxTransaction+0x7c>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a1b      	ldr	r2, [pc, #108]	; (8005588 <SPI_EndRxTxTransaction+0x80>)
 800551a:	fba2 2303 	umull	r2, r3, r2, r3
 800551e:	0d5b      	lsrs	r3, r3, #21
 8005520:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005524:	fb02 f303 	mul.w	r3, r2, r3
 8005528:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005532:	d112      	bne.n	800555a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	9300      	str	r3, [sp, #0]
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	2200      	movs	r2, #0
 800553c:	2180      	movs	r1, #128	; 0x80
 800553e:	68f8      	ldr	r0, [r7, #12]
 8005540:	f7ff ff78 	bl	8005434 <SPI_WaitFlagStateUntilTimeout>
 8005544:	4603      	mov	r3, r0
 8005546:	2b00      	cmp	r3, #0
 8005548:	d016      	beq.n	8005578 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800554e:	f043 0220 	orr.w	r2, r3, #32
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005556:	2303      	movs	r3, #3
 8005558:	e00f      	b.n	800557a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d00a      	beq.n	8005576 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	3b01      	subs	r3, #1
 8005564:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005570:	2b80      	cmp	r3, #128	; 0x80
 8005572:	d0f2      	beq.n	800555a <SPI_EndRxTxTransaction+0x52>
 8005574:	e000      	b.n	8005578 <SPI_EndRxTxTransaction+0x70>
        break;
 8005576:	bf00      	nop
  }

  return HAL_OK;
 8005578:	2300      	movs	r3, #0
}
 800557a:	4618      	mov	r0, r3
 800557c:	3718      	adds	r7, #24
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
 8005582:	bf00      	nop
 8005584:	20000008 	.word	0x20000008
 8005588:	165e9f81 	.word	0x165e9f81

0800558c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b082      	sub	sp, #8
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d101      	bne.n	800559e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e01d      	b.n	80055da <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d106      	bne.n	80055b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f7fd fa24 	bl	8002a00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2202      	movs	r2, #2
 80055bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	3304      	adds	r3, #4
 80055c8:	4619      	mov	r1, r3
 80055ca:	4610      	mov	r0, r2
 80055cc:	f000 fb44 	bl	8005c58 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055d8:	2300      	movs	r3, #0
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3708      	adds	r7, #8
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}

080055e2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80055e2:	b480      	push	{r7}
 80055e4:	b085      	sub	sp, #20
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	68da      	ldr	r2, [r3, #12]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f042 0201 	orr.w	r2, r2, #1
 80055f8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	f003 0307 	and.w	r3, r3, #7
 8005604:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2b06      	cmp	r3, #6
 800560a:	d007      	beq.n	800561c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f042 0201 	orr.w	r2, r2, #1
 800561a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800561c:	2300      	movs	r3, #0
}
 800561e:	4618      	mov	r0, r3
 8005620:	3714      	adds	r7, #20
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr

0800562a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800562a:	b580      	push	{r7, lr}
 800562c:	b082      	sub	sp, #8
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d101      	bne.n	800563c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	e01d      	b.n	8005678 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005642:	b2db      	uxtb	r3, r3
 8005644:	2b00      	cmp	r3, #0
 8005646:	d106      	bne.n	8005656 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f7fd fa11 	bl	8002a78 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2202      	movs	r2, #2
 800565a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	3304      	adds	r3, #4
 8005666:	4619      	mov	r1, r3
 8005668:	4610      	mov	r0, r2
 800566a:	f000 faf5 	bl	8005c58 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2201      	movs	r2, #1
 8005672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005676:	2300      	movs	r3, #0
}
 8005678:	4618      	mov	r0, r3
 800567a:	3708      	adds	r7, #8
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}

08005680 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	2201      	movs	r2, #1
 8005690:	6839      	ldr	r1, [r7, #0]
 8005692:	4618      	mov	r0, r3
 8005694:	f000 fdca 	bl	800622c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a15      	ldr	r2, [pc, #84]	; (80056f4 <HAL_TIM_PWM_Start+0x74>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d004      	beq.n	80056ac <HAL_TIM_PWM_Start+0x2c>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a14      	ldr	r2, [pc, #80]	; (80056f8 <HAL_TIM_PWM_Start+0x78>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d101      	bne.n	80056b0 <HAL_TIM_PWM_Start+0x30>
 80056ac:	2301      	movs	r3, #1
 80056ae:	e000      	b.n	80056b2 <HAL_TIM_PWM_Start+0x32>
 80056b0:	2300      	movs	r3, #0
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d007      	beq.n	80056c6 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80056c4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	f003 0307 	and.w	r3, r3, #7
 80056d0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2b06      	cmp	r3, #6
 80056d6:	d007      	beq.n	80056e8 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f042 0201 	orr.w	r2, r2, #1
 80056e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80056e8:	2300      	movs	r3, #0
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3710      	adds	r7, #16
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	bf00      	nop
 80056f4:	40010000 	.word	0x40010000
 80056f8:	40010400 	.word	0x40010400

080056fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b082      	sub	sp, #8
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	f003 0302 	and.w	r3, r3, #2
 800570e:	2b02      	cmp	r3, #2
 8005710:	d122      	bne.n	8005758 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	f003 0302 	and.w	r3, r3, #2
 800571c:	2b02      	cmp	r3, #2
 800571e:	d11b      	bne.n	8005758 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f06f 0202 	mvn.w	r2, #2
 8005728:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2201      	movs	r2, #1
 800572e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	699b      	ldr	r3, [r3, #24]
 8005736:	f003 0303 	and.w	r3, r3, #3
 800573a:	2b00      	cmp	r3, #0
 800573c:	d003      	beq.n	8005746 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f000 fa6b 	bl	8005c1a <HAL_TIM_IC_CaptureCallback>
 8005744:	e005      	b.n	8005752 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f000 fa5d 	bl	8005c06 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f000 fa6e 	bl	8005c2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	f003 0304 	and.w	r3, r3, #4
 8005762:	2b04      	cmp	r3, #4
 8005764:	d122      	bne.n	80057ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	f003 0304 	and.w	r3, r3, #4
 8005770:	2b04      	cmp	r3, #4
 8005772:	d11b      	bne.n	80057ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f06f 0204 	mvn.w	r2, #4
 800577c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2202      	movs	r2, #2
 8005782:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	699b      	ldr	r3, [r3, #24]
 800578a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800578e:	2b00      	cmp	r3, #0
 8005790:	d003      	beq.n	800579a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f000 fa41 	bl	8005c1a <HAL_TIM_IC_CaptureCallback>
 8005798:	e005      	b.n	80057a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f000 fa33 	bl	8005c06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f000 fa44 	bl	8005c2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2200      	movs	r2, #0
 80057aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	f003 0308 	and.w	r3, r3, #8
 80057b6:	2b08      	cmp	r3, #8
 80057b8:	d122      	bne.n	8005800 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	f003 0308 	and.w	r3, r3, #8
 80057c4:	2b08      	cmp	r3, #8
 80057c6:	d11b      	bne.n	8005800 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f06f 0208 	mvn.w	r2, #8
 80057d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2204      	movs	r2, #4
 80057d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	69db      	ldr	r3, [r3, #28]
 80057de:	f003 0303 	and.w	r3, r3, #3
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d003      	beq.n	80057ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f000 fa17 	bl	8005c1a <HAL_TIM_IC_CaptureCallback>
 80057ec:	e005      	b.n	80057fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 fa09 	bl	8005c06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f000 fa1a 	bl	8005c2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2200      	movs	r2, #0
 80057fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	691b      	ldr	r3, [r3, #16]
 8005806:	f003 0310 	and.w	r3, r3, #16
 800580a:	2b10      	cmp	r3, #16
 800580c:	d122      	bne.n	8005854 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	f003 0310 	and.w	r3, r3, #16
 8005818:	2b10      	cmp	r3, #16
 800581a:	d11b      	bne.n	8005854 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f06f 0210 	mvn.w	r2, #16
 8005824:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2208      	movs	r2, #8
 800582a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	69db      	ldr	r3, [r3, #28]
 8005832:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005836:	2b00      	cmp	r3, #0
 8005838:	d003      	beq.n	8005842 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f000 f9ed 	bl	8005c1a <HAL_TIM_IC_CaptureCallback>
 8005840:	e005      	b.n	800584e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f000 f9df 	bl	8005c06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f000 f9f0 	bl	8005c2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	f003 0301 	and.w	r3, r3, #1
 800585e:	2b01      	cmp	r3, #1
 8005860:	d10e      	bne.n	8005880 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	f003 0301 	and.w	r3, r3, #1
 800586c:	2b01      	cmp	r3, #1
 800586e:	d107      	bne.n	8005880 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f06f 0201 	mvn.w	r2, #1
 8005878:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f7fc fb78 	bl	8001f70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	691b      	ldr	r3, [r3, #16]
 8005886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800588a:	2b80      	cmp	r3, #128	; 0x80
 800588c:	d10e      	bne.n	80058ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005898:	2b80      	cmp	r3, #128	; 0x80
 800589a:	d107      	bne.n	80058ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80058a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 fdbe 	bl	8006428 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	691b      	ldr	r3, [r3, #16]
 80058b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058b6:	2b40      	cmp	r3, #64	; 0x40
 80058b8:	d10e      	bne.n	80058d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058c4:	2b40      	cmp	r3, #64	; 0x40
 80058c6:	d107      	bne.n	80058d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80058d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 f9b5 	bl	8005c42 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	f003 0320 	and.w	r3, r3, #32
 80058e2:	2b20      	cmp	r3, #32
 80058e4:	d10e      	bne.n	8005904 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	f003 0320 	and.w	r3, r3, #32
 80058f0:	2b20      	cmp	r3, #32
 80058f2:	d107      	bne.n	8005904 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f06f 0220 	mvn.w	r2, #32
 80058fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 fd88 	bl	8006414 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005904:	bf00      	nop
 8005906:	3708      	adds	r7, #8
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}

0800590c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b084      	sub	sp, #16
 8005910:	af00      	add	r7, sp, #0
 8005912:	60f8      	str	r0, [r7, #12]
 8005914:	60b9      	str	r1, [r7, #8]
 8005916:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800591e:	2b01      	cmp	r3, #1
 8005920:	d101      	bne.n	8005926 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005922:	2302      	movs	r3, #2
 8005924:	e0b4      	b.n	8005a90 <HAL_TIM_PWM_ConfigChannel+0x184>
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2201      	movs	r2, #1
 800592a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2202      	movs	r2, #2
 8005932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2b0c      	cmp	r3, #12
 800593a:	f200 809f 	bhi.w	8005a7c <HAL_TIM_PWM_ConfigChannel+0x170>
 800593e:	a201      	add	r2, pc, #4	; (adr r2, 8005944 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005944:	08005979 	.word	0x08005979
 8005948:	08005a7d 	.word	0x08005a7d
 800594c:	08005a7d 	.word	0x08005a7d
 8005950:	08005a7d 	.word	0x08005a7d
 8005954:	080059b9 	.word	0x080059b9
 8005958:	08005a7d 	.word	0x08005a7d
 800595c:	08005a7d 	.word	0x08005a7d
 8005960:	08005a7d 	.word	0x08005a7d
 8005964:	080059fb 	.word	0x080059fb
 8005968:	08005a7d 	.word	0x08005a7d
 800596c:	08005a7d 	.word	0x08005a7d
 8005970:	08005a7d 	.word	0x08005a7d
 8005974:	08005a3b 	.word	0x08005a3b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	68b9      	ldr	r1, [r7, #8]
 800597e:	4618      	mov	r0, r3
 8005980:	f000 fa0a 	bl	8005d98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	699a      	ldr	r2, [r3, #24]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f042 0208 	orr.w	r2, r2, #8
 8005992:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	699a      	ldr	r2, [r3, #24]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f022 0204 	bic.w	r2, r2, #4
 80059a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	6999      	ldr	r1, [r3, #24]
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	691a      	ldr	r2, [r3, #16]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	430a      	orrs	r2, r1
 80059b4:	619a      	str	r2, [r3, #24]
      break;
 80059b6:	e062      	b.n	8005a7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	68b9      	ldr	r1, [r7, #8]
 80059be:	4618      	mov	r0, r3
 80059c0:	f000 fa5a 	bl	8005e78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	699a      	ldr	r2, [r3, #24]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	699a      	ldr	r2, [r3, #24]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	6999      	ldr	r1, [r3, #24]
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	021a      	lsls	r2, r3, #8
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	430a      	orrs	r2, r1
 80059f6:	619a      	str	r2, [r3, #24]
      break;
 80059f8:	e041      	b.n	8005a7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	68b9      	ldr	r1, [r7, #8]
 8005a00:	4618      	mov	r0, r3
 8005a02:	f000 faaf 	bl	8005f64 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	69da      	ldr	r2, [r3, #28]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f042 0208 	orr.w	r2, r2, #8
 8005a14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	69da      	ldr	r2, [r3, #28]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f022 0204 	bic.w	r2, r2, #4
 8005a24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	69d9      	ldr	r1, [r3, #28]
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	691a      	ldr	r2, [r3, #16]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	430a      	orrs	r2, r1
 8005a36:	61da      	str	r2, [r3, #28]
      break;
 8005a38:	e021      	b.n	8005a7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	68b9      	ldr	r1, [r7, #8]
 8005a40:	4618      	mov	r0, r3
 8005a42:	f000 fb03 	bl	800604c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	69da      	ldr	r2, [r3, #28]
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	69da      	ldr	r2, [r3, #28]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	69d9      	ldr	r1, [r3, #28]
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	691b      	ldr	r3, [r3, #16]
 8005a70:	021a      	lsls	r2, r3, #8
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	430a      	orrs	r2, r1
 8005a78:	61da      	str	r2, [r3, #28]
      break;
 8005a7a:	e000      	b.n	8005a7e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005a7c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2201      	movs	r2, #1
 8005a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a8e:	2300      	movs	r3, #0
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3710      	adds	r7, #16
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}

08005a98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b084      	sub	sp, #16
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d101      	bne.n	8005ab0 <HAL_TIM_ConfigClockSource+0x18>
 8005aac:	2302      	movs	r3, #2
 8005aae:	e0a6      	b.n	8005bfe <HAL_TIM_ConfigClockSource+0x166>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2202      	movs	r2, #2
 8005abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005ace:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ad6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	68fa      	ldr	r2, [r7, #12]
 8005ade:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	2b40      	cmp	r3, #64	; 0x40
 8005ae6:	d067      	beq.n	8005bb8 <HAL_TIM_ConfigClockSource+0x120>
 8005ae8:	2b40      	cmp	r3, #64	; 0x40
 8005aea:	d80b      	bhi.n	8005b04 <HAL_TIM_ConfigClockSource+0x6c>
 8005aec:	2b10      	cmp	r3, #16
 8005aee:	d073      	beq.n	8005bd8 <HAL_TIM_ConfigClockSource+0x140>
 8005af0:	2b10      	cmp	r3, #16
 8005af2:	d802      	bhi.n	8005afa <HAL_TIM_ConfigClockSource+0x62>
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d06f      	beq.n	8005bd8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005af8:	e078      	b.n	8005bec <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005afa:	2b20      	cmp	r3, #32
 8005afc:	d06c      	beq.n	8005bd8 <HAL_TIM_ConfigClockSource+0x140>
 8005afe:	2b30      	cmp	r3, #48	; 0x30
 8005b00:	d06a      	beq.n	8005bd8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005b02:	e073      	b.n	8005bec <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005b04:	2b70      	cmp	r3, #112	; 0x70
 8005b06:	d00d      	beq.n	8005b24 <HAL_TIM_ConfigClockSource+0x8c>
 8005b08:	2b70      	cmp	r3, #112	; 0x70
 8005b0a:	d804      	bhi.n	8005b16 <HAL_TIM_ConfigClockSource+0x7e>
 8005b0c:	2b50      	cmp	r3, #80	; 0x50
 8005b0e:	d033      	beq.n	8005b78 <HAL_TIM_ConfigClockSource+0xe0>
 8005b10:	2b60      	cmp	r3, #96	; 0x60
 8005b12:	d041      	beq.n	8005b98 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005b14:	e06a      	b.n	8005bec <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005b16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b1a:	d066      	beq.n	8005bea <HAL_TIM_ConfigClockSource+0x152>
 8005b1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b20:	d017      	beq.n	8005b52 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005b22:	e063      	b.n	8005bec <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6818      	ldr	r0, [r3, #0]
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	6899      	ldr	r1, [r3, #8]
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	685a      	ldr	r2, [r3, #4]
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	f000 fb5a 	bl	80061ec <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b46:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	68fa      	ldr	r2, [r7, #12]
 8005b4e:	609a      	str	r2, [r3, #8]
      break;
 8005b50:	e04c      	b.n	8005bec <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6818      	ldr	r0, [r3, #0]
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	6899      	ldr	r1, [r3, #8]
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	685a      	ldr	r2, [r3, #4]
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	f000 fb43 	bl	80061ec <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	689a      	ldr	r2, [r3, #8]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b74:	609a      	str	r2, [r3, #8]
      break;
 8005b76:	e039      	b.n	8005bec <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6818      	ldr	r0, [r3, #0]
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	6859      	ldr	r1, [r3, #4]
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	461a      	mov	r2, r3
 8005b86:	f000 fab7 	bl	80060f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	2150      	movs	r1, #80	; 0x50
 8005b90:	4618      	mov	r0, r3
 8005b92:	f000 fb10 	bl	80061b6 <TIM_ITRx_SetConfig>
      break;
 8005b96:	e029      	b.n	8005bec <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6818      	ldr	r0, [r3, #0]
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	6859      	ldr	r1, [r3, #4]
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	f000 fad6 	bl	8006156 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	2160      	movs	r1, #96	; 0x60
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f000 fb00 	bl	80061b6 <TIM_ITRx_SetConfig>
      break;
 8005bb6:	e019      	b.n	8005bec <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6818      	ldr	r0, [r3, #0]
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	6859      	ldr	r1, [r3, #4]
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	f000 fa97 	bl	80060f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	2140      	movs	r1, #64	; 0x40
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f000 faf0 	bl	80061b6 <TIM_ITRx_SetConfig>
      break;
 8005bd6:	e009      	b.n	8005bec <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4619      	mov	r1, r3
 8005be2:	4610      	mov	r0, r2
 8005be4:	f000 fae7 	bl	80061b6 <TIM_ITRx_SetConfig>
      break;
 8005be8:	e000      	b.n	8005bec <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005bea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005bfc:	2300      	movs	r3, #0
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3710      	adds	r7, #16
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}

08005c06 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c06:	b480      	push	{r7}
 8005c08:	b083      	sub	sp, #12
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c0e:	bf00      	nop
 8005c10:	370c      	adds	r7, #12
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr

08005c1a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c1a:	b480      	push	{r7}
 8005c1c:	b083      	sub	sp, #12
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c22:	bf00      	nop
 8005c24:	370c      	adds	r7, #12
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr

08005c2e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c2e:	b480      	push	{r7}
 8005c30:	b083      	sub	sp, #12
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c36:	bf00      	nop
 8005c38:	370c      	adds	r7, #12
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr

08005c42 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c42:	b480      	push	{r7}
 8005c44:	b083      	sub	sp, #12
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c4a:	bf00      	nop
 8005c4c:	370c      	adds	r7, #12
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr
	...

08005c58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b085      	sub	sp, #20
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	4a40      	ldr	r2, [pc, #256]	; (8005d6c <TIM_Base_SetConfig+0x114>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d013      	beq.n	8005c98 <TIM_Base_SetConfig+0x40>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c76:	d00f      	beq.n	8005c98 <TIM_Base_SetConfig+0x40>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	4a3d      	ldr	r2, [pc, #244]	; (8005d70 <TIM_Base_SetConfig+0x118>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d00b      	beq.n	8005c98 <TIM_Base_SetConfig+0x40>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	4a3c      	ldr	r2, [pc, #240]	; (8005d74 <TIM_Base_SetConfig+0x11c>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d007      	beq.n	8005c98 <TIM_Base_SetConfig+0x40>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4a3b      	ldr	r2, [pc, #236]	; (8005d78 <TIM_Base_SetConfig+0x120>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d003      	beq.n	8005c98 <TIM_Base_SetConfig+0x40>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	4a3a      	ldr	r2, [pc, #232]	; (8005d7c <TIM_Base_SetConfig+0x124>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d108      	bne.n	8005caa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	68fa      	ldr	r2, [r7, #12]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4a2f      	ldr	r2, [pc, #188]	; (8005d6c <TIM_Base_SetConfig+0x114>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d02b      	beq.n	8005d0a <TIM_Base_SetConfig+0xb2>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cb8:	d027      	beq.n	8005d0a <TIM_Base_SetConfig+0xb2>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4a2c      	ldr	r2, [pc, #176]	; (8005d70 <TIM_Base_SetConfig+0x118>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d023      	beq.n	8005d0a <TIM_Base_SetConfig+0xb2>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4a2b      	ldr	r2, [pc, #172]	; (8005d74 <TIM_Base_SetConfig+0x11c>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d01f      	beq.n	8005d0a <TIM_Base_SetConfig+0xb2>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a2a      	ldr	r2, [pc, #168]	; (8005d78 <TIM_Base_SetConfig+0x120>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d01b      	beq.n	8005d0a <TIM_Base_SetConfig+0xb2>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4a29      	ldr	r2, [pc, #164]	; (8005d7c <TIM_Base_SetConfig+0x124>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d017      	beq.n	8005d0a <TIM_Base_SetConfig+0xb2>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4a28      	ldr	r2, [pc, #160]	; (8005d80 <TIM_Base_SetConfig+0x128>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d013      	beq.n	8005d0a <TIM_Base_SetConfig+0xb2>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4a27      	ldr	r2, [pc, #156]	; (8005d84 <TIM_Base_SetConfig+0x12c>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d00f      	beq.n	8005d0a <TIM_Base_SetConfig+0xb2>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4a26      	ldr	r2, [pc, #152]	; (8005d88 <TIM_Base_SetConfig+0x130>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d00b      	beq.n	8005d0a <TIM_Base_SetConfig+0xb2>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	4a25      	ldr	r2, [pc, #148]	; (8005d8c <TIM_Base_SetConfig+0x134>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d007      	beq.n	8005d0a <TIM_Base_SetConfig+0xb2>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4a24      	ldr	r2, [pc, #144]	; (8005d90 <TIM_Base_SetConfig+0x138>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d003      	beq.n	8005d0a <TIM_Base_SetConfig+0xb2>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	4a23      	ldr	r2, [pc, #140]	; (8005d94 <TIM_Base_SetConfig+0x13c>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d108      	bne.n	8005d1c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	68fa      	ldr	r2, [r7, #12]
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	695b      	ldr	r3, [r3, #20]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	68fa      	ldr	r2, [r7, #12]
 8005d2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	689a      	ldr	r2, [r3, #8]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	4a0a      	ldr	r2, [pc, #40]	; (8005d6c <TIM_Base_SetConfig+0x114>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d003      	beq.n	8005d50 <TIM_Base_SetConfig+0xf8>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	4a0c      	ldr	r2, [pc, #48]	; (8005d7c <TIM_Base_SetConfig+0x124>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d103      	bne.n	8005d58 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	691a      	ldr	r2, [r3, #16]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	615a      	str	r2, [r3, #20]
}
 8005d5e:	bf00      	nop
 8005d60:	3714      	adds	r7, #20
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr
 8005d6a:	bf00      	nop
 8005d6c:	40010000 	.word	0x40010000
 8005d70:	40000400 	.word	0x40000400
 8005d74:	40000800 	.word	0x40000800
 8005d78:	40000c00 	.word	0x40000c00
 8005d7c:	40010400 	.word	0x40010400
 8005d80:	40014000 	.word	0x40014000
 8005d84:	40014400 	.word	0x40014400
 8005d88:	40014800 	.word	0x40014800
 8005d8c:	40001800 	.word	0x40001800
 8005d90:	40001c00 	.word	0x40001c00
 8005d94:	40002000 	.word	0x40002000

08005d98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b087      	sub	sp, #28
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6a1b      	ldr	r3, [r3, #32]
 8005da6:	f023 0201 	bic.w	r2, r3, #1
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6a1b      	ldr	r3, [r3, #32]
 8005db2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	699b      	ldr	r3, [r3, #24]
 8005dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f023 0303 	bic.w	r3, r3, #3
 8005dce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	68fa      	ldr	r2, [r7, #12]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	f023 0302 	bic.w	r3, r3, #2
 8005de0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	697a      	ldr	r2, [r7, #20]
 8005de8:	4313      	orrs	r3, r2
 8005dea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	4a20      	ldr	r2, [pc, #128]	; (8005e70 <TIM_OC1_SetConfig+0xd8>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d003      	beq.n	8005dfc <TIM_OC1_SetConfig+0x64>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	4a1f      	ldr	r2, [pc, #124]	; (8005e74 <TIM_OC1_SetConfig+0xdc>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d10c      	bne.n	8005e16 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	f023 0308 	bic.w	r3, r3, #8
 8005e02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	697a      	ldr	r2, [r7, #20]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	f023 0304 	bic.w	r3, r3, #4
 8005e14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4a15      	ldr	r2, [pc, #84]	; (8005e70 <TIM_OC1_SetConfig+0xd8>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d003      	beq.n	8005e26 <TIM_OC1_SetConfig+0x8e>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4a14      	ldr	r2, [pc, #80]	; (8005e74 <TIM_OC1_SetConfig+0xdc>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d111      	bne.n	8005e4a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	695b      	ldr	r3, [r3, #20]
 8005e3a:	693a      	ldr	r2, [r7, #16]
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	699b      	ldr	r3, [r3, #24]
 8005e44:	693a      	ldr	r2, [r7, #16]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	693a      	ldr	r2, [r7, #16]
 8005e4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	68fa      	ldr	r2, [r7, #12]
 8005e54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	685a      	ldr	r2, [r3, #4]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	697a      	ldr	r2, [r7, #20]
 8005e62:	621a      	str	r2, [r3, #32]
}
 8005e64:	bf00      	nop
 8005e66:	371c      	adds	r7, #28
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr
 8005e70:	40010000 	.word	0x40010000
 8005e74:	40010400 	.word	0x40010400

08005e78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b087      	sub	sp, #28
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a1b      	ldr	r3, [r3, #32]
 8005e86:	f023 0210 	bic.w	r2, r3, #16
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6a1b      	ldr	r3, [r3, #32]
 8005e92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	699b      	ldr	r3, [r3, #24]
 8005e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ea6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005eae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	021b      	lsls	r3, r3, #8
 8005eb6:	68fa      	ldr	r2, [r7, #12]
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	f023 0320 	bic.w	r3, r3, #32
 8005ec2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	011b      	lsls	r3, r3, #4
 8005eca:	697a      	ldr	r2, [r7, #20]
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	4a22      	ldr	r2, [pc, #136]	; (8005f5c <TIM_OC2_SetConfig+0xe4>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d003      	beq.n	8005ee0 <TIM_OC2_SetConfig+0x68>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	4a21      	ldr	r2, [pc, #132]	; (8005f60 <TIM_OC2_SetConfig+0xe8>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d10d      	bne.n	8005efc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ee6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	68db      	ldr	r3, [r3, #12]
 8005eec:	011b      	lsls	r3, r3, #4
 8005eee:	697a      	ldr	r2, [r7, #20]
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005efa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	4a17      	ldr	r2, [pc, #92]	; (8005f5c <TIM_OC2_SetConfig+0xe4>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d003      	beq.n	8005f0c <TIM_OC2_SetConfig+0x94>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	4a16      	ldr	r2, [pc, #88]	; (8005f60 <TIM_OC2_SetConfig+0xe8>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d113      	bne.n	8005f34 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f12:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f1a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	695b      	ldr	r3, [r3, #20]
 8005f20:	009b      	lsls	r3, r3, #2
 8005f22:	693a      	ldr	r2, [r7, #16]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	699b      	ldr	r3, [r3, #24]
 8005f2c:	009b      	lsls	r3, r3, #2
 8005f2e:	693a      	ldr	r2, [r7, #16]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	693a      	ldr	r2, [r7, #16]
 8005f38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	685a      	ldr	r2, [r3, #4]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	697a      	ldr	r2, [r7, #20]
 8005f4c:	621a      	str	r2, [r3, #32]
}
 8005f4e:	bf00      	nop
 8005f50:	371c      	adds	r7, #28
 8005f52:	46bd      	mov	sp, r7
 8005f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f58:	4770      	bx	lr
 8005f5a:	bf00      	nop
 8005f5c:	40010000 	.word	0x40010000
 8005f60:	40010400 	.word	0x40010400

08005f64 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b087      	sub	sp, #28
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6a1b      	ldr	r3, [r3, #32]
 8005f72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6a1b      	ldr	r3, [r3, #32]
 8005f7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	69db      	ldr	r3, [r3, #28]
 8005f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f023 0303 	bic.w	r3, r3, #3
 8005f9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	68fa      	ldr	r2, [r7, #12]
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005fac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	021b      	lsls	r3, r3, #8
 8005fb4:	697a      	ldr	r2, [r7, #20]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	4a21      	ldr	r2, [pc, #132]	; (8006044 <TIM_OC3_SetConfig+0xe0>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d003      	beq.n	8005fca <TIM_OC3_SetConfig+0x66>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	4a20      	ldr	r2, [pc, #128]	; (8006048 <TIM_OC3_SetConfig+0xe4>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d10d      	bne.n	8005fe6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005fd0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	68db      	ldr	r3, [r3, #12]
 8005fd6:	021b      	lsls	r3, r3, #8
 8005fd8:	697a      	ldr	r2, [r7, #20]
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005fe4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	4a16      	ldr	r2, [pc, #88]	; (8006044 <TIM_OC3_SetConfig+0xe0>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d003      	beq.n	8005ff6 <TIM_OC3_SetConfig+0x92>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	4a15      	ldr	r2, [pc, #84]	; (8006048 <TIM_OC3_SetConfig+0xe4>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d113      	bne.n	800601e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ffc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006004:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	695b      	ldr	r3, [r3, #20]
 800600a:	011b      	lsls	r3, r3, #4
 800600c:	693a      	ldr	r2, [r7, #16]
 800600e:	4313      	orrs	r3, r2
 8006010:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	699b      	ldr	r3, [r3, #24]
 8006016:	011b      	lsls	r3, r3, #4
 8006018:	693a      	ldr	r2, [r7, #16]
 800601a:	4313      	orrs	r3, r2
 800601c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	693a      	ldr	r2, [r7, #16]
 8006022:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	68fa      	ldr	r2, [r7, #12]
 8006028:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	685a      	ldr	r2, [r3, #4]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	697a      	ldr	r2, [r7, #20]
 8006036:	621a      	str	r2, [r3, #32]
}
 8006038:	bf00      	nop
 800603a:	371c      	adds	r7, #28
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr
 8006044:	40010000 	.word	0x40010000
 8006048:	40010400 	.word	0x40010400

0800604c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800604c:	b480      	push	{r7}
 800604e:	b087      	sub	sp, #28
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6a1b      	ldr	r3, [r3, #32]
 800605a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6a1b      	ldr	r3, [r3, #32]
 8006066:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	69db      	ldr	r3, [r3, #28]
 8006072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800607a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006082:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	021b      	lsls	r3, r3, #8
 800608a:	68fa      	ldr	r2, [r7, #12]
 800608c:	4313      	orrs	r3, r2
 800608e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006096:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	031b      	lsls	r3, r3, #12
 800609e:	693a      	ldr	r2, [r7, #16]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	4a12      	ldr	r2, [pc, #72]	; (80060f0 <TIM_OC4_SetConfig+0xa4>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d003      	beq.n	80060b4 <TIM_OC4_SetConfig+0x68>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	4a11      	ldr	r2, [pc, #68]	; (80060f4 <TIM_OC4_SetConfig+0xa8>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d109      	bne.n	80060c8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	695b      	ldr	r3, [r3, #20]
 80060c0:	019b      	lsls	r3, r3, #6
 80060c2:	697a      	ldr	r2, [r7, #20]
 80060c4:	4313      	orrs	r3, r2
 80060c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	697a      	ldr	r2, [r7, #20]
 80060cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	68fa      	ldr	r2, [r7, #12]
 80060d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	685a      	ldr	r2, [r3, #4]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	693a      	ldr	r2, [r7, #16]
 80060e0:	621a      	str	r2, [r3, #32]
}
 80060e2:	bf00      	nop
 80060e4:	371c      	adds	r7, #28
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr
 80060ee:	bf00      	nop
 80060f0:	40010000 	.word	0x40010000
 80060f4:	40010400 	.word	0x40010400

080060f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b087      	sub	sp, #28
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	60b9      	str	r1, [r7, #8]
 8006102:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6a1b      	ldr	r3, [r3, #32]
 8006108:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	6a1b      	ldr	r3, [r3, #32]
 800610e:	f023 0201 	bic.w	r2, r3, #1
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	699b      	ldr	r3, [r3, #24]
 800611a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006122:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	011b      	lsls	r3, r3, #4
 8006128:	693a      	ldr	r2, [r7, #16]
 800612a:	4313      	orrs	r3, r2
 800612c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	f023 030a 	bic.w	r3, r3, #10
 8006134:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006136:	697a      	ldr	r2, [r7, #20]
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	4313      	orrs	r3, r2
 800613c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	693a      	ldr	r2, [r7, #16]
 8006142:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	697a      	ldr	r2, [r7, #20]
 8006148:	621a      	str	r2, [r3, #32]
}
 800614a:	bf00      	nop
 800614c:	371c      	adds	r7, #28
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr

08006156 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006156:	b480      	push	{r7}
 8006158:	b087      	sub	sp, #28
 800615a:	af00      	add	r7, sp, #0
 800615c:	60f8      	str	r0, [r7, #12]
 800615e:	60b9      	str	r1, [r7, #8]
 8006160:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6a1b      	ldr	r3, [r3, #32]
 8006166:	f023 0210 	bic.w	r2, r3, #16
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	699b      	ldr	r3, [r3, #24]
 8006172:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6a1b      	ldr	r3, [r3, #32]
 8006178:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006180:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	031b      	lsls	r3, r3, #12
 8006186:	697a      	ldr	r2, [r7, #20]
 8006188:	4313      	orrs	r3, r2
 800618a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006192:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	011b      	lsls	r3, r3, #4
 8006198:	693a      	ldr	r2, [r7, #16]
 800619a:	4313      	orrs	r3, r2
 800619c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	697a      	ldr	r2, [r7, #20]
 80061a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	693a      	ldr	r2, [r7, #16]
 80061a8:	621a      	str	r2, [r3, #32]
}
 80061aa:	bf00      	nop
 80061ac:	371c      	adds	r7, #28
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr

080061b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061b6:	b480      	push	{r7}
 80061b8:	b085      	sub	sp, #20
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	6078      	str	r0, [r7, #4]
 80061be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061ce:	683a      	ldr	r2, [r7, #0]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	4313      	orrs	r3, r2
 80061d4:	f043 0307 	orr.w	r3, r3, #7
 80061d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	68fa      	ldr	r2, [r7, #12]
 80061de:	609a      	str	r2, [r3, #8]
}
 80061e0:	bf00      	nop
 80061e2:	3714      	adds	r7, #20
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr

080061ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b087      	sub	sp, #28
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	60f8      	str	r0, [r7, #12]
 80061f4:	60b9      	str	r1, [r7, #8]
 80061f6:	607a      	str	r2, [r7, #4]
 80061f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006206:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	021a      	lsls	r2, r3, #8
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	431a      	orrs	r2, r3
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	4313      	orrs	r3, r2
 8006214:	697a      	ldr	r2, [r7, #20]
 8006216:	4313      	orrs	r3, r2
 8006218:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	697a      	ldr	r2, [r7, #20]
 800621e:	609a      	str	r2, [r3, #8]
}
 8006220:	bf00      	nop
 8006222:	371c      	adds	r7, #28
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr

0800622c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800622c:	b480      	push	{r7}
 800622e:	b087      	sub	sp, #28
 8006230:	af00      	add	r7, sp, #0
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	60b9      	str	r1, [r7, #8]
 8006236:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	f003 031f 	and.w	r3, r3, #31
 800623e:	2201      	movs	r2, #1
 8006240:	fa02 f303 	lsl.w	r3, r2, r3
 8006244:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	6a1a      	ldr	r2, [r3, #32]
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	43db      	mvns	r3, r3
 800624e:	401a      	ands	r2, r3
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	6a1a      	ldr	r2, [r3, #32]
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	f003 031f 	and.w	r3, r3, #31
 800625e:	6879      	ldr	r1, [r7, #4]
 8006260:	fa01 f303 	lsl.w	r3, r1, r3
 8006264:	431a      	orrs	r2, r3
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	621a      	str	r2, [r3, #32]
}
 800626a:	bf00      	nop
 800626c:	371c      	adds	r7, #28
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr
	...

08006278 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006278:	b480      	push	{r7}
 800627a:	b085      	sub	sp, #20
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006288:	2b01      	cmp	r3, #1
 800628a:	d101      	bne.n	8006290 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800628c:	2302      	movs	r3, #2
 800628e:	e05a      	b.n	8006346 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2201      	movs	r2, #1
 8006294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2202      	movs	r2, #2
 800629c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68fa      	ldr	r2, [r7, #12]
 80062be:	4313      	orrs	r3, r2
 80062c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	68fa      	ldr	r2, [r7, #12]
 80062c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a21      	ldr	r2, [pc, #132]	; (8006354 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d022      	beq.n	800631a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062dc:	d01d      	beq.n	800631a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a1d      	ldr	r2, [pc, #116]	; (8006358 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d018      	beq.n	800631a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a1b      	ldr	r2, [pc, #108]	; (800635c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d013      	beq.n	800631a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a1a      	ldr	r2, [pc, #104]	; (8006360 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d00e      	beq.n	800631a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a18      	ldr	r2, [pc, #96]	; (8006364 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d009      	beq.n	800631a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a17      	ldr	r2, [pc, #92]	; (8006368 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d004      	beq.n	800631a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a15      	ldr	r2, [pc, #84]	; (800636c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d10c      	bne.n	8006334 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006320:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	68ba      	ldr	r2, [r7, #8]
 8006328:	4313      	orrs	r3, r2
 800632a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	68ba      	ldr	r2, [r7, #8]
 8006332:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2201      	movs	r2, #1
 8006338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2200      	movs	r2, #0
 8006340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006344:	2300      	movs	r3, #0
}
 8006346:	4618      	mov	r0, r3
 8006348:	3714      	adds	r7, #20
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr
 8006352:	bf00      	nop
 8006354:	40010000 	.word	0x40010000
 8006358:	40000400 	.word	0x40000400
 800635c:	40000800 	.word	0x40000800
 8006360:	40000c00 	.word	0x40000c00
 8006364:	40010400 	.word	0x40010400
 8006368:	40014000 	.word	0x40014000
 800636c:	40001800 	.word	0x40001800

08006370 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006370:	b480      	push	{r7}
 8006372:	b085      	sub	sp, #20
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800637a:	2300      	movs	r3, #0
 800637c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006384:	2b01      	cmp	r3, #1
 8006386:	d101      	bne.n	800638c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006388:	2302      	movs	r3, #2
 800638a:	e03d      	b.n	8006408 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2201      	movs	r2, #1
 8006390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	4313      	orrs	r3, r2
 80063a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	4313      	orrs	r3, r2
 80063ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	695b      	ldr	r3, [r3, #20]
 80063e4:	4313      	orrs	r3, r2
 80063e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	69db      	ldr	r3, [r3, #28]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	68fa      	ldr	r2, [r7, #12]
 80063fc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2200      	movs	r2, #0
 8006402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006406:	2300      	movs	r3, #0
}
 8006408:	4618      	mov	r0, r3
 800640a:	3714      	adds	r7, #20
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr

08006414 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006414:	b480      	push	{r7}
 8006416:	b083      	sub	sp, #12
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800641c:	bf00      	nop
 800641e:	370c      	adds	r7, #12
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr

08006428 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006428:	b480      	push	{r7}
 800642a:	b083      	sub	sp, #12
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006430:	bf00      	nop
 8006432:	370c      	adds	r7, #12
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr

0800643c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b082      	sub	sp, #8
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d101      	bne.n	800644e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	e03f      	b.n	80064ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006454:	b2db      	uxtb	r3, r3
 8006456:	2b00      	cmp	r3, #0
 8006458:	d106      	bne.n	8006468 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2200      	movs	r2, #0
 800645e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f7fc fc6a 	bl	8002d3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2224      	movs	r2, #36	; 0x24
 800646c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	68da      	ldr	r2, [r3, #12]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800647e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f000 fbb5 	bl	8006bf0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	691a      	ldr	r2, [r3, #16]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006494:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	695a      	ldr	r2, [r3, #20]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80064a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	68da      	ldr	r2, [r3, #12]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80064b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2220      	movs	r2, #32
 80064c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2220      	movs	r2, #32
 80064c8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80064cc:	2300      	movs	r3, #0
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3708      	adds	r7, #8
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}

080064d6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064d6:	b480      	push	{r7}
 80064d8:	b085      	sub	sp, #20
 80064da:	af00      	add	r7, sp, #0
 80064dc:	60f8      	str	r0, [r7, #12]
 80064de:	60b9      	str	r1, [r7, #8]
 80064e0:	4613      	mov	r3, r2
 80064e2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	2b20      	cmp	r3, #32
 80064ee:	d140      	bne.n	8006572 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d002      	beq.n	80064fc <HAL_UART_Receive_IT+0x26>
 80064f6:	88fb      	ldrh	r3, [r7, #6]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d101      	bne.n	8006500 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80064fc:	2301      	movs	r3, #1
 80064fe:	e039      	b.n	8006574 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006506:	2b01      	cmp	r3, #1
 8006508:	d101      	bne.n	800650e <HAL_UART_Receive_IT+0x38>
 800650a:	2302      	movs	r3, #2
 800650c:	e032      	b.n	8006574 <HAL_UART_Receive_IT+0x9e>
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2201      	movs	r2, #1
 8006512:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	68ba      	ldr	r2, [r7, #8]
 800651a:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	88fa      	ldrh	r2, [r7, #6]
 8006520:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	88fa      	ldrh	r2, [r7, #6]
 8006526:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2200      	movs	r2, #0
 800652c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2222      	movs	r2, #34	; 0x22
 8006532:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2200      	movs	r2, #0
 800653a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	68da      	ldr	r2, [r3, #12]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800654c:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	695a      	ldr	r2, [r3, #20]
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f042 0201 	orr.w	r2, r2, #1
 800655c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	68da      	ldr	r2, [r3, #12]
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f042 0220 	orr.w	r2, r2, #32
 800656c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800656e:	2300      	movs	r3, #0
 8006570:	e000      	b.n	8006574 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8006572:	2302      	movs	r3, #2
  }
}
 8006574:	4618      	mov	r0, r3
 8006576:	3714      	adds	r7, #20
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr

08006580 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b086      	sub	sp, #24
 8006584:	af00      	add	r7, sp, #0
 8006586:	60f8      	str	r0, [r7, #12]
 8006588:	60b9      	str	r1, [r7, #8]
 800658a:	4613      	mov	r3, r2
 800658c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006594:	b2db      	uxtb	r3, r3
 8006596:	2b20      	cmp	r3, #32
 8006598:	d153      	bne.n	8006642 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d002      	beq.n	80065a6 <HAL_UART_Transmit_DMA+0x26>
 80065a0:	88fb      	ldrh	r3, [r7, #6]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d101      	bne.n	80065aa <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	e04c      	b.n	8006644 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d101      	bne.n	80065b8 <HAL_UART_Transmit_DMA+0x38>
 80065b4:	2302      	movs	r3, #2
 80065b6:	e045      	b.n	8006644 <HAL_UART_Transmit_DMA+0xc4>
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2201      	movs	r2, #1
 80065bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80065c0:	68ba      	ldr	r2, [r7, #8]
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	88fa      	ldrh	r2, [r7, #6]
 80065ca:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	88fa      	ldrh	r2, [r7, #6]
 80065d0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2200      	movs	r2, #0
 80065d6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2221      	movs	r2, #33	; 0x21
 80065dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065e4:	4a19      	ldr	r2, [pc, #100]	; (800664c <HAL_UART_Transmit_DMA+0xcc>)
 80065e6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ec:	4a18      	ldr	r2, [pc, #96]	; (8006650 <HAL_UART_Transmit_DMA+0xd0>)
 80065ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065f4:	4a17      	ldr	r2, [pc, #92]	; (8006654 <HAL_UART_Transmit_DMA+0xd4>)
 80065f6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065fc:	2200      	movs	r2, #0
 80065fe:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8006600:	f107 0308 	add.w	r3, r7, #8
 8006604:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	6819      	ldr	r1, [r3, #0]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	3304      	adds	r3, #4
 8006614:	461a      	mov	r2, r3
 8006616:	88fb      	ldrh	r3, [r7, #6]
 8006618:	f7fd fc02 	bl	8003e20 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006624:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2200      	movs	r2, #0
 800662a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	695a      	ldr	r2, [r3, #20]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800663c:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800663e:	2300      	movs	r3, #0
 8006640:	e000      	b.n	8006644 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8006642:	2302      	movs	r3, #2
  }
}
 8006644:	4618      	mov	r0, r3
 8006646:	3718      	adds	r7, #24
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}
 800664c:	08006881 	.word	0x08006881
 8006650:	080068d3 	.word	0x080068d3
 8006654:	080068ef 	.word	0x080068ef

08006658 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b088      	sub	sp, #32
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	68db      	ldr	r3, [r3, #12]
 800666e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	695b      	ldr	r3, [r3, #20]
 8006676:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006678:	2300      	movs	r3, #0
 800667a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800667c:	2300      	movs	r3, #0
 800667e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006680:	69fb      	ldr	r3, [r7, #28]
 8006682:	f003 030f 	and.w	r3, r3, #15
 8006686:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d10d      	bne.n	80066aa <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800668e:	69fb      	ldr	r3, [r7, #28]
 8006690:	f003 0320 	and.w	r3, r3, #32
 8006694:	2b00      	cmp	r3, #0
 8006696:	d008      	beq.n	80066aa <HAL_UART_IRQHandler+0x52>
 8006698:	69bb      	ldr	r3, [r7, #24]
 800669a:	f003 0320 	and.w	r3, r3, #32
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d003      	beq.n	80066aa <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 fa23 	bl	8006aee <UART_Receive_IT>
      return;
 80066a8:	e0d1      	b.n	800684e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	f000 80b0 	beq.w	8006812 <HAL_UART_IRQHandler+0x1ba>
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	f003 0301 	and.w	r3, r3, #1
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d105      	bne.n	80066c8 <HAL_UART_IRQHandler+0x70>
 80066bc:	69bb      	ldr	r3, [r7, #24]
 80066be:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	f000 80a5 	beq.w	8006812 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80066c8:	69fb      	ldr	r3, [r7, #28]
 80066ca:	f003 0301 	and.w	r3, r3, #1
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d00a      	beq.n	80066e8 <HAL_UART_IRQHandler+0x90>
 80066d2:	69bb      	ldr	r3, [r7, #24]
 80066d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d005      	beq.n	80066e8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066e0:	f043 0201 	orr.w	r2, r3, #1
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80066e8:	69fb      	ldr	r3, [r7, #28]
 80066ea:	f003 0304 	and.w	r3, r3, #4
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d00a      	beq.n	8006708 <HAL_UART_IRQHandler+0xb0>
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	f003 0301 	and.w	r3, r3, #1
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d005      	beq.n	8006708 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006700:	f043 0202 	orr.w	r2, r3, #2
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006708:	69fb      	ldr	r3, [r7, #28]
 800670a:	f003 0302 	and.w	r3, r3, #2
 800670e:	2b00      	cmp	r3, #0
 8006710:	d00a      	beq.n	8006728 <HAL_UART_IRQHandler+0xd0>
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	f003 0301 	and.w	r3, r3, #1
 8006718:	2b00      	cmp	r3, #0
 800671a:	d005      	beq.n	8006728 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006720:	f043 0204 	orr.w	r2, r3, #4
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006728:	69fb      	ldr	r3, [r7, #28]
 800672a:	f003 0308 	and.w	r3, r3, #8
 800672e:	2b00      	cmp	r3, #0
 8006730:	d00f      	beq.n	8006752 <HAL_UART_IRQHandler+0xfa>
 8006732:	69bb      	ldr	r3, [r7, #24]
 8006734:	f003 0320 	and.w	r3, r3, #32
 8006738:	2b00      	cmp	r3, #0
 800673a:	d104      	bne.n	8006746 <HAL_UART_IRQHandler+0xee>
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	f003 0301 	and.w	r3, r3, #1
 8006742:	2b00      	cmp	r3, #0
 8006744:	d005      	beq.n	8006752 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800674a:	f043 0208 	orr.w	r2, r3, #8
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006756:	2b00      	cmp	r3, #0
 8006758:	d078      	beq.n	800684c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800675a:	69fb      	ldr	r3, [r7, #28]
 800675c:	f003 0320 	and.w	r3, r3, #32
 8006760:	2b00      	cmp	r3, #0
 8006762:	d007      	beq.n	8006774 <HAL_UART_IRQHandler+0x11c>
 8006764:	69bb      	ldr	r3, [r7, #24]
 8006766:	f003 0320 	and.w	r3, r3, #32
 800676a:	2b00      	cmp	r3, #0
 800676c:	d002      	beq.n	8006774 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f000 f9bd 	bl	8006aee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	695b      	ldr	r3, [r3, #20]
 800677a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800677e:	2b40      	cmp	r3, #64	; 0x40
 8006780:	bf0c      	ite	eq
 8006782:	2301      	moveq	r3, #1
 8006784:	2300      	movne	r3, #0
 8006786:	b2db      	uxtb	r3, r3
 8006788:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800678e:	f003 0308 	and.w	r3, r3, #8
 8006792:	2b00      	cmp	r3, #0
 8006794:	d102      	bne.n	800679c <HAL_UART_IRQHandler+0x144>
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d031      	beq.n	8006800 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f000 f906 	bl	80069ae <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	695b      	ldr	r3, [r3, #20]
 80067a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ac:	2b40      	cmp	r3, #64	; 0x40
 80067ae:	d123      	bne.n	80067f8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	695a      	ldr	r2, [r3, #20]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067be:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d013      	beq.n	80067f0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067cc:	4a21      	ldr	r2, [pc, #132]	; (8006854 <HAL_UART_IRQHandler+0x1fc>)
 80067ce:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067d4:	4618      	mov	r0, r3
 80067d6:	f7fd fb7b 	bl	8003ed0 <HAL_DMA_Abort_IT>
 80067da:	4603      	mov	r3, r0
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d016      	beq.n	800680e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80067ea:	4610      	mov	r0, r2
 80067ec:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067ee:	e00e      	b.n	800680e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f000 f83b 	bl	800686c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067f6:	e00a      	b.n	800680e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f000 f837 	bl	800686c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067fe:	e006      	b.n	800680e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f000 f833 	bl	800686c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800680c:	e01e      	b.n	800684c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800680e:	bf00      	nop
    return;
 8006810:	e01c      	b.n	800684c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006812:	69fb      	ldr	r3, [r7, #28]
 8006814:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006818:	2b00      	cmp	r3, #0
 800681a:	d008      	beq.n	800682e <HAL_UART_IRQHandler+0x1d6>
 800681c:	69bb      	ldr	r3, [r7, #24]
 800681e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006822:	2b00      	cmp	r3, #0
 8006824:	d003      	beq.n	800682e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 f8f3 	bl	8006a12 <UART_Transmit_IT>
    return;
 800682c:	e00f      	b.n	800684e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800682e:	69fb      	ldr	r3, [r7, #28]
 8006830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006834:	2b00      	cmp	r3, #0
 8006836:	d00a      	beq.n	800684e <HAL_UART_IRQHandler+0x1f6>
 8006838:	69bb      	ldr	r3, [r7, #24]
 800683a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800683e:	2b00      	cmp	r3, #0
 8006840:	d005      	beq.n	800684e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f000 f93b 	bl	8006abe <UART_EndTransmit_IT>
    return;
 8006848:	bf00      	nop
 800684a:	e000      	b.n	800684e <HAL_UART_IRQHandler+0x1f6>
    return;
 800684c:	bf00      	nop
  }
}
 800684e:	3720      	adds	r7, #32
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}
 8006854:	080069eb 	.word	0x080069eb

08006858 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006858:	b480      	push	{r7}
 800685a:	b083      	sub	sp, #12
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006860:	bf00      	nop
 8006862:	370c      	adds	r7, #12
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr

0800686c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800686c:	b480      	push	{r7}
 800686e:	b083      	sub	sp, #12
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006874:	bf00      	nop
 8006876:	370c      	adds	r7, #12
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr

08006880 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b084      	sub	sp, #16
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800688c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006898:	2b00      	cmp	r3, #0
 800689a:	d113      	bne.n	80068c4 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2200      	movs	r2, #0
 80068a0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	695a      	ldr	r2, [r3, #20]
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80068b0:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	68da      	ldr	r2, [r3, #12]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068c0:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80068c2:	e002      	b.n	80068ca <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 80068c4:	68f8      	ldr	r0, [r7, #12]
 80068c6:	f7fb fcf5 	bl	80022b4 <HAL_UART_TxCpltCallback>
}
 80068ca:	bf00      	nop
 80068cc:	3710      	adds	r7, #16
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}

080068d2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80068d2:	b580      	push	{r7, lr}
 80068d4:	b084      	sub	sp, #16
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068de:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80068e0:	68f8      	ldr	r0, [r7, #12]
 80068e2:	f7ff ffb9 	bl	8006858 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068e6:	bf00      	nop
 80068e8:	3710      	adds	r7, #16
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}

080068ee <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80068ee:	b580      	push	{r7, lr}
 80068f0:	b084      	sub	sp, #16
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80068f6:	2300      	movs	r3, #0
 80068f8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068fe:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	695b      	ldr	r3, [r3, #20]
 8006906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800690a:	2b80      	cmp	r3, #128	; 0x80
 800690c:	bf0c      	ite	eq
 800690e:	2301      	moveq	r3, #1
 8006910:	2300      	movne	r3, #0
 8006912:	b2db      	uxtb	r3, r3
 8006914:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800691c:	b2db      	uxtb	r3, r3
 800691e:	2b21      	cmp	r3, #33	; 0x21
 8006920:	d108      	bne.n	8006934 <UART_DMAError+0x46>
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d005      	beq.n	8006934 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	2200      	movs	r2, #0
 800692c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800692e:	68b8      	ldr	r0, [r7, #8]
 8006930:	f000 f827 	bl	8006982 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	695b      	ldr	r3, [r3, #20]
 800693a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800693e:	2b40      	cmp	r3, #64	; 0x40
 8006940:	bf0c      	ite	eq
 8006942:	2301      	moveq	r3, #1
 8006944:	2300      	movne	r3, #0
 8006946:	b2db      	uxtb	r3, r3
 8006948:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006950:	b2db      	uxtb	r3, r3
 8006952:	2b22      	cmp	r3, #34	; 0x22
 8006954:	d108      	bne.n	8006968 <UART_DMAError+0x7a>
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d005      	beq.n	8006968 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	2200      	movs	r2, #0
 8006960:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006962:	68b8      	ldr	r0, [r7, #8]
 8006964:	f000 f823 	bl	80069ae <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800696c:	f043 0210 	orr.w	r2, r3, #16
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006974:	68b8      	ldr	r0, [r7, #8]
 8006976:	f7ff ff79 	bl	800686c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800697a:	bf00      	nop
 800697c:	3710      	adds	r7, #16
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}

08006982 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006982:	b480      	push	{r7}
 8006984:	b083      	sub	sp, #12
 8006986:	af00      	add	r7, sp, #0
 8006988:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	68da      	ldr	r2, [r3, #12]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006998:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2220      	movs	r2, #32
 800699e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80069a2:	bf00      	nop
 80069a4:	370c      	adds	r7, #12
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr

080069ae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80069ae:	b480      	push	{r7}
 80069b0:	b083      	sub	sp, #12
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	68da      	ldr	r2, [r3, #12]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80069c4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	695a      	ldr	r2, [r3, #20]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f022 0201 	bic.w	r2, r2, #1
 80069d4:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2220      	movs	r2, #32
 80069da:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80069de:	bf00      	nop
 80069e0:	370c      	adds	r7, #12
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr

080069ea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80069ea:	b580      	push	{r7, lr}
 80069ec:	b084      	sub	sp, #16
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2200      	movs	r2, #0
 80069fc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2200      	movs	r2, #0
 8006a02:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a04:	68f8      	ldr	r0, [r7, #12]
 8006a06:	f7ff ff31 	bl	800686c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a0a:	bf00      	nop
 8006a0c:	3710      	adds	r7, #16
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}

08006a12 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006a12:	b480      	push	{r7}
 8006a14:	b085      	sub	sp, #20
 8006a16:	af00      	add	r7, sp, #0
 8006a18:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	2b21      	cmp	r3, #33	; 0x21
 8006a24:	d144      	bne.n	8006ab0 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a2e:	d11a      	bne.n	8006a66 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6a1b      	ldr	r3, [r3, #32]
 8006a34:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	881b      	ldrh	r3, [r3, #0]
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a44:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	691b      	ldr	r3, [r3, #16]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d105      	bne.n	8006a5a <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6a1b      	ldr	r3, [r3, #32]
 8006a52:	1c9a      	adds	r2, r3, #2
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	621a      	str	r2, [r3, #32]
 8006a58:	e00e      	b.n	8006a78 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6a1b      	ldr	r3, [r3, #32]
 8006a5e:	1c5a      	adds	r2, r3, #1
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	621a      	str	r2, [r3, #32]
 8006a64:	e008      	b.n	8006a78 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6a1b      	ldr	r3, [r3, #32]
 8006a6a:	1c59      	adds	r1, r3, #1
 8006a6c:	687a      	ldr	r2, [r7, #4]
 8006a6e:	6211      	str	r1, [r2, #32]
 8006a70:	781a      	ldrb	r2, [r3, #0]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a7c:	b29b      	uxth	r3, r3
 8006a7e:	3b01      	subs	r3, #1
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	4619      	mov	r1, r3
 8006a86:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d10f      	bne.n	8006aac <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	68da      	ldr	r2, [r3, #12]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a9a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	68da      	ldr	r2, [r3, #12]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006aaa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006aac:	2300      	movs	r3, #0
 8006aae:	e000      	b.n	8006ab2 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006ab0:	2302      	movs	r3, #2
  }
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3714      	adds	r7, #20
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr

08006abe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006abe:	b580      	push	{r7, lr}
 8006ac0:	b082      	sub	sp, #8
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	68da      	ldr	r2, [r3, #12]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ad4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2220      	movs	r2, #32
 8006ada:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f7fb fbe8 	bl	80022b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006ae4:	2300      	movs	r3, #0
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3708      	adds	r7, #8
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}

08006aee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006aee:	b580      	push	{r7, lr}
 8006af0:	b084      	sub	sp, #16
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	2b22      	cmp	r3, #34	; 0x22
 8006b00:	d171      	bne.n	8006be6 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b0a:	d123      	bne.n	8006b54 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b10:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	691b      	ldr	r3, [r3, #16]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d10e      	bne.n	8006b38 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b26:	b29a      	uxth	r2, r3
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b30:	1c9a      	adds	r2, r3, #2
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	629a      	str	r2, [r3, #40]	; 0x28
 8006b36:	e029      	b.n	8006b8c <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	b29a      	uxth	r2, r3
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b4c:	1c5a      	adds	r2, r3, #1
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	629a      	str	r2, [r3, #40]	; 0x28
 8006b52:	e01b      	b.n	8006b8c <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	691b      	ldr	r3, [r3, #16]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d10a      	bne.n	8006b72 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	6858      	ldr	r0, [r3, #4]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b66:	1c59      	adds	r1, r3, #1
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	6291      	str	r1, [r2, #40]	; 0x28
 8006b6c:	b2c2      	uxtb	r2, r0
 8006b6e:	701a      	strb	r2, [r3, #0]
 8006b70:	e00c      	b.n	8006b8c <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	b2da      	uxtb	r2, r3
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b7e:	1c58      	adds	r0, r3, #1
 8006b80:	6879      	ldr	r1, [r7, #4]
 8006b82:	6288      	str	r0, [r1, #40]	; 0x28
 8006b84:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006b88:	b2d2      	uxtb	r2, r2
 8006b8a:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	3b01      	subs	r3, #1
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	4619      	mov	r1, r3
 8006b9a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d120      	bne.n	8006be2 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	68da      	ldr	r2, [r3, #12]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f022 0220 	bic.w	r2, r2, #32
 8006bae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	68da      	ldr	r2, [r3, #12]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006bbe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	695a      	ldr	r2, [r3, #20]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f022 0201 	bic.w	r2, r2, #1
 8006bce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2220      	movs	r2, #32
 8006bd4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f7fb fb55 	bl	8002288 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006bde:	2300      	movs	r3, #0
 8006be0:	e002      	b.n	8006be8 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006be2:	2300      	movs	r3, #0
 8006be4:	e000      	b.n	8006be8 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006be6:	2302      	movs	r3, #2
  }
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3710      	adds	r7, #16
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}

08006bf0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bf4:	b085      	sub	sp, #20
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	691b      	ldr	r3, [r3, #16]
 8006c00:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	68da      	ldr	r2, [r3, #12]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	430a      	orrs	r2, r1
 8006c0e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	689a      	ldr	r2, [r3, #8]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	691b      	ldr	r3, [r3, #16]
 8006c18:	431a      	orrs	r2, r3
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	695b      	ldr	r3, [r3, #20]
 8006c1e:	431a      	orrs	r2, r3
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	69db      	ldr	r3, [r3, #28]
 8006c24:	4313      	orrs	r3, r2
 8006c26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	68db      	ldr	r3, [r3, #12]
 8006c2e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006c32:	f023 030c 	bic.w	r3, r3, #12
 8006c36:	687a      	ldr	r2, [r7, #4]
 8006c38:	6812      	ldr	r2, [r2, #0]
 8006c3a:	68f9      	ldr	r1, [r7, #12]
 8006c3c:	430b      	orrs	r3, r1
 8006c3e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	695b      	ldr	r3, [r3, #20]
 8006c46:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	699a      	ldr	r2, [r3, #24]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	430a      	orrs	r2, r1
 8006c54:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	69db      	ldr	r3, [r3, #28]
 8006c5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c5e:	f040 818b 	bne.w	8006f78 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4ac1      	ldr	r2, [pc, #772]	; (8006f6c <UART_SetConfig+0x37c>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d005      	beq.n	8006c78 <UART_SetConfig+0x88>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4abf      	ldr	r2, [pc, #764]	; (8006f70 <UART_SetConfig+0x380>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	f040 80bd 	bne.w	8006df2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006c78:	f7fe f9c2 	bl	8005000 <HAL_RCC_GetPCLK2Freq>
 8006c7c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	461d      	mov	r5, r3
 8006c82:	f04f 0600 	mov.w	r6, #0
 8006c86:	46a8      	mov	r8, r5
 8006c88:	46b1      	mov	r9, r6
 8006c8a:	eb18 0308 	adds.w	r3, r8, r8
 8006c8e:	eb49 0409 	adc.w	r4, r9, r9
 8006c92:	4698      	mov	r8, r3
 8006c94:	46a1      	mov	r9, r4
 8006c96:	eb18 0805 	adds.w	r8, r8, r5
 8006c9a:	eb49 0906 	adc.w	r9, r9, r6
 8006c9e:	f04f 0100 	mov.w	r1, #0
 8006ca2:	f04f 0200 	mov.w	r2, #0
 8006ca6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006caa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006cae:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006cb2:	4688      	mov	r8, r1
 8006cb4:	4691      	mov	r9, r2
 8006cb6:	eb18 0005 	adds.w	r0, r8, r5
 8006cba:	eb49 0106 	adc.w	r1, r9, r6
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	461d      	mov	r5, r3
 8006cc4:	f04f 0600 	mov.w	r6, #0
 8006cc8:	196b      	adds	r3, r5, r5
 8006cca:	eb46 0406 	adc.w	r4, r6, r6
 8006cce:	461a      	mov	r2, r3
 8006cd0:	4623      	mov	r3, r4
 8006cd2:	f7f9 ffb9 	bl	8000c48 <__aeabi_uldivmod>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	460c      	mov	r4, r1
 8006cda:	461a      	mov	r2, r3
 8006cdc:	4ba5      	ldr	r3, [pc, #660]	; (8006f74 <UART_SetConfig+0x384>)
 8006cde:	fba3 2302 	umull	r2, r3, r3, r2
 8006ce2:	095b      	lsrs	r3, r3, #5
 8006ce4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	461d      	mov	r5, r3
 8006cec:	f04f 0600 	mov.w	r6, #0
 8006cf0:	46a9      	mov	r9, r5
 8006cf2:	46b2      	mov	sl, r6
 8006cf4:	eb19 0309 	adds.w	r3, r9, r9
 8006cf8:	eb4a 040a 	adc.w	r4, sl, sl
 8006cfc:	4699      	mov	r9, r3
 8006cfe:	46a2      	mov	sl, r4
 8006d00:	eb19 0905 	adds.w	r9, r9, r5
 8006d04:	eb4a 0a06 	adc.w	sl, sl, r6
 8006d08:	f04f 0100 	mov.w	r1, #0
 8006d0c:	f04f 0200 	mov.w	r2, #0
 8006d10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d14:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006d18:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006d1c:	4689      	mov	r9, r1
 8006d1e:	4692      	mov	sl, r2
 8006d20:	eb19 0005 	adds.w	r0, r9, r5
 8006d24:	eb4a 0106 	adc.w	r1, sl, r6
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	461d      	mov	r5, r3
 8006d2e:	f04f 0600 	mov.w	r6, #0
 8006d32:	196b      	adds	r3, r5, r5
 8006d34:	eb46 0406 	adc.w	r4, r6, r6
 8006d38:	461a      	mov	r2, r3
 8006d3a:	4623      	mov	r3, r4
 8006d3c:	f7f9 ff84 	bl	8000c48 <__aeabi_uldivmod>
 8006d40:	4603      	mov	r3, r0
 8006d42:	460c      	mov	r4, r1
 8006d44:	461a      	mov	r2, r3
 8006d46:	4b8b      	ldr	r3, [pc, #556]	; (8006f74 <UART_SetConfig+0x384>)
 8006d48:	fba3 1302 	umull	r1, r3, r3, r2
 8006d4c:	095b      	lsrs	r3, r3, #5
 8006d4e:	2164      	movs	r1, #100	; 0x64
 8006d50:	fb01 f303 	mul.w	r3, r1, r3
 8006d54:	1ad3      	subs	r3, r2, r3
 8006d56:	00db      	lsls	r3, r3, #3
 8006d58:	3332      	adds	r3, #50	; 0x32
 8006d5a:	4a86      	ldr	r2, [pc, #536]	; (8006f74 <UART_SetConfig+0x384>)
 8006d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8006d60:	095b      	lsrs	r3, r3, #5
 8006d62:	005b      	lsls	r3, r3, #1
 8006d64:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006d68:	4498      	add	r8, r3
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	461d      	mov	r5, r3
 8006d6e:	f04f 0600 	mov.w	r6, #0
 8006d72:	46a9      	mov	r9, r5
 8006d74:	46b2      	mov	sl, r6
 8006d76:	eb19 0309 	adds.w	r3, r9, r9
 8006d7a:	eb4a 040a 	adc.w	r4, sl, sl
 8006d7e:	4699      	mov	r9, r3
 8006d80:	46a2      	mov	sl, r4
 8006d82:	eb19 0905 	adds.w	r9, r9, r5
 8006d86:	eb4a 0a06 	adc.w	sl, sl, r6
 8006d8a:	f04f 0100 	mov.w	r1, #0
 8006d8e:	f04f 0200 	mov.w	r2, #0
 8006d92:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d96:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006d9a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006d9e:	4689      	mov	r9, r1
 8006da0:	4692      	mov	sl, r2
 8006da2:	eb19 0005 	adds.w	r0, r9, r5
 8006da6:	eb4a 0106 	adc.w	r1, sl, r6
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	461d      	mov	r5, r3
 8006db0:	f04f 0600 	mov.w	r6, #0
 8006db4:	196b      	adds	r3, r5, r5
 8006db6:	eb46 0406 	adc.w	r4, r6, r6
 8006dba:	461a      	mov	r2, r3
 8006dbc:	4623      	mov	r3, r4
 8006dbe:	f7f9 ff43 	bl	8000c48 <__aeabi_uldivmod>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	460c      	mov	r4, r1
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	4b6a      	ldr	r3, [pc, #424]	; (8006f74 <UART_SetConfig+0x384>)
 8006dca:	fba3 1302 	umull	r1, r3, r3, r2
 8006dce:	095b      	lsrs	r3, r3, #5
 8006dd0:	2164      	movs	r1, #100	; 0x64
 8006dd2:	fb01 f303 	mul.w	r3, r1, r3
 8006dd6:	1ad3      	subs	r3, r2, r3
 8006dd8:	00db      	lsls	r3, r3, #3
 8006dda:	3332      	adds	r3, #50	; 0x32
 8006ddc:	4a65      	ldr	r2, [pc, #404]	; (8006f74 <UART_SetConfig+0x384>)
 8006dde:	fba2 2303 	umull	r2, r3, r2, r3
 8006de2:	095b      	lsrs	r3, r3, #5
 8006de4:	f003 0207 	and.w	r2, r3, #7
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4442      	add	r2, r8
 8006dee:	609a      	str	r2, [r3, #8]
 8006df0:	e26f      	b.n	80072d2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006df2:	f7fe f8f1 	bl	8004fd8 <HAL_RCC_GetPCLK1Freq>
 8006df6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	461d      	mov	r5, r3
 8006dfc:	f04f 0600 	mov.w	r6, #0
 8006e00:	46a8      	mov	r8, r5
 8006e02:	46b1      	mov	r9, r6
 8006e04:	eb18 0308 	adds.w	r3, r8, r8
 8006e08:	eb49 0409 	adc.w	r4, r9, r9
 8006e0c:	4698      	mov	r8, r3
 8006e0e:	46a1      	mov	r9, r4
 8006e10:	eb18 0805 	adds.w	r8, r8, r5
 8006e14:	eb49 0906 	adc.w	r9, r9, r6
 8006e18:	f04f 0100 	mov.w	r1, #0
 8006e1c:	f04f 0200 	mov.w	r2, #0
 8006e20:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006e24:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006e28:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006e2c:	4688      	mov	r8, r1
 8006e2e:	4691      	mov	r9, r2
 8006e30:	eb18 0005 	adds.w	r0, r8, r5
 8006e34:	eb49 0106 	adc.w	r1, r9, r6
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	461d      	mov	r5, r3
 8006e3e:	f04f 0600 	mov.w	r6, #0
 8006e42:	196b      	adds	r3, r5, r5
 8006e44:	eb46 0406 	adc.w	r4, r6, r6
 8006e48:	461a      	mov	r2, r3
 8006e4a:	4623      	mov	r3, r4
 8006e4c:	f7f9 fefc 	bl	8000c48 <__aeabi_uldivmod>
 8006e50:	4603      	mov	r3, r0
 8006e52:	460c      	mov	r4, r1
 8006e54:	461a      	mov	r2, r3
 8006e56:	4b47      	ldr	r3, [pc, #284]	; (8006f74 <UART_SetConfig+0x384>)
 8006e58:	fba3 2302 	umull	r2, r3, r3, r2
 8006e5c:	095b      	lsrs	r3, r3, #5
 8006e5e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	461d      	mov	r5, r3
 8006e66:	f04f 0600 	mov.w	r6, #0
 8006e6a:	46a9      	mov	r9, r5
 8006e6c:	46b2      	mov	sl, r6
 8006e6e:	eb19 0309 	adds.w	r3, r9, r9
 8006e72:	eb4a 040a 	adc.w	r4, sl, sl
 8006e76:	4699      	mov	r9, r3
 8006e78:	46a2      	mov	sl, r4
 8006e7a:	eb19 0905 	adds.w	r9, r9, r5
 8006e7e:	eb4a 0a06 	adc.w	sl, sl, r6
 8006e82:	f04f 0100 	mov.w	r1, #0
 8006e86:	f04f 0200 	mov.w	r2, #0
 8006e8a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006e8e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006e92:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006e96:	4689      	mov	r9, r1
 8006e98:	4692      	mov	sl, r2
 8006e9a:	eb19 0005 	adds.w	r0, r9, r5
 8006e9e:	eb4a 0106 	adc.w	r1, sl, r6
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	461d      	mov	r5, r3
 8006ea8:	f04f 0600 	mov.w	r6, #0
 8006eac:	196b      	adds	r3, r5, r5
 8006eae:	eb46 0406 	adc.w	r4, r6, r6
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	4623      	mov	r3, r4
 8006eb6:	f7f9 fec7 	bl	8000c48 <__aeabi_uldivmod>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	460c      	mov	r4, r1
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	4b2c      	ldr	r3, [pc, #176]	; (8006f74 <UART_SetConfig+0x384>)
 8006ec2:	fba3 1302 	umull	r1, r3, r3, r2
 8006ec6:	095b      	lsrs	r3, r3, #5
 8006ec8:	2164      	movs	r1, #100	; 0x64
 8006eca:	fb01 f303 	mul.w	r3, r1, r3
 8006ece:	1ad3      	subs	r3, r2, r3
 8006ed0:	00db      	lsls	r3, r3, #3
 8006ed2:	3332      	adds	r3, #50	; 0x32
 8006ed4:	4a27      	ldr	r2, [pc, #156]	; (8006f74 <UART_SetConfig+0x384>)
 8006ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8006eda:	095b      	lsrs	r3, r3, #5
 8006edc:	005b      	lsls	r3, r3, #1
 8006ede:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006ee2:	4498      	add	r8, r3
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	461d      	mov	r5, r3
 8006ee8:	f04f 0600 	mov.w	r6, #0
 8006eec:	46a9      	mov	r9, r5
 8006eee:	46b2      	mov	sl, r6
 8006ef0:	eb19 0309 	adds.w	r3, r9, r9
 8006ef4:	eb4a 040a 	adc.w	r4, sl, sl
 8006ef8:	4699      	mov	r9, r3
 8006efa:	46a2      	mov	sl, r4
 8006efc:	eb19 0905 	adds.w	r9, r9, r5
 8006f00:	eb4a 0a06 	adc.w	sl, sl, r6
 8006f04:	f04f 0100 	mov.w	r1, #0
 8006f08:	f04f 0200 	mov.w	r2, #0
 8006f0c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006f10:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006f14:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006f18:	4689      	mov	r9, r1
 8006f1a:	4692      	mov	sl, r2
 8006f1c:	eb19 0005 	adds.w	r0, r9, r5
 8006f20:	eb4a 0106 	adc.w	r1, sl, r6
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	461d      	mov	r5, r3
 8006f2a:	f04f 0600 	mov.w	r6, #0
 8006f2e:	196b      	adds	r3, r5, r5
 8006f30:	eb46 0406 	adc.w	r4, r6, r6
 8006f34:	461a      	mov	r2, r3
 8006f36:	4623      	mov	r3, r4
 8006f38:	f7f9 fe86 	bl	8000c48 <__aeabi_uldivmod>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	460c      	mov	r4, r1
 8006f40:	461a      	mov	r2, r3
 8006f42:	4b0c      	ldr	r3, [pc, #48]	; (8006f74 <UART_SetConfig+0x384>)
 8006f44:	fba3 1302 	umull	r1, r3, r3, r2
 8006f48:	095b      	lsrs	r3, r3, #5
 8006f4a:	2164      	movs	r1, #100	; 0x64
 8006f4c:	fb01 f303 	mul.w	r3, r1, r3
 8006f50:	1ad3      	subs	r3, r2, r3
 8006f52:	00db      	lsls	r3, r3, #3
 8006f54:	3332      	adds	r3, #50	; 0x32
 8006f56:	4a07      	ldr	r2, [pc, #28]	; (8006f74 <UART_SetConfig+0x384>)
 8006f58:	fba2 2303 	umull	r2, r3, r2, r3
 8006f5c:	095b      	lsrs	r3, r3, #5
 8006f5e:	f003 0207 	and.w	r2, r3, #7
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4442      	add	r2, r8
 8006f68:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006f6a:	e1b2      	b.n	80072d2 <UART_SetConfig+0x6e2>
 8006f6c:	40011000 	.word	0x40011000
 8006f70:	40011400 	.word	0x40011400
 8006f74:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4ad7      	ldr	r2, [pc, #860]	; (80072dc <UART_SetConfig+0x6ec>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d005      	beq.n	8006f8e <UART_SetConfig+0x39e>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4ad6      	ldr	r2, [pc, #856]	; (80072e0 <UART_SetConfig+0x6f0>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	f040 80d1 	bne.w	8007130 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006f8e:	f7fe f837 	bl	8005000 <HAL_RCC_GetPCLK2Freq>
 8006f92:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	469a      	mov	sl, r3
 8006f98:	f04f 0b00 	mov.w	fp, #0
 8006f9c:	46d0      	mov	r8, sl
 8006f9e:	46d9      	mov	r9, fp
 8006fa0:	eb18 0308 	adds.w	r3, r8, r8
 8006fa4:	eb49 0409 	adc.w	r4, r9, r9
 8006fa8:	4698      	mov	r8, r3
 8006faa:	46a1      	mov	r9, r4
 8006fac:	eb18 080a 	adds.w	r8, r8, sl
 8006fb0:	eb49 090b 	adc.w	r9, r9, fp
 8006fb4:	f04f 0100 	mov.w	r1, #0
 8006fb8:	f04f 0200 	mov.w	r2, #0
 8006fbc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006fc0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006fc4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006fc8:	4688      	mov	r8, r1
 8006fca:	4691      	mov	r9, r2
 8006fcc:	eb1a 0508 	adds.w	r5, sl, r8
 8006fd0:	eb4b 0609 	adc.w	r6, fp, r9
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	4619      	mov	r1, r3
 8006fda:	f04f 0200 	mov.w	r2, #0
 8006fde:	f04f 0300 	mov.w	r3, #0
 8006fe2:	f04f 0400 	mov.w	r4, #0
 8006fe6:	0094      	lsls	r4, r2, #2
 8006fe8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006fec:	008b      	lsls	r3, r1, #2
 8006fee:	461a      	mov	r2, r3
 8006ff0:	4623      	mov	r3, r4
 8006ff2:	4628      	mov	r0, r5
 8006ff4:	4631      	mov	r1, r6
 8006ff6:	f7f9 fe27 	bl	8000c48 <__aeabi_uldivmod>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	460c      	mov	r4, r1
 8006ffe:	461a      	mov	r2, r3
 8007000:	4bb8      	ldr	r3, [pc, #736]	; (80072e4 <UART_SetConfig+0x6f4>)
 8007002:	fba3 2302 	umull	r2, r3, r3, r2
 8007006:	095b      	lsrs	r3, r3, #5
 8007008:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	469b      	mov	fp, r3
 8007010:	f04f 0c00 	mov.w	ip, #0
 8007014:	46d9      	mov	r9, fp
 8007016:	46e2      	mov	sl, ip
 8007018:	eb19 0309 	adds.w	r3, r9, r9
 800701c:	eb4a 040a 	adc.w	r4, sl, sl
 8007020:	4699      	mov	r9, r3
 8007022:	46a2      	mov	sl, r4
 8007024:	eb19 090b 	adds.w	r9, r9, fp
 8007028:	eb4a 0a0c 	adc.w	sl, sl, ip
 800702c:	f04f 0100 	mov.w	r1, #0
 8007030:	f04f 0200 	mov.w	r2, #0
 8007034:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007038:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800703c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007040:	4689      	mov	r9, r1
 8007042:	4692      	mov	sl, r2
 8007044:	eb1b 0509 	adds.w	r5, fp, r9
 8007048:	eb4c 060a 	adc.w	r6, ip, sl
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	4619      	mov	r1, r3
 8007052:	f04f 0200 	mov.w	r2, #0
 8007056:	f04f 0300 	mov.w	r3, #0
 800705a:	f04f 0400 	mov.w	r4, #0
 800705e:	0094      	lsls	r4, r2, #2
 8007060:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007064:	008b      	lsls	r3, r1, #2
 8007066:	461a      	mov	r2, r3
 8007068:	4623      	mov	r3, r4
 800706a:	4628      	mov	r0, r5
 800706c:	4631      	mov	r1, r6
 800706e:	f7f9 fdeb 	bl	8000c48 <__aeabi_uldivmod>
 8007072:	4603      	mov	r3, r0
 8007074:	460c      	mov	r4, r1
 8007076:	461a      	mov	r2, r3
 8007078:	4b9a      	ldr	r3, [pc, #616]	; (80072e4 <UART_SetConfig+0x6f4>)
 800707a:	fba3 1302 	umull	r1, r3, r3, r2
 800707e:	095b      	lsrs	r3, r3, #5
 8007080:	2164      	movs	r1, #100	; 0x64
 8007082:	fb01 f303 	mul.w	r3, r1, r3
 8007086:	1ad3      	subs	r3, r2, r3
 8007088:	011b      	lsls	r3, r3, #4
 800708a:	3332      	adds	r3, #50	; 0x32
 800708c:	4a95      	ldr	r2, [pc, #596]	; (80072e4 <UART_SetConfig+0x6f4>)
 800708e:	fba2 2303 	umull	r2, r3, r2, r3
 8007092:	095b      	lsrs	r3, r3, #5
 8007094:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007098:	4498      	add	r8, r3
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	469b      	mov	fp, r3
 800709e:	f04f 0c00 	mov.w	ip, #0
 80070a2:	46d9      	mov	r9, fp
 80070a4:	46e2      	mov	sl, ip
 80070a6:	eb19 0309 	adds.w	r3, r9, r9
 80070aa:	eb4a 040a 	adc.w	r4, sl, sl
 80070ae:	4699      	mov	r9, r3
 80070b0:	46a2      	mov	sl, r4
 80070b2:	eb19 090b 	adds.w	r9, r9, fp
 80070b6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80070ba:	f04f 0100 	mov.w	r1, #0
 80070be:	f04f 0200 	mov.w	r2, #0
 80070c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80070c6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80070ca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80070ce:	4689      	mov	r9, r1
 80070d0:	4692      	mov	sl, r2
 80070d2:	eb1b 0509 	adds.w	r5, fp, r9
 80070d6:	eb4c 060a 	adc.w	r6, ip, sl
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	4619      	mov	r1, r3
 80070e0:	f04f 0200 	mov.w	r2, #0
 80070e4:	f04f 0300 	mov.w	r3, #0
 80070e8:	f04f 0400 	mov.w	r4, #0
 80070ec:	0094      	lsls	r4, r2, #2
 80070ee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80070f2:	008b      	lsls	r3, r1, #2
 80070f4:	461a      	mov	r2, r3
 80070f6:	4623      	mov	r3, r4
 80070f8:	4628      	mov	r0, r5
 80070fa:	4631      	mov	r1, r6
 80070fc:	f7f9 fda4 	bl	8000c48 <__aeabi_uldivmod>
 8007100:	4603      	mov	r3, r0
 8007102:	460c      	mov	r4, r1
 8007104:	461a      	mov	r2, r3
 8007106:	4b77      	ldr	r3, [pc, #476]	; (80072e4 <UART_SetConfig+0x6f4>)
 8007108:	fba3 1302 	umull	r1, r3, r3, r2
 800710c:	095b      	lsrs	r3, r3, #5
 800710e:	2164      	movs	r1, #100	; 0x64
 8007110:	fb01 f303 	mul.w	r3, r1, r3
 8007114:	1ad3      	subs	r3, r2, r3
 8007116:	011b      	lsls	r3, r3, #4
 8007118:	3332      	adds	r3, #50	; 0x32
 800711a:	4a72      	ldr	r2, [pc, #456]	; (80072e4 <UART_SetConfig+0x6f4>)
 800711c:	fba2 2303 	umull	r2, r3, r2, r3
 8007120:	095b      	lsrs	r3, r3, #5
 8007122:	f003 020f 	and.w	r2, r3, #15
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4442      	add	r2, r8
 800712c:	609a      	str	r2, [r3, #8]
 800712e:	e0d0      	b.n	80072d2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007130:	f7fd ff52 	bl	8004fd8 <HAL_RCC_GetPCLK1Freq>
 8007134:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	469a      	mov	sl, r3
 800713a:	f04f 0b00 	mov.w	fp, #0
 800713e:	46d0      	mov	r8, sl
 8007140:	46d9      	mov	r9, fp
 8007142:	eb18 0308 	adds.w	r3, r8, r8
 8007146:	eb49 0409 	adc.w	r4, r9, r9
 800714a:	4698      	mov	r8, r3
 800714c:	46a1      	mov	r9, r4
 800714e:	eb18 080a 	adds.w	r8, r8, sl
 8007152:	eb49 090b 	adc.w	r9, r9, fp
 8007156:	f04f 0100 	mov.w	r1, #0
 800715a:	f04f 0200 	mov.w	r2, #0
 800715e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007162:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007166:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800716a:	4688      	mov	r8, r1
 800716c:	4691      	mov	r9, r2
 800716e:	eb1a 0508 	adds.w	r5, sl, r8
 8007172:	eb4b 0609 	adc.w	r6, fp, r9
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	4619      	mov	r1, r3
 800717c:	f04f 0200 	mov.w	r2, #0
 8007180:	f04f 0300 	mov.w	r3, #0
 8007184:	f04f 0400 	mov.w	r4, #0
 8007188:	0094      	lsls	r4, r2, #2
 800718a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800718e:	008b      	lsls	r3, r1, #2
 8007190:	461a      	mov	r2, r3
 8007192:	4623      	mov	r3, r4
 8007194:	4628      	mov	r0, r5
 8007196:	4631      	mov	r1, r6
 8007198:	f7f9 fd56 	bl	8000c48 <__aeabi_uldivmod>
 800719c:	4603      	mov	r3, r0
 800719e:	460c      	mov	r4, r1
 80071a0:	461a      	mov	r2, r3
 80071a2:	4b50      	ldr	r3, [pc, #320]	; (80072e4 <UART_SetConfig+0x6f4>)
 80071a4:	fba3 2302 	umull	r2, r3, r3, r2
 80071a8:	095b      	lsrs	r3, r3, #5
 80071aa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	469b      	mov	fp, r3
 80071b2:	f04f 0c00 	mov.w	ip, #0
 80071b6:	46d9      	mov	r9, fp
 80071b8:	46e2      	mov	sl, ip
 80071ba:	eb19 0309 	adds.w	r3, r9, r9
 80071be:	eb4a 040a 	adc.w	r4, sl, sl
 80071c2:	4699      	mov	r9, r3
 80071c4:	46a2      	mov	sl, r4
 80071c6:	eb19 090b 	adds.w	r9, r9, fp
 80071ca:	eb4a 0a0c 	adc.w	sl, sl, ip
 80071ce:	f04f 0100 	mov.w	r1, #0
 80071d2:	f04f 0200 	mov.w	r2, #0
 80071d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80071da:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80071de:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80071e2:	4689      	mov	r9, r1
 80071e4:	4692      	mov	sl, r2
 80071e6:	eb1b 0509 	adds.w	r5, fp, r9
 80071ea:	eb4c 060a 	adc.w	r6, ip, sl
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	4619      	mov	r1, r3
 80071f4:	f04f 0200 	mov.w	r2, #0
 80071f8:	f04f 0300 	mov.w	r3, #0
 80071fc:	f04f 0400 	mov.w	r4, #0
 8007200:	0094      	lsls	r4, r2, #2
 8007202:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007206:	008b      	lsls	r3, r1, #2
 8007208:	461a      	mov	r2, r3
 800720a:	4623      	mov	r3, r4
 800720c:	4628      	mov	r0, r5
 800720e:	4631      	mov	r1, r6
 8007210:	f7f9 fd1a 	bl	8000c48 <__aeabi_uldivmod>
 8007214:	4603      	mov	r3, r0
 8007216:	460c      	mov	r4, r1
 8007218:	461a      	mov	r2, r3
 800721a:	4b32      	ldr	r3, [pc, #200]	; (80072e4 <UART_SetConfig+0x6f4>)
 800721c:	fba3 1302 	umull	r1, r3, r3, r2
 8007220:	095b      	lsrs	r3, r3, #5
 8007222:	2164      	movs	r1, #100	; 0x64
 8007224:	fb01 f303 	mul.w	r3, r1, r3
 8007228:	1ad3      	subs	r3, r2, r3
 800722a:	011b      	lsls	r3, r3, #4
 800722c:	3332      	adds	r3, #50	; 0x32
 800722e:	4a2d      	ldr	r2, [pc, #180]	; (80072e4 <UART_SetConfig+0x6f4>)
 8007230:	fba2 2303 	umull	r2, r3, r2, r3
 8007234:	095b      	lsrs	r3, r3, #5
 8007236:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800723a:	4498      	add	r8, r3
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	469b      	mov	fp, r3
 8007240:	f04f 0c00 	mov.w	ip, #0
 8007244:	46d9      	mov	r9, fp
 8007246:	46e2      	mov	sl, ip
 8007248:	eb19 0309 	adds.w	r3, r9, r9
 800724c:	eb4a 040a 	adc.w	r4, sl, sl
 8007250:	4699      	mov	r9, r3
 8007252:	46a2      	mov	sl, r4
 8007254:	eb19 090b 	adds.w	r9, r9, fp
 8007258:	eb4a 0a0c 	adc.w	sl, sl, ip
 800725c:	f04f 0100 	mov.w	r1, #0
 8007260:	f04f 0200 	mov.w	r2, #0
 8007264:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007268:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800726c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007270:	4689      	mov	r9, r1
 8007272:	4692      	mov	sl, r2
 8007274:	eb1b 0509 	adds.w	r5, fp, r9
 8007278:	eb4c 060a 	adc.w	r6, ip, sl
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	4619      	mov	r1, r3
 8007282:	f04f 0200 	mov.w	r2, #0
 8007286:	f04f 0300 	mov.w	r3, #0
 800728a:	f04f 0400 	mov.w	r4, #0
 800728e:	0094      	lsls	r4, r2, #2
 8007290:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007294:	008b      	lsls	r3, r1, #2
 8007296:	461a      	mov	r2, r3
 8007298:	4623      	mov	r3, r4
 800729a:	4628      	mov	r0, r5
 800729c:	4631      	mov	r1, r6
 800729e:	f7f9 fcd3 	bl	8000c48 <__aeabi_uldivmod>
 80072a2:	4603      	mov	r3, r0
 80072a4:	460c      	mov	r4, r1
 80072a6:	461a      	mov	r2, r3
 80072a8:	4b0e      	ldr	r3, [pc, #56]	; (80072e4 <UART_SetConfig+0x6f4>)
 80072aa:	fba3 1302 	umull	r1, r3, r3, r2
 80072ae:	095b      	lsrs	r3, r3, #5
 80072b0:	2164      	movs	r1, #100	; 0x64
 80072b2:	fb01 f303 	mul.w	r3, r1, r3
 80072b6:	1ad3      	subs	r3, r2, r3
 80072b8:	011b      	lsls	r3, r3, #4
 80072ba:	3332      	adds	r3, #50	; 0x32
 80072bc:	4a09      	ldr	r2, [pc, #36]	; (80072e4 <UART_SetConfig+0x6f4>)
 80072be:	fba2 2303 	umull	r2, r3, r2, r3
 80072c2:	095b      	lsrs	r3, r3, #5
 80072c4:	f003 020f 	and.w	r2, r3, #15
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4442      	add	r2, r8
 80072ce:	609a      	str	r2, [r3, #8]
}
 80072d0:	e7ff      	b.n	80072d2 <UART_SetConfig+0x6e2>
 80072d2:	bf00      	nop
 80072d4:	3714      	adds	r7, #20
 80072d6:	46bd      	mov	sp, r7
 80072d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072dc:	40011000 	.word	0x40011000
 80072e0:	40011400 	.word	0x40011400
 80072e4:	51eb851f 	.word	0x51eb851f

080072e8 <__errno>:
 80072e8:	4b01      	ldr	r3, [pc, #4]	; (80072f0 <__errno+0x8>)
 80072ea:	6818      	ldr	r0, [r3, #0]
 80072ec:	4770      	bx	lr
 80072ee:	bf00      	nop
 80072f0:	20000014 	.word	0x20000014

080072f4 <__libc_init_array>:
 80072f4:	b570      	push	{r4, r5, r6, lr}
 80072f6:	4e0d      	ldr	r6, [pc, #52]	; (800732c <__libc_init_array+0x38>)
 80072f8:	4c0d      	ldr	r4, [pc, #52]	; (8007330 <__libc_init_array+0x3c>)
 80072fa:	1ba4      	subs	r4, r4, r6
 80072fc:	10a4      	asrs	r4, r4, #2
 80072fe:	2500      	movs	r5, #0
 8007300:	42a5      	cmp	r5, r4
 8007302:	d109      	bne.n	8007318 <__libc_init_array+0x24>
 8007304:	4e0b      	ldr	r6, [pc, #44]	; (8007334 <__libc_init_array+0x40>)
 8007306:	4c0c      	ldr	r4, [pc, #48]	; (8007338 <__libc_init_array+0x44>)
 8007308:	f003 fb24 	bl	800a954 <_init>
 800730c:	1ba4      	subs	r4, r4, r6
 800730e:	10a4      	asrs	r4, r4, #2
 8007310:	2500      	movs	r5, #0
 8007312:	42a5      	cmp	r5, r4
 8007314:	d105      	bne.n	8007322 <__libc_init_array+0x2e>
 8007316:	bd70      	pop	{r4, r5, r6, pc}
 8007318:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800731c:	4798      	blx	r3
 800731e:	3501      	adds	r5, #1
 8007320:	e7ee      	b.n	8007300 <__libc_init_array+0xc>
 8007322:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007326:	4798      	blx	r3
 8007328:	3501      	adds	r5, #1
 800732a:	e7f2      	b.n	8007312 <__libc_init_array+0x1e>
 800732c:	0800b070 	.word	0x0800b070
 8007330:	0800b070 	.word	0x0800b070
 8007334:	0800b070 	.word	0x0800b070
 8007338:	0800b074 	.word	0x0800b074

0800733c <memset>:
 800733c:	4402      	add	r2, r0
 800733e:	4603      	mov	r3, r0
 8007340:	4293      	cmp	r3, r2
 8007342:	d100      	bne.n	8007346 <memset+0xa>
 8007344:	4770      	bx	lr
 8007346:	f803 1b01 	strb.w	r1, [r3], #1
 800734a:	e7f9      	b.n	8007340 <memset+0x4>

0800734c <__cvt>:
 800734c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007350:	ec55 4b10 	vmov	r4, r5, d0
 8007354:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8007356:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800735a:	2d00      	cmp	r5, #0
 800735c:	460e      	mov	r6, r1
 800735e:	4691      	mov	r9, r2
 8007360:	4619      	mov	r1, r3
 8007362:	bfb8      	it	lt
 8007364:	4622      	movlt	r2, r4
 8007366:	462b      	mov	r3, r5
 8007368:	f027 0720 	bic.w	r7, r7, #32
 800736c:	bfbb      	ittet	lt
 800736e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007372:	461d      	movlt	r5, r3
 8007374:	2300      	movge	r3, #0
 8007376:	232d      	movlt	r3, #45	; 0x2d
 8007378:	bfb8      	it	lt
 800737a:	4614      	movlt	r4, r2
 800737c:	2f46      	cmp	r7, #70	; 0x46
 800737e:	700b      	strb	r3, [r1, #0]
 8007380:	d004      	beq.n	800738c <__cvt+0x40>
 8007382:	2f45      	cmp	r7, #69	; 0x45
 8007384:	d100      	bne.n	8007388 <__cvt+0x3c>
 8007386:	3601      	adds	r6, #1
 8007388:	2102      	movs	r1, #2
 800738a:	e000      	b.n	800738e <__cvt+0x42>
 800738c:	2103      	movs	r1, #3
 800738e:	ab03      	add	r3, sp, #12
 8007390:	9301      	str	r3, [sp, #4]
 8007392:	ab02      	add	r3, sp, #8
 8007394:	9300      	str	r3, [sp, #0]
 8007396:	4632      	mov	r2, r6
 8007398:	4653      	mov	r3, sl
 800739a:	ec45 4b10 	vmov	d0, r4, r5
 800739e:	f000 feaf 	bl	8008100 <_dtoa_r>
 80073a2:	2f47      	cmp	r7, #71	; 0x47
 80073a4:	4680      	mov	r8, r0
 80073a6:	d102      	bne.n	80073ae <__cvt+0x62>
 80073a8:	f019 0f01 	tst.w	r9, #1
 80073ac:	d026      	beq.n	80073fc <__cvt+0xb0>
 80073ae:	2f46      	cmp	r7, #70	; 0x46
 80073b0:	eb08 0906 	add.w	r9, r8, r6
 80073b4:	d111      	bne.n	80073da <__cvt+0x8e>
 80073b6:	f898 3000 	ldrb.w	r3, [r8]
 80073ba:	2b30      	cmp	r3, #48	; 0x30
 80073bc:	d10a      	bne.n	80073d4 <__cvt+0x88>
 80073be:	2200      	movs	r2, #0
 80073c0:	2300      	movs	r3, #0
 80073c2:	4620      	mov	r0, r4
 80073c4:	4629      	mov	r1, r5
 80073c6:	f7f9 fb7f 	bl	8000ac8 <__aeabi_dcmpeq>
 80073ca:	b918      	cbnz	r0, 80073d4 <__cvt+0x88>
 80073cc:	f1c6 0601 	rsb	r6, r6, #1
 80073d0:	f8ca 6000 	str.w	r6, [sl]
 80073d4:	f8da 3000 	ldr.w	r3, [sl]
 80073d8:	4499      	add	r9, r3
 80073da:	2200      	movs	r2, #0
 80073dc:	2300      	movs	r3, #0
 80073de:	4620      	mov	r0, r4
 80073e0:	4629      	mov	r1, r5
 80073e2:	f7f9 fb71 	bl	8000ac8 <__aeabi_dcmpeq>
 80073e6:	b938      	cbnz	r0, 80073f8 <__cvt+0xac>
 80073e8:	2230      	movs	r2, #48	; 0x30
 80073ea:	9b03      	ldr	r3, [sp, #12]
 80073ec:	454b      	cmp	r3, r9
 80073ee:	d205      	bcs.n	80073fc <__cvt+0xb0>
 80073f0:	1c59      	adds	r1, r3, #1
 80073f2:	9103      	str	r1, [sp, #12]
 80073f4:	701a      	strb	r2, [r3, #0]
 80073f6:	e7f8      	b.n	80073ea <__cvt+0x9e>
 80073f8:	f8cd 900c 	str.w	r9, [sp, #12]
 80073fc:	9b03      	ldr	r3, [sp, #12]
 80073fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007400:	eba3 0308 	sub.w	r3, r3, r8
 8007404:	4640      	mov	r0, r8
 8007406:	6013      	str	r3, [r2, #0]
 8007408:	b004      	add	sp, #16
 800740a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800740e <__exponent>:
 800740e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007410:	2900      	cmp	r1, #0
 8007412:	4604      	mov	r4, r0
 8007414:	bfba      	itte	lt
 8007416:	4249      	neglt	r1, r1
 8007418:	232d      	movlt	r3, #45	; 0x2d
 800741a:	232b      	movge	r3, #43	; 0x2b
 800741c:	2909      	cmp	r1, #9
 800741e:	f804 2b02 	strb.w	r2, [r4], #2
 8007422:	7043      	strb	r3, [r0, #1]
 8007424:	dd20      	ble.n	8007468 <__exponent+0x5a>
 8007426:	f10d 0307 	add.w	r3, sp, #7
 800742a:	461f      	mov	r7, r3
 800742c:	260a      	movs	r6, #10
 800742e:	fb91 f5f6 	sdiv	r5, r1, r6
 8007432:	fb06 1115 	mls	r1, r6, r5, r1
 8007436:	3130      	adds	r1, #48	; 0x30
 8007438:	2d09      	cmp	r5, #9
 800743a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800743e:	f103 32ff 	add.w	r2, r3, #4294967295
 8007442:	4629      	mov	r1, r5
 8007444:	dc09      	bgt.n	800745a <__exponent+0x4c>
 8007446:	3130      	adds	r1, #48	; 0x30
 8007448:	3b02      	subs	r3, #2
 800744a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800744e:	42bb      	cmp	r3, r7
 8007450:	4622      	mov	r2, r4
 8007452:	d304      	bcc.n	800745e <__exponent+0x50>
 8007454:	1a10      	subs	r0, r2, r0
 8007456:	b003      	add	sp, #12
 8007458:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800745a:	4613      	mov	r3, r2
 800745c:	e7e7      	b.n	800742e <__exponent+0x20>
 800745e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007462:	f804 2b01 	strb.w	r2, [r4], #1
 8007466:	e7f2      	b.n	800744e <__exponent+0x40>
 8007468:	2330      	movs	r3, #48	; 0x30
 800746a:	4419      	add	r1, r3
 800746c:	7083      	strb	r3, [r0, #2]
 800746e:	1d02      	adds	r2, r0, #4
 8007470:	70c1      	strb	r1, [r0, #3]
 8007472:	e7ef      	b.n	8007454 <__exponent+0x46>

08007474 <_printf_float>:
 8007474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007478:	b08d      	sub	sp, #52	; 0x34
 800747a:	460c      	mov	r4, r1
 800747c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8007480:	4616      	mov	r6, r2
 8007482:	461f      	mov	r7, r3
 8007484:	4605      	mov	r5, r0
 8007486:	f001 fd6d 	bl	8008f64 <_localeconv_r>
 800748a:	6803      	ldr	r3, [r0, #0]
 800748c:	9304      	str	r3, [sp, #16]
 800748e:	4618      	mov	r0, r3
 8007490:	f7f8 fe9e 	bl	80001d0 <strlen>
 8007494:	2300      	movs	r3, #0
 8007496:	930a      	str	r3, [sp, #40]	; 0x28
 8007498:	f8d8 3000 	ldr.w	r3, [r8]
 800749c:	9005      	str	r0, [sp, #20]
 800749e:	3307      	adds	r3, #7
 80074a0:	f023 0307 	bic.w	r3, r3, #7
 80074a4:	f103 0208 	add.w	r2, r3, #8
 80074a8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80074ac:	f8d4 b000 	ldr.w	fp, [r4]
 80074b0:	f8c8 2000 	str.w	r2, [r8]
 80074b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80074bc:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80074c0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80074c4:	9307      	str	r3, [sp, #28]
 80074c6:	f8cd 8018 	str.w	r8, [sp, #24]
 80074ca:	f04f 32ff 	mov.w	r2, #4294967295
 80074ce:	4ba7      	ldr	r3, [pc, #668]	; (800776c <_printf_float+0x2f8>)
 80074d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80074d4:	f7f9 fb2a 	bl	8000b2c <__aeabi_dcmpun>
 80074d8:	bb70      	cbnz	r0, 8007538 <_printf_float+0xc4>
 80074da:	f04f 32ff 	mov.w	r2, #4294967295
 80074de:	4ba3      	ldr	r3, [pc, #652]	; (800776c <_printf_float+0x2f8>)
 80074e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80074e4:	f7f9 fb04 	bl	8000af0 <__aeabi_dcmple>
 80074e8:	bb30      	cbnz	r0, 8007538 <_printf_float+0xc4>
 80074ea:	2200      	movs	r2, #0
 80074ec:	2300      	movs	r3, #0
 80074ee:	4640      	mov	r0, r8
 80074f0:	4649      	mov	r1, r9
 80074f2:	f7f9 faf3 	bl	8000adc <__aeabi_dcmplt>
 80074f6:	b110      	cbz	r0, 80074fe <_printf_float+0x8a>
 80074f8:	232d      	movs	r3, #45	; 0x2d
 80074fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074fe:	4a9c      	ldr	r2, [pc, #624]	; (8007770 <_printf_float+0x2fc>)
 8007500:	4b9c      	ldr	r3, [pc, #624]	; (8007774 <_printf_float+0x300>)
 8007502:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007506:	bf8c      	ite	hi
 8007508:	4690      	movhi	r8, r2
 800750a:	4698      	movls	r8, r3
 800750c:	2303      	movs	r3, #3
 800750e:	f02b 0204 	bic.w	r2, fp, #4
 8007512:	6123      	str	r3, [r4, #16]
 8007514:	6022      	str	r2, [r4, #0]
 8007516:	f04f 0900 	mov.w	r9, #0
 800751a:	9700      	str	r7, [sp, #0]
 800751c:	4633      	mov	r3, r6
 800751e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007520:	4621      	mov	r1, r4
 8007522:	4628      	mov	r0, r5
 8007524:	f000 f9e6 	bl	80078f4 <_printf_common>
 8007528:	3001      	adds	r0, #1
 800752a:	f040 808d 	bne.w	8007648 <_printf_float+0x1d4>
 800752e:	f04f 30ff 	mov.w	r0, #4294967295
 8007532:	b00d      	add	sp, #52	; 0x34
 8007534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007538:	4642      	mov	r2, r8
 800753a:	464b      	mov	r3, r9
 800753c:	4640      	mov	r0, r8
 800753e:	4649      	mov	r1, r9
 8007540:	f7f9 faf4 	bl	8000b2c <__aeabi_dcmpun>
 8007544:	b110      	cbz	r0, 800754c <_printf_float+0xd8>
 8007546:	4a8c      	ldr	r2, [pc, #560]	; (8007778 <_printf_float+0x304>)
 8007548:	4b8c      	ldr	r3, [pc, #560]	; (800777c <_printf_float+0x308>)
 800754a:	e7da      	b.n	8007502 <_printf_float+0x8e>
 800754c:	6861      	ldr	r1, [r4, #4]
 800754e:	1c4b      	adds	r3, r1, #1
 8007550:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8007554:	a80a      	add	r0, sp, #40	; 0x28
 8007556:	d13e      	bne.n	80075d6 <_printf_float+0x162>
 8007558:	2306      	movs	r3, #6
 800755a:	6063      	str	r3, [r4, #4]
 800755c:	2300      	movs	r3, #0
 800755e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007562:	ab09      	add	r3, sp, #36	; 0x24
 8007564:	9300      	str	r3, [sp, #0]
 8007566:	ec49 8b10 	vmov	d0, r8, r9
 800756a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800756e:	6022      	str	r2, [r4, #0]
 8007570:	f8cd a004 	str.w	sl, [sp, #4]
 8007574:	6861      	ldr	r1, [r4, #4]
 8007576:	4628      	mov	r0, r5
 8007578:	f7ff fee8 	bl	800734c <__cvt>
 800757c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8007580:	2b47      	cmp	r3, #71	; 0x47
 8007582:	4680      	mov	r8, r0
 8007584:	d109      	bne.n	800759a <_printf_float+0x126>
 8007586:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007588:	1cd8      	adds	r0, r3, #3
 800758a:	db02      	blt.n	8007592 <_printf_float+0x11e>
 800758c:	6862      	ldr	r2, [r4, #4]
 800758e:	4293      	cmp	r3, r2
 8007590:	dd47      	ble.n	8007622 <_printf_float+0x1ae>
 8007592:	f1aa 0a02 	sub.w	sl, sl, #2
 8007596:	fa5f fa8a 	uxtb.w	sl, sl
 800759a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800759e:	9909      	ldr	r1, [sp, #36]	; 0x24
 80075a0:	d824      	bhi.n	80075ec <_printf_float+0x178>
 80075a2:	3901      	subs	r1, #1
 80075a4:	4652      	mov	r2, sl
 80075a6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80075aa:	9109      	str	r1, [sp, #36]	; 0x24
 80075ac:	f7ff ff2f 	bl	800740e <__exponent>
 80075b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80075b2:	1813      	adds	r3, r2, r0
 80075b4:	2a01      	cmp	r2, #1
 80075b6:	4681      	mov	r9, r0
 80075b8:	6123      	str	r3, [r4, #16]
 80075ba:	dc02      	bgt.n	80075c2 <_printf_float+0x14e>
 80075bc:	6822      	ldr	r2, [r4, #0]
 80075be:	07d1      	lsls	r1, r2, #31
 80075c0:	d501      	bpl.n	80075c6 <_printf_float+0x152>
 80075c2:	3301      	adds	r3, #1
 80075c4:	6123      	str	r3, [r4, #16]
 80075c6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d0a5      	beq.n	800751a <_printf_float+0xa6>
 80075ce:	232d      	movs	r3, #45	; 0x2d
 80075d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075d4:	e7a1      	b.n	800751a <_printf_float+0xa6>
 80075d6:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80075da:	f000 8177 	beq.w	80078cc <_printf_float+0x458>
 80075de:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80075e2:	d1bb      	bne.n	800755c <_printf_float+0xe8>
 80075e4:	2900      	cmp	r1, #0
 80075e6:	d1b9      	bne.n	800755c <_printf_float+0xe8>
 80075e8:	2301      	movs	r3, #1
 80075ea:	e7b6      	b.n	800755a <_printf_float+0xe6>
 80075ec:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80075f0:	d119      	bne.n	8007626 <_printf_float+0x1b2>
 80075f2:	2900      	cmp	r1, #0
 80075f4:	6863      	ldr	r3, [r4, #4]
 80075f6:	dd0c      	ble.n	8007612 <_printf_float+0x19e>
 80075f8:	6121      	str	r1, [r4, #16]
 80075fa:	b913      	cbnz	r3, 8007602 <_printf_float+0x18e>
 80075fc:	6822      	ldr	r2, [r4, #0]
 80075fe:	07d2      	lsls	r2, r2, #31
 8007600:	d502      	bpl.n	8007608 <_printf_float+0x194>
 8007602:	3301      	adds	r3, #1
 8007604:	440b      	add	r3, r1
 8007606:	6123      	str	r3, [r4, #16]
 8007608:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800760a:	65a3      	str	r3, [r4, #88]	; 0x58
 800760c:	f04f 0900 	mov.w	r9, #0
 8007610:	e7d9      	b.n	80075c6 <_printf_float+0x152>
 8007612:	b913      	cbnz	r3, 800761a <_printf_float+0x1a6>
 8007614:	6822      	ldr	r2, [r4, #0]
 8007616:	07d0      	lsls	r0, r2, #31
 8007618:	d501      	bpl.n	800761e <_printf_float+0x1aa>
 800761a:	3302      	adds	r3, #2
 800761c:	e7f3      	b.n	8007606 <_printf_float+0x192>
 800761e:	2301      	movs	r3, #1
 8007620:	e7f1      	b.n	8007606 <_printf_float+0x192>
 8007622:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8007626:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800762a:	4293      	cmp	r3, r2
 800762c:	db05      	blt.n	800763a <_printf_float+0x1c6>
 800762e:	6822      	ldr	r2, [r4, #0]
 8007630:	6123      	str	r3, [r4, #16]
 8007632:	07d1      	lsls	r1, r2, #31
 8007634:	d5e8      	bpl.n	8007608 <_printf_float+0x194>
 8007636:	3301      	adds	r3, #1
 8007638:	e7e5      	b.n	8007606 <_printf_float+0x192>
 800763a:	2b00      	cmp	r3, #0
 800763c:	bfd4      	ite	le
 800763e:	f1c3 0302 	rsble	r3, r3, #2
 8007642:	2301      	movgt	r3, #1
 8007644:	4413      	add	r3, r2
 8007646:	e7de      	b.n	8007606 <_printf_float+0x192>
 8007648:	6823      	ldr	r3, [r4, #0]
 800764a:	055a      	lsls	r2, r3, #21
 800764c:	d407      	bmi.n	800765e <_printf_float+0x1ea>
 800764e:	6923      	ldr	r3, [r4, #16]
 8007650:	4642      	mov	r2, r8
 8007652:	4631      	mov	r1, r6
 8007654:	4628      	mov	r0, r5
 8007656:	47b8      	blx	r7
 8007658:	3001      	adds	r0, #1
 800765a:	d12b      	bne.n	80076b4 <_printf_float+0x240>
 800765c:	e767      	b.n	800752e <_printf_float+0xba>
 800765e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007662:	f240 80dc 	bls.w	800781e <_printf_float+0x3aa>
 8007666:	2200      	movs	r2, #0
 8007668:	2300      	movs	r3, #0
 800766a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800766e:	f7f9 fa2b 	bl	8000ac8 <__aeabi_dcmpeq>
 8007672:	2800      	cmp	r0, #0
 8007674:	d033      	beq.n	80076de <_printf_float+0x26a>
 8007676:	2301      	movs	r3, #1
 8007678:	4a41      	ldr	r2, [pc, #260]	; (8007780 <_printf_float+0x30c>)
 800767a:	4631      	mov	r1, r6
 800767c:	4628      	mov	r0, r5
 800767e:	47b8      	blx	r7
 8007680:	3001      	adds	r0, #1
 8007682:	f43f af54 	beq.w	800752e <_printf_float+0xba>
 8007686:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800768a:	429a      	cmp	r2, r3
 800768c:	db02      	blt.n	8007694 <_printf_float+0x220>
 800768e:	6823      	ldr	r3, [r4, #0]
 8007690:	07d8      	lsls	r0, r3, #31
 8007692:	d50f      	bpl.n	80076b4 <_printf_float+0x240>
 8007694:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007698:	4631      	mov	r1, r6
 800769a:	4628      	mov	r0, r5
 800769c:	47b8      	blx	r7
 800769e:	3001      	adds	r0, #1
 80076a0:	f43f af45 	beq.w	800752e <_printf_float+0xba>
 80076a4:	f04f 0800 	mov.w	r8, #0
 80076a8:	f104 091a 	add.w	r9, r4, #26
 80076ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076ae:	3b01      	subs	r3, #1
 80076b0:	4543      	cmp	r3, r8
 80076b2:	dc09      	bgt.n	80076c8 <_printf_float+0x254>
 80076b4:	6823      	ldr	r3, [r4, #0]
 80076b6:	079b      	lsls	r3, r3, #30
 80076b8:	f100 8103 	bmi.w	80078c2 <_printf_float+0x44e>
 80076bc:	68e0      	ldr	r0, [r4, #12]
 80076be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076c0:	4298      	cmp	r0, r3
 80076c2:	bfb8      	it	lt
 80076c4:	4618      	movlt	r0, r3
 80076c6:	e734      	b.n	8007532 <_printf_float+0xbe>
 80076c8:	2301      	movs	r3, #1
 80076ca:	464a      	mov	r2, r9
 80076cc:	4631      	mov	r1, r6
 80076ce:	4628      	mov	r0, r5
 80076d0:	47b8      	blx	r7
 80076d2:	3001      	adds	r0, #1
 80076d4:	f43f af2b 	beq.w	800752e <_printf_float+0xba>
 80076d8:	f108 0801 	add.w	r8, r8, #1
 80076dc:	e7e6      	b.n	80076ac <_printf_float+0x238>
 80076de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	dc2b      	bgt.n	800773c <_printf_float+0x2c8>
 80076e4:	2301      	movs	r3, #1
 80076e6:	4a26      	ldr	r2, [pc, #152]	; (8007780 <_printf_float+0x30c>)
 80076e8:	4631      	mov	r1, r6
 80076ea:	4628      	mov	r0, r5
 80076ec:	47b8      	blx	r7
 80076ee:	3001      	adds	r0, #1
 80076f0:	f43f af1d 	beq.w	800752e <_printf_float+0xba>
 80076f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076f6:	b923      	cbnz	r3, 8007702 <_printf_float+0x28e>
 80076f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076fa:	b913      	cbnz	r3, 8007702 <_printf_float+0x28e>
 80076fc:	6823      	ldr	r3, [r4, #0]
 80076fe:	07d9      	lsls	r1, r3, #31
 8007700:	d5d8      	bpl.n	80076b4 <_printf_float+0x240>
 8007702:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007706:	4631      	mov	r1, r6
 8007708:	4628      	mov	r0, r5
 800770a:	47b8      	blx	r7
 800770c:	3001      	adds	r0, #1
 800770e:	f43f af0e 	beq.w	800752e <_printf_float+0xba>
 8007712:	f04f 0900 	mov.w	r9, #0
 8007716:	f104 0a1a 	add.w	sl, r4, #26
 800771a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800771c:	425b      	negs	r3, r3
 800771e:	454b      	cmp	r3, r9
 8007720:	dc01      	bgt.n	8007726 <_printf_float+0x2b2>
 8007722:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007724:	e794      	b.n	8007650 <_printf_float+0x1dc>
 8007726:	2301      	movs	r3, #1
 8007728:	4652      	mov	r2, sl
 800772a:	4631      	mov	r1, r6
 800772c:	4628      	mov	r0, r5
 800772e:	47b8      	blx	r7
 8007730:	3001      	adds	r0, #1
 8007732:	f43f aefc 	beq.w	800752e <_printf_float+0xba>
 8007736:	f109 0901 	add.w	r9, r9, #1
 800773a:	e7ee      	b.n	800771a <_printf_float+0x2a6>
 800773c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800773e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007740:	429a      	cmp	r2, r3
 8007742:	bfa8      	it	ge
 8007744:	461a      	movge	r2, r3
 8007746:	2a00      	cmp	r2, #0
 8007748:	4691      	mov	r9, r2
 800774a:	dd07      	ble.n	800775c <_printf_float+0x2e8>
 800774c:	4613      	mov	r3, r2
 800774e:	4631      	mov	r1, r6
 8007750:	4642      	mov	r2, r8
 8007752:	4628      	mov	r0, r5
 8007754:	47b8      	blx	r7
 8007756:	3001      	adds	r0, #1
 8007758:	f43f aee9 	beq.w	800752e <_printf_float+0xba>
 800775c:	f104 031a 	add.w	r3, r4, #26
 8007760:	f04f 0b00 	mov.w	fp, #0
 8007764:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007768:	9306      	str	r3, [sp, #24]
 800776a:	e015      	b.n	8007798 <_printf_float+0x324>
 800776c:	7fefffff 	.word	0x7fefffff
 8007770:	0800a9d0 	.word	0x0800a9d0
 8007774:	0800a9cc 	.word	0x0800a9cc
 8007778:	0800a9d8 	.word	0x0800a9d8
 800777c:	0800a9d4 	.word	0x0800a9d4
 8007780:	0800a9dc 	.word	0x0800a9dc
 8007784:	2301      	movs	r3, #1
 8007786:	9a06      	ldr	r2, [sp, #24]
 8007788:	4631      	mov	r1, r6
 800778a:	4628      	mov	r0, r5
 800778c:	47b8      	blx	r7
 800778e:	3001      	adds	r0, #1
 8007790:	f43f aecd 	beq.w	800752e <_printf_float+0xba>
 8007794:	f10b 0b01 	add.w	fp, fp, #1
 8007798:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800779c:	ebaa 0309 	sub.w	r3, sl, r9
 80077a0:	455b      	cmp	r3, fp
 80077a2:	dcef      	bgt.n	8007784 <_printf_float+0x310>
 80077a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80077a8:	429a      	cmp	r2, r3
 80077aa:	44d0      	add	r8, sl
 80077ac:	db15      	blt.n	80077da <_printf_float+0x366>
 80077ae:	6823      	ldr	r3, [r4, #0]
 80077b0:	07da      	lsls	r2, r3, #31
 80077b2:	d412      	bmi.n	80077da <_printf_float+0x366>
 80077b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80077b8:	eba3 020a 	sub.w	r2, r3, sl
 80077bc:	eba3 0a01 	sub.w	sl, r3, r1
 80077c0:	4592      	cmp	sl, r2
 80077c2:	bfa8      	it	ge
 80077c4:	4692      	movge	sl, r2
 80077c6:	f1ba 0f00 	cmp.w	sl, #0
 80077ca:	dc0e      	bgt.n	80077ea <_printf_float+0x376>
 80077cc:	f04f 0800 	mov.w	r8, #0
 80077d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80077d4:	f104 091a 	add.w	r9, r4, #26
 80077d8:	e019      	b.n	800780e <_printf_float+0x39a>
 80077da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80077de:	4631      	mov	r1, r6
 80077e0:	4628      	mov	r0, r5
 80077e2:	47b8      	blx	r7
 80077e4:	3001      	adds	r0, #1
 80077e6:	d1e5      	bne.n	80077b4 <_printf_float+0x340>
 80077e8:	e6a1      	b.n	800752e <_printf_float+0xba>
 80077ea:	4653      	mov	r3, sl
 80077ec:	4642      	mov	r2, r8
 80077ee:	4631      	mov	r1, r6
 80077f0:	4628      	mov	r0, r5
 80077f2:	47b8      	blx	r7
 80077f4:	3001      	adds	r0, #1
 80077f6:	d1e9      	bne.n	80077cc <_printf_float+0x358>
 80077f8:	e699      	b.n	800752e <_printf_float+0xba>
 80077fa:	2301      	movs	r3, #1
 80077fc:	464a      	mov	r2, r9
 80077fe:	4631      	mov	r1, r6
 8007800:	4628      	mov	r0, r5
 8007802:	47b8      	blx	r7
 8007804:	3001      	adds	r0, #1
 8007806:	f43f ae92 	beq.w	800752e <_printf_float+0xba>
 800780a:	f108 0801 	add.w	r8, r8, #1
 800780e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007812:	1a9b      	subs	r3, r3, r2
 8007814:	eba3 030a 	sub.w	r3, r3, sl
 8007818:	4543      	cmp	r3, r8
 800781a:	dcee      	bgt.n	80077fa <_printf_float+0x386>
 800781c:	e74a      	b.n	80076b4 <_printf_float+0x240>
 800781e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007820:	2a01      	cmp	r2, #1
 8007822:	dc01      	bgt.n	8007828 <_printf_float+0x3b4>
 8007824:	07db      	lsls	r3, r3, #31
 8007826:	d53a      	bpl.n	800789e <_printf_float+0x42a>
 8007828:	2301      	movs	r3, #1
 800782a:	4642      	mov	r2, r8
 800782c:	4631      	mov	r1, r6
 800782e:	4628      	mov	r0, r5
 8007830:	47b8      	blx	r7
 8007832:	3001      	adds	r0, #1
 8007834:	f43f ae7b 	beq.w	800752e <_printf_float+0xba>
 8007838:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800783c:	4631      	mov	r1, r6
 800783e:	4628      	mov	r0, r5
 8007840:	47b8      	blx	r7
 8007842:	3001      	adds	r0, #1
 8007844:	f108 0801 	add.w	r8, r8, #1
 8007848:	f43f ae71 	beq.w	800752e <_printf_float+0xba>
 800784c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800784e:	2200      	movs	r2, #0
 8007850:	f103 3aff 	add.w	sl, r3, #4294967295
 8007854:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007858:	2300      	movs	r3, #0
 800785a:	f7f9 f935 	bl	8000ac8 <__aeabi_dcmpeq>
 800785e:	b9c8      	cbnz	r0, 8007894 <_printf_float+0x420>
 8007860:	4653      	mov	r3, sl
 8007862:	4642      	mov	r2, r8
 8007864:	4631      	mov	r1, r6
 8007866:	4628      	mov	r0, r5
 8007868:	47b8      	blx	r7
 800786a:	3001      	adds	r0, #1
 800786c:	d10e      	bne.n	800788c <_printf_float+0x418>
 800786e:	e65e      	b.n	800752e <_printf_float+0xba>
 8007870:	2301      	movs	r3, #1
 8007872:	4652      	mov	r2, sl
 8007874:	4631      	mov	r1, r6
 8007876:	4628      	mov	r0, r5
 8007878:	47b8      	blx	r7
 800787a:	3001      	adds	r0, #1
 800787c:	f43f ae57 	beq.w	800752e <_printf_float+0xba>
 8007880:	f108 0801 	add.w	r8, r8, #1
 8007884:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007886:	3b01      	subs	r3, #1
 8007888:	4543      	cmp	r3, r8
 800788a:	dcf1      	bgt.n	8007870 <_printf_float+0x3fc>
 800788c:	464b      	mov	r3, r9
 800788e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007892:	e6de      	b.n	8007652 <_printf_float+0x1de>
 8007894:	f04f 0800 	mov.w	r8, #0
 8007898:	f104 0a1a 	add.w	sl, r4, #26
 800789c:	e7f2      	b.n	8007884 <_printf_float+0x410>
 800789e:	2301      	movs	r3, #1
 80078a0:	e7df      	b.n	8007862 <_printf_float+0x3ee>
 80078a2:	2301      	movs	r3, #1
 80078a4:	464a      	mov	r2, r9
 80078a6:	4631      	mov	r1, r6
 80078a8:	4628      	mov	r0, r5
 80078aa:	47b8      	blx	r7
 80078ac:	3001      	adds	r0, #1
 80078ae:	f43f ae3e 	beq.w	800752e <_printf_float+0xba>
 80078b2:	f108 0801 	add.w	r8, r8, #1
 80078b6:	68e3      	ldr	r3, [r4, #12]
 80078b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80078ba:	1a9b      	subs	r3, r3, r2
 80078bc:	4543      	cmp	r3, r8
 80078be:	dcf0      	bgt.n	80078a2 <_printf_float+0x42e>
 80078c0:	e6fc      	b.n	80076bc <_printf_float+0x248>
 80078c2:	f04f 0800 	mov.w	r8, #0
 80078c6:	f104 0919 	add.w	r9, r4, #25
 80078ca:	e7f4      	b.n	80078b6 <_printf_float+0x442>
 80078cc:	2900      	cmp	r1, #0
 80078ce:	f43f ae8b 	beq.w	80075e8 <_printf_float+0x174>
 80078d2:	2300      	movs	r3, #0
 80078d4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80078d8:	ab09      	add	r3, sp, #36	; 0x24
 80078da:	9300      	str	r3, [sp, #0]
 80078dc:	ec49 8b10 	vmov	d0, r8, r9
 80078e0:	6022      	str	r2, [r4, #0]
 80078e2:	f8cd a004 	str.w	sl, [sp, #4]
 80078e6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80078ea:	4628      	mov	r0, r5
 80078ec:	f7ff fd2e 	bl	800734c <__cvt>
 80078f0:	4680      	mov	r8, r0
 80078f2:	e648      	b.n	8007586 <_printf_float+0x112>

080078f4 <_printf_common>:
 80078f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078f8:	4691      	mov	r9, r2
 80078fa:	461f      	mov	r7, r3
 80078fc:	688a      	ldr	r2, [r1, #8]
 80078fe:	690b      	ldr	r3, [r1, #16]
 8007900:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007904:	4293      	cmp	r3, r2
 8007906:	bfb8      	it	lt
 8007908:	4613      	movlt	r3, r2
 800790a:	f8c9 3000 	str.w	r3, [r9]
 800790e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007912:	4606      	mov	r6, r0
 8007914:	460c      	mov	r4, r1
 8007916:	b112      	cbz	r2, 800791e <_printf_common+0x2a>
 8007918:	3301      	adds	r3, #1
 800791a:	f8c9 3000 	str.w	r3, [r9]
 800791e:	6823      	ldr	r3, [r4, #0]
 8007920:	0699      	lsls	r1, r3, #26
 8007922:	bf42      	ittt	mi
 8007924:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007928:	3302      	addmi	r3, #2
 800792a:	f8c9 3000 	strmi.w	r3, [r9]
 800792e:	6825      	ldr	r5, [r4, #0]
 8007930:	f015 0506 	ands.w	r5, r5, #6
 8007934:	d107      	bne.n	8007946 <_printf_common+0x52>
 8007936:	f104 0a19 	add.w	sl, r4, #25
 800793a:	68e3      	ldr	r3, [r4, #12]
 800793c:	f8d9 2000 	ldr.w	r2, [r9]
 8007940:	1a9b      	subs	r3, r3, r2
 8007942:	42ab      	cmp	r3, r5
 8007944:	dc28      	bgt.n	8007998 <_printf_common+0xa4>
 8007946:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800794a:	6822      	ldr	r2, [r4, #0]
 800794c:	3300      	adds	r3, #0
 800794e:	bf18      	it	ne
 8007950:	2301      	movne	r3, #1
 8007952:	0692      	lsls	r2, r2, #26
 8007954:	d42d      	bmi.n	80079b2 <_printf_common+0xbe>
 8007956:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800795a:	4639      	mov	r1, r7
 800795c:	4630      	mov	r0, r6
 800795e:	47c0      	blx	r8
 8007960:	3001      	adds	r0, #1
 8007962:	d020      	beq.n	80079a6 <_printf_common+0xb2>
 8007964:	6823      	ldr	r3, [r4, #0]
 8007966:	68e5      	ldr	r5, [r4, #12]
 8007968:	f8d9 2000 	ldr.w	r2, [r9]
 800796c:	f003 0306 	and.w	r3, r3, #6
 8007970:	2b04      	cmp	r3, #4
 8007972:	bf08      	it	eq
 8007974:	1aad      	subeq	r5, r5, r2
 8007976:	68a3      	ldr	r3, [r4, #8]
 8007978:	6922      	ldr	r2, [r4, #16]
 800797a:	bf0c      	ite	eq
 800797c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007980:	2500      	movne	r5, #0
 8007982:	4293      	cmp	r3, r2
 8007984:	bfc4      	itt	gt
 8007986:	1a9b      	subgt	r3, r3, r2
 8007988:	18ed      	addgt	r5, r5, r3
 800798a:	f04f 0900 	mov.w	r9, #0
 800798e:	341a      	adds	r4, #26
 8007990:	454d      	cmp	r5, r9
 8007992:	d11a      	bne.n	80079ca <_printf_common+0xd6>
 8007994:	2000      	movs	r0, #0
 8007996:	e008      	b.n	80079aa <_printf_common+0xb6>
 8007998:	2301      	movs	r3, #1
 800799a:	4652      	mov	r2, sl
 800799c:	4639      	mov	r1, r7
 800799e:	4630      	mov	r0, r6
 80079a0:	47c0      	blx	r8
 80079a2:	3001      	adds	r0, #1
 80079a4:	d103      	bne.n	80079ae <_printf_common+0xba>
 80079a6:	f04f 30ff 	mov.w	r0, #4294967295
 80079aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079ae:	3501      	adds	r5, #1
 80079b0:	e7c3      	b.n	800793a <_printf_common+0x46>
 80079b2:	18e1      	adds	r1, r4, r3
 80079b4:	1c5a      	adds	r2, r3, #1
 80079b6:	2030      	movs	r0, #48	; 0x30
 80079b8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80079bc:	4422      	add	r2, r4
 80079be:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80079c2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80079c6:	3302      	adds	r3, #2
 80079c8:	e7c5      	b.n	8007956 <_printf_common+0x62>
 80079ca:	2301      	movs	r3, #1
 80079cc:	4622      	mov	r2, r4
 80079ce:	4639      	mov	r1, r7
 80079d0:	4630      	mov	r0, r6
 80079d2:	47c0      	blx	r8
 80079d4:	3001      	adds	r0, #1
 80079d6:	d0e6      	beq.n	80079a6 <_printf_common+0xb2>
 80079d8:	f109 0901 	add.w	r9, r9, #1
 80079dc:	e7d8      	b.n	8007990 <_printf_common+0x9c>
	...

080079e0 <_printf_i>:
 80079e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80079e4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80079e8:	460c      	mov	r4, r1
 80079ea:	7e09      	ldrb	r1, [r1, #24]
 80079ec:	b085      	sub	sp, #20
 80079ee:	296e      	cmp	r1, #110	; 0x6e
 80079f0:	4617      	mov	r7, r2
 80079f2:	4606      	mov	r6, r0
 80079f4:	4698      	mov	r8, r3
 80079f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80079f8:	f000 80b3 	beq.w	8007b62 <_printf_i+0x182>
 80079fc:	d822      	bhi.n	8007a44 <_printf_i+0x64>
 80079fe:	2963      	cmp	r1, #99	; 0x63
 8007a00:	d036      	beq.n	8007a70 <_printf_i+0x90>
 8007a02:	d80a      	bhi.n	8007a1a <_printf_i+0x3a>
 8007a04:	2900      	cmp	r1, #0
 8007a06:	f000 80b9 	beq.w	8007b7c <_printf_i+0x19c>
 8007a0a:	2958      	cmp	r1, #88	; 0x58
 8007a0c:	f000 8083 	beq.w	8007b16 <_printf_i+0x136>
 8007a10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a14:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007a18:	e032      	b.n	8007a80 <_printf_i+0xa0>
 8007a1a:	2964      	cmp	r1, #100	; 0x64
 8007a1c:	d001      	beq.n	8007a22 <_printf_i+0x42>
 8007a1e:	2969      	cmp	r1, #105	; 0x69
 8007a20:	d1f6      	bne.n	8007a10 <_printf_i+0x30>
 8007a22:	6820      	ldr	r0, [r4, #0]
 8007a24:	6813      	ldr	r3, [r2, #0]
 8007a26:	0605      	lsls	r5, r0, #24
 8007a28:	f103 0104 	add.w	r1, r3, #4
 8007a2c:	d52a      	bpl.n	8007a84 <_printf_i+0xa4>
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	6011      	str	r1, [r2, #0]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	da03      	bge.n	8007a3e <_printf_i+0x5e>
 8007a36:	222d      	movs	r2, #45	; 0x2d
 8007a38:	425b      	negs	r3, r3
 8007a3a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007a3e:	486f      	ldr	r0, [pc, #444]	; (8007bfc <_printf_i+0x21c>)
 8007a40:	220a      	movs	r2, #10
 8007a42:	e039      	b.n	8007ab8 <_printf_i+0xd8>
 8007a44:	2973      	cmp	r1, #115	; 0x73
 8007a46:	f000 809d 	beq.w	8007b84 <_printf_i+0x1a4>
 8007a4a:	d808      	bhi.n	8007a5e <_printf_i+0x7e>
 8007a4c:	296f      	cmp	r1, #111	; 0x6f
 8007a4e:	d020      	beq.n	8007a92 <_printf_i+0xb2>
 8007a50:	2970      	cmp	r1, #112	; 0x70
 8007a52:	d1dd      	bne.n	8007a10 <_printf_i+0x30>
 8007a54:	6823      	ldr	r3, [r4, #0]
 8007a56:	f043 0320 	orr.w	r3, r3, #32
 8007a5a:	6023      	str	r3, [r4, #0]
 8007a5c:	e003      	b.n	8007a66 <_printf_i+0x86>
 8007a5e:	2975      	cmp	r1, #117	; 0x75
 8007a60:	d017      	beq.n	8007a92 <_printf_i+0xb2>
 8007a62:	2978      	cmp	r1, #120	; 0x78
 8007a64:	d1d4      	bne.n	8007a10 <_printf_i+0x30>
 8007a66:	2378      	movs	r3, #120	; 0x78
 8007a68:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007a6c:	4864      	ldr	r0, [pc, #400]	; (8007c00 <_printf_i+0x220>)
 8007a6e:	e055      	b.n	8007b1c <_printf_i+0x13c>
 8007a70:	6813      	ldr	r3, [r2, #0]
 8007a72:	1d19      	adds	r1, r3, #4
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	6011      	str	r1, [r2, #0]
 8007a78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a80:	2301      	movs	r3, #1
 8007a82:	e08c      	b.n	8007b9e <_printf_i+0x1be>
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	6011      	str	r1, [r2, #0]
 8007a88:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007a8c:	bf18      	it	ne
 8007a8e:	b21b      	sxthne	r3, r3
 8007a90:	e7cf      	b.n	8007a32 <_printf_i+0x52>
 8007a92:	6813      	ldr	r3, [r2, #0]
 8007a94:	6825      	ldr	r5, [r4, #0]
 8007a96:	1d18      	adds	r0, r3, #4
 8007a98:	6010      	str	r0, [r2, #0]
 8007a9a:	0628      	lsls	r0, r5, #24
 8007a9c:	d501      	bpl.n	8007aa2 <_printf_i+0xc2>
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	e002      	b.n	8007aa8 <_printf_i+0xc8>
 8007aa2:	0668      	lsls	r0, r5, #25
 8007aa4:	d5fb      	bpl.n	8007a9e <_printf_i+0xbe>
 8007aa6:	881b      	ldrh	r3, [r3, #0]
 8007aa8:	4854      	ldr	r0, [pc, #336]	; (8007bfc <_printf_i+0x21c>)
 8007aaa:	296f      	cmp	r1, #111	; 0x6f
 8007aac:	bf14      	ite	ne
 8007aae:	220a      	movne	r2, #10
 8007ab0:	2208      	moveq	r2, #8
 8007ab2:	2100      	movs	r1, #0
 8007ab4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007ab8:	6865      	ldr	r5, [r4, #4]
 8007aba:	60a5      	str	r5, [r4, #8]
 8007abc:	2d00      	cmp	r5, #0
 8007abe:	f2c0 8095 	blt.w	8007bec <_printf_i+0x20c>
 8007ac2:	6821      	ldr	r1, [r4, #0]
 8007ac4:	f021 0104 	bic.w	r1, r1, #4
 8007ac8:	6021      	str	r1, [r4, #0]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d13d      	bne.n	8007b4a <_printf_i+0x16a>
 8007ace:	2d00      	cmp	r5, #0
 8007ad0:	f040 808e 	bne.w	8007bf0 <_printf_i+0x210>
 8007ad4:	4665      	mov	r5, ip
 8007ad6:	2a08      	cmp	r2, #8
 8007ad8:	d10b      	bne.n	8007af2 <_printf_i+0x112>
 8007ada:	6823      	ldr	r3, [r4, #0]
 8007adc:	07db      	lsls	r3, r3, #31
 8007ade:	d508      	bpl.n	8007af2 <_printf_i+0x112>
 8007ae0:	6923      	ldr	r3, [r4, #16]
 8007ae2:	6862      	ldr	r2, [r4, #4]
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	bfde      	ittt	le
 8007ae8:	2330      	movle	r3, #48	; 0x30
 8007aea:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007aee:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007af2:	ebac 0305 	sub.w	r3, ip, r5
 8007af6:	6123      	str	r3, [r4, #16]
 8007af8:	f8cd 8000 	str.w	r8, [sp]
 8007afc:	463b      	mov	r3, r7
 8007afe:	aa03      	add	r2, sp, #12
 8007b00:	4621      	mov	r1, r4
 8007b02:	4630      	mov	r0, r6
 8007b04:	f7ff fef6 	bl	80078f4 <_printf_common>
 8007b08:	3001      	adds	r0, #1
 8007b0a:	d14d      	bne.n	8007ba8 <_printf_i+0x1c8>
 8007b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b10:	b005      	add	sp, #20
 8007b12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007b16:	4839      	ldr	r0, [pc, #228]	; (8007bfc <_printf_i+0x21c>)
 8007b18:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007b1c:	6813      	ldr	r3, [r2, #0]
 8007b1e:	6821      	ldr	r1, [r4, #0]
 8007b20:	1d1d      	adds	r5, r3, #4
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	6015      	str	r5, [r2, #0]
 8007b26:	060a      	lsls	r2, r1, #24
 8007b28:	d50b      	bpl.n	8007b42 <_printf_i+0x162>
 8007b2a:	07ca      	lsls	r2, r1, #31
 8007b2c:	bf44      	itt	mi
 8007b2e:	f041 0120 	orrmi.w	r1, r1, #32
 8007b32:	6021      	strmi	r1, [r4, #0]
 8007b34:	b91b      	cbnz	r3, 8007b3e <_printf_i+0x15e>
 8007b36:	6822      	ldr	r2, [r4, #0]
 8007b38:	f022 0220 	bic.w	r2, r2, #32
 8007b3c:	6022      	str	r2, [r4, #0]
 8007b3e:	2210      	movs	r2, #16
 8007b40:	e7b7      	b.n	8007ab2 <_printf_i+0xd2>
 8007b42:	064d      	lsls	r5, r1, #25
 8007b44:	bf48      	it	mi
 8007b46:	b29b      	uxthmi	r3, r3
 8007b48:	e7ef      	b.n	8007b2a <_printf_i+0x14a>
 8007b4a:	4665      	mov	r5, ip
 8007b4c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007b50:	fb02 3311 	mls	r3, r2, r1, r3
 8007b54:	5cc3      	ldrb	r3, [r0, r3]
 8007b56:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007b5a:	460b      	mov	r3, r1
 8007b5c:	2900      	cmp	r1, #0
 8007b5e:	d1f5      	bne.n	8007b4c <_printf_i+0x16c>
 8007b60:	e7b9      	b.n	8007ad6 <_printf_i+0xf6>
 8007b62:	6813      	ldr	r3, [r2, #0]
 8007b64:	6825      	ldr	r5, [r4, #0]
 8007b66:	6961      	ldr	r1, [r4, #20]
 8007b68:	1d18      	adds	r0, r3, #4
 8007b6a:	6010      	str	r0, [r2, #0]
 8007b6c:	0628      	lsls	r0, r5, #24
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	d501      	bpl.n	8007b76 <_printf_i+0x196>
 8007b72:	6019      	str	r1, [r3, #0]
 8007b74:	e002      	b.n	8007b7c <_printf_i+0x19c>
 8007b76:	066a      	lsls	r2, r5, #25
 8007b78:	d5fb      	bpl.n	8007b72 <_printf_i+0x192>
 8007b7a:	8019      	strh	r1, [r3, #0]
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	6123      	str	r3, [r4, #16]
 8007b80:	4665      	mov	r5, ip
 8007b82:	e7b9      	b.n	8007af8 <_printf_i+0x118>
 8007b84:	6813      	ldr	r3, [r2, #0]
 8007b86:	1d19      	adds	r1, r3, #4
 8007b88:	6011      	str	r1, [r2, #0]
 8007b8a:	681d      	ldr	r5, [r3, #0]
 8007b8c:	6862      	ldr	r2, [r4, #4]
 8007b8e:	2100      	movs	r1, #0
 8007b90:	4628      	mov	r0, r5
 8007b92:	f7f8 fb25 	bl	80001e0 <memchr>
 8007b96:	b108      	cbz	r0, 8007b9c <_printf_i+0x1bc>
 8007b98:	1b40      	subs	r0, r0, r5
 8007b9a:	6060      	str	r0, [r4, #4]
 8007b9c:	6863      	ldr	r3, [r4, #4]
 8007b9e:	6123      	str	r3, [r4, #16]
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ba6:	e7a7      	b.n	8007af8 <_printf_i+0x118>
 8007ba8:	6923      	ldr	r3, [r4, #16]
 8007baa:	462a      	mov	r2, r5
 8007bac:	4639      	mov	r1, r7
 8007bae:	4630      	mov	r0, r6
 8007bb0:	47c0      	blx	r8
 8007bb2:	3001      	adds	r0, #1
 8007bb4:	d0aa      	beq.n	8007b0c <_printf_i+0x12c>
 8007bb6:	6823      	ldr	r3, [r4, #0]
 8007bb8:	079b      	lsls	r3, r3, #30
 8007bba:	d413      	bmi.n	8007be4 <_printf_i+0x204>
 8007bbc:	68e0      	ldr	r0, [r4, #12]
 8007bbe:	9b03      	ldr	r3, [sp, #12]
 8007bc0:	4298      	cmp	r0, r3
 8007bc2:	bfb8      	it	lt
 8007bc4:	4618      	movlt	r0, r3
 8007bc6:	e7a3      	b.n	8007b10 <_printf_i+0x130>
 8007bc8:	2301      	movs	r3, #1
 8007bca:	464a      	mov	r2, r9
 8007bcc:	4639      	mov	r1, r7
 8007bce:	4630      	mov	r0, r6
 8007bd0:	47c0      	blx	r8
 8007bd2:	3001      	adds	r0, #1
 8007bd4:	d09a      	beq.n	8007b0c <_printf_i+0x12c>
 8007bd6:	3501      	adds	r5, #1
 8007bd8:	68e3      	ldr	r3, [r4, #12]
 8007bda:	9a03      	ldr	r2, [sp, #12]
 8007bdc:	1a9b      	subs	r3, r3, r2
 8007bde:	42ab      	cmp	r3, r5
 8007be0:	dcf2      	bgt.n	8007bc8 <_printf_i+0x1e8>
 8007be2:	e7eb      	b.n	8007bbc <_printf_i+0x1dc>
 8007be4:	2500      	movs	r5, #0
 8007be6:	f104 0919 	add.w	r9, r4, #25
 8007bea:	e7f5      	b.n	8007bd8 <_printf_i+0x1f8>
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d1ac      	bne.n	8007b4a <_printf_i+0x16a>
 8007bf0:	7803      	ldrb	r3, [r0, #0]
 8007bf2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007bf6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007bfa:	e76c      	b.n	8007ad6 <_printf_i+0xf6>
 8007bfc:	0800a9de 	.word	0x0800a9de
 8007c00:	0800a9ef 	.word	0x0800a9ef

08007c04 <iprintf>:
 8007c04:	b40f      	push	{r0, r1, r2, r3}
 8007c06:	4b0a      	ldr	r3, [pc, #40]	; (8007c30 <iprintf+0x2c>)
 8007c08:	b513      	push	{r0, r1, r4, lr}
 8007c0a:	681c      	ldr	r4, [r3, #0]
 8007c0c:	b124      	cbz	r4, 8007c18 <iprintf+0x14>
 8007c0e:	69a3      	ldr	r3, [r4, #24]
 8007c10:	b913      	cbnz	r3, 8007c18 <iprintf+0x14>
 8007c12:	4620      	mov	r0, r4
 8007c14:	f001 f91c 	bl	8008e50 <__sinit>
 8007c18:	ab05      	add	r3, sp, #20
 8007c1a:	9a04      	ldr	r2, [sp, #16]
 8007c1c:	68a1      	ldr	r1, [r4, #8]
 8007c1e:	9301      	str	r3, [sp, #4]
 8007c20:	4620      	mov	r0, r4
 8007c22:	f001 fddf 	bl	80097e4 <_vfiprintf_r>
 8007c26:	b002      	add	sp, #8
 8007c28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c2c:	b004      	add	sp, #16
 8007c2e:	4770      	bx	lr
 8007c30:	20000014 	.word	0x20000014

08007c34 <_puts_r>:
 8007c34:	b570      	push	{r4, r5, r6, lr}
 8007c36:	460e      	mov	r6, r1
 8007c38:	4605      	mov	r5, r0
 8007c3a:	b118      	cbz	r0, 8007c44 <_puts_r+0x10>
 8007c3c:	6983      	ldr	r3, [r0, #24]
 8007c3e:	b90b      	cbnz	r3, 8007c44 <_puts_r+0x10>
 8007c40:	f001 f906 	bl	8008e50 <__sinit>
 8007c44:	69ab      	ldr	r3, [r5, #24]
 8007c46:	68ac      	ldr	r4, [r5, #8]
 8007c48:	b913      	cbnz	r3, 8007c50 <_puts_r+0x1c>
 8007c4a:	4628      	mov	r0, r5
 8007c4c:	f001 f900 	bl	8008e50 <__sinit>
 8007c50:	4b23      	ldr	r3, [pc, #140]	; (8007ce0 <_puts_r+0xac>)
 8007c52:	429c      	cmp	r4, r3
 8007c54:	d117      	bne.n	8007c86 <_puts_r+0x52>
 8007c56:	686c      	ldr	r4, [r5, #4]
 8007c58:	89a3      	ldrh	r3, [r4, #12]
 8007c5a:	071b      	lsls	r3, r3, #28
 8007c5c:	d51d      	bpl.n	8007c9a <_puts_r+0x66>
 8007c5e:	6923      	ldr	r3, [r4, #16]
 8007c60:	b1db      	cbz	r3, 8007c9a <_puts_r+0x66>
 8007c62:	3e01      	subs	r6, #1
 8007c64:	68a3      	ldr	r3, [r4, #8]
 8007c66:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007c6a:	3b01      	subs	r3, #1
 8007c6c:	60a3      	str	r3, [r4, #8]
 8007c6e:	b9e9      	cbnz	r1, 8007cac <_puts_r+0x78>
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	da2e      	bge.n	8007cd2 <_puts_r+0x9e>
 8007c74:	4622      	mov	r2, r4
 8007c76:	210a      	movs	r1, #10
 8007c78:	4628      	mov	r0, r5
 8007c7a:	f000 f8f5 	bl	8007e68 <__swbuf_r>
 8007c7e:	3001      	adds	r0, #1
 8007c80:	d011      	beq.n	8007ca6 <_puts_r+0x72>
 8007c82:	200a      	movs	r0, #10
 8007c84:	e011      	b.n	8007caa <_puts_r+0x76>
 8007c86:	4b17      	ldr	r3, [pc, #92]	; (8007ce4 <_puts_r+0xb0>)
 8007c88:	429c      	cmp	r4, r3
 8007c8a:	d101      	bne.n	8007c90 <_puts_r+0x5c>
 8007c8c:	68ac      	ldr	r4, [r5, #8]
 8007c8e:	e7e3      	b.n	8007c58 <_puts_r+0x24>
 8007c90:	4b15      	ldr	r3, [pc, #84]	; (8007ce8 <_puts_r+0xb4>)
 8007c92:	429c      	cmp	r4, r3
 8007c94:	bf08      	it	eq
 8007c96:	68ec      	ldreq	r4, [r5, #12]
 8007c98:	e7de      	b.n	8007c58 <_puts_r+0x24>
 8007c9a:	4621      	mov	r1, r4
 8007c9c:	4628      	mov	r0, r5
 8007c9e:	f000 f935 	bl	8007f0c <__swsetup_r>
 8007ca2:	2800      	cmp	r0, #0
 8007ca4:	d0dd      	beq.n	8007c62 <_puts_r+0x2e>
 8007ca6:	f04f 30ff 	mov.w	r0, #4294967295
 8007caa:	bd70      	pop	{r4, r5, r6, pc}
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	da04      	bge.n	8007cba <_puts_r+0x86>
 8007cb0:	69a2      	ldr	r2, [r4, #24]
 8007cb2:	429a      	cmp	r2, r3
 8007cb4:	dc06      	bgt.n	8007cc4 <_puts_r+0x90>
 8007cb6:	290a      	cmp	r1, #10
 8007cb8:	d004      	beq.n	8007cc4 <_puts_r+0x90>
 8007cba:	6823      	ldr	r3, [r4, #0]
 8007cbc:	1c5a      	adds	r2, r3, #1
 8007cbe:	6022      	str	r2, [r4, #0]
 8007cc0:	7019      	strb	r1, [r3, #0]
 8007cc2:	e7cf      	b.n	8007c64 <_puts_r+0x30>
 8007cc4:	4622      	mov	r2, r4
 8007cc6:	4628      	mov	r0, r5
 8007cc8:	f000 f8ce 	bl	8007e68 <__swbuf_r>
 8007ccc:	3001      	adds	r0, #1
 8007cce:	d1c9      	bne.n	8007c64 <_puts_r+0x30>
 8007cd0:	e7e9      	b.n	8007ca6 <_puts_r+0x72>
 8007cd2:	6823      	ldr	r3, [r4, #0]
 8007cd4:	200a      	movs	r0, #10
 8007cd6:	1c5a      	adds	r2, r3, #1
 8007cd8:	6022      	str	r2, [r4, #0]
 8007cda:	7018      	strb	r0, [r3, #0]
 8007cdc:	e7e5      	b.n	8007caa <_puts_r+0x76>
 8007cde:	bf00      	nop
 8007ce0:	0800aa30 	.word	0x0800aa30
 8007ce4:	0800aa50 	.word	0x0800aa50
 8007ce8:	0800aa10 	.word	0x0800aa10

08007cec <puts>:
 8007cec:	4b02      	ldr	r3, [pc, #8]	; (8007cf8 <puts+0xc>)
 8007cee:	4601      	mov	r1, r0
 8007cf0:	6818      	ldr	r0, [r3, #0]
 8007cf2:	f7ff bf9f 	b.w	8007c34 <_puts_r>
 8007cf6:	bf00      	nop
 8007cf8:	20000014 	.word	0x20000014

08007cfc <setbuf>:
 8007cfc:	2900      	cmp	r1, #0
 8007cfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d02:	bf0c      	ite	eq
 8007d04:	2202      	moveq	r2, #2
 8007d06:	2200      	movne	r2, #0
 8007d08:	f000 b800 	b.w	8007d0c <setvbuf>

08007d0c <setvbuf>:
 8007d0c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007d10:	461d      	mov	r5, r3
 8007d12:	4b51      	ldr	r3, [pc, #324]	; (8007e58 <setvbuf+0x14c>)
 8007d14:	681e      	ldr	r6, [r3, #0]
 8007d16:	4604      	mov	r4, r0
 8007d18:	460f      	mov	r7, r1
 8007d1a:	4690      	mov	r8, r2
 8007d1c:	b126      	cbz	r6, 8007d28 <setvbuf+0x1c>
 8007d1e:	69b3      	ldr	r3, [r6, #24]
 8007d20:	b913      	cbnz	r3, 8007d28 <setvbuf+0x1c>
 8007d22:	4630      	mov	r0, r6
 8007d24:	f001 f894 	bl	8008e50 <__sinit>
 8007d28:	4b4c      	ldr	r3, [pc, #304]	; (8007e5c <setvbuf+0x150>)
 8007d2a:	429c      	cmp	r4, r3
 8007d2c:	d152      	bne.n	8007dd4 <setvbuf+0xc8>
 8007d2e:	6874      	ldr	r4, [r6, #4]
 8007d30:	f1b8 0f02 	cmp.w	r8, #2
 8007d34:	d006      	beq.n	8007d44 <setvbuf+0x38>
 8007d36:	f1b8 0f01 	cmp.w	r8, #1
 8007d3a:	f200 8089 	bhi.w	8007e50 <setvbuf+0x144>
 8007d3e:	2d00      	cmp	r5, #0
 8007d40:	f2c0 8086 	blt.w	8007e50 <setvbuf+0x144>
 8007d44:	4621      	mov	r1, r4
 8007d46:	4630      	mov	r0, r6
 8007d48:	f001 f818 	bl	8008d7c <_fflush_r>
 8007d4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d4e:	b141      	cbz	r1, 8007d62 <setvbuf+0x56>
 8007d50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d54:	4299      	cmp	r1, r3
 8007d56:	d002      	beq.n	8007d5e <setvbuf+0x52>
 8007d58:	4630      	mov	r0, r6
 8007d5a:	f001 fc71 	bl	8009640 <_free_r>
 8007d5e:	2300      	movs	r3, #0
 8007d60:	6363      	str	r3, [r4, #52]	; 0x34
 8007d62:	2300      	movs	r3, #0
 8007d64:	61a3      	str	r3, [r4, #24]
 8007d66:	6063      	str	r3, [r4, #4]
 8007d68:	89a3      	ldrh	r3, [r4, #12]
 8007d6a:	061b      	lsls	r3, r3, #24
 8007d6c:	d503      	bpl.n	8007d76 <setvbuf+0x6a>
 8007d6e:	6921      	ldr	r1, [r4, #16]
 8007d70:	4630      	mov	r0, r6
 8007d72:	f001 fc65 	bl	8009640 <_free_r>
 8007d76:	89a3      	ldrh	r3, [r4, #12]
 8007d78:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8007d7c:	f023 0303 	bic.w	r3, r3, #3
 8007d80:	f1b8 0f02 	cmp.w	r8, #2
 8007d84:	81a3      	strh	r3, [r4, #12]
 8007d86:	d05d      	beq.n	8007e44 <setvbuf+0x138>
 8007d88:	ab01      	add	r3, sp, #4
 8007d8a:	466a      	mov	r2, sp
 8007d8c:	4621      	mov	r1, r4
 8007d8e:	4630      	mov	r0, r6
 8007d90:	f001 f8f6 	bl	8008f80 <__swhatbuf_r>
 8007d94:	89a3      	ldrh	r3, [r4, #12]
 8007d96:	4318      	orrs	r0, r3
 8007d98:	81a0      	strh	r0, [r4, #12]
 8007d9a:	bb2d      	cbnz	r5, 8007de8 <setvbuf+0xdc>
 8007d9c:	9d00      	ldr	r5, [sp, #0]
 8007d9e:	4628      	mov	r0, r5
 8007da0:	f001 f952 	bl	8009048 <malloc>
 8007da4:	4607      	mov	r7, r0
 8007da6:	2800      	cmp	r0, #0
 8007da8:	d14e      	bne.n	8007e48 <setvbuf+0x13c>
 8007daa:	f8dd 9000 	ldr.w	r9, [sp]
 8007dae:	45a9      	cmp	r9, r5
 8007db0:	d13c      	bne.n	8007e2c <setvbuf+0x120>
 8007db2:	f04f 30ff 	mov.w	r0, #4294967295
 8007db6:	89a3      	ldrh	r3, [r4, #12]
 8007db8:	f043 0302 	orr.w	r3, r3, #2
 8007dbc:	81a3      	strh	r3, [r4, #12]
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	60a3      	str	r3, [r4, #8]
 8007dc2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007dc6:	6023      	str	r3, [r4, #0]
 8007dc8:	6123      	str	r3, [r4, #16]
 8007dca:	2301      	movs	r3, #1
 8007dcc:	6163      	str	r3, [r4, #20]
 8007dce:	b003      	add	sp, #12
 8007dd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007dd4:	4b22      	ldr	r3, [pc, #136]	; (8007e60 <setvbuf+0x154>)
 8007dd6:	429c      	cmp	r4, r3
 8007dd8:	d101      	bne.n	8007dde <setvbuf+0xd2>
 8007dda:	68b4      	ldr	r4, [r6, #8]
 8007ddc:	e7a8      	b.n	8007d30 <setvbuf+0x24>
 8007dde:	4b21      	ldr	r3, [pc, #132]	; (8007e64 <setvbuf+0x158>)
 8007de0:	429c      	cmp	r4, r3
 8007de2:	bf08      	it	eq
 8007de4:	68f4      	ldreq	r4, [r6, #12]
 8007de6:	e7a3      	b.n	8007d30 <setvbuf+0x24>
 8007de8:	2f00      	cmp	r7, #0
 8007dea:	d0d8      	beq.n	8007d9e <setvbuf+0x92>
 8007dec:	69b3      	ldr	r3, [r6, #24]
 8007dee:	b913      	cbnz	r3, 8007df6 <setvbuf+0xea>
 8007df0:	4630      	mov	r0, r6
 8007df2:	f001 f82d 	bl	8008e50 <__sinit>
 8007df6:	f1b8 0f01 	cmp.w	r8, #1
 8007dfa:	bf08      	it	eq
 8007dfc:	89a3      	ldrheq	r3, [r4, #12]
 8007dfe:	6027      	str	r7, [r4, #0]
 8007e00:	bf04      	itt	eq
 8007e02:	f043 0301 	orreq.w	r3, r3, #1
 8007e06:	81a3      	strheq	r3, [r4, #12]
 8007e08:	89a3      	ldrh	r3, [r4, #12]
 8007e0a:	f013 0008 	ands.w	r0, r3, #8
 8007e0e:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8007e12:	d01b      	beq.n	8007e4c <setvbuf+0x140>
 8007e14:	f013 0001 	ands.w	r0, r3, #1
 8007e18:	bf18      	it	ne
 8007e1a:	426d      	negne	r5, r5
 8007e1c:	f04f 0300 	mov.w	r3, #0
 8007e20:	bf1d      	ittte	ne
 8007e22:	60a3      	strne	r3, [r4, #8]
 8007e24:	61a5      	strne	r5, [r4, #24]
 8007e26:	4618      	movne	r0, r3
 8007e28:	60a5      	streq	r5, [r4, #8]
 8007e2a:	e7d0      	b.n	8007dce <setvbuf+0xc2>
 8007e2c:	4648      	mov	r0, r9
 8007e2e:	f001 f90b 	bl	8009048 <malloc>
 8007e32:	4607      	mov	r7, r0
 8007e34:	2800      	cmp	r0, #0
 8007e36:	d0bc      	beq.n	8007db2 <setvbuf+0xa6>
 8007e38:	89a3      	ldrh	r3, [r4, #12]
 8007e3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e3e:	81a3      	strh	r3, [r4, #12]
 8007e40:	464d      	mov	r5, r9
 8007e42:	e7d3      	b.n	8007dec <setvbuf+0xe0>
 8007e44:	2000      	movs	r0, #0
 8007e46:	e7b6      	b.n	8007db6 <setvbuf+0xaa>
 8007e48:	46a9      	mov	r9, r5
 8007e4a:	e7f5      	b.n	8007e38 <setvbuf+0x12c>
 8007e4c:	60a0      	str	r0, [r4, #8]
 8007e4e:	e7be      	b.n	8007dce <setvbuf+0xc2>
 8007e50:	f04f 30ff 	mov.w	r0, #4294967295
 8007e54:	e7bb      	b.n	8007dce <setvbuf+0xc2>
 8007e56:	bf00      	nop
 8007e58:	20000014 	.word	0x20000014
 8007e5c:	0800aa30 	.word	0x0800aa30
 8007e60:	0800aa50 	.word	0x0800aa50
 8007e64:	0800aa10 	.word	0x0800aa10

08007e68 <__swbuf_r>:
 8007e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e6a:	460e      	mov	r6, r1
 8007e6c:	4614      	mov	r4, r2
 8007e6e:	4605      	mov	r5, r0
 8007e70:	b118      	cbz	r0, 8007e7a <__swbuf_r+0x12>
 8007e72:	6983      	ldr	r3, [r0, #24]
 8007e74:	b90b      	cbnz	r3, 8007e7a <__swbuf_r+0x12>
 8007e76:	f000 ffeb 	bl	8008e50 <__sinit>
 8007e7a:	4b21      	ldr	r3, [pc, #132]	; (8007f00 <__swbuf_r+0x98>)
 8007e7c:	429c      	cmp	r4, r3
 8007e7e:	d12a      	bne.n	8007ed6 <__swbuf_r+0x6e>
 8007e80:	686c      	ldr	r4, [r5, #4]
 8007e82:	69a3      	ldr	r3, [r4, #24]
 8007e84:	60a3      	str	r3, [r4, #8]
 8007e86:	89a3      	ldrh	r3, [r4, #12]
 8007e88:	071a      	lsls	r2, r3, #28
 8007e8a:	d52e      	bpl.n	8007eea <__swbuf_r+0x82>
 8007e8c:	6923      	ldr	r3, [r4, #16]
 8007e8e:	b363      	cbz	r3, 8007eea <__swbuf_r+0x82>
 8007e90:	6923      	ldr	r3, [r4, #16]
 8007e92:	6820      	ldr	r0, [r4, #0]
 8007e94:	1ac0      	subs	r0, r0, r3
 8007e96:	6963      	ldr	r3, [r4, #20]
 8007e98:	b2f6      	uxtb	r6, r6
 8007e9a:	4283      	cmp	r3, r0
 8007e9c:	4637      	mov	r7, r6
 8007e9e:	dc04      	bgt.n	8007eaa <__swbuf_r+0x42>
 8007ea0:	4621      	mov	r1, r4
 8007ea2:	4628      	mov	r0, r5
 8007ea4:	f000 ff6a 	bl	8008d7c <_fflush_r>
 8007ea8:	bb28      	cbnz	r0, 8007ef6 <__swbuf_r+0x8e>
 8007eaa:	68a3      	ldr	r3, [r4, #8]
 8007eac:	3b01      	subs	r3, #1
 8007eae:	60a3      	str	r3, [r4, #8]
 8007eb0:	6823      	ldr	r3, [r4, #0]
 8007eb2:	1c5a      	adds	r2, r3, #1
 8007eb4:	6022      	str	r2, [r4, #0]
 8007eb6:	701e      	strb	r6, [r3, #0]
 8007eb8:	6963      	ldr	r3, [r4, #20]
 8007eba:	3001      	adds	r0, #1
 8007ebc:	4283      	cmp	r3, r0
 8007ebe:	d004      	beq.n	8007eca <__swbuf_r+0x62>
 8007ec0:	89a3      	ldrh	r3, [r4, #12]
 8007ec2:	07db      	lsls	r3, r3, #31
 8007ec4:	d519      	bpl.n	8007efa <__swbuf_r+0x92>
 8007ec6:	2e0a      	cmp	r6, #10
 8007ec8:	d117      	bne.n	8007efa <__swbuf_r+0x92>
 8007eca:	4621      	mov	r1, r4
 8007ecc:	4628      	mov	r0, r5
 8007ece:	f000 ff55 	bl	8008d7c <_fflush_r>
 8007ed2:	b190      	cbz	r0, 8007efa <__swbuf_r+0x92>
 8007ed4:	e00f      	b.n	8007ef6 <__swbuf_r+0x8e>
 8007ed6:	4b0b      	ldr	r3, [pc, #44]	; (8007f04 <__swbuf_r+0x9c>)
 8007ed8:	429c      	cmp	r4, r3
 8007eda:	d101      	bne.n	8007ee0 <__swbuf_r+0x78>
 8007edc:	68ac      	ldr	r4, [r5, #8]
 8007ede:	e7d0      	b.n	8007e82 <__swbuf_r+0x1a>
 8007ee0:	4b09      	ldr	r3, [pc, #36]	; (8007f08 <__swbuf_r+0xa0>)
 8007ee2:	429c      	cmp	r4, r3
 8007ee4:	bf08      	it	eq
 8007ee6:	68ec      	ldreq	r4, [r5, #12]
 8007ee8:	e7cb      	b.n	8007e82 <__swbuf_r+0x1a>
 8007eea:	4621      	mov	r1, r4
 8007eec:	4628      	mov	r0, r5
 8007eee:	f000 f80d 	bl	8007f0c <__swsetup_r>
 8007ef2:	2800      	cmp	r0, #0
 8007ef4:	d0cc      	beq.n	8007e90 <__swbuf_r+0x28>
 8007ef6:	f04f 37ff 	mov.w	r7, #4294967295
 8007efa:	4638      	mov	r0, r7
 8007efc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007efe:	bf00      	nop
 8007f00:	0800aa30 	.word	0x0800aa30
 8007f04:	0800aa50 	.word	0x0800aa50
 8007f08:	0800aa10 	.word	0x0800aa10

08007f0c <__swsetup_r>:
 8007f0c:	4b32      	ldr	r3, [pc, #200]	; (8007fd8 <__swsetup_r+0xcc>)
 8007f0e:	b570      	push	{r4, r5, r6, lr}
 8007f10:	681d      	ldr	r5, [r3, #0]
 8007f12:	4606      	mov	r6, r0
 8007f14:	460c      	mov	r4, r1
 8007f16:	b125      	cbz	r5, 8007f22 <__swsetup_r+0x16>
 8007f18:	69ab      	ldr	r3, [r5, #24]
 8007f1a:	b913      	cbnz	r3, 8007f22 <__swsetup_r+0x16>
 8007f1c:	4628      	mov	r0, r5
 8007f1e:	f000 ff97 	bl	8008e50 <__sinit>
 8007f22:	4b2e      	ldr	r3, [pc, #184]	; (8007fdc <__swsetup_r+0xd0>)
 8007f24:	429c      	cmp	r4, r3
 8007f26:	d10f      	bne.n	8007f48 <__swsetup_r+0x3c>
 8007f28:	686c      	ldr	r4, [r5, #4]
 8007f2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f2e:	b29a      	uxth	r2, r3
 8007f30:	0715      	lsls	r5, r2, #28
 8007f32:	d42c      	bmi.n	8007f8e <__swsetup_r+0x82>
 8007f34:	06d0      	lsls	r0, r2, #27
 8007f36:	d411      	bmi.n	8007f5c <__swsetup_r+0x50>
 8007f38:	2209      	movs	r2, #9
 8007f3a:	6032      	str	r2, [r6, #0]
 8007f3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f40:	81a3      	strh	r3, [r4, #12]
 8007f42:	f04f 30ff 	mov.w	r0, #4294967295
 8007f46:	e03e      	b.n	8007fc6 <__swsetup_r+0xba>
 8007f48:	4b25      	ldr	r3, [pc, #148]	; (8007fe0 <__swsetup_r+0xd4>)
 8007f4a:	429c      	cmp	r4, r3
 8007f4c:	d101      	bne.n	8007f52 <__swsetup_r+0x46>
 8007f4e:	68ac      	ldr	r4, [r5, #8]
 8007f50:	e7eb      	b.n	8007f2a <__swsetup_r+0x1e>
 8007f52:	4b24      	ldr	r3, [pc, #144]	; (8007fe4 <__swsetup_r+0xd8>)
 8007f54:	429c      	cmp	r4, r3
 8007f56:	bf08      	it	eq
 8007f58:	68ec      	ldreq	r4, [r5, #12]
 8007f5a:	e7e6      	b.n	8007f2a <__swsetup_r+0x1e>
 8007f5c:	0751      	lsls	r1, r2, #29
 8007f5e:	d512      	bpl.n	8007f86 <__swsetup_r+0x7a>
 8007f60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f62:	b141      	cbz	r1, 8007f76 <__swsetup_r+0x6a>
 8007f64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f68:	4299      	cmp	r1, r3
 8007f6a:	d002      	beq.n	8007f72 <__swsetup_r+0x66>
 8007f6c:	4630      	mov	r0, r6
 8007f6e:	f001 fb67 	bl	8009640 <_free_r>
 8007f72:	2300      	movs	r3, #0
 8007f74:	6363      	str	r3, [r4, #52]	; 0x34
 8007f76:	89a3      	ldrh	r3, [r4, #12]
 8007f78:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007f7c:	81a3      	strh	r3, [r4, #12]
 8007f7e:	2300      	movs	r3, #0
 8007f80:	6063      	str	r3, [r4, #4]
 8007f82:	6923      	ldr	r3, [r4, #16]
 8007f84:	6023      	str	r3, [r4, #0]
 8007f86:	89a3      	ldrh	r3, [r4, #12]
 8007f88:	f043 0308 	orr.w	r3, r3, #8
 8007f8c:	81a3      	strh	r3, [r4, #12]
 8007f8e:	6923      	ldr	r3, [r4, #16]
 8007f90:	b94b      	cbnz	r3, 8007fa6 <__swsetup_r+0x9a>
 8007f92:	89a3      	ldrh	r3, [r4, #12]
 8007f94:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007f98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f9c:	d003      	beq.n	8007fa6 <__swsetup_r+0x9a>
 8007f9e:	4621      	mov	r1, r4
 8007fa0:	4630      	mov	r0, r6
 8007fa2:	f001 f811 	bl	8008fc8 <__smakebuf_r>
 8007fa6:	89a2      	ldrh	r2, [r4, #12]
 8007fa8:	f012 0301 	ands.w	r3, r2, #1
 8007fac:	d00c      	beq.n	8007fc8 <__swsetup_r+0xbc>
 8007fae:	2300      	movs	r3, #0
 8007fb0:	60a3      	str	r3, [r4, #8]
 8007fb2:	6963      	ldr	r3, [r4, #20]
 8007fb4:	425b      	negs	r3, r3
 8007fb6:	61a3      	str	r3, [r4, #24]
 8007fb8:	6923      	ldr	r3, [r4, #16]
 8007fba:	b953      	cbnz	r3, 8007fd2 <__swsetup_r+0xc6>
 8007fbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fc0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007fc4:	d1ba      	bne.n	8007f3c <__swsetup_r+0x30>
 8007fc6:	bd70      	pop	{r4, r5, r6, pc}
 8007fc8:	0792      	lsls	r2, r2, #30
 8007fca:	bf58      	it	pl
 8007fcc:	6963      	ldrpl	r3, [r4, #20]
 8007fce:	60a3      	str	r3, [r4, #8]
 8007fd0:	e7f2      	b.n	8007fb8 <__swsetup_r+0xac>
 8007fd2:	2000      	movs	r0, #0
 8007fd4:	e7f7      	b.n	8007fc6 <__swsetup_r+0xba>
 8007fd6:	bf00      	nop
 8007fd8:	20000014 	.word	0x20000014
 8007fdc:	0800aa30 	.word	0x0800aa30
 8007fe0:	0800aa50 	.word	0x0800aa50
 8007fe4:	0800aa10 	.word	0x0800aa10

08007fe8 <quorem>:
 8007fe8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fec:	6903      	ldr	r3, [r0, #16]
 8007fee:	690c      	ldr	r4, [r1, #16]
 8007ff0:	42a3      	cmp	r3, r4
 8007ff2:	4680      	mov	r8, r0
 8007ff4:	f2c0 8082 	blt.w	80080fc <quorem+0x114>
 8007ff8:	3c01      	subs	r4, #1
 8007ffa:	f101 0714 	add.w	r7, r1, #20
 8007ffe:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8008002:	f100 0614 	add.w	r6, r0, #20
 8008006:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800800a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800800e:	eb06 030c 	add.w	r3, r6, ip
 8008012:	3501      	adds	r5, #1
 8008014:	eb07 090c 	add.w	r9, r7, ip
 8008018:	9301      	str	r3, [sp, #4]
 800801a:	fbb0 f5f5 	udiv	r5, r0, r5
 800801e:	b395      	cbz	r5, 8008086 <quorem+0x9e>
 8008020:	f04f 0a00 	mov.w	sl, #0
 8008024:	4638      	mov	r0, r7
 8008026:	46b6      	mov	lr, r6
 8008028:	46d3      	mov	fp, sl
 800802a:	f850 2b04 	ldr.w	r2, [r0], #4
 800802e:	b293      	uxth	r3, r2
 8008030:	fb05 a303 	mla	r3, r5, r3, sl
 8008034:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008038:	b29b      	uxth	r3, r3
 800803a:	ebab 0303 	sub.w	r3, fp, r3
 800803e:	0c12      	lsrs	r2, r2, #16
 8008040:	f8de b000 	ldr.w	fp, [lr]
 8008044:	fb05 a202 	mla	r2, r5, r2, sl
 8008048:	fa13 f38b 	uxtah	r3, r3, fp
 800804c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8008050:	fa1f fb82 	uxth.w	fp, r2
 8008054:	f8de 2000 	ldr.w	r2, [lr]
 8008058:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800805c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008060:	b29b      	uxth	r3, r3
 8008062:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008066:	4581      	cmp	r9, r0
 8008068:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800806c:	f84e 3b04 	str.w	r3, [lr], #4
 8008070:	d2db      	bcs.n	800802a <quorem+0x42>
 8008072:	f856 300c 	ldr.w	r3, [r6, ip]
 8008076:	b933      	cbnz	r3, 8008086 <quorem+0x9e>
 8008078:	9b01      	ldr	r3, [sp, #4]
 800807a:	3b04      	subs	r3, #4
 800807c:	429e      	cmp	r6, r3
 800807e:	461a      	mov	r2, r3
 8008080:	d330      	bcc.n	80080e4 <quorem+0xfc>
 8008082:	f8c8 4010 	str.w	r4, [r8, #16]
 8008086:	4640      	mov	r0, r8
 8008088:	f001 fa06 	bl	8009498 <__mcmp>
 800808c:	2800      	cmp	r0, #0
 800808e:	db25      	blt.n	80080dc <quorem+0xf4>
 8008090:	3501      	adds	r5, #1
 8008092:	4630      	mov	r0, r6
 8008094:	f04f 0c00 	mov.w	ip, #0
 8008098:	f857 2b04 	ldr.w	r2, [r7], #4
 800809c:	f8d0 e000 	ldr.w	lr, [r0]
 80080a0:	b293      	uxth	r3, r2
 80080a2:	ebac 0303 	sub.w	r3, ip, r3
 80080a6:	0c12      	lsrs	r2, r2, #16
 80080a8:	fa13 f38e 	uxtah	r3, r3, lr
 80080ac:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80080b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80080b4:	b29b      	uxth	r3, r3
 80080b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80080ba:	45b9      	cmp	r9, r7
 80080bc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80080c0:	f840 3b04 	str.w	r3, [r0], #4
 80080c4:	d2e8      	bcs.n	8008098 <quorem+0xb0>
 80080c6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80080ca:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80080ce:	b92a      	cbnz	r2, 80080dc <quorem+0xf4>
 80080d0:	3b04      	subs	r3, #4
 80080d2:	429e      	cmp	r6, r3
 80080d4:	461a      	mov	r2, r3
 80080d6:	d30b      	bcc.n	80080f0 <quorem+0x108>
 80080d8:	f8c8 4010 	str.w	r4, [r8, #16]
 80080dc:	4628      	mov	r0, r5
 80080de:	b003      	add	sp, #12
 80080e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080e4:	6812      	ldr	r2, [r2, #0]
 80080e6:	3b04      	subs	r3, #4
 80080e8:	2a00      	cmp	r2, #0
 80080ea:	d1ca      	bne.n	8008082 <quorem+0x9a>
 80080ec:	3c01      	subs	r4, #1
 80080ee:	e7c5      	b.n	800807c <quorem+0x94>
 80080f0:	6812      	ldr	r2, [r2, #0]
 80080f2:	3b04      	subs	r3, #4
 80080f4:	2a00      	cmp	r2, #0
 80080f6:	d1ef      	bne.n	80080d8 <quorem+0xf0>
 80080f8:	3c01      	subs	r4, #1
 80080fa:	e7ea      	b.n	80080d2 <quorem+0xea>
 80080fc:	2000      	movs	r0, #0
 80080fe:	e7ee      	b.n	80080de <quorem+0xf6>

08008100 <_dtoa_r>:
 8008100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008104:	ec57 6b10 	vmov	r6, r7, d0
 8008108:	b097      	sub	sp, #92	; 0x5c
 800810a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800810c:	9106      	str	r1, [sp, #24]
 800810e:	4604      	mov	r4, r0
 8008110:	920b      	str	r2, [sp, #44]	; 0x2c
 8008112:	9312      	str	r3, [sp, #72]	; 0x48
 8008114:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008118:	e9cd 6700 	strd	r6, r7, [sp]
 800811c:	b93d      	cbnz	r5, 800812e <_dtoa_r+0x2e>
 800811e:	2010      	movs	r0, #16
 8008120:	f000 ff92 	bl	8009048 <malloc>
 8008124:	6260      	str	r0, [r4, #36]	; 0x24
 8008126:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800812a:	6005      	str	r5, [r0, #0]
 800812c:	60c5      	str	r5, [r0, #12]
 800812e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008130:	6819      	ldr	r1, [r3, #0]
 8008132:	b151      	cbz	r1, 800814a <_dtoa_r+0x4a>
 8008134:	685a      	ldr	r2, [r3, #4]
 8008136:	604a      	str	r2, [r1, #4]
 8008138:	2301      	movs	r3, #1
 800813a:	4093      	lsls	r3, r2
 800813c:	608b      	str	r3, [r1, #8]
 800813e:	4620      	mov	r0, r4
 8008140:	f000 ffc9 	bl	80090d6 <_Bfree>
 8008144:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008146:	2200      	movs	r2, #0
 8008148:	601a      	str	r2, [r3, #0]
 800814a:	1e3b      	subs	r3, r7, #0
 800814c:	bfbb      	ittet	lt
 800814e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008152:	9301      	strlt	r3, [sp, #4]
 8008154:	2300      	movge	r3, #0
 8008156:	2201      	movlt	r2, #1
 8008158:	bfac      	ite	ge
 800815a:	f8c8 3000 	strge.w	r3, [r8]
 800815e:	f8c8 2000 	strlt.w	r2, [r8]
 8008162:	4baf      	ldr	r3, [pc, #700]	; (8008420 <_dtoa_r+0x320>)
 8008164:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008168:	ea33 0308 	bics.w	r3, r3, r8
 800816c:	d114      	bne.n	8008198 <_dtoa_r+0x98>
 800816e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008170:	f242 730f 	movw	r3, #9999	; 0x270f
 8008174:	6013      	str	r3, [r2, #0]
 8008176:	9b00      	ldr	r3, [sp, #0]
 8008178:	b923      	cbnz	r3, 8008184 <_dtoa_r+0x84>
 800817a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800817e:	2800      	cmp	r0, #0
 8008180:	f000 8542 	beq.w	8008c08 <_dtoa_r+0xb08>
 8008184:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008186:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8008434 <_dtoa_r+0x334>
 800818a:	2b00      	cmp	r3, #0
 800818c:	f000 8544 	beq.w	8008c18 <_dtoa_r+0xb18>
 8008190:	f10b 0303 	add.w	r3, fp, #3
 8008194:	f000 bd3e 	b.w	8008c14 <_dtoa_r+0xb14>
 8008198:	e9dd 6700 	ldrd	r6, r7, [sp]
 800819c:	2200      	movs	r2, #0
 800819e:	2300      	movs	r3, #0
 80081a0:	4630      	mov	r0, r6
 80081a2:	4639      	mov	r1, r7
 80081a4:	f7f8 fc90 	bl	8000ac8 <__aeabi_dcmpeq>
 80081a8:	4681      	mov	r9, r0
 80081aa:	b168      	cbz	r0, 80081c8 <_dtoa_r+0xc8>
 80081ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80081ae:	2301      	movs	r3, #1
 80081b0:	6013      	str	r3, [r2, #0]
 80081b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	f000 8524 	beq.w	8008c02 <_dtoa_r+0xb02>
 80081ba:	4b9a      	ldr	r3, [pc, #616]	; (8008424 <_dtoa_r+0x324>)
 80081bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80081be:	f103 3bff 	add.w	fp, r3, #4294967295
 80081c2:	6013      	str	r3, [r2, #0]
 80081c4:	f000 bd28 	b.w	8008c18 <_dtoa_r+0xb18>
 80081c8:	aa14      	add	r2, sp, #80	; 0x50
 80081ca:	a915      	add	r1, sp, #84	; 0x54
 80081cc:	ec47 6b10 	vmov	d0, r6, r7
 80081d0:	4620      	mov	r0, r4
 80081d2:	f001 f9d8 	bl	8009586 <__d2b>
 80081d6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80081da:	9004      	str	r0, [sp, #16]
 80081dc:	2d00      	cmp	r5, #0
 80081de:	d07c      	beq.n	80082da <_dtoa_r+0x1da>
 80081e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80081e4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80081e8:	46b2      	mov	sl, r6
 80081ea:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80081ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80081f2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80081f6:	2200      	movs	r2, #0
 80081f8:	4b8b      	ldr	r3, [pc, #556]	; (8008428 <_dtoa_r+0x328>)
 80081fa:	4650      	mov	r0, sl
 80081fc:	4659      	mov	r1, fp
 80081fe:	f7f8 f843 	bl	8000288 <__aeabi_dsub>
 8008202:	a381      	add	r3, pc, #516	; (adr r3, 8008408 <_dtoa_r+0x308>)
 8008204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008208:	f7f8 f9f6 	bl	80005f8 <__aeabi_dmul>
 800820c:	a380      	add	r3, pc, #512	; (adr r3, 8008410 <_dtoa_r+0x310>)
 800820e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008212:	f7f8 f83b 	bl	800028c <__adddf3>
 8008216:	4606      	mov	r6, r0
 8008218:	4628      	mov	r0, r5
 800821a:	460f      	mov	r7, r1
 800821c:	f7f8 f982 	bl	8000524 <__aeabi_i2d>
 8008220:	a37d      	add	r3, pc, #500	; (adr r3, 8008418 <_dtoa_r+0x318>)
 8008222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008226:	f7f8 f9e7 	bl	80005f8 <__aeabi_dmul>
 800822a:	4602      	mov	r2, r0
 800822c:	460b      	mov	r3, r1
 800822e:	4630      	mov	r0, r6
 8008230:	4639      	mov	r1, r7
 8008232:	f7f8 f82b 	bl	800028c <__adddf3>
 8008236:	4606      	mov	r6, r0
 8008238:	460f      	mov	r7, r1
 800823a:	f7f8 fc8d 	bl	8000b58 <__aeabi_d2iz>
 800823e:	2200      	movs	r2, #0
 8008240:	4682      	mov	sl, r0
 8008242:	2300      	movs	r3, #0
 8008244:	4630      	mov	r0, r6
 8008246:	4639      	mov	r1, r7
 8008248:	f7f8 fc48 	bl	8000adc <__aeabi_dcmplt>
 800824c:	b148      	cbz	r0, 8008262 <_dtoa_r+0x162>
 800824e:	4650      	mov	r0, sl
 8008250:	f7f8 f968 	bl	8000524 <__aeabi_i2d>
 8008254:	4632      	mov	r2, r6
 8008256:	463b      	mov	r3, r7
 8008258:	f7f8 fc36 	bl	8000ac8 <__aeabi_dcmpeq>
 800825c:	b908      	cbnz	r0, 8008262 <_dtoa_r+0x162>
 800825e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008262:	f1ba 0f16 	cmp.w	sl, #22
 8008266:	d859      	bhi.n	800831c <_dtoa_r+0x21c>
 8008268:	4970      	ldr	r1, [pc, #448]	; (800842c <_dtoa_r+0x32c>)
 800826a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800826e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008272:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008276:	f7f8 fc4f 	bl	8000b18 <__aeabi_dcmpgt>
 800827a:	2800      	cmp	r0, #0
 800827c:	d050      	beq.n	8008320 <_dtoa_r+0x220>
 800827e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008282:	2300      	movs	r3, #0
 8008284:	930f      	str	r3, [sp, #60]	; 0x3c
 8008286:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008288:	1b5d      	subs	r5, r3, r5
 800828a:	f1b5 0801 	subs.w	r8, r5, #1
 800828e:	bf49      	itett	mi
 8008290:	f1c5 0301 	rsbmi	r3, r5, #1
 8008294:	2300      	movpl	r3, #0
 8008296:	9305      	strmi	r3, [sp, #20]
 8008298:	f04f 0800 	movmi.w	r8, #0
 800829c:	bf58      	it	pl
 800829e:	9305      	strpl	r3, [sp, #20]
 80082a0:	f1ba 0f00 	cmp.w	sl, #0
 80082a4:	db3e      	blt.n	8008324 <_dtoa_r+0x224>
 80082a6:	2300      	movs	r3, #0
 80082a8:	44d0      	add	r8, sl
 80082aa:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80082ae:	9307      	str	r3, [sp, #28]
 80082b0:	9b06      	ldr	r3, [sp, #24]
 80082b2:	2b09      	cmp	r3, #9
 80082b4:	f200 8090 	bhi.w	80083d8 <_dtoa_r+0x2d8>
 80082b8:	2b05      	cmp	r3, #5
 80082ba:	bfc4      	itt	gt
 80082bc:	3b04      	subgt	r3, #4
 80082be:	9306      	strgt	r3, [sp, #24]
 80082c0:	9b06      	ldr	r3, [sp, #24]
 80082c2:	f1a3 0302 	sub.w	r3, r3, #2
 80082c6:	bfcc      	ite	gt
 80082c8:	2500      	movgt	r5, #0
 80082ca:	2501      	movle	r5, #1
 80082cc:	2b03      	cmp	r3, #3
 80082ce:	f200 808f 	bhi.w	80083f0 <_dtoa_r+0x2f0>
 80082d2:	e8df f003 	tbb	[pc, r3]
 80082d6:	7f7d      	.short	0x7f7d
 80082d8:	7131      	.short	0x7131
 80082da:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80082de:	441d      	add	r5, r3
 80082e0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80082e4:	2820      	cmp	r0, #32
 80082e6:	dd13      	ble.n	8008310 <_dtoa_r+0x210>
 80082e8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80082ec:	9b00      	ldr	r3, [sp, #0]
 80082ee:	fa08 f800 	lsl.w	r8, r8, r0
 80082f2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80082f6:	fa23 f000 	lsr.w	r0, r3, r0
 80082fa:	ea48 0000 	orr.w	r0, r8, r0
 80082fe:	f7f8 f901 	bl	8000504 <__aeabi_ui2d>
 8008302:	2301      	movs	r3, #1
 8008304:	4682      	mov	sl, r0
 8008306:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800830a:	3d01      	subs	r5, #1
 800830c:	9313      	str	r3, [sp, #76]	; 0x4c
 800830e:	e772      	b.n	80081f6 <_dtoa_r+0xf6>
 8008310:	9b00      	ldr	r3, [sp, #0]
 8008312:	f1c0 0020 	rsb	r0, r0, #32
 8008316:	fa03 f000 	lsl.w	r0, r3, r0
 800831a:	e7f0      	b.n	80082fe <_dtoa_r+0x1fe>
 800831c:	2301      	movs	r3, #1
 800831e:	e7b1      	b.n	8008284 <_dtoa_r+0x184>
 8008320:	900f      	str	r0, [sp, #60]	; 0x3c
 8008322:	e7b0      	b.n	8008286 <_dtoa_r+0x186>
 8008324:	9b05      	ldr	r3, [sp, #20]
 8008326:	eba3 030a 	sub.w	r3, r3, sl
 800832a:	9305      	str	r3, [sp, #20]
 800832c:	f1ca 0300 	rsb	r3, sl, #0
 8008330:	9307      	str	r3, [sp, #28]
 8008332:	2300      	movs	r3, #0
 8008334:	930e      	str	r3, [sp, #56]	; 0x38
 8008336:	e7bb      	b.n	80082b0 <_dtoa_r+0x1b0>
 8008338:	2301      	movs	r3, #1
 800833a:	930a      	str	r3, [sp, #40]	; 0x28
 800833c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800833e:	2b00      	cmp	r3, #0
 8008340:	dd59      	ble.n	80083f6 <_dtoa_r+0x2f6>
 8008342:	9302      	str	r3, [sp, #8]
 8008344:	4699      	mov	r9, r3
 8008346:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008348:	2200      	movs	r2, #0
 800834a:	6072      	str	r2, [r6, #4]
 800834c:	2204      	movs	r2, #4
 800834e:	f102 0014 	add.w	r0, r2, #20
 8008352:	4298      	cmp	r0, r3
 8008354:	6871      	ldr	r1, [r6, #4]
 8008356:	d953      	bls.n	8008400 <_dtoa_r+0x300>
 8008358:	4620      	mov	r0, r4
 800835a:	f000 fe88 	bl	800906e <_Balloc>
 800835e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008360:	6030      	str	r0, [r6, #0]
 8008362:	f1b9 0f0e 	cmp.w	r9, #14
 8008366:	f8d3 b000 	ldr.w	fp, [r3]
 800836a:	f200 80e6 	bhi.w	800853a <_dtoa_r+0x43a>
 800836e:	2d00      	cmp	r5, #0
 8008370:	f000 80e3 	beq.w	800853a <_dtoa_r+0x43a>
 8008374:	ed9d 7b00 	vldr	d7, [sp]
 8008378:	f1ba 0f00 	cmp.w	sl, #0
 800837c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8008380:	dd74      	ble.n	800846c <_dtoa_r+0x36c>
 8008382:	4a2a      	ldr	r2, [pc, #168]	; (800842c <_dtoa_r+0x32c>)
 8008384:	f00a 030f 	and.w	r3, sl, #15
 8008388:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800838c:	ed93 7b00 	vldr	d7, [r3]
 8008390:	ea4f 162a 	mov.w	r6, sl, asr #4
 8008394:	06f0      	lsls	r0, r6, #27
 8008396:	ed8d 7b08 	vstr	d7, [sp, #32]
 800839a:	d565      	bpl.n	8008468 <_dtoa_r+0x368>
 800839c:	4b24      	ldr	r3, [pc, #144]	; (8008430 <_dtoa_r+0x330>)
 800839e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80083a2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80083a6:	f7f8 fa51 	bl	800084c <__aeabi_ddiv>
 80083aa:	e9cd 0100 	strd	r0, r1, [sp]
 80083ae:	f006 060f 	and.w	r6, r6, #15
 80083b2:	2503      	movs	r5, #3
 80083b4:	4f1e      	ldr	r7, [pc, #120]	; (8008430 <_dtoa_r+0x330>)
 80083b6:	e04c      	b.n	8008452 <_dtoa_r+0x352>
 80083b8:	2301      	movs	r3, #1
 80083ba:	930a      	str	r3, [sp, #40]	; 0x28
 80083bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083be:	4453      	add	r3, sl
 80083c0:	f103 0901 	add.w	r9, r3, #1
 80083c4:	9302      	str	r3, [sp, #8]
 80083c6:	464b      	mov	r3, r9
 80083c8:	2b01      	cmp	r3, #1
 80083ca:	bfb8      	it	lt
 80083cc:	2301      	movlt	r3, #1
 80083ce:	e7ba      	b.n	8008346 <_dtoa_r+0x246>
 80083d0:	2300      	movs	r3, #0
 80083d2:	e7b2      	b.n	800833a <_dtoa_r+0x23a>
 80083d4:	2300      	movs	r3, #0
 80083d6:	e7f0      	b.n	80083ba <_dtoa_r+0x2ba>
 80083d8:	2501      	movs	r5, #1
 80083da:	2300      	movs	r3, #0
 80083dc:	9306      	str	r3, [sp, #24]
 80083de:	950a      	str	r5, [sp, #40]	; 0x28
 80083e0:	f04f 33ff 	mov.w	r3, #4294967295
 80083e4:	9302      	str	r3, [sp, #8]
 80083e6:	4699      	mov	r9, r3
 80083e8:	2200      	movs	r2, #0
 80083ea:	2312      	movs	r3, #18
 80083ec:	920b      	str	r2, [sp, #44]	; 0x2c
 80083ee:	e7aa      	b.n	8008346 <_dtoa_r+0x246>
 80083f0:	2301      	movs	r3, #1
 80083f2:	930a      	str	r3, [sp, #40]	; 0x28
 80083f4:	e7f4      	b.n	80083e0 <_dtoa_r+0x2e0>
 80083f6:	2301      	movs	r3, #1
 80083f8:	9302      	str	r3, [sp, #8]
 80083fa:	4699      	mov	r9, r3
 80083fc:	461a      	mov	r2, r3
 80083fe:	e7f5      	b.n	80083ec <_dtoa_r+0x2ec>
 8008400:	3101      	adds	r1, #1
 8008402:	6071      	str	r1, [r6, #4]
 8008404:	0052      	lsls	r2, r2, #1
 8008406:	e7a2      	b.n	800834e <_dtoa_r+0x24e>
 8008408:	636f4361 	.word	0x636f4361
 800840c:	3fd287a7 	.word	0x3fd287a7
 8008410:	8b60c8b3 	.word	0x8b60c8b3
 8008414:	3fc68a28 	.word	0x3fc68a28
 8008418:	509f79fb 	.word	0x509f79fb
 800841c:	3fd34413 	.word	0x3fd34413
 8008420:	7ff00000 	.word	0x7ff00000
 8008424:	0800a9dd 	.word	0x0800a9dd
 8008428:	3ff80000 	.word	0x3ff80000
 800842c:	0800aa98 	.word	0x0800aa98
 8008430:	0800aa70 	.word	0x0800aa70
 8008434:	0800aa09 	.word	0x0800aa09
 8008438:	07f1      	lsls	r1, r6, #31
 800843a:	d508      	bpl.n	800844e <_dtoa_r+0x34e>
 800843c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008440:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008444:	f7f8 f8d8 	bl	80005f8 <__aeabi_dmul>
 8008448:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800844c:	3501      	adds	r5, #1
 800844e:	1076      	asrs	r6, r6, #1
 8008450:	3708      	adds	r7, #8
 8008452:	2e00      	cmp	r6, #0
 8008454:	d1f0      	bne.n	8008438 <_dtoa_r+0x338>
 8008456:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800845a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800845e:	f7f8 f9f5 	bl	800084c <__aeabi_ddiv>
 8008462:	e9cd 0100 	strd	r0, r1, [sp]
 8008466:	e01a      	b.n	800849e <_dtoa_r+0x39e>
 8008468:	2502      	movs	r5, #2
 800846a:	e7a3      	b.n	80083b4 <_dtoa_r+0x2b4>
 800846c:	f000 80a0 	beq.w	80085b0 <_dtoa_r+0x4b0>
 8008470:	f1ca 0600 	rsb	r6, sl, #0
 8008474:	4b9f      	ldr	r3, [pc, #636]	; (80086f4 <_dtoa_r+0x5f4>)
 8008476:	4fa0      	ldr	r7, [pc, #640]	; (80086f8 <_dtoa_r+0x5f8>)
 8008478:	f006 020f 	and.w	r2, r6, #15
 800847c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008484:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008488:	f7f8 f8b6 	bl	80005f8 <__aeabi_dmul>
 800848c:	e9cd 0100 	strd	r0, r1, [sp]
 8008490:	1136      	asrs	r6, r6, #4
 8008492:	2300      	movs	r3, #0
 8008494:	2502      	movs	r5, #2
 8008496:	2e00      	cmp	r6, #0
 8008498:	d17f      	bne.n	800859a <_dtoa_r+0x49a>
 800849a:	2b00      	cmp	r3, #0
 800849c:	d1e1      	bne.n	8008462 <_dtoa_r+0x362>
 800849e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	f000 8087 	beq.w	80085b4 <_dtoa_r+0x4b4>
 80084a6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80084aa:	2200      	movs	r2, #0
 80084ac:	4b93      	ldr	r3, [pc, #588]	; (80086fc <_dtoa_r+0x5fc>)
 80084ae:	4630      	mov	r0, r6
 80084b0:	4639      	mov	r1, r7
 80084b2:	f7f8 fb13 	bl	8000adc <__aeabi_dcmplt>
 80084b6:	2800      	cmp	r0, #0
 80084b8:	d07c      	beq.n	80085b4 <_dtoa_r+0x4b4>
 80084ba:	f1b9 0f00 	cmp.w	r9, #0
 80084be:	d079      	beq.n	80085b4 <_dtoa_r+0x4b4>
 80084c0:	9b02      	ldr	r3, [sp, #8]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	dd35      	ble.n	8008532 <_dtoa_r+0x432>
 80084c6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80084ca:	9308      	str	r3, [sp, #32]
 80084cc:	4639      	mov	r1, r7
 80084ce:	2200      	movs	r2, #0
 80084d0:	4b8b      	ldr	r3, [pc, #556]	; (8008700 <_dtoa_r+0x600>)
 80084d2:	4630      	mov	r0, r6
 80084d4:	f7f8 f890 	bl	80005f8 <__aeabi_dmul>
 80084d8:	e9cd 0100 	strd	r0, r1, [sp]
 80084dc:	9f02      	ldr	r7, [sp, #8]
 80084de:	3501      	adds	r5, #1
 80084e0:	4628      	mov	r0, r5
 80084e2:	f7f8 f81f 	bl	8000524 <__aeabi_i2d>
 80084e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80084ea:	f7f8 f885 	bl	80005f8 <__aeabi_dmul>
 80084ee:	2200      	movs	r2, #0
 80084f0:	4b84      	ldr	r3, [pc, #528]	; (8008704 <_dtoa_r+0x604>)
 80084f2:	f7f7 fecb 	bl	800028c <__adddf3>
 80084f6:	4605      	mov	r5, r0
 80084f8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80084fc:	2f00      	cmp	r7, #0
 80084fe:	d15d      	bne.n	80085bc <_dtoa_r+0x4bc>
 8008500:	2200      	movs	r2, #0
 8008502:	4b81      	ldr	r3, [pc, #516]	; (8008708 <_dtoa_r+0x608>)
 8008504:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008508:	f7f7 febe 	bl	8000288 <__aeabi_dsub>
 800850c:	462a      	mov	r2, r5
 800850e:	4633      	mov	r3, r6
 8008510:	e9cd 0100 	strd	r0, r1, [sp]
 8008514:	f7f8 fb00 	bl	8000b18 <__aeabi_dcmpgt>
 8008518:	2800      	cmp	r0, #0
 800851a:	f040 8288 	bne.w	8008a2e <_dtoa_r+0x92e>
 800851e:	462a      	mov	r2, r5
 8008520:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008524:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008528:	f7f8 fad8 	bl	8000adc <__aeabi_dcmplt>
 800852c:	2800      	cmp	r0, #0
 800852e:	f040 827c 	bne.w	8008a2a <_dtoa_r+0x92a>
 8008532:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008536:	e9cd 2300 	strd	r2, r3, [sp]
 800853a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800853c:	2b00      	cmp	r3, #0
 800853e:	f2c0 8150 	blt.w	80087e2 <_dtoa_r+0x6e2>
 8008542:	f1ba 0f0e 	cmp.w	sl, #14
 8008546:	f300 814c 	bgt.w	80087e2 <_dtoa_r+0x6e2>
 800854a:	4b6a      	ldr	r3, [pc, #424]	; (80086f4 <_dtoa_r+0x5f4>)
 800854c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008550:	ed93 7b00 	vldr	d7, [r3]
 8008554:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008556:	2b00      	cmp	r3, #0
 8008558:	ed8d 7b02 	vstr	d7, [sp, #8]
 800855c:	f280 80d8 	bge.w	8008710 <_dtoa_r+0x610>
 8008560:	f1b9 0f00 	cmp.w	r9, #0
 8008564:	f300 80d4 	bgt.w	8008710 <_dtoa_r+0x610>
 8008568:	f040 825e 	bne.w	8008a28 <_dtoa_r+0x928>
 800856c:	2200      	movs	r2, #0
 800856e:	4b66      	ldr	r3, [pc, #408]	; (8008708 <_dtoa_r+0x608>)
 8008570:	ec51 0b17 	vmov	r0, r1, d7
 8008574:	f7f8 f840 	bl	80005f8 <__aeabi_dmul>
 8008578:	e9dd 2300 	ldrd	r2, r3, [sp]
 800857c:	f7f8 fac2 	bl	8000b04 <__aeabi_dcmpge>
 8008580:	464f      	mov	r7, r9
 8008582:	464e      	mov	r6, r9
 8008584:	2800      	cmp	r0, #0
 8008586:	f040 8234 	bne.w	80089f2 <_dtoa_r+0x8f2>
 800858a:	2331      	movs	r3, #49	; 0x31
 800858c:	f10b 0501 	add.w	r5, fp, #1
 8008590:	f88b 3000 	strb.w	r3, [fp]
 8008594:	f10a 0a01 	add.w	sl, sl, #1
 8008598:	e22f      	b.n	80089fa <_dtoa_r+0x8fa>
 800859a:	07f2      	lsls	r2, r6, #31
 800859c:	d505      	bpl.n	80085aa <_dtoa_r+0x4aa>
 800859e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085a2:	f7f8 f829 	bl	80005f8 <__aeabi_dmul>
 80085a6:	3501      	adds	r5, #1
 80085a8:	2301      	movs	r3, #1
 80085aa:	1076      	asrs	r6, r6, #1
 80085ac:	3708      	adds	r7, #8
 80085ae:	e772      	b.n	8008496 <_dtoa_r+0x396>
 80085b0:	2502      	movs	r5, #2
 80085b2:	e774      	b.n	800849e <_dtoa_r+0x39e>
 80085b4:	f8cd a020 	str.w	sl, [sp, #32]
 80085b8:	464f      	mov	r7, r9
 80085ba:	e791      	b.n	80084e0 <_dtoa_r+0x3e0>
 80085bc:	4b4d      	ldr	r3, [pc, #308]	; (80086f4 <_dtoa_r+0x5f4>)
 80085be:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80085c2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80085c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d047      	beq.n	800865c <_dtoa_r+0x55c>
 80085cc:	4602      	mov	r2, r0
 80085ce:	460b      	mov	r3, r1
 80085d0:	2000      	movs	r0, #0
 80085d2:	494e      	ldr	r1, [pc, #312]	; (800870c <_dtoa_r+0x60c>)
 80085d4:	f7f8 f93a 	bl	800084c <__aeabi_ddiv>
 80085d8:	462a      	mov	r2, r5
 80085da:	4633      	mov	r3, r6
 80085dc:	f7f7 fe54 	bl	8000288 <__aeabi_dsub>
 80085e0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80085e4:	465d      	mov	r5, fp
 80085e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80085ea:	f7f8 fab5 	bl	8000b58 <__aeabi_d2iz>
 80085ee:	4606      	mov	r6, r0
 80085f0:	f7f7 ff98 	bl	8000524 <__aeabi_i2d>
 80085f4:	4602      	mov	r2, r0
 80085f6:	460b      	mov	r3, r1
 80085f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80085fc:	f7f7 fe44 	bl	8000288 <__aeabi_dsub>
 8008600:	3630      	adds	r6, #48	; 0x30
 8008602:	f805 6b01 	strb.w	r6, [r5], #1
 8008606:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800860a:	e9cd 0100 	strd	r0, r1, [sp]
 800860e:	f7f8 fa65 	bl	8000adc <__aeabi_dcmplt>
 8008612:	2800      	cmp	r0, #0
 8008614:	d163      	bne.n	80086de <_dtoa_r+0x5de>
 8008616:	e9dd 2300 	ldrd	r2, r3, [sp]
 800861a:	2000      	movs	r0, #0
 800861c:	4937      	ldr	r1, [pc, #220]	; (80086fc <_dtoa_r+0x5fc>)
 800861e:	f7f7 fe33 	bl	8000288 <__aeabi_dsub>
 8008622:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008626:	f7f8 fa59 	bl	8000adc <__aeabi_dcmplt>
 800862a:	2800      	cmp	r0, #0
 800862c:	f040 80b7 	bne.w	800879e <_dtoa_r+0x69e>
 8008630:	eba5 030b 	sub.w	r3, r5, fp
 8008634:	429f      	cmp	r7, r3
 8008636:	f77f af7c 	ble.w	8008532 <_dtoa_r+0x432>
 800863a:	2200      	movs	r2, #0
 800863c:	4b30      	ldr	r3, [pc, #192]	; (8008700 <_dtoa_r+0x600>)
 800863e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008642:	f7f7 ffd9 	bl	80005f8 <__aeabi_dmul>
 8008646:	2200      	movs	r2, #0
 8008648:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800864c:	4b2c      	ldr	r3, [pc, #176]	; (8008700 <_dtoa_r+0x600>)
 800864e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008652:	f7f7 ffd1 	bl	80005f8 <__aeabi_dmul>
 8008656:	e9cd 0100 	strd	r0, r1, [sp]
 800865a:	e7c4      	b.n	80085e6 <_dtoa_r+0x4e6>
 800865c:	462a      	mov	r2, r5
 800865e:	4633      	mov	r3, r6
 8008660:	f7f7 ffca 	bl	80005f8 <__aeabi_dmul>
 8008664:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008668:	eb0b 0507 	add.w	r5, fp, r7
 800866c:	465e      	mov	r6, fp
 800866e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008672:	f7f8 fa71 	bl	8000b58 <__aeabi_d2iz>
 8008676:	4607      	mov	r7, r0
 8008678:	f7f7 ff54 	bl	8000524 <__aeabi_i2d>
 800867c:	3730      	adds	r7, #48	; 0x30
 800867e:	4602      	mov	r2, r0
 8008680:	460b      	mov	r3, r1
 8008682:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008686:	f7f7 fdff 	bl	8000288 <__aeabi_dsub>
 800868a:	f806 7b01 	strb.w	r7, [r6], #1
 800868e:	42ae      	cmp	r6, r5
 8008690:	e9cd 0100 	strd	r0, r1, [sp]
 8008694:	f04f 0200 	mov.w	r2, #0
 8008698:	d126      	bne.n	80086e8 <_dtoa_r+0x5e8>
 800869a:	4b1c      	ldr	r3, [pc, #112]	; (800870c <_dtoa_r+0x60c>)
 800869c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80086a0:	f7f7 fdf4 	bl	800028c <__adddf3>
 80086a4:	4602      	mov	r2, r0
 80086a6:	460b      	mov	r3, r1
 80086a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80086ac:	f7f8 fa34 	bl	8000b18 <__aeabi_dcmpgt>
 80086b0:	2800      	cmp	r0, #0
 80086b2:	d174      	bne.n	800879e <_dtoa_r+0x69e>
 80086b4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80086b8:	2000      	movs	r0, #0
 80086ba:	4914      	ldr	r1, [pc, #80]	; (800870c <_dtoa_r+0x60c>)
 80086bc:	f7f7 fde4 	bl	8000288 <__aeabi_dsub>
 80086c0:	4602      	mov	r2, r0
 80086c2:	460b      	mov	r3, r1
 80086c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80086c8:	f7f8 fa08 	bl	8000adc <__aeabi_dcmplt>
 80086cc:	2800      	cmp	r0, #0
 80086ce:	f43f af30 	beq.w	8008532 <_dtoa_r+0x432>
 80086d2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80086d6:	2b30      	cmp	r3, #48	; 0x30
 80086d8:	f105 32ff 	add.w	r2, r5, #4294967295
 80086dc:	d002      	beq.n	80086e4 <_dtoa_r+0x5e4>
 80086de:	f8dd a020 	ldr.w	sl, [sp, #32]
 80086e2:	e04a      	b.n	800877a <_dtoa_r+0x67a>
 80086e4:	4615      	mov	r5, r2
 80086e6:	e7f4      	b.n	80086d2 <_dtoa_r+0x5d2>
 80086e8:	4b05      	ldr	r3, [pc, #20]	; (8008700 <_dtoa_r+0x600>)
 80086ea:	f7f7 ff85 	bl	80005f8 <__aeabi_dmul>
 80086ee:	e9cd 0100 	strd	r0, r1, [sp]
 80086f2:	e7bc      	b.n	800866e <_dtoa_r+0x56e>
 80086f4:	0800aa98 	.word	0x0800aa98
 80086f8:	0800aa70 	.word	0x0800aa70
 80086fc:	3ff00000 	.word	0x3ff00000
 8008700:	40240000 	.word	0x40240000
 8008704:	401c0000 	.word	0x401c0000
 8008708:	40140000 	.word	0x40140000
 800870c:	3fe00000 	.word	0x3fe00000
 8008710:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008714:	465d      	mov	r5, fp
 8008716:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800871a:	4630      	mov	r0, r6
 800871c:	4639      	mov	r1, r7
 800871e:	f7f8 f895 	bl	800084c <__aeabi_ddiv>
 8008722:	f7f8 fa19 	bl	8000b58 <__aeabi_d2iz>
 8008726:	4680      	mov	r8, r0
 8008728:	f7f7 fefc 	bl	8000524 <__aeabi_i2d>
 800872c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008730:	f7f7 ff62 	bl	80005f8 <__aeabi_dmul>
 8008734:	4602      	mov	r2, r0
 8008736:	460b      	mov	r3, r1
 8008738:	4630      	mov	r0, r6
 800873a:	4639      	mov	r1, r7
 800873c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8008740:	f7f7 fda2 	bl	8000288 <__aeabi_dsub>
 8008744:	f805 6b01 	strb.w	r6, [r5], #1
 8008748:	eba5 060b 	sub.w	r6, r5, fp
 800874c:	45b1      	cmp	r9, r6
 800874e:	4602      	mov	r2, r0
 8008750:	460b      	mov	r3, r1
 8008752:	d139      	bne.n	80087c8 <_dtoa_r+0x6c8>
 8008754:	f7f7 fd9a 	bl	800028c <__adddf3>
 8008758:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800875c:	4606      	mov	r6, r0
 800875e:	460f      	mov	r7, r1
 8008760:	f7f8 f9da 	bl	8000b18 <__aeabi_dcmpgt>
 8008764:	b9c8      	cbnz	r0, 800879a <_dtoa_r+0x69a>
 8008766:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800876a:	4630      	mov	r0, r6
 800876c:	4639      	mov	r1, r7
 800876e:	f7f8 f9ab 	bl	8000ac8 <__aeabi_dcmpeq>
 8008772:	b110      	cbz	r0, 800877a <_dtoa_r+0x67a>
 8008774:	f018 0f01 	tst.w	r8, #1
 8008778:	d10f      	bne.n	800879a <_dtoa_r+0x69a>
 800877a:	9904      	ldr	r1, [sp, #16]
 800877c:	4620      	mov	r0, r4
 800877e:	f000 fcaa 	bl	80090d6 <_Bfree>
 8008782:	2300      	movs	r3, #0
 8008784:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008786:	702b      	strb	r3, [r5, #0]
 8008788:	f10a 0301 	add.w	r3, sl, #1
 800878c:	6013      	str	r3, [r2, #0]
 800878e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008790:	2b00      	cmp	r3, #0
 8008792:	f000 8241 	beq.w	8008c18 <_dtoa_r+0xb18>
 8008796:	601d      	str	r5, [r3, #0]
 8008798:	e23e      	b.n	8008c18 <_dtoa_r+0xb18>
 800879a:	f8cd a020 	str.w	sl, [sp, #32]
 800879e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80087a2:	2a39      	cmp	r2, #57	; 0x39
 80087a4:	f105 33ff 	add.w	r3, r5, #4294967295
 80087a8:	d108      	bne.n	80087bc <_dtoa_r+0x6bc>
 80087aa:	459b      	cmp	fp, r3
 80087ac:	d10a      	bne.n	80087c4 <_dtoa_r+0x6c4>
 80087ae:	9b08      	ldr	r3, [sp, #32]
 80087b0:	3301      	adds	r3, #1
 80087b2:	9308      	str	r3, [sp, #32]
 80087b4:	2330      	movs	r3, #48	; 0x30
 80087b6:	f88b 3000 	strb.w	r3, [fp]
 80087ba:	465b      	mov	r3, fp
 80087bc:	781a      	ldrb	r2, [r3, #0]
 80087be:	3201      	adds	r2, #1
 80087c0:	701a      	strb	r2, [r3, #0]
 80087c2:	e78c      	b.n	80086de <_dtoa_r+0x5de>
 80087c4:	461d      	mov	r5, r3
 80087c6:	e7ea      	b.n	800879e <_dtoa_r+0x69e>
 80087c8:	2200      	movs	r2, #0
 80087ca:	4b9b      	ldr	r3, [pc, #620]	; (8008a38 <_dtoa_r+0x938>)
 80087cc:	f7f7 ff14 	bl	80005f8 <__aeabi_dmul>
 80087d0:	2200      	movs	r2, #0
 80087d2:	2300      	movs	r3, #0
 80087d4:	4606      	mov	r6, r0
 80087d6:	460f      	mov	r7, r1
 80087d8:	f7f8 f976 	bl	8000ac8 <__aeabi_dcmpeq>
 80087dc:	2800      	cmp	r0, #0
 80087de:	d09a      	beq.n	8008716 <_dtoa_r+0x616>
 80087e0:	e7cb      	b.n	800877a <_dtoa_r+0x67a>
 80087e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80087e4:	2a00      	cmp	r2, #0
 80087e6:	f000 808b 	beq.w	8008900 <_dtoa_r+0x800>
 80087ea:	9a06      	ldr	r2, [sp, #24]
 80087ec:	2a01      	cmp	r2, #1
 80087ee:	dc6e      	bgt.n	80088ce <_dtoa_r+0x7ce>
 80087f0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80087f2:	2a00      	cmp	r2, #0
 80087f4:	d067      	beq.n	80088c6 <_dtoa_r+0x7c6>
 80087f6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80087fa:	9f07      	ldr	r7, [sp, #28]
 80087fc:	9d05      	ldr	r5, [sp, #20]
 80087fe:	9a05      	ldr	r2, [sp, #20]
 8008800:	2101      	movs	r1, #1
 8008802:	441a      	add	r2, r3
 8008804:	4620      	mov	r0, r4
 8008806:	9205      	str	r2, [sp, #20]
 8008808:	4498      	add	r8, r3
 800880a:	f000 fd04 	bl	8009216 <__i2b>
 800880e:	4606      	mov	r6, r0
 8008810:	2d00      	cmp	r5, #0
 8008812:	dd0c      	ble.n	800882e <_dtoa_r+0x72e>
 8008814:	f1b8 0f00 	cmp.w	r8, #0
 8008818:	dd09      	ble.n	800882e <_dtoa_r+0x72e>
 800881a:	4545      	cmp	r5, r8
 800881c:	9a05      	ldr	r2, [sp, #20]
 800881e:	462b      	mov	r3, r5
 8008820:	bfa8      	it	ge
 8008822:	4643      	movge	r3, r8
 8008824:	1ad2      	subs	r2, r2, r3
 8008826:	9205      	str	r2, [sp, #20]
 8008828:	1aed      	subs	r5, r5, r3
 800882a:	eba8 0803 	sub.w	r8, r8, r3
 800882e:	9b07      	ldr	r3, [sp, #28]
 8008830:	b1eb      	cbz	r3, 800886e <_dtoa_r+0x76e>
 8008832:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008834:	2b00      	cmp	r3, #0
 8008836:	d067      	beq.n	8008908 <_dtoa_r+0x808>
 8008838:	b18f      	cbz	r7, 800885e <_dtoa_r+0x75e>
 800883a:	4631      	mov	r1, r6
 800883c:	463a      	mov	r2, r7
 800883e:	4620      	mov	r0, r4
 8008840:	f000 fd88 	bl	8009354 <__pow5mult>
 8008844:	9a04      	ldr	r2, [sp, #16]
 8008846:	4601      	mov	r1, r0
 8008848:	4606      	mov	r6, r0
 800884a:	4620      	mov	r0, r4
 800884c:	f000 fcec 	bl	8009228 <__multiply>
 8008850:	9904      	ldr	r1, [sp, #16]
 8008852:	9008      	str	r0, [sp, #32]
 8008854:	4620      	mov	r0, r4
 8008856:	f000 fc3e 	bl	80090d6 <_Bfree>
 800885a:	9b08      	ldr	r3, [sp, #32]
 800885c:	9304      	str	r3, [sp, #16]
 800885e:	9b07      	ldr	r3, [sp, #28]
 8008860:	1bda      	subs	r2, r3, r7
 8008862:	d004      	beq.n	800886e <_dtoa_r+0x76e>
 8008864:	9904      	ldr	r1, [sp, #16]
 8008866:	4620      	mov	r0, r4
 8008868:	f000 fd74 	bl	8009354 <__pow5mult>
 800886c:	9004      	str	r0, [sp, #16]
 800886e:	2101      	movs	r1, #1
 8008870:	4620      	mov	r0, r4
 8008872:	f000 fcd0 	bl	8009216 <__i2b>
 8008876:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008878:	4607      	mov	r7, r0
 800887a:	2b00      	cmp	r3, #0
 800887c:	f000 81d0 	beq.w	8008c20 <_dtoa_r+0xb20>
 8008880:	461a      	mov	r2, r3
 8008882:	4601      	mov	r1, r0
 8008884:	4620      	mov	r0, r4
 8008886:	f000 fd65 	bl	8009354 <__pow5mult>
 800888a:	9b06      	ldr	r3, [sp, #24]
 800888c:	2b01      	cmp	r3, #1
 800888e:	4607      	mov	r7, r0
 8008890:	dc40      	bgt.n	8008914 <_dtoa_r+0x814>
 8008892:	9b00      	ldr	r3, [sp, #0]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d139      	bne.n	800890c <_dtoa_r+0x80c>
 8008898:	9b01      	ldr	r3, [sp, #4]
 800889a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d136      	bne.n	8008910 <_dtoa_r+0x810>
 80088a2:	9b01      	ldr	r3, [sp, #4]
 80088a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80088a8:	0d1b      	lsrs	r3, r3, #20
 80088aa:	051b      	lsls	r3, r3, #20
 80088ac:	b12b      	cbz	r3, 80088ba <_dtoa_r+0x7ba>
 80088ae:	9b05      	ldr	r3, [sp, #20]
 80088b0:	3301      	adds	r3, #1
 80088b2:	9305      	str	r3, [sp, #20]
 80088b4:	f108 0801 	add.w	r8, r8, #1
 80088b8:	2301      	movs	r3, #1
 80088ba:	9307      	str	r3, [sp, #28]
 80088bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d12a      	bne.n	8008918 <_dtoa_r+0x818>
 80088c2:	2001      	movs	r0, #1
 80088c4:	e030      	b.n	8008928 <_dtoa_r+0x828>
 80088c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80088c8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80088cc:	e795      	b.n	80087fa <_dtoa_r+0x6fa>
 80088ce:	9b07      	ldr	r3, [sp, #28]
 80088d0:	f109 37ff 	add.w	r7, r9, #4294967295
 80088d4:	42bb      	cmp	r3, r7
 80088d6:	bfbf      	itttt	lt
 80088d8:	9b07      	ldrlt	r3, [sp, #28]
 80088da:	9707      	strlt	r7, [sp, #28]
 80088dc:	1afa      	sublt	r2, r7, r3
 80088de:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80088e0:	bfbb      	ittet	lt
 80088e2:	189b      	addlt	r3, r3, r2
 80088e4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80088e6:	1bdf      	subge	r7, r3, r7
 80088e8:	2700      	movlt	r7, #0
 80088ea:	f1b9 0f00 	cmp.w	r9, #0
 80088ee:	bfb5      	itete	lt
 80088f0:	9b05      	ldrlt	r3, [sp, #20]
 80088f2:	9d05      	ldrge	r5, [sp, #20]
 80088f4:	eba3 0509 	sublt.w	r5, r3, r9
 80088f8:	464b      	movge	r3, r9
 80088fa:	bfb8      	it	lt
 80088fc:	2300      	movlt	r3, #0
 80088fe:	e77e      	b.n	80087fe <_dtoa_r+0x6fe>
 8008900:	9f07      	ldr	r7, [sp, #28]
 8008902:	9d05      	ldr	r5, [sp, #20]
 8008904:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8008906:	e783      	b.n	8008810 <_dtoa_r+0x710>
 8008908:	9a07      	ldr	r2, [sp, #28]
 800890a:	e7ab      	b.n	8008864 <_dtoa_r+0x764>
 800890c:	2300      	movs	r3, #0
 800890e:	e7d4      	b.n	80088ba <_dtoa_r+0x7ba>
 8008910:	9b00      	ldr	r3, [sp, #0]
 8008912:	e7d2      	b.n	80088ba <_dtoa_r+0x7ba>
 8008914:	2300      	movs	r3, #0
 8008916:	9307      	str	r3, [sp, #28]
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800891e:	6918      	ldr	r0, [r3, #16]
 8008920:	f000 fc2b 	bl	800917a <__hi0bits>
 8008924:	f1c0 0020 	rsb	r0, r0, #32
 8008928:	4440      	add	r0, r8
 800892a:	f010 001f 	ands.w	r0, r0, #31
 800892e:	d047      	beq.n	80089c0 <_dtoa_r+0x8c0>
 8008930:	f1c0 0320 	rsb	r3, r0, #32
 8008934:	2b04      	cmp	r3, #4
 8008936:	dd3b      	ble.n	80089b0 <_dtoa_r+0x8b0>
 8008938:	9b05      	ldr	r3, [sp, #20]
 800893a:	f1c0 001c 	rsb	r0, r0, #28
 800893e:	4403      	add	r3, r0
 8008940:	9305      	str	r3, [sp, #20]
 8008942:	4405      	add	r5, r0
 8008944:	4480      	add	r8, r0
 8008946:	9b05      	ldr	r3, [sp, #20]
 8008948:	2b00      	cmp	r3, #0
 800894a:	dd05      	ble.n	8008958 <_dtoa_r+0x858>
 800894c:	461a      	mov	r2, r3
 800894e:	9904      	ldr	r1, [sp, #16]
 8008950:	4620      	mov	r0, r4
 8008952:	f000 fd4d 	bl	80093f0 <__lshift>
 8008956:	9004      	str	r0, [sp, #16]
 8008958:	f1b8 0f00 	cmp.w	r8, #0
 800895c:	dd05      	ble.n	800896a <_dtoa_r+0x86a>
 800895e:	4639      	mov	r1, r7
 8008960:	4642      	mov	r2, r8
 8008962:	4620      	mov	r0, r4
 8008964:	f000 fd44 	bl	80093f0 <__lshift>
 8008968:	4607      	mov	r7, r0
 800896a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800896c:	b353      	cbz	r3, 80089c4 <_dtoa_r+0x8c4>
 800896e:	4639      	mov	r1, r7
 8008970:	9804      	ldr	r0, [sp, #16]
 8008972:	f000 fd91 	bl	8009498 <__mcmp>
 8008976:	2800      	cmp	r0, #0
 8008978:	da24      	bge.n	80089c4 <_dtoa_r+0x8c4>
 800897a:	2300      	movs	r3, #0
 800897c:	220a      	movs	r2, #10
 800897e:	9904      	ldr	r1, [sp, #16]
 8008980:	4620      	mov	r0, r4
 8008982:	f000 fbbf 	bl	8009104 <__multadd>
 8008986:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008988:	9004      	str	r0, [sp, #16]
 800898a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800898e:	2b00      	cmp	r3, #0
 8008990:	f000 814d 	beq.w	8008c2e <_dtoa_r+0xb2e>
 8008994:	2300      	movs	r3, #0
 8008996:	4631      	mov	r1, r6
 8008998:	220a      	movs	r2, #10
 800899a:	4620      	mov	r0, r4
 800899c:	f000 fbb2 	bl	8009104 <__multadd>
 80089a0:	9b02      	ldr	r3, [sp, #8]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	4606      	mov	r6, r0
 80089a6:	dc4f      	bgt.n	8008a48 <_dtoa_r+0x948>
 80089a8:	9b06      	ldr	r3, [sp, #24]
 80089aa:	2b02      	cmp	r3, #2
 80089ac:	dd4c      	ble.n	8008a48 <_dtoa_r+0x948>
 80089ae:	e011      	b.n	80089d4 <_dtoa_r+0x8d4>
 80089b0:	d0c9      	beq.n	8008946 <_dtoa_r+0x846>
 80089b2:	9a05      	ldr	r2, [sp, #20]
 80089b4:	331c      	adds	r3, #28
 80089b6:	441a      	add	r2, r3
 80089b8:	9205      	str	r2, [sp, #20]
 80089ba:	441d      	add	r5, r3
 80089bc:	4498      	add	r8, r3
 80089be:	e7c2      	b.n	8008946 <_dtoa_r+0x846>
 80089c0:	4603      	mov	r3, r0
 80089c2:	e7f6      	b.n	80089b2 <_dtoa_r+0x8b2>
 80089c4:	f1b9 0f00 	cmp.w	r9, #0
 80089c8:	dc38      	bgt.n	8008a3c <_dtoa_r+0x93c>
 80089ca:	9b06      	ldr	r3, [sp, #24]
 80089cc:	2b02      	cmp	r3, #2
 80089ce:	dd35      	ble.n	8008a3c <_dtoa_r+0x93c>
 80089d0:	f8cd 9008 	str.w	r9, [sp, #8]
 80089d4:	9b02      	ldr	r3, [sp, #8]
 80089d6:	b963      	cbnz	r3, 80089f2 <_dtoa_r+0x8f2>
 80089d8:	4639      	mov	r1, r7
 80089da:	2205      	movs	r2, #5
 80089dc:	4620      	mov	r0, r4
 80089de:	f000 fb91 	bl	8009104 <__multadd>
 80089e2:	4601      	mov	r1, r0
 80089e4:	4607      	mov	r7, r0
 80089e6:	9804      	ldr	r0, [sp, #16]
 80089e8:	f000 fd56 	bl	8009498 <__mcmp>
 80089ec:	2800      	cmp	r0, #0
 80089ee:	f73f adcc 	bgt.w	800858a <_dtoa_r+0x48a>
 80089f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089f4:	465d      	mov	r5, fp
 80089f6:	ea6f 0a03 	mvn.w	sl, r3
 80089fa:	f04f 0900 	mov.w	r9, #0
 80089fe:	4639      	mov	r1, r7
 8008a00:	4620      	mov	r0, r4
 8008a02:	f000 fb68 	bl	80090d6 <_Bfree>
 8008a06:	2e00      	cmp	r6, #0
 8008a08:	f43f aeb7 	beq.w	800877a <_dtoa_r+0x67a>
 8008a0c:	f1b9 0f00 	cmp.w	r9, #0
 8008a10:	d005      	beq.n	8008a1e <_dtoa_r+0x91e>
 8008a12:	45b1      	cmp	r9, r6
 8008a14:	d003      	beq.n	8008a1e <_dtoa_r+0x91e>
 8008a16:	4649      	mov	r1, r9
 8008a18:	4620      	mov	r0, r4
 8008a1a:	f000 fb5c 	bl	80090d6 <_Bfree>
 8008a1e:	4631      	mov	r1, r6
 8008a20:	4620      	mov	r0, r4
 8008a22:	f000 fb58 	bl	80090d6 <_Bfree>
 8008a26:	e6a8      	b.n	800877a <_dtoa_r+0x67a>
 8008a28:	2700      	movs	r7, #0
 8008a2a:	463e      	mov	r6, r7
 8008a2c:	e7e1      	b.n	80089f2 <_dtoa_r+0x8f2>
 8008a2e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008a32:	463e      	mov	r6, r7
 8008a34:	e5a9      	b.n	800858a <_dtoa_r+0x48a>
 8008a36:	bf00      	nop
 8008a38:	40240000 	.word	0x40240000
 8008a3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a3e:	f8cd 9008 	str.w	r9, [sp, #8]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	f000 80fa 	beq.w	8008c3c <_dtoa_r+0xb3c>
 8008a48:	2d00      	cmp	r5, #0
 8008a4a:	dd05      	ble.n	8008a58 <_dtoa_r+0x958>
 8008a4c:	4631      	mov	r1, r6
 8008a4e:	462a      	mov	r2, r5
 8008a50:	4620      	mov	r0, r4
 8008a52:	f000 fccd 	bl	80093f0 <__lshift>
 8008a56:	4606      	mov	r6, r0
 8008a58:	9b07      	ldr	r3, [sp, #28]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d04c      	beq.n	8008af8 <_dtoa_r+0x9f8>
 8008a5e:	6871      	ldr	r1, [r6, #4]
 8008a60:	4620      	mov	r0, r4
 8008a62:	f000 fb04 	bl	800906e <_Balloc>
 8008a66:	6932      	ldr	r2, [r6, #16]
 8008a68:	3202      	adds	r2, #2
 8008a6a:	4605      	mov	r5, r0
 8008a6c:	0092      	lsls	r2, r2, #2
 8008a6e:	f106 010c 	add.w	r1, r6, #12
 8008a72:	300c      	adds	r0, #12
 8008a74:	f000 faf0 	bl	8009058 <memcpy>
 8008a78:	2201      	movs	r2, #1
 8008a7a:	4629      	mov	r1, r5
 8008a7c:	4620      	mov	r0, r4
 8008a7e:	f000 fcb7 	bl	80093f0 <__lshift>
 8008a82:	9b00      	ldr	r3, [sp, #0]
 8008a84:	f8cd b014 	str.w	fp, [sp, #20]
 8008a88:	f003 0301 	and.w	r3, r3, #1
 8008a8c:	46b1      	mov	r9, r6
 8008a8e:	9307      	str	r3, [sp, #28]
 8008a90:	4606      	mov	r6, r0
 8008a92:	4639      	mov	r1, r7
 8008a94:	9804      	ldr	r0, [sp, #16]
 8008a96:	f7ff faa7 	bl	8007fe8 <quorem>
 8008a9a:	4649      	mov	r1, r9
 8008a9c:	4605      	mov	r5, r0
 8008a9e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008aa2:	9804      	ldr	r0, [sp, #16]
 8008aa4:	f000 fcf8 	bl	8009498 <__mcmp>
 8008aa8:	4632      	mov	r2, r6
 8008aaa:	9000      	str	r0, [sp, #0]
 8008aac:	4639      	mov	r1, r7
 8008aae:	4620      	mov	r0, r4
 8008ab0:	f000 fd0c 	bl	80094cc <__mdiff>
 8008ab4:	68c3      	ldr	r3, [r0, #12]
 8008ab6:	4602      	mov	r2, r0
 8008ab8:	bb03      	cbnz	r3, 8008afc <_dtoa_r+0x9fc>
 8008aba:	4601      	mov	r1, r0
 8008abc:	9008      	str	r0, [sp, #32]
 8008abe:	9804      	ldr	r0, [sp, #16]
 8008ac0:	f000 fcea 	bl	8009498 <__mcmp>
 8008ac4:	9a08      	ldr	r2, [sp, #32]
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	4611      	mov	r1, r2
 8008aca:	4620      	mov	r0, r4
 8008acc:	9308      	str	r3, [sp, #32]
 8008ace:	f000 fb02 	bl	80090d6 <_Bfree>
 8008ad2:	9b08      	ldr	r3, [sp, #32]
 8008ad4:	b9a3      	cbnz	r3, 8008b00 <_dtoa_r+0xa00>
 8008ad6:	9a06      	ldr	r2, [sp, #24]
 8008ad8:	b992      	cbnz	r2, 8008b00 <_dtoa_r+0xa00>
 8008ada:	9a07      	ldr	r2, [sp, #28]
 8008adc:	b982      	cbnz	r2, 8008b00 <_dtoa_r+0xa00>
 8008ade:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008ae2:	d029      	beq.n	8008b38 <_dtoa_r+0xa38>
 8008ae4:	9b00      	ldr	r3, [sp, #0]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	dd01      	ble.n	8008aee <_dtoa_r+0x9ee>
 8008aea:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8008aee:	9b05      	ldr	r3, [sp, #20]
 8008af0:	1c5d      	adds	r5, r3, #1
 8008af2:	f883 8000 	strb.w	r8, [r3]
 8008af6:	e782      	b.n	80089fe <_dtoa_r+0x8fe>
 8008af8:	4630      	mov	r0, r6
 8008afa:	e7c2      	b.n	8008a82 <_dtoa_r+0x982>
 8008afc:	2301      	movs	r3, #1
 8008afe:	e7e3      	b.n	8008ac8 <_dtoa_r+0x9c8>
 8008b00:	9a00      	ldr	r2, [sp, #0]
 8008b02:	2a00      	cmp	r2, #0
 8008b04:	db04      	blt.n	8008b10 <_dtoa_r+0xa10>
 8008b06:	d125      	bne.n	8008b54 <_dtoa_r+0xa54>
 8008b08:	9a06      	ldr	r2, [sp, #24]
 8008b0a:	bb1a      	cbnz	r2, 8008b54 <_dtoa_r+0xa54>
 8008b0c:	9a07      	ldr	r2, [sp, #28]
 8008b0e:	bb0a      	cbnz	r2, 8008b54 <_dtoa_r+0xa54>
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	ddec      	ble.n	8008aee <_dtoa_r+0x9ee>
 8008b14:	2201      	movs	r2, #1
 8008b16:	9904      	ldr	r1, [sp, #16]
 8008b18:	4620      	mov	r0, r4
 8008b1a:	f000 fc69 	bl	80093f0 <__lshift>
 8008b1e:	4639      	mov	r1, r7
 8008b20:	9004      	str	r0, [sp, #16]
 8008b22:	f000 fcb9 	bl	8009498 <__mcmp>
 8008b26:	2800      	cmp	r0, #0
 8008b28:	dc03      	bgt.n	8008b32 <_dtoa_r+0xa32>
 8008b2a:	d1e0      	bne.n	8008aee <_dtoa_r+0x9ee>
 8008b2c:	f018 0f01 	tst.w	r8, #1
 8008b30:	d0dd      	beq.n	8008aee <_dtoa_r+0x9ee>
 8008b32:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008b36:	d1d8      	bne.n	8008aea <_dtoa_r+0x9ea>
 8008b38:	9b05      	ldr	r3, [sp, #20]
 8008b3a:	9a05      	ldr	r2, [sp, #20]
 8008b3c:	1c5d      	adds	r5, r3, #1
 8008b3e:	2339      	movs	r3, #57	; 0x39
 8008b40:	7013      	strb	r3, [r2, #0]
 8008b42:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008b46:	2b39      	cmp	r3, #57	; 0x39
 8008b48:	f105 32ff 	add.w	r2, r5, #4294967295
 8008b4c:	d04f      	beq.n	8008bee <_dtoa_r+0xaee>
 8008b4e:	3301      	adds	r3, #1
 8008b50:	7013      	strb	r3, [r2, #0]
 8008b52:	e754      	b.n	80089fe <_dtoa_r+0x8fe>
 8008b54:	9a05      	ldr	r2, [sp, #20]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	f102 0501 	add.w	r5, r2, #1
 8008b5c:	dd06      	ble.n	8008b6c <_dtoa_r+0xa6c>
 8008b5e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008b62:	d0e9      	beq.n	8008b38 <_dtoa_r+0xa38>
 8008b64:	f108 0801 	add.w	r8, r8, #1
 8008b68:	9b05      	ldr	r3, [sp, #20]
 8008b6a:	e7c2      	b.n	8008af2 <_dtoa_r+0x9f2>
 8008b6c:	9a02      	ldr	r2, [sp, #8]
 8008b6e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8008b72:	eba5 030b 	sub.w	r3, r5, fp
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d021      	beq.n	8008bbe <_dtoa_r+0xabe>
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	220a      	movs	r2, #10
 8008b7e:	9904      	ldr	r1, [sp, #16]
 8008b80:	4620      	mov	r0, r4
 8008b82:	f000 fabf 	bl	8009104 <__multadd>
 8008b86:	45b1      	cmp	r9, r6
 8008b88:	9004      	str	r0, [sp, #16]
 8008b8a:	f04f 0300 	mov.w	r3, #0
 8008b8e:	f04f 020a 	mov.w	r2, #10
 8008b92:	4649      	mov	r1, r9
 8008b94:	4620      	mov	r0, r4
 8008b96:	d105      	bne.n	8008ba4 <_dtoa_r+0xaa4>
 8008b98:	f000 fab4 	bl	8009104 <__multadd>
 8008b9c:	4681      	mov	r9, r0
 8008b9e:	4606      	mov	r6, r0
 8008ba0:	9505      	str	r5, [sp, #20]
 8008ba2:	e776      	b.n	8008a92 <_dtoa_r+0x992>
 8008ba4:	f000 faae 	bl	8009104 <__multadd>
 8008ba8:	4631      	mov	r1, r6
 8008baa:	4681      	mov	r9, r0
 8008bac:	2300      	movs	r3, #0
 8008bae:	220a      	movs	r2, #10
 8008bb0:	4620      	mov	r0, r4
 8008bb2:	f000 faa7 	bl	8009104 <__multadd>
 8008bb6:	4606      	mov	r6, r0
 8008bb8:	e7f2      	b.n	8008ba0 <_dtoa_r+0xaa0>
 8008bba:	f04f 0900 	mov.w	r9, #0
 8008bbe:	2201      	movs	r2, #1
 8008bc0:	9904      	ldr	r1, [sp, #16]
 8008bc2:	4620      	mov	r0, r4
 8008bc4:	f000 fc14 	bl	80093f0 <__lshift>
 8008bc8:	4639      	mov	r1, r7
 8008bca:	9004      	str	r0, [sp, #16]
 8008bcc:	f000 fc64 	bl	8009498 <__mcmp>
 8008bd0:	2800      	cmp	r0, #0
 8008bd2:	dcb6      	bgt.n	8008b42 <_dtoa_r+0xa42>
 8008bd4:	d102      	bne.n	8008bdc <_dtoa_r+0xadc>
 8008bd6:	f018 0f01 	tst.w	r8, #1
 8008bda:	d1b2      	bne.n	8008b42 <_dtoa_r+0xa42>
 8008bdc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008be0:	2b30      	cmp	r3, #48	; 0x30
 8008be2:	f105 32ff 	add.w	r2, r5, #4294967295
 8008be6:	f47f af0a 	bne.w	80089fe <_dtoa_r+0x8fe>
 8008bea:	4615      	mov	r5, r2
 8008bec:	e7f6      	b.n	8008bdc <_dtoa_r+0xadc>
 8008bee:	4593      	cmp	fp, r2
 8008bf0:	d105      	bne.n	8008bfe <_dtoa_r+0xafe>
 8008bf2:	2331      	movs	r3, #49	; 0x31
 8008bf4:	f10a 0a01 	add.w	sl, sl, #1
 8008bf8:	f88b 3000 	strb.w	r3, [fp]
 8008bfc:	e6ff      	b.n	80089fe <_dtoa_r+0x8fe>
 8008bfe:	4615      	mov	r5, r2
 8008c00:	e79f      	b.n	8008b42 <_dtoa_r+0xa42>
 8008c02:	f8df b064 	ldr.w	fp, [pc, #100]	; 8008c68 <_dtoa_r+0xb68>
 8008c06:	e007      	b.n	8008c18 <_dtoa_r+0xb18>
 8008c08:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c0a:	f8df b060 	ldr.w	fp, [pc, #96]	; 8008c6c <_dtoa_r+0xb6c>
 8008c0e:	b11b      	cbz	r3, 8008c18 <_dtoa_r+0xb18>
 8008c10:	f10b 0308 	add.w	r3, fp, #8
 8008c14:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008c16:	6013      	str	r3, [r2, #0]
 8008c18:	4658      	mov	r0, fp
 8008c1a:	b017      	add	sp, #92	; 0x5c
 8008c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c20:	9b06      	ldr	r3, [sp, #24]
 8008c22:	2b01      	cmp	r3, #1
 8008c24:	f77f ae35 	ble.w	8008892 <_dtoa_r+0x792>
 8008c28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c2a:	9307      	str	r3, [sp, #28]
 8008c2c:	e649      	b.n	80088c2 <_dtoa_r+0x7c2>
 8008c2e:	9b02      	ldr	r3, [sp, #8]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	dc03      	bgt.n	8008c3c <_dtoa_r+0xb3c>
 8008c34:	9b06      	ldr	r3, [sp, #24]
 8008c36:	2b02      	cmp	r3, #2
 8008c38:	f73f aecc 	bgt.w	80089d4 <_dtoa_r+0x8d4>
 8008c3c:	465d      	mov	r5, fp
 8008c3e:	4639      	mov	r1, r7
 8008c40:	9804      	ldr	r0, [sp, #16]
 8008c42:	f7ff f9d1 	bl	8007fe8 <quorem>
 8008c46:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008c4a:	f805 8b01 	strb.w	r8, [r5], #1
 8008c4e:	9a02      	ldr	r2, [sp, #8]
 8008c50:	eba5 030b 	sub.w	r3, r5, fp
 8008c54:	429a      	cmp	r2, r3
 8008c56:	ddb0      	ble.n	8008bba <_dtoa_r+0xaba>
 8008c58:	2300      	movs	r3, #0
 8008c5a:	220a      	movs	r2, #10
 8008c5c:	9904      	ldr	r1, [sp, #16]
 8008c5e:	4620      	mov	r0, r4
 8008c60:	f000 fa50 	bl	8009104 <__multadd>
 8008c64:	9004      	str	r0, [sp, #16]
 8008c66:	e7ea      	b.n	8008c3e <_dtoa_r+0xb3e>
 8008c68:	0800a9dc 	.word	0x0800a9dc
 8008c6c:	0800aa00 	.word	0x0800aa00

08008c70 <__sflush_r>:
 8008c70:	898a      	ldrh	r2, [r1, #12]
 8008c72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c76:	4605      	mov	r5, r0
 8008c78:	0710      	lsls	r0, r2, #28
 8008c7a:	460c      	mov	r4, r1
 8008c7c:	d458      	bmi.n	8008d30 <__sflush_r+0xc0>
 8008c7e:	684b      	ldr	r3, [r1, #4]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	dc05      	bgt.n	8008c90 <__sflush_r+0x20>
 8008c84:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	dc02      	bgt.n	8008c90 <__sflush_r+0x20>
 8008c8a:	2000      	movs	r0, #0
 8008c8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c92:	2e00      	cmp	r6, #0
 8008c94:	d0f9      	beq.n	8008c8a <__sflush_r+0x1a>
 8008c96:	2300      	movs	r3, #0
 8008c98:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008c9c:	682f      	ldr	r7, [r5, #0]
 8008c9e:	6a21      	ldr	r1, [r4, #32]
 8008ca0:	602b      	str	r3, [r5, #0]
 8008ca2:	d032      	beq.n	8008d0a <__sflush_r+0x9a>
 8008ca4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008ca6:	89a3      	ldrh	r3, [r4, #12]
 8008ca8:	075a      	lsls	r2, r3, #29
 8008caa:	d505      	bpl.n	8008cb8 <__sflush_r+0x48>
 8008cac:	6863      	ldr	r3, [r4, #4]
 8008cae:	1ac0      	subs	r0, r0, r3
 8008cb0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008cb2:	b10b      	cbz	r3, 8008cb8 <__sflush_r+0x48>
 8008cb4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008cb6:	1ac0      	subs	r0, r0, r3
 8008cb8:	2300      	movs	r3, #0
 8008cba:	4602      	mov	r2, r0
 8008cbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008cbe:	6a21      	ldr	r1, [r4, #32]
 8008cc0:	4628      	mov	r0, r5
 8008cc2:	47b0      	blx	r6
 8008cc4:	1c43      	adds	r3, r0, #1
 8008cc6:	89a3      	ldrh	r3, [r4, #12]
 8008cc8:	d106      	bne.n	8008cd8 <__sflush_r+0x68>
 8008cca:	6829      	ldr	r1, [r5, #0]
 8008ccc:	291d      	cmp	r1, #29
 8008cce:	d848      	bhi.n	8008d62 <__sflush_r+0xf2>
 8008cd0:	4a29      	ldr	r2, [pc, #164]	; (8008d78 <__sflush_r+0x108>)
 8008cd2:	40ca      	lsrs	r2, r1
 8008cd4:	07d6      	lsls	r6, r2, #31
 8008cd6:	d544      	bpl.n	8008d62 <__sflush_r+0xf2>
 8008cd8:	2200      	movs	r2, #0
 8008cda:	6062      	str	r2, [r4, #4]
 8008cdc:	04d9      	lsls	r1, r3, #19
 8008cde:	6922      	ldr	r2, [r4, #16]
 8008ce0:	6022      	str	r2, [r4, #0]
 8008ce2:	d504      	bpl.n	8008cee <__sflush_r+0x7e>
 8008ce4:	1c42      	adds	r2, r0, #1
 8008ce6:	d101      	bne.n	8008cec <__sflush_r+0x7c>
 8008ce8:	682b      	ldr	r3, [r5, #0]
 8008cea:	b903      	cbnz	r3, 8008cee <__sflush_r+0x7e>
 8008cec:	6560      	str	r0, [r4, #84]	; 0x54
 8008cee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008cf0:	602f      	str	r7, [r5, #0]
 8008cf2:	2900      	cmp	r1, #0
 8008cf4:	d0c9      	beq.n	8008c8a <__sflush_r+0x1a>
 8008cf6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008cfa:	4299      	cmp	r1, r3
 8008cfc:	d002      	beq.n	8008d04 <__sflush_r+0x94>
 8008cfe:	4628      	mov	r0, r5
 8008d00:	f000 fc9e 	bl	8009640 <_free_r>
 8008d04:	2000      	movs	r0, #0
 8008d06:	6360      	str	r0, [r4, #52]	; 0x34
 8008d08:	e7c0      	b.n	8008c8c <__sflush_r+0x1c>
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	4628      	mov	r0, r5
 8008d0e:	47b0      	blx	r6
 8008d10:	1c41      	adds	r1, r0, #1
 8008d12:	d1c8      	bne.n	8008ca6 <__sflush_r+0x36>
 8008d14:	682b      	ldr	r3, [r5, #0]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d0c5      	beq.n	8008ca6 <__sflush_r+0x36>
 8008d1a:	2b1d      	cmp	r3, #29
 8008d1c:	d001      	beq.n	8008d22 <__sflush_r+0xb2>
 8008d1e:	2b16      	cmp	r3, #22
 8008d20:	d101      	bne.n	8008d26 <__sflush_r+0xb6>
 8008d22:	602f      	str	r7, [r5, #0]
 8008d24:	e7b1      	b.n	8008c8a <__sflush_r+0x1a>
 8008d26:	89a3      	ldrh	r3, [r4, #12]
 8008d28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d2c:	81a3      	strh	r3, [r4, #12]
 8008d2e:	e7ad      	b.n	8008c8c <__sflush_r+0x1c>
 8008d30:	690f      	ldr	r7, [r1, #16]
 8008d32:	2f00      	cmp	r7, #0
 8008d34:	d0a9      	beq.n	8008c8a <__sflush_r+0x1a>
 8008d36:	0793      	lsls	r3, r2, #30
 8008d38:	680e      	ldr	r6, [r1, #0]
 8008d3a:	bf08      	it	eq
 8008d3c:	694b      	ldreq	r3, [r1, #20]
 8008d3e:	600f      	str	r7, [r1, #0]
 8008d40:	bf18      	it	ne
 8008d42:	2300      	movne	r3, #0
 8008d44:	eba6 0807 	sub.w	r8, r6, r7
 8008d48:	608b      	str	r3, [r1, #8]
 8008d4a:	f1b8 0f00 	cmp.w	r8, #0
 8008d4e:	dd9c      	ble.n	8008c8a <__sflush_r+0x1a>
 8008d50:	4643      	mov	r3, r8
 8008d52:	463a      	mov	r2, r7
 8008d54:	6a21      	ldr	r1, [r4, #32]
 8008d56:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008d58:	4628      	mov	r0, r5
 8008d5a:	47b0      	blx	r6
 8008d5c:	2800      	cmp	r0, #0
 8008d5e:	dc06      	bgt.n	8008d6e <__sflush_r+0xfe>
 8008d60:	89a3      	ldrh	r3, [r4, #12]
 8008d62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d66:	81a3      	strh	r3, [r4, #12]
 8008d68:	f04f 30ff 	mov.w	r0, #4294967295
 8008d6c:	e78e      	b.n	8008c8c <__sflush_r+0x1c>
 8008d6e:	4407      	add	r7, r0
 8008d70:	eba8 0800 	sub.w	r8, r8, r0
 8008d74:	e7e9      	b.n	8008d4a <__sflush_r+0xda>
 8008d76:	bf00      	nop
 8008d78:	20400001 	.word	0x20400001

08008d7c <_fflush_r>:
 8008d7c:	b538      	push	{r3, r4, r5, lr}
 8008d7e:	690b      	ldr	r3, [r1, #16]
 8008d80:	4605      	mov	r5, r0
 8008d82:	460c      	mov	r4, r1
 8008d84:	b1db      	cbz	r3, 8008dbe <_fflush_r+0x42>
 8008d86:	b118      	cbz	r0, 8008d90 <_fflush_r+0x14>
 8008d88:	6983      	ldr	r3, [r0, #24]
 8008d8a:	b90b      	cbnz	r3, 8008d90 <_fflush_r+0x14>
 8008d8c:	f000 f860 	bl	8008e50 <__sinit>
 8008d90:	4b0c      	ldr	r3, [pc, #48]	; (8008dc4 <_fflush_r+0x48>)
 8008d92:	429c      	cmp	r4, r3
 8008d94:	d109      	bne.n	8008daa <_fflush_r+0x2e>
 8008d96:	686c      	ldr	r4, [r5, #4]
 8008d98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d9c:	b17b      	cbz	r3, 8008dbe <_fflush_r+0x42>
 8008d9e:	4621      	mov	r1, r4
 8008da0:	4628      	mov	r0, r5
 8008da2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008da6:	f7ff bf63 	b.w	8008c70 <__sflush_r>
 8008daa:	4b07      	ldr	r3, [pc, #28]	; (8008dc8 <_fflush_r+0x4c>)
 8008dac:	429c      	cmp	r4, r3
 8008dae:	d101      	bne.n	8008db4 <_fflush_r+0x38>
 8008db0:	68ac      	ldr	r4, [r5, #8]
 8008db2:	e7f1      	b.n	8008d98 <_fflush_r+0x1c>
 8008db4:	4b05      	ldr	r3, [pc, #20]	; (8008dcc <_fflush_r+0x50>)
 8008db6:	429c      	cmp	r4, r3
 8008db8:	bf08      	it	eq
 8008dba:	68ec      	ldreq	r4, [r5, #12]
 8008dbc:	e7ec      	b.n	8008d98 <_fflush_r+0x1c>
 8008dbe:	2000      	movs	r0, #0
 8008dc0:	bd38      	pop	{r3, r4, r5, pc}
 8008dc2:	bf00      	nop
 8008dc4:	0800aa30 	.word	0x0800aa30
 8008dc8:	0800aa50 	.word	0x0800aa50
 8008dcc:	0800aa10 	.word	0x0800aa10

08008dd0 <std>:
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	b510      	push	{r4, lr}
 8008dd4:	4604      	mov	r4, r0
 8008dd6:	e9c0 3300 	strd	r3, r3, [r0]
 8008dda:	6083      	str	r3, [r0, #8]
 8008ddc:	8181      	strh	r1, [r0, #12]
 8008dde:	6643      	str	r3, [r0, #100]	; 0x64
 8008de0:	81c2      	strh	r2, [r0, #14]
 8008de2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008de6:	6183      	str	r3, [r0, #24]
 8008de8:	4619      	mov	r1, r3
 8008dea:	2208      	movs	r2, #8
 8008dec:	305c      	adds	r0, #92	; 0x5c
 8008dee:	f7fe faa5 	bl	800733c <memset>
 8008df2:	4b05      	ldr	r3, [pc, #20]	; (8008e08 <std+0x38>)
 8008df4:	6263      	str	r3, [r4, #36]	; 0x24
 8008df6:	4b05      	ldr	r3, [pc, #20]	; (8008e0c <std+0x3c>)
 8008df8:	62a3      	str	r3, [r4, #40]	; 0x28
 8008dfa:	4b05      	ldr	r3, [pc, #20]	; (8008e10 <std+0x40>)
 8008dfc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008dfe:	4b05      	ldr	r3, [pc, #20]	; (8008e14 <std+0x44>)
 8008e00:	6224      	str	r4, [r4, #32]
 8008e02:	6323      	str	r3, [r4, #48]	; 0x30
 8008e04:	bd10      	pop	{r4, pc}
 8008e06:	bf00      	nop
 8008e08:	08009a31 	.word	0x08009a31
 8008e0c:	08009a53 	.word	0x08009a53
 8008e10:	08009a8b 	.word	0x08009a8b
 8008e14:	08009aaf 	.word	0x08009aaf

08008e18 <_cleanup_r>:
 8008e18:	4901      	ldr	r1, [pc, #4]	; (8008e20 <_cleanup_r+0x8>)
 8008e1a:	f000 b885 	b.w	8008f28 <_fwalk_reent>
 8008e1e:	bf00      	nop
 8008e20:	08008d7d 	.word	0x08008d7d

08008e24 <__sfmoreglue>:
 8008e24:	b570      	push	{r4, r5, r6, lr}
 8008e26:	1e4a      	subs	r2, r1, #1
 8008e28:	2568      	movs	r5, #104	; 0x68
 8008e2a:	4355      	muls	r5, r2
 8008e2c:	460e      	mov	r6, r1
 8008e2e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008e32:	f000 fc53 	bl	80096dc <_malloc_r>
 8008e36:	4604      	mov	r4, r0
 8008e38:	b140      	cbz	r0, 8008e4c <__sfmoreglue+0x28>
 8008e3a:	2100      	movs	r1, #0
 8008e3c:	e9c0 1600 	strd	r1, r6, [r0]
 8008e40:	300c      	adds	r0, #12
 8008e42:	60a0      	str	r0, [r4, #8]
 8008e44:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008e48:	f7fe fa78 	bl	800733c <memset>
 8008e4c:	4620      	mov	r0, r4
 8008e4e:	bd70      	pop	{r4, r5, r6, pc}

08008e50 <__sinit>:
 8008e50:	6983      	ldr	r3, [r0, #24]
 8008e52:	b510      	push	{r4, lr}
 8008e54:	4604      	mov	r4, r0
 8008e56:	bb33      	cbnz	r3, 8008ea6 <__sinit+0x56>
 8008e58:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8008e5c:	6503      	str	r3, [r0, #80]	; 0x50
 8008e5e:	4b12      	ldr	r3, [pc, #72]	; (8008ea8 <__sinit+0x58>)
 8008e60:	4a12      	ldr	r2, [pc, #72]	; (8008eac <__sinit+0x5c>)
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	6282      	str	r2, [r0, #40]	; 0x28
 8008e66:	4298      	cmp	r0, r3
 8008e68:	bf04      	itt	eq
 8008e6a:	2301      	moveq	r3, #1
 8008e6c:	6183      	streq	r3, [r0, #24]
 8008e6e:	f000 f81f 	bl	8008eb0 <__sfp>
 8008e72:	6060      	str	r0, [r4, #4]
 8008e74:	4620      	mov	r0, r4
 8008e76:	f000 f81b 	bl	8008eb0 <__sfp>
 8008e7a:	60a0      	str	r0, [r4, #8]
 8008e7c:	4620      	mov	r0, r4
 8008e7e:	f000 f817 	bl	8008eb0 <__sfp>
 8008e82:	2200      	movs	r2, #0
 8008e84:	60e0      	str	r0, [r4, #12]
 8008e86:	2104      	movs	r1, #4
 8008e88:	6860      	ldr	r0, [r4, #4]
 8008e8a:	f7ff ffa1 	bl	8008dd0 <std>
 8008e8e:	2201      	movs	r2, #1
 8008e90:	2109      	movs	r1, #9
 8008e92:	68a0      	ldr	r0, [r4, #8]
 8008e94:	f7ff ff9c 	bl	8008dd0 <std>
 8008e98:	2202      	movs	r2, #2
 8008e9a:	2112      	movs	r1, #18
 8008e9c:	68e0      	ldr	r0, [r4, #12]
 8008e9e:	f7ff ff97 	bl	8008dd0 <std>
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	61a3      	str	r3, [r4, #24]
 8008ea6:	bd10      	pop	{r4, pc}
 8008ea8:	0800a9c8 	.word	0x0800a9c8
 8008eac:	08008e19 	.word	0x08008e19

08008eb0 <__sfp>:
 8008eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eb2:	4b1b      	ldr	r3, [pc, #108]	; (8008f20 <__sfp+0x70>)
 8008eb4:	681e      	ldr	r6, [r3, #0]
 8008eb6:	69b3      	ldr	r3, [r6, #24]
 8008eb8:	4607      	mov	r7, r0
 8008eba:	b913      	cbnz	r3, 8008ec2 <__sfp+0x12>
 8008ebc:	4630      	mov	r0, r6
 8008ebe:	f7ff ffc7 	bl	8008e50 <__sinit>
 8008ec2:	3648      	adds	r6, #72	; 0x48
 8008ec4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008ec8:	3b01      	subs	r3, #1
 8008eca:	d503      	bpl.n	8008ed4 <__sfp+0x24>
 8008ecc:	6833      	ldr	r3, [r6, #0]
 8008ece:	b133      	cbz	r3, 8008ede <__sfp+0x2e>
 8008ed0:	6836      	ldr	r6, [r6, #0]
 8008ed2:	e7f7      	b.n	8008ec4 <__sfp+0x14>
 8008ed4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008ed8:	b16d      	cbz	r5, 8008ef6 <__sfp+0x46>
 8008eda:	3468      	adds	r4, #104	; 0x68
 8008edc:	e7f4      	b.n	8008ec8 <__sfp+0x18>
 8008ede:	2104      	movs	r1, #4
 8008ee0:	4638      	mov	r0, r7
 8008ee2:	f7ff ff9f 	bl	8008e24 <__sfmoreglue>
 8008ee6:	6030      	str	r0, [r6, #0]
 8008ee8:	2800      	cmp	r0, #0
 8008eea:	d1f1      	bne.n	8008ed0 <__sfp+0x20>
 8008eec:	230c      	movs	r3, #12
 8008eee:	603b      	str	r3, [r7, #0]
 8008ef0:	4604      	mov	r4, r0
 8008ef2:	4620      	mov	r0, r4
 8008ef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ef6:	4b0b      	ldr	r3, [pc, #44]	; (8008f24 <__sfp+0x74>)
 8008ef8:	6665      	str	r5, [r4, #100]	; 0x64
 8008efa:	e9c4 5500 	strd	r5, r5, [r4]
 8008efe:	60a5      	str	r5, [r4, #8]
 8008f00:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8008f04:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8008f08:	2208      	movs	r2, #8
 8008f0a:	4629      	mov	r1, r5
 8008f0c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008f10:	f7fe fa14 	bl	800733c <memset>
 8008f14:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008f18:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008f1c:	e7e9      	b.n	8008ef2 <__sfp+0x42>
 8008f1e:	bf00      	nop
 8008f20:	0800a9c8 	.word	0x0800a9c8
 8008f24:	ffff0001 	.word	0xffff0001

08008f28 <_fwalk_reent>:
 8008f28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f2c:	4680      	mov	r8, r0
 8008f2e:	4689      	mov	r9, r1
 8008f30:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008f34:	2600      	movs	r6, #0
 8008f36:	b914      	cbnz	r4, 8008f3e <_fwalk_reent+0x16>
 8008f38:	4630      	mov	r0, r6
 8008f3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f3e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8008f42:	3f01      	subs	r7, #1
 8008f44:	d501      	bpl.n	8008f4a <_fwalk_reent+0x22>
 8008f46:	6824      	ldr	r4, [r4, #0]
 8008f48:	e7f5      	b.n	8008f36 <_fwalk_reent+0xe>
 8008f4a:	89ab      	ldrh	r3, [r5, #12]
 8008f4c:	2b01      	cmp	r3, #1
 8008f4e:	d907      	bls.n	8008f60 <_fwalk_reent+0x38>
 8008f50:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008f54:	3301      	adds	r3, #1
 8008f56:	d003      	beq.n	8008f60 <_fwalk_reent+0x38>
 8008f58:	4629      	mov	r1, r5
 8008f5a:	4640      	mov	r0, r8
 8008f5c:	47c8      	blx	r9
 8008f5e:	4306      	orrs	r6, r0
 8008f60:	3568      	adds	r5, #104	; 0x68
 8008f62:	e7ee      	b.n	8008f42 <_fwalk_reent+0x1a>

08008f64 <_localeconv_r>:
 8008f64:	4b04      	ldr	r3, [pc, #16]	; (8008f78 <_localeconv_r+0x14>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	6a18      	ldr	r0, [r3, #32]
 8008f6a:	4b04      	ldr	r3, [pc, #16]	; (8008f7c <_localeconv_r+0x18>)
 8008f6c:	2800      	cmp	r0, #0
 8008f6e:	bf08      	it	eq
 8008f70:	4618      	moveq	r0, r3
 8008f72:	30f0      	adds	r0, #240	; 0xf0
 8008f74:	4770      	bx	lr
 8008f76:	bf00      	nop
 8008f78:	20000014 	.word	0x20000014
 8008f7c:	20000078 	.word	0x20000078

08008f80 <__swhatbuf_r>:
 8008f80:	b570      	push	{r4, r5, r6, lr}
 8008f82:	460e      	mov	r6, r1
 8008f84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f88:	2900      	cmp	r1, #0
 8008f8a:	b096      	sub	sp, #88	; 0x58
 8008f8c:	4614      	mov	r4, r2
 8008f8e:	461d      	mov	r5, r3
 8008f90:	da07      	bge.n	8008fa2 <__swhatbuf_r+0x22>
 8008f92:	2300      	movs	r3, #0
 8008f94:	602b      	str	r3, [r5, #0]
 8008f96:	89b3      	ldrh	r3, [r6, #12]
 8008f98:	061a      	lsls	r2, r3, #24
 8008f9a:	d410      	bmi.n	8008fbe <__swhatbuf_r+0x3e>
 8008f9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008fa0:	e00e      	b.n	8008fc0 <__swhatbuf_r+0x40>
 8008fa2:	466a      	mov	r2, sp
 8008fa4:	f000 fdaa 	bl	8009afc <_fstat_r>
 8008fa8:	2800      	cmp	r0, #0
 8008faa:	dbf2      	blt.n	8008f92 <__swhatbuf_r+0x12>
 8008fac:	9a01      	ldr	r2, [sp, #4]
 8008fae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008fb2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008fb6:	425a      	negs	r2, r3
 8008fb8:	415a      	adcs	r2, r3
 8008fba:	602a      	str	r2, [r5, #0]
 8008fbc:	e7ee      	b.n	8008f9c <__swhatbuf_r+0x1c>
 8008fbe:	2340      	movs	r3, #64	; 0x40
 8008fc0:	2000      	movs	r0, #0
 8008fc2:	6023      	str	r3, [r4, #0]
 8008fc4:	b016      	add	sp, #88	; 0x58
 8008fc6:	bd70      	pop	{r4, r5, r6, pc}

08008fc8 <__smakebuf_r>:
 8008fc8:	898b      	ldrh	r3, [r1, #12]
 8008fca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008fcc:	079d      	lsls	r5, r3, #30
 8008fce:	4606      	mov	r6, r0
 8008fd0:	460c      	mov	r4, r1
 8008fd2:	d507      	bpl.n	8008fe4 <__smakebuf_r+0x1c>
 8008fd4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008fd8:	6023      	str	r3, [r4, #0]
 8008fda:	6123      	str	r3, [r4, #16]
 8008fdc:	2301      	movs	r3, #1
 8008fde:	6163      	str	r3, [r4, #20]
 8008fe0:	b002      	add	sp, #8
 8008fe2:	bd70      	pop	{r4, r5, r6, pc}
 8008fe4:	ab01      	add	r3, sp, #4
 8008fe6:	466a      	mov	r2, sp
 8008fe8:	f7ff ffca 	bl	8008f80 <__swhatbuf_r>
 8008fec:	9900      	ldr	r1, [sp, #0]
 8008fee:	4605      	mov	r5, r0
 8008ff0:	4630      	mov	r0, r6
 8008ff2:	f000 fb73 	bl	80096dc <_malloc_r>
 8008ff6:	b948      	cbnz	r0, 800900c <__smakebuf_r+0x44>
 8008ff8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ffc:	059a      	lsls	r2, r3, #22
 8008ffe:	d4ef      	bmi.n	8008fe0 <__smakebuf_r+0x18>
 8009000:	f023 0303 	bic.w	r3, r3, #3
 8009004:	f043 0302 	orr.w	r3, r3, #2
 8009008:	81a3      	strh	r3, [r4, #12]
 800900a:	e7e3      	b.n	8008fd4 <__smakebuf_r+0xc>
 800900c:	4b0d      	ldr	r3, [pc, #52]	; (8009044 <__smakebuf_r+0x7c>)
 800900e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009010:	89a3      	ldrh	r3, [r4, #12]
 8009012:	6020      	str	r0, [r4, #0]
 8009014:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009018:	81a3      	strh	r3, [r4, #12]
 800901a:	9b00      	ldr	r3, [sp, #0]
 800901c:	6163      	str	r3, [r4, #20]
 800901e:	9b01      	ldr	r3, [sp, #4]
 8009020:	6120      	str	r0, [r4, #16]
 8009022:	b15b      	cbz	r3, 800903c <__smakebuf_r+0x74>
 8009024:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009028:	4630      	mov	r0, r6
 800902a:	f000 fd79 	bl	8009b20 <_isatty_r>
 800902e:	b128      	cbz	r0, 800903c <__smakebuf_r+0x74>
 8009030:	89a3      	ldrh	r3, [r4, #12]
 8009032:	f023 0303 	bic.w	r3, r3, #3
 8009036:	f043 0301 	orr.w	r3, r3, #1
 800903a:	81a3      	strh	r3, [r4, #12]
 800903c:	89a3      	ldrh	r3, [r4, #12]
 800903e:	431d      	orrs	r5, r3
 8009040:	81a5      	strh	r5, [r4, #12]
 8009042:	e7cd      	b.n	8008fe0 <__smakebuf_r+0x18>
 8009044:	08008e19 	.word	0x08008e19

08009048 <malloc>:
 8009048:	4b02      	ldr	r3, [pc, #8]	; (8009054 <malloc+0xc>)
 800904a:	4601      	mov	r1, r0
 800904c:	6818      	ldr	r0, [r3, #0]
 800904e:	f000 bb45 	b.w	80096dc <_malloc_r>
 8009052:	bf00      	nop
 8009054:	20000014 	.word	0x20000014

08009058 <memcpy>:
 8009058:	b510      	push	{r4, lr}
 800905a:	1e43      	subs	r3, r0, #1
 800905c:	440a      	add	r2, r1
 800905e:	4291      	cmp	r1, r2
 8009060:	d100      	bne.n	8009064 <memcpy+0xc>
 8009062:	bd10      	pop	{r4, pc}
 8009064:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009068:	f803 4f01 	strb.w	r4, [r3, #1]!
 800906c:	e7f7      	b.n	800905e <memcpy+0x6>

0800906e <_Balloc>:
 800906e:	b570      	push	{r4, r5, r6, lr}
 8009070:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009072:	4604      	mov	r4, r0
 8009074:	460e      	mov	r6, r1
 8009076:	b93d      	cbnz	r5, 8009088 <_Balloc+0x1a>
 8009078:	2010      	movs	r0, #16
 800907a:	f7ff ffe5 	bl	8009048 <malloc>
 800907e:	6260      	str	r0, [r4, #36]	; 0x24
 8009080:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009084:	6005      	str	r5, [r0, #0]
 8009086:	60c5      	str	r5, [r0, #12]
 8009088:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800908a:	68eb      	ldr	r3, [r5, #12]
 800908c:	b183      	cbz	r3, 80090b0 <_Balloc+0x42>
 800908e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009090:	68db      	ldr	r3, [r3, #12]
 8009092:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009096:	b9b8      	cbnz	r0, 80090c8 <_Balloc+0x5a>
 8009098:	2101      	movs	r1, #1
 800909a:	fa01 f506 	lsl.w	r5, r1, r6
 800909e:	1d6a      	adds	r2, r5, #5
 80090a0:	0092      	lsls	r2, r2, #2
 80090a2:	4620      	mov	r0, r4
 80090a4:	f000 fabe 	bl	8009624 <_calloc_r>
 80090a8:	b160      	cbz	r0, 80090c4 <_Balloc+0x56>
 80090aa:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80090ae:	e00e      	b.n	80090ce <_Balloc+0x60>
 80090b0:	2221      	movs	r2, #33	; 0x21
 80090b2:	2104      	movs	r1, #4
 80090b4:	4620      	mov	r0, r4
 80090b6:	f000 fab5 	bl	8009624 <_calloc_r>
 80090ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090bc:	60e8      	str	r0, [r5, #12]
 80090be:	68db      	ldr	r3, [r3, #12]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d1e4      	bne.n	800908e <_Balloc+0x20>
 80090c4:	2000      	movs	r0, #0
 80090c6:	bd70      	pop	{r4, r5, r6, pc}
 80090c8:	6802      	ldr	r2, [r0, #0]
 80090ca:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80090ce:	2300      	movs	r3, #0
 80090d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80090d4:	e7f7      	b.n	80090c6 <_Balloc+0x58>

080090d6 <_Bfree>:
 80090d6:	b570      	push	{r4, r5, r6, lr}
 80090d8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80090da:	4606      	mov	r6, r0
 80090dc:	460d      	mov	r5, r1
 80090de:	b93c      	cbnz	r4, 80090f0 <_Bfree+0x1a>
 80090e0:	2010      	movs	r0, #16
 80090e2:	f7ff ffb1 	bl	8009048 <malloc>
 80090e6:	6270      	str	r0, [r6, #36]	; 0x24
 80090e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80090ec:	6004      	str	r4, [r0, #0]
 80090ee:	60c4      	str	r4, [r0, #12]
 80090f0:	b13d      	cbz	r5, 8009102 <_Bfree+0x2c>
 80090f2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80090f4:	686a      	ldr	r2, [r5, #4]
 80090f6:	68db      	ldr	r3, [r3, #12]
 80090f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80090fc:	6029      	str	r1, [r5, #0]
 80090fe:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8009102:	bd70      	pop	{r4, r5, r6, pc}

08009104 <__multadd>:
 8009104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009108:	690d      	ldr	r5, [r1, #16]
 800910a:	461f      	mov	r7, r3
 800910c:	4606      	mov	r6, r0
 800910e:	460c      	mov	r4, r1
 8009110:	f101 0c14 	add.w	ip, r1, #20
 8009114:	2300      	movs	r3, #0
 8009116:	f8dc 0000 	ldr.w	r0, [ip]
 800911a:	b281      	uxth	r1, r0
 800911c:	fb02 7101 	mla	r1, r2, r1, r7
 8009120:	0c0f      	lsrs	r7, r1, #16
 8009122:	0c00      	lsrs	r0, r0, #16
 8009124:	fb02 7000 	mla	r0, r2, r0, r7
 8009128:	b289      	uxth	r1, r1
 800912a:	3301      	adds	r3, #1
 800912c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009130:	429d      	cmp	r5, r3
 8009132:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009136:	f84c 1b04 	str.w	r1, [ip], #4
 800913a:	dcec      	bgt.n	8009116 <__multadd+0x12>
 800913c:	b1d7      	cbz	r7, 8009174 <__multadd+0x70>
 800913e:	68a3      	ldr	r3, [r4, #8]
 8009140:	42ab      	cmp	r3, r5
 8009142:	dc12      	bgt.n	800916a <__multadd+0x66>
 8009144:	6861      	ldr	r1, [r4, #4]
 8009146:	4630      	mov	r0, r6
 8009148:	3101      	adds	r1, #1
 800914a:	f7ff ff90 	bl	800906e <_Balloc>
 800914e:	6922      	ldr	r2, [r4, #16]
 8009150:	3202      	adds	r2, #2
 8009152:	f104 010c 	add.w	r1, r4, #12
 8009156:	4680      	mov	r8, r0
 8009158:	0092      	lsls	r2, r2, #2
 800915a:	300c      	adds	r0, #12
 800915c:	f7ff ff7c 	bl	8009058 <memcpy>
 8009160:	4621      	mov	r1, r4
 8009162:	4630      	mov	r0, r6
 8009164:	f7ff ffb7 	bl	80090d6 <_Bfree>
 8009168:	4644      	mov	r4, r8
 800916a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800916e:	3501      	adds	r5, #1
 8009170:	615f      	str	r7, [r3, #20]
 8009172:	6125      	str	r5, [r4, #16]
 8009174:	4620      	mov	r0, r4
 8009176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800917a <__hi0bits>:
 800917a:	0c02      	lsrs	r2, r0, #16
 800917c:	0412      	lsls	r2, r2, #16
 800917e:	4603      	mov	r3, r0
 8009180:	b9b2      	cbnz	r2, 80091b0 <__hi0bits+0x36>
 8009182:	0403      	lsls	r3, r0, #16
 8009184:	2010      	movs	r0, #16
 8009186:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800918a:	bf04      	itt	eq
 800918c:	021b      	lsleq	r3, r3, #8
 800918e:	3008      	addeq	r0, #8
 8009190:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009194:	bf04      	itt	eq
 8009196:	011b      	lsleq	r3, r3, #4
 8009198:	3004      	addeq	r0, #4
 800919a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800919e:	bf04      	itt	eq
 80091a0:	009b      	lsleq	r3, r3, #2
 80091a2:	3002      	addeq	r0, #2
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	db06      	blt.n	80091b6 <__hi0bits+0x3c>
 80091a8:	005b      	lsls	r3, r3, #1
 80091aa:	d503      	bpl.n	80091b4 <__hi0bits+0x3a>
 80091ac:	3001      	adds	r0, #1
 80091ae:	4770      	bx	lr
 80091b0:	2000      	movs	r0, #0
 80091b2:	e7e8      	b.n	8009186 <__hi0bits+0xc>
 80091b4:	2020      	movs	r0, #32
 80091b6:	4770      	bx	lr

080091b8 <__lo0bits>:
 80091b8:	6803      	ldr	r3, [r0, #0]
 80091ba:	f013 0207 	ands.w	r2, r3, #7
 80091be:	4601      	mov	r1, r0
 80091c0:	d00b      	beq.n	80091da <__lo0bits+0x22>
 80091c2:	07da      	lsls	r2, r3, #31
 80091c4:	d423      	bmi.n	800920e <__lo0bits+0x56>
 80091c6:	0798      	lsls	r0, r3, #30
 80091c8:	bf49      	itett	mi
 80091ca:	085b      	lsrmi	r3, r3, #1
 80091cc:	089b      	lsrpl	r3, r3, #2
 80091ce:	2001      	movmi	r0, #1
 80091d0:	600b      	strmi	r3, [r1, #0]
 80091d2:	bf5c      	itt	pl
 80091d4:	600b      	strpl	r3, [r1, #0]
 80091d6:	2002      	movpl	r0, #2
 80091d8:	4770      	bx	lr
 80091da:	b298      	uxth	r0, r3
 80091dc:	b9a8      	cbnz	r0, 800920a <__lo0bits+0x52>
 80091de:	0c1b      	lsrs	r3, r3, #16
 80091e0:	2010      	movs	r0, #16
 80091e2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80091e6:	bf04      	itt	eq
 80091e8:	0a1b      	lsreq	r3, r3, #8
 80091ea:	3008      	addeq	r0, #8
 80091ec:	071a      	lsls	r2, r3, #28
 80091ee:	bf04      	itt	eq
 80091f0:	091b      	lsreq	r3, r3, #4
 80091f2:	3004      	addeq	r0, #4
 80091f4:	079a      	lsls	r2, r3, #30
 80091f6:	bf04      	itt	eq
 80091f8:	089b      	lsreq	r3, r3, #2
 80091fa:	3002      	addeq	r0, #2
 80091fc:	07da      	lsls	r2, r3, #31
 80091fe:	d402      	bmi.n	8009206 <__lo0bits+0x4e>
 8009200:	085b      	lsrs	r3, r3, #1
 8009202:	d006      	beq.n	8009212 <__lo0bits+0x5a>
 8009204:	3001      	adds	r0, #1
 8009206:	600b      	str	r3, [r1, #0]
 8009208:	4770      	bx	lr
 800920a:	4610      	mov	r0, r2
 800920c:	e7e9      	b.n	80091e2 <__lo0bits+0x2a>
 800920e:	2000      	movs	r0, #0
 8009210:	4770      	bx	lr
 8009212:	2020      	movs	r0, #32
 8009214:	4770      	bx	lr

08009216 <__i2b>:
 8009216:	b510      	push	{r4, lr}
 8009218:	460c      	mov	r4, r1
 800921a:	2101      	movs	r1, #1
 800921c:	f7ff ff27 	bl	800906e <_Balloc>
 8009220:	2201      	movs	r2, #1
 8009222:	6144      	str	r4, [r0, #20]
 8009224:	6102      	str	r2, [r0, #16]
 8009226:	bd10      	pop	{r4, pc}

08009228 <__multiply>:
 8009228:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800922c:	4614      	mov	r4, r2
 800922e:	690a      	ldr	r2, [r1, #16]
 8009230:	6923      	ldr	r3, [r4, #16]
 8009232:	429a      	cmp	r2, r3
 8009234:	bfb8      	it	lt
 8009236:	460b      	movlt	r3, r1
 8009238:	4688      	mov	r8, r1
 800923a:	bfbc      	itt	lt
 800923c:	46a0      	movlt	r8, r4
 800923e:	461c      	movlt	r4, r3
 8009240:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009244:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009248:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800924c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009250:	eb07 0609 	add.w	r6, r7, r9
 8009254:	42b3      	cmp	r3, r6
 8009256:	bfb8      	it	lt
 8009258:	3101      	addlt	r1, #1
 800925a:	f7ff ff08 	bl	800906e <_Balloc>
 800925e:	f100 0514 	add.w	r5, r0, #20
 8009262:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8009266:	462b      	mov	r3, r5
 8009268:	2200      	movs	r2, #0
 800926a:	4573      	cmp	r3, lr
 800926c:	d316      	bcc.n	800929c <__multiply+0x74>
 800926e:	f104 0214 	add.w	r2, r4, #20
 8009272:	f108 0114 	add.w	r1, r8, #20
 8009276:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800927a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800927e:	9300      	str	r3, [sp, #0]
 8009280:	9b00      	ldr	r3, [sp, #0]
 8009282:	9201      	str	r2, [sp, #4]
 8009284:	4293      	cmp	r3, r2
 8009286:	d80c      	bhi.n	80092a2 <__multiply+0x7a>
 8009288:	2e00      	cmp	r6, #0
 800928a:	dd03      	ble.n	8009294 <__multiply+0x6c>
 800928c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009290:	2b00      	cmp	r3, #0
 8009292:	d05d      	beq.n	8009350 <__multiply+0x128>
 8009294:	6106      	str	r6, [r0, #16]
 8009296:	b003      	add	sp, #12
 8009298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800929c:	f843 2b04 	str.w	r2, [r3], #4
 80092a0:	e7e3      	b.n	800926a <__multiply+0x42>
 80092a2:	f8b2 b000 	ldrh.w	fp, [r2]
 80092a6:	f1bb 0f00 	cmp.w	fp, #0
 80092aa:	d023      	beq.n	80092f4 <__multiply+0xcc>
 80092ac:	4689      	mov	r9, r1
 80092ae:	46ac      	mov	ip, r5
 80092b0:	f04f 0800 	mov.w	r8, #0
 80092b4:	f859 4b04 	ldr.w	r4, [r9], #4
 80092b8:	f8dc a000 	ldr.w	sl, [ip]
 80092bc:	b2a3      	uxth	r3, r4
 80092be:	fa1f fa8a 	uxth.w	sl, sl
 80092c2:	fb0b a303 	mla	r3, fp, r3, sl
 80092c6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80092ca:	f8dc 4000 	ldr.w	r4, [ip]
 80092ce:	4443      	add	r3, r8
 80092d0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80092d4:	fb0b 840a 	mla	r4, fp, sl, r8
 80092d8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80092dc:	46e2      	mov	sl, ip
 80092de:	b29b      	uxth	r3, r3
 80092e0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80092e4:	454f      	cmp	r7, r9
 80092e6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80092ea:	f84a 3b04 	str.w	r3, [sl], #4
 80092ee:	d82b      	bhi.n	8009348 <__multiply+0x120>
 80092f0:	f8cc 8004 	str.w	r8, [ip, #4]
 80092f4:	9b01      	ldr	r3, [sp, #4]
 80092f6:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80092fa:	3204      	adds	r2, #4
 80092fc:	f1ba 0f00 	cmp.w	sl, #0
 8009300:	d020      	beq.n	8009344 <__multiply+0x11c>
 8009302:	682b      	ldr	r3, [r5, #0]
 8009304:	4689      	mov	r9, r1
 8009306:	46a8      	mov	r8, r5
 8009308:	f04f 0b00 	mov.w	fp, #0
 800930c:	f8b9 c000 	ldrh.w	ip, [r9]
 8009310:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8009314:	fb0a 440c 	mla	r4, sl, ip, r4
 8009318:	445c      	add	r4, fp
 800931a:	46c4      	mov	ip, r8
 800931c:	b29b      	uxth	r3, r3
 800931e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009322:	f84c 3b04 	str.w	r3, [ip], #4
 8009326:	f859 3b04 	ldr.w	r3, [r9], #4
 800932a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800932e:	0c1b      	lsrs	r3, r3, #16
 8009330:	fb0a b303 	mla	r3, sl, r3, fp
 8009334:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009338:	454f      	cmp	r7, r9
 800933a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800933e:	d805      	bhi.n	800934c <__multiply+0x124>
 8009340:	f8c8 3004 	str.w	r3, [r8, #4]
 8009344:	3504      	adds	r5, #4
 8009346:	e79b      	b.n	8009280 <__multiply+0x58>
 8009348:	46d4      	mov	ip, sl
 800934a:	e7b3      	b.n	80092b4 <__multiply+0x8c>
 800934c:	46e0      	mov	r8, ip
 800934e:	e7dd      	b.n	800930c <__multiply+0xe4>
 8009350:	3e01      	subs	r6, #1
 8009352:	e799      	b.n	8009288 <__multiply+0x60>

08009354 <__pow5mult>:
 8009354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009358:	4615      	mov	r5, r2
 800935a:	f012 0203 	ands.w	r2, r2, #3
 800935e:	4606      	mov	r6, r0
 8009360:	460f      	mov	r7, r1
 8009362:	d007      	beq.n	8009374 <__pow5mult+0x20>
 8009364:	3a01      	subs	r2, #1
 8009366:	4c21      	ldr	r4, [pc, #132]	; (80093ec <__pow5mult+0x98>)
 8009368:	2300      	movs	r3, #0
 800936a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800936e:	f7ff fec9 	bl	8009104 <__multadd>
 8009372:	4607      	mov	r7, r0
 8009374:	10ad      	asrs	r5, r5, #2
 8009376:	d035      	beq.n	80093e4 <__pow5mult+0x90>
 8009378:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800937a:	b93c      	cbnz	r4, 800938c <__pow5mult+0x38>
 800937c:	2010      	movs	r0, #16
 800937e:	f7ff fe63 	bl	8009048 <malloc>
 8009382:	6270      	str	r0, [r6, #36]	; 0x24
 8009384:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009388:	6004      	str	r4, [r0, #0]
 800938a:	60c4      	str	r4, [r0, #12]
 800938c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009390:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009394:	b94c      	cbnz	r4, 80093aa <__pow5mult+0x56>
 8009396:	f240 2171 	movw	r1, #625	; 0x271
 800939a:	4630      	mov	r0, r6
 800939c:	f7ff ff3b 	bl	8009216 <__i2b>
 80093a0:	2300      	movs	r3, #0
 80093a2:	f8c8 0008 	str.w	r0, [r8, #8]
 80093a6:	4604      	mov	r4, r0
 80093a8:	6003      	str	r3, [r0, #0]
 80093aa:	f04f 0800 	mov.w	r8, #0
 80093ae:	07eb      	lsls	r3, r5, #31
 80093b0:	d50a      	bpl.n	80093c8 <__pow5mult+0x74>
 80093b2:	4639      	mov	r1, r7
 80093b4:	4622      	mov	r2, r4
 80093b6:	4630      	mov	r0, r6
 80093b8:	f7ff ff36 	bl	8009228 <__multiply>
 80093bc:	4639      	mov	r1, r7
 80093be:	4681      	mov	r9, r0
 80093c0:	4630      	mov	r0, r6
 80093c2:	f7ff fe88 	bl	80090d6 <_Bfree>
 80093c6:	464f      	mov	r7, r9
 80093c8:	106d      	asrs	r5, r5, #1
 80093ca:	d00b      	beq.n	80093e4 <__pow5mult+0x90>
 80093cc:	6820      	ldr	r0, [r4, #0]
 80093ce:	b938      	cbnz	r0, 80093e0 <__pow5mult+0x8c>
 80093d0:	4622      	mov	r2, r4
 80093d2:	4621      	mov	r1, r4
 80093d4:	4630      	mov	r0, r6
 80093d6:	f7ff ff27 	bl	8009228 <__multiply>
 80093da:	6020      	str	r0, [r4, #0]
 80093dc:	f8c0 8000 	str.w	r8, [r0]
 80093e0:	4604      	mov	r4, r0
 80093e2:	e7e4      	b.n	80093ae <__pow5mult+0x5a>
 80093e4:	4638      	mov	r0, r7
 80093e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093ea:	bf00      	nop
 80093ec:	0800ab60 	.word	0x0800ab60

080093f0 <__lshift>:
 80093f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093f4:	460c      	mov	r4, r1
 80093f6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80093fa:	6923      	ldr	r3, [r4, #16]
 80093fc:	6849      	ldr	r1, [r1, #4]
 80093fe:	eb0a 0903 	add.w	r9, sl, r3
 8009402:	68a3      	ldr	r3, [r4, #8]
 8009404:	4607      	mov	r7, r0
 8009406:	4616      	mov	r6, r2
 8009408:	f109 0501 	add.w	r5, r9, #1
 800940c:	42ab      	cmp	r3, r5
 800940e:	db32      	blt.n	8009476 <__lshift+0x86>
 8009410:	4638      	mov	r0, r7
 8009412:	f7ff fe2c 	bl	800906e <_Balloc>
 8009416:	2300      	movs	r3, #0
 8009418:	4680      	mov	r8, r0
 800941a:	f100 0114 	add.w	r1, r0, #20
 800941e:	461a      	mov	r2, r3
 8009420:	4553      	cmp	r3, sl
 8009422:	db2b      	blt.n	800947c <__lshift+0x8c>
 8009424:	6920      	ldr	r0, [r4, #16]
 8009426:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800942a:	f104 0314 	add.w	r3, r4, #20
 800942e:	f016 021f 	ands.w	r2, r6, #31
 8009432:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009436:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800943a:	d025      	beq.n	8009488 <__lshift+0x98>
 800943c:	f1c2 0e20 	rsb	lr, r2, #32
 8009440:	2000      	movs	r0, #0
 8009442:	681e      	ldr	r6, [r3, #0]
 8009444:	468a      	mov	sl, r1
 8009446:	4096      	lsls	r6, r2
 8009448:	4330      	orrs	r0, r6
 800944a:	f84a 0b04 	str.w	r0, [sl], #4
 800944e:	f853 0b04 	ldr.w	r0, [r3], #4
 8009452:	459c      	cmp	ip, r3
 8009454:	fa20 f00e 	lsr.w	r0, r0, lr
 8009458:	d814      	bhi.n	8009484 <__lshift+0x94>
 800945a:	6048      	str	r0, [r1, #4]
 800945c:	b108      	cbz	r0, 8009462 <__lshift+0x72>
 800945e:	f109 0502 	add.w	r5, r9, #2
 8009462:	3d01      	subs	r5, #1
 8009464:	4638      	mov	r0, r7
 8009466:	f8c8 5010 	str.w	r5, [r8, #16]
 800946a:	4621      	mov	r1, r4
 800946c:	f7ff fe33 	bl	80090d6 <_Bfree>
 8009470:	4640      	mov	r0, r8
 8009472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009476:	3101      	adds	r1, #1
 8009478:	005b      	lsls	r3, r3, #1
 800947a:	e7c7      	b.n	800940c <__lshift+0x1c>
 800947c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009480:	3301      	adds	r3, #1
 8009482:	e7cd      	b.n	8009420 <__lshift+0x30>
 8009484:	4651      	mov	r1, sl
 8009486:	e7dc      	b.n	8009442 <__lshift+0x52>
 8009488:	3904      	subs	r1, #4
 800948a:	f853 2b04 	ldr.w	r2, [r3], #4
 800948e:	f841 2f04 	str.w	r2, [r1, #4]!
 8009492:	459c      	cmp	ip, r3
 8009494:	d8f9      	bhi.n	800948a <__lshift+0x9a>
 8009496:	e7e4      	b.n	8009462 <__lshift+0x72>

08009498 <__mcmp>:
 8009498:	6903      	ldr	r3, [r0, #16]
 800949a:	690a      	ldr	r2, [r1, #16]
 800949c:	1a9b      	subs	r3, r3, r2
 800949e:	b530      	push	{r4, r5, lr}
 80094a0:	d10c      	bne.n	80094bc <__mcmp+0x24>
 80094a2:	0092      	lsls	r2, r2, #2
 80094a4:	3014      	adds	r0, #20
 80094a6:	3114      	adds	r1, #20
 80094a8:	1884      	adds	r4, r0, r2
 80094aa:	4411      	add	r1, r2
 80094ac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80094b0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80094b4:	4295      	cmp	r5, r2
 80094b6:	d003      	beq.n	80094c0 <__mcmp+0x28>
 80094b8:	d305      	bcc.n	80094c6 <__mcmp+0x2e>
 80094ba:	2301      	movs	r3, #1
 80094bc:	4618      	mov	r0, r3
 80094be:	bd30      	pop	{r4, r5, pc}
 80094c0:	42a0      	cmp	r0, r4
 80094c2:	d3f3      	bcc.n	80094ac <__mcmp+0x14>
 80094c4:	e7fa      	b.n	80094bc <__mcmp+0x24>
 80094c6:	f04f 33ff 	mov.w	r3, #4294967295
 80094ca:	e7f7      	b.n	80094bc <__mcmp+0x24>

080094cc <__mdiff>:
 80094cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094d0:	460d      	mov	r5, r1
 80094d2:	4607      	mov	r7, r0
 80094d4:	4611      	mov	r1, r2
 80094d6:	4628      	mov	r0, r5
 80094d8:	4614      	mov	r4, r2
 80094da:	f7ff ffdd 	bl	8009498 <__mcmp>
 80094de:	1e06      	subs	r6, r0, #0
 80094e0:	d108      	bne.n	80094f4 <__mdiff+0x28>
 80094e2:	4631      	mov	r1, r6
 80094e4:	4638      	mov	r0, r7
 80094e6:	f7ff fdc2 	bl	800906e <_Balloc>
 80094ea:	2301      	movs	r3, #1
 80094ec:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80094f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094f4:	bfa4      	itt	ge
 80094f6:	4623      	movge	r3, r4
 80094f8:	462c      	movge	r4, r5
 80094fa:	4638      	mov	r0, r7
 80094fc:	6861      	ldr	r1, [r4, #4]
 80094fe:	bfa6      	itte	ge
 8009500:	461d      	movge	r5, r3
 8009502:	2600      	movge	r6, #0
 8009504:	2601      	movlt	r6, #1
 8009506:	f7ff fdb2 	bl	800906e <_Balloc>
 800950a:	692b      	ldr	r3, [r5, #16]
 800950c:	60c6      	str	r6, [r0, #12]
 800950e:	6926      	ldr	r6, [r4, #16]
 8009510:	f105 0914 	add.w	r9, r5, #20
 8009514:	f104 0214 	add.w	r2, r4, #20
 8009518:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800951c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009520:	f100 0514 	add.w	r5, r0, #20
 8009524:	f04f 0e00 	mov.w	lr, #0
 8009528:	f852 ab04 	ldr.w	sl, [r2], #4
 800952c:	f859 4b04 	ldr.w	r4, [r9], #4
 8009530:	fa1e f18a 	uxtah	r1, lr, sl
 8009534:	b2a3      	uxth	r3, r4
 8009536:	1ac9      	subs	r1, r1, r3
 8009538:	0c23      	lsrs	r3, r4, #16
 800953a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800953e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009542:	b289      	uxth	r1, r1
 8009544:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009548:	45c8      	cmp	r8, r9
 800954a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800954e:	4694      	mov	ip, r2
 8009550:	f845 3b04 	str.w	r3, [r5], #4
 8009554:	d8e8      	bhi.n	8009528 <__mdiff+0x5c>
 8009556:	45bc      	cmp	ip, r7
 8009558:	d304      	bcc.n	8009564 <__mdiff+0x98>
 800955a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800955e:	b183      	cbz	r3, 8009582 <__mdiff+0xb6>
 8009560:	6106      	str	r6, [r0, #16]
 8009562:	e7c5      	b.n	80094f0 <__mdiff+0x24>
 8009564:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009568:	fa1e f381 	uxtah	r3, lr, r1
 800956c:	141a      	asrs	r2, r3, #16
 800956e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009572:	b29b      	uxth	r3, r3
 8009574:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009578:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800957c:	f845 3b04 	str.w	r3, [r5], #4
 8009580:	e7e9      	b.n	8009556 <__mdiff+0x8a>
 8009582:	3e01      	subs	r6, #1
 8009584:	e7e9      	b.n	800955a <__mdiff+0x8e>

08009586 <__d2b>:
 8009586:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800958a:	460e      	mov	r6, r1
 800958c:	2101      	movs	r1, #1
 800958e:	ec59 8b10 	vmov	r8, r9, d0
 8009592:	4615      	mov	r5, r2
 8009594:	f7ff fd6b 	bl	800906e <_Balloc>
 8009598:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800959c:	4607      	mov	r7, r0
 800959e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80095a2:	bb34      	cbnz	r4, 80095f2 <__d2b+0x6c>
 80095a4:	9301      	str	r3, [sp, #4]
 80095a6:	f1b8 0300 	subs.w	r3, r8, #0
 80095aa:	d027      	beq.n	80095fc <__d2b+0x76>
 80095ac:	a802      	add	r0, sp, #8
 80095ae:	f840 3d08 	str.w	r3, [r0, #-8]!
 80095b2:	f7ff fe01 	bl	80091b8 <__lo0bits>
 80095b6:	9900      	ldr	r1, [sp, #0]
 80095b8:	b1f0      	cbz	r0, 80095f8 <__d2b+0x72>
 80095ba:	9a01      	ldr	r2, [sp, #4]
 80095bc:	f1c0 0320 	rsb	r3, r0, #32
 80095c0:	fa02 f303 	lsl.w	r3, r2, r3
 80095c4:	430b      	orrs	r3, r1
 80095c6:	40c2      	lsrs	r2, r0
 80095c8:	617b      	str	r3, [r7, #20]
 80095ca:	9201      	str	r2, [sp, #4]
 80095cc:	9b01      	ldr	r3, [sp, #4]
 80095ce:	61bb      	str	r3, [r7, #24]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	bf14      	ite	ne
 80095d4:	2102      	movne	r1, #2
 80095d6:	2101      	moveq	r1, #1
 80095d8:	6139      	str	r1, [r7, #16]
 80095da:	b1c4      	cbz	r4, 800960e <__d2b+0x88>
 80095dc:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80095e0:	4404      	add	r4, r0
 80095e2:	6034      	str	r4, [r6, #0]
 80095e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80095e8:	6028      	str	r0, [r5, #0]
 80095ea:	4638      	mov	r0, r7
 80095ec:	b003      	add	sp, #12
 80095ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80095f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80095f6:	e7d5      	b.n	80095a4 <__d2b+0x1e>
 80095f8:	6179      	str	r1, [r7, #20]
 80095fa:	e7e7      	b.n	80095cc <__d2b+0x46>
 80095fc:	a801      	add	r0, sp, #4
 80095fe:	f7ff fddb 	bl	80091b8 <__lo0bits>
 8009602:	9b01      	ldr	r3, [sp, #4]
 8009604:	617b      	str	r3, [r7, #20]
 8009606:	2101      	movs	r1, #1
 8009608:	6139      	str	r1, [r7, #16]
 800960a:	3020      	adds	r0, #32
 800960c:	e7e5      	b.n	80095da <__d2b+0x54>
 800960e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009612:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009616:	6030      	str	r0, [r6, #0]
 8009618:	6918      	ldr	r0, [r3, #16]
 800961a:	f7ff fdae 	bl	800917a <__hi0bits>
 800961e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009622:	e7e1      	b.n	80095e8 <__d2b+0x62>

08009624 <_calloc_r>:
 8009624:	b538      	push	{r3, r4, r5, lr}
 8009626:	fb02 f401 	mul.w	r4, r2, r1
 800962a:	4621      	mov	r1, r4
 800962c:	f000 f856 	bl	80096dc <_malloc_r>
 8009630:	4605      	mov	r5, r0
 8009632:	b118      	cbz	r0, 800963c <_calloc_r+0x18>
 8009634:	4622      	mov	r2, r4
 8009636:	2100      	movs	r1, #0
 8009638:	f7fd fe80 	bl	800733c <memset>
 800963c:	4628      	mov	r0, r5
 800963e:	bd38      	pop	{r3, r4, r5, pc}

08009640 <_free_r>:
 8009640:	b538      	push	{r3, r4, r5, lr}
 8009642:	4605      	mov	r5, r0
 8009644:	2900      	cmp	r1, #0
 8009646:	d045      	beq.n	80096d4 <_free_r+0x94>
 8009648:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800964c:	1f0c      	subs	r4, r1, #4
 800964e:	2b00      	cmp	r3, #0
 8009650:	bfb8      	it	lt
 8009652:	18e4      	addlt	r4, r4, r3
 8009654:	f000 fa98 	bl	8009b88 <__malloc_lock>
 8009658:	4a1f      	ldr	r2, [pc, #124]	; (80096d8 <_free_r+0x98>)
 800965a:	6813      	ldr	r3, [r2, #0]
 800965c:	4610      	mov	r0, r2
 800965e:	b933      	cbnz	r3, 800966e <_free_r+0x2e>
 8009660:	6063      	str	r3, [r4, #4]
 8009662:	6014      	str	r4, [r2, #0]
 8009664:	4628      	mov	r0, r5
 8009666:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800966a:	f000 ba8e 	b.w	8009b8a <__malloc_unlock>
 800966e:	42a3      	cmp	r3, r4
 8009670:	d90c      	bls.n	800968c <_free_r+0x4c>
 8009672:	6821      	ldr	r1, [r4, #0]
 8009674:	1862      	adds	r2, r4, r1
 8009676:	4293      	cmp	r3, r2
 8009678:	bf04      	itt	eq
 800967a:	681a      	ldreq	r2, [r3, #0]
 800967c:	685b      	ldreq	r3, [r3, #4]
 800967e:	6063      	str	r3, [r4, #4]
 8009680:	bf04      	itt	eq
 8009682:	1852      	addeq	r2, r2, r1
 8009684:	6022      	streq	r2, [r4, #0]
 8009686:	6004      	str	r4, [r0, #0]
 8009688:	e7ec      	b.n	8009664 <_free_r+0x24>
 800968a:	4613      	mov	r3, r2
 800968c:	685a      	ldr	r2, [r3, #4]
 800968e:	b10a      	cbz	r2, 8009694 <_free_r+0x54>
 8009690:	42a2      	cmp	r2, r4
 8009692:	d9fa      	bls.n	800968a <_free_r+0x4a>
 8009694:	6819      	ldr	r1, [r3, #0]
 8009696:	1858      	adds	r0, r3, r1
 8009698:	42a0      	cmp	r0, r4
 800969a:	d10b      	bne.n	80096b4 <_free_r+0x74>
 800969c:	6820      	ldr	r0, [r4, #0]
 800969e:	4401      	add	r1, r0
 80096a0:	1858      	adds	r0, r3, r1
 80096a2:	4282      	cmp	r2, r0
 80096a4:	6019      	str	r1, [r3, #0]
 80096a6:	d1dd      	bne.n	8009664 <_free_r+0x24>
 80096a8:	6810      	ldr	r0, [r2, #0]
 80096aa:	6852      	ldr	r2, [r2, #4]
 80096ac:	605a      	str	r2, [r3, #4]
 80096ae:	4401      	add	r1, r0
 80096b0:	6019      	str	r1, [r3, #0]
 80096b2:	e7d7      	b.n	8009664 <_free_r+0x24>
 80096b4:	d902      	bls.n	80096bc <_free_r+0x7c>
 80096b6:	230c      	movs	r3, #12
 80096b8:	602b      	str	r3, [r5, #0]
 80096ba:	e7d3      	b.n	8009664 <_free_r+0x24>
 80096bc:	6820      	ldr	r0, [r4, #0]
 80096be:	1821      	adds	r1, r4, r0
 80096c0:	428a      	cmp	r2, r1
 80096c2:	bf04      	itt	eq
 80096c4:	6811      	ldreq	r1, [r2, #0]
 80096c6:	6852      	ldreq	r2, [r2, #4]
 80096c8:	6062      	str	r2, [r4, #4]
 80096ca:	bf04      	itt	eq
 80096cc:	1809      	addeq	r1, r1, r0
 80096ce:	6021      	streq	r1, [r4, #0]
 80096d0:	605c      	str	r4, [r3, #4]
 80096d2:	e7c7      	b.n	8009664 <_free_r+0x24>
 80096d4:	bd38      	pop	{r3, r4, r5, pc}
 80096d6:	bf00      	nop
 80096d8:	20000268 	.word	0x20000268

080096dc <_malloc_r>:
 80096dc:	b570      	push	{r4, r5, r6, lr}
 80096de:	1ccd      	adds	r5, r1, #3
 80096e0:	f025 0503 	bic.w	r5, r5, #3
 80096e4:	3508      	adds	r5, #8
 80096e6:	2d0c      	cmp	r5, #12
 80096e8:	bf38      	it	cc
 80096ea:	250c      	movcc	r5, #12
 80096ec:	2d00      	cmp	r5, #0
 80096ee:	4606      	mov	r6, r0
 80096f0:	db01      	blt.n	80096f6 <_malloc_r+0x1a>
 80096f2:	42a9      	cmp	r1, r5
 80096f4:	d903      	bls.n	80096fe <_malloc_r+0x22>
 80096f6:	230c      	movs	r3, #12
 80096f8:	6033      	str	r3, [r6, #0]
 80096fa:	2000      	movs	r0, #0
 80096fc:	bd70      	pop	{r4, r5, r6, pc}
 80096fe:	f000 fa43 	bl	8009b88 <__malloc_lock>
 8009702:	4a21      	ldr	r2, [pc, #132]	; (8009788 <_malloc_r+0xac>)
 8009704:	6814      	ldr	r4, [r2, #0]
 8009706:	4621      	mov	r1, r4
 8009708:	b991      	cbnz	r1, 8009730 <_malloc_r+0x54>
 800970a:	4c20      	ldr	r4, [pc, #128]	; (800978c <_malloc_r+0xb0>)
 800970c:	6823      	ldr	r3, [r4, #0]
 800970e:	b91b      	cbnz	r3, 8009718 <_malloc_r+0x3c>
 8009710:	4630      	mov	r0, r6
 8009712:	f000 f97d 	bl	8009a10 <_sbrk_r>
 8009716:	6020      	str	r0, [r4, #0]
 8009718:	4629      	mov	r1, r5
 800971a:	4630      	mov	r0, r6
 800971c:	f000 f978 	bl	8009a10 <_sbrk_r>
 8009720:	1c43      	adds	r3, r0, #1
 8009722:	d124      	bne.n	800976e <_malloc_r+0x92>
 8009724:	230c      	movs	r3, #12
 8009726:	6033      	str	r3, [r6, #0]
 8009728:	4630      	mov	r0, r6
 800972a:	f000 fa2e 	bl	8009b8a <__malloc_unlock>
 800972e:	e7e4      	b.n	80096fa <_malloc_r+0x1e>
 8009730:	680b      	ldr	r3, [r1, #0]
 8009732:	1b5b      	subs	r3, r3, r5
 8009734:	d418      	bmi.n	8009768 <_malloc_r+0x8c>
 8009736:	2b0b      	cmp	r3, #11
 8009738:	d90f      	bls.n	800975a <_malloc_r+0x7e>
 800973a:	600b      	str	r3, [r1, #0]
 800973c:	50cd      	str	r5, [r1, r3]
 800973e:	18cc      	adds	r4, r1, r3
 8009740:	4630      	mov	r0, r6
 8009742:	f000 fa22 	bl	8009b8a <__malloc_unlock>
 8009746:	f104 000b 	add.w	r0, r4, #11
 800974a:	1d23      	adds	r3, r4, #4
 800974c:	f020 0007 	bic.w	r0, r0, #7
 8009750:	1ac3      	subs	r3, r0, r3
 8009752:	d0d3      	beq.n	80096fc <_malloc_r+0x20>
 8009754:	425a      	negs	r2, r3
 8009756:	50e2      	str	r2, [r4, r3]
 8009758:	e7d0      	b.n	80096fc <_malloc_r+0x20>
 800975a:	428c      	cmp	r4, r1
 800975c:	684b      	ldr	r3, [r1, #4]
 800975e:	bf16      	itet	ne
 8009760:	6063      	strne	r3, [r4, #4]
 8009762:	6013      	streq	r3, [r2, #0]
 8009764:	460c      	movne	r4, r1
 8009766:	e7eb      	b.n	8009740 <_malloc_r+0x64>
 8009768:	460c      	mov	r4, r1
 800976a:	6849      	ldr	r1, [r1, #4]
 800976c:	e7cc      	b.n	8009708 <_malloc_r+0x2c>
 800976e:	1cc4      	adds	r4, r0, #3
 8009770:	f024 0403 	bic.w	r4, r4, #3
 8009774:	42a0      	cmp	r0, r4
 8009776:	d005      	beq.n	8009784 <_malloc_r+0xa8>
 8009778:	1a21      	subs	r1, r4, r0
 800977a:	4630      	mov	r0, r6
 800977c:	f000 f948 	bl	8009a10 <_sbrk_r>
 8009780:	3001      	adds	r0, #1
 8009782:	d0cf      	beq.n	8009724 <_malloc_r+0x48>
 8009784:	6025      	str	r5, [r4, #0]
 8009786:	e7db      	b.n	8009740 <_malloc_r+0x64>
 8009788:	20000268 	.word	0x20000268
 800978c:	2000026c 	.word	0x2000026c

08009790 <__sfputc_r>:
 8009790:	6893      	ldr	r3, [r2, #8]
 8009792:	3b01      	subs	r3, #1
 8009794:	2b00      	cmp	r3, #0
 8009796:	b410      	push	{r4}
 8009798:	6093      	str	r3, [r2, #8]
 800979a:	da08      	bge.n	80097ae <__sfputc_r+0x1e>
 800979c:	6994      	ldr	r4, [r2, #24]
 800979e:	42a3      	cmp	r3, r4
 80097a0:	db01      	blt.n	80097a6 <__sfputc_r+0x16>
 80097a2:	290a      	cmp	r1, #10
 80097a4:	d103      	bne.n	80097ae <__sfputc_r+0x1e>
 80097a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80097aa:	f7fe bb5d 	b.w	8007e68 <__swbuf_r>
 80097ae:	6813      	ldr	r3, [r2, #0]
 80097b0:	1c58      	adds	r0, r3, #1
 80097b2:	6010      	str	r0, [r2, #0]
 80097b4:	7019      	strb	r1, [r3, #0]
 80097b6:	4608      	mov	r0, r1
 80097b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80097bc:	4770      	bx	lr

080097be <__sfputs_r>:
 80097be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097c0:	4606      	mov	r6, r0
 80097c2:	460f      	mov	r7, r1
 80097c4:	4614      	mov	r4, r2
 80097c6:	18d5      	adds	r5, r2, r3
 80097c8:	42ac      	cmp	r4, r5
 80097ca:	d101      	bne.n	80097d0 <__sfputs_r+0x12>
 80097cc:	2000      	movs	r0, #0
 80097ce:	e007      	b.n	80097e0 <__sfputs_r+0x22>
 80097d0:	463a      	mov	r2, r7
 80097d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097d6:	4630      	mov	r0, r6
 80097d8:	f7ff ffda 	bl	8009790 <__sfputc_r>
 80097dc:	1c43      	adds	r3, r0, #1
 80097de:	d1f3      	bne.n	80097c8 <__sfputs_r+0xa>
 80097e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080097e4 <_vfiprintf_r>:
 80097e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097e8:	460c      	mov	r4, r1
 80097ea:	b09d      	sub	sp, #116	; 0x74
 80097ec:	4617      	mov	r7, r2
 80097ee:	461d      	mov	r5, r3
 80097f0:	4606      	mov	r6, r0
 80097f2:	b118      	cbz	r0, 80097fc <_vfiprintf_r+0x18>
 80097f4:	6983      	ldr	r3, [r0, #24]
 80097f6:	b90b      	cbnz	r3, 80097fc <_vfiprintf_r+0x18>
 80097f8:	f7ff fb2a 	bl	8008e50 <__sinit>
 80097fc:	4b7c      	ldr	r3, [pc, #496]	; (80099f0 <_vfiprintf_r+0x20c>)
 80097fe:	429c      	cmp	r4, r3
 8009800:	d158      	bne.n	80098b4 <_vfiprintf_r+0xd0>
 8009802:	6874      	ldr	r4, [r6, #4]
 8009804:	89a3      	ldrh	r3, [r4, #12]
 8009806:	0718      	lsls	r0, r3, #28
 8009808:	d55e      	bpl.n	80098c8 <_vfiprintf_r+0xe4>
 800980a:	6923      	ldr	r3, [r4, #16]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d05b      	beq.n	80098c8 <_vfiprintf_r+0xe4>
 8009810:	2300      	movs	r3, #0
 8009812:	9309      	str	r3, [sp, #36]	; 0x24
 8009814:	2320      	movs	r3, #32
 8009816:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800981a:	2330      	movs	r3, #48	; 0x30
 800981c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009820:	9503      	str	r5, [sp, #12]
 8009822:	f04f 0b01 	mov.w	fp, #1
 8009826:	46b8      	mov	r8, r7
 8009828:	4645      	mov	r5, r8
 800982a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800982e:	b10b      	cbz	r3, 8009834 <_vfiprintf_r+0x50>
 8009830:	2b25      	cmp	r3, #37	; 0x25
 8009832:	d154      	bne.n	80098de <_vfiprintf_r+0xfa>
 8009834:	ebb8 0a07 	subs.w	sl, r8, r7
 8009838:	d00b      	beq.n	8009852 <_vfiprintf_r+0x6e>
 800983a:	4653      	mov	r3, sl
 800983c:	463a      	mov	r2, r7
 800983e:	4621      	mov	r1, r4
 8009840:	4630      	mov	r0, r6
 8009842:	f7ff ffbc 	bl	80097be <__sfputs_r>
 8009846:	3001      	adds	r0, #1
 8009848:	f000 80c2 	beq.w	80099d0 <_vfiprintf_r+0x1ec>
 800984c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800984e:	4453      	add	r3, sl
 8009850:	9309      	str	r3, [sp, #36]	; 0x24
 8009852:	f898 3000 	ldrb.w	r3, [r8]
 8009856:	2b00      	cmp	r3, #0
 8009858:	f000 80ba 	beq.w	80099d0 <_vfiprintf_r+0x1ec>
 800985c:	2300      	movs	r3, #0
 800985e:	f04f 32ff 	mov.w	r2, #4294967295
 8009862:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009866:	9304      	str	r3, [sp, #16]
 8009868:	9307      	str	r3, [sp, #28]
 800986a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800986e:	931a      	str	r3, [sp, #104]	; 0x68
 8009870:	46a8      	mov	r8, r5
 8009872:	2205      	movs	r2, #5
 8009874:	f818 1b01 	ldrb.w	r1, [r8], #1
 8009878:	485e      	ldr	r0, [pc, #376]	; (80099f4 <_vfiprintf_r+0x210>)
 800987a:	f7f6 fcb1 	bl	80001e0 <memchr>
 800987e:	9b04      	ldr	r3, [sp, #16]
 8009880:	bb78      	cbnz	r0, 80098e2 <_vfiprintf_r+0xfe>
 8009882:	06d9      	lsls	r1, r3, #27
 8009884:	bf44      	itt	mi
 8009886:	2220      	movmi	r2, #32
 8009888:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800988c:	071a      	lsls	r2, r3, #28
 800988e:	bf44      	itt	mi
 8009890:	222b      	movmi	r2, #43	; 0x2b
 8009892:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009896:	782a      	ldrb	r2, [r5, #0]
 8009898:	2a2a      	cmp	r2, #42	; 0x2a
 800989a:	d02a      	beq.n	80098f2 <_vfiprintf_r+0x10e>
 800989c:	9a07      	ldr	r2, [sp, #28]
 800989e:	46a8      	mov	r8, r5
 80098a0:	2000      	movs	r0, #0
 80098a2:	250a      	movs	r5, #10
 80098a4:	4641      	mov	r1, r8
 80098a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098aa:	3b30      	subs	r3, #48	; 0x30
 80098ac:	2b09      	cmp	r3, #9
 80098ae:	d969      	bls.n	8009984 <_vfiprintf_r+0x1a0>
 80098b0:	b360      	cbz	r0, 800990c <_vfiprintf_r+0x128>
 80098b2:	e024      	b.n	80098fe <_vfiprintf_r+0x11a>
 80098b4:	4b50      	ldr	r3, [pc, #320]	; (80099f8 <_vfiprintf_r+0x214>)
 80098b6:	429c      	cmp	r4, r3
 80098b8:	d101      	bne.n	80098be <_vfiprintf_r+0xda>
 80098ba:	68b4      	ldr	r4, [r6, #8]
 80098bc:	e7a2      	b.n	8009804 <_vfiprintf_r+0x20>
 80098be:	4b4f      	ldr	r3, [pc, #316]	; (80099fc <_vfiprintf_r+0x218>)
 80098c0:	429c      	cmp	r4, r3
 80098c2:	bf08      	it	eq
 80098c4:	68f4      	ldreq	r4, [r6, #12]
 80098c6:	e79d      	b.n	8009804 <_vfiprintf_r+0x20>
 80098c8:	4621      	mov	r1, r4
 80098ca:	4630      	mov	r0, r6
 80098cc:	f7fe fb1e 	bl	8007f0c <__swsetup_r>
 80098d0:	2800      	cmp	r0, #0
 80098d2:	d09d      	beq.n	8009810 <_vfiprintf_r+0x2c>
 80098d4:	f04f 30ff 	mov.w	r0, #4294967295
 80098d8:	b01d      	add	sp, #116	; 0x74
 80098da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098de:	46a8      	mov	r8, r5
 80098e0:	e7a2      	b.n	8009828 <_vfiprintf_r+0x44>
 80098e2:	4a44      	ldr	r2, [pc, #272]	; (80099f4 <_vfiprintf_r+0x210>)
 80098e4:	1a80      	subs	r0, r0, r2
 80098e6:	fa0b f000 	lsl.w	r0, fp, r0
 80098ea:	4318      	orrs	r0, r3
 80098ec:	9004      	str	r0, [sp, #16]
 80098ee:	4645      	mov	r5, r8
 80098f0:	e7be      	b.n	8009870 <_vfiprintf_r+0x8c>
 80098f2:	9a03      	ldr	r2, [sp, #12]
 80098f4:	1d11      	adds	r1, r2, #4
 80098f6:	6812      	ldr	r2, [r2, #0]
 80098f8:	9103      	str	r1, [sp, #12]
 80098fa:	2a00      	cmp	r2, #0
 80098fc:	db01      	blt.n	8009902 <_vfiprintf_r+0x11e>
 80098fe:	9207      	str	r2, [sp, #28]
 8009900:	e004      	b.n	800990c <_vfiprintf_r+0x128>
 8009902:	4252      	negs	r2, r2
 8009904:	f043 0302 	orr.w	r3, r3, #2
 8009908:	9207      	str	r2, [sp, #28]
 800990a:	9304      	str	r3, [sp, #16]
 800990c:	f898 3000 	ldrb.w	r3, [r8]
 8009910:	2b2e      	cmp	r3, #46	; 0x2e
 8009912:	d10e      	bne.n	8009932 <_vfiprintf_r+0x14e>
 8009914:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009918:	2b2a      	cmp	r3, #42	; 0x2a
 800991a:	d138      	bne.n	800998e <_vfiprintf_r+0x1aa>
 800991c:	9b03      	ldr	r3, [sp, #12]
 800991e:	1d1a      	adds	r2, r3, #4
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	9203      	str	r2, [sp, #12]
 8009924:	2b00      	cmp	r3, #0
 8009926:	bfb8      	it	lt
 8009928:	f04f 33ff 	movlt.w	r3, #4294967295
 800992c:	f108 0802 	add.w	r8, r8, #2
 8009930:	9305      	str	r3, [sp, #20]
 8009932:	4d33      	ldr	r5, [pc, #204]	; (8009a00 <_vfiprintf_r+0x21c>)
 8009934:	f898 1000 	ldrb.w	r1, [r8]
 8009938:	2203      	movs	r2, #3
 800993a:	4628      	mov	r0, r5
 800993c:	f7f6 fc50 	bl	80001e0 <memchr>
 8009940:	b140      	cbz	r0, 8009954 <_vfiprintf_r+0x170>
 8009942:	2340      	movs	r3, #64	; 0x40
 8009944:	1b40      	subs	r0, r0, r5
 8009946:	fa03 f000 	lsl.w	r0, r3, r0
 800994a:	9b04      	ldr	r3, [sp, #16]
 800994c:	4303      	orrs	r3, r0
 800994e:	f108 0801 	add.w	r8, r8, #1
 8009952:	9304      	str	r3, [sp, #16]
 8009954:	f898 1000 	ldrb.w	r1, [r8]
 8009958:	482a      	ldr	r0, [pc, #168]	; (8009a04 <_vfiprintf_r+0x220>)
 800995a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800995e:	2206      	movs	r2, #6
 8009960:	f108 0701 	add.w	r7, r8, #1
 8009964:	f7f6 fc3c 	bl	80001e0 <memchr>
 8009968:	2800      	cmp	r0, #0
 800996a:	d037      	beq.n	80099dc <_vfiprintf_r+0x1f8>
 800996c:	4b26      	ldr	r3, [pc, #152]	; (8009a08 <_vfiprintf_r+0x224>)
 800996e:	bb1b      	cbnz	r3, 80099b8 <_vfiprintf_r+0x1d4>
 8009970:	9b03      	ldr	r3, [sp, #12]
 8009972:	3307      	adds	r3, #7
 8009974:	f023 0307 	bic.w	r3, r3, #7
 8009978:	3308      	adds	r3, #8
 800997a:	9303      	str	r3, [sp, #12]
 800997c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800997e:	444b      	add	r3, r9
 8009980:	9309      	str	r3, [sp, #36]	; 0x24
 8009982:	e750      	b.n	8009826 <_vfiprintf_r+0x42>
 8009984:	fb05 3202 	mla	r2, r5, r2, r3
 8009988:	2001      	movs	r0, #1
 800998a:	4688      	mov	r8, r1
 800998c:	e78a      	b.n	80098a4 <_vfiprintf_r+0xc0>
 800998e:	2300      	movs	r3, #0
 8009990:	f108 0801 	add.w	r8, r8, #1
 8009994:	9305      	str	r3, [sp, #20]
 8009996:	4619      	mov	r1, r3
 8009998:	250a      	movs	r5, #10
 800999a:	4640      	mov	r0, r8
 800999c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099a0:	3a30      	subs	r2, #48	; 0x30
 80099a2:	2a09      	cmp	r2, #9
 80099a4:	d903      	bls.n	80099ae <_vfiprintf_r+0x1ca>
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d0c3      	beq.n	8009932 <_vfiprintf_r+0x14e>
 80099aa:	9105      	str	r1, [sp, #20]
 80099ac:	e7c1      	b.n	8009932 <_vfiprintf_r+0x14e>
 80099ae:	fb05 2101 	mla	r1, r5, r1, r2
 80099b2:	2301      	movs	r3, #1
 80099b4:	4680      	mov	r8, r0
 80099b6:	e7f0      	b.n	800999a <_vfiprintf_r+0x1b6>
 80099b8:	ab03      	add	r3, sp, #12
 80099ba:	9300      	str	r3, [sp, #0]
 80099bc:	4622      	mov	r2, r4
 80099be:	4b13      	ldr	r3, [pc, #76]	; (8009a0c <_vfiprintf_r+0x228>)
 80099c0:	a904      	add	r1, sp, #16
 80099c2:	4630      	mov	r0, r6
 80099c4:	f7fd fd56 	bl	8007474 <_printf_float>
 80099c8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80099cc:	4681      	mov	r9, r0
 80099ce:	d1d5      	bne.n	800997c <_vfiprintf_r+0x198>
 80099d0:	89a3      	ldrh	r3, [r4, #12]
 80099d2:	065b      	lsls	r3, r3, #25
 80099d4:	f53f af7e 	bmi.w	80098d4 <_vfiprintf_r+0xf0>
 80099d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80099da:	e77d      	b.n	80098d8 <_vfiprintf_r+0xf4>
 80099dc:	ab03      	add	r3, sp, #12
 80099de:	9300      	str	r3, [sp, #0]
 80099e0:	4622      	mov	r2, r4
 80099e2:	4b0a      	ldr	r3, [pc, #40]	; (8009a0c <_vfiprintf_r+0x228>)
 80099e4:	a904      	add	r1, sp, #16
 80099e6:	4630      	mov	r0, r6
 80099e8:	f7fd fffa 	bl	80079e0 <_printf_i>
 80099ec:	e7ec      	b.n	80099c8 <_vfiprintf_r+0x1e4>
 80099ee:	bf00      	nop
 80099f0:	0800aa30 	.word	0x0800aa30
 80099f4:	0800ab6c 	.word	0x0800ab6c
 80099f8:	0800aa50 	.word	0x0800aa50
 80099fc:	0800aa10 	.word	0x0800aa10
 8009a00:	0800ab72 	.word	0x0800ab72
 8009a04:	0800ab76 	.word	0x0800ab76
 8009a08:	08007475 	.word	0x08007475
 8009a0c:	080097bf 	.word	0x080097bf

08009a10 <_sbrk_r>:
 8009a10:	b538      	push	{r3, r4, r5, lr}
 8009a12:	4c06      	ldr	r4, [pc, #24]	; (8009a2c <_sbrk_r+0x1c>)
 8009a14:	2300      	movs	r3, #0
 8009a16:	4605      	mov	r5, r0
 8009a18:	4608      	mov	r0, r1
 8009a1a:	6023      	str	r3, [r4, #0]
 8009a1c:	f7f8 fe4c 	bl	80026b8 <_sbrk>
 8009a20:	1c43      	adds	r3, r0, #1
 8009a22:	d102      	bne.n	8009a2a <_sbrk_r+0x1a>
 8009a24:	6823      	ldr	r3, [r4, #0]
 8009a26:	b103      	cbz	r3, 8009a2a <_sbrk_r+0x1a>
 8009a28:	602b      	str	r3, [r5, #0]
 8009a2a:	bd38      	pop	{r3, r4, r5, pc}
 8009a2c:	20006884 	.word	0x20006884

08009a30 <__sread>:
 8009a30:	b510      	push	{r4, lr}
 8009a32:	460c      	mov	r4, r1
 8009a34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a38:	f000 f8a8 	bl	8009b8c <_read_r>
 8009a3c:	2800      	cmp	r0, #0
 8009a3e:	bfab      	itete	ge
 8009a40:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009a42:	89a3      	ldrhlt	r3, [r4, #12]
 8009a44:	181b      	addge	r3, r3, r0
 8009a46:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009a4a:	bfac      	ite	ge
 8009a4c:	6563      	strge	r3, [r4, #84]	; 0x54
 8009a4e:	81a3      	strhlt	r3, [r4, #12]
 8009a50:	bd10      	pop	{r4, pc}

08009a52 <__swrite>:
 8009a52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a56:	461f      	mov	r7, r3
 8009a58:	898b      	ldrh	r3, [r1, #12]
 8009a5a:	05db      	lsls	r3, r3, #23
 8009a5c:	4605      	mov	r5, r0
 8009a5e:	460c      	mov	r4, r1
 8009a60:	4616      	mov	r6, r2
 8009a62:	d505      	bpl.n	8009a70 <__swrite+0x1e>
 8009a64:	2302      	movs	r3, #2
 8009a66:	2200      	movs	r2, #0
 8009a68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a6c:	f000 f868 	bl	8009b40 <_lseek_r>
 8009a70:	89a3      	ldrh	r3, [r4, #12]
 8009a72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009a7a:	81a3      	strh	r3, [r4, #12]
 8009a7c:	4632      	mov	r2, r6
 8009a7e:	463b      	mov	r3, r7
 8009a80:	4628      	mov	r0, r5
 8009a82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a86:	f000 b817 	b.w	8009ab8 <_write_r>

08009a8a <__sseek>:
 8009a8a:	b510      	push	{r4, lr}
 8009a8c:	460c      	mov	r4, r1
 8009a8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a92:	f000 f855 	bl	8009b40 <_lseek_r>
 8009a96:	1c43      	adds	r3, r0, #1
 8009a98:	89a3      	ldrh	r3, [r4, #12]
 8009a9a:	bf15      	itete	ne
 8009a9c:	6560      	strne	r0, [r4, #84]	; 0x54
 8009a9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009aa2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009aa6:	81a3      	strheq	r3, [r4, #12]
 8009aa8:	bf18      	it	ne
 8009aaa:	81a3      	strhne	r3, [r4, #12]
 8009aac:	bd10      	pop	{r4, pc}

08009aae <__sclose>:
 8009aae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ab2:	f000 b813 	b.w	8009adc <_close_r>
	...

08009ab8 <_write_r>:
 8009ab8:	b538      	push	{r3, r4, r5, lr}
 8009aba:	4c07      	ldr	r4, [pc, #28]	; (8009ad8 <_write_r+0x20>)
 8009abc:	4605      	mov	r5, r0
 8009abe:	4608      	mov	r0, r1
 8009ac0:	4611      	mov	r1, r2
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	6022      	str	r2, [r4, #0]
 8009ac6:	461a      	mov	r2, r3
 8009ac8:	f7f8 fda5 	bl	8002616 <_write>
 8009acc:	1c43      	adds	r3, r0, #1
 8009ace:	d102      	bne.n	8009ad6 <_write_r+0x1e>
 8009ad0:	6823      	ldr	r3, [r4, #0]
 8009ad2:	b103      	cbz	r3, 8009ad6 <_write_r+0x1e>
 8009ad4:	602b      	str	r3, [r5, #0]
 8009ad6:	bd38      	pop	{r3, r4, r5, pc}
 8009ad8:	20006884 	.word	0x20006884

08009adc <_close_r>:
 8009adc:	b538      	push	{r3, r4, r5, lr}
 8009ade:	4c06      	ldr	r4, [pc, #24]	; (8009af8 <_close_r+0x1c>)
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	4605      	mov	r5, r0
 8009ae4:	4608      	mov	r0, r1
 8009ae6:	6023      	str	r3, [r4, #0]
 8009ae8:	f7f8 fdb1 	bl	800264e <_close>
 8009aec:	1c43      	adds	r3, r0, #1
 8009aee:	d102      	bne.n	8009af6 <_close_r+0x1a>
 8009af0:	6823      	ldr	r3, [r4, #0]
 8009af2:	b103      	cbz	r3, 8009af6 <_close_r+0x1a>
 8009af4:	602b      	str	r3, [r5, #0]
 8009af6:	bd38      	pop	{r3, r4, r5, pc}
 8009af8:	20006884 	.word	0x20006884

08009afc <_fstat_r>:
 8009afc:	b538      	push	{r3, r4, r5, lr}
 8009afe:	4c07      	ldr	r4, [pc, #28]	; (8009b1c <_fstat_r+0x20>)
 8009b00:	2300      	movs	r3, #0
 8009b02:	4605      	mov	r5, r0
 8009b04:	4608      	mov	r0, r1
 8009b06:	4611      	mov	r1, r2
 8009b08:	6023      	str	r3, [r4, #0]
 8009b0a:	f7f8 fdac 	bl	8002666 <_fstat>
 8009b0e:	1c43      	adds	r3, r0, #1
 8009b10:	d102      	bne.n	8009b18 <_fstat_r+0x1c>
 8009b12:	6823      	ldr	r3, [r4, #0]
 8009b14:	b103      	cbz	r3, 8009b18 <_fstat_r+0x1c>
 8009b16:	602b      	str	r3, [r5, #0]
 8009b18:	bd38      	pop	{r3, r4, r5, pc}
 8009b1a:	bf00      	nop
 8009b1c:	20006884 	.word	0x20006884

08009b20 <_isatty_r>:
 8009b20:	b538      	push	{r3, r4, r5, lr}
 8009b22:	4c06      	ldr	r4, [pc, #24]	; (8009b3c <_isatty_r+0x1c>)
 8009b24:	2300      	movs	r3, #0
 8009b26:	4605      	mov	r5, r0
 8009b28:	4608      	mov	r0, r1
 8009b2a:	6023      	str	r3, [r4, #0]
 8009b2c:	f7f8 fdab 	bl	8002686 <_isatty>
 8009b30:	1c43      	adds	r3, r0, #1
 8009b32:	d102      	bne.n	8009b3a <_isatty_r+0x1a>
 8009b34:	6823      	ldr	r3, [r4, #0]
 8009b36:	b103      	cbz	r3, 8009b3a <_isatty_r+0x1a>
 8009b38:	602b      	str	r3, [r5, #0]
 8009b3a:	bd38      	pop	{r3, r4, r5, pc}
 8009b3c:	20006884 	.word	0x20006884

08009b40 <_lseek_r>:
 8009b40:	b538      	push	{r3, r4, r5, lr}
 8009b42:	4c07      	ldr	r4, [pc, #28]	; (8009b60 <_lseek_r+0x20>)
 8009b44:	4605      	mov	r5, r0
 8009b46:	4608      	mov	r0, r1
 8009b48:	4611      	mov	r1, r2
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	6022      	str	r2, [r4, #0]
 8009b4e:	461a      	mov	r2, r3
 8009b50:	f7f8 fda4 	bl	800269c <_lseek>
 8009b54:	1c43      	adds	r3, r0, #1
 8009b56:	d102      	bne.n	8009b5e <_lseek_r+0x1e>
 8009b58:	6823      	ldr	r3, [r4, #0]
 8009b5a:	b103      	cbz	r3, 8009b5e <_lseek_r+0x1e>
 8009b5c:	602b      	str	r3, [r5, #0]
 8009b5e:	bd38      	pop	{r3, r4, r5, pc}
 8009b60:	20006884 	.word	0x20006884

08009b64 <__ascii_mbtowc>:
 8009b64:	b082      	sub	sp, #8
 8009b66:	b901      	cbnz	r1, 8009b6a <__ascii_mbtowc+0x6>
 8009b68:	a901      	add	r1, sp, #4
 8009b6a:	b142      	cbz	r2, 8009b7e <__ascii_mbtowc+0x1a>
 8009b6c:	b14b      	cbz	r3, 8009b82 <__ascii_mbtowc+0x1e>
 8009b6e:	7813      	ldrb	r3, [r2, #0]
 8009b70:	600b      	str	r3, [r1, #0]
 8009b72:	7812      	ldrb	r2, [r2, #0]
 8009b74:	1c10      	adds	r0, r2, #0
 8009b76:	bf18      	it	ne
 8009b78:	2001      	movne	r0, #1
 8009b7a:	b002      	add	sp, #8
 8009b7c:	4770      	bx	lr
 8009b7e:	4610      	mov	r0, r2
 8009b80:	e7fb      	b.n	8009b7a <__ascii_mbtowc+0x16>
 8009b82:	f06f 0001 	mvn.w	r0, #1
 8009b86:	e7f8      	b.n	8009b7a <__ascii_mbtowc+0x16>

08009b88 <__malloc_lock>:
 8009b88:	4770      	bx	lr

08009b8a <__malloc_unlock>:
 8009b8a:	4770      	bx	lr

08009b8c <_read_r>:
 8009b8c:	b538      	push	{r3, r4, r5, lr}
 8009b8e:	4c07      	ldr	r4, [pc, #28]	; (8009bac <_read_r+0x20>)
 8009b90:	4605      	mov	r5, r0
 8009b92:	4608      	mov	r0, r1
 8009b94:	4611      	mov	r1, r2
 8009b96:	2200      	movs	r2, #0
 8009b98:	6022      	str	r2, [r4, #0]
 8009b9a:	461a      	mov	r2, r3
 8009b9c:	f7f8 fd1e 	bl	80025dc <_read>
 8009ba0:	1c43      	adds	r3, r0, #1
 8009ba2:	d102      	bne.n	8009baa <_read_r+0x1e>
 8009ba4:	6823      	ldr	r3, [r4, #0]
 8009ba6:	b103      	cbz	r3, 8009baa <_read_r+0x1e>
 8009ba8:	602b      	str	r3, [r5, #0]
 8009baa:	bd38      	pop	{r3, r4, r5, pc}
 8009bac:	20006884 	.word	0x20006884

08009bb0 <__ascii_wctomb>:
 8009bb0:	b149      	cbz	r1, 8009bc6 <__ascii_wctomb+0x16>
 8009bb2:	2aff      	cmp	r2, #255	; 0xff
 8009bb4:	bf85      	ittet	hi
 8009bb6:	238a      	movhi	r3, #138	; 0x8a
 8009bb8:	6003      	strhi	r3, [r0, #0]
 8009bba:	700a      	strbls	r2, [r1, #0]
 8009bbc:	f04f 30ff 	movhi.w	r0, #4294967295
 8009bc0:	bf98      	it	ls
 8009bc2:	2001      	movls	r0, #1
 8009bc4:	4770      	bx	lr
 8009bc6:	4608      	mov	r0, r1
 8009bc8:	4770      	bx	lr
	...

08009bcc <cosf>:
 8009bcc:	ee10 3a10 	vmov	r3, s0
 8009bd0:	b507      	push	{r0, r1, r2, lr}
 8009bd2:	4a1c      	ldr	r2, [pc, #112]	; (8009c44 <cosf+0x78>)
 8009bd4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009bd8:	4293      	cmp	r3, r2
 8009bda:	dc04      	bgt.n	8009be6 <cosf+0x1a>
 8009bdc:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8009c48 <cosf+0x7c>
 8009be0:	f000 fad8 	bl	800a194 <__kernel_cosf>
 8009be4:	e004      	b.n	8009bf0 <cosf+0x24>
 8009be6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009bea:	db04      	blt.n	8009bf6 <cosf+0x2a>
 8009bec:	ee30 0a40 	vsub.f32	s0, s0, s0
 8009bf0:	b003      	add	sp, #12
 8009bf2:	f85d fb04 	ldr.w	pc, [sp], #4
 8009bf6:	4668      	mov	r0, sp
 8009bf8:	f000 f9a0 	bl	8009f3c <__ieee754_rem_pio2f>
 8009bfc:	f000 0003 	and.w	r0, r0, #3
 8009c00:	2801      	cmp	r0, #1
 8009c02:	d007      	beq.n	8009c14 <cosf+0x48>
 8009c04:	2802      	cmp	r0, #2
 8009c06:	d00e      	beq.n	8009c26 <cosf+0x5a>
 8009c08:	b9a0      	cbnz	r0, 8009c34 <cosf+0x68>
 8009c0a:	eddd 0a01 	vldr	s1, [sp, #4]
 8009c0e:	ed9d 0a00 	vldr	s0, [sp]
 8009c12:	e7e5      	b.n	8009be0 <cosf+0x14>
 8009c14:	eddd 0a01 	vldr	s1, [sp, #4]
 8009c18:	ed9d 0a00 	vldr	s0, [sp]
 8009c1c:	f000 fd9a 	bl	800a754 <__kernel_sinf>
 8009c20:	eeb1 0a40 	vneg.f32	s0, s0
 8009c24:	e7e4      	b.n	8009bf0 <cosf+0x24>
 8009c26:	eddd 0a01 	vldr	s1, [sp, #4]
 8009c2a:	ed9d 0a00 	vldr	s0, [sp]
 8009c2e:	f000 fab1 	bl	800a194 <__kernel_cosf>
 8009c32:	e7f5      	b.n	8009c20 <cosf+0x54>
 8009c34:	2001      	movs	r0, #1
 8009c36:	eddd 0a01 	vldr	s1, [sp, #4]
 8009c3a:	ed9d 0a00 	vldr	s0, [sp]
 8009c3e:	f000 fd89 	bl	800a754 <__kernel_sinf>
 8009c42:	e7d5      	b.n	8009bf0 <cosf+0x24>
 8009c44:	3f490fd8 	.word	0x3f490fd8
 8009c48:	00000000 	.word	0x00000000

08009c4c <fmaxf>:
 8009c4c:	b508      	push	{r3, lr}
 8009c4e:	ed2d 8b02 	vpush	{d8}
 8009c52:	eeb0 8a40 	vmov.f32	s16, s0
 8009c56:	eef0 8a60 	vmov.f32	s17, s1
 8009c5a:	f000 f82d 	bl	8009cb8 <__fpclassifyf>
 8009c5e:	b148      	cbz	r0, 8009c74 <fmaxf+0x28>
 8009c60:	eeb0 0a68 	vmov.f32	s0, s17
 8009c64:	f000 f828 	bl	8009cb8 <__fpclassifyf>
 8009c68:	b130      	cbz	r0, 8009c78 <fmaxf+0x2c>
 8009c6a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8009c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c72:	dc01      	bgt.n	8009c78 <fmaxf+0x2c>
 8009c74:	eeb0 8a68 	vmov.f32	s16, s17
 8009c78:	eeb0 0a48 	vmov.f32	s0, s16
 8009c7c:	ecbd 8b02 	vpop	{d8}
 8009c80:	bd08      	pop	{r3, pc}

08009c82 <fminf>:
 8009c82:	b508      	push	{r3, lr}
 8009c84:	ed2d 8b02 	vpush	{d8}
 8009c88:	eeb0 8a40 	vmov.f32	s16, s0
 8009c8c:	eef0 8a60 	vmov.f32	s17, s1
 8009c90:	f000 f812 	bl	8009cb8 <__fpclassifyf>
 8009c94:	b148      	cbz	r0, 8009caa <fminf+0x28>
 8009c96:	eeb0 0a68 	vmov.f32	s0, s17
 8009c9a:	f000 f80d 	bl	8009cb8 <__fpclassifyf>
 8009c9e:	b130      	cbz	r0, 8009cae <fminf+0x2c>
 8009ca0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8009ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ca8:	d401      	bmi.n	8009cae <fminf+0x2c>
 8009caa:	eeb0 8a68 	vmov.f32	s16, s17
 8009cae:	eeb0 0a48 	vmov.f32	s0, s16
 8009cb2:	ecbd 8b02 	vpop	{d8}
 8009cb6:	bd08      	pop	{r3, pc}

08009cb8 <__fpclassifyf>:
 8009cb8:	ee10 3a10 	vmov	r3, s0
 8009cbc:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 8009cc0:	d00d      	beq.n	8009cde <__fpclassifyf+0x26>
 8009cc2:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 8009cc6:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8009cca:	d30a      	bcc.n	8009ce2 <__fpclassifyf+0x2a>
 8009ccc:	4b07      	ldr	r3, [pc, #28]	; (8009cec <__fpclassifyf+0x34>)
 8009cce:	1e42      	subs	r2, r0, #1
 8009cd0:	429a      	cmp	r2, r3
 8009cd2:	d908      	bls.n	8009ce6 <__fpclassifyf+0x2e>
 8009cd4:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 8009cd8:	4258      	negs	r0, r3
 8009cda:	4158      	adcs	r0, r3
 8009cdc:	4770      	bx	lr
 8009cde:	2002      	movs	r0, #2
 8009ce0:	4770      	bx	lr
 8009ce2:	2004      	movs	r0, #4
 8009ce4:	4770      	bx	lr
 8009ce6:	2003      	movs	r0, #3
 8009ce8:	4770      	bx	lr
 8009cea:	bf00      	nop
 8009cec:	007ffffe 	.word	0x007ffffe

08009cf0 <sinf>:
 8009cf0:	ee10 3a10 	vmov	r3, s0
 8009cf4:	b507      	push	{r0, r1, r2, lr}
 8009cf6:	4a1d      	ldr	r2, [pc, #116]	; (8009d6c <sinf+0x7c>)
 8009cf8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009cfc:	4293      	cmp	r3, r2
 8009cfe:	dc05      	bgt.n	8009d0c <sinf+0x1c>
 8009d00:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8009d70 <sinf+0x80>
 8009d04:	2000      	movs	r0, #0
 8009d06:	f000 fd25 	bl	800a754 <__kernel_sinf>
 8009d0a:	e004      	b.n	8009d16 <sinf+0x26>
 8009d0c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009d10:	db04      	blt.n	8009d1c <sinf+0x2c>
 8009d12:	ee30 0a40 	vsub.f32	s0, s0, s0
 8009d16:	b003      	add	sp, #12
 8009d18:	f85d fb04 	ldr.w	pc, [sp], #4
 8009d1c:	4668      	mov	r0, sp
 8009d1e:	f000 f90d 	bl	8009f3c <__ieee754_rem_pio2f>
 8009d22:	f000 0003 	and.w	r0, r0, #3
 8009d26:	2801      	cmp	r0, #1
 8009d28:	d008      	beq.n	8009d3c <sinf+0x4c>
 8009d2a:	2802      	cmp	r0, #2
 8009d2c:	d00d      	beq.n	8009d4a <sinf+0x5a>
 8009d2e:	b9b0      	cbnz	r0, 8009d5e <sinf+0x6e>
 8009d30:	2001      	movs	r0, #1
 8009d32:	eddd 0a01 	vldr	s1, [sp, #4]
 8009d36:	ed9d 0a00 	vldr	s0, [sp]
 8009d3a:	e7e4      	b.n	8009d06 <sinf+0x16>
 8009d3c:	eddd 0a01 	vldr	s1, [sp, #4]
 8009d40:	ed9d 0a00 	vldr	s0, [sp]
 8009d44:	f000 fa26 	bl	800a194 <__kernel_cosf>
 8009d48:	e7e5      	b.n	8009d16 <sinf+0x26>
 8009d4a:	2001      	movs	r0, #1
 8009d4c:	eddd 0a01 	vldr	s1, [sp, #4]
 8009d50:	ed9d 0a00 	vldr	s0, [sp]
 8009d54:	f000 fcfe 	bl	800a754 <__kernel_sinf>
 8009d58:	eeb1 0a40 	vneg.f32	s0, s0
 8009d5c:	e7db      	b.n	8009d16 <sinf+0x26>
 8009d5e:	eddd 0a01 	vldr	s1, [sp, #4]
 8009d62:	ed9d 0a00 	vldr	s0, [sp]
 8009d66:	f000 fa15 	bl	800a194 <__kernel_cosf>
 8009d6a:	e7f5      	b.n	8009d58 <sinf+0x68>
 8009d6c:	3f490fd8 	.word	0x3f490fd8
 8009d70:	00000000 	.word	0x00000000

08009d74 <fmodf>:
 8009d74:	b5d0      	push	{r4, r6, r7, lr}
 8009d76:	ed2d 8b02 	vpush	{d8}
 8009d7a:	b08a      	sub	sp, #40	; 0x28
 8009d7c:	eef0 8a40 	vmov.f32	s17, s0
 8009d80:	eeb0 8a60 	vmov.f32	s16, s1
 8009d84:	f000 f852 	bl	8009e2c <__ieee754_fmodf>
 8009d88:	4b26      	ldr	r3, [pc, #152]	; (8009e24 <fmodf+0xb0>)
 8009d8a:	f993 4000 	ldrsb.w	r4, [r3]
 8009d8e:	1c63      	adds	r3, r4, #1
 8009d90:	d035      	beq.n	8009dfe <fmodf+0x8a>
 8009d92:	eeb4 8a48 	vcmp.f32	s16, s16
 8009d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d9a:	d630      	bvs.n	8009dfe <fmodf+0x8a>
 8009d9c:	eef4 8a68 	vcmp.f32	s17, s17
 8009da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009da4:	d62b      	bvs.n	8009dfe <fmodf+0x8a>
 8009da6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8009daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dae:	d126      	bne.n	8009dfe <fmodf+0x8a>
 8009db0:	2301      	movs	r3, #1
 8009db2:	9300      	str	r3, [sp, #0]
 8009db4:	4b1c      	ldr	r3, [pc, #112]	; (8009e28 <fmodf+0xb4>)
 8009db6:	9301      	str	r3, [sp, #4]
 8009db8:	ee18 0a90 	vmov	r0, s17
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	9308      	str	r3, [sp, #32]
 8009dc0:	f7f6 fbc2 	bl	8000548 <__aeabi_f2d>
 8009dc4:	4606      	mov	r6, r0
 8009dc6:	460f      	mov	r7, r1
 8009dc8:	ee18 0a10 	vmov	r0, s16
 8009dcc:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8009dd0:	f7f6 fbba 	bl	8000548 <__aeabi_f2d>
 8009dd4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009dd8:	b9ac      	cbnz	r4, 8009e06 <fmodf+0x92>
 8009dda:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009dde:	4668      	mov	r0, sp
 8009de0:	f000 fd00 	bl	800a7e4 <matherr>
 8009de4:	b1c8      	cbz	r0, 8009e1a <fmodf+0xa6>
 8009de6:	9b08      	ldr	r3, [sp, #32]
 8009de8:	b11b      	cbz	r3, 8009df2 <fmodf+0x7e>
 8009dea:	f7fd fa7d 	bl	80072e8 <__errno>
 8009dee:	9b08      	ldr	r3, [sp, #32]
 8009df0:	6003      	str	r3, [r0, #0]
 8009df2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009df6:	f7f6 fed7 	bl	8000ba8 <__aeabi_d2f>
 8009dfa:	ee00 0a10 	vmov	s0, r0
 8009dfe:	b00a      	add	sp, #40	; 0x28
 8009e00:	ecbd 8b02 	vpop	{d8}
 8009e04:	bdd0      	pop	{r4, r6, r7, pc}
 8009e06:	2200      	movs	r2, #0
 8009e08:	2300      	movs	r3, #0
 8009e0a:	4610      	mov	r0, r2
 8009e0c:	4619      	mov	r1, r3
 8009e0e:	f7f6 fd1d 	bl	800084c <__aeabi_ddiv>
 8009e12:	2c02      	cmp	r4, #2
 8009e14:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009e18:	d1e1      	bne.n	8009dde <fmodf+0x6a>
 8009e1a:	f7fd fa65 	bl	80072e8 <__errno>
 8009e1e:	2321      	movs	r3, #33	; 0x21
 8009e20:	6003      	str	r3, [r0, #0]
 8009e22:	e7e0      	b.n	8009de6 <fmodf+0x72>
 8009e24:	200001e4 	.word	0x200001e4
 8009e28:	0800ac88 	.word	0x0800ac88

08009e2c <__ieee754_fmodf>:
 8009e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e2e:	ee10 6a90 	vmov	r6, s1
 8009e32:	f036 4500 	bics.w	r5, r6, #2147483648	; 0x80000000
 8009e36:	ee10 3a10 	vmov	r3, s0
 8009e3a:	d009      	beq.n	8009e50 <__ieee754_fmodf+0x24>
 8009e3c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009e40:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8009e44:	ee10 7a10 	vmov	r7, s0
 8009e48:	da02      	bge.n	8009e50 <__ieee754_fmodf+0x24>
 8009e4a:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8009e4e:	dd0a      	ble.n	8009e66 <__ieee754_fmodf+0x3a>
 8009e50:	ee07 3a90 	vmov	s15, r3
 8009e54:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8009e58:	eec0 7aa0 	vdiv.f32	s15, s1, s1
 8009e5c:	ee17 3a90 	vmov	r3, s15
 8009e60:	ee00 3a10 	vmov	s0, r3
 8009e64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e66:	42a9      	cmp	r1, r5
 8009e68:	dbfa      	blt.n	8009e60 <__ieee754_fmodf+0x34>
 8009e6a:	f003 4400 	and.w	r4, r3, #2147483648	; 0x80000000
 8009e6e:	d105      	bne.n	8009e7c <__ieee754_fmodf+0x50>
 8009e70:	4a30      	ldr	r2, [pc, #192]	; (8009f34 <__ieee754_fmodf+0x108>)
 8009e72:	0fe3      	lsrs	r3, r4, #31
 8009e74:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	e7f1      	b.n	8009e60 <__ieee754_fmodf+0x34>
 8009e7c:	4b2e      	ldr	r3, [pc, #184]	; (8009f38 <__ieee754_fmodf+0x10c>)
 8009e7e:	4299      	cmp	r1, r3
 8009e80:	dc3e      	bgt.n	8009f00 <__ieee754_fmodf+0xd4>
 8009e82:	020a      	lsls	r2, r1, #8
 8009e84:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 8009e88:	2a00      	cmp	r2, #0
 8009e8a:	dc36      	bgt.n	8009efa <__ieee754_fmodf+0xce>
 8009e8c:	429d      	cmp	r5, r3
 8009e8e:	dc3a      	bgt.n	8009f06 <__ieee754_fmodf+0xda>
 8009e90:	022b      	lsls	r3, r5, #8
 8009e92:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 8009e96:	005b      	lsls	r3, r3, #1
 8009e98:	f102 32ff 	add.w	r2, r2, #4294967295
 8009e9c:	d5fb      	bpl.n	8009e96 <__ieee754_fmodf+0x6a>
 8009e9e:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 8009ea2:	bfbb      	ittet	lt
 8009ea4:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 8009ea8:	1a1b      	sublt	r3, r3, r0
 8009eaa:	f3c7 0116 	ubfxge	r1, r7, #0, #23
 8009eae:	4099      	lsllt	r1, r3
 8009eb0:	bfa8      	it	ge
 8009eb2:	f441 0100 	orrge.w	r1, r1, #8388608	; 0x800000
 8009eb6:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 8009eba:	bfb5      	itete	lt
 8009ebc:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 8009ec0:	f3c6 0516 	ubfxge	r5, r6, #0, #23
 8009ec4:	1a9b      	sublt	r3, r3, r2
 8009ec6:	f445 0500 	orrge.w	r5, r5, #8388608	; 0x800000
 8009eca:	bfb8      	it	lt
 8009ecc:	409d      	lsllt	r5, r3
 8009ece:	1a80      	subs	r0, r0, r2
 8009ed0:	1b4b      	subs	r3, r1, r5
 8009ed2:	b9d8      	cbnz	r0, 8009f0c <__ieee754_fmodf+0xe0>
 8009ed4:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 8009ed8:	bf28      	it	cs
 8009eda:	460b      	movcs	r3, r1
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d0c7      	beq.n	8009e70 <__ieee754_fmodf+0x44>
 8009ee0:	4915      	ldr	r1, [pc, #84]	; (8009f38 <__ieee754_fmodf+0x10c>)
 8009ee2:	428b      	cmp	r3, r1
 8009ee4:	dd1a      	ble.n	8009f1c <__ieee754_fmodf+0xf0>
 8009ee6:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 8009eea:	db1a      	blt.n	8009f22 <__ieee754_fmodf+0xf6>
 8009eec:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8009ef0:	4323      	orrs	r3, r4
 8009ef2:	327f      	adds	r2, #127	; 0x7f
 8009ef4:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8009ef8:	e7b2      	b.n	8009e60 <__ieee754_fmodf+0x34>
 8009efa:	3801      	subs	r0, #1
 8009efc:	0052      	lsls	r2, r2, #1
 8009efe:	e7c3      	b.n	8009e88 <__ieee754_fmodf+0x5c>
 8009f00:	15c8      	asrs	r0, r1, #23
 8009f02:	387f      	subs	r0, #127	; 0x7f
 8009f04:	e7c2      	b.n	8009e8c <__ieee754_fmodf+0x60>
 8009f06:	15ea      	asrs	r2, r5, #23
 8009f08:	3a7f      	subs	r2, #127	; 0x7f
 8009f0a:	e7c8      	b.n	8009e9e <__ieee754_fmodf+0x72>
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	da02      	bge.n	8009f16 <__ieee754_fmodf+0xea>
 8009f10:	0049      	lsls	r1, r1, #1
 8009f12:	3801      	subs	r0, #1
 8009f14:	e7dc      	b.n	8009ed0 <__ieee754_fmodf+0xa4>
 8009f16:	d0ab      	beq.n	8009e70 <__ieee754_fmodf+0x44>
 8009f18:	0059      	lsls	r1, r3, #1
 8009f1a:	e7fa      	b.n	8009f12 <__ieee754_fmodf+0xe6>
 8009f1c:	005b      	lsls	r3, r3, #1
 8009f1e:	3a01      	subs	r2, #1
 8009f20:	e7df      	b.n	8009ee2 <__ieee754_fmodf+0xb6>
 8009f22:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009f26:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009f2a:	3282      	adds	r2, #130	; 0x82
 8009f2c:	4113      	asrs	r3, r2
 8009f2e:	4323      	orrs	r3, r4
 8009f30:	e796      	b.n	8009e60 <__ieee754_fmodf+0x34>
 8009f32:	bf00      	nop
 8009f34:	0800ac90 	.word	0x0800ac90
 8009f38:	007fffff 	.word	0x007fffff

08009f3c <__ieee754_rem_pio2f>:
 8009f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f3e:	ee10 6a10 	vmov	r6, s0
 8009f42:	4b86      	ldr	r3, [pc, #536]	; (800a15c <__ieee754_rem_pio2f+0x220>)
 8009f44:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8009f48:	429c      	cmp	r4, r3
 8009f4a:	b087      	sub	sp, #28
 8009f4c:	4605      	mov	r5, r0
 8009f4e:	dc05      	bgt.n	8009f5c <__ieee754_rem_pio2f+0x20>
 8009f50:	2300      	movs	r3, #0
 8009f52:	ed85 0a00 	vstr	s0, [r5]
 8009f56:	6043      	str	r3, [r0, #4]
 8009f58:	2000      	movs	r0, #0
 8009f5a:	e020      	b.n	8009f9e <__ieee754_rem_pio2f+0x62>
 8009f5c:	4b80      	ldr	r3, [pc, #512]	; (800a160 <__ieee754_rem_pio2f+0x224>)
 8009f5e:	429c      	cmp	r4, r3
 8009f60:	dc38      	bgt.n	8009fd4 <__ieee754_rem_pio2f+0x98>
 8009f62:	2e00      	cmp	r6, #0
 8009f64:	f024 040f 	bic.w	r4, r4, #15
 8009f68:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 800a164 <__ieee754_rem_pio2f+0x228>
 8009f6c:	4b7e      	ldr	r3, [pc, #504]	; (800a168 <__ieee754_rem_pio2f+0x22c>)
 8009f6e:	dd18      	ble.n	8009fa2 <__ieee754_rem_pio2f+0x66>
 8009f70:	429c      	cmp	r4, r3
 8009f72:	ee70 7a47 	vsub.f32	s15, s0, s14
 8009f76:	bf09      	itett	eq
 8009f78:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 800a16c <__ieee754_rem_pio2f+0x230>
 8009f7c:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 800a170 <__ieee754_rem_pio2f+0x234>
 8009f80:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8009f84:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 800a174 <__ieee754_rem_pio2f+0x238>
 8009f88:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8009f8c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009f90:	edc0 6a00 	vstr	s13, [r0]
 8009f94:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009f98:	edc0 7a01 	vstr	s15, [r0, #4]
 8009f9c:	2001      	movs	r0, #1
 8009f9e:	b007      	add	sp, #28
 8009fa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fa2:	429c      	cmp	r4, r3
 8009fa4:	ee70 7a07 	vadd.f32	s15, s0, s14
 8009fa8:	bf09      	itett	eq
 8009faa:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 800a16c <__ieee754_rem_pio2f+0x230>
 8009fae:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 800a170 <__ieee754_rem_pio2f+0x234>
 8009fb2:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8009fb6:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 800a174 <__ieee754_rem_pio2f+0x238>
 8009fba:	ee77 6a87 	vadd.f32	s13, s15, s14
 8009fbe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009fc2:	edc0 6a00 	vstr	s13, [r0]
 8009fc6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009fca:	edc0 7a01 	vstr	s15, [r0, #4]
 8009fce:	f04f 30ff 	mov.w	r0, #4294967295
 8009fd2:	e7e4      	b.n	8009f9e <__ieee754_rem_pio2f+0x62>
 8009fd4:	4b68      	ldr	r3, [pc, #416]	; (800a178 <__ieee754_rem_pio2f+0x23c>)
 8009fd6:	429c      	cmp	r4, r3
 8009fd8:	dc71      	bgt.n	800a0be <__ieee754_rem_pio2f+0x182>
 8009fda:	f000 fc05 	bl	800a7e8 <fabsf>
 8009fde:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800a17c <__ieee754_rem_pio2f+0x240>
 8009fe2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8009fe6:	eee0 7a07 	vfma.f32	s15, s0, s14
 8009fea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009fee:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8009ff2:	ee17 0a90 	vmov	r0, s15
 8009ff6:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800a164 <__ieee754_rem_pio2f+0x228>
 8009ffa:	eeb1 7a46 	vneg.f32	s14, s12
 8009ffe:	eea7 0a27 	vfma.f32	s0, s14, s15
 800a002:	281f      	cmp	r0, #31
 800a004:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800a170 <__ieee754_rem_pio2f+0x234>
 800a008:	ee66 7a27 	vmul.f32	s15, s12, s15
 800a00c:	ee70 6a67 	vsub.f32	s13, s0, s15
 800a010:	ee16 3a90 	vmov	r3, s13
 800a014:	dc1c      	bgt.n	800a050 <__ieee754_rem_pio2f+0x114>
 800a016:	1e47      	subs	r7, r0, #1
 800a018:	4959      	ldr	r1, [pc, #356]	; (800a180 <__ieee754_rem_pio2f+0x244>)
 800a01a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800a01e:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 800a022:	428a      	cmp	r2, r1
 800a024:	d014      	beq.n	800a050 <__ieee754_rem_pio2f+0x114>
 800a026:	602b      	str	r3, [r5, #0]
 800a028:	ed95 7a00 	vldr	s14, [r5]
 800a02c:	ee30 0a47 	vsub.f32	s0, s0, s14
 800a030:	2e00      	cmp	r6, #0
 800a032:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a036:	ed85 0a01 	vstr	s0, [r5, #4]
 800a03a:	dab0      	bge.n	8009f9e <__ieee754_rem_pio2f+0x62>
 800a03c:	eeb1 7a47 	vneg.f32	s14, s14
 800a040:	eeb1 0a40 	vneg.f32	s0, s0
 800a044:	ed85 7a00 	vstr	s14, [r5]
 800a048:	ed85 0a01 	vstr	s0, [r5, #4]
 800a04c:	4240      	negs	r0, r0
 800a04e:	e7a6      	b.n	8009f9e <__ieee754_rem_pio2f+0x62>
 800a050:	15e4      	asrs	r4, r4, #23
 800a052:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800a056:	1aa2      	subs	r2, r4, r2
 800a058:	2a08      	cmp	r2, #8
 800a05a:	dde4      	ble.n	800a026 <__ieee754_rem_pio2f+0xea>
 800a05c:	eddf 7a43 	vldr	s15, [pc, #268]	; 800a16c <__ieee754_rem_pio2f+0x230>
 800a060:	eef0 6a40 	vmov.f32	s13, s0
 800a064:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a068:	ee30 0a66 	vsub.f32	s0, s0, s13
 800a06c:	eea7 0a27 	vfma.f32	s0, s14, s15
 800a070:	eddf 7a40 	vldr	s15, [pc, #256]	; 800a174 <__ieee754_rem_pio2f+0x238>
 800a074:	ee96 0a27 	vfnms.f32	s0, s12, s15
 800a078:	ee76 5ac0 	vsub.f32	s11, s13, s0
 800a07c:	eef0 7a40 	vmov.f32	s15, s0
 800a080:	ee15 3a90 	vmov	r3, s11
 800a084:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800a088:	1aa4      	subs	r4, r4, r2
 800a08a:	2c19      	cmp	r4, #25
 800a08c:	dc04      	bgt.n	800a098 <__ieee754_rem_pio2f+0x15c>
 800a08e:	edc5 5a00 	vstr	s11, [r5]
 800a092:	eeb0 0a66 	vmov.f32	s0, s13
 800a096:	e7c7      	b.n	800a028 <__ieee754_rem_pio2f+0xec>
 800a098:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800a184 <__ieee754_rem_pio2f+0x248>
 800a09c:	eeb0 0a66 	vmov.f32	s0, s13
 800a0a0:	eea7 0a25 	vfma.f32	s0, s14, s11
 800a0a4:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800a0a8:	eee7 7a25 	vfma.f32	s15, s14, s11
 800a0ac:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800a188 <__ieee754_rem_pio2f+0x24c>
 800a0b0:	eed6 7a07 	vfnms.f32	s15, s12, s14
 800a0b4:	ee30 7a67 	vsub.f32	s14, s0, s15
 800a0b8:	ed85 7a00 	vstr	s14, [r5]
 800a0bc:	e7b4      	b.n	800a028 <__ieee754_rem_pio2f+0xec>
 800a0be:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800a0c2:	db06      	blt.n	800a0d2 <__ieee754_rem_pio2f+0x196>
 800a0c4:	ee70 7a40 	vsub.f32	s15, s0, s0
 800a0c8:	edc0 7a01 	vstr	s15, [r0, #4]
 800a0cc:	edc0 7a00 	vstr	s15, [r0]
 800a0d0:	e742      	b.n	8009f58 <__ieee754_rem_pio2f+0x1c>
 800a0d2:	15e2      	asrs	r2, r4, #23
 800a0d4:	3a86      	subs	r2, #134	; 0x86
 800a0d6:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 800a0da:	ee07 3a90 	vmov	s15, r3
 800a0de:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800a0e2:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800a18c <__ieee754_rem_pio2f+0x250>
 800a0e6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a0ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a0ee:	ed8d 7a03 	vstr	s14, [sp, #12]
 800a0f2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a0f6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800a0fa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a0fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a102:	ed8d 7a04 	vstr	s14, [sp, #16]
 800a106:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a10a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a10e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a112:	edcd 7a05 	vstr	s15, [sp, #20]
 800a116:	d11e      	bne.n	800a156 <__ieee754_rem_pio2f+0x21a>
 800a118:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800a11c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a120:	bf0c      	ite	eq
 800a122:	2301      	moveq	r3, #1
 800a124:	2302      	movne	r3, #2
 800a126:	491a      	ldr	r1, [pc, #104]	; (800a190 <__ieee754_rem_pio2f+0x254>)
 800a128:	9101      	str	r1, [sp, #4]
 800a12a:	2102      	movs	r1, #2
 800a12c:	9100      	str	r1, [sp, #0]
 800a12e:	a803      	add	r0, sp, #12
 800a130:	4629      	mov	r1, r5
 800a132:	f000 f88d 	bl	800a250 <__kernel_rem_pio2f>
 800a136:	2e00      	cmp	r6, #0
 800a138:	f6bf af31 	bge.w	8009f9e <__ieee754_rem_pio2f+0x62>
 800a13c:	edd5 7a00 	vldr	s15, [r5]
 800a140:	eef1 7a67 	vneg.f32	s15, s15
 800a144:	edc5 7a00 	vstr	s15, [r5]
 800a148:	edd5 7a01 	vldr	s15, [r5, #4]
 800a14c:	eef1 7a67 	vneg.f32	s15, s15
 800a150:	edc5 7a01 	vstr	s15, [r5, #4]
 800a154:	e77a      	b.n	800a04c <__ieee754_rem_pio2f+0x110>
 800a156:	2303      	movs	r3, #3
 800a158:	e7e5      	b.n	800a126 <__ieee754_rem_pio2f+0x1ea>
 800a15a:	bf00      	nop
 800a15c:	3f490fd8 	.word	0x3f490fd8
 800a160:	4016cbe3 	.word	0x4016cbe3
 800a164:	3fc90f80 	.word	0x3fc90f80
 800a168:	3fc90fd0 	.word	0x3fc90fd0
 800a16c:	37354400 	.word	0x37354400
 800a170:	37354443 	.word	0x37354443
 800a174:	2e85a308 	.word	0x2e85a308
 800a178:	43490f80 	.word	0x43490f80
 800a17c:	3f22f984 	.word	0x3f22f984
 800a180:	0800ac98 	.word	0x0800ac98
 800a184:	2e85a300 	.word	0x2e85a300
 800a188:	248d3132 	.word	0x248d3132
 800a18c:	43800000 	.word	0x43800000
 800a190:	0800ad18 	.word	0x0800ad18

0800a194 <__kernel_cosf>:
 800a194:	ee10 3a10 	vmov	r3, s0
 800a198:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a19c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800a1a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a1a4:	da05      	bge.n	800a1b2 <__kernel_cosf+0x1e>
 800a1a6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800a1aa:	ee17 2a90 	vmov	r2, s15
 800a1ae:	2a00      	cmp	r2, #0
 800a1b0:	d03b      	beq.n	800a22a <__kernel_cosf+0x96>
 800a1b2:	ee20 6a00 	vmul.f32	s12, s0, s0
 800a1b6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a1ba:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a230 <__kernel_cosf+0x9c>
 800a1be:	4a1d      	ldr	r2, [pc, #116]	; (800a234 <__kernel_cosf+0xa0>)
 800a1c0:	ee66 7a07 	vmul.f32	s15, s12, s14
 800a1c4:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800a238 <__kernel_cosf+0xa4>
 800a1c8:	eea6 7a25 	vfma.f32	s14, s12, s11
 800a1cc:	4293      	cmp	r3, r2
 800a1ce:	eddf 5a1b 	vldr	s11, [pc, #108]	; 800a23c <__kernel_cosf+0xa8>
 800a1d2:	eee7 5a06 	vfma.f32	s11, s14, s12
 800a1d6:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800a240 <__kernel_cosf+0xac>
 800a1da:	eea5 7a86 	vfma.f32	s14, s11, s12
 800a1de:	eddf 5a19 	vldr	s11, [pc, #100]	; 800a244 <__kernel_cosf+0xb0>
 800a1e2:	eee7 5a06 	vfma.f32	s11, s14, s12
 800a1e6:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800a248 <__kernel_cosf+0xb4>
 800a1ea:	eea5 7a86 	vfma.f32	s14, s11, s12
 800a1ee:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 800a1f2:	ee27 7a06 	vmul.f32	s14, s14, s12
 800a1f6:	eee6 0a07 	vfma.f32	s1, s12, s14
 800a1fa:	dc04      	bgt.n	800a206 <__kernel_cosf+0x72>
 800a1fc:	ee77 0ae0 	vsub.f32	s1, s15, s1
 800a200:	ee36 0ae0 	vsub.f32	s0, s13, s1
 800a204:	4770      	bx	lr
 800a206:	4a11      	ldr	r2, [pc, #68]	; (800a24c <__kernel_cosf+0xb8>)
 800a208:	4293      	cmp	r3, r2
 800a20a:	bfda      	itte	le
 800a20c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800a210:	ee07 3a10 	vmovle	s14, r3
 800a214:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 800a218:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a21c:	ee36 0ac7 	vsub.f32	s0, s13, s14
 800a220:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800a224:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a228:	4770      	bx	lr
 800a22a:	eeb0 0a66 	vmov.f32	s0, s13
 800a22e:	4770      	bx	lr
 800a230:	ad47d74e 	.word	0xad47d74e
 800a234:	3e999999 	.word	0x3e999999
 800a238:	310f74f6 	.word	0x310f74f6
 800a23c:	b493f27c 	.word	0xb493f27c
 800a240:	37d00d01 	.word	0x37d00d01
 800a244:	bab60b61 	.word	0xbab60b61
 800a248:	3d2aaaab 	.word	0x3d2aaaab
 800a24c:	3f480000 	.word	0x3f480000

0800a250 <__kernel_rem_pio2f>:
 800a250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a254:	ed2d 8b04 	vpush	{d8-d9}
 800a258:	b0d7      	sub	sp, #348	; 0x15c
 800a25a:	469b      	mov	fp, r3
 800a25c:	460e      	mov	r6, r1
 800a25e:	4bbe      	ldr	r3, [pc, #760]	; (800a558 <__kernel_rem_pio2f+0x308>)
 800a260:	9964      	ldr	r1, [sp, #400]	; 0x190
 800a262:	9002      	str	r0, [sp, #8]
 800a264:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800a268:	9865      	ldr	r0, [sp, #404]	; 0x194
 800a26a:	ed9f 7abf 	vldr	s14, [pc, #764]	; 800a568 <__kernel_rem_pio2f+0x318>
 800a26e:	1ed1      	subs	r1, r2, #3
 800a270:	2308      	movs	r3, #8
 800a272:	fb91 f1f3 	sdiv	r1, r1, r3
 800a276:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800a27a:	f10b 3aff 	add.w	sl, fp, #4294967295
 800a27e:	1c4c      	adds	r4, r1, #1
 800a280:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 800a284:	eba1 050a 	sub.w	r5, r1, sl
 800a288:	aa1a      	add	r2, sp, #104	; 0x68
 800a28a:	eb09 070a 	add.w	r7, r9, sl
 800a28e:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 800a292:	4696      	mov	lr, r2
 800a294:	2300      	movs	r3, #0
 800a296:	42bb      	cmp	r3, r7
 800a298:	dd0f      	ble.n	800a2ba <__kernel_rem_pio2f+0x6a>
 800a29a:	af42      	add	r7, sp, #264	; 0x108
 800a29c:	2200      	movs	r2, #0
 800a29e:	454a      	cmp	r2, r9
 800a2a0:	dc27      	bgt.n	800a2f2 <__kernel_rem_pio2f+0xa2>
 800a2a2:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 800a2a6:	eb0b 0302 	add.w	r3, fp, r2
 800a2aa:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 800a2ae:	9d02      	ldr	r5, [sp, #8]
 800a2b0:	eddf 7aad 	vldr	s15, [pc, #692]	; 800a568 <__kernel_rem_pio2f+0x318>
 800a2b4:	f04f 0c00 	mov.w	ip, #0
 800a2b8:	e015      	b.n	800a2e6 <__kernel_rem_pio2f+0x96>
 800a2ba:	42dd      	cmn	r5, r3
 800a2bc:	bf5d      	ittte	pl
 800a2be:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 800a2c2:	ee07 2a90 	vmovpl	s15, r2
 800a2c6:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800a2ca:	eef0 7a47 	vmovmi.f32	s15, s14
 800a2ce:	ecee 7a01 	vstmia	lr!, {s15}
 800a2d2:	3301      	adds	r3, #1
 800a2d4:	e7df      	b.n	800a296 <__kernel_rem_pio2f+0x46>
 800a2d6:	ecf5 6a01 	vldmia	r5!, {s13}
 800a2da:	ed33 7a01 	vldmdb	r3!, {s14}
 800a2de:	eee6 7a87 	vfma.f32	s15, s13, s14
 800a2e2:	f10c 0c01 	add.w	ip, ip, #1
 800a2e6:	45d4      	cmp	ip, sl
 800a2e8:	ddf5      	ble.n	800a2d6 <__kernel_rem_pio2f+0x86>
 800a2ea:	ece7 7a01 	vstmia	r7!, {s15}
 800a2ee:	3201      	adds	r2, #1
 800a2f0:	e7d5      	b.n	800a29e <__kernel_rem_pio2f+0x4e>
 800a2f2:	ab06      	add	r3, sp, #24
 800a2f4:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800a2f8:	9304      	str	r3, [sp, #16]
 800a2fa:	eddf 8a9a 	vldr	s17, [pc, #616]	; 800a564 <__kernel_rem_pio2f+0x314>
 800a2fe:	ed9f 9a98 	vldr	s18, [pc, #608]	; 800a560 <__kernel_rem_pio2f+0x310>
 800a302:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800a306:	9303      	str	r3, [sp, #12]
 800a308:	464d      	mov	r5, r9
 800a30a:	ab56      	add	r3, sp, #344	; 0x158
 800a30c:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 800a310:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800a314:	3f01      	subs	r7, #1
 800a316:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 800a31a:	00bf      	lsls	r7, r7, #2
 800a31c:	ab56      	add	r3, sp, #344	; 0x158
 800a31e:	19da      	adds	r2, r3, r7
 800a320:	3a4c      	subs	r2, #76	; 0x4c
 800a322:	2300      	movs	r3, #0
 800a324:	1ae9      	subs	r1, r5, r3
 800a326:	2900      	cmp	r1, #0
 800a328:	dc4c      	bgt.n	800a3c4 <__kernel_rem_pio2f+0x174>
 800a32a:	4620      	mov	r0, r4
 800a32c:	f000 faa6 	bl	800a87c <scalbnf>
 800a330:	eeb0 8a40 	vmov.f32	s16, s0
 800a334:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800a338:	ee28 0a00 	vmul.f32	s0, s16, s0
 800a33c:	f000 fa5c 	bl	800a7f8 <floorf>
 800a340:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800a344:	eea0 8a67 	vfms.f32	s16, s0, s15
 800a348:	2c00      	cmp	r4, #0
 800a34a:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800a34e:	edcd 7a01 	vstr	s15, [sp, #4]
 800a352:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a356:	ee38 8a67 	vsub.f32	s16, s16, s15
 800a35a:	dd48      	ble.n	800a3ee <__kernel_rem_pio2f+0x19e>
 800a35c:	1e69      	subs	r1, r5, #1
 800a35e:	ab06      	add	r3, sp, #24
 800a360:	f1c4 0008 	rsb	r0, r4, #8
 800a364:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 800a368:	9a01      	ldr	r2, [sp, #4]
 800a36a:	fa4c f300 	asr.w	r3, ip, r0
 800a36e:	441a      	add	r2, r3
 800a370:	4083      	lsls	r3, r0
 800a372:	9201      	str	r2, [sp, #4]
 800a374:	ebac 0203 	sub.w	r2, ip, r3
 800a378:	ab06      	add	r3, sp, #24
 800a37a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800a37e:	f1c4 0307 	rsb	r3, r4, #7
 800a382:	fa42 f803 	asr.w	r8, r2, r3
 800a386:	f1b8 0f00 	cmp.w	r8, #0
 800a38a:	dd41      	ble.n	800a410 <__kernel_rem_pio2f+0x1c0>
 800a38c:	9b01      	ldr	r3, [sp, #4]
 800a38e:	2000      	movs	r0, #0
 800a390:	3301      	adds	r3, #1
 800a392:	9301      	str	r3, [sp, #4]
 800a394:	4601      	mov	r1, r0
 800a396:	4285      	cmp	r5, r0
 800a398:	dc6d      	bgt.n	800a476 <__kernel_rem_pio2f+0x226>
 800a39a:	2c00      	cmp	r4, #0
 800a39c:	dd04      	ble.n	800a3a8 <__kernel_rem_pio2f+0x158>
 800a39e:	2c01      	cmp	r4, #1
 800a3a0:	d07e      	beq.n	800a4a0 <__kernel_rem_pio2f+0x250>
 800a3a2:	2c02      	cmp	r4, #2
 800a3a4:	f000 8086 	beq.w	800a4b4 <__kernel_rem_pio2f+0x264>
 800a3a8:	f1b8 0f02 	cmp.w	r8, #2
 800a3ac:	d130      	bne.n	800a410 <__kernel_rem_pio2f+0x1c0>
 800a3ae:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800a3b2:	ee30 8a48 	vsub.f32	s16, s0, s16
 800a3b6:	b359      	cbz	r1, 800a410 <__kernel_rem_pio2f+0x1c0>
 800a3b8:	4620      	mov	r0, r4
 800a3ba:	f000 fa5f 	bl	800a87c <scalbnf>
 800a3be:	ee38 8a40 	vsub.f32	s16, s16, s0
 800a3c2:	e025      	b.n	800a410 <__kernel_rem_pio2f+0x1c0>
 800a3c4:	ee60 7a28 	vmul.f32	s15, s0, s17
 800a3c8:	a806      	add	r0, sp, #24
 800a3ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a3ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a3d2:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800a3d6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800a3da:	ee10 1a10 	vmov	r1, s0
 800a3de:	ed32 0a01 	vldmdb	r2!, {s0}
 800a3e2:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 800a3e6:	ee37 0a80 	vadd.f32	s0, s15, s0
 800a3ea:	3301      	adds	r3, #1
 800a3ec:	e79a      	b.n	800a324 <__kernel_rem_pio2f+0xd4>
 800a3ee:	d106      	bne.n	800a3fe <__kernel_rem_pio2f+0x1ae>
 800a3f0:	1e6b      	subs	r3, r5, #1
 800a3f2:	aa06      	add	r2, sp, #24
 800a3f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a3f8:	ea4f 2822 	mov.w	r8, r2, asr #8
 800a3fc:	e7c3      	b.n	800a386 <__kernel_rem_pio2f+0x136>
 800a3fe:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800a402:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800a406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a40a:	da31      	bge.n	800a470 <__kernel_rem_pio2f+0x220>
 800a40c:	f04f 0800 	mov.w	r8, #0
 800a410:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800a414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a418:	f040 80a8 	bne.w	800a56c <__kernel_rem_pio2f+0x31c>
 800a41c:	1e6b      	subs	r3, r5, #1
 800a41e:	4618      	mov	r0, r3
 800a420:	2200      	movs	r2, #0
 800a422:	4548      	cmp	r0, r9
 800a424:	da4d      	bge.n	800a4c2 <__kernel_rem_pio2f+0x272>
 800a426:	2a00      	cmp	r2, #0
 800a428:	f000 8087 	beq.w	800a53a <__kernel_rem_pio2f+0x2ea>
 800a42c:	aa06      	add	r2, sp, #24
 800a42e:	3c08      	subs	r4, #8
 800a430:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a434:	2900      	cmp	r1, #0
 800a436:	f000 808d 	beq.w	800a554 <__kernel_rem_pio2f+0x304>
 800a43a:	4620      	mov	r0, r4
 800a43c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800a440:	9302      	str	r3, [sp, #8]
 800a442:	f000 fa1b 	bl	800a87c <scalbnf>
 800a446:	9b02      	ldr	r3, [sp, #8]
 800a448:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800a564 <__kernel_rem_pio2f+0x314>
 800a44c:	0099      	lsls	r1, r3, #2
 800a44e:	aa42      	add	r2, sp, #264	; 0x108
 800a450:	1850      	adds	r0, r2, r1
 800a452:	1d05      	adds	r5, r0, #4
 800a454:	461c      	mov	r4, r3
 800a456:	2c00      	cmp	r4, #0
 800a458:	f280 80b8 	bge.w	800a5cc <__kernel_rem_pio2f+0x37c>
 800a45c:	2500      	movs	r5, #0
 800a45e:	1b5c      	subs	r4, r3, r5
 800a460:	2c00      	cmp	r4, #0
 800a462:	f2c0 80d8 	blt.w	800a616 <__kernel_rem_pio2f+0x3c6>
 800a466:	4f3d      	ldr	r7, [pc, #244]	; (800a55c <__kernel_rem_pio2f+0x30c>)
 800a468:	eddf 7a3f 	vldr	s15, [pc, #252]	; 800a568 <__kernel_rem_pio2f+0x318>
 800a46c:	2400      	movs	r4, #0
 800a46e:	e0c6      	b.n	800a5fe <__kernel_rem_pio2f+0x3ae>
 800a470:	f04f 0802 	mov.w	r8, #2
 800a474:	e78a      	b.n	800a38c <__kernel_rem_pio2f+0x13c>
 800a476:	ab06      	add	r3, sp, #24
 800a478:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800a47c:	b949      	cbnz	r1, 800a492 <__kernel_rem_pio2f+0x242>
 800a47e:	b12b      	cbz	r3, 800a48c <__kernel_rem_pio2f+0x23c>
 800a480:	aa06      	add	r2, sp, #24
 800a482:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800a486:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800a48a:	2301      	movs	r3, #1
 800a48c:	3001      	adds	r0, #1
 800a48e:	4619      	mov	r1, r3
 800a490:	e781      	b.n	800a396 <__kernel_rem_pio2f+0x146>
 800a492:	aa06      	add	r2, sp, #24
 800a494:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800a498:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800a49c:	460b      	mov	r3, r1
 800a49e:	e7f5      	b.n	800a48c <__kernel_rem_pio2f+0x23c>
 800a4a0:	1e68      	subs	r0, r5, #1
 800a4a2:	ab06      	add	r3, sp, #24
 800a4a4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800a4a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4ac:	aa06      	add	r2, sp, #24
 800a4ae:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800a4b2:	e779      	b.n	800a3a8 <__kernel_rem_pio2f+0x158>
 800a4b4:	1e68      	subs	r0, r5, #1
 800a4b6:	ab06      	add	r3, sp, #24
 800a4b8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800a4bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a4c0:	e7f4      	b.n	800a4ac <__kernel_rem_pio2f+0x25c>
 800a4c2:	a906      	add	r1, sp, #24
 800a4c4:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800a4c8:	3801      	subs	r0, #1
 800a4ca:	430a      	orrs	r2, r1
 800a4cc:	e7a9      	b.n	800a422 <__kernel_rem_pio2f+0x1d2>
 800a4ce:	f10c 0c01 	add.w	ip, ip, #1
 800a4d2:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a4d6:	2a00      	cmp	r2, #0
 800a4d8:	d0f9      	beq.n	800a4ce <__kernel_rem_pio2f+0x27e>
 800a4da:	eb0b 0305 	add.w	r3, fp, r5
 800a4de:	aa1a      	add	r2, sp, #104	; 0x68
 800a4e0:	009b      	lsls	r3, r3, #2
 800a4e2:	1898      	adds	r0, r3, r2
 800a4e4:	3004      	adds	r0, #4
 800a4e6:	1c69      	adds	r1, r5, #1
 800a4e8:	3704      	adds	r7, #4
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	4465      	add	r5, ip
 800a4ee:	9005      	str	r0, [sp, #20]
 800a4f0:	428d      	cmp	r5, r1
 800a4f2:	f6ff af0a 	blt.w	800a30a <__kernel_rem_pio2f+0xba>
 800a4f6:	a81a      	add	r0, sp, #104	; 0x68
 800a4f8:	eb02 0c03 	add.w	ip, r2, r3
 800a4fc:	4484      	add	ip, r0
 800a4fe:	9803      	ldr	r0, [sp, #12]
 800a500:	f8dd e008 	ldr.w	lr, [sp, #8]
 800a504:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800a508:	9001      	str	r0, [sp, #4]
 800a50a:	ee07 0a90 	vmov	s15, r0
 800a50e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a512:	9805      	ldr	r0, [sp, #20]
 800a514:	edcc 7a00 	vstr	s15, [ip]
 800a518:	eddf 7a13 	vldr	s15, [pc, #76]	; 800a568 <__kernel_rem_pio2f+0x318>
 800a51c:	eb00 0802 	add.w	r8, r0, r2
 800a520:	f04f 0c00 	mov.w	ip, #0
 800a524:	45d4      	cmp	ip, sl
 800a526:	dd0c      	ble.n	800a542 <__kernel_rem_pio2f+0x2f2>
 800a528:	eb02 0c07 	add.w	ip, r2, r7
 800a52c:	a842      	add	r0, sp, #264	; 0x108
 800a52e:	4484      	add	ip, r0
 800a530:	edcc 7a01 	vstr	s15, [ip, #4]
 800a534:	3101      	adds	r1, #1
 800a536:	3204      	adds	r2, #4
 800a538:	e7da      	b.n	800a4f0 <__kernel_rem_pio2f+0x2a0>
 800a53a:	9b04      	ldr	r3, [sp, #16]
 800a53c:	f04f 0c01 	mov.w	ip, #1
 800a540:	e7c7      	b.n	800a4d2 <__kernel_rem_pio2f+0x282>
 800a542:	ecfe 6a01 	vldmia	lr!, {s13}
 800a546:	ed38 7a01 	vldmdb	r8!, {s14}
 800a54a:	f10c 0c01 	add.w	ip, ip, #1
 800a54e:	eee6 7a87 	vfma.f32	s15, s13, s14
 800a552:	e7e7      	b.n	800a524 <__kernel_rem_pio2f+0x2d4>
 800a554:	3b01      	subs	r3, #1
 800a556:	e769      	b.n	800a42c <__kernel_rem_pio2f+0x1dc>
 800a558:	0800b05c 	.word	0x0800b05c
 800a55c:	0800b030 	.word	0x0800b030
 800a560:	43800000 	.word	0x43800000
 800a564:	3b800000 	.word	0x3b800000
 800a568:	00000000 	.word	0x00000000
 800a56c:	4260      	negs	r0, r4
 800a56e:	eeb0 0a48 	vmov.f32	s0, s16
 800a572:	f000 f983 	bl	800a87c <scalbnf>
 800a576:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 800a560 <__kernel_rem_pio2f+0x310>
 800a57a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800a57e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a582:	db1a      	blt.n	800a5ba <__kernel_rem_pio2f+0x36a>
 800a584:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800a564 <__kernel_rem_pio2f+0x314>
 800a588:	ee60 7a27 	vmul.f32	s15, s0, s15
 800a58c:	aa06      	add	r2, sp, #24
 800a58e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a592:	a906      	add	r1, sp, #24
 800a594:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a598:	3408      	adds	r4, #8
 800a59a:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800a59e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a5a2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800a5a6:	ee10 3a10 	vmov	r3, s0
 800a5aa:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800a5ae:	1c6b      	adds	r3, r5, #1
 800a5b0:	ee17 2a90 	vmov	r2, s15
 800a5b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a5b8:	e73f      	b.n	800a43a <__kernel_rem_pio2f+0x1ea>
 800a5ba:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800a5be:	aa06      	add	r2, sp, #24
 800a5c0:	ee10 3a10 	vmov	r3, s0
 800a5c4:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800a5c8:	462b      	mov	r3, r5
 800a5ca:	e736      	b.n	800a43a <__kernel_rem_pio2f+0x1ea>
 800a5cc:	aa06      	add	r2, sp, #24
 800a5ce:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800a5d2:	9202      	str	r2, [sp, #8]
 800a5d4:	ee07 2a90 	vmov	s15, r2
 800a5d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a5dc:	3c01      	subs	r4, #1
 800a5de:	ee67 7a80 	vmul.f32	s15, s15, s0
 800a5e2:	ee20 0a07 	vmul.f32	s0, s0, s14
 800a5e6:	ed65 7a01 	vstmdb	r5!, {s15}
 800a5ea:	e734      	b.n	800a456 <__kernel_rem_pio2f+0x206>
 800a5ec:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 800a5f0:	ecf7 6a01 	vldmia	r7!, {s13}
 800a5f4:	ed9c 7a00 	vldr	s14, [ip]
 800a5f8:	eee6 7a87 	vfma.f32	s15, s13, s14
 800a5fc:	3401      	adds	r4, #1
 800a5fe:	454c      	cmp	r4, r9
 800a600:	dc01      	bgt.n	800a606 <__kernel_rem_pio2f+0x3b6>
 800a602:	42a5      	cmp	r5, r4
 800a604:	daf2      	bge.n	800a5ec <__kernel_rem_pio2f+0x39c>
 800a606:	aa56      	add	r2, sp, #344	; 0x158
 800a608:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 800a60c:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 800a610:	3501      	adds	r5, #1
 800a612:	3804      	subs	r0, #4
 800a614:	e723      	b.n	800a45e <__kernel_rem_pio2f+0x20e>
 800a616:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800a618:	2a03      	cmp	r2, #3
 800a61a:	d84d      	bhi.n	800a6b8 <__kernel_rem_pio2f+0x468>
 800a61c:	e8df f002 	tbb	[pc, r2]
 800a620:	021f1f3e 	.word	0x021f1f3e
 800a624:	aa56      	add	r2, sp, #344	; 0x158
 800a626:	4411      	add	r1, r2
 800a628:	399c      	subs	r1, #156	; 0x9c
 800a62a:	4608      	mov	r0, r1
 800a62c:	461c      	mov	r4, r3
 800a62e:	2c00      	cmp	r4, #0
 800a630:	dc5f      	bgt.n	800a6f2 <__kernel_rem_pio2f+0x4a2>
 800a632:	4608      	mov	r0, r1
 800a634:	461c      	mov	r4, r3
 800a636:	2c01      	cmp	r4, #1
 800a638:	dc6b      	bgt.n	800a712 <__kernel_rem_pio2f+0x4c2>
 800a63a:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 800a568 <__kernel_rem_pio2f+0x318>
 800a63e:	2b01      	cmp	r3, #1
 800a640:	dc77      	bgt.n	800a732 <__kernel_rem_pio2f+0x4e2>
 800a642:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 800a646:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 800a64a:	f1b8 0f00 	cmp.w	r8, #0
 800a64e:	d176      	bne.n	800a73e <__kernel_rem_pio2f+0x4ee>
 800a650:	edc6 6a00 	vstr	s13, [r6]
 800a654:	ed86 7a01 	vstr	s14, [r6, #4]
 800a658:	edc6 7a02 	vstr	s15, [r6, #8]
 800a65c:	e02c      	b.n	800a6b8 <__kernel_rem_pio2f+0x468>
 800a65e:	aa56      	add	r2, sp, #344	; 0x158
 800a660:	4411      	add	r1, r2
 800a662:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 800a568 <__kernel_rem_pio2f+0x318>
 800a666:	399c      	subs	r1, #156	; 0x9c
 800a668:	4618      	mov	r0, r3
 800a66a:	2800      	cmp	r0, #0
 800a66c:	da32      	bge.n	800a6d4 <__kernel_rem_pio2f+0x484>
 800a66e:	f1b8 0f00 	cmp.w	r8, #0
 800a672:	d035      	beq.n	800a6e0 <__kernel_rem_pio2f+0x490>
 800a674:	eef1 7a47 	vneg.f32	s15, s14
 800a678:	edc6 7a00 	vstr	s15, [r6]
 800a67c:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 800a680:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a684:	a82f      	add	r0, sp, #188	; 0xbc
 800a686:	2101      	movs	r1, #1
 800a688:	428b      	cmp	r3, r1
 800a68a:	da2c      	bge.n	800a6e6 <__kernel_rem_pio2f+0x496>
 800a68c:	f1b8 0f00 	cmp.w	r8, #0
 800a690:	d001      	beq.n	800a696 <__kernel_rem_pio2f+0x446>
 800a692:	eef1 7a67 	vneg.f32	s15, s15
 800a696:	edc6 7a01 	vstr	s15, [r6, #4]
 800a69a:	e00d      	b.n	800a6b8 <__kernel_rem_pio2f+0x468>
 800a69c:	aa56      	add	r2, sp, #344	; 0x158
 800a69e:	4411      	add	r1, r2
 800a6a0:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 800a568 <__kernel_rem_pio2f+0x318>
 800a6a4:	399c      	subs	r1, #156	; 0x9c
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	da0e      	bge.n	800a6c8 <__kernel_rem_pio2f+0x478>
 800a6aa:	f1b8 0f00 	cmp.w	r8, #0
 800a6ae:	d001      	beq.n	800a6b4 <__kernel_rem_pio2f+0x464>
 800a6b0:	eef1 7a67 	vneg.f32	s15, s15
 800a6b4:	edc6 7a00 	vstr	s15, [r6]
 800a6b8:	9b01      	ldr	r3, [sp, #4]
 800a6ba:	f003 0007 	and.w	r0, r3, #7
 800a6be:	b057      	add	sp, #348	; 0x15c
 800a6c0:	ecbd 8b04 	vpop	{d8-d9}
 800a6c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6c8:	ed31 7a01 	vldmdb	r1!, {s14}
 800a6cc:	3b01      	subs	r3, #1
 800a6ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a6d2:	e7e8      	b.n	800a6a6 <__kernel_rem_pio2f+0x456>
 800a6d4:	ed71 7a01 	vldmdb	r1!, {s15}
 800a6d8:	3801      	subs	r0, #1
 800a6da:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a6de:	e7c4      	b.n	800a66a <__kernel_rem_pio2f+0x41a>
 800a6e0:	eef0 7a47 	vmov.f32	s15, s14
 800a6e4:	e7c8      	b.n	800a678 <__kernel_rem_pio2f+0x428>
 800a6e6:	ecb0 7a01 	vldmia	r0!, {s14}
 800a6ea:	3101      	adds	r1, #1
 800a6ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a6f0:	e7ca      	b.n	800a688 <__kernel_rem_pio2f+0x438>
 800a6f2:	ed50 7a02 	vldr	s15, [r0, #-8]
 800a6f6:	ed70 6a01 	vldmdb	r0!, {s13}
 800a6fa:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800a6fe:	3c01      	subs	r4, #1
 800a700:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a704:	ed00 7a01 	vstr	s14, [r0, #-4]
 800a708:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a70c:	edc0 7a00 	vstr	s15, [r0]
 800a710:	e78d      	b.n	800a62e <__kernel_rem_pio2f+0x3de>
 800a712:	ed50 7a02 	vldr	s15, [r0, #-8]
 800a716:	ed70 6a01 	vldmdb	r0!, {s13}
 800a71a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800a71e:	3c01      	subs	r4, #1
 800a720:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a724:	ed00 7a01 	vstr	s14, [r0, #-4]
 800a728:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a72c:	edc0 7a00 	vstr	s15, [r0]
 800a730:	e781      	b.n	800a636 <__kernel_rem_pio2f+0x3e6>
 800a732:	ed31 7a01 	vldmdb	r1!, {s14}
 800a736:	3b01      	subs	r3, #1
 800a738:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a73c:	e77f      	b.n	800a63e <__kernel_rem_pio2f+0x3ee>
 800a73e:	eef1 6a66 	vneg.f32	s13, s13
 800a742:	eeb1 7a47 	vneg.f32	s14, s14
 800a746:	edc6 6a00 	vstr	s13, [r6]
 800a74a:	ed86 7a01 	vstr	s14, [r6, #4]
 800a74e:	eef1 7a67 	vneg.f32	s15, s15
 800a752:	e781      	b.n	800a658 <__kernel_rem_pio2f+0x408>

0800a754 <__kernel_sinf>:
 800a754:	ee10 3a10 	vmov	r3, s0
 800a758:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a75c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800a760:	da04      	bge.n	800a76c <__kernel_sinf+0x18>
 800a762:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800a766:	ee17 3a90 	vmov	r3, s15
 800a76a:	b35b      	cbz	r3, 800a7c4 <__kernel_sinf+0x70>
 800a76c:	ee20 7a00 	vmul.f32	s14, s0, s0
 800a770:	eddf 7a15 	vldr	s15, [pc, #84]	; 800a7c8 <__kernel_sinf+0x74>
 800a774:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800a7cc <__kernel_sinf+0x78>
 800a778:	eea7 6a27 	vfma.f32	s12, s14, s15
 800a77c:	eddf 7a14 	vldr	s15, [pc, #80]	; 800a7d0 <__kernel_sinf+0x7c>
 800a780:	eee6 7a07 	vfma.f32	s15, s12, s14
 800a784:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800a7d4 <__kernel_sinf+0x80>
 800a788:	eea7 6a87 	vfma.f32	s12, s15, s14
 800a78c:	eddf 7a12 	vldr	s15, [pc, #72]	; 800a7d8 <__kernel_sinf+0x84>
 800a790:	ee60 6a07 	vmul.f32	s13, s0, s14
 800a794:	eee6 7a07 	vfma.f32	s15, s12, s14
 800a798:	b930      	cbnz	r0, 800a7a8 <__kernel_sinf+0x54>
 800a79a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800a7dc <__kernel_sinf+0x88>
 800a79e:	eea7 6a27 	vfma.f32	s12, s14, s15
 800a7a2:	eea6 0a26 	vfma.f32	s0, s12, s13
 800a7a6:	4770      	bx	lr
 800a7a8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800a7ac:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800a7b0:	eee0 7a86 	vfma.f32	s15, s1, s12
 800a7b4:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800a7b8:	eddf 7a09 	vldr	s15, [pc, #36]	; 800a7e0 <__kernel_sinf+0x8c>
 800a7bc:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800a7c0:	ee30 0a60 	vsub.f32	s0, s0, s1
 800a7c4:	4770      	bx	lr
 800a7c6:	bf00      	nop
 800a7c8:	2f2ec9d3 	.word	0x2f2ec9d3
 800a7cc:	b2d72f34 	.word	0xb2d72f34
 800a7d0:	3638ef1b 	.word	0x3638ef1b
 800a7d4:	b9500d01 	.word	0xb9500d01
 800a7d8:	3c088889 	.word	0x3c088889
 800a7dc:	be2aaaab 	.word	0xbe2aaaab
 800a7e0:	3e2aaaab 	.word	0x3e2aaaab

0800a7e4 <matherr>:
 800a7e4:	2000      	movs	r0, #0
 800a7e6:	4770      	bx	lr

0800a7e8 <fabsf>:
 800a7e8:	ee10 3a10 	vmov	r3, s0
 800a7ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a7f0:	ee00 3a10 	vmov	s0, r3
 800a7f4:	4770      	bx	lr
	...

0800a7f8 <floorf>:
 800a7f8:	ee10 3a10 	vmov	r3, s0
 800a7fc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a800:	0dca      	lsrs	r2, r1, #23
 800a802:	3a7f      	subs	r2, #127	; 0x7f
 800a804:	2a16      	cmp	r2, #22
 800a806:	dc2a      	bgt.n	800a85e <floorf+0x66>
 800a808:	2a00      	cmp	r2, #0
 800a80a:	da11      	bge.n	800a830 <floorf+0x38>
 800a80c:	eddf 7a18 	vldr	s15, [pc, #96]	; 800a870 <floorf+0x78>
 800a810:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a814:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a81c:	dd05      	ble.n	800a82a <floorf+0x32>
 800a81e:	2b00      	cmp	r3, #0
 800a820:	da23      	bge.n	800a86a <floorf+0x72>
 800a822:	4a14      	ldr	r2, [pc, #80]	; (800a874 <floorf+0x7c>)
 800a824:	2900      	cmp	r1, #0
 800a826:	bf18      	it	ne
 800a828:	4613      	movne	r3, r2
 800a82a:	ee00 3a10 	vmov	s0, r3
 800a82e:	4770      	bx	lr
 800a830:	4911      	ldr	r1, [pc, #68]	; (800a878 <floorf+0x80>)
 800a832:	4111      	asrs	r1, r2
 800a834:	420b      	tst	r3, r1
 800a836:	d0fa      	beq.n	800a82e <floorf+0x36>
 800a838:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800a870 <floorf+0x78>
 800a83c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a840:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a848:	ddef      	ble.n	800a82a <floorf+0x32>
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	bfbe      	ittt	lt
 800a84e:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800a852:	fa40 f202 	asrlt.w	r2, r0, r2
 800a856:	189b      	addlt	r3, r3, r2
 800a858:	ea23 0301 	bic.w	r3, r3, r1
 800a85c:	e7e5      	b.n	800a82a <floorf+0x32>
 800a85e:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800a862:	d3e4      	bcc.n	800a82e <floorf+0x36>
 800a864:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a868:	4770      	bx	lr
 800a86a:	2300      	movs	r3, #0
 800a86c:	e7dd      	b.n	800a82a <floorf+0x32>
 800a86e:	bf00      	nop
 800a870:	7149f2ca 	.word	0x7149f2ca
 800a874:	bf800000 	.word	0xbf800000
 800a878:	007fffff 	.word	0x007fffff

0800a87c <scalbnf>:
 800a87c:	b508      	push	{r3, lr}
 800a87e:	ee10 2a10 	vmov	r2, s0
 800a882:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800a886:	ed2d 8b02 	vpush	{d8}
 800a88a:	eef0 0a40 	vmov.f32	s1, s0
 800a88e:	d004      	beq.n	800a89a <scalbnf+0x1e>
 800a890:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a894:	d306      	bcc.n	800a8a4 <scalbnf+0x28>
 800a896:	ee70 0a00 	vadd.f32	s1, s0, s0
 800a89a:	ecbd 8b02 	vpop	{d8}
 800a89e:	eeb0 0a60 	vmov.f32	s0, s1
 800a8a2:	bd08      	pop	{r3, pc}
 800a8a4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a8a8:	d21c      	bcs.n	800a8e4 <scalbnf+0x68>
 800a8aa:	4b1f      	ldr	r3, [pc, #124]	; (800a928 <scalbnf+0xac>)
 800a8ac:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800a92c <scalbnf+0xb0>
 800a8b0:	4298      	cmp	r0, r3
 800a8b2:	ee60 0a27 	vmul.f32	s1, s0, s15
 800a8b6:	db10      	blt.n	800a8da <scalbnf+0x5e>
 800a8b8:	ee10 2a90 	vmov	r2, s1
 800a8bc:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 800a8c0:	3b19      	subs	r3, #25
 800a8c2:	4403      	add	r3, r0
 800a8c4:	2bfe      	cmp	r3, #254	; 0xfe
 800a8c6:	dd0f      	ble.n	800a8e8 <scalbnf+0x6c>
 800a8c8:	ed9f 8a19 	vldr	s16, [pc, #100]	; 800a930 <scalbnf+0xb4>
 800a8cc:	eeb0 0a48 	vmov.f32	s0, s16
 800a8d0:	f000 f834 	bl	800a93c <copysignf>
 800a8d4:	ee60 0a08 	vmul.f32	s1, s0, s16
 800a8d8:	e7df      	b.n	800a89a <scalbnf+0x1e>
 800a8da:	eddf 7a16 	vldr	s15, [pc, #88]	; 800a934 <scalbnf+0xb8>
 800a8de:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800a8e2:	e7da      	b.n	800a89a <scalbnf+0x1e>
 800a8e4:	0ddb      	lsrs	r3, r3, #23
 800a8e6:	e7ec      	b.n	800a8c2 <scalbnf+0x46>
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	dd06      	ble.n	800a8fa <scalbnf+0x7e>
 800a8ec:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800a8f0:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800a8f4:	ee00 3a90 	vmov	s1, r3
 800a8f8:	e7cf      	b.n	800a89a <scalbnf+0x1e>
 800a8fa:	f113 0f16 	cmn.w	r3, #22
 800a8fe:	da06      	bge.n	800a90e <scalbnf+0x92>
 800a900:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a904:	4298      	cmp	r0, r3
 800a906:	dcdf      	bgt.n	800a8c8 <scalbnf+0x4c>
 800a908:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 800a934 <scalbnf+0xb8>
 800a90c:	e7de      	b.n	800a8cc <scalbnf+0x50>
 800a90e:	3319      	adds	r3, #25
 800a910:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800a914:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800a918:	eddf 7a07 	vldr	s15, [pc, #28]	; 800a938 <scalbnf+0xbc>
 800a91c:	ee07 3a10 	vmov	s14, r3
 800a920:	ee67 0a27 	vmul.f32	s1, s14, s15
 800a924:	e7b9      	b.n	800a89a <scalbnf+0x1e>
 800a926:	bf00      	nop
 800a928:	ffff3cb0 	.word	0xffff3cb0
 800a92c:	4c000000 	.word	0x4c000000
 800a930:	7149f2ca 	.word	0x7149f2ca
 800a934:	0da24260 	.word	0x0da24260
 800a938:	33000000 	.word	0x33000000

0800a93c <copysignf>:
 800a93c:	ee10 3a10 	vmov	r3, s0
 800a940:	ee10 2a90 	vmov	r2, s1
 800a944:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a948:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800a94c:	4313      	orrs	r3, r2
 800a94e:	ee00 3a10 	vmov	s0, r3
 800a952:	4770      	bx	lr

0800a954 <_init>:
 800a954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a956:	bf00      	nop
 800a958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a95a:	bc08      	pop	{r3}
 800a95c:	469e      	mov	lr, r3
 800a95e:	4770      	bx	lr

0800a960 <_fini>:
 800a960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a962:	bf00      	nop
 800a964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a966:	bc08      	pop	{r3}
 800a968:	469e      	mov	lr, r3
 800a96a:	4770      	bx	lr
