
BLDCDriver_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a74  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006a8  08009c00  08009c00  00019c00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a2a8  0800a2a8  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a2a8  0800a2a8  0001a2a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a2b0  0800a2b0  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a2b0  0800a2b0  0001a2b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a2b4  0800a2b4  0001a2b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800a2b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008d8  200001e8  0800a4a0  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ac0  0800a4a0  00020ac0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018c1a  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000039e1  00000000  00000000  00038e32  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012e0  00000000  00000000  0003c818  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001110  00000000  00000000  0003daf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023944  00000000  00000000  0003ec08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001265f  00000000  00000000  0006254c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c78e7  00000000  00000000  00074bab  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013c492  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c1c  00000000  00000000  0013c510  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001e8 	.word	0x200001e8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009be4 	.word	0x08009be4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001ec 	.word	0x200001ec
 80001c4:	08009be4 	.word	0x08009be4

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2f>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b08:	bf24      	itt	cs
 8000b0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b12:	d90d      	bls.n	8000b30 <__aeabi_d2f+0x30>
 8000b14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b34:	d121      	bne.n	8000b7a <__aeabi_d2f+0x7a>
 8000b36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3a:	bfbc      	itt	lt
 8000b3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	4770      	bxlt	lr
 8000b42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4a:	f1c2 0218 	rsb	r2, r2, #24
 8000b4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b56:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5a:	bf18      	it	ne
 8000b5c:	f040 0001 	orrne.w	r0, r0, #1
 8000b60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b6c:	ea40 000c 	orr.w	r0, r0, ip
 8000b70:	fa23 f302 	lsr.w	r3, r3, r2
 8000b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b78:	e7cc      	b.n	8000b14 <__aeabi_d2f+0x14>
 8000b7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7e:	d107      	bne.n	8000b90 <__aeabi_d2f+0x90>
 8000b80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b84:	bf1e      	ittt	ne
 8000b86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b8e:	4770      	bxne	lr
 8000b90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb4:	f000 b972 	b.w	8000e9c <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f806 	bl	8000bd0 <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__udivmoddi4>:
 8000bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd4:	9e08      	ldr	r6, [sp, #32]
 8000bd6:	4604      	mov	r4, r0
 8000bd8:	4688      	mov	r8, r1
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d14b      	bne.n	8000c76 <__udivmoddi4+0xa6>
 8000bde:	428a      	cmp	r2, r1
 8000be0:	4615      	mov	r5, r2
 8000be2:	d967      	bls.n	8000cb4 <__udivmoddi4+0xe4>
 8000be4:	fab2 f282 	clz	r2, r2
 8000be8:	b14a      	cbz	r2, 8000bfe <__udivmoddi4+0x2e>
 8000bea:	f1c2 0720 	rsb	r7, r2, #32
 8000bee:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf2:	fa20 f707 	lsr.w	r7, r0, r7
 8000bf6:	4095      	lsls	r5, r2
 8000bf8:	ea47 0803 	orr.w	r8, r7, r3
 8000bfc:	4094      	lsls	r4, r2
 8000bfe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c02:	0c23      	lsrs	r3, r4, #16
 8000c04:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c08:	fa1f fc85 	uxth.w	ip, r5
 8000c0c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c10:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c14:	fb07 f10c 	mul.w	r1, r7, ip
 8000c18:	4299      	cmp	r1, r3
 8000c1a:	d909      	bls.n	8000c30 <__udivmoddi4+0x60>
 8000c1c:	18eb      	adds	r3, r5, r3
 8000c1e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c22:	f080 811b 	bcs.w	8000e5c <__udivmoddi4+0x28c>
 8000c26:	4299      	cmp	r1, r3
 8000c28:	f240 8118 	bls.w	8000e5c <__udivmoddi4+0x28c>
 8000c2c:	3f02      	subs	r7, #2
 8000c2e:	442b      	add	r3, r5
 8000c30:	1a5b      	subs	r3, r3, r1
 8000c32:	b2a4      	uxth	r4, r4
 8000c34:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c38:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c3c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c40:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c44:	45a4      	cmp	ip, r4
 8000c46:	d909      	bls.n	8000c5c <__udivmoddi4+0x8c>
 8000c48:	192c      	adds	r4, r5, r4
 8000c4a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c4e:	f080 8107 	bcs.w	8000e60 <__udivmoddi4+0x290>
 8000c52:	45a4      	cmp	ip, r4
 8000c54:	f240 8104 	bls.w	8000e60 <__udivmoddi4+0x290>
 8000c58:	3802      	subs	r0, #2
 8000c5a:	442c      	add	r4, r5
 8000c5c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c60:	eba4 040c 	sub.w	r4, r4, ip
 8000c64:	2700      	movs	r7, #0
 8000c66:	b11e      	cbz	r6, 8000c70 <__udivmoddi4+0xa0>
 8000c68:	40d4      	lsrs	r4, r2
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	e9c6 4300 	strd	r4, r3, [r6]
 8000c70:	4639      	mov	r1, r7
 8000c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c76:	428b      	cmp	r3, r1
 8000c78:	d909      	bls.n	8000c8e <__udivmoddi4+0xbe>
 8000c7a:	2e00      	cmp	r6, #0
 8000c7c:	f000 80eb 	beq.w	8000e56 <__udivmoddi4+0x286>
 8000c80:	2700      	movs	r7, #0
 8000c82:	e9c6 0100 	strd	r0, r1, [r6]
 8000c86:	4638      	mov	r0, r7
 8000c88:	4639      	mov	r1, r7
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	fab3 f783 	clz	r7, r3
 8000c92:	2f00      	cmp	r7, #0
 8000c94:	d147      	bne.n	8000d26 <__udivmoddi4+0x156>
 8000c96:	428b      	cmp	r3, r1
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xd0>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 80fa 	bhi.w	8000e94 <__udivmoddi4+0x2c4>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4698      	mov	r8, r3
 8000caa:	2e00      	cmp	r6, #0
 8000cac:	d0e0      	beq.n	8000c70 <__udivmoddi4+0xa0>
 8000cae:	e9c6 4800 	strd	r4, r8, [r6]
 8000cb2:	e7dd      	b.n	8000c70 <__udivmoddi4+0xa0>
 8000cb4:	b902      	cbnz	r2, 8000cb8 <__udivmoddi4+0xe8>
 8000cb6:	deff      	udf	#255	; 0xff
 8000cb8:	fab2 f282 	clz	r2, r2
 8000cbc:	2a00      	cmp	r2, #0
 8000cbe:	f040 808f 	bne.w	8000de0 <__udivmoddi4+0x210>
 8000cc2:	1b49      	subs	r1, r1, r5
 8000cc4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cc8:	fa1f f885 	uxth.w	r8, r5
 8000ccc:	2701      	movs	r7, #1
 8000cce:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cd2:	0c23      	lsrs	r3, r4, #16
 8000cd4:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cd8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cdc:	fb08 f10c 	mul.w	r1, r8, ip
 8000ce0:	4299      	cmp	r1, r3
 8000ce2:	d907      	bls.n	8000cf4 <__udivmoddi4+0x124>
 8000ce4:	18eb      	adds	r3, r5, r3
 8000ce6:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x122>
 8000cec:	4299      	cmp	r1, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2bc>
 8000cf2:	4684      	mov	ip, r0
 8000cf4:	1a59      	subs	r1, r3, r1
 8000cf6:	b2a3      	uxth	r3, r4
 8000cf8:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cfc:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d00:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d04:	fb08 f800 	mul.w	r8, r8, r0
 8000d08:	45a0      	cmp	r8, r4
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x14c>
 8000d0c:	192c      	adds	r4, r5, r4
 8000d0e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x14a>
 8000d14:	45a0      	cmp	r8, r4
 8000d16:	f200 80b6 	bhi.w	8000e86 <__udivmoddi4+0x2b6>
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	eba4 0408 	sub.w	r4, r4, r8
 8000d20:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d24:	e79f      	b.n	8000c66 <__udivmoddi4+0x96>
 8000d26:	f1c7 0c20 	rsb	ip, r7, #32
 8000d2a:	40bb      	lsls	r3, r7
 8000d2c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d30:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d34:	fa01 f407 	lsl.w	r4, r1, r7
 8000d38:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d3c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d40:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d44:	4325      	orrs	r5, r4
 8000d46:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d4a:	0c2c      	lsrs	r4, r5, #16
 8000d4c:	fb08 3319 	mls	r3, r8, r9, r3
 8000d50:	fa1f fa8e 	uxth.w	sl, lr
 8000d54:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d58:	fb09 f40a 	mul.w	r4, r9, sl
 8000d5c:	429c      	cmp	r4, r3
 8000d5e:	fa02 f207 	lsl.w	r2, r2, r7
 8000d62:	fa00 f107 	lsl.w	r1, r0, r7
 8000d66:	d90b      	bls.n	8000d80 <__udivmoddi4+0x1b0>
 8000d68:	eb1e 0303 	adds.w	r3, lr, r3
 8000d6c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d70:	f080 8087 	bcs.w	8000e82 <__udivmoddi4+0x2b2>
 8000d74:	429c      	cmp	r4, r3
 8000d76:	f240 8084 	bls.w	8000e82 <__udivmoddi4+0x2b2>
 8000d7a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d7e:	4473      	add	r3, lr
 8000d80:	1b1b      	subs	r3, r3, r4
 8000d82:	b2ad      	uxth	r5, r5
 8000d84:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d88:	fb08 3310 	mls	r3, r8, r0, r3
 8000d8c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d90:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d94:	45a2      	cmp	sl, r4
 8000d96:	d908      	bls.n	8000daa <__udivmoddi4+0x1da>
 8000d98:	eb1e 0404 	adds.w	r4, lr, r4
 8000d9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da0:	d26b      	bcs.n	8000e7a <__udivmoddi4+0x2aa>
 8000da2:	45a2      	cmp	sl, r4
 8000da4:	d969      	bls.n	8000e7a <__udivmoddi4+0x2aa>
 8000da6:	3802      	subs	r0, #2
 8000da8:	4474      	add	r4, lr
 8000daa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dae:	fba0 8902 	umull	r8, r9, r0, r2
 8000db2:	eba4 040a 	sub.w	r4, r4, sl
 8000db6:	454c      	cmp	r4, r9
 8000db8:	46c2      	mov	sl, r8
 8000dba:	464b      	mov	r3, r9
 8000dbc:	d354      	bcc.n	8000e68 <__udivmoddi4+0x298>
 8000dbe:	d051      	beq.n	8000e64 <__udivmoddi4+0x294>
 8000dc0:	2e00      	cmp	r6, #0
 8000dc2:	d069      	beq.n	8000e98 <__udivmoddi4+0x2c8>
 8000dc4:	ebb1 050a 	subs.w	r5, r1, sl
 8000dc8:	eb64 0403 	sbc.w	r4, r4, r3
 8000dcc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dd0:	40fd      	lsrs	r5, r7
 8000dd2:	40fc      	lsrs	r4, r7
 8000dd4:	ea4c 0505 	orr.w	r5, ip, r5
 8000dd8:	e9c6 5400 	strd	r5, r4, [r6]
 8000ddc:	2700      	movs	r7, #0
 8000dde:	e747      	b.n	8000c70 <__udivmoddi4+0xa0>
 8000de0:	f1c2 0320 	rsb	r3, r2, #32
 8000de4:	fa20 f703 	lsr.w	r7, r0, r3
 8000de8:	4095      	lsls	r5, r2
 8000dea:	fa01 f002 	lsl.w	r0, r1, r2
 8000dee:	fa21 f303 	lsr.w	r3, r1, r3
 8000df2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000df6:	4338      	orrs	r0, r7
 8000df8:	0c01      	lsrs	r1, r0, #16
 8000dfa:	fbb3 f7fe 	udiv	r7, r3, lr
 8000dfe:	fa1f f885 	uxth.w	r8, r5
 8000e02:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e06:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e0a:	fb07 f308 	mul.w	r3, r7, r8
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	fa04 f402 	lsl.w	r4, r4, r2
 8000e14:	d907      	bls.n	8000e26 <__udivmoddi4+0x256>
 8000e16:	1869      	adds	r1, r5, r1
 8000e18:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e1c:	d22f      	bcs.n	8000e7e <__udivmoddi4+0x2ae>
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d92d      	bls.n	8000e7e <__udivmoddi4+0x2ae>
 8000e22:	3f02      	subs	r7, #2
 8000e24:	4429      	add	r1, r5
 8000e26:	1acb      	subs	r3, r1, r3
 8000e28:	b281      	uxth	r1, r0
 8000e2a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e32:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e36:	fb00 f308 	mul.w	r3, r0, r8
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d907      	bls.n	8000e4e <__udivmoddi4+0x27e>
 8000e3e:	1869      	adds	r1, r5, r1
 8000e40:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e44:	d217      	bcs.n	8000e76 <__udivmoddi4+0x2a6>
 8000e46:	428b      	cmp	r3, r1
 8000e48:	d915      	bls.n	8000e76 <__udivmoddi4+0x2a6>
 8000e4a:	3802      	subs	r0, #2
 8000e4c:	4429      	add	r1, r5
 8000e4e:	1ac9      	subs	r1, r1, r3
 8000e50:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e54:	e73b      	b.n	8000cce <__udivmoddi4+0xfe>
 8000e56:	4637      	mov	r7, r6
 8000e58:	4630      	mov	r0, r6
 8000e5a:	e709      	b.n	8000c70 <__udivmoddi4+0xa0>
 8000e5c:	4607      	mov	r7, r0
 8000e5e:	e6e7      	b.n	8000c30 <__udivmoddi4+0x60>
 8000e60:	4618      	mov	r0, r3
 8000e62:	e6fb      	b.n	8000c5c <__udivmoddi4+0x8c>
 8000e64:	4541      	cmp	r1, r8
 8000e66:	d2ab      	bcs.n	8000dc0 <__udivmoddi4+0x1f0>
 8000e68:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e6c:	eb69 020e 	sbc.w	r2, r9, lr
 8000e70:	3801      	subs	r0, #1
 8000e72:	4613      	mov	r3, r2
 8000e74:	e7a4      	b.n	8000dc0 <__udivmoddi4+0x1f0>
 8000e76:	4660      	mov	r0, ip
 8000e78:	e7e9      	b.n	8000e4e <__udivmoddi4+0x27e>
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	e795      	b.n	8000daa <__udivmoddi4+0x1da>
 8000e7e:	4667      	mov	r7, ip
 8000e80:	e7d1      	b.n	8000e26 <__udivmoddi4+0x256>
 8000e82:	4681      	mov	r9, r0
 8000e84:	e77c      	b.n	8000d80 <__udivmoddi4+0x1b0>
 8000e86:	3802      	subs	r0, #2
 8000e88:	442c      	add	r4, r5
 8000e8a:	e747      	b.n	8000d1c <__udivmoddi4+0x14c>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	442b      	add	r3, r5
 8000e92:	e72f      	b.n	8000cf4 <__udivmoddi4+0x124>
 8000e94:	4638      	mov	r0, r7
 8000e96:	e708      	b.n	8000caa <__udivmoddi4+0xda>
 8000e98:	4637      	mov	r7, r6
 8000e9a:	e6e9      	b.n	8000c70 <__udivmoddi4+0xa0>

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ea6:	463b      	mov	r3, r7
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000eb2:	4b30      	ldr	r3, [pc, #192]	; (8000f74 <MX_ADC1_Init+0xd4>)
 8000eb4:	4a30      	ldr	r2, [pc, #192]	; (8000f78 <MX_ADC1_Init+0xd8>)
 8000eb6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000eb8:	4b2e      	ldr	r3, [pc, #184]	; (8000f74 <MX_ADC1_Init+0xd4>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ebe:	4b2d      	ldr	r3, [pc, #180]	; (8000f74 <MX_ADC1_Init+0xd4>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000ec4:	4b2b      	ldr	r3, [pc, #172]	; (8000f74 <MX_ADC1_Init+0xd4>)
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000eca:	4b2a      	ldr	r3, [pc, #168]	; (8000f74 <MX_ADC1_Init+0xd4>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ed0:	4b28      	ldr	r3, [pc, #160]	; (8000f74 <MX_ADC1_Init+0xd4>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000ed8:	4b26      	ldr	r3, [pc, #152]	; (8000f74 <MX_ADC1_Init+0xd4>)
 8000eda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ede:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000ee0:	4b24      	ldr	r3, [pc, #144]	; (8000f74 <MX_ADC1_Init+0xd4>)
 8000ee2:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000ee6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ee8:	4b22      	ldr	r3, [pc, #136]	; (8000f74 <MX_ADC1_Init+0xd4>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000eee:	4b21      	ldr	r3, [pc, #132]	; (8000f74 <MX_ADC1_Init+0xd4>)
 8000ef0:	2203      	movs	r2, #3
 8000ef2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000ef4:	4b1f      	ldr	r3, [pc, #124]	; (8000f74 <MX_ADC1_Init+0xd4>)
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000efc:	4b1d      	ldr	r3, [pc, #116]	; (8000f74 <MX_ADC1_Init+0xd4>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f02:	481c      	ldr	r0, [pc, #112]	; (8000f74 <MX_ADC1_Init+0xd4>)
 8000f04:	f001 fdb4 	bl	8002a70 <HAL_ADC_Init>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000f0e:	f000 ff01 	bl	8001d14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000f12:	230c      	movs	r3, #12
 8000f14:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f16:	2301      	movs	r3, #1
 8000f18:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f1e:	463b      	mov	r3, r7
 8000f20:	4619      	mov	r1, r3
 8000f22:	4814      	ldr	r0, [pc, #80]	; (8000f74 <MX_ADC1_Init+0xd4>)
 8000f24:	f001 ff46 	bl	8002db4 <HAL_ADC_ConfigChannel>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000f2e:	f000 fef1 	bl	8001d14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000f32:	230b      	movs	r3, #11
 8000f34:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000f36:	2302      	movs	r3, #2
 8000f38:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f3a:	463b      	mov	r3, r7
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	480d      	ldr	r0, [pc, #52]	; (8000f74 <MX_ADC1_Init+0xd4>)
 8000f40:	f001 ff38 	bl	8002db4 <HAL_ADC_ConfigChannel>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000f4a:	f000 fee3 	bl	8001d14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000f4e:	230a      	movs	r3, #10
 8000f50:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000f52:	2303      	movs	r3, #3
 8000f54:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f56:	463b      	mov	r3, r7
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4806      	ldr	r0, [pc, #24]	; (8000f74 <MX_ADC1_Init+0xd4>)
 8000f5c:	f001 ff2a 	bl	8002db4 <HAL_ADC_ConfigChannel>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 8000f66:	f000 fed5 	bl	8001d14 <Error_Handler>
  }

}
 8000f6a:	bf00      	nop
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	20000268 	.word	0x20000268
 8000f78:	40012000 	.word	0x40012000

08000f7c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f82:	463b      	mov	r3, r7
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc2.Instance = ADC2;
 8000f8e:	4b21      	ldr	r3, [pc, #132]	; (8001014 <MX_ADC2_Init+0x98>)
 8000f90:	4a21      	ldr	r2, [pc, #132]	; (8001018 <MX_ADC2_Init+0x9c>)
 8000f92:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000f94:	4b1f      	ldr	r3, [pc, #124]	; (8001014 <MX_ADC2_Init+0x98>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000f9a:	4b1e      	ldr	r3, [pc, #120]	; (8001014 <MX_ADC2_Init+0x98>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000fa0:	4b1c      	ldr	r3, [pc, #112]	; (8001014 <MX_ADC2_Init+0x98>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000fa6:	4b1b      	ldr	r3, [pc, #108]	; (8001014 <MX_ADC2_Init+0x98>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000fac:	4b19      	ldr	r3, [pc, #100]	; (8001014 <MX_ADC2_Init+0x98>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fb4:	4b17      	ldr	r3, [pc, #92]	; (8001014 <MX_ADC2_Init+0x98>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fba:	4b16      	ldr	r3, [pc, #88]	; (8001014 <MX_ADC2_Init+0x98>)
 8000fbc:	4a17      	ldr	r2, [pc, #92]	; (800101c <MX_ADC2_Init+0xa0>)
 8000fbe:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fc0:	4b14      	ldr	r3, [pc, #80]	; (8001014 <MX_ADC2_Init+0x98>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000fc6:	4b13      	ldr	r3, [pc, #76]	; (8001014 <MX_ADC2_Init+0x98>)
 8000fc8:	2201      	movs	r2, #1
 8000fca:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000fcc:	4b11      	ldr	r3, [pc, #68]	; (8001014 <MX_ADC2_Init+0x98>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fd4:	4b0f      	ldr	r3, [pc, #60]	; (8001014 <MX_ADC2_Init+0x98>)
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000fda:	480e      	ldr	r0, [pc, #56]	; (8001014 <MX_ADC2_Init+0x98>)
 8000fdc:	f001 fd48 	bl	8002a70 <HAL_ADC_Init>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8000fe6:	f000 fe95 	bl	8001d14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000fea:	230d      	movs	r3, #13
 8000fec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000ff6:	463b      	mov	r3, r7
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4806      	ldr	r0, [pc, #24]	; (8001014 <MX_ADC2_Init+0x98>)
 8000ffc:	f001 feda 	bl	8002db4 <HAL_ADC_ConfigChannel>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8001006:	f000 fe85 	bl	8001d14 <Error_Handler>
  }

}
 800100a:	bf00      	nop
 800100c:	3710      	adds	r7, #16
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000220 	.word	0x20000220
 8001018:	40012100 	.word	0x40012100
 800101c:	0f000001 	.word	0x0f000001

08001020 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b08c      	sub	sp, #48	; 0x30
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001028:	f107 031c 	add.w	r3, r7, #28
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a5b      	ldr	r2, [pc, #364]	; (80011ac <HAL_ADC_MspInit+0x18c>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d160      	bne.n	8001104 <HAL_ADC_MspInit+0xe4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	61bb      	str	r3, [r7, #24]
 8001046:	4b5a      	ldr	r3, [pc, #360]	; (80011b0 <HAL_ADC_MspInit+0x190>)
 8001048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104a:	4a59      	ldr	r2, [pc, #356]	; (80011b0 <HAL_ADC_MspInit+0x190>)
 800104c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001050:	6453      	str	r3, [r2, #68]	; 0x44
 8001052:	4b57      	ldr	r3, [pc, #348]	; (80011b0 <HAL_ADC_MspInit+0x190>)
 8001054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800105a:	61bb      	str	r3, [r7, #24]
 800105c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	617b      	str	r3, [r7, #20]
 8001062:	4b53      	ldr	r3, [pc, #332]	; (80011b0 <HAL_ADC_MspInit+0x190>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	4a52      	ldr	r2, [pc, #328]	; (80011b0 <HAL_ADC_MspInit+0x190>)
 8001068:	f043 0304 	orr.w	r3, r3, #4
 800106c:	6313      	str	r3, [r2, #48]	; 0x30
 800106e:	4b50      	ldr	r3, [pc, #320]	; (80011b0 <HAL_ADC_MspInit+0x190>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	f003 0304 	and.w	r3, r3, #4
 8001076:	617b      	str	r3, [r7, #20]
 8001078:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration    
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800107a:	2307      	movs	r3, #7
 800107c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800107e:	2303      	movs	r3, #3
 8001080:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001086:	f107 031c 	add.w	r3, r7, #28
 800108a:	4619      	mov	r1, r3
 800108c:	4849      	ldr	r0, [pc, #292]	; (80011b4 <HAL_ADC_MspInit+0x194>)
 800108e:	f002 fd5b 	bl	8003b48 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001092:	4b49      	ldr	r3, [pc, #292]	; (80011b8 <HAL_ADC_MspInit+0x198>)
 8001094:	4a49      	ldr	r2, [pc, #292]	; (80011bc <HAL_ADC_MspInit+0x19c>)
 8001096:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001098:	4b47      	ldr	r3, [pc, #284]	; (80011b8 <HAL_ADC_MspInit+0x198>)
 800109a:	2200      	movs	r2, #0
 800109c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800109e:	4b46      	ldr	r3, [pc, #280]	; (80011b8 <HAL_ADC_MspInit+0x198>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010a4:	4b44      	ldr	r3, [pc, #272]	; (80011b8 <HAL_ADC_MspInit+0x198>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80010aa:	4b43      	ldr	r3, [pc, #268]	; (80011b8 <HAL_ADC_MspInit+0x198>)
 80010ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010b0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010b2:	4b41      	ldr	r3, [pc, #260]	; (80011b8 <HAL_ADC_MspInit+0x198>)
 80010b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010b8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010ba:	4b3f      	ldr	r3, [pc, #252]	; (80011b8 <HAL_ADC_MspInit+0x198>)
 80010bc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010c0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80010c2:	4b3d      	ldr	r3, [pc, #244]	; (80011b8 <HAL_ADC_MspInit+0x198>)
 80010c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010c8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80010ca:	4b3b      	ldr	r3, [pc, #236]	; (80011b8 <HAL_ADC_MspInit+0x198>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010d0:	4b39      	ldr	r3, [pc, #228]	; (80011b8 <HAL_ADC_MspInit+0x198>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80010d6:	4838      	ldr	r0, [pc, #224]	; (80011b8 <HAL_ADC_MspInit+0x198>)
 80010d8:	f002 f9a6 	bl	8003428 <HAL_DMA_Init>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80010e2:	f000 fe17 	bl	8001d14 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a33      	ldr	r2, [pc, #204]	; (80011b8 <HAL_ADC_MspInit+0x198>)
 80010ea:	639a      	str	r2, [r3, #56]	; 0x38
 80010ec:	4a32      	ldr	r2, [pc, #200]	; (80011b8 <HAL_ADC_MspInit+0x198>)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80010f2:	2200      	movs	r2, #0
 80010f4:	2100      	movs	r1, #0
 80010f6:	2012      	movs	r0, #18
 80010f8:	f002 f95f 	bl	80033ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80010fc:	2012      	movs	r0, #18
 80010fe:	f002 f978 	bl	80033f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001102:	e04e      	b.n	80011a2 <HAL_ADC_MspInit+0x182>
  else if(adcHandle->Instance==ADC2)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a2d      	ldr	r2, [pc, #180]	; (80011c0 <HAL_ADC_MspInit+0x1a0>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d149      	bne.n	80011a2 <HAL_ADC_MspInit+0x182>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	613b      	str	r3, [r7, #16]
 8001112:	4b27      	ldr	r3, [pc, #156]	; (80011b0 <HAL_ADC_MspInit+0x190>)
 8001114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001116:	4a26      	ldr	r2, [pc, #152]	; (80011b0 <HAL_ADC_MspInit+0x190>)
 8001118:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800111c:	6453      	str	r3, [r2, #68]	; 0x44
 800111e:	4b24      	ldr	r3, [pc, #144]	; (80011b0 <HAL_ADC_MspInit+0x190>)
 8001120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001122:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001126:	613b      	str	r3, [r7, #16]
 8001128:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	60fb      	str	r3, [r7, #12]
 800112e:	4b20      	ldr	r3, [pc, #128]	; (80011b0 <HAL_ADC_MspInit+0x190>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	4a1f      	ldr	r2, [pc, #124]	; (80011b0 <HAL_ADC_MspInit+0x190>)
 8001134:	f043 0304 	orr.w	r3, r3, #4
 8001138:	6313      	str	r3, [r2, #48]	; 0x30
 800113a:	4b1d      	ldr	r3, [pc, #116]	; (80011b0 <HAL_ADC_MspInit+0x190>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	f003 0304 	and.w	r3, r3, #4
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	60bb      	str	r3, [r7, #8]
 800114a:	4b19      	ldr	r3, [pc, #100]	; (80011b0 <HAL_ADC_MspInit+0x190>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	4a18      	ldr	r2, [pc, #96]	; (80011b0 <HAL_ADC_MspInit+0x190>)
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	6313      	str	r3, [r2, #48]	; 0x30
 8001156:	4b16      	ldr	r3, [pc, #88]	; (80011b0 <HAL_ADC_MspInit+0x190>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	60bb      	str	r3, [r7, #8]
 8001160:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001162:	2308      	movs	r3, #8
 8001164:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001166:	2303      	movs	r3, #3
 8001168:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800116e:	f107 031c 	add.w	r3, r7, #28
 8001172:	4619      	mov	r1, r3
 8001174:	480f      	ldr	r0, [pc, #60]	; (80011b4 <HAL_ADC_MspInit+0x194>)
 8001176:	f002 fce7 	bl	8003b48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800117a:	2307      	movs	r3, #7
 800117c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800117e:	2303      	movs	r3, #3
 8001180:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001186:	f107 031c 	add.w	r3, r7, #28
 800118a:	4619      	mov	r1, r3
 800118c:	480d      	ldr	r0, [pc, #52]	; (80011c4 <HAL_ADC_MspInit+0x1a4>)
 800118e:	f002 fcdb 	bl	8003b48 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001192:	2200      	movs	r2, #0
 8001194:	2100      	movs	r1, #0
 8001196:	2012      	movs	r0, #18
 8001198:	f002 f90f 	bl	80033ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800119c:	2012      	movs	r0, #18
 800119e:	f002 f928 	bl	80033f2 <HAL_NVIC_EnableIRQ>
}
 80011a2:	bf00      	nop
 80011a4:	3730      	adds	r7, #48	; 0x30
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40012000 	.word	0x40012000
 80011b0:	40023800 	.word	0x40023800
 80011b4:	40020800 	.word	0x40020800
 80011b8:	200002b0 	.word	0x200002b0
 80011bc:	40026410 	.word	0x40026410
 80011c0:	40012100 	.word	0x40012100
 80011c4:	40020000 	.word	0x40020000

080011c8 <AS5147Read>:
/*
 * Read Register
 * @param	address : AS5147 regigster address
 * @return	16 bit data
 */
uint16_t AS5147Read(uint16_t address) {
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b086      	sub	sp, #24
 80011cc:	af02      	add	r7, sp, #8
 80011ce:	4603      	mov	r3, r0
 80011d0:	80fb      	strh	r3, [r7, #6]
	uint8_t txdata[2] = {((AS5147AddParityBit(address | 0x4000) & 0xFF00) >> 8), (AS5147AddParityBit(address | 0x4000) & 0x00FF)};
 80011d2:	88fb      	ldrh	r3, [r7, #6]
 80011d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011d8:	b29b      	uxth	r3, r3
 80011da:	4618      	mov	r0, r3
 80011dc:	f000 f844 	bl	8001268 <AS5147AddParityBit>
 80011e0:	4603      	mov	r3, r0
 80011e2:	121b      	asrs	r3, r3, #8
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	733b      	strb	r3, [r7, #12]
 80011e8:	88fb      	ldrh	r3, [r7, #6]
 80011ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	4618      	mov	r0, r3
 80011f2:	f000 f839 	bl	8001268 <AS5147AddParityBit>
 80011f6:	4603      	mov	r3, r0
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	737b      	strb	r3, [r7, #13]
	uint8_t rxdata[2] = {};
 80011fc:	2300      	movs	r3, #0
 80011fe:	813b      	strh	r3, [r7, #8]
	AS5147Select();
 8001200:	f000 f81a 	bl	8001238 <AS5147Select>
	HAL_SPI_TransmitReceive(&AS5147_SPI_HANDLER, txdata, rxdata, 2, 1);
 8001204:	f107 0208 	add.w	r2, r7, #8
 8001208:	f107 010c 	add.w	r1, r7, #12
 800120c:	2301      	movs	r3, #1
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	2302      	movs	r3, #2
 8001212:	4808      	ldr	r0, [pc, #32]	; (8001234 <AS5147Read+0x6c>)
 8001214:	f003 fb1e 	bl	8004854 <HAL_SPI_TransmitReceive>
	AS5147Deselect();
 8001218:	f000 f81a 	bl	8001250 <AS5147Deselect>
	return ((rxdata[0] << 8) | rxdata[1]);
 800121c:	7a3b      	ldrb	r3, [r7, #8]
 800121e:	021b      	lsls	r3, r3, #8
 8001220:	b21a      	sxth	r2, r3
 8001222:	7a7b      	ldrb	r3, [r7, #9]
 8001224:	b21b      	sxth	r3, r3
 8001226:	4313      	orrs	r3, r2
 8001228:	b21b      	sxth	r3, r3
 800122a:	b29b      	uxth	r3, r3
}
 800122c:	4618      	mov	r0, r3
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	2000077c 	.word	0x2000077c

08001238 <AS5147Select>:
/*
 * Select
 * @param
 * @return
 */
static void AS5147Select(void) {
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(AS5147_CS_PORT, AS5147_CS_PIN, GPIO_PIN_RESET);
 800123c:	2200      	movs	r2, #0
 800123e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001242:	4802      	ldr	r0, [pc, #8]	; (800124c <AS5147Select+0x14>)
 8001244:	f002 fe32 	bl	8003eac <HAL_GPIO_WritePin>
}
 8001248:	bf00      	nop
 800124a:	bd80      	pop	{r7, pc}
 800124c:	40020000 	.word	0x40020000

08001250 <AS5147Deselect>:
/*
 * Deselect
 * @param
 * @return
 */
static void AS5147Deselect(void) {
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(AS5147_CS_PORT, AS5147_CS_PIN, GPIO_PIN_SET);
 8001254:	2201      	movs	r2, #1
 8001256:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800125a:	4802      	ldr	r0, [pc, #8]	; (8001264 <AS5147Deselect+0x14>)
 800125c:	f002 fe26 	bl	8003eac <HAL_GPIO_WritePin>
}
 8001260:	bf00      	nop
 8001262:	bd80      	pop	{r7, pc}
 8001264:	40020000 	.word	0x40020000

08001268 <AS5147AddParityBit>:
/*
 * Parity Calculation
 * @param	raw_data
 * @return	parity bit + raw_data
 */
static uint16_t AS5147AddParityBit(uint16_t raw_data) {
 8001268:	b480      	push	{r7}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	80fb      	strh	r3, [r7, #6]
	uint16_t parity = raw_data;
 8001272:	88fb      	ldrh	r3, [r7, #6]
 8001274:	81fb      	strh	r3, [r7, #14]
	parity ^= parity >> 8;
 8001276:	89fb      	ldrh	r3, [r7, #14]
 8001278:	0a1b      	lsrs	r3, r3, #8
 800127a:	b29a      	uxth	r2, r3
 800127c:	89fb      	ldrh	r3, [r7, #14]
 800127e:	4053      	eors	r3, r2
 8001280:	81fb      	strh	r3, [r7, #14]
	parity ^= parity >> 4;
 8001282:	89fb      	ldrh	r3, [r7, #14]
 8001284:	091b      	lsrs	r3, r3, #4
 8001286:	b29a      	uxth	r2, r3
 8001288:	89fb      	ldrh	r3, [r7, #14]
 800128a:	4053      	eors	r3, r2
 800128c:	81fb      	strh	r3, [r7, #14]
	parity ^= parity >> 2;
 800128e:	89fb      	ldrh	r3, [r7, #14]
 8001290:	089b      	lsrs	r3, r3, #2
 8001292:	b29a      	uxth	r2, r3
 8001294:	89fb      	ldrh	r3, [r7, #14]
 8001296:	4053      	eors	r3, r2
 8001298:	81fb      	strh	r3, [r7, #14]
	parity ^= parity >> 1;
 800129a:	89fb      	ldrh	r3, [r7, #14]
 800129c:	085b      	lsrs	r3, r3, #1
 800129e:	b29a      	uxth	r2, r3
 80012a0:	89fb      	ldrh	r3, [r7, #14]
 80012a2:	4053      	eors	r3, r2
 80012a4:	81fb      	strh	r3, [r7, #14]

	return (raw_data | ((parity & 0x0001) << 15));
 80012a6:	89fb      	ldrh	r3, [r7, #14]
 80012a8:	03db      	lsls	r3, r3, #15
 80012aa:	b21a      	sxth	r2, r3
 80012ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	b21b      	sxth	r3, r3
 80012b4:	b29b      	uxth	r3, r3
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3714      	adds	r7, #20
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	0000      	movs	r0, r0
 80012c4:	0000      	movs	r0, r0
	...

080012c8 <BLDCVqConstControl>:
#define ADC_CURT_SENSE_BUFFER_SIZE	((uint32_t)3)

//static variables
static uint16_t curt_sense_data[ADC_CURT_SENSE_BUFFER_SIZE] = {};

void BLDCVqConstControl(float vol_d, float vol_q) {
 80012c8:	b5b0      	push	{r4, r5, r7, lr}
 80012ca:	b08c      	sub	sp, #48	; 0x30
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	ed87 0a01 	vstr	s0, [r7, #4]
 80012d2:	edc7 0a00 	vstr	s1, [r7]
    volatile float vol_alpha, vol_beta;

    float theta, sinth, costh;
	uint16_t theta_data;

	theta_data = (AS5147Read(AS5147_ANGLECOM) & 0x3FFF);		//mask lower 14bit
 80012d6:	f643 70ff 	movw	r0, #16383	; 0x3fff
 80012da:	f7ff ff75 	bl	80011c8 <AS5147Read>
 80012de:	4603      	mov	r3, r0
 80012e0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80012e4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	theta = fmodf(((float)theta_data + ((float)0x3FFF / 12) - 361), ((float)0x3FFF / 12)) * ((float)(2 * M_PI * 12) / 0x3FFF);
 80012e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80012e8:	ee07 3a90 	vmov	s15, r3
 80012ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012f0:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8001528 <BLDCVqConstControl+0x260>
 80012f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80012f8:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 800152c <BLDCVqConstControl+0x264>
 80012fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001300:	eddf 0a89 	vldr	s1, [pc, #548]	; 8001528 <BLDCVqConstControl+0x260>
 8001304:	eeb0 0a67 	vmov.f32	s0, s15
 8001308:	f007 fe7c 	bl	8009004 <fmodf>
 800130c:	eeb0 7a40 	vmov.f32	s14, s0
 8001310:	eddf 7a87 	vldr	s15, [pc, #540]	; 8001530 <BLDCVqConstControl+0x268>
 8001314:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001318:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	sinth = sinf(theta);
 800131c:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8001320:	f007 fe2e 	bl	8008f80 <sinf>
 8001324:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
	costh = cosf(theta);
 8001328:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 800132c:	f007 fd96 	bl	8008e5c <cosf>
 8001330:	ed87 0a08 	vstr	s0, [r7, #32]

	//dq -> alpha,beta
	vol_alpha = vol_d * costh - vol_q * sinth;
 8001334:	ed97 7a01 	vldr	s14, [r7, #4]
 8001338:	edd7 7a08 	vldr	s15, [r7, #32]
 800133c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001340:	edd7 6a00 	vldr	s13, [r7]
 8001344:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001348:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800134c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001350:	edc7 7a04 	vstr	s15, [r7, #16]
	vol_beta  = vol_d * sinth + vol_q * costh;
 8001354:	ed97 7a01 	vldr	s14, [r7, #4]
 8001358:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800135c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001360:	edd7 6a00 	vldr	s13, [r7]
 8001364:	edd7 7a08 	vldr	s15, [r7, #32]
 8001368:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800136c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001370:	edc7 7a03 	vstr	s15, [r7, #12]

	//alpha,beta -> UVW
	vol_u = 0.81649658f * vol_alpha;
 8001374:	edd7 7a04 	vldr	s15, [r7, #16]
 8001378:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8001534 <BLDCVqConstControl+0x26c>
 800137c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001380:	edc7 7a07 	vstr	s15, [r7, #28]
    vol_v = -0.40824829 * vol_alpha + 0.707106781 * vol_beta;
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff f88a 	bl	80004a0 <__aeabi_f2d>
 800138c:	a362      	add	r3, pc, #392	; (adr r3, 8001518 <BLDCVqConstControl+0x250>)
 800138e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001392:	f7ff f8dd 	bl	8000550 <__aeabi_dmul>
 8001396:	4603      	mov	r3, r0
 8001398:	460c      	mov	r4, r1
 800139a:	4625      	mov	r5, r4
 800139c:	461c      	mov	r4, r3
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff f87d 	bl	80004a0 <__aeabi_f2d>
 80013a6:	a35e      	add	r3, pc, #376	; (adr r3, 8001520 <BLDCVqConstControl+0x258>)
 80013a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ac:	f7ff f8d0 	bl	8000550 <__aeabi_dmul>
 80013b0:	4602      	mov	r2, r0
 80013b2:	460b      	mov	r3, r1
 80013b4:	4620      	mov	r0, r4
 80013b6:	4629      	mov	r1, r5
 80013b8:	f7fe ff14 	bl	80001e4 <__adddf3>
 80013bc:	4603      	mov	r3, r0
 80013be:	460c      	mov	r4, r1
 80013c0:	4618      	mov	r0, r3
 80013c2:	4621      	mov	r1, r4
 80013c4:	f7ff fb9c 	bl	8000b00 <__aeabi_d2f>
 80013c8:	4603      	mov	r3, r0
 80013ca:	61bb      	str	r3, [r7, #24]
    vol_w = -0.40824829 * vol_alpha - 0.707106781 * vol_beta;
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff f866 	bl	80004a0 <__aeabi_f2d>
 80013d4:	a350      	add	r3, pc, #320	; (adr r3, 8001518 <BLDCVqConstControl+0x250>)
 80013d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013da:	f7ff f8b9 	bl	8000550 <__aeabi_dmul>
 80013de:	4603      	mov	r3, r0
 80013e0:	460c      	mov	r4, r1
 80013e2:	4625      	mov	r5, r4
 80013e4:	461c      	mov	r4, r3
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff f859 	bl	80004a0 <__aeabi_f2d>
 80013ee:	a34c      	add	r3, pc, #304	; (adr r3, 8001520 <BLDCVqConstControl+0x258>)
 80013f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f4:	f7ff f8ac 	bl	8000550 <__aeabi_dmul>
 80013f8:	4602      	mov	r2, r0
 80013fa:	460b      	mov	r3, r1
 80013fc:	4620      	mov	r0, r4
 80013fe:	4629      	mov	r1, r5
 8001400:	f7fe feee 	bl	80001e0 <__aeabi_dsub>
 8001404:	4603      	mov	r3, r0
 8001406:	460c      	mov	r4, r1
 8001408:	4618      	mov	r0, r3
 800140a:	4621      	mov	r1, r4
 800140c:	f7ff fb78 	bl	8000b00 <__aeabi_d2f>
 8001410:	4603      	mov	r3, r0
 8001412:	617b      	str	r3, [r7, #20]
    /*
    vol_u = fmaxf(fminf(1249 - (vol_u + 6.0f) * 624.0f / 12.0f, 1249.0f), 0);
    vol_v = fmaxf(fminf(1249 - (vol_v + 6.0f) * 624.0f / 12.0f, 1249.0f), 0);
    vol_w = fmaxf(fminf(1249 - (vol_w + 6.0f) * 624.0f / 12.0f, 1249.0f), 0);
    */
    vol_u = fmaxf(fminf(624.0f + vol_u * 1249.0f / 12.0f, 1249.0f), 0);
 8001414:	edd7 7a07 	vldr	s15, [r7, #28]
 8001418:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8001538 <BLDCVqConstControl+0x270>
 800141c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001420:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 8001424:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001428:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800153c <BLDCVqConstControl+0x274>
 800142c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001430:	eddf 0a41 	vldr	s1, [pc, #260]	; 8001538 <BLDCVqConstControl+0x270>
 8001434:	eeb0 0a67 	vmov.f32	s0, s15
 8001438:	f007 fd6b 	bl	8008f12 <fminf>
 800143c:	eef0 7a40 	vmov.f32	s15, s0
 8001440:	eddf 0a3f 	vldr	s1, [pc, #252]	; 8001540 <BLDCVqConstControl+0x278>
 8001444:	eeb0 0a67 	vmov.f32	s0, s15
 8001448:	f007 fd48 	bl	8008edc <fmaxf>
 800144c:	eef0 7a40 	vmov.f32	s15, s0
 8001450:	edc7 7a07 	vstr	s15, [r7, #28]
    vol_v = fmaxf(fminf(624.0f + vol_v * 1249.0f / 12.0f, 1249.0f), 0);
 8001454:	edd7 7a06 	vldr	s15, [r7, #24]
 8001458:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8001538 <BLDCVqConstControl+0x270>
 800145c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001460:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 8001464:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001468:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800153c <BLDCVqConstControl+0x274>
 800146c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001470:	eddf 0a31 	vldr	s1, [pc, #196]	; 8001538 <BLDCVqConstControl+0x270>
 8001474:	eeb0 0a67 	vmov.f32	s0, s15
 8001478:	f007 fd4b 	bl	8008f12 <fminf>
 800147c:	eef0 7a40 	vmov.f32	s15, s0
 8001480:	eddf 0a2f 	vldr	s1, [pc, #188]	; 8001540 <BLDCVqConstControl+0x278>
 8001484:	eeb0 0a67 	vmov.f32	s0, s15
 8001488:	f007 fd28 	bl	8008edc <fmaxf>
 800148c:	eef0 7a40 	vmov.f32	s15, s0
 8001490:	edc7 7a06 	vstr	s15, [r7, #24]
    vol_w = fmaxf(fminf(624.0f + vol_w * 1249.0f / 12.0f, 1249.0f), 0);
 8001494:	edd7 7a05 	vldr	s15, [r7, #20]
 8001498:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001538 <BLDCVqConstControl+0x270>
 800149c:	ee27 7a87 	vmul.f32	s14, s15, s14
 80014a0:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 80014a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014a8:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800153c <BLDCVqConstControl+0x274>
 80014ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014b0:	eddf 0a21 	vldr	s1, [pc, #132]	; 8001538 <BLDCVqConstControl+0x270>
 80014b4:	eeb0 0a67 	vmov.f32	s0, s15
 80014b8:	f007 fd2b 	bl	8008f12 <fminf>
 80014bc:	eef0 7a40 	vmov.f32	s15, s0
 80014c0:	eddf 0a1f 	vldr	s1, [pc, #124]	; 8001540 <BLDCVqConstControl+0x278>
 80014c4:	eeb0 0a67 	vmov.f32	s0, s15
 80014c8:	f007 fd08 	bl	8008edc <fmaxf>
 80014cc:	eef0 7a40 	vmov.f32	s15, s0
 80014d0:	edc7 7a05 	vstr	s15, [r7, #20]

//    printf("%f %f %f %f\n", theta, vol_u, vol_v, vol_w);

    //output PWM
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, vol_u);
 80014d4:	edd7 7a07 	vldr	s15, [r7, #28]
 80014d8:	4b1a      	ldr	r3, [pc, #104]	; (8001544 <BLDCVqConstControl+0x27c>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014e0:	ee17 2a90 	vmov	r2, s15
 80014e4:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, vol_v);
 80014e6:	edd7 7a06 	vldr	s15, [r7, #24]
 80014ea:	4b16      	ldr	r3, [pc, #88]	; (8001544 <BLDCVqConstControl+0x27c>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014f2:	ee17 2a90 	vmov	r2, s15
 80014f6:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, vol_w);
 80014f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80014fc:	4b11      	ldr	r3, [pc, #68]	; (8001544 <BLDCVqConstControl+0x27c>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001504:	ee17 2a90 	vmov	r2, s15
 8001508:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800150a:	bf00      	nop
 800150c:	3730      	adds	r7, #48	; 0x30
 800150e:	46bd      	mov	sp, r7
 8001510:	bdb0      	pop	{r4, r5, r7, pc}
 8001512:	bf00      	nop
 8001514:	f3af 8000 	nop.w
 8001518:	6f8caac9 	.word	0x6f8caac9
 800151c:	bfda20bd 	.word	0xbfda20bd
 8001520:	6665983e 	.word	0x6665983e
 8001524:	3fe6a09e 	.word	0x3fe6a09e
 8001528:	44aaa800 	.word	0x44aaa800
 800152c:	43b48000 	.word	0x43b48000
 8001530:	3b96ce3f 	.word	0x3b96ce3f
 8001534:	3f5105eb 	.word	0x3f5105eb
 8001538:	449c2000 	.word	0x449c2000
 800153c:	441c0000 	.word	0x441c0000
 8001540:	00000000 	.word	0x00000000
 8001544:	200007d4 	.word	0x200007d4

08001548 <BLDCEnable>:
/*
 * Enable BLDC Motor(Enable Gate Driver & Start TIM8 PWM Generation)
 * @param
 * @return
 */
void BLDCEnable(void) {
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);		//EN_GATE = HIGH
 800154c:	2201      	movs	r2, #1
 800154e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001552:	480e      	ldr	r0, [pc, #56]	; (800158c <BLDCEnable+0x44>)
 8001554:	f002 fcaa 	bl	8003eac <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);
 8001558:	4b0d      	ldr	r3, [pc, #52]	; (8001590 <BLDCEnable+0x48>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2200      	movs	r2, #0
 800155e:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);
 8001560:	4b0b      	ldr	r3, [pc, #44]	; (8001590 <BLDCEnable+0x48>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2200      	movs	r2, #0
 8001566:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, 0);
 8001568:	4b09      	ldr	r3, [pc, #36]	; (8001590 <BLDCEnable+0x48>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2200      	movs	r2, #0
 800156e:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001570:	2100      	movs	r1, #0
 8001572:	4807      	ldr	r0, [pc, #28]	; (8001590 <BLDCEnable+0x48>)
 8001574:	f003 fc36 	bl	8004de4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8001578:	2104      	movs	r1, #4
 800157a:	4805      	ldr	r0, [pc, #20]	; (8001590 <BLDCEnable+0x48>)
 800157c:	f003 fc32 	bl	8004de4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8001580:	2108      	movs	r1, #8
 8001582:	4803      	ldr	r0, [pc, #12]	; (8001590 <BLDCEnable+0x48>)
 8001584:	f003 fc2e 	bl	8004de4 <HAL_TIM_PWM_Start>
}
 8001588:	bf00      	nop
 800158a:	bd80      	pop	{r7, pc}
 800158c:	40020000 	.word	0x40020000
 8001590:	200007d4 	.word	0x200007d4

08001594 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	607b      	str	r3, [r7, #4]
 800159e:	4b14      	ldr	r3, [pc, #80]	; (80015f0 <MX_DMA_Init+0x5c>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	4a13      	ldr	r2, [pc, #76]	; (80015f0 <MX_DMA_Init+0x5c>)
 80015a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015a8:	6313      	str	r3, [r2, #48]	; 0x30
 80015aa:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <MX_DMA_Init+0x5c>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015b2:	607b      	str	r3, [r7, #4]
 80015b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80015b6:	2200      	movs	r2, #0
 80015b8:	2100      	movs	r1, #0
 80015ba:	2038      	movs	r0, #56	; 0x38
 80015bc:	f001 fefd 	bl	80033ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80015c0:	2038      	movs	r0, #56	; 0x38
 80015c2:	f001 ff16 	bl	80033f2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80015c6:	2200      	movs	r2, #0
 80015c8:	2100      	movs	r1, #0
 80015ca:	203a      	movs	r0, #58	; 0x3a
 80015cc:	f001 fef5 	bl	80033ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80015d0:	203a      	movs	r0, #58	; 0x3a
 80015d2:	f001 ff0e 	bl	80033f2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80015d6:	2200      	movs	r2, #0
 80015d8:	2100      	movs	r1, #0
 80015da:	2046      	movs	r0, #70	; 0x46
 80015dc:	f001 feed 	bl	80033ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80015e0:	2046      	movs	r0, #70	; 0x46
 80015e2:	f001 ff06 	bl	80033f2 <HAL_NVIC_EnableIRQ>

}
 80015e6:	bf00      	nop
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40023800 	.word	0x40023800

080015f4 <dma_printf_init>:
#include "dma_ring.h"
#include <stdbool.h>

struct dma_printf_info dmi;

void dma_printf_init(UART_HandleTypeDef *printf_huart){
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
    dmi.huart = printf_huart;
 80015fc:	4a09      	ldr	r2, [pc, #36]	; (8001624 <dma_printf_init+0x30>)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
    dma_ring_init(&dmi.tx_ring);
 8001604:	4807      	ldr	r0, [pc, #28]	; (8001624 <dma_printf_init+0x30>)
 8001606:	f000 f87d 	bl	8001704 <dma_ring_init>
    dmi.sending = false;
 800160a:	4b06      	ldr	r3, [pc, #24]	; (8001624 <dma_printf_init+0x30>)
 800160c:	2200      	movs	r2, #0
 800160e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    dmi.previous_send_len = 0;
 8001612:	4b04      	ldr	r3, [pc, #16]	; (8001624 <dma_printf_init+0x30>)
 8001614:	2200      	movs	r2, #0
 8001616:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
}
 800161a:	bf00      	nop
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	20000310 	.word	0x20000310

08001628 <dma_printf_putc>:

void dma_printf_putc(uint8_t c){
 8001628:	b590      	push	{r4, r7, lr}
 800162a:	b085      	sub	sp, #20
 800162c:	af00      	add	r7, sp, #0
 800162e:	4603      	mov	r3, r0
 8001630:	71fb      	strb	r3, [r7, #7]
    dma_ring_putc(&dmi.tx_ring, c);
 8001632:	79fb      	ldrb	r3, [r7, #7]
 8001634:	4619      	mov	r1, r3
 8001636:	4814      	ldr	r0, [pc, #80]	; (8001688 <dma_printf_putc+0x60>)
 8001638:	f000 f87f 	bl	800173a <dma_ring_putc>
    if(!dmi.sending){
 800163c:	4b12      	ldr	r3, [pc, #72]	; (8001688 <dma_printf_putc+0x60>)
 800163e:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001642:	2b00      	cmp	r3, #0
 8001644:	d11b      	bne.n	800167e <dma_printf_putc+0x56>
        uint16_t len = (uint16_t)dma_ring_available_linear(&dmi.tx_ring);
 8001646:	4810      	ldr	r0, [pc, #64]	; (8001688 <dma_printf_putc+0x60>)
 8001648:	f000 f8ac 	bl	80017a4 <dma_ring_available_linear>
 800164c:	4603      	mov	r3, r0
 800164e:	81fb      	strh	r3, [r7, #14]
        dmi.previous_send_len = len;
 8001650:	89fb      	ldrh	r3, [r7, #14]
 8001652:	4a0d      	ldr	r2, [pc, #52]	; (8001688 <dma_printf_putc+0x60>)
 8001654:	f8c2 3410 	str.w	r3, [r2, #1040]	; 0x410
        dmi.sending = true;
 8001658:	4b0b      	ldr	r3, [pc, #44]	; (8001688 <dma_printf_putc+0x60>)
 800165a:	2201      	movs	r2, #1
 800165c:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        HAL_UART_Transmit_DMA(dmi.huart, dmi.tx_ring.buf+dma_ring_get_r_ptr(&dmi.tx_ring), len);
 8001660:	4b09      	ldr	r3, [pc, #36]	; (8001688 <dma_printf_putc+0x60>)
 8001662:	f8d3 440c 	ldr.w	r4, [r3, #1036]	; 0x40c
 8001666:	4808      	ldr	r0, [pc, #32]	; (8001688 <dma_printf_putc+0x60>)
 8001668:	f000 f8bf 	bl	80017ea <dma_ring_get_r_ptr>
 800166c:	4603      	mov	r3, r0
 800166e:	461a      	mov	r2, r3
 8001670:	4b05      	ldr	r3, [pc, #20]	; (8001688 <dma_printf_putc+0x60>)
 8001672:	4413      	add	r3, r2
 8001674:	89fa      	ldrh	r2, [r7, #14]
 8001676:	4619      	mov	r1, r3
 8001678:	4620      	mov	r0, r4
 800167a:	f004 fb33 	bl	8005ce4 <HAL_UART_Transmit_DMA>
    }
}
 800167e:	bf00      	nop
 8001680:	3714      	adds	r7, #20
 8001682:	46bd      	mov	sp, r7
 8001684:	bd90      	pop	{r4, r7, pc}
 8001686:	bf00      	nop
 8001688:	20000310 	.word	0x20000310

0800168c <dma_printf_send_it>:

void dma_printf_send_it(UART_HandleTypeDef *printf_huart) {
 800168c:	b590      	push	{r4, r7, lr}
 800168e:	b085      	sub	sp, #20
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
    if(dmi.huart != printf_huart) return;
 8001694:	4b1a      	ldr	r3, [pc, #104]	; (8001700 <dma_printf_send_it+0x74>)
 8001696:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	429a      	cmp	r2, r3
 800169e:	d12b      	bne.n	80016f8 <dma_printf_send_it+0x6c>

    dma_ring_forward_r_ptr(&dmi.tx_ring, dmi.previous_send_len);
 80016a0:	4b17      	ldr	r3, [pc, #92]	; (8001700 <dma_printf_send_it+0x74>)
 80016a2:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80016a6:	4619      	mov	r1, r3
 80016a8:	4815      	ldr	r0, [pc, #84]	; (8001700 <dma_printf_send_it+0x74>)
 80016aa:	f000 f8ab 	bl	8001804 <dma_ring_forward_r_ptr>
    uint16_t len = (uint16_t)dma_ring_available_linear(&dmi.tx_ring);
 80016ae:	4814      	ldr	r0, [pc, #80]	; (8001700 <dma_printf_send_it+0x74>)
 80016b0:	f000 f878 	bl	80017a4 <dma_ring_available_linear>
 80016b4:	4603      	mov	r3, r0
 80016b6:	81fb      	strh	r3, [r7, #14]
    if (len > 0 ) {
 80016b8:	89fb      	ldrh	r3, [r7, #14]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d017      	beq.n	80016ee <dma_printf_send_it+0x62>
        dmi.previous_send_len = len;
 80016be:	89fb      	ldrh	r3, [r7, #14]
 80016c0:	4a0f      	ldr	r2, [pc, #60]	; (8001700 <dma_printf_send_it+0x74>)
 80016c2:	f8c2 3410 	str.w	r3, [r2, #1040]	; 0x410
        dmi.sending = true;
 80016c6:	4b0e      	ldr	r3, [pc, #56]	; (8001700 <dma_printf_send_it+0x74>)
 80016c8:	2201      	movs	r2, #1
 80016ca:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        HAL_UART_Transmit_DMA(dmi.huart, dmi.tx_ring.buf+dma_ring_get_r_ptr(&dmi.tx_ring), len);
 80016ce:	4b0c      	ldr	r3, [pc, #48]	; (8001700 <dma_printf_send_it+0x74>)
 80016d0:	f8d3 440c 	ldr.w	r4, [r3, #1036]	; 0x40c
 80016d4:	480a      	ldr	r0, [pc, #40]	; (8001700 <dma_printf_send_it+0x74>)
 80016d6:	f000 f888 	bl	80017ea <dma_ring_get_r_ptr>
 80016da:	4603      	mov	r3, r0
 80016dc:	461a      	mov	r2, r3
 80016de:	4b08      	ldr	r3, [pc, #32]	; (8001700 <dma_printf_send_it+0x74>)
 80016e0:	4413      	add	r3, r2
 80016e2:	89fa      	ldrh	r2, [r7, #14]
 80016e4:	4619      	mov	r1, r3
 80016e6:	4620      	mov	r0, r4
 80016e8:	f004 fafc 	bl	8005ce4 <HAL_UART_Transmit_DMA>
 80016ec:	e005      	b.n	80016fa <dma_printf_send_it+0x6e>
    }else{
        dmi.sending = false;
 80016ee:	4b04      	ldr	r3, [pc, #16]	; (8001700 <dma_printf_send_it+0x74>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 80016f6:	e000      	b.n	80016fa <dma_printf_send_it+0x6e>
    if(dmi.huart != printf_huart) return;
 80016f8:	bf00      	nop
    }
}
 80016fa:	3714      	adds	r7, #20
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd90      	pop	{r4, r7, pc}
 8001700:	20000310 	.word	0x20000310

08001704 <dma_ring_init>:
#include "dma_ring.h"
#include "main.h"
#include <stdio.h>

void dma_ring_init(struct dma_ring_buf *ring){
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  ring->buf_size = RING_BUF_SIZE;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001712:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
  ring->w_ptr = 0;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2200      	movs	r2, #0
 800171a:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
  ring->r_ptr = 0;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
  ring->overwrite_cnt = 0;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2200      	movs	r2, #0
 800172a:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
}
 800172e:	bf00      	nop
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr

0800173a <dma_ring_putc>:
  *c = ring->buf[ring->r_ptr];
  ring->r_ptr = next_ptr;
  return RING_SUCCESS;
}

int dma_ring_putc(struct dma_ring_buf *ring, uint8_t c){
 800173a:	b480      	push	{r7}
 800173c:	b085      	sub	sp, #20
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
 8001742:	460b      	mov	r3, r1
 8001744:	70fb      	strb	r3, [r7, #3]
  uint16_t next_ptr = ring->w_ptr+1;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 800174c:	3301      	adds	r3, #1
 800174e:	81fb      	strh	r3, [r7, #14]
  if(next_ptr >= ring->buf_size) next_ptr = 0;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8001756:	89fa      	ldrh	r2, [r7, #14]
 8001758:	429a      	cmp	r2, r3
 800175a:	d301      	bcc.n	8001760 <dma_ring_putc+0x26>
 800175c:	2300      	movs	r3, #0
 800175e:	81fb      	strh	r3, [r7, #14]

  if(next_ptr == ring->r_ptr){
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8001766:	89fa      	ldrh	r2, [r7, #14]
 8001768:	429a      	cmp	r2, r3
 800176a:	d109      	bne.n	8001780 <dma_ring_putc+0x46>
    ring->overwrite_cnt++;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 8001772:	3301      	adds	r3, #1
 8001774:	b29a      	uxth	r2, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
    return RING_FAIL;
 800177c:	2301      	movs	r3, #1
 800177e:	e00b      	b.n	8001798 <dma_ring_putc+0x5e>
  }
  ring->buf[ring->w_ptr] = c;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8001786:	4619      	mov	r1, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	78fa      	ldrb	r2, [r7, #3]
 800178c:	545a      	strb	r2, [r3, r1]
  ring->w_ptr = next_ptr;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	89fa      	ldrh	r2, [r7, #14]
 8001792:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
  return RING_SUCCESS;
 8001796:	2300      	movs	r3, #0
}
 8001798:	4618      	mov	r0, r3
 800179a:	3714      	adds	r7, #20
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <dma_ring_available_linear>:
    return ring->w_ptr - ring->r_ptr;
  }else{
    return ring->buf_size + ring->w_ptr - ring->r_ptr;
  }
}
int dma_ring_available_linear(struct dma_ring_buf *ring){
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  if(ring->w_ptr >= ring->r_ptr){
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d308      	bcc.n	80017ce <dma_ring_available_linear+0x2a>
    return ring->w_ptr - ring->r_ptr;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 80017c2:	461a      	mov	r2, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	e007      	b.n	80017de <dma_ring_available_linear+0x3a>
  }else{
    return ring->buf_size - ring->r_ptr;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 80017d4:	461a      	mov	r2, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 80017dc:	1ad3      	subs	r3, r2, r3
  }
}
 80017de:	4618      	mov	r0, r3
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr

080017ea <dma_ring_get_r_ptr>:

uint16_t dma_ring_get_w_ptr(struct dma_ring_buf *ring){
  return ring->w_ptr;
}

uint16_t dma_ring_get_r_ptr(struct dma_ring_buf *ring){
 80017ea:	b480      	push	{r7}
 80017ec:	b083      	sub	sp, #12
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
  return ring->r_ptr;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <dma_ring_forward_r_ptr>:

void dma_ring_forward_r_ptr(struct dma_ring_buf *ring, int len){
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
  while(len > 0){
 800180e:	e018      	b.n	8001842 <dma_ring_forward_r_ptr+0x3e>
    if(ring->r_ptr+1 >= ring->buf_size){
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8001816:	3301      	adds	r3, #1
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	f8b2 2400 	ldrh.w	r2, [r2, #1024]	; 0x400
 800181e:	4293      	cmp	r3, r2
 8001820:	db04      	blt.n	800182c <dma_ring_forward_r_ptr+0x28>
      ring->r_ptr = 0;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2200      	movs	r2, #0
 8001826:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 800182a:	e007      	b.n	800183c <dma_ring_forward_r_ptr+0x38>
    }else{
      ring->r_ptr += 1;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8001832:	3301      	adds	r3, #1
 8001834:	b29a      	uxth	r2, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
    }
    len--;
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	3b01      	subs	r3, #1
 8001840:	603b      	str	r3, [r7, #0]
  while(len > 0){
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	dce3      	bgt.n	8001810 <dma_ring_forward_r_ptr+0xc>
  }
}
 8001848:	bf00      	nop
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <DRV8305Init>:
/*
 * Initialize DRV8305
 * @param
 * @return
 */
void DRV8305Init(void) {
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
	DRV8305Write(DRV8305_GATE_DRIVER_CONTROL, 0x0296);	//6 PWM mode -> 3 PWM mode
 8001858:	f240 2196 	movw	r1, #662	; 0x296
 800185c:	2007      	movs	r0, #7
 800185e:	f000 f807 	bl	8001870 <DRV8305Write>
	DRV8305Write(DRV8305_SHUNT_AMP_CONTROL, 0x002C);	//Current Amp : x10 -> x40
 8001862:	212c      	movs	r1, #44	; 0x2c
 8001864:	200a      	movs	r0, #10
 8001866:	f000 f803 	bl	8001870 <DRV8305Write>
}
 800186a:	bf00      	nop
 800186c:	bd80      	pop	{r7, pc}
	...

08001870 <DRV8305Write>:
 * Write Register
 * @param	address : DRV8305 regigster address(8bit)
 * 			data : data to write(11bit)
 * @return
 */
uint16_t DRV8305Write(uint8_t address, uint16_t data) {
 8001870:	b580      	push	{r7, lr}
 8001872:	b086      	sub	sp, #24
 8001874:	af02      	add	r7, sp, #8
 8001876:	4603      	mov	r3, r0
 8001878:	460a      	mov	r2, r1
 800187a:	71fb      	strb	r3, [r7, #7]
 800187c:	4613      	mov	r3, r2
 800187e:	80bb      	strh	r3, [r7, #4]
	uint16_t adr_data = (address << 11) | (data & 0x07FF);		//0(1bit) + address(4bit) + data(11bit) = 16bit
 8001880:	79fb      	ldrb	r3, [r7, #7]
 8001882:	02db      	lsls	r3, r3, #11
 8001884:	b21a      	sxth	r2, r3
 8001886:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800188a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800188e:	b21b      	sxth	r3, r3
 8001890:	4313      	orrs	r3, r2
 8001892:	b21b      	sxth	r3, r3
 8001894:	81fb      	strh	r3, [r7, #14]
	uint8_t txdata[2] = {adr_data >> 8, adr_data & 0xFF};		//{msb8bit, lsb8bit}
 8001896:	89fb      	ldrh	r3, [r7, #14]
 8001898:	0a1b      	lsrs	r3, r3, #8
 800189a:	b29b      	uxth	r3, r3
 800189c:	b2db      	uxtb	r3, r3
 800189e:	733b      	strb	r3, [r7, #12]
 80018a0:	89fb      	ldrh	r3, [r7, #14]
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	737b      	strb	r3, [r7, #13]
	uint8_t rxdata[2] = {};
 80018a6:	2300      	movs	r3, #0
 80018a8:	813b      	strh	r3, [r7, #8]
	DRV8305Select();
 80018aa:	f000 f84d 	bl	8001948 <DRV8305Select>
	HAL_SPI_TransmitReceive(&DRV8305_SPI_HANDLER, txdata, rxdata, 2, 1);
 80018ae:	f107 0208 	add.w	r2, r7, #8
 80018b2:	f107 010c 	add.w	r1, r7, #12
 80018b6:	2301      	movs	r3, #1
 80018b8:	9300      	str	r3, [sp, #0]
 80018ba:	2302      	movs	r3, #2
 80018bc:	4809      	ldr	r0, [pc, #36]	; (80018e4 <DRV8305Write+0x74>)
 80018be:	f002 ffc9 	bl	8004854 <HAL_SPI_TransmitReceive>
	DRV8305Deselect();
 80018c2:	f000 f84d 	bl	8001960 <DRV8305Deselect>
	return (((rxdata[0] & 0x07) << 8) | rxdata[1]);
 80018c6:	7a3b      	ldrb	r3, [r7, #8]
 80018c8:	021b      	lsls	r3, r3, #8
 80018ca:	b21b      	sxth	r3, r3
 80018cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80018d0:	b21a      	sxth	r2, r3
 80018d2:	7a7b      	ldrb	r3, [r7, #9]
 80018d4:	b21b      	sxth	r3, r3
 80018d6:	4313      	orrs	r3, r2
 80018d8:	b21b      	sxth	r3, r3
 80018da:	b29b      	uxth	r3, r3
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3710      	adds	r7, #16
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	20000724 	.word	0x20000724

080018e8 <DRV8305Read>:
/*
 * Read Register
 * @param	address : DRV8305 regigster address(8bit)
 * @return	data in the designated address(11bit)
 */
uint16_t DRV8305Read(uint8_t address) {
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b086      	sub	sp, #24
 80018ec:	af02      	add	r7, sp, #8
 80018ee:	4603      	mov	r3, r0
 80018f0:	71fb      	strb	r3, [r7, #7]
	uint8_t txdata[2] = {(address << 3) | 0x80, 0x00};
 80018f2:	79fb      	ldrb	r3, [r7, #7]
 80018f4:	00db      	lsls	r3, r3, #3
 80018f6:	b25b      	sxtb	r3, r3
 80018f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018fc:	b25b      	sxtb	r3, r3
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	733b      	strb	r3, [r7, #12]
 8001902:	2300      	movs	r3, #0
 8001904:	737b      	strb	r3, [r7, #13]
	uint8_t rxdata[2] = {};
 8001906:	2300      	movs	r3, #0
 8001908:	813b      	strh	r3, [r7, #8]
	DRV8305Select();
 800190a:	f000 f81d 	bl	8001948 <DRV8305Select>
	HAL_SPI_TransmitReceive(&DRV8305_SPI_HANDLER, txdata, rxdata, 2, 1);
 800190e:	f107 0208 	add.w	r2, r7, #8
 8001912:	f107 010c 	add.w	r1, r7, #12
 8001916:	2301      	movs	r3, #1
 8001918:	9300      	str	r3, [sp, #0]
 800191a:	2302      	movs	r3, #2
 800191c:	4809      	ldr	r0, [pc, #36]	; (8001944 <DRV8305Read+0x5c>)
 800191e:	f002 ff99 	bl	8004854 <HAL_SPI_TransmitReceive>
	DRV8305Deselect();
 8001922:	f000 f81d 	bl	8001960 <DRV8305Deselect>
	return (((rxdata[0] & 0x07) << 8) | rxdata[1]);
 8001926:	7a3b      	ldrb	r3, [r7, #8]
 8001928:	021b      	lsls	r3, r3, #8
 800192a:	b21b      	sxth	r3, r3
 800192c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001930:	b21a      	sxth	r2, r3
 8001932:	7a7b      	ldrb	r3, [r7, #9]
 8001934:	b21b      	sxth	r3, r3
 8001936:	4313      	orrs	r3, r2
 8001938:	b21b      	sxth	r3, r3
 800193a:	b29b      	uxth	r3, r3
}
 800193c:	4618      	mov	r0, r3
 800193e:	3710      	adds	r7, #16
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	20000724 	.word	0x20000724

08001948 <DRV8305Select>:
/*
 * Select
 * @param
 * @return
 */
static void DRV8305Select(void) {
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DRV8305_CS_PORT, DRV8305_CS_PIN, GPIO_PIN_RESET);
 800194c:	2200      	movs	r2, #0
 800194e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001952:	4802      	ldr	r0, [pc, #8]	; (800195c <DRV8305Select+0x14>)
 8001954:	f002 faaa 	bl	8003eac <HAL_GPIO_WritePin>
}
 8001958:	bf00      	nop
 800195a:	bd80      	pop	{r7, pc}
 800195c:	40020400 	.word	0x40020400

08001960 <DRV8305Deselect>:
/*
 * Deselect
 * @param
 * @return
 */
static void DRV8305Deselect(void) {
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DRV8305_CS_PORT, DRV8305_CS_PIN, GPIO_PIN_SET);
 8001964:	2201      	movs	r2, #1
 8001966:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800196a:	4802      	ldr	r0, [pc, #8]	; (8001974 <DRV8305Deselect+0x14>)
 800196c:	f002 fa9e 	bl	8003eac <HAL_GPIO_WritePin>
}
 8001970:	bf00      	nop
 8001972:	bd80      	pop	{r7, pc}
 8001974:	40020400 	.word	0x40020400

08001978 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b088      	sub	sp, #32
 800197c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800197e:	f107 030c 	add.w	r3, r7, #12
 8001982:	2200      	movs	r2, #0
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	605a      	str	r2, [r3, #4]
 8001988:	609a      	str	r2, [r3, #8]
 800198a:	60da      	str	r2, [r3, #12]
 800198c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	60bb      	str	r3, [r7, #8]
 8001992:	4b45      	ldr	r3, [pc, #276]	; (8001aa8 <MX_GPIO_Init+0x130>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	4a44      	ldr	r2, [pc, #272]	; (8001aa8 <MX_GPIO_Init+0x130>)
 8001998:	f043 0304 	orr.w	r3, r3, #4
 800199c:	6313      	str	r3, [r2, #48]	; 0x30
 800199e:	4b42      	ldr	r3, [pc, #264]	; (8001aa8 <MX_GPIO_Init+0x130>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a2:	f003 0304 	and.w	r3, r3, #4
 80019a6:	60bb      	str	r3, [r7, #8]
 80019a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	607b      	str	r3, [r7, #4]
 80019ae:	4b3e      	ldr	r3, [pc, #248]	; (8001aa8 <MX_GPIO_Init+0x130>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	4a3d      	ldr	r2, [pc, #244]	; (8001aa8 <MX_GPIO_Init+0x130>)
 80019b4:	f043 0301 	orr.w	r3, r3, #1
 80019b8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ba:	4b3b      	ldr	r3, [pc, #236]	; (8001aa8 <MX_GPIO_Init+0x130>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	607b      	str	r3, [r7, #4]
 80019c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	603b      	str	r3, [r7, #0]
 80019ca:	4b37      	ldr	r3, [pc, #220]	; (8001aa8 <MX_GPIO_Init+0x130>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	4a36      	ldr	r2, [pc, #216]	; (8001aa8 <MX_GPIO_Init+0x130>)
 80019d0:	f043 0302 	orr.w	r3, r3, #2
 80019d4:	6313      	str	r3, [r2, #48]	; 0x30
 80019d6:	4b34      	ldr	r3, [pc, #208]	; (8001aa8 <MX_GPIO_Init+0x130>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	603b      	str	r3, [r7, #0]
 80019e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
 80019e2:	2200      	movs	r2, #0
 80019e4:	f248 11d0 	movw	r1, #33232	; 0x81d0
 80019e8:	4830      	ldr	r0, [pc, #192]	; (8001aac <MX_GPIO_Init+0x134>)
 80019ea:	f002 fa5f 	bl	8003eac <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12, GPIO_PIN_RESET);
 80019ee:	2200      	movs	r2, #0
 80019f0:	f241 0103 	movw	r1, #4099	; 0x1003
 80019f4:	482e      	ldr	r0, [pc, #184]	; (8001ab0 <MX_GPIO_Init+0x138>)
 80019f6:	f002 fa59 	bl	8003eac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA6 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_8;
 80019fa:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80019fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a00:	2301      	movs	r3, #1
 8001a02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a04:	2300      	movs	r3, #0
 8001a06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a0c:	f107 030c 	add.w	r3, r7, #12
 8001a10:	4619      	mov	r1, r3
 8001a12:	4826      	ldr	r0, [pc, #152]	; (8001aac <MX_GPIO_Init+0x134>)
 8001a14:	f002 f898 	bl	8003b48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA7 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_15;
 8001a18:	f248 0380 	movw	r3, #32896	; 0x8080
 8001a1c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a22:	2300      	movs	r3, #0
 8001a24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a26:	2303      	movs	r3, #3
 8001a28:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a2a:	f107 030c 	add.w	r3, r7, #12
 8001a2e:	4619      	mov	r1, r3
 8001a30:	481e      	ldr	r0, [pc, #120]	; (8001aac <MX_GPIO_Init+0x134>)
 8001a32:	f002 f889 	bl	8003b48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12;
 8001a36:	f241 0303 	movw	r3, #4099	; 0x1003
 8001a3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a40:	2300      	movs	r3, #0
 8001a42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a44:	2303      	movs	r3, #3
 8001a46:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a48:	f107 030c 	add.w	r3, r7, #12
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4818      	ldr	r0, [pc, #96]	; (8001ab0 <MX_GPIO_Init+0x138>)
 8001a50:	f002 f87a 	bl	8003b48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001a54:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a58:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a62:	f107 030c 	add.w	r3, r7, #12
 8001a66:	4619      	mov	r1, r3
 8001a68:	4811      	ldr	r0, [pc, #68]	; (8001ab0 <MX_GPIO_Init+0x138>)
 8001a6a:	f002 f86d 	bl	8003b48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a74:	2300      	movs	r3, #0
 8001a76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a7c:	f107 030c 	add.w	r3, r7, #12
 8001a80:	4619      	mov	r1, r3
 8001a82:	480c      	ldr	r0, [pc, #48]	; (8001ab4 <MX_GPIO_Init+0x13c>)
 8001a84:	f002 f860 	bl	8003b48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001a88:	2380      	movs	r3, #128	; 0x80
 8001a8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a94:	f107 030c 	add.w	r3, r7, #12
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4805      	ldr	r0, [pc, #20]	; (8001ab0 <MX_GPIO_Init+0x138>)
 8001a9c:	f002 f854 	bl	8003b48 <HAL_GPIO_Init>

}
 8001aa0:	bf00      	nop
 8001aa2:	3720      	adds	r7, #32
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	40023800 	.word	0x40023800
 8001aac:	40020000 	.word	0x40020000
 8001ab0:	40020400 	.word	0x40020400
 8001ab4:	40020800 	.word	0x40020800

08001ab8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6) {
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a0f      	ldr	r2, [pc, #60]	; (8001b04 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d118      	bne.n	8001afc <HAL_TIM_PeriodElapsedCallback+0x44>
		static int32_t t = 0;

		BLDCVqConstControl(0, 1.5f);
 8001aca:	eef7 0a08 	vmov.f32	s1, #120	; 0x3fc00000  1.5
 8001ace:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8001b08 <HAL_TIM_PeriodElapsedCallback+0x50>
 8001ad2:	f7ff fbf9 	bl	80012c8 <BLDCVqConstControl>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);

		}
		*/

		if (t > 5000) {
 8001ad6:	4b0d      	ldr	r3, [pc, #52]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	dd07      	ble.n	8001af2 <HAL_TIM_PeriodElapsedCallback+0x3a>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8001ae2:	2140      	movs	r1, #64	; 0x40
 8001ae4:	480a      	ldr	r0, [pc, #40]	; (8001b10 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001ae6:	f002 f9fa 	bl	8003ede <HAL_GPIO_TogglePin>
			t = 0;
 8001aea:	4b08      	ldr	r3, [pc, #32]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
		} else {
			t++;
		}
	}
}
 8001af0:	e004      	b.n	8001afc <HAL_TIM_PeriodElapsedCallback+0x44>
			t++;
 8001af2:	4b06      	ldr	r3, [pc, #24]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	3301      	adds	r3, #1
 8001af8:	4a04      	ldr	r2, [pc, #16]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001afa:	6013      	str	r3, [r2, #0]
}
 8001afc:	bf00      	nop
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	40001000 	.word	0x40001000
 8001b08:	00000000 	.word	0x00000000
 8001b0c:	20000208 	.word	0x20000208
 8001b10:	40020000 	.word	0x40020000

08001b14 <__io_putchar>:
#ifdef __GNUC__
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
void __io_putchar(uint8_t ch) {
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	71fb      	strb	r3, [r7, #7]
	dma_printf_putc(ch);
 8001b1e:	79fb      	ldrb	r3, [r7, #7]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff fd81 	bl	8001628 <dma_printf_putc>
}
 8001b26:	bf00      	nop
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
	...

08001b30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b34:	f000 ff08 	bl	8002948 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b38:	f000 f85e 	bl	8001bf8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b3c:	f7ff ff1c 	bl	8001978 <MX_GPIO_Init>
  MX_DMA_Init();
 8001b40:	f7ff fd28 	bl	8001594 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001b44:	f000 fdf6 	bl	8002734 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8001b48:	f000 f8ec 	bl	8001d24 <MX_SPI2_Init>
  MX_TIM8_Init();
 8001b4c:	f000 fbd6 	bl	80022fc <MX_TIM8_Init>
  MX_SPI3_Init();
 8001b50:	f000 f91e 	bl	8001d90 <MX_SPI3_Init>
  MX_TIM6_Init();
 8001b54:	f000 fb9c 	bl	8002290 <MX_TIM6_Init>
  MX_ADC1_Init();
 8001b58:	f7ff f9a2 	bl	8000ea0 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001b5c:	f000 fb14 	bl	8002188 <MX_TIM2_Init>
  MX_ADC2_Init();
 8001b60:	f7ff fa0c 	bl	8000f7c <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  //wait after power on
  HAL_Delay(10);
 8001b64:	200a      	movs	r0, #10
 8001b66:	f000 ff61 	bl	8002a2c <HAL_Delay>

  //printf settings
  dma_printf_init(&huart1);
 8001b6a:	481d      	ldr	r0, [pc, #116]	; (8001be0 <main+0xb0>)
 8001b6c:	f7ff fd42 	bl	80015f4 <dma_printf_init>
  setbuf(stdin, NULL);
 8001b70:	4b1c      	ldr	r3, [pc, #112]	; (8001be4 <main+0xb4>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	2100      	movs	r1, #0
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f005 fb47 	bl	800720c <setbuf>
  setbuf(stdout, NULL);
 8001b7e:	4b19      	ldr	r3, [pc, #100]	; (8001be4 <main+0xb4>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	2100      	movs	r1, #0
 8001b86:	4618      	mov	r0, r3
 8001b88:	f005 fb40 	bl	800720c <setbuf>
  setbuf(stderr, NULL);
 8001b8c:	4b15      	ldr	r3, [pc, #84]	; (8001be4 <main+0xb4>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	68db      	ldr	r3, [r3, #12]
 8001b92:	2100      	movs	r1, #0
 8001b94:	4618      	mov	r0, r3
 8001b96:	f005 fb39 	bl	800720c <setbuf>
  printf("Hello BLDCDriver_v1!\n");
 8001b9a:	4813      	ldr	r0, [pc, #76]	; (8001be8 <main+0xb8>)
 8001b9c:	f005 fb2e 	bl	80071fc <puts>

  //dummy spi com(to avoid error at the first com)
  AS5147Read(AS5147_ANGLECOM);
 8001ba0:	f643 70ff 	movw	r0, #16383	; 0x3fff
 8001ba4:	f7ff fb10 	bl	80011c8 <AS5147Read>
  DRV8305Read(DRV8305_WARNING_WATCHDOG_RESET);
 8001ba8:	2001      	movs	r0, #1
 8001baa:	f7ff fe9d 	bl	80018e8 <DRV8305Read>

  //Enable BLDC
  DRV8305Init();
 8001bae:	f7ff fe51 	bl	8001854 <DRV8305Init>
  BLDCEnable();
 8001bb2:	f7ff fcc9 	bl	8001548 <BLDCEnable>

  while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_RESET);
 8001bb6:	bf00      	nop
 8001bb8:	2180      	movs	r1, #128	; 0x80
 8001bba:	480c      	ldr	r0, [pc, #48]	; (8001bec <main+0xbc>)
 8001bbc:	f002 f95e 	bl	8003e7c <HAL_GPIO_ReadPin>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d0f8      	beq.n	8001bb8 <main+0x88>
//  BLDCCalibZeroPos();

//  BLDCStartCurrentSense();

  //start timer interrupt
  HAL_TIM_Base_Start_IT(&htim6);
 8001bc6:	480a      	ldr	r0, [pc, #40]	; (8001bf0 <main+0xc0>)
 8001bc8:	f003 f8bd 	bl	8004d46 <HAL_TIM_Base_Start_IT>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //LED
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8001bcc:	2110      	movs	r1, #16
 8001bce:	4809      	ldr	r0, [pc, #36]	; (8001bf4 <main+0xc4>)
 8001bd0:	f002 f985 	bl	8003ede <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8001bd4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001bd8:	f000 ff28 	bl	8002a2c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8001bdc:	e7f6      	b.n	8001bcc <main+0x9c>
 8001bde:	bf00      	nop
 8001be0:	20000a78 	.word	0x20000a78
 8001be4:	20000014 	.word	0x20000014
 8001be8:	08009c00 	.word	0x08009c00
 8001bec:	40020400 	.word	0x40020400
 8001bf0:	20000814 	.word	0x20000814
 8001bf4:	40020000 	.word	0x40020000

08001bf8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b094      	sub	sp, #80	; 0x50
 8001bfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bfe:	f107 0320 	add.w	r3, r7, #32
 8001c02:	2230      	movs	r2, #48	; 0x30
 8001c04:	2100      	movs	r1, #0
 8001c06:	4618      	mov	r0, r3
 8001c08:	f004 ff4a 	bl	8006aa0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c0c:	f107 030c 	add.w	r3, r7, #12
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	605a      	str	r2, [r3, #4]
 8001c16:	609a      	str	r2, [r3, #8]
 8001c18:	60da      	str	r2, [r3, #12]
 8001c1a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	60bb      	str	r3, [r7, #8]
 8001c20:	4b28      	ldr	r3, [pc, #160]	; (8001cc4 <SystemClock_Config+0xcc>)
 8001c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c24:	4a27      	ldr	r2, [pc, #156]	; (8001cc4 <SystemClock_Config+0xcc>)
 8001c26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c2a:	6413      	str	r3, [r2, #64]	; 0x40
 8001c2c:	4b25      	ldr	r3, [pc, #148]	; (8001cc4 <SystemClock_Config+0xcc>)
 8001c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c34:	60bb      	str	r3, [r7, #8]
 8001c36:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c38:	2300      	movs	r3, #0
 8001c3a:	607b      	str	r3, [r7, #4]
 8001c3c:	4b22      	ldr	r3, [pc, #136]	; (8001cc8 <SystemClock_Config+0xd0>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a21      	ldr	r2, [pc, #132]	; (8001cc8 <SystemClock_Config+0xd0>)
 8001c42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c46:	6013      	str	r3, [r2, #0]
 8001c48:	4b1f      	ldr	r3, [pc, #124]	; (8001cc8 <SystemClock_Config+0xd0>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c50:	607b      	str	r3, [r7, #4]
 8001c52:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c54:	2302      	movs	r3, #2
 8001c56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c5c:	2310      	movs	r3, #16
 8001c5e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c60:	2302      	movs	r3, #2
 8001c62:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c64:	2300      	movs	r3, #0
 8001c66:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001c68:	2308      	movs	r3, #8
 8001c6a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001c6c:	2364      	movs	r3, #100	; 0x64
 8001c6e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c70:	2302      	movs	r3, #2
 8001c72:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c74:	2304      	movs	r3, #4
 8001c76:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c78:	f107 0320 	add.w	r3, r7, #32
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f002 f949 	bl	8003f14 <HAL_RCC_OscConfig>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001c88:	f000 f844 	bl	8001d14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c8c:	230f      	movs	r3, #15
 8001c8e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c90:	2302      	movs	r3, #2
 8001c92:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c94:	2300      	movs	r3, #0
 8001c96:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c98:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001c9c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ca2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001ca4:	f107 030c 	add.w	r3, r7, #12
 8001ca8:	2103      	movs	r1, #3
 8001caa:	4618      	mov	r0, r3
 8001cac:	f002 fba2 	bl	80043f4 <HAL_RCC_ClockConfig>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001cb6:	f000 f82d 	bl	8001d14 <Error_Handler>
  }
}
 8001cba:	bf00      	nop
 8001cbc:	3750      	adds	r7, #80	; 0x50
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	40007000 	.word	0x40007000

08001ccc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
//UART Callback for printf(...)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle) {
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
	uart_flag=1;
 8001cd4:	4b05      	ldr	r3, [pc, #20]	; (8001cec <HAL_UART_RxCpltCallback+0x20>)
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart1, uart_buf, 4);
 8001cda:	2204      	movs	r2, #4
 8001cdc:	4904      	ldr	r1, [pc, #16]	; (8001cf0 <HAL_UART_RxCpltCallback+0x24>)
 8001cde:	4805      	ldr	r0, [pc, #20]	; (8001cf4 <HAL_UART_RxCpltCallback+0x28>)
 8001ce0:	f003 ffab 	bl	8005c3a <HAL_UART_Receive_IT>
}
 8001ce4:	bf00      	nop
 8001ce6:	3708      	adds	r7, #8
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	20000204 	.word	0x20000204
 8001cf0:	20000000 	.word	0x20000000
 8001cf4:	20000a78 	.word	0x20000a78

08001cf8 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
    uart_com_send_it(huart);
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f000 fc61 	bl	80025c8 <uart_com_send_it>
    dma_printf_send_it(huart);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f7ff fcc0 	bl	800168c <dma_printf_send_it>
}
 8001d0c:	bf00      	nop
 8001d0e:	3708      	adds	r7, #8
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001d18:	bf00      	nop
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
	...

08001d24 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8001d28:	4b17      	ldr	r3, [pc, #92]	; (8001d88 <MX_SPI2_Init+0x64>)
 8001d2a:	4a18      	ldr	r2, [pc, #96]	; (8001d8c <MX_SPI2_Init+0x68>)
 8001d2c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001d2e:	4b16      	ldr	r3, [pc, #88]	; (8001d88 <MX_SPI2_Init+0x64>)
 8001d30:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d34:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001d36:	4b14      	ldr	r3, [pc, #80]	; (8001d88 <MX_SPI2_Init+0x64>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d3c:	4b12      	ldr	r3, [pc, #72]	; (8001d88 <MX_SPI2_Init+0x64>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d42:	4b11      	ldr	r3, [pc, #68]	; (8001d88 <MX_SPI2_Init+0x64>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001d48:	4b0f      	ldr	r3, [pc, #60]	; (8001d88 <MX_SPI2_Init+0x64>)
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001d4e:	4b0e      	ldr	r3, [pc, #56]	; (8001d88 <MX_SPI2_Init+0x64>)
 8001d50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d54:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001d56:	4b0c      	ldr	r3, [pc, #48]	; (8001d88 <MX_SPI2_Init+0x64>)
 8001d58:	2218      	movs	r2, #24
 8001d5a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d5c:	4b0a      	ldr	r3, [pc, #40]	; (8001d88 <MX_SPI2_Init+0x64>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d62:	4b09      	ldr	r3, [pc, #36]	; (8001d88 <MX_SPI2_Init+0x64>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d68:	4b07      	ldr	r3, [pc, #28]	; (8001d88 <MX_SPI2_Init+0x64>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001d6e:	4b06      	ldr	r3, [pc, #24]	; (8001d88 <MX_SPI2_Init+0x64>)
 8001d70:	220a      	movs	r2, #10
 8001d72:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001d74:	4804      	ldr	r0, [pc, #16]	; (8001d88 <MX_SPI2_Init+0x64>)
 8001d76:	f002 fd09 	bl	800478c <HAL_SPI_Init>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001d80:	f7ff ffc8 	bl	8001d14 <Error_Handler>
  }

}
 8001d84:	bf00      	nop
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	20000724 	.word	0x20000724
 8001d8c:	40003800 	.word	0x40003800

08001d90 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8001d94:	4b17      	ldr	r3, [pc, #92]	; (8001df4 <MX_SPI3_Init+0x64>)
 8001d96:	4a18      	ldr	r2, [pc, #96]	; (8001df8 <MX_SPI3_Init+0x68>)
 8001d98:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001d9a:	4b16      	ldr	r3, [pc, #88]	; (8001df4 <MX_SPI3_Init+0x64>)
 8001d9c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001da0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001da2:	4b14      	ldr	r3, [pc, #80]	; (8001df4 <MX_SPI3_Init+0x64>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001da8:	4b12      	ldr	r3, [pc, #72]	; (8001df4 <MX_SPI3_Init+0x64>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001dae:	4b11      	ldr	r3, [pc, #68]	; (8001df4 <MX_SPI3_Init+0x64>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001db4:	4b0f      	ldr	r3, [pc, #60]	; (8001df4 <MX_SPI3_Init+0x64>)
 8001db6:	2201      	movs	r2, #1
 8001db8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001dba:	4b0e      	ldr	r3, [pc, #56]	; (8001df4 <MX_SPI3_Init+0x64>)
 8001dbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dc0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001dc2:	4b0c      	ldr	r3, [pc, #48]	; (8001df4 <MX_SPI3_Init+0x64>)
 8001dc4:	2208      	movs	r2, #8
 8001dc6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001dc8:	4b0a      	ldr	r3, [pc, #40]	; (8001df4 <MX_SPI3_Init+0x64>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001dce:	4b09      	ldr	r3, [pc, #36]	; (8001df4 <MX_SPI3_Init+0x64>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dd4:	4b07      	ldr	r3, [pc, #28]	; (8001df4 <MX_SPI3_Init+0x64>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001dda:	4b06      	ldr	r3, [pc, #24]	; (8001df4 <MX_SPI3_Init+0x64>)
 8001ddc:	220a      	movs	r2, #10
 8001dde:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001de0:	4804      	ldr	r0, [pc, #16]	; (8001df4 <MX_SPI3_Init+0x64>)
 8001de2:	f002 fcd3 	bl	800478c <HAL_SPI_Init>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001dec:	f7ff ff92 	bl	8001d14 <Error_Handler>
  }

}
 8001df0:	bf00      	nop
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	2000077c 	.word	0x2000077c
 8001df8:	40003c00 	.word	0x40003c00

08001dfc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b08c      	sub	sp, #48	; 0x30
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e04:	f107 031c 	add.w	r3, r7, #28
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	605a      	str	r2, [r3, #4]
 8001e0e:	609a      	str	r2, [r3, #8]
 8001e10:	60da      	str	r2, [r3, #12]
 8001e12:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a33      	ldr	r2, [pc, #204]	; (8001ee8 <HAL_SPI_MspInit+0xec>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d12d      	bne.n	8001e7a <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001e1e:	2300      	movs	r3, #0
 8001e20:	61bb      	str	r3, [r7, #24]
 8001e22:	4b32      	ldr	r3, [pc, #200]	; (8001eec <HAL_SPI_MspInit+0xf0>)
 8001e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e26:	4a31      	ldr	r2, [pc, #196]	; (8001eec <HAL_SPI_MspInit+0xf0>)
 8001e28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e2e:	4b2f      	ldr	r3, [pc, #188]	; (8001eec <HAL_SPI_MspInit+0xf0>)
 8001e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e36:	61bb      	str	r3, [r7, #24]
 8001e38:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	617b      	str	r3, [r7, #20]
 8001e3e:	4b2b      	ldr	r3, [pc, #172]	; (8001eec <HAL_SPI_MspInit+0xf0>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e42:	4a2a      	ldr	r2, [pc, #168]	; (8001eec <HAL_SPI_MspInit+0xf0>)
 8001e44:	f043 0302 	orr.w	r3, r3, #2
 8001e48:	6313      	str	r3, [r2, #48]	; 0x30
 8001e4a:	4b28      	ldr	r3, [pc, #160]	; (8001eec <HAL_SPI_MspInit+0xf0>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	617b      	str	r3, [r7, #20]
 8001e54:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001e56:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001e5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e60:	2300      	movs	r3, #0
 8001e62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e64:	2303      	movs	r3, #3
 8001e66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e68:	2305      	movs	r3, #5
 8001e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e6c:	f107 031c 	add.w	r3, r7, #28
 8001e70:	4619      	mov	r1, r3
 8001e72:	481f      	ldr	r0, [pc, #124]	; (8001ef0 <HAL_SPI_MspInit+0xf4>)
 8001e74:	f001 fe68 	bl	8003b48 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001e78:	e031      	b.n	8001ede <HAL_SPI_MspInit+0xe2>
  else if(spiHandle->Instance==SPI3)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a1d      	ldr	r2, [pc, #116]	; (8001ef4 <HAL_SPI_MspInit+0xf8>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d12c      	bne.n	8001ede <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001e84:	2300      	movs	r3, #0
 8001e86:	613b      	str	r3, [r7, #16]
 8001e88:	4b18      	ldr	r3, [pc, #96]	; (8001eec <HAL_SPI_MspInit+0xf0>)
 8001e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8c:	4a17      	ldr	r2, [pc, #92]	; (8001eec <HAL_SPI_MspInit+0xf0>)
 8001e8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e92:	6413      	str	r3, [r2, #64]	; 0x40
 8001e94:	4b15      	ldr	r3, [pc, #84]	; (8001eec <HAL_SPI_MspInit+0xf0>)
 8001e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e9c:	613b      	str	r3, [r7, #16]
 8001e9e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	60fb      	str	r3, [r7, #12]
 8001ea4:	4b11      	ldr	r3, [pc, #68]	; (8001eec <HAL_SPI_MspInit+0xf0>)
 8001ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea8:	4a10      	ldr	r2, [pc, #64]	; (8001eec <HAL_SPI_MspInit+0xf0>)
 8001eaa:	f043 0304 	orr.w	r3, r3, #4
 8001eae:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb0:	4b0e      	ldr	r3, [pc, #56]	; (8001eec <HAL_SPI_MspInit+0xf0>)
 8001eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb4:	f003 0304 	and.w	r3, r3, #4
 8001eb8:	60fb      	str	r3, [r7, #12]
 8001eba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001ebc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001ec0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001ece:	2306      	movs	r3, #6
 8001ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ed2:	f107 031c 	add.w	r3, r7, #28
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	4807      	ldr	r0, [pc, #28]	; (8001ef8 <HAL_SPI_MspInit+0xfc>)
 8001eda:	f001 fe35 	bl	8003b48 <HAL_GPIO_Init>
}
 8001ede:	bf00      	nop
 8001ee0:	3730      	adds	r7, #48	; 0x30
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	40003800 	.word	0x40003800
 8001eec:	40023800 	.word	0x40023800
 8001ef0:	40020400 	.word	0x40020400
 8001ef4:	40003c00 	.word	0x40003c00
 8001ef8:	40020800 	.word	0x40020800

08001efc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f02:	2300      	movs	r3, #0
 8001f04:	607b      	str	r3, [r7, #4]
 8001f06:	4b10      	ldr	r3, [pc, #64]	; (8001f48 <HAL_MspInit+0x4c>)
 8001f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0a:	4a0f      	ldr	r2, [pc, #60]	; (8001f48 <HAL_MspInit+0x4c>)
 8001f0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f10:	6453      	str	r3, [r2, #68]	; 0x44
 8001f12:	4b0d      	ldr	r3, [pc, #52]	; (8001f48 <HAL_MspInit+0x4c>)
 8001f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f1a:	607b      	str	r3, [r7, #4]
 8001f1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f1e:	2300      	movs	r3, #0
 8001f20:	603b      	str	r3, [r7, #0]
 8001f22:	4b09      	ldr	r3, [pc, #36]	; (8001f48 <HAL_MspInit+0x4c>)
 8001f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f26:	4a08      	ldr	r2, [pc, #32]	; (8001f48 <HAL_MspInit+0x4c>)
 8001f28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f2e:	4b06      	ldr	r3, [pc, #24]	; (8001f48 <HAL_MspInit+0x4c>)
 8001f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f36:	603b      	str	r3, [r7, #0]
 8001f38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f3a:	bf00      	nop
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	40023800 	.word	0x40023800

08001f4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001f50:	bf00      	nop
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr

08001f5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f5e:	e7fe      	b.n	8001f5e <HardFault_Handler+0x4>

08001f60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f64:	e7fe      	b.n	8001f64 <MemManage_Handler+0x4>

08001f66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f66:	b480      	push	{r7}
 8001f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f6a:	e7fe      	b.n	8001f6a <BusFault_Handler+0x4>

08001f6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f70:	e7fe      	b.n	8001f70 <UsageFault_Handler+0x4>

08001f72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f72:	b480      	push	{r7}
 8001f74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f76:	bf00      	nop
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f84:	bf00      	nop
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr

08001f8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f92:	bf00      	nop
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fa0:	f000 fd24 	bl	80029ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fa4:	bf00      	nop
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001fac:	4803      	ldr	r0, [pc, #12]	; (8001fbc <ADC_IRQHandler+0x14>)
 8001fae:	f000 fda2 	bl	8002af6 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001fb2:	4803      	ldr	r0, [pc, #12]	; (8001fc0 <ADC_IRQHandler+0x18>)
 8001fb4:	f000 fd9f 	bl	8002af6 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001fb8:	bf00      	nop
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	20000268 	.word	0x20000268
 8001fc0:	20000220 	.word	0x20000220

08001fc4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001fc8:	4802      	ldr	r0, [pc, #8]	; (8001fd4 <USART1_IRQHandler+0x10>)
 8001fca:	f003 fef7 	bl	8005dbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	20000a78 	.word	0x20000a78

08001fd8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001fdc:	4802      	ldr	r0, [pc, #8]	; (8001fe8 <TIM6_DAC_IRQHandler+0x10>)
 8001fde:	f002 ff3f 	bl	8004e60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001fe2:	bf00      	nop
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	20000814 	.word	0x20000814

08001fec <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001ff0:	4802      	ldr	r0, [pc, #8]	; (8001ffc <DMA2_Stream0_IRQHandler+0x10>)
 8001ff2:	f001 fb41 	bl	8003678 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001ff6:	bf00      	nop
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	200002b0 	.word	0x200002b0

08002000 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002004:	4802      	ldr	r0, [pc, #8]	; (8002010 <DMA2_Stream2_IRQHandler+0x10>)
 8002006:	f001 fb37 	bl	8003678 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800200a:	bf00      	nop
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	20000a18 	.word	0x20000a18

08002014 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002018:	4802      	ldr	r0, [pc, #8]	; (8002024 <DMA2_Stream7_IRQHandler+0x10>)
 800201a:	f001 fb2d 	bl	8003678 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800201e:	bf00      	nop
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	200009b8 	.word	0x200009b8

08002028 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b086      	sub	sp, #24
 800202c:	af00      	add	r7, sp, #0
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	60b9      	str	r1, [r7, #8]
 8002032:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002034:	2300      	movs	r3, #0
 8002036:	617b      	str	r3, [r7, #20]
 8002038:	e00a      	b.n	8002050 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800203a:	f3af 8000 	nop.w
 800203e:	4601      	mov	r1, r0
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	1c5a      	adds	r2, r3, #1
 8002044:	60ba      	str	r2, [r7, #8]
 8002046:	b2ca      	uxtb	r2, r1
 8002048:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	3301      	adds	r3, #1
 800204e:	617b      	str	r3, [r7, #20]
 8002050:	697a      	ldr	r2, [r7, #20]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	429a      	cmp	r2, r3
 8002056:	dbf0      	blt.n	800203a <_read+0x12>
	}

return len;
 8002058:	687b      	ldr	r3, [r7, #4]
}
 800205a:	4618      	mov	r0, r3
 800205c:	3718      	adds	r7, #24
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}

08002062 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002062:	b580      	push	{r7, lr}
 8002064:	b086      	sub	sp, #24
 8002066:	af00      	add	r7, sp, #0
 8002068:	60f8      	str	r0, [r7, #12]
 800206a:	60b9      	str	r1, [r7, #8]
 800206c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800206e:	2300      	movs	r3, #0
 8002070:	617b      	str	r3, [r7, #20]
 8002072:	e009      	b.n	8002088 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	1c5a      	adds	r2, r3, #1
 8002078:	60ba      	str	r2, [r7, #8]
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	4618      	mov	r0, r3
 800207e:	f7ff fd49 	bl	8001b14 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	3301      	adds	r3, #1
 8002086:	617b      	str	r3, [r7, #20]
 8002088:	697a      	ldr	r2, [r7, #20]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	429a      	cmp	r2, r3
 800208e:	dbf1      	blt.n	8002074 <_write+0x12>
	}
	return len;
 8002090:	687b      	ldr	r3, [r7, #4]
}
 8002092:	4618      	mov	r0, r3
 8002094:	3718      	adds	r7, #24
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <_close>:

int _close(int file)
{
 800209a:	b480      	push	{r7}
 800209c:	b083      	sub	sp, #12
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
	return -1;
 80020a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr

080020b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020b2:	b480      	push	{r7}
 80020b4:	b083      	sub	sp, #12
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
 80020ba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020c2:	605a      	str	r2, [r3, #4]
	return 0;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr

080020d2 <_isatty>:

int _isatty(int file)
{
 80020d2:	b480      	push	{r7}
 80020d4:	b083      	sub	sp, #12
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
	return 1;
 80020da:	2301      	movs	r3, #1
}
 80020dc:	4618      	mov	r0, r3
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b085      	sub	sp, #20
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	60b9      	str	r1, [r7, #8]
 80020f2:	607a      	str	r2, [r7, #4]
	return 0;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3714      	adds	r7, #20
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
	...

08002104 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800210c:	4b11      	ldr	r3, [pc, #68]	; (8002154 <_sbrk+0x50>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d102      	bne.n	800211a <_sbrk+0x16>
		heap_end = &end;
 8002114:	4b0f      	ldr	r3, [pc, #60]	; (8002154 <_sbrk+0x50>)
 8002116:	4a10      	ldr	r2, [pc, #64]	; (8002158 <_sbrk+0x54>)
 8002118:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800211a:	4b0e      	ldr	r3, [pc, #56]	; (8002154 <_sbrk+0x50>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002120:	4b0c      	ldr	r3, [pc, #48]	; (8002154 <_sbrk+0x50>)
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4413      	add	r3, r2
 8002128:	466a      	mov	r2, sp
 800212a:	4293      	cmp	r3, r2
 800212c:	d907      	bls.n	800213e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800212e:	f004 fc8d 	bl	8006a4c <__errno>
 8002132:	4602      	mov	r2, r0
 8002134:	230c      	movs	r3, #12
 8002136:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002138:	f04f 33ff 	mov.w	r3, #4294967295
 800213c:	e006      	b.n	800214c <_sbrk+0x48>
	}

	heap_end += incr;
 800213e:	4b05      	ldr	r3, [pc, #20]	; (8002154 <_sbrk+0x50>)
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4413      	add	r3, r2
 8002146:	4a03      	ldr	r2, [pc, #12]	; (8002154 <_sbrk+0x50>)
 8002148:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800214a:	68fb      	ldr	r3, [r7, #12]
}
 800214c:	4618      	mov	r0, r3
 800214e:	3710      	adds	r7, #16
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	2000020c 	.word	0x2000020c
 8002158:	20000ac0 	.word	0x20000ac0

0800215c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002160:	4b08      	ldr	r3, [pc, #32]	; (8002184 <SystemInit+0x28>)
 8002162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002166:	4a07      	ldr	r2, [pc, #28]	; (8002184 <SystemInit+0x28>)
 8002168:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800216c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002170:	4b04      	ldr	r3, [pc, #16]	; (8002184 <SystemInit+0x28>)
 8002172:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002176:	609a      	str	r2, [r3, #8]
#endif
}
 8002178:	bf00      	nop
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	e000ed00 	.word	0xe000ed00

08002188 <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b08e      	sub	sp, #56	; 0x38
 800218c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800218e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002192:	2200      	movs	r2, #0
 8002194:	601a      	str	r2, [r3, #0]
 8002196:	605a      	str	r2, [r3, #4]
 8002198:	609a      	str	r2, [r3, #8]
 800219a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800219c:	f107 0320 	add.w	r3, r7, #32
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021a6:	1d3b      	adds	r3, r7, #4
 80021a8:	2200      	movs	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]
 80021ac:	605a      	str	r2, [r3, #4]
 80021ae:	609a      	str	r2, [r3, #8]
 80021b0:	60da      	str	r2, [r3, #12]
 80021b2:	611a      	str	r2, [r3, #16]
 80021b4:	615a      	str	r2, [r3, #20]
 80021b6:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 80021b8:	4b34      	ldr	r3, [pc, #208]	; (800228c <MX_TIM2_Init+0x104>)
 80021ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 50000-1;
 80021c0:	4b32      	ldr	r3, [pc, #200]	; (800228c <MX_TIM2_Init+0x104>)
 80021c2:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80021c6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80021c8:	4b30      	ldr	r3, [pc, #192]	; (800228c <MX_TIM2_Init+0x104>)
 80021ca:	2220      	movs	r2, #32
 80021cc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 500-1;
 80021ce:	4b2f      	ldr	r3, [pc, #188]	; (800228c <MX_TIM2_Init+0x104>)
 80021d0:	f240 12f3 	movw	r2, #499	; 0x1f3
 80021d4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021d6:	4b2d      	ldr	r3, [pc, #180]	; (800228c <MX_TIM2_Init+0x104>)
 80021d8:	2200      	movs	r2, #0
 80021da:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80021dc:	4b2b      	ldr	r3, [pc, #172]	; (800228c <MX_TIM2_Init+0x104>)
 80021de:	2280      	movs	r2, #128	; 0x80
 80021e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80021e2:	482a      	ldr	r0, [pc, #168]	; (800228c <MX_TIM2_Init+0x104>)
 80021e4:	f002 fd84 	bl	8004cf0 <HAL_TIM_Base_Init>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80021ee:	f7ff fd91 	bl	8001d14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021f6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80021f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021fc:	4619      	mov	r1, r3
 80021fe:	4823      	ldr	r0, [pc, #140]	; (800228c <MX_TIM2_Init+0x104>)
 8002200:	f002 fffc 	bl	80051fc <HAL_TIM_ConfigClockSource>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800220a:	f7ff fd83 	bl	8001d14 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800220e:	481f      	ldr	r0, [pc, #124]	; (800228c <MX_TIM2_Init+0x104>)
 8002210:	f002 fdbd 	bl	8004d8e <HAL_TIM_PWM_Init>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800221a:	f7ff fd7b 	bl	8001d14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 800221e:	2350      	movs	r3, #80	; 0x50
 8002220:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002222:	2300      	movs	r3, #0
 8002224:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002226:	f107 0320 	add.w	r3, r7, #32
 800222a:	4619      	mov	r1, r3
 800222c:	4817      	ldr	r0, [pc, #92]	; (800228c <MX_TIM2_Init+0x104>)
 800222e:	f003 fbd5 	bl	80059dc <HAL_TIMEx_MasterConfigSynchronization>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002238:	f7ff fd6c 	bl	8001d14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800223c:	2360      	movs	r3, #96	; 0x60
 800223e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002240:	2300      	movs	r3, #0
 8002242:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002244:	2300      	movs	r3, #0
 8002246:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002248:	2300      	movs	r3, #0
 800224a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800224c:	1d3b      	adds	r3, r7, #4
 800224e:	2200      	movs	r2, #0
 8002250:	4619      	mov	r1, r3
 8002252:	480e      	ldr	r0, [pc, #56]	; (800228c <MX_TIM2_Init+0x104>)
 8002254:	f002 ff0c 	bl	8005070 <HAL_TIM_PWM_ConfigChannel>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800225e:	f7ff fd59 	bl	8001d14 <Error_Handler>
  }
  sConfigOC.Pulse = 498;
 8002262:	f44f 73f9 	mov.w	r3, #498	; 0x1f2
 8002266:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002268:	1d3b      	adds	r3, r7, #4
 800226a:	2204      	movs	r2, #4
 800226c:	4619      	mov	r1, r3
 800226e:	4807      	ldr	r0, [pc, #28]	; (800228c <MX_TIM2_Init+0x104>)
 8002270:	f002 fefe 	bl	8005070 <HAL_TIM_PWM_ConfigChannel>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <MX_TIM2_Init+0xf6>
  {
    Error_Handler();
 800227a:	f7ff fd4b 	bl	8001d14 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 800227e:	4803      	ldr	r0, [pc, #12]	; (800228c <MX_TIM2_Init+0x104>)
 8002280:	f000 f942 	bl	8002508 <HAL_TIM_MspPostInit>

}
 8002284:	bf00      	nop
 8002286:	3738      	adds	r7, #56	; 0x38
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	20000854 	.word	0x20000854

08002290 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002296:	463b      	mov	r3, r7
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]
 800229c:	605a      	str	r2, [r3, #4]

  htim6.Instance = TIM6;
 800229e:	4b15      	ldr	r3, [pc, #84]	; (80022f4 <MX_TIM6_Init+0x64>)
 80022a0:	4a15      	ldr	r2, [pc, #84]	; (80022f8 <MX_TIM6_Init+0x68>)
 80022a2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80022a4:	4b13      	ldr	r3, [pc, #76]	; (80022f4 <MX_TIM6_Init+0x64>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022aa:	4b12      	ldr	r3, [pc, #72]	; (80022f4 <MX_TIM6_Init+0x64>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 5000;
 80022b0:	4b10      	ldr	r3, [pc, #64]	; (80022f4 <MX_TIM6_Init+0x64>)
 80022b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022b6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022b8:	4b0e      	ldr	r3, [pc, #56]	; (80022f4 <MX_TIM6_Init+0x64>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80022be:	480d      	ldr	r0, [pc, #52]	; (80022f4 <MX_TIM6_Init+0x64>)
 80022c0:	f002 fd16 	bl	8004cf0 <HAL_TIM_Base_Init>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80022ca:	f7ff fd23 	bl	8001d14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022ce:	2300      	movs	r3, #0
 80022d0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022d2:	2300      	movs	r3, #0
 80022d4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80022d6:	463b      	mov	r3, r7
 80022d8:	4619      	mov	r1, r3
 80022da:	4806      	ldr	r0, [pc, #24]	; (80022f4 <MX_TIM6_Init+0x64>)
 80022dc:	f003 fb7e 	bl	80059dc <HAL_TIMEx_MasterConfigSynchronization>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80022e6:	f7ff fd15 	bl	8001d14 <Error_Handler>
  }

}
 80022ea:	bf00      	nop
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	20000814 	.word	0x20000814
 80022f8:	40001000 	.word	0x40001000

080022fc <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b092      	sub	sp, #72	; 0x48
 8002300:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002302:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002306:	2200      	movs	r2, #0
 8002308:	601a      	str	r2, [r3, #0]
 800230a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800230c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	605a      	str	r2, [r3, #4]
 8002316:	609a      	str	r2, [r3, #8]
 8002318:	60da      	str	r2, [r3, #12]
 800231a:	611a      	str	r2, [r3, #16]
 800231c:	615a      	str	r2, [r3, #20]
 800231e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002320:	1d3b      	adds	r3, r7, #4
 8002322:	2220      	movs	r2, #32
 8002324:	2100      	movs	r1, #0
 8002326:	4618      	mov	r0, r3
 8002328:	f004 fbba 	bl	8006aa0 <memset>

  htim8.Instance = TIM8;
 800232c:	4b45      	ldr	r3, [pc, #276]	; (8002444 <MX_TIM8_Init+0x148>)
 800232e:	4a46      	ldr	r2, [pc, #280]	; (8002448 <MX_TIM8_Init+0x14c>)
 8002330:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002332:	4b44      	ldr	r3, [pc, #272]	; (8002444 <MX_TIM8_Init+0x148>)
 8002334:	2200      	movs	r2, #0
 8002336:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8002338:	4b42      	ldr	r3, [pc, #264]	; (8002444 <MX_TIM8_Init+0x148>)
 800233a:	2220      	movs	r2, #32
 800233c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1250-1;
 800233e:	4b41      	ldr	r3, [pc, #260]	; (8002444 <MX_TIM8_Init+0x148>)
 8002340:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8002344:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002346:	4b3f      	ldr	r3, [pc, #252]	; (8002444 <MX_TIM8_Init+0x148>)
 8002348:	2200      	movs	r2, #0
 800234a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800234c:	4b3d      	ldr	r3, [pc, #244]	; (8002444 <MX_TIM8_Init+0x148>)
 800234e:	2200      	movs	r2, #0
 8002350:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002352:	4b3c      	ldr	r3, [pc, #240]	; (8002444 <MX_TIM8_Init+0x148>)
 8002354:	2200      	movs	r2, #0
 8002356:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002358:	483a      	ldr	r0, [pc, #232]	; (8002444 <MX_TIM8_Init+0x148>)
 800235a:	f002 fd18 	bl	8004d8e <HAL_TIM_PWM_Init>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8002364:	f7ff fcd6 	bl	8001d14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002368:	2300      	movs	r3, #0
 800236a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800236c:	2300      	movs	r3, #0
 800236e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002370:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002374:	4619      	mov	r1, r3
 8002376:	4833      	ldr	r0, [pc, #204]	; (8002444 <MX_TIM8_Init+0x148>)
 8002378:	f003 fb30 	bl	80059dc <HAL_TIMEx_MasterConfigSynchronization>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8002382:	f7ff fcc7 	bl	8001d14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002386:	2360      	movs	r3, #96	; 0x60
 8002388:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800238a:	2300      	movs	r3, #0
 800238c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800238e:	2300      	movs	r3, #0
 8002390:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002392:	2300      	movs	r3, #0
 8002394:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002396:	2300      	movs	r3, #0
 8002398:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800239a:	2300      	movs	r3, #0
 800239c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800239e:	2300      	movs	r3, #0
 80023a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023a6:	2200      	movs	r2, #0
 80023a8:	4619      	mov	r1, r3
 80023aa:	4826      	ldr	r0, [pc, #152]	; (8002444 <MX_TIM8_Init+0x148>)
 80023ac:	f002 fe60 	bl	8005070 <HAL_TIM_PWM_ConfigChannel>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 80023b6:	f7ff fcad 	bl	8001d14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80023ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023be:	2204      	movs	r2, #4
 80023c0:	4619      	mov	r1, r3
 80023c2:	4820      	ldr	r0, [pc, #128]	; (8002444 <MX_TIM8_Init+0x148>)
 80023c4:	f002 fe54 	bl	8005070 <HAL_TIM_PWM_ConfigChannel>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 80023ce:	f7ff fca1 	bl	8001d14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80023d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023d6:	2208      	movs	r2, #8
 80023d8:	4619      	mov	r1, r3
 80023da:	481a      	ldr	r0, [pc, #104]	; (8002444 <MX_TIM8_Init+0x148>)
 80023dc:	f002 fe48 	bl	8005070 <HAL_TIM_PWM_ConfigChannel>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <MX_TIM8_Init+0xee>
  {
    Error_Handler();
 80023e6:	f7ff fc95 	bl	8001d14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80023ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023ee:	220c      	movs	r2, #12
 80023f0:	4619      	mov	r1, r3
 80023f2:	4814      	ldr	r0, [pc, #80]	; (8002444 <MX_TIM8_Init+0x148>)
 80023f4:	f002 fe3c 	bl	8005070 <HAL_TIM_PWM_ConfigChannel>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <MX_TIM8_Init+0x106>
  {
    Error_Handler();
 80023fe:	f7ff fc89 	bl	8001d14 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002402:	2300      	movs	r3, #0
 8002404:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002406:	2300      	movs	r3, #0
 8002408:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800240a:	2300      	movs	r3, #0
 800240c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800240e:	2300      	movs	r3, #0
 8002410:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002412:	2300      	movs	r3, #0
 8002414:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002416:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800241a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800241c:	2300      	movs	r3, #0
 800241e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002420:	1d3b      	adds	r3, r7, #4
 8002422:	4619      	mov	r1, r3
 8002424:	4807      	ldr	r0, [pc, #28]	; (8002444 <MX_TIM8_Init+0x148>)
 8002426:	f003 fb55 	bl	8005ad4 <HAL_TIMEx_ConfigBreakDeadTime>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d001      	beq.n	8002434 <MX_TIM8_Init+0x138>
  {
    Error_Handler();
 8002430:	f7ff fc70 	bl	8001d14 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 8002434:	4803      	ldr	r0, [pc, #12]	; (8002444 <MX_TIM8_Init+0x148>)
 8002436:	f000 f867 	bl	8002508 <HAL_TIM_MspPostInit>

}
 800243a:	bf00      	nop
 800243c:	3748      	adds	r7, #72	; 0x48
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	200007d4 	.word	0x200007d4
 8002448:	40010400 	.word	0x40010400

0800244c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800245c:	d10e      	bne.n	800247c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800245e:	2300      	movs	r3, #0
 8002460:	60fb      	str	r3, [r7, #12]
 8002462:	4b16      	ldr	r3, [pc, #88]	; (80024bc <HAL_TIM_Base_MspInit+0x70>)
 8002464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002466:	4a15      	ldr	r2, [pc, #84]	; (80024bc <HAL_TIM_Base_MspInit+0x70>)
 8002468:	f043 0301 	orr.w	r3, r3, #1
 800246c:	6413      	str	r3, [r2, #64]	; 0x40
 800246e:	4b13      	ldr	r3, [pc, #76]	; (80024bc <HAL_TIM_Base_MspInit+0x70>)
 8002470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	60fb      	str	r3, [r7, #12]
 8002478:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800247a:	e01a      	b.n	80024b2 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM6)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a0f      	ldr	r2, [pc, #60]	; (80024c0 <HAL_TIM_Base_MspInit+0x74>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d115      	bne.n	80024b2 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002486:	2300      	movs	r3, #0
 8002488:	60bb      	str	r3, [r7, #8]
 800248a:	4b0c      	ldr	r3, [pc, #48]	; (80024bc <HAL_TIM_Base_MspInit+0x70>)
 800248c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248e:	4a0b      	ldr	r2, [pc, #44]	; (80024bc <HAL_TIM_Base_MspInit+0x70>)
 8002490:	f043 0310 	orr.w	r3, r3, #16
 8002494:	6413      	str	r3, [r2, #64]	; 0x40
 8002496:	4b09      	ldr	r3, [pc, #36]	; (80024bc <HAL_TIM_Base_MspInit+0x70>)
 8002498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249a:	f003 0310 	and.w	r3, r3, #16
 800249e:	60bb      	str	r3, [r7, #8]
 80024a0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80024a2:	2200      	movs	r2, #0
 80024a4:	2100      	movs	r1, #0
 80024a6:	2036      	movs	r0, #54	; 0x36
 80024a8:	f000 ff87 	bl	80033ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80024ac:	2036      	movs	r0, #54	; 0x36
 80024ae:	f000 ffa0 	bl	80033f2 <HAL_NVIC_EnableIRQ>
}
 80024b2:	bf00      	nop
 80024b4:	3710      	adds	r7, #16
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	40023800 	.word	0x40023800
 80024c0:	40001000 	.word	0x40001000

080024c4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b085      	sub	sp, #20
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM8)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a0b      	ldr	r2, [pc, #44]	; (8002500 <HAL_TIM_PWM_MspInit+0x3c>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d10d      	bne.n	80024f2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80024d6:	2300      	movs	r3, #0
 80024d8:	60fb      	str	r3, [r7, #12]
 80024da:	4b0a      	ldr	r3, [pc, #40]	; (8002504 <HAL_TIM_PWM_MspInit+0x40>)
 80024dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024de:	4a09      	ldr	r2, [pc, #36]	; (8002504 <HAL_TIM_PWM_MspInit+0x40>)
 80024e0:	f043 0302 	orr.w	r3, r3, #2
 80024e4:	6453      	str	r3, [r2, #68]	; 0x44
 80024e6:	4b07      	ldr	r3, [pc, #28]	; (8002504 <HAL_TIM_PWM_MspInit+0x40>)
 80024e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	60fb      	str	r3, [r7, #12]
 80024f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80024f2:	bf00      	nop
 80024f4:	3714      	adds	r7, #20
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	40010400 	.word	0x40010400
 8002504:	40023800 	.word	0x40023800

08002508 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b08a      	sub	sp, #40	; 0x28
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002510:	f107 0314 	add.w	r3, r7, #20
 8002514:	2200      	movs	r2, #0
 8002516:	601a      	str	r2, [r3, #0]
 8002518:	605a      	str	r2, [r3, #4]
 800251a:	609a      	str	r2, [r3, #8]
 800251c:	60da      	str	r2, [r3, #12]
 800251e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002528:	d11e      	bne.n	8002568 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800252a:	2300      	movs	r3, #0
 800252c:	613b      	str	r3, [r7, #16]
 800252e:	4b22      	ldr	r3, [pc, #136]	; (80025b8 <HAL_TIM_MspPostInit+0xb0>)
 8002530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002532:	4a21      	ldr	r2, [pc, #132]	; (80025b8 <HAL_TIM_MspPostInit+0xb0>)
 8002534:	f043 0301 	orr.w	r3, r3, #1
 8002538:	6313      	str	r3, [r2, #48]	; 0x30
 800253a:	4b1f      	ldr	r3, [pc, #124]	; (80025b8 <HAL_TIM_MspPostInit+0xb0>)
 800253c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	613b      	str	r3, [r7, #16]
 8002544:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA5     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002546:	2320      	movs	r3, #32
 8002548:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800254a:	2302      	movs	r3, #2
 800254c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254e:	2300      	movs	r3, #0
 8002550:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002552:	2300      	movs	r3, #0
 8002554:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002556:	2301      	movs	r3, #1
 8002558:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800255a:	f107 0314 	add.w	r3, r7, #20
 800255e:	4619      	mov	r1, r3
 8002560:	4816      	ldr	r0, [pc, #88]	; (80025bc <HAL_TIM_MspPostInit+0xb4>)
 8002562:	f001 faf1 	bl	8003b48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002566:	e023      	b.n	80025b0 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM8)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a14      	ldr	r2, [pc, #80]	; (80025c0 <HAL_TIM_MspPostInit+0xb8>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d11e      	bne.n	80025b0 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002572:	2300      	movs	r3, #0
 8002574:	60fb      	str	r3, [r7, #12]
 8002576:	4b10      	ldr	r3, [pc, #64]	; (80025b8 <HAL_TIM_MspPostInit+0xb0>)
 8002578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257a:	4a0f      	ldr	r2, [pc, #60]	; (80025b8 <HAL_TIM_MspPostInit+0xb0>)
 800257c:	f043 0304 	orr.w	r3, r3, #4
 8002580:	6313      	str	r3, [r2, #48]	; 0x30
 8002582:	4b0d      	ldr	r3, [pc, #52]	; (80025b8 <HAL_TIM_MspPostInit+0xb0>)
 8002584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002586:	f003 0304 	and.w	r3, r3, #4
 800258a:	60fb      	str	r3, [r7, #12]
 800258c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 800258e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002592:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002594:	2302      	movs	r3, #2
 8002596:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002598:	2300      	movs	r3, #0
 800259a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800259c:	2303      	movs	r3, #3
 800259e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80025a0:	2303      	movs	r3, #3
 80025a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025a4:	f107 0314 	add.w	r3, r7, #20
 80025a8:	4619      	mov	r1, r3
 80025aa:	4806      	ldr	r0, [pc, #24]	; (80025c4 <HAL_TIM_MspPostInit+0xbc>)
 80025ac:	f001 facc 	bl	8003b48 <HAL_GPIO_Init>
}
 80025b0:	bf00      	nop
 80025b2:	3728      	adds	r7, #40	; 0x28
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	40023800 	.word	0x40023800
 80025bc:	40020000 	.word	0x40020000
 80025c0:	40010400 	.word	0x40010400
 80025c4:	40020800 	.word	0x40020800

080025c8 <uart_com_send_it>:
    uart_com_putc(value.u32_val&0xFF);
    uart_com_putc(UART_COM_END_0);
    uart_com_putc(UART_COM_END_1);
}

void uart_com_send_it(UART_HandleTypeDef *huart) {
 80025c8:	b590      	push	{r4, r7, lr}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
    if(uart_com_ring_tx.huart != huart) return;
 80025d0:	4b18      	ldr	r3, [pc, #96]	; (8002634 <uart_com_send_it+0x6c>)
 80025d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d127      	bne.n	800262c <uart_com_send_it+0x64>

    uart_com_ring_forward_r_ptr(&uart_com_ring_tx, previous_send_len);
 80025dc:	4b16      	ldr	r3, [pc, #88]	; (8002638 <uart_com_send_it+0x70>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4619      	mov	r1, r3
 80025e2:	4814      	ldr	r0, [pc, #80]	; (8002634 <uart_com_send_it+0x6c>)
 80025e4:	f000 f87c 	bl	80026e0 <uart_com_ring_forward_r_ptr>
    uint16_t len = (uint16_t)uart_com_ring_available_linear(&uart_com_ring_tx);
 80025e8:	4812      	ldr	r0, [pc, #72]	; (8002634 <uart_com_send_it+0x6c>)
 80025ea:	f000 f847 	bl	800267c <uart_com_ring_available_linear>
 80025ee:	4603      	mov	r3, r0
 80025f0:	81fb      	strh	r3, [r7, #14]
    if (len > 0 ) {
 80025f2:	89fb      	ldrh	r3, [r7, #14]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d015      	beq.n	8002624 <uart_com_send_it+0x5c>
        previous_send_len = len;
 80025f8:	89fb      	ldrh	r3, [r7, #14]
 80025fa:	4a0f      	ldr	r2, [pc, #60]	; (8002638 <uart_com_send_it+0x70>)
 80025fc:	6013      	str	r3, [r2, #0]
        send_lock = 1;
 80025fe:	4b0f      	ldr	r3, [pc, #60]	; (800263c <uart_com_send_it+0x74>)
 8002600:	2201      	movs	r2, #1
 8002602:	601a      	str	r2, [r3, #0]
        HAL_UART_Transmit_DMA(uart_com_ring_tx.huart, uart_com_ring_tx.buf+uart_com_ring_get_r_ptr(&uart_com_ring_tx), len);
 8002604:	4b0b      	ldr	r3, [pc, #44]	; (8002634 <uart_com_send_it+0x6c>)
 8002606:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 800260a:	480a      	ldr	r0, [pc, #40]	; (8002634 <uart_com_send_it+0x6c>)
 800260c:	f000 f85a 	bl	80026c4 <uart_com_ring_get_r_ptr>
 8002610:	4603      	mov	r3, r0
 8002612:	461a      	mov	r2, r3
 8002614:	4b07      	ldr	r3, [pc, #28]	; (8002634 <uart_com_send_it+0x6c>)
 8002616:	4413      	add	r3, r2
 8002618:	89fa      	ldrh	r2, [r7, #14]
 800261a:	4619      	mov	r1, r3
 800261c:	4620      	mov	r0, r4
 800261e:	f003 fb61 	bl	8005ce4 <HAL_UART_Transmit_DMA>
 8002622:	e004      	b.n	800262e <uart_com_send_it+0x66>
    }else{
        send_lock = 0;
 8002624:	4b05      	ldr	r3, [pc, #20]	; (800263c <uart_com_send_it+0x74>)
 8002626:	2200      	movs	r2, #0
 8002628:	601a      	str	r2, [r3, #0]
 800262a:	e000      	b.n	800262e <uart_com_send_it+0x66>
    if(uart_com_ring_tx.huart != huart) return;
 800262c:	bf00      	nop
    }
}
 800262e:	3714      	adds	r7, #20
 8002630:	46bd      	mov	sp, r7
 8002632:	bd90      	pop	{r4, r7, pc}
 8002634:	20000898 	.word	0x20000898
 8002638:	20000214 	.word	0x20000214
 800263c:	20000210 	.word	0x20000210

08002640 <update_w_ptr>:
#include "main.h"
#include <stdio.h>

static void update_w_ptr(struct ring_buf *ring){
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
    if(ring->type == RING_TYPE_RX_CIRCULAR){
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800264e:	2b01      	cmp	r3, #1
 8002650:	d10e      	bne.n	8002670 <update_w_ptr+0x30>
        ring->w_ptr = (uint16_t) ((ring->buf_size - ring->huart->hdmarx->Instance->W_PTR) & 0xFFFF);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f8b3 2080 	ldrh.w	r2, [r3, #128]	; 0x80
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800265e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	b29b      	uxth	r3, r3
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	b29a      	uxth	r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
    }
}
 8002670:	bf00      	nop
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <uart_com_ring_available_linear>:
    }else{
        return ring->buf_size + ring->w_ptr - ring->r_ptr;
    }
}

int uart_com_ring_available_linear(struct ring_buf *ring){
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
    update_w_ptr(ring);
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f7ff ffdb 	bl	8002640 <update_w_ptr>

    if(ring->w_ptr >= ring->r_ptr){
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8002696:	429a      	cmp	r2, r3
 8002698:	d308      	bcc.n	80026ac <uart_com_ring_available_linear+0x30>
        return ring->w_ptr - ring->r_ptr;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 80026a0:	461a      	mov	r2, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	e007      	b.n	80026bc <uart_com_ring_available_linear+0x40>
    }else{
        return ring->buf_size - ring->r_ptr;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 80026b2:	461a      	mov	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80026ba:	1ad3      	subs	r3, r2, r3
    }
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3708      	adds	r7, #8
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <uart_com_ring_get_r_ptr>:
    update_w_ptr(ring);

    return ring->w_ptr;
}

uint16_t uart_com_ring_get_r_ptr(struct ring_buf *ring){
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
    update_w_ptr(ring);
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f7ff ffb7 	bl	8002640 <update_w_ptr>

    return ring->r_ptr;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3708      	adds	r7, #8
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <uart_com_ring_forward_r_ptr>:

void uart_com_ring_forward_r_ptr(struct ring_buf *ring, int len){
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
    update_w_ptr(ring);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f7ff ffa8 	bl	8002640 <update_w_ptr>

    while(len > 0){
 80026f0:	e018      	b.n	8002724 <uart_com_ring_forward_r_ptr+0x44>
        if(ring->r_ptr+1 >= ring->buf_size){
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80026f8:	3301      	adds	r3, #1
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	f8b2 2080 	ldrh.w	r2, [r2, #128]	; 0x80
 8002700:	4293      	cmp	r3, r2
 8002702:	db04      	blt.n	800270e <uart_com_ring_forward_r_ptr+0x2e>
            ring->r_ptr = 0;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 800270c:	e007      	b.n	800271e <uart_com_ring_forward_r_ptr+0x3e>
        }else{
            ring->r_ptr += 1;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8002714:	3301      	adds	r3, #1
 8002716:	b29a      	uxth	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
        }
        len--;
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	3b01      	subs	r3, #1
 8002722:	603b      	str	r3, [r7, #0]
    while(len > 0){
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	2b00      	cmp	r3, #0
 8002728:	dce3      	bgt.n	80026f2 <uart_com_ring_forward_r_ptr+0x12>
    }
}
 800272a:	bf00      	nop
 800272c:	3708      	adds	r7, #8
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
	...

08002734 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8002738:	4b11      	ldr	r3, [pc, #68]	; (8002780 <MX_USART1_UART_Init+0x4c>)
 800273a:	4a12      	ldr	r2, [pc, #72]	; (8002784 <MX_USART1_UART_Init+0x50>)
 800273c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800273e:	4b10      	ldr	r3, [pc, #64]	; (8002780 <MX_USART1_UART_Init+0x4c>)
 8002740:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002744:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002746:	4b0e      	ldr	r3, [pc, #56]	; (8002780 <MX_USART1_UART_Init+0x4c>)
 8002748:	2200      	movs	r2, #0
 800274a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800274c:	4b0c      	ldr	r3, [pc, #48]	; (8002780 <MX_USART1_UART_Init+0x4c>)
 800274e:	2200      	movs	r2, #0
 8002750:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002752:	4b0b      	ldr	r3, [pc, #44]	; (8002780 <MX_USART1_UART_Init+0x4c>)
 8002754:	2200      	movs	r2, #0
 8002756:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002758:	4b09      	ldr	r3, [pc, #36]	; (8002780 <MX_USART1_UART_Init+0x4c>)
 800275a:	220c      	movs	r2, #12
 800275c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800275e:	4b08      	ldr	r3, [pc, #32]	; (8002780 <MX_USART1_UART_Init+0x4c>)
 8002760:	2200      	movs	r2, #0
 8002762:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002764:	4b06      	ldr	r3, [pc, #24]	; (8002780 <MX_USART1_UART_Init+0x4c>)
 8002766:	2200      	movs	r2, #0
 8002768:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800276a:	4805      	ldr	r0, [pc, #20]	; (8002780 <MX_USART1_UART_Init+0x4c>)
 800276c:	f003 fa18 	bl	8005ba0 <HAL_UART_Init>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002776:	f7ff facd 	bl	8001d14 <Error_Handler>
  }

}
 800277a:	bf00      	nop
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	20000a78 	.word	0x20000a78
 8002784:	40011000 	.word	0x40011000

08002788 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b08a      	sub	sp, #40	; 0x28
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002790:	f107 0314 	add.w	r3, r7, #20
 8002794:	2200      	movs	r2, #0
 8002796:	601a      	str	r2, [r3, #0]
 8002798:	605a      	str	r2, [r3, #4]
 800279a:	609a      	str	r2, [r3, #8]
 800279c:	60da      	str	r2, [r3, #12]
 800279e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a4c      	ldr	r2, [pc, #304]	; (80028d8 <HAL_UART_MspInit+0x150>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	f040 8092 	bne.w	80028d0 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80027ac:	2300      	movs	r3, #0
 80027ae:	613b      	str	r3, [r7, #16]
 80027b0:	4b4a      	ldr	r3, [pc, #296]	; (80028dc <HAL_UART_MspInit+0x154>)
 80027b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b4:	4a49      	ldr	r2, [pc, #292]	; (80028dc <HAL_UART_MspInit+0x154>)
 80027b6:	f043 0310 	orr.w	r3, r3, #16
 80027ba:	6453      	str	r3, [r2, #68]	; 0x44
 80027bc:	4b47      	ldr	r3, [pc, #284]	; (80028dc <HAL_UART_MspInit+0x154>)
 80027be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c0:	f003 0310 	and.w	r3, r3, #16
 80027c4:	613b      	str	r3, [r7, #16]
 80027c6:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027c8:	2300      	movs	r3, #0
 80027ca:	60fb      	str	r3, [r7, #12]
 80027cc:	4b43      	ldr	r3, [pc, #268]	; (80028dc <HAL_UART_MspInit+0x154>)
 80027ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d0:	4a42      	ldr	r2, [pc, #264]	; (80028dc <HAL_UART_MspInit+0x154>)
 80027d2:	f043 0301 	orr.w	r3, r3, #1
 80027d6:	6313      	str	r3, [r2, #48]	; 0x30
 80027d8:	4b40      	ldr	r3, [pc, #256]	; (80028dc <HAL_UART_MspInit+0x154>)
 80027da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027dc:	f003 0301 	and.w	r3, r3, #1
 80027e0:	60fb      	str	r3, [r7, #12]
 80027e2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80027e4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80027e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ea:	2302      	movs	r3, #2
 80027ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ee:	2300      	movs	r3, #0
 80027f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027f2:	2303      	movs	r3, #3
 80027f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80027f6:	2307      	movs	r3, #7
 80027f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027fa:	f107 0314 	add.w	r3, r7, #20
 80027fe:	4619      	mov	r1, r3
 8002800:	4837      	ldr	r0, [pc, #220]	; (80028e0 <HAL_UART_MspInit+0x158>)
 8002802:	f001 f9a1 	bl	8003b48 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002806:	4b37      	ldr	r3, [pc, #220]	; (80028e4 <HAL_UART_MspInit+0x15c>)
 8002808:	4a37      	ldr	r2, [pc, #220]	; (80028e8 <HAL_UART_MspInit+0x160>)
 800280a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800280c:	4b35      	ldr	r3, [pc, #212]	; (80028e4 <HAL_UART_MspInit+0x15c>)
 800280e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002812:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002814:	4b33      	ldr	r3, [pc, #204]	; (80028e4 <HAL_UART_MspInit+0x15c>)
 8002816:	2200      	movs	r2, #0
 8002818:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800281a:	4b32      	ldr	r3, [pc, #200]	; (80028e4 <HAL_UART_MspInit+0x15c>)
 800281c:	2200      	movs	r2, #0
 800281e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002820:	4b30      	ldr	r3, [pc, #192]	; (80028e4 <HAL_UART_MspInit+0x15c>)
 8002822:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002826:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002828:	4b2e      	ldr	r3, [pc, #184]	; (80028e4 <HAL_UART_MspInit+0x15c>)
 800282a:	2200      	movs	r2, #0
 800282c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800282e:	4b2d      	ldr	r3, [pc, #180]	; (80028e4 <HAL_UART_MspInit+0x15c>)
 8002830:	2200      	movs	r2, #0
 8002832:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002834:	4b2b      	ldr	r3, [pc, #172]	; (80028e4 <HAL_UART_MspInit+0x15c>)
 8002836:	f44f 7280 	mov.w	r2, #256	; 0x100
 800283a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800283c:	4b29      	ldr	r3, [pc, #164]	; (80028e4 <HAL_UART_MspInit+0x15c>)
 800283e:	2200      	movs	r2, #0
 8002840:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002842:	4b28      	ldr	r3, [pc, #160]	; (80028e4 <HAL_UART_MspInit+0x15c>)
 8002844:	2200      	movs	r2, #0
 8002846:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002848:	4826      	ldr	r0, [pc, #152]	; (80028e4 <HAL_UART_MspInit+0x15c>)
 800284a:	f000 fded 	bl	8003428 <HAL_DMA_Init>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d001      	beq.n	8002858 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8002854:	f7ff fa5e 	bl	8001d14 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	4a22      	ldr	r2, [pc, #136]	; (80028e4 <HAL_UART_MspInit+0x15c>)
 800285c:	635a      	str	r2, [r3, #52]	; 0x34
 800285e:	4a21      	ldr	r2, [pc, #132]	; (80028e4 <HAL_UART_MspInit+0x15c>)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002864:	4b21      	ldr	r3, [pc, #132]	; (80028ec <HAL_UART_MspInit+0x164>)
 8002866:	4a22      	ldr	r2, [pc, #136]	; (80028f0 <HAL_UART_MspInit+0x168>)
 8002868:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800286a:	4b20      	ldr	r3, [pc, #128]	; (80028ec <HAL_UART_MspInit+0x164>)
 800286c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002870:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002872:	4b1e      	ldr	r3, [pc, #120]	; (80028ec <HAL_UART_MspInit+0x164>)
 8002874:	2240      	movs	r2, #64	; 0x40
 8002876:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002878:	4b1c      	ldr	r3, [pc, #112]	; (80028ec <HAL_UART_MspInit+0x164>)
 800287a:	2200      	movs	r2, #0
 800287c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800287e:	4b1b      	ldr	r3, [pc, #108]	; (80028ec <HAL_UART_MspInit+0x164>)
 8002880:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002884:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002886:	4b19      	ldr	r3, [pc, #100]	; (80028ec <HAL_UART_MspInit+0x164>)
 8002888:	2200      	movs	r2, #0
 800288a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800288c:	4b17      	ldr	r3, [pc, #92]	; (80028ec <HAL_UART_MspInit+0x164>)
 800288e:	2200      	movs	r2, #0
 8002890:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002892:	4b16      	ldr	r3, [pc, #88]	; (80028ec <HAL_UART_MspInit+0x164>)
 8002894:	2200      	movs	r2, #0
 8002896:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002898:	4b14      	ldr	r3, [pc, #80]	; (80028ec <HAL_UART_MspInit+0x164>)
 800289a:	2200      	movs	r2, #0
 800289c:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800289e:	4b13      	ldr	r3, [pc, #76]	; (80028ec <HAL_UART_MspInit+0x164>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80028a4:	4811      	ldr	r0, [pc, #68]	; (80028ec <HAL_UART_MspInit+0x164>)
 80028a6:	f000 fdbf 	bl	8003428 <HAL_DMA_Init>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d001      	beq.n	80028b4 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 80028b0:	f7ff fa30 	bl	8001d14 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4a0d      	ldr	r2, [pc, #52]	; (80028ec <HAL_UART_MspInit+0x164>)
 80028b8:	631a      	str	r2, [r3, #48]	; 0x30
 80028ba:	4a0c      	ldr	r2, [pc, #48]	; (80028ec <HAL_UART_MspInit+0x164>)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80028c0:	2200      	movs	r2, #0
 80028c2:	2100      	movs	r1, #0
 80028c4:	2025      	movs	r0, #37	; 0x25
 80028c6:	f000 fd78 	bl	80033ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80028ca:	2025      	movs	r0, #37	; 0x25
 80028cc:	f000 fd91 	bl	80033f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80028d0:	bf00      	nop
 80028d2:	3728      	adds	r7, #40	; 0x28
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	40011000 	.word	0x40011000
 80028dc:	40023800 	.word	0x40023800
 80028e0:	40020000 	.word	0x40020000
 80028e4:	20000a18 	.word	0x20000a18
 80028e8:	40026440 	.word	0x40026440
 80028ec:	200009b8 	.word	0x200009b8
 80028f0:	400264b8 	.word	0x400264b8

080028f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80028f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800292c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80028f8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80028fa:	e003      	b.n	8002904 <LoopCopyDataInit>

080028fc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80028fc:	4b0c      	ldr	r3, [pc, #48]	; (8002930 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80028fe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002900:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002902:	3104      	adds	r1, #4

08002904 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002904:	480b      	ldr	r0, [pc, #44]	; (8002934 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002906:	4b0c      	ldr	r3, [pc, #48]	; (8002938 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002908:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800290a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800290c:	d3f6      	bcc.n	80028fc <CopyDataInit>
  ldr  r2, =_sbss
 800290e:	4a0b      	ldr	r2, [pc, #44]	; (800293c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002910:	e002      	b.n	8002918 <LoopFillZerobss>

08002912 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002912:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002914:	f842 3b04 	str.w	r3, [r2], #4

08002918 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002918:	4b09      	ldr	r3, [pc, #36]	; (8002940 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800291a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800291c:	d3f9      	bcc.n	8002912 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800291e:	f7ff fc1d 	bl	800215c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002922:	f004 f899 	bl	8006a58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002926:	f7ff f903 	bl	8001b30 <main>
  bx  lr    
 800292a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800292c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002930:	0800a2b8 	.word	0x0800a2b8
  ldr  r0, =_sdata
 8002934:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002938:	200001e8 	.word	0x200001e8
  ldr  r2, =_sbss
 800293c:	200001e8 	.word	0x200001e8
  ldr  r3, = _ebss
 8002940:	20000ac0 	.word	0x20000ac0

08002944 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002944:	e7fe      	b.n	8002944 <CAN1_RX0_IRQHandler>
	...

08002948 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800294c:	4b0e      	ldr	r3, [pc, #56]	; (8002988 <HAL_Init+0x40>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a0d      	ldr	r2, [pc, #52]	; (8002988 <HAL_Init+0x40>)
 8002952:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002956:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002958:	4b0b      	ldr	r3, [pc, #44]	; (8002988 <HAL_Init+0x40>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a0a      	ldr	r2, [pc, #40]	; (8002988 <HAL_Init+0x40>)
 800295e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002962:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002964:	4b08      	ldr	r3, [pc, #32]	; (8002988 <HAL_Init+0x40>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a07      	ldr	r2, [pc, #28]	; (8002988 <HAL_Init+0x40>)
 800296a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800296e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002970:	2003      	movs	r0, #3
 8002972:	f000 fd17 	bl	80033a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002976:	2000      	movs	r0, #0
 8002978:	f000 f808 	bl	800298c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800297c:	f7ff fabe 	bl	8001efc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	40023c00 	.word	0x40023c00

0800298c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002994:	4b12      	ldr	r3, [pc, #72]	; (80029e0 <HAL_InitTick+0x54>)
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	4b12      	ldr	r3, [pc, #72]	; (80029e4 <HAL_InitTick+0x58>)
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	4619      	mov	r1, r3
 800299e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80029a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029aa:	4618      	mov	r0, r3
 80029ac:	f000 fd2f 	bl	800340e <HAL_SYSTICK_Config>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d001      	beq.n	80029ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e00e      	b.n	80029d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2b0f      	cmp	r3, #15
 80029be:	d80a      	bhi.n	80029d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029c0:	2200      	movs	r2, #0
 80029c2:	6879      	ldr	r1, [r7, #4]
 80029c4:	f04f 30ff 	mov.w	r0, #4294967295
 80029c8:	f000 fcf7 	bl	80033ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029cc:	4a06      	ldr	r2, [pc, #24]	; (80029e8 <HAL_InitTick+0x5c>)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029d2:	2300      	movs	r3, #0
 80029d4:	e000      	b.n	80029d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3708      	adds	r7, #8
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	20000008 	.word	0x20000008
 80029e4:	20000010 	.word	0x20000010
 80029e8:	2000000c 	.word	0x2000000c

080029ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029f0:	4b06      	ldr	r3, [pc, #24]	; (8002a0c <HAL_IncTick+0x20>)
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	461a      	mov	r2, r3
 80029f6:	4b06      	ldr	r3, [pc, #24]	; (8002a10 <HAL_IncTick+0x24>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4413      	add	r3, r2
 80029fc:	4a04      	ldr	r2, [pc, #16]	; (8002a10 <HAL_IncTick+0x24>)
 80029fe:	6013      	str	r3, [r2, #0]
}
 8002a00:	bf00      	nop
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	20000010 	.word	0x20000010
 8002a10:	20000ab8 	.word	0x20000ab8

08002a14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0
  return uwTick;
 8002a18:	4b03      	ldr	r3, [pc, #12]	; (8002a28 <HAL_GetTick+0x14>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	20000ab8 	.word	0x20000ab8

08002a2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a34:	f7ff ffee 	bl	8002a14 <HAL_GetTick>
 8002a38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a44:	d005      	beq.n	8002a52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a46:	4b09      	ldr	r3, [pc, #36]	; (8002a6c <HAL_Delay+0x40>)
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	4413      	add	r3, r2
 8002a50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a52:	bf00      	nop
 8002a54:	f7ff ffde 	bl	8002a14 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d8f7      	bhi.n	8002a54 <HAL_Delay+0x28>
  {
  }
}
 8002a64:	bf00      	nop
 8002a66:	3710      	adds	r7, #16
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	20000010 	.word	0x20000010

08002a70 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d101      	bne.n	8002a86 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e033      	b.n	8002aee <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d109      	bne.n	8002aa2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f7fe fac6 	bl	8001020 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa6:	f003 0310 	and.w	r3, r3, #16
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d118      	bne.n	8002ae0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ab6:	f023 0302 	bic.w	r3, r3, #2
 8002aba:	f043 0202 	orr.w	r2, r3, #2
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 fa98 	bl	8002ff8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad2:	f023 0303 	bic.w	r3, r3, #3
 8002ad6:	f043 0201 	orr.w	r2, r3, #1
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	641a      	str	r2, [r3, #64]	; 0x40
 8002ade:	e001      	b.n	8002ae4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3710      	adds	r7, #16
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}

08002af6 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002af6:	b580      	push	{r7, lr}
 8002af8:	b084      	sub	sp, #16
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002afe:	2300      	movs	r3, #0
 8002b00:	60fb      	str	r3, [r7, #12]
 8002b02:	2300      	movs	r3, #0
 8002b04:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	bf0c      	ite	eq
 8002b14:	2301      	moveq	r3, #1
 8002b16:	2300      	movne	r3, #0
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f003 0320 	and.w	r3, r3, #32
 8002b26:	2b20      	cmp	r3, #32
 8002b28:	bf0c      	ite	eq
 8002b2a:	2301      	moveq	r3, #1
 8002b2c:	2300      	movne	r3, #0
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d049      	beq.n	8002bcc <HAL_ADC_IRQHandler+0xd6>
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d046      	beq.n	8002bcc <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b42:	f003 0310 	and.w	r3, r3, #16
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d105      	bne.n	8002b56 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d12b      	bne.n	8002bbc <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d127      	bne.n	8002bbc <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b72:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d006      	beq.n	8002b88 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d119      	bne.n	8002bbc <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	685a      	ldr	r2, [r3, #4]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f022 0220 	bic.w	r2, r2, #32
 8002b96:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d105      	bne.n	8002bbc <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb4:	f043 0201 	orr.w	r2, r3, #1
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f000 f8db 	bl	8002d78 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f06f 0212 	mvn.w	r2, #18
 8002bca:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0304 	and.w	r3, r3, #4
 8002bd6:	2b04      	cmp	r3, #4
 8002bd8:	bf0c      	ite	eq
 8002bda:	2301      	moveq	r3, #1
 8002bdc:	2300      	movne	r3, #0
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bec:	2b80      	cmp	r3, #128	; 0x80
 8002bee:	bf0c      	ite	eq
 8002bf0:	2301      	moveq	r3, #1
 8002bf2:	2300      	movne	r3, #0
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d057      	beq.n	8002cae <HAL_ADC_IRQHandler+0x1b8>
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d054      	beq.n	8002cae <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c08:	f003 0310 	and.w	r3, r3, #16
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d105      	bne.n	8002c1c <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c14:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d139      	bne.n	8002c9e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c30:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d006      	beq.n	8002c46 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d12b      	bne.n	8002c9e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d124      	bne.n	8002c9e <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d11d      	bne.n	8002c9e <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d119      	bne.n	8002c9e <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	685a      	ldr	r2, [r3, #4]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c78:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d105      	bne.n	8002c9e <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c96:	f043 0201 	orr.w	r2, r3, #1
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f000 faa6 	bl	80031f0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f06f 020c 	mvn.w	r2, #12
 8002cac:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0301 	and.w	r3, r3, #1
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	bf0c      	ite	eq
 8002cbc:	2301      	moveq	r3, #1
 8002cbe:	2300      	movne	r3, #0
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cce:	2b40      	cmp	r3, #64	; 0x40
 8002cd0:	bf0c      	ite	eq
 8002cd2:	2301      	moveq	r3, #1
 8002cd4:	2300      	movne	r3, #0
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d017      	beq.n	8002d10 <HAL_ADC_IRQHandler+0x21a>
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d014      	beq.n	8002d10 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0301 	and.w	r3, r3, #1
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d10d      	bne.n	8002d10 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f000 f843 	bl	8002d8c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f06f 0201 	mvn.w	r2, #1
 8002d0e:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0320 	and.w	r3, r3, #32
 8002d1a:	2b20      	cmp	r3, #32
 8002d1c:	bf0c      	ite	eq
 8002d1e:	2301      	moveq	r3, #1
 8002d20:	2300      	movne	r3, #0
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d30:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d34:	bf0c      	ite	eq
 8002d36:	2301      	moveq	r3, #1
 8002d38:	2300      	movne	r3, #0
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d015      	beq.n	8002d70 <HAL_ADC_IRQHandler+0x27a>
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d012      	beq.n	8002d70 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d4e:	f043 0202 	orr.w	r2, r3, #2
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f06f 0220 	mvn.w	r2, #32
 8002d5e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f000 f81d 	bl	8002da0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f06f 0220 	mvn.w	r2, #32
 8002d6e:	601a      	str	r2, [r3, #0]
  }
}
 8002d70:	bf00      	nop
 8002d72:	3710      	adds	r7, #16
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002d80:	bf00      	nop
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002d94:	bf00      	nop
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002da8:	bf00      	nop
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b085      	sub	sp, #20
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d101      	bne.n	8002dd0 <HAL_ADC_ConfigChannel+0x1c>
 8002dcc:	2302      	movs	r3, #2
 8002dce:	e105      	b.n	8002fdc <HAL_ADC_ConfigChannel+0x228>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2b09      	cmp	r3, #9
 8002dde:	d925      	bls.n	8002e2c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68d9      	ldr	r1, [r3, #12]
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	461a      	mov	r2, r3
 8002dee:	4613      	mov	r3, r2
 8002df0:	005b      	lsls	r3, r3, #1
 8002df2:	4413      	add	r3, r2
 8002df4:	3b1e      	subs	r3, #30
 8002df6:	2207      	movs	r2, #7
 8002df8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfc:	43da      	mvns	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	400a      	ands	r2, r1
 8002e04:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	68d9      	ldr	r1, [r3, #12]
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	689a      	ldr	r2, [r3, #8]
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	4618      	mov	r0, r3
 8002e18:	4603      	mov	r3, r0
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	4403      	add	r3, r0
 8002e1e:	3b1e      	subs	r3, #30
 8002e20:	409a      	lsls	r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	430a      	orrs	r2, r1
 8002e28:	60da      	str	r2, [r3, #12]
 8002e2a:	e022      	b.n	8002e72 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6919      	ldr	r1, [r3, #16]
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	461a      	mov	r2, r3
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	005b      	lsls	r3, r3, #1
 8002e3e:	4413      	add	r3, r2
 8002e40:	2207      	movs	r2, #7
 8002e42:	fa02 f303 	lsl.w	r3, r2, r3
 8002e46:	43da      	mvns	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	400a      	ands	r2, r1
 8002e4e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	6919      	ldr	r1, [r3, #16]
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	689a      	ldr	r2, [r3, #8]
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	4618      	mov	r0, r3
 8002e62:	4603      	mov	r3, r0
 8002e64:	005b      	lsls	r3, r3, #1
 8002e66:	4403      	add	r3, r0
 8002e68:	409a      	lsls	r2, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	2b06      	cmp	r3, #6
 8002e78:	d824      	bhi.n	8002ec4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	685a      	ldr	r2, [r3, #4]
 8002e84:	4613      	mov	r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	4413      	add	r3, r2
 8002e8a:	3b05      	subs	r3, #5
 8002e8c:	221f      	movs	r2, #31
 8002e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e92:	43da      	mvns	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	400a      	ands	r2, r1
 8002e9a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	685a      	ldr	r2, [r3, #4]
 8002eae:	4613      	mov	r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	4413      	add	r3, r2
 8002eb4:	3b05      	subs	r3, #5
 8002eb6:	fa00 f203 	lsl.w	r2, r0, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	635a      	str	r2, [r3, #52]	; 0x34
 8002ec2:	e04c      	b.n	8002f5e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	2b0c      	cmp	r3, #12
 8002eca:	d824      	bhi.n	8002f16 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	685a      	ldr	r2, [r3, #4]
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	4413      	add	r3, r2
 8002edc:	3b23      	subs	r3, #35	; 0x23
 8002ede:	221f      	movs	r2, #31
 8002ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee4:	43da      	mvns	r2, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	400a      	ands	r2, r1
 8002eec:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	4618      	mov	r0, r3
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685a      	ldr	r2, [r3, #4]
 8002f00:	4613      	mov	r3, r2
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	4413      	add	r3, r2
 8002f06:	3b23      	subs	r3, #35	; 0x23
 8002f08:	fa00 f203 	lsl.w	r2, r0, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	430a      	orrs	r2, r1
 8002f12:	631a      	str	r2, [r3, #48]	; 0x30
 8002f14:	e023      	b.n	8002f5e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	685a      	ldr	r2, [r3, #4]
 8002f20:	4613      	mov	r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	4413      	add	r3, r2
 8002f26:	3b41      	subs	r3, #65	; 0x41
 8002f28:	221f      	movs	r2, #31
 8002f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2e:	43da      	mvns	r2, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	400a      	ands	r2, r1
 8002f36:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	4618      	mov	r0, r3
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	685a      	ldr	r2, [r3, #4]
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	4413      	add	r3, r2
 8002f50:	3b41      	subs	r3, #65	; 0x41
 8002f52:	fa00 f203 	lsl.w	r2, r0, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f5e:	4b22      	ldr	r3, [pc, #136]	; (8002fe8 <HAL_ADC_ConfigChannel+0x234>)
 8002f60:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a21      	ldr	r2, [pc, #132]	; (8002fec <HAL_ADC_ConfigChannel+0x238>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d109      	bne.n	8002f80 <HAL_ADC_ConfigChannel+0x1cc>
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2b12      	cmp	r3, #18
 8002f72:	d105      	bne.n	8002f80 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a19      	ldr	r2, [pc, #100]	; (8002fec <HAL_ADC_ConfigChannel+0x238>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d123      	bne.n	8002fd2 <HAL_ADC_ConfigChannel+0x21e>
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2b10      	cmp	r3, #16
 8002f90:	d003      	beq.n	8002f9a <HAL_ADC_ConfigChannel+0x1e6>
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2b11      	cmp	r3, #17
 8002f98:	d11b      	bne.n	8002fd2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2b10      	cmp	r3, #16
 8002fac:	d111      	bne.n	8002fd2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002fae:	4b10      	ldr	r3, [pc, #64]	; (8002ff0 <HAL_ADC_ConfigChannel+0x23c>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a10      	ldr	r2, [pc, #64]	; (8002ff4 <HAL_ADC_ConfigChannel+0x240>)
 8002fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb8:	0c9a      	lsrs	r2, r3, #18
 8002fba:	4613      	mov	r3, r2
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	4413      	add	r3, r2
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002fc4:	e002      	b.n	8002fcc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1f9      	bne.n	8002fc6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002fda:	2300      	movs	r3, #0
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3714      	adds	r7, #20
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr
 8002fe8:	40012300 	.word	0x40012300
 8002fec:	40012000 	.word	0x40012000
 8002ff0:	20000008 	.word	0x20000008
 8002ff4:	431bde83 	.word	0x431bde83

08002ff8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b085      	sub	sp, #20
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003000:	4b79      	ldr	r3, [pc, #484]	; (80031e8 <ADC_Init+0x1f0>)
 8003002:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	685a      	ldr	r2, [r3, #4]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	431a      	orrs	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	685a      	ldr	r2, [r3, #4]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800302c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	6859      	ldr	r1, [r3, #4]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	691b      	ldr	r3, [r3, #16]
 8003038:	021a      	lsls	r2, r3, #8
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	430a      	orrs	r2, r1
 8003040:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	685a      	ldr	r2, [r3, #4]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003050:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	6859      	ldr	r1, [r3, #4]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	689a      	ldr	r2, [r3, #8]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	430a      	orrs	r2, r1
 8003062:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	689a      	ldr	r2, [r3, #8]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003072:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	6899      	ldr	r1, [r3, #8]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	68da      	ldr	r2, [r3, #12]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	430a      	orrs	r2, r1
 8003084:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800308a:	4a58      	ldr	r2, [pc, #352]	; (80031ec <ADC_Init+0x1f4>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d022      	beq.n	80030d6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	689a      	ldr	r2, [r3, #8]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800309e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	6899      	ldr	r1, [r3, #8]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	430a      	orrs	r2, r1
 80030b0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	689a      	ldr	r2, [r3, #8]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80030c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	6899      	ldr	r1, [r3, #8]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	430a      	orrs	r2, r1
 80030d2:	609a      	str	r2, [r3, #8]
 80030d4:	e00f      	b.n	80030f6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	689a      	ldr	r2, [r3, #8]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80030e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	689a      	ldr	r2, [r3, #8]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80030f4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	689a      	ldr	r2, [r3, #8]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f022 0202 	bic.w	r2, r2, #2
 8003104:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	6899      	ldr	r1, [r3, #8]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	7e1b      	ldrb	r3, [r3, #24]
 8003110:	005a      	lsls	r2, r3, #1
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	430a      	orrs	r2, r1
 8003118:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d01b      	beq.n	800315c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	685a      	ldr	r2, [r3, #4]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003132:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	685a      	ldr	r2, [r3, #4]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003142:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	6859      	ldr	r1, [r3, #4]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314e:	3b01      	subs	r3, #1
 8003150:	035a      	lsls	r2, r3, #13
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	430a      	orrs	r2, r1
 8003158:	605a      	str	r2, [r3, #4]
 800315a:	e007      	b.n	800316c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	685a      	ldr	r2, [r3, #4]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800316a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800317a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	69db      	ldr	r3, [r3, #28]
 8003186:	3b01      	subs	r3, #1
 8003188:	051a      	lsls	r2, r3, #20
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	430a      	orrs	r2, r1
 8003190:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	689a      	ldr	r2, [r3, #8]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80031a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	6899      	ldr	r1, [r3, #8]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80031ae:	025a      	lsls	r2, r3, #9
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	430a      	orrs	r2, r1
 80031b6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	689a      	ldr	r2, [r3, #8]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	6899      	ldr	r1, [r3, #8]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	029a      	lsls	r2, r3, #10
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	430a      	orrs	r2, r1
 80031da:	609a      	str	r2, [r3, #8]
}
 80031dc:	bf00      	nop
 80031de:	3714      	adds	r7, #20
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr
 80031e8:	40012300 	.word	0x40012300
 80031ec:	0f000001 	.word	0x0f000001

080031f0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003204:	b480      	push	{r7}
 8003206:	b085      	sub	sp, #20
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f003 0307 	and.w	r3, r3, #7
 8003212:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003214:	4b0c      	ldr	r3, [pc, #48]	; (8003248 <__NVIC_SetPriorityGrouping+0x44>)
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800321a:	68ba      	ldr	r2, [r7, #8]
 800321c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003220:	4013      	ands	r3, r2
 8003222:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800322c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003230:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003234:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003236:	4a04      	ldr	r2, [pc, #16]	; (8003248 <__NVIC_SetPriorityGrouping+0x44>)
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	60d3      	str	r3, [r2, #12]
}
 800323c:	bf00      	nop
 800323e:	3714      	adds	r7, #20
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr
 8003248:	e000ed00 	.word	0xe000ed00

0800324c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003250:	4b04      	ldr	r3, [pc, #16]	; (8003264 <__NVIC_GetPriorityGrouping+0x18>)
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	0a1b      	lsrs	r3, r3, #8
 8003256:	f003 0307 	and.w	r3, r3, #7
}
 800325a:	4618      	mov	r0, r3
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr
 8003264:	e000ed00 	.word	0xe000ed00

08003268 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	4603      	mov	r3, r0
 8003270:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003276:	2b00      	cmp	r3, #0
 8003278:	db0b      	blt.n	8003292 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800327a:	79fb      	ldrb	r3, [r7, #7]
 800327c:	f003 021f 	and.w	r2, r3, #31
 8003280:	4907      	ldr	r1, [pc, #28]	; (80032a0 <__NVIC_EnableIRQ+0x38>)
 8003282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003286:	095b      	lsrs	r3, r3, #5
 8003288:	2001      	movs	r0, #1
 800328a:	fa00 f202 	lsl.w	r2, r0, r2
 800328e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003292:	bf00      	nop
 8003294:	370c      	adds	r7, #12
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	e000e100 	.word	0xe000e100

080032a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	4603      	mov	r3, r0
 80032ac:	6039      	str	r1, [r7, #0]
 80032ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	db0a      	blt.n	80032ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	b2da      	uxtb	r2, r3
 80032bc:	490c      	ldr	r1, [pc, #48]	; (80032f0 <__NVIC_SetPriority+0x4c>)
 80032be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032c2:	0112      	lsls	r2, r2, #4
 80032c4:	b2d2      	uxtb	r2, r2
 80032c6:	440b      	add	r3, r1
 80032c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032cc:	e00a      	b.n	80032e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	b2da      	uxtb	r2, r3
 80032d2:	4908      	ldr	r1, [pc, #32]	; (80032f4 <__NVIC_SetPriority+0x50>)
 80032d4:	79fb      	ldrb	r3, [r7, #7]
 80032d6:	f003 030f 	and.w	r3, r3, #15
 80032da:	3b04      	subs	r3, #4
 80032dc:	0112      	lsls	r2, r2, #4
 80032de:	b2d2      	uxtb	r2, r2
 80032e0:	440b      	add	r3, r1
 80032e2:	761a      	strb	r2, [r3, #24]
}
 80032e4:	bf00      	nop
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr
 80032f0:	e000e100 	.word	0xe000e100
 80032f4:	e000ed00 	.word	0xe000ed00

080032f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b089      	sub	sp, #36	; 0x24
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f003 0307 	and.w	r3, r3, #7
 800330a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	f1c3 0307 	rsb	r3, r3, #7
 8003312:	2b04      	cmp	r3, #4
 8003314:	bf28      	it	cs
 8003316:	2304      	movcs	r3, #4
 8003318:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	3304      	adds	r3, #4
 800331e:	2b06      	cmp	r3, #6
 8003320:	d902      	bls.n	8003328 <NVIC_EncodePriority+0x30>
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	3b03      	subs	r3, #3
 8003326:	e000      	b.n	800332a <NVIC_EncodePriority+0x32>
 8003328:	2300      	movs	r3, #0
 800332a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800332c:	f04f 32ff 	mov.w	r2, #4294967295
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	fa02 f303 	lsl.w	r3, r2, r3
 8003336:	43da      	mvns	r2, r3
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	401a      	ands	r2, r3
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003340:	f04f 31ff 	mov.w	r1, #4294967295
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	fa01 f303 	lsl.w	r3, r1, r3
 800334a:	43d9      	mvns	r1, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003350:	4313      	orrs	r3, r2
         );
}
 8003352:	4618      	mov	r0, r3
 8003354:	3724      	adds	r7, #36	; 0x24
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
	...

08003360 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	3b01      	subs	r3, #1
 800336c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003370:	d301      	bcc.n	8003376 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003372:	2301      	movs	r3, #1
 8003374:	e00f      	b.n	8003396 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003376:	4a0a      	ldr	r2, [pc, #40]	; (80033a0 <SysTick_Config+0x40>)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	3b01      	subs	r3, #1
 800337c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800337e:	210f      	movs	r1, #15
 8003380:	f04f 30ff 	mov.w	r0, #4294967295
 8003384:	f7ff ff8e 	bl	80032a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003388:	4b05      	ldr	r3, [pc, #20]	; (80033a0 <SysTick_Config+0x40>)
 800338a:	2200      	movs	r2, #0
 800338c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800338e:	4b04      	ldr	r3, [pc, #16]	; (80033a0 <SysTick_Config+0x40>)
 8003390:	2207      	movs	r2, #7
 8003392:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3708      	adds	r7, #8
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	e000e010 	.word	0xe000e010

080033a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f7ff ff29 	bl	8003204 <__NVIC_SetPriorityGrouping>
}
 80033b2:	bf00      	nop
 80033b4:	3708      	adds	r7, #8
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b086      	sub	sp, #24
 80033be:	af00      	add	r7, sp, #0
 80033c0:	4603      	mov	r3, r0
 80033c2:	60b9      	str	r1, [r7, #8]
 80033c4:	607a      	str	r2, [r7, #4]
 80033c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033c8:	2300      	movs	r3, #0
 80033ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033cc:	f7ff ff3e 	bl	800324c <__NVIC_GetPriorityGrouping>
 80033d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	68b9      	ldr	r1, [r7, #8]
 80033d6:	6978      	ldr	r0, [r7, #20]
 80033d8:	f7ff ff8e 	bl	80032f8 <NVIC_EncodePriority>
 80033dc:	4602      	mov	r2, r0
 80033de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033e2:	4611      	mov	r1, r2
 80033e4:	4618      	mov	r0, r3
 80033e6:	f7ff ff5d 	bl	80032a4 <__NVIC_SetPriority>
}
 80033ea:	bf00      	nop
 80033ec:	3718      	adds	r7, #24
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b082      	sub	sp, #8
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	4603      	mov	r3, r0
 80033fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003400:	4618      	mov	r0, r3
 8003402:	f7ff ff31 	bl	8003268 <__NVIC_EnableIRQ>
}
 8003406:	bf00      	nop
 8003408:	3708      	adds	r7, #8
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800340e:	b580      	push	{r7, lr}
 8003410:	b082      	sub	sp, #8
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f7ff ffa2 	bl	8003360 <SysTick_Config>
 800341c:	4603      	mov	r3, r0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3708      	adds	r7, #8
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
	...

08003428 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b086      	sub	sp, #24
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003430:	2300      	movs	r3, #0
 8003432:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003434:	f7ff faee 	bl	8002a14 <HAL_GetTick>
 8003438:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d101      	bne.n	8003444 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e099      	b.n	8003578 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2202      	movs	r2, #2
 8003450:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f022 0201 	bic.w	r2, r2, #1
 8003462:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003464:	e00f      	b.n	8003486 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003466:	f7ff fad5 	bl	8002a14 <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	2b05      	cmp	r3, #5
 8003472:	d908      	bls.n	8003486 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2220      	movs	r2, #32
 8003478:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2203      	movs	r2, #3
 800347e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e078      	b.n	8003578 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0301 	and.w	r3, r3, #1
 8003490:	2b00      	cmp	r3, #0
 8003492:	d1e8      	bne.n	8003466 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800349c:	697a      	ldr	r2, [r7, #20]
 800349e:	4b38      	ldr	r3, [pc, #224]	; (8003580 <HAL_DMA_Init+0x158>)
 80034a0:	4013      	ands	r3, r2
 80034a2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685a      	ldr	r2, [r3, #4]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	691b      	ldr	r3, [r3, #16]
 80034b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	699b      	ldr	r3, [r3, #24]
 80034c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a1b      	ldr	r3, [r3, #32]
 80034d0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034d2:	697a      	ldr	r2, [r7, #20]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034dc:	2b04      	cmp	r3, #4
 80034de:	d107      	bne.n	80034f0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e8:	4313      	orrs	r3, r2
 80034ea:	697a      	ldr	r2, [r7, #20]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	697a      	ldr	r2, [r7, #20]
 80034f6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	695b      	ldr	r3, [r3, #20]
 80034fe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	f023 0307 	bic.w	r3, r3, #7
 8003506:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350c:	697a      	ldr	r2, [r7, #20]
 800350e:	4313      	orrs	r3, r2
 8003510:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003516:	2b04      	cmp	r3, #4
 8003518:	d117      	bne.n	800354a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800351e:	697a      	ldr	r2, [r7, #20]
 8003520:	4313      	orrs	r3, r2
 8003522:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003528:	2b00      	cmp	r3, #0
 800352a:	d00e      	beq.n	800354a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f000 fa91 	bl	8003a54 <DMA_CheckFifoParam>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d008      	beq.n	800354a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2240      	movs	r2, #64	; 0x40
 800353c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2201      	movs	r2, #1
 8003542:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003546:	2301      	movs	r3, #1
 8003548:	e016      	b.n	8003578 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	697a      	ldr	r2, [r7, #20]
 8003550:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 fa48 	bl	80039e8 <DMA_CalcBaseAndBitshift>
 8003558:	4603      	mov	r3, r0
 800355a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003560:	223f      	movs	r2, #63	; 0x3f
 8003562:	409a      	lsls	r2, r3
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2201      	movs	r2, #1
 8003572:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003576:	2300      	movs	r3, #0
}
 8003578:	4618      	mov	r0, r3
 800357a:	3718      	adds	r7, #24
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	f010803f 	.word	0xf010803f

08003584 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b086      	sub	sp, #24
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	607a      	str	r2, [r7, #4]
 8003590:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003592:	2300      	movs	r3, #0
 8003594:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800359a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d101      	bne.n	80035aa <HAL_DMA_Start_IT+0x26>
 80035a6:	2302      	movs	r3, #2
 80035a8:	e040      	b.n	800362c <HAL_DMA_Start_IT+0xa8>
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2201      	movs	r2, #1
 80035ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d12f      	bne.n	800361e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2202      	movs	r2, #2
 80035c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2200      	movs	r2, #0
 80035ca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	68b9      	ldr	r1, [r7, #8]
 80035d2:	68f8      	ldr	r0, [r7, #12]
 80035d4:	f000 f9da 	bl	800398c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035dc:	223f      	movs	r2, #63	; 0x3f
 80035de:	409a      	lsls	r2, r3
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f042 0216 	orr.w	r2, r2, #22
 80035f2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d007      	beq.n	800360c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f042 0208 	orr.w	r2, r2, #8
 800360a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f042 0201 	orr.w	r2, r2, #1
 800361a:	601a      	str	r2, [r3, #0]
 800361c:	e005      	b.n	800362a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003626:	2302      	movs	r3, #2
 8003628:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800362a:	7dfb      	ldrb	r3, [r7, #23]
}
 800362c:	4618      	mov	r0, r3
 800362e:	3718      	adds	r7, #24
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003642:	b2db      	uxtb	r3, r3
 8003644:	2b02      	cmp	r3, #2
 8003646:	d004      	beq.n	8003652 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2280      	movs	r2, #128	; 0x80
 800364c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e00c      	b.n	800366c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2205      	movs	r2, #5
 8003656:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f022 0201 	bic.w	r2, r2, #1
 8003668:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800366a:	2300      	movs	r3, #0
}
 800366c:	4618      	mov	r0, r3
 800366e:	370c      	adds	r7, #12
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b086      	sub	sp, #24
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003680:	2300      	movs	r3, #0
 8003682:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003684:	4b92      	ldr	r3, [pc, #584]	; (80038d0 <HAL_DMA_IRQHandler+0x258>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a92      	ldr	r2, [pc, #584]	; (80038d4 <HAL_DMA_IRQHandler+0x25c>)
 800368a:	fba2 2303 	umull	r2, r3, r2, r3
 800368e:	0a9b      	lsrs	r3, r3, #10
 8003690:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003696:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036a2:	2208      	movs	r2, #8
 80036a4:	409a      	lsls	r2, r3
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	4013      	ands	r3, r2
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d01a      	beq.n	80036e4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0304 	and.w	r3, r3, #4
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d013      	beq.n	80036e4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f022 0204 	bic.w	r2, r2, #4
 80036ca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036d0:	2208      	movs	r2, #8
 80036d2:	409a      	lsls	r2, r3
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036dc:	f043 0201 	orr.w	r2, r3, #1
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036e8:	2201      	movs	r2, #1
 80036ea:	409a      	lsls	r2, r3
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	4013      	ands	r3, r2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d012      	beq.n	800371a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	695b      	ldr	r3, [r3, #20]
 80036fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d00b      	beq.n	800371a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003706:	2201      	movs	r2, #1
 8003708:	409a      	lsls	r2, r3
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003712:	f043 0202 	orr.w	r2, r3, #2
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800371e:	2204      	movs	r2, #4
 8003720:	409a      	lsls	r2, r3
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	4013      	ands	r3, r2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d012      	beq.n	8003750 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0302 	and.w	r3, r3, #2
 8003734:	2b00      	cmp	r3, #0
 8003736:	d00b      	beq.n	8003750 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800373c:	2204      	movs	r2, #4
 800373e:	409a      	lsls	r2, r3
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003748:	f043 0204 	orr.w	r2, r3, #4
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003754:	2210      	movs	r2, #16
 8003756:	409a      	lsls	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	4013      	ands	r3, r2
 800375c:	2b00      	cmp	r3, #0
 800375e:	d043      	beq.n	80037e8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0308 	and.w	r3, r3, #8
 800376a:	2b00      	cmp	r3, #0
 800376c:	d03c      	beq.n	80037e8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003772:	2210      	movs	r2, #16
 8003774:	409a      	lsls	r2, r3
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d018      	beq.n	80037ba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d108      	bne.n	80037a8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379a:	2b00      	cmp	r3, #0
 800379c:	d024      	beq.n	80037e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	4798      	blx	r3
 80037a6:	e01f      	b.n	80037e8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d01b      	beq.n	80037e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	4798      	blx	r3
 80037b8:	e016      	b.n	80037e8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d107      	bne.n	80037d8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f022 0208 	bic.w	r2, r2, #8
 80037d6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d003      	beq.n	80037e8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ec:	2220      	movs	r2, #32
 80037ee:	409a      	lsls	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	4013      	ands	r3, r2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	f000 808e 	beq.w	8003916 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0310 	and.w	r3, r3, #16
 8003804:	2b00      	cmp	r3, #0
 8003806:	f000 8086 	beq.w	8003916 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800380e:	2220      	movs	r2, #32
 8003810:	409a      	lsls	r2, r3
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b05      	cmp	r3, #5
 8003820:	d136      	bne.n	8003890 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f022 0216 	bic.w	r2, r2, #22
 8003830:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	695a      	ldr	r2, [r3, #20]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003840:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003846:	2b00      	cmp	r3, #0
 8003848:	d103      	bne.n	8003852 <HAL_DMA_IRQHandler+0x1da>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800384e:	2b00      	cmp	r3, #0
 8003850:	d007      	beq.n	8003862 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f022 0208 	bic.w	r2, r2, #8
 8003860:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003866:	223f      	movs	r2, #63	; 0x3f
 8003868:	409a      	lsls	r2, r3
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2201      	movs	r2, #1
 800387a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003882:	2b00      	cmp	r3, #0
 8003884:	d07d      	beq.n	8003982 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	4798      	blx	r3
        }
        return;
 800388e:	e078      	b.n	8003982 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d01c      	beq.n	80038d8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d108      	bne.n	80038be <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d030      	beq.n	8003916 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	4798      	blx	r3
 80038bc:	e02b      	b.n	8003916 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d027      	beq.n	8003916 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	4798      	blx	r3
 80038ce:	e022      	b.n	8003916 <HAL_DMA_IRQHandler+0x29e>
 80038d0:	20000008 	.word	0x20000008
 80038d4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d10f      	bne.n	8003906 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f022 0210 	bic.w	r2, r2, #16
 80038f4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2201      	movs	r2, #1
 8003902:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800390a:	2b00      	cmp	r3, #0
 800390c:	d003      	beq.n	8003916 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800391a:	2b00      	cmp	r3, #0
 800391c:	d032      	beq.n	8003984 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003922:	f003 0301 	and.w	r3, r3, #1
 8003926:	2b00      	cmp	r3, #0
 8003928:	d022      	beq.n	8003970 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2205      	movs	r2, #5
 800392e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f022 0201 	bic.w	r2, r2, #1
 8003940:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	3301      	adds	r3, #1
 8003946:	60bb      	str	r3, [r7, #8]
 8003948:	697a      	ldr	r2, [r7, #20]
 800394a:	429a      	cmp	r2, r3
 800394c:	d307      	bcc.n	800395e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0301 	and.w	r3, r3, #1
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1f2      	bne.n	8003942 <HAL_DMA_IRQHandler+0x2ca>
 800395c:	e000      	b.n	8003960 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800395e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003974:	2b00      	cmp	r3, #0
 8003976:	d005      	beq.n	8003984 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	4798      	blx	r3
 8003980:	e000      	b.n	8003984 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003982:	bf00      	nop
    }
  }
}
 8003984:	3718      	adds	r7, #24
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop

0800398c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800398c:	b480      	push	{r7}
 800398e:	b085      	sub	sp, #20
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]
 8003998:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80039a8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	683a      	ldr	r2, [r7, #0]
 80039b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	2b40      	cmp	r3, #64	; 0x40
 80039b8:	d108      	bne.n	80039cc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68ba      	ldr	r2, [r7, #8]
 80039c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80039ca:	e007      	b.n	80039dc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68ba      	ldr	r2, [r7, #8]
 80039d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	60da      	str	r2, [r3, #12]
}
 80039dc:	bf00      	nop
 80039de:	3714      	adds	r7, #20
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b085      	sub	sp, #20
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	3b10      	subs	r3, #16
 80039f8:	4a14      	ldr	r2, [pc, #80]	; (8003a4c <DMA_CalcBaseAndBitshift+0x64>)
 80039fa:	fba2 2303 	umull	r2, r3, r2, r3
 80039fe:	091b      	lsrs	r3, r3, #4
 8003a00:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003a02:	4a13      	ldr	r2, [pc, #76]	; (8003a50 <DMA_CalcBaseAndBitshift+0x68>)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	4413      	add	r3, r2
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2b03      	cmp	r3, #3
 8003a14:	d909      	bls.n	8003a2a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003a1e:	f023 0303 	bic.w	r3, r3, #3
 8003a22:	1d1a      	adds	r2, r3, #4
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	659a      	str	r2, [r3, #88]	; 0x58
 8003a28:	e007      	b.n	8003a3a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003a32:	f023 0303 	bic.w	r3, r3, #3
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3714      	adds	r7, #20
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	aaaaaaab 	.word	0xaaaaaaab
 8003a50:	08009c30 	.word	0x08009c30

08003a54 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b085      	sub	sp, #20
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a64:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	699b      	ldr	r3, [r3, #24]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d11f      	bne.n	8003aae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	2b03      	cmp	r3, #3
 8003a72:	d855      	bhi.n	8003b20 <DMA_CheckFifoParam+0xcc>
 8003a74:	a201      	add	r2, pc, #4	; (adr r2, 8003a7c <DMA_CheckFifoParam+0x28>)
 8003a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a7a:	bf00      	nop
 8003a7c:	08003a8d 	.word	0x08003a8d
 8003a80:	08003a9f 	.word	0x08003a9f
 8003a84:	08003a8d 	.word	0x08003a8d
 8003a88:	08003b21 	.word	0x08003b21
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d045      	beq.n	8003b24 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a9c:	e042      	b.n	8003b24 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003aa6:	d13f      	bne.n	8003b28 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003aac:	e03c      	b.n	8003b28 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	699b      	ldr	r3, [r3, #24]
 8003ab2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ab6:	d121      	bne.n	8003afc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	2b03      	cmp	r3, #3
 8003abc:	d836      	bhi.n	8003b2c <DMA_CheckFifoParam+0xd8>
 8003abe:	a201      	add	r2, pc, #4	; (adr r2, 8003ac4 <DMA_CheckFifoParam+0x70>)
 8003ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ac4:	08003ad5 	.word	0x08003ad5
 8003ac8:	08003adb 	.word	0x08003adb
 8003acc:	08003ad5 	.word	0x08003ad5
 8003ad0:	08003aed 	.word	0x08003aed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ad8:	e02f      	b.n	8003b3a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ade:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d024      	beq.n	8003b30 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003aea:	e021      	b.n	8003b30 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003af4:	d11e      	bne.n	8003b34 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003afa:	e01b      	b.n	8003b34 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d902      	bls.n	8003b08 <DMA_CheckFifoParam+0xb4>
 8003b02:	2b03      	cmp	r3, #3
 8003b04:	d003      	beq.n	8003b0e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003b06:	e018      	b.n	8003b3a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	73fb      	strb	r3, [r7, #15]
      break;
 8003b0c:	e015      	b.n	8003b3a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d00e      	beq.n	8003b38 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	73fb      	strb	r3, [r7, #15]
      break;
 8003b1e:	e00b      	b.n	8003b38 <DMA_CheckFifoParam+0xe4>
      break;
 8003b20:	bf00      	nop
 8003b22:	e00a      	b.n	8003b3a <DMA_CheckFifoParam+0xe6>
      break;
 8003b24:	bf00      	nop
 8003b26:	e008      	b.n	8003b3a <DMA_CheckFifoParam+0xe6>
      break;
 8003b28:	bf00      	nop
 8003b2a:	e006      	b.n	8003b3a <DMA_CheckFifoParam+0xe6>
      break;
 8003b2c:	bf00      	nop
 8003b2e:	e004      	b.n	8003b3a <DMA_CheckFifoParam+0xe6>
      break;
 8003b30:	bf00      	nop
 8003b32:	e002      	b.n	8003b3a <DMA_CheckFifoParam+0xe6>
      break;   
 8003b34:	bf00      	nop
 8003b36:	e000      	b.n	8003b3a <DMA_CheckFifoParam+0xe6>
      break;
 8003b38:	bf00      	nop
    }
  } 
  
  return status; 
 8003b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3714      	adds	r7, #20
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b089      	sub	sp, #36	; 0x24
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b52:	2300      	movs	r3, #0
 8003b54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b56:	2300      	movs	r3, #0
 8003b58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b5e:	2300      	movs	r3, #0
 8003b60:	61fb      	str	r3, [r7, #28]
 8003b62:	e16b      	b.n	8003e3c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b64:	2201      	movs	r2, #1
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	697a      	ldr	r2, [r7, #20]
 8003b74:	4013      	ands	r3, r2
 8003b76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b78:	693a      	ldr	r2, [r7, #16]
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	f040 815a 	bne.w	8003e36 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d00b      	beq.n	8003ba2 <HAL_GPIO_Init+0x5a>
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d007      	beq.n	8003ba2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003b96:	2b11      	cmp	r3, #17
 8003b98:	d003      	beq.n	8003ba2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	2b12      	cmp	r3, #18
 8003ba0:	d130      	bne.n	8003c04 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	005b      	lsls	r3, r3, #1
 8003bac:	2203      	movs	r2, #3
 8003bae:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb2:	43db      	mvns	r3, r3
 8003bb4:	69ba      	ldr	r2, [r7, #24]
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	68da      	ldr	r2, [r3, #12]
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	005b      	lsls	r3, r3, #1
 8003bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc6:	69ba      	ldr	r2, [r7, #24]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	69ba      	ldr	r2, [r7, #24]
 8003bd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003bd8:	2201      	movs	r2, #1
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003be0:	43db      	mvns	r3, r3
 8003be2:	69ba      	ldr	r2, [r7, #24]
 8003be4:	4013      	ands	r3, r2
 8003be6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	091b      	lsrs	r3, r3, #4
 8003bee:	f003 0201 	and.w	r2, r3, #1
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf8:	69ba      	ldr	r2, [r7, #24]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	69ba      	ldr	r2, [r7, #24]
 8003c02:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	005b      	lsls	r3, r3, #1
 8003c0e:	2203      	movs	r2, #3
 8003c10:	fa02 f303 	lsl.w	r3, r2, r3
 8003c14:	43db      	mvns	r3, r3
 8003c16:	69ba      	ldr	r2, [r7, #24]
 8003c18:	4013      	ands	r3, r2
 8003c1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	689a      	ldr	r2, [r3, #8]
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	005b      	lsls	r3, r3, #1
 8003c24:	fa02 f303 	lsl.w	r3, r2, r3
 8003c28:	69ba      	ldr	r2, [r7, #24]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	69ba      	ldr	r2, [r7, #24]
 8003c32:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d003      	beq.n	8003c44 <HAL_GPIO_Init+0xfc>
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	2b12      	cmp	r3, #18
 8003c42:	d123      	bne.n	8003c8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	08da      	lsrs	r2, r3, #3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	3208      	adds	r2, #8
 8003c4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	f003 0307 	and.w	r3, r3, #7
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	220f      	movs	r2, #15
 8003c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c60:	43db      	mvns	r3, r3
 8003c62:	69ba      	ldr	r2, [r7, #24]
 8003c64:	4013      	ands	r3, r2
 8003c66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	691a      	ldr	r2, [r3, #16]
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	f003 0307 	and.w	r3, r3, #7
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	fa02 f303 	lsl.w	r3, r2, r3
 8003c78:	69ba      	ldr	r2, [r7, #24]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	08da      	lsrs	r2, r3, #3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	3208      	adds	r2, #8
 8003c86:	69b9      	ldr	r1, [r7, #24]
 8003c88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	005b      	lsls	r3, r3, #1
 8003c96:	2203      	movs	r2, #3
 8003c98:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9c:	43db      	mvns	r3, r3
 8003c9e:	69ba      	ldr	r2, [r7, #24]
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f003 0203 	and.w	r2, r3, #3
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	005b      	lsls	r3, r3, #1
 8003cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb4:	69ba      	ldr	r2, [r7, #24]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	69ba      	ldr	r2, [r7, #24]
 8003cbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	f000 80b4 	beq.w	8003e36 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cce:	2300      	movs	r3, #0
 8003cd0:	60fb      	str	r3, [r7, #12]
 8003cd2:	4b5f      	ldr	r3, [pc, #380]	; (8003e50 <HAL_GPIO_Init+0x308>)
 8003cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd6:	4a5e      	ldr	r2, [pc, #376]	; (8003e50 <HAL_GPIO_Init+0x308>)
 8003cd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cdc:	6453      	str	r3, [r2, #68]	; 0x44
 8003cde:	4b5c      	ldr	r3, [pc, #368]	; (8003e50 <HAL_GPIO_Init+0x308>)
 8003ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ce6:	60fb      	str	r3, [r7, #12]
 8003ce8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003cea:	4a5a      	ldr	r2, [pc, #360]	; (8003e54 <HAL_GPIO_Init+0x30c>)
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	089b      	lsrs	r3, r3, #2
 8003cf0:	3302      	adds	r3, #2
 8003cf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	f003 0303 	and.w	r3, r3, #3
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	220f      	movs	r2, #15
 8003d02:	fa02 f303 	lsl.w	r3, r2, r3
 8003d06:	43db      	mvns	r3, r3
 8003d08:	69ba      	ldr	r2, [r7, #24]
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a51      	ldr	r2, [pc, #324]	; (8003e58 <HAL_GPIO_Init+0x310>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d02b      	beq.n	8003d6e <HAL_GPIO_Init+0x226>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a50      	ldr	r2, [pc, #320]	; (8003e5c <HAL_GPIO_Init+0x314>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d025      	beq.n	8003d6a <HAL_GPIO_Init+0x222>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a4f      	ldr	r2, [pc, #316]	; (8003e60 <HAL_GPIO_Init+0x318>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d01f      	beq.n	8003d66 <HAL_GPIO_Init+0x21e>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a4e      	ldr	r2, [pc, #312]	; (8003e64 <HAL_GPIO_Init+0x31c>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d019      	beq.n	8003d62 <HAL_GPIO_Init+0x21a>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a4d      	ldr	r2, [pc, #308]	; (8003e68 <HAL_GPIO_Init+0x320>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d013      	beq.n	8003d5e <HAL_GPIO_Init+0x216>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a4c      	ldr	r2, [pc, #304]	; (8003e6c <HAL_GPIO_Init+0x324>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d00d      	beq.n	8003d5a <HAL_GPIO_Init+0x212>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a4b      	ldr	r2, [pc, #300]	; (8003e70 <HAL_GPIO_Init+0x328>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d007      	beq.n	8003d56 <HAL_GPIO_Init+0x20e>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a4a      	ldr	r2, [pc, #296]	; (8003e74 <HAL_GPIO_Init+0x32c>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d101      	bne.n	8003d52 <HAL_GPIO_Init+0x20a>
 8003d4e:	2307      	movs	r3, #7
 8003d50:	e00e      	b.n	8003d70 <HAL_GPIO_Init+0x228>
 8003d52:	2308      	movs	r3, #8
 8003d54:	e00c      	b.n	8003d70 <HAL_GPIO_Init+0x228>
 8003d56:	2306      	movs	r3, #6
 8003d58:	e00a      	b.n	8003d70 <HAL_GPIO_Init+0x228>
 8003d5a:	2305      	movs	r3, #5
 8003d5c:	e008      	b.n	8003d70 <HAL_GPIO_Init+0x228>
 8003d5e:	2304      	movs	r3, #4
 8003d60:	e006      	b.n	8003d70 <HAL_GPIO_Init+0x228>
 8003d62:	2303      	movs	r3, #3
 8003d64:	e004      	b.n	8003d70 <HAL_GPIO_Init+0x228>
 8003d66:	2302      	movs	r3, #2
 8003d68:	e002      	b.n	8003d70 <HAL_GPIO_Init+0x228>
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e000      	b.n	8003d70 <HAL_GPIO_Init+0x228>
 8003d6e:	2300      	movs	r3, #0
 8003d70:	69fa      	ldr	r2, [r7, #28]
 8003d72:	f002 0203 	and.w	r2, r2, #3
 8003d76:	0092      	lsls	r2, r2, #2
 8003d78:	4093      	lsls	r3, r2
 8003d7a:	69ba      	ldr	r2, [r7, #24]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d80:	4934      	ldr	r1, [pc, #208]	; (8003e54 <HAL_GPIO_Init+0x30c>)
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	089b      	lsrs	r3, r3, #2
 8003d86:	3302      	adds	r3, #2
 8003d88:	69ba      	ldr	r2, [r7, #24]
 8003d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d8e:	4b3a      	ldr	r3, [pc, #232]	; (8003e78 <HAL_GPIO_Init+0x330>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	43db      	mvns	r3, r3
 8003d98:	69ba      	ldr	r2, [r7, #24]
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d003      	beq.n	8003db2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003daa:	69ba      	ldr	r2, [r7, #24]
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003db2:	4a31      	ldr	r2, [pc, #196]	; (8003e78 <HAL_GPIO_Init+0x330>)
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003db8:	4b2f      	ldr	r3, [pc, #188]	; (8003e78 <HAL_GPIO_Init+0x330>)
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	43db      	mvns	r3, r3
 8003dc2:	69ba      	ldr	r2, [r7, #24]
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d003      	beq.n	8003ddc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003dd4:	69ba      	ldr	r2, [r7, #24]
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ddc:	4a26      	ldr	r2, [pc, #152]	; (8003e78 <HAL_GPIO_Init+0x330>)
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003de2:	4b25      	ldr	r3, [pc, #148]	; (8003e78 <HAL_GPIO_Init+0x330>)
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	43db      	mvns	r3, r3
 8003dec:	69ba      	ldr	r2, [r7, #24]
 8003dee:	4013      	ands	r3, r2
 8003df0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d003      	beq.n	8003e06 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003dfe:	69ba      	ldr	r2, [r7, #24]
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e06:	4a1c      	ldr	r2, [pc, #112]	; (8003e78 <HAL_GPIO_Init+0x330>)
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e0c:	4b1a      	ldr	r3, [pc, #104]	; (8003e78 <HAL_GPIO_Init+0x330>)
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	43db      	mvns	r3, r3
 8003e16:	69ba      	ldr	r2, [r7, #24]
 8003e18:	4013      	ands	r3, r2
 8003e1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d003      	beq.n	8003e30 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003e28:	69ba      	ldr	r2, [r7, #24]
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e30:	4a11      	ldr	r2, [pc, #68]	; (8003e78 <HAL_GPIO_Init+0x330>)
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	3301      	adds	r3, #1
 8003e3a:	61fb      	str	r3, [r7, #28]
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	2b0f      	cmp	r3, #15
 8003e40:	f67f ae90 	bls.w	8003b64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e44:	bf00      	nop
 8003e46:	3724      	adds	r7, #36	; 0x24
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr
 8003e50:	40023800 	.word	0x40023800
 8003e54:	40013800 	.word	0x40013800
 8003e58:	40020000 	.word	0x40020000
 8003e5c:	40020400 	.word	0x40020400
 8003e60:	40020800 	.word	0x40020800
 8003e64:	40020c00 	.word	0x40020c00
 8003e68:	40021000 	.word	0x40021000
 8003e6c:	40021400 	.word	0x40021400
 8003e70:	40021800 	.word	0x40021800
 8003e74:	40021c00 	.word	0x40021c00
 8003e78:	40013c00 	.word	0x40013c00

08003e7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b085      	sub	sp, #20
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	460b      	mov	r3, r1
 8003e86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	691a      	ldr	r2, [r3, #16]
 8003e8c:	887b      	ldrh	r3, [r7, #2]
 8003e8e:	4013      	ands	r3, r2
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d002      	beq.n	8003e9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003e94:	2301      	movs	r3, #1
 8003e96:	73fb      	strb	r3, [r7, #15]
 8003e98:	e001      	b.n	8003e9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3714      	adds	r7, #20
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	460b      	mov	r3, r1
 8003eb6:	807b      	strh	r3, [r7, #2]
 8003eb8:	4613      	mov	r3, r2
 8003eba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ebc:	787b      	ldrb	r3, [r7, #1]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d003      	beq.n	8003eca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ec2:	887a      	ldrh	r2, [r7, #2]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ec8:	e003      	b.n	8003ed2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003eca:	887b      	ldrh	r3, [r7, #2]
 8003ecc:	041a      	lsls	r2, r3, #16
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	619a      	str	r2, [r3, #24]
}
 8003ed2:	bf00      	nop
 8003ed4:	370c      	adds	r7, #12
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr

08003ede <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ede:	b480      	push	{r7}
 8003ee0:	b083      	sub	sp, #12
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
 8003ee6:	460b      	mov	r3, r1
 8003ee8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	695a      	ldr	r2, [r3, #20]
 8003eee:	887b      	ldrh	r3, [r7, #2]
 8003ef0:	401a      	ands	r2, r3
 8003ef2:	887b      	ldrh	r3, [r7, #2]
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d104      	bne.n	8003f02 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003ef8:	887b      	ldrh	r3, [r7, #2]
 8003efa:	041a      	lsls	r2, r3, #16
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003f00:	e002      	b.n	8003f08 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8003f02:	887a      	ldrh	r2, [r7, #2]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	619a      	str	r2, [r3, #24]
}
 8003f08:	bf00      	nop
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b086      	sub	sp, #24
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d101      	bne.n	8003f26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e25b      	b.n	80043de <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d075      	beq.n	800401e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f32:	4ba3      	ldr	r3, [pc, #652]	; (80041c0 <HAL_RCC_OscConfig+0x2ac>)
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	f003 030c 	and.w	r3, r3, #12
 8003f3a:	2b04      	cmp	r3, #4
 8003f3c:	d00c      	beq.n	8003f58 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f3e:	4ba0      	ldr	r3, [pc, #640]	; (80041c0 <HAL_RCC_OscConfig+0x2ac>)
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f46:	2b08      	cmp	r3, #8
 8003f48:	d112      	bne.n	8003f70 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f4a:	4b9d      	ldr	r3, [pc, #628]	; (80041c0 <HAL_RCC_OscConfig+0x2ac>)
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f56:	d10b      	bne.n	8003f70 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f58:	4b99      	ldr	r3, [pc, #612]	; (80041c0 <HAL_RCC_OscConfig+0x2ac>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d05b      	beq.n	800401c <HAL_RCC_OscConfig+0x108>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d157      	bne.n	800401c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e236      	b.n	80043de <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f78:	d106      	bne.n	8003f88 <HAL_RCC_OscConfig+0x74>
 8003f7a:	4b91      	ldr	r3, [pc, #580]	; (80041c0 <HAL_RCC_OscConfig+0x2ac>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a90      	ldr	r2, [pc, #576]	; (80041c0 <HAL_RCC_OscConfig+0x2ac>)
 8003f80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f84:	6013      	str	r3, [r2, #0]
 8003f86:	e01d      	b.n	8003fc4 <HAL_RCC_OscConfig+0xb0>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f90:	d10c      	bne.n	8003fac <HAL_RCC_OscConfig+0x98>
 8003f92:	4b8b      	ldr	r3, [pc, #556]	; (80041c0 <HAL_RCC_OscConfig+0x2ac>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a8a      	ldr	r2, [pc, #552]	; (80041c0 <HAL_RCC_OscConfig+0x2ac>)
 8003f98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f9c:	6013      	str	r3, [r2, #0]
 8003f9e:	4b88      	ldr	r3, [pc, #544]	; (80041c0 <HAL_RCC_OscConfig+0x2ac>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a87      	ldr	r2, [pc, #540]	; (80041c0 <HAL_RCC_OscConfig+0x2ac>)
 8003fa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fa8:	6013      	str	r3, [r2, #0]
 8003faa:	e00b      	b.n	8003fc4 <HAL_RCC_OscConfig+0xb0>
 8003fac:	4b84      	ldr	r3, [pc, #528]	; (80041c0 <HAL_RCC_OscConfig+0x2ac>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a83      	ldr	r2, [pc, #524]	; (80041c0 <HAL_RCC_OscConfig+0x2ac>)
 8003fb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fb6:	6013      	str	r3, [r2, #0]
 8003fb8:	4b81      	ldr	r3, [pc, #516]	; (80041c0 <HAL_RCC_OscConfig+0x2ac>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a80      	ldr	r2, [pc, #512]	; (80041c0 <HAL_RCC_OscConfig+0x2ac>)
 8003fbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d013      	beq.n	8003ff4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fcc:	f7fe fd22 	bl	8002a14 <HAL_GetTick>
 8003fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fd2:	e008      	b.n	8003fe6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fd4:	f7fe fd1e 	bl	8002a14 <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	2b64      	cmp	r3, #100	; 0x64
 8003fe0:	d901      	bls.n	8003fe6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e1fb      	b.n	80043de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fe6:	4b76      	ldr	r3, [pc, #472]	; (80041c0 <HAL_RCC_OscConfig+0x2ac>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d0f0      	beq.n	8003fd4 <HAL_RCC_OscConfig+0xc0>
 8003ff2:	e014      	b.n	800401e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ff4:	f7fe fd0e 	bl	8002a14 <HAL_GetTick>
 8003ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ffa:	e008      	b.n	800400e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ffc:	f7fe fd0a 	bl	8002a14 <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	2b64      	cmp	r3, #100	; 0x64
 8004008:	d901      	bls.n	800400e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e1e7      	b.n	80043de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800400e:	4b6c      	ldr	r3, [pc, #432]	; (80041c0 <HAL_RCC_OscConfig+0x2ac>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d1f0      	bne.n	8003ffc <HAL_RCC_OscConfig+0xe8>
 800401a:	e000      	b.n	800401e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800401c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0302 	and.w	r3, r3, #2
 8004026:	2b00      	cmp	r3, #0
 8004028:	d063      	beq.n	80040f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800402a:	4b65      	ldr	r3, [pc, #404]	; (80041c0 <HAL_RCC_OscConfig+0x2ac>)
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	f003 030c 	and.w	r3, r3, #12
 8004032:	2b00      	cmp	r3, #0
 8004034:	d00b      	beq.n	800404e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004036:	4b62      	ldr	r3, [pc, #392]	; (80041c0 <HAL_RCC_OscConfig+0x2ac>)
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800403e:	2b08      	cmp	r3, #8
 8004040:	d11c      	bne.n	800407c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004042:	4b5f      	ldr	r3, [pc, #380]	; (80041c0 <HAL_RCC_OscConfig+0x2ac>)
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d116      	bne.n	800407c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800404e:	4b5c      	ldr	r3, [pc, #368]	; (80041c0 <HAL_RCC_OscConfig+0x2ac>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 0302 	and.w	r3, r3, #2
 8004056:	2b00      	cmp	r3, #0
 8004058:	d005      	beq.n	8004066 <HAL_RCC_OscConfig+0x152>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	2b01      	cmp	r3, #1
 8004060:	d001      	beq.n	8004066 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e1bb      	b.n	80043de <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004066:	4b56      	ldr	r3, [pc, #344]	; (80041c0 <HAL_RCC_OscConfig+0x2ac>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	00db      	lsls	r3, r3, #3
 8004074:	4952      	ldr	r1, [pc, #328]	; (80041c0 <HAL_RCC_OscConfig+0x2ac>)
 8004076:	4313      	orrs	r3, r2
 8004078:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800407a:	e03a      	b.n	80040f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d020      	beq.n	80040c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004084:	4b4f      	ldr	r3, [pc, #316]	; (80041c4 <HAL_RCC_OscConfig+0x2b0>)
 8004086:	2201      	movs	r2, #1
 8004088:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800408a:	f7fe fcc3 	bl	8002a14 <HAL_GetTick>
 800408e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004090:	e008      	b.n	80040a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004092:	f7fe fcbf 	bl	8002a14 <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	2b02      	cmp	r3, #2
 800409e:	d901      	bls.n	80040a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e19c      	b.n	80043de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040a4:	4b46      	ldr	r3, [pc, #280]	; (80041c0 <HAL_RCC_OscConfig+0x2ac>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0302 	and.w	r3, r3, #2
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d0f0      	beq.n	8004092 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040b0:	4b43      	ldr	r3, [pc, #268]	; (80041c0 <HAL_RCC_OscConfig+0x2ac>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	00db      	lsls	r3, r3, #3
 80040be:	4940      	ldr	r1, [pc, #256]	; (80041c0 <HAL_RCC_OscConfig+0x2ac>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	600b      	str	r3, [r1, #0]
 80040c4:	e015      	b.n	80040f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040c6:	4b3f      	ldr	r3, [pc, #252]	; (80041c4 <HAL_RCC_OscConfig+0x2b0>)
 80040c8:	2200      	movs	r2, #0
 80040ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040cc:	f7fe fca2 	bl	8002a14 <HAL_GetTick>
 80040d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040d2:	e008      	b.n	80040e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040d4:	f7fe fc9e 	bl	8002a14 <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d901      	bls.n	80040e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e17b      	b.n	80043de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040e6:	4b36      	ldr	r3, [pc, #216]	; (80041c0 <HAL_RCC_OscConfig+0x2ac>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0302 	and.w	r3, r3, #2
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d1f0      	bne.n	80040d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0308 	and.w	r3, r3, #8
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d030      	beq.n	8004160 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	695b      	ldr	r3, [r3, #20]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d016      	beq.n	8004134 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004106:	4b30      	ldr	r3, [pc, #192]	; (80041c8 <HAL_RCC_OscConfig+0x2b4>)
 8004108:	2201      	movs	r2, #1
 800410a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800410c:	f7fe fc82 	bl	8002a14 <HAL_GetTick>
 8004110:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004112:	e008      	b.n	8004126 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004114:	f7fe fc7e 	bl	8002a14 <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	2b02      	cmp	r3, #2
 8004120:	d901      	bls.n	8004126 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e15b      	b.n	80043de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004126:	4b26      	ldr	r3, [pc, #152]	; (80041c0 <HAL_RCC_OscConfig+0x2ac>)
 8004128:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800412a:	f003 0302 	and.w	r3, r3, #2
 800412e:	2b00      	cmp	r3, #0
 8004130:	d0f0      	beq.n	8004114 <HAL_RCC_OscConfig+0x200>
 8004132:	e015      	b.n	8004160 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004134:	4b24      	ldr	r3, [pc, #144]	; (80041c8 <HAL_RCC_OscConfig+0x2b4>)
 8004136:	2200      	movs	r2, #0
 8004138:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800413a:	f7fe fc6b 	bl	8002a14 <HAL_GetTick>
 800413e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004140:	e008      	b.n	8004154 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004142:	f7fe fc67 	bl	8002a14 <HAL_GetTick>
 8004146:	4602      	mov	r2, r0
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	2b02      	cmp	r3, #2
 800414e:	d901      	bls.n	8004154 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	e144      	b.n	80043de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004154:	4b1a      	ldr	r3, [pc, #104]	; (80041c0 <HAL_RCC_OscConfig+0x2ac>)
 8004156:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004158:	f003 0302 	and.w	r3, r3, #2
 800415c:	2b00      	cmp	r3, #0
 800415e:	d1f0      	bne.n	8004142 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0304 	and.w	r3, r3, #4
 8004168:	2b00      	cmp	r3, #0
 800416a:	f000 80a0 	beq.w	80042ae <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800416e:	2300      	movs	r3, #0
 8004170:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004172:	4b13      	ldr	r3, [pc, #76]	; (80041c0 <HAL_RCC_OscConfig+0x2ac>)
 8004174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d10f      	bne.n	800419e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800417e:	2300      	movs	r3, #0
 8004180:	60bb      	str	r3, [r7, #8]
 8004182:	4b0f      	ldr	r3, [pc, #60]	; (80041c0 <HAL_RCC_OscConfig+0x2ac>)
 8004184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004186:	4a0e      	ldr	r2, [pc, #56]	; (80041c0 <HAL_RCC_OscConfig+0x2ac>)
 8004188:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800418c:	6413      	str	r3, [r2, #64]	; 0x40
 800418e:	4b0c      	ldr	r3, [pc, #48]	; (80041c0 <HAL_RCC_OscConfig+0x2ac>)
 8004190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004196:	60bb      	str	r3, [r7, #8]
 8004198:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800419a:	2301      	movs	r3, #1
 800419c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800419e:	4b0b      	ldr	r3, [pc, #44]	; (80041cc <HAL_RCC_OscConfig+0x2b8>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d121      	bne.n	80041ee <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041aa:	4b08      	ldr	r3, [pc, #32]	; (80041cc <HAL_RCC_OscConfig+0x2b8>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a07      	ldr	r2, [pc, #28]	; (80041cc <HAL_RCC_OscConfig+0x2b8>)
 80041b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041b6:	f7fe fc2d 	bl	8002a14 <HAL_GetTick>
 80041ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041bc:	e011      	b.n	80041e2 <HAL_RCC_OscConfig+0x2ce>
 80041be:	bf00      	nop
 80041c0:	40023800 	.word	0x40023800
 80041c4:	42470000 	.word	0x42470000
 80041c8:	42470e80 	.word	0x42470e80
 80041cc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041d0:	f7fe fc20 	bl	8002a14 <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d901      	bls.n	80041e2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80041de:	2303      	movs	r3, #3
 80041e0:	e0fd      	b.n	80043de <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041e2:	4b81      	ldr	r3, [pc, #516]	; (80043e8 <HAL_RCC_OscConfig+0x4d4>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d0f0      	beq.n	80041d0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d106      	bne.n	8004204 <HAL_RCC_OscConfig+0x2f0>
 80041f6:	4b7d      	ldr	r3, [pc, #500]	; (80043ec <HAL_RCC_OscConfig+0x4d8>)
 80041f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041fa:	4a7c      	ldr	r2, [pc, #496]	; (80043ec <HAL_RCC_OscConfig+0x4d8>)
 80041fc:	f043 0301 	orr.w	r3, r3, #1
 8004200:	6713      	str	r3, [r2, #112]	; 0x70
 8004202:	e01c      	b.n	800423e <HAL_RCC_OscConfig+0x32a>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	2b05      	cmp	r3, #5
 800420a:	d10c      	bne.n	8004226 <HAL_RCC_OscConfig+0x312>
 800420c:	4b77      	ldr	r3, [pc, #476]	; (80043ec <HAL_RCC_OscConfig+0x4d8>)
 800420e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004210:	4a76      	ldr	r2, [pc, #472]	; (80043ec <HAL_RCC_OscConfig+0x4d8>)
 8004212:	f043 0304 	orr.w	r3, r3, #4
 8004216:	6713      	str	r3, [r2, #112]	; 0x70
 8004218:	4b74      	ldr	r3, [pc, #464]	; (80043ec <HAL_RCC_OscConfig+0x4d8>)
 800421a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800421c:	4a73      	ldr	r2, [pc, #460]	; (80043ec <HAL_RCC_OscConfig+0x4d8>)
 800421e:	f043 0301 	orr.w	r3, r3, #1
 8004222:	6713      	str	r3, [r2, #112]	; 0x70
 8004224:	e00b      	b.n	800423e <HAL_RCC_OscConfig+0x32a>
 8004226:	4b71      	ldr	r3, [pc, #452]	; (80043ec <HAL_RCC_OscConfig+0x4d8>)
 8004228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800422a:	4a70      	ldr	r2, [pc, #448]	; (80043ec <HAL_RCC_OscConfig+0x4d8>)
 800422c:	f023 0301 	bic.w	r3, r3, #1
 8004230:	6713      	str	r3, [r2, #112]	; 0x70
 8004232:	4b6e      	ldr	r3, [pc, #440]	; (80043ec <HAL_RCC_OscConfig+0x4d8>)
 8004234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004236:	4a6d      	ldr	r2, [pc, #436]	; (80043ec <HAL_RCC_OscConfig+0x4d8>)
 8004238:	f023 0304 	bic.w	r3, r3, #4
 800423c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d015      	beq.n	8004272 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004246:	f7fe fbe5 	bl	8002a14 <HAL_GetTick>
 800424a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800424c:	e00a      	b.n	8004264 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800424e:	f7fe fbe1 	bl	8002a14 <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	f241 3288 	movw	r2, #5000	; 0x1388
 800425c:	4293      	cmp	r3, r2
 800425e:	d901      	bls.n	8004264 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004260:	2303      	movs	r3, #3
 8004262:	e0bc      	b.n	80043de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004264:	4b61      	ldr	r3, [pc, #388]	; (80043ec <HAL_RCC_OscConfig+0x4d8>)
 8004266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004268:	f003 0302 	and.w	r3, r3, #2
 800426c:	2b00      	cmp	r3, #0
 800426e:	d0ee      	beq.n	800424e <HAL_RCC_OscConfig+0x33a>
 8004270:	e014      	b.n	800429c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004272:	f7fe fbcf 	bl	8002a14 <HAL_GetTick>
 8004276:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004278:	e00a      	b.n	8004290 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800427a:	f7fe fbcb 	bl	8002a14 <HAL_GetTick>
 800427e:	4602      	mov	r2, r0
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	f241 3288 	movw	r2, #5000	; 0x1388
 8004288:	4293      	cmp	r3, r2
 800428a:	d901      	bls.n	8004290 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800428c:	2303      	movs	r3, #3
 800428e:	e0a6      	b.n	80043de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004290:	4b56      	ldr	r3, [pc, #344]	; (80043ec <HAL_RCC_OscConfig+0x4d8>)
 8004292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004294:	f003 0302 	and.w	r3, r3, #2
 8004298:	2b00      	cmp	r3, #0
 800429a:	d1ee      	bne.n	800427a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800429c:	7dfb      	ldrb	r3, [r7, #23]
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d105      	bne.n	80042ae <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042a2:	4b52      	ldr	r3, [pc, #328]	; (80043ec <HAL_RCC_OscConfig+0x4d8>)
 80042a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a6:	4a51      	ldr	r2, [pc, #324]	; (80043ec <HAL_RCC_OscConfig+0x4d8>)
 80042a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042ac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	699b      	ldr	r3, [r3, #24]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	f000 8092 	beq.w	80043dc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042b8:	4b4c      	ldr	r3, [pc, #304]	; (80043ec <HAL_RCC_OscConfig+0x4d8>)
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	f003 030c 	and.w	r3, r3, #12
 80042c0:	2b08      	cmp	r3, #8
 80042c2:	d05c      	beq.n	800437e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	699b      	ldr	r3, [r3, #24]
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d141      	bne.n	8004350 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042cc:	4b48      	ldr	r3, [pc, #288]	; (80043f0 <HAL_RCC_OscConfig+0x4dc>)
 80042ce:	2200      	movs	r2, #0
 80042d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042d2:	f7fe fb9f 	bl	8002a14 <HAL_GetTick>
 80042d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042d8:	e008      	b.n	80042ec <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042da:	f7fe fb9b 	bl	8002a14 <HAL_GetTick>
 80042de:	4602      	mov	r2, r0
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	d901      	bls.n	80042ec <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	e078      	b.n	80043de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042ec:	4b3f      	ldr	r3, [pc, #252]	; (80043ec <HAL_RCC_OscConfig+0x4d8>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d1f0      	bne.n	80042da <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	69da      	ldr	r2, [r3, #28]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6a1b      	ldr	r3, [r3, #32]
 8004300:	431a      	orrs	r2, r3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004306:	019b      	lsls	r3, r3, #6
 8004308:	431a      	orrs	r2, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800430e:	085b      	lsrs	r3, r3, #1
 8004310:	3b01      	subs	r3, #1
 8004312:	041b      	lsls	r3, r3, #16
 8004314:	431a      	orrs	r2, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800431a:	061b      	lsls	r3, r3, #24
 800431c:	4933      	ldr	r1, [pc, #204]	; (80043ec <HAL_RCC_OscConfig+0x4d8>)
 800431e:	4313      	orrs	r3, r2
 8004320:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004322:	4b33      	ldr	r3, [pc, #204]	; (80043f0 <HAL_RCC_OscConfig+0x4dc>)
 8004324:	2201      	movs	r2, #1
 8004326:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004328:	f7fe fb74 	bl	8002a14 <HAL_GetTick>
 800432c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800432e:	e008      	b.n	8004342 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004330:	f7fe fb70 	bl	8002a14 <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	2b02      	cmp	r3, #2
 800433c:	d901      	bls.n	8004342 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e04d      	b.n	80043de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004342:	4b2a      	ldr	r3, [pc, #168]	; (80043ec <HAL_RCC_OscConfig+0x4d8>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d0f0      	beq.n	8004330 <HAL_RCC_OscConfig+0x41c>
 800434e:	e045      	b.n	80043dc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004350:	4b27      	ldr	r3, [pc, #156]	; (80043f0 <HAL_RCC_OscConfig+0x4dc>)
 8004352:	2200      	movs	r2, #0
 8004354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004356:	f7fe fb5d 	bl	8002a14 <HAL_GetTick>
 800435a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800435c:	e008      	b.n	8004370 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800435e:	f7fe fb59 	bl	8002a14 <HAL_GetTick>
 8004362:	4602      	mov	r2, r0
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	2b02      	cmp	r3, #2
 800436a:	d901      	bls.n	8004370 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800436c:	2303      	movs	r3, #3
 800436e:	e036      	b.n	80043de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004370:	4b1e      	ldr	r3, [pc, #120]	; (80043ec <HAL_RCC_OscConfig+0x4d8>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d1f0      	bne.n	800435e <HAL_RCC_OscConfig+0x44a>
 800437c:	e02e      	b.n	80043dc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	2b01      	cmp	r3, #1
 8004384:	d101      	bne.n	800438a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e029      	b.n	80043de <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800438a:	4b18      	ldr	r3, [pc, #96]	; (80043ec <HAL_RCC_OscConfig+0x4d8>)
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	69db      	ldr	r3, [r3, #28]
 800439a:	429a      	cmp	r2, r3
 800439c:	d11c      	bne.n	80043d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d115      	bne.n	80043d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80043b2:	4013      	ands	r3, r2
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d10d      	bne.n	80043d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d106      	bne.n	80043d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d001      	beq.n	80043dc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e000      	b.n	80043de <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80043dc:	2300      	movs	r3, #0
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3718      	adds	r7, #24
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	40007000 	.word	0x40007000
 80043ec:	40023800 	.word	0x40023800
 80043f0:	42470060 	.word	0x42470060

080043f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b084      	sub	sp, #16
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d101      	bne.n	8004408 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e0cc      	b.n	80045a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004408:	4b68      	ldr	r3, [pc, #416]	; (80045ac <HAL_RCC_ClockConfig+0x1b8>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 030f 	and.w	r3, r3, #15
 8004410:	683a      	ldr	r2, [r7, #0]
 8004412:	429a      	cmp	r2, r3
 8004414:	d90c      	bls.n	8004430 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004416:	4b65      	ldr	r3, [pc, #404]	; (80045ac <HAL_RCC_ClockConfig+0x1b8>)
 8004418:	683a      	ldr	r2, [r7, #0]
 800441a:	b2d2      	uxtb	r2, r2
 800441c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800441e:	4b63      	ldr	r3, [pc, #396]	; (80045ac <HAL_RCC_ClockConfig+0x1b8>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 030f 	and.w	r3, r3, #15
 8004426:	683a      	ldr	r2, [r7, #0]
 8004428:	429a      	cmp	r2, r3
 800442a:	d001      	beq.n	8004430 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e0b8      	b.n	80045a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0302 	and.w	r3, r3, #2
 8004438:	2b00      	cmp	r3, #0
 800443a:	d020      	beq.n	800447e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0304 	and.w	r3, r3, #4
 8004444:	2b00      	cmp	r3, #0
 8004446:	d005      	beq.n	8004454 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004448:	4b59      	ldr	r3, [pc, #356]	; (80045b0 <HAL_RCC_ClockConfig+0x1bc>)
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	4a58      	ldr	r2, [pc, #352]	; (80045b0 <HAL_RCC_ClockConfig+0x1bc>)
 800444e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004452:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0308 	and.w	r3, r3, #8
 800445c:	2b00      	cmp	r3, #0
 800445e:	d005      	beq.n	800446c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004460:	4b53      	ldr	r3, [pc, #332]	; (80045b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	4a52      	ldr	r2, [pc, #328]	; (80045b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004466:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800446a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800446c:	4b50      	ldr	r3, [pc, #320]	; (80045b0 <HAL_RCC_ClockConfig+0x1bc>)
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	494d      	ldr	r1, [pc, #308]	; (80045b0 <HAL_RCC_ClockConfig+0x1bc>)
 800447a:	4313      	orrs	r3, r2
 800447c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0301 	and.w	r3, r3, #1
 8004486:	2b00      	cmp	r3, #0
 8004488:	d044      	beq.n	8004514 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	2b01      	cmp	r3, #1
 8004490:	d107      	bne.n	80044a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004492:	4b47      	ldr	r3, [pc, #284]	; (80045b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d119      	bne.n	80044d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e07f      	b.n	80045a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d003      	beq.n	80044b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044ae:	2b03      	cmp	r3, #3
 80044b0:	d107      	bne.n	80044c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044b2:	4b3f      	ldr	r3, [pc, #252]	; (80045b0 <HAL_RCC_ClockConfig+0x1bc>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d109      	bne.n	80044d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e06f      	b.n	80045a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044c2:	4b3b      	ldr	r3, [pc, #236]	; (80045b0 <HAL_RCC_ClockConfig+0x1bc>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0302 	and.w	r3, r3, #2
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d101      	bne.n	80044d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e067      	b.n	80045a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044d2:	4b37      	ldr	r3, [pc, #220]	; (80045b0 <HAL_RCC_ClockConfig+0x1bc>)
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	f023 0203 	bic.w	r2, r3, #3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	4934      	ldr	r1, [pc, #208]	; (80045b0 <HAL_RCC_ClockConfig+0x1bc>)
 80044e0:	4313      	orrs	r3, r2
 80044e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044e4:	f7fe fa96 	bl	8002a14 <HAL_GetTick>
 80044e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044ea:	e00a      	b.n	8004502 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044ec:	f7fe fa92 	bl	8002a14 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d901      	bls.n	8004502 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e04f      	b.n	80045a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004502:	4b2b      	ldr	r3, [pc, #172]	; (80045b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	f003 020c 	and.w	r2, r3, #12
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	429a      	cmp	r2, r3
 8004512:	d1eb      	bne.n	80044ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004514:	4b25      	ldr	r3, [pc, #148]	; (80045ac <HAL_RCC_ClockConfig+0x1b8>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 030f 	and.w	r3, r3, #15
 800451c:	683a      	ldr	r2, [r7, #0]
 800451e:	429a      	cmp	r2, r3
 8004520:	d20c      	bcs.n	800453c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004522:	4b22      	ldr	r3, [pc, #136]	; (80045ac <HAL_RCC_ClockConfig+0x1b8>)
 8004524:	683a      	ldr	r2, [r7, #0]
 8004526:	b2d2      	uxtb	r2, r2
 8004528:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800452a:	4b20      	ldr	r3, [pc, #128]	; (80045ac <HAL_RCC_ClockConfig+0x1b8>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 030f 	and.w	r3, r3, #15
 8004532:	683a      	ldr	r2, [r7, #0]
 8004534:	429a      	cmp	r2, r3
 8004536:	d001      	beq.n	800453c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e032      	b.n	80045a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0304 	and.w	r3, r3, #4
 8004544:	2b00      	cmp	r3, #0
 8004546:	d008      	beq.n	800455a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004548:	4b19      	ldr	r3, [pc, #100]	; (80045b0 <HAL_RCC_ClockConfig+0x1bc>)
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	4916      	ldr	r1, [pc, #88]	; (80045b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004556:	4313      	orrs	r3, r2
 8004558:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0308 	and.w	r3, r3, #8
 8004562:	2b00      	cmp	r3, #0
 8004564:	d009      	beq.n	800457a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004566:	4b12      	ldr	r3, [pc, #72]	; (80045b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	00db      	lsls	r3, r3, #3
 8004574:	490e      	ldr	r1, [pc, #56]	; (80045b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004576:	4313      	orrs	r3, r2
 8004578:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800457a:	f000 f821 	bl	80045c0 <HAL_RCC_GetSysClockFreq>
 800457e:	4601      	mov	r1, r0
 8004580:	4b0b      	ldr	r3, [pc, #44]	; (80045b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	091b      	lsrs	r3, r3, #4
 8004586:	f003 030f 	and.w	r3, r3, #15
 800458a:	4a0a      	ldr	r2, [pc, #40]	; (80045b4 <HAL_RCC_ClockConfig+0x1c0>)
 800458c:	5cd3      	ldrb	r3, [r2, r3]
 800458e:	fa21 f303 	lsr.w	r3, r1, r3
 8004592:	4a09      	ldr	r2, [pc, #36]	; (80045b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004594:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004596:	4b09      	ldr	r3, [pc, #36]	; (80045bc <HAL_RCC_ClockConfig+0x1c8>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4618      	mov	r0, r3
 800459c:	f7fe f9f6 	bl	800298c <HAL_InitTick>

  return HAL_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3710      	adds	r7, #16
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	40023c00 	.word	0x40023c00
 80045b0:	40023800 	.word	0x40023800
 80045b4:	08009c18 	.word	0x08009c18
 80045b8:	20000008 	.word	0x20000008
 80045bc:	2000000c 	.word	0x2000000c

080045c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045c2:	b085      	sub	sp, #20
 80045c4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80045c6:	2300      	movs	r3, #0
 80045c8:	607b      	str	r3, [r7, #4]
 80045ca:	2300      	movs	r3, #0
 80045cc:	60fb      	str	r3, [r7, #12]
 80045ce:	2300      	movs	r3, #0
 80045d0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80045d2:	2300      	movs	r3, #0
 80045d4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045d6:	4b50      	ldr	r3, [pc, #320]	; (8004718 <HAL_RCC_GetSysClockFreq+0x158>)
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	f003 030c 	and.w	r3, r3, #12
 80045de:	2b04      	cmp	r3, #4
 80045e0:	d007      	beq.n	80045f2 <HAL_RCC_GetSysClockFreq+0x32>
 80045e2:	2b08      	cmp	r3, #8
 80045e4:	d008      	beq.n	80045f8 <HAL_RCC_GetSysClockFreq+0x38>
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	f040 808d 	bne.w	8004706 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045ec:	4b4b      	ldr	r3, [pc, #300]	; (800471c <HAL_RCC_GetSysClockFreq+0x15c>)
 80045ee:	60bb      	str	r3, [r7, #8]
       break;
 80045f0:	e08c      	b.n	800470c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045f2:	4b4b      	ldr	r3, [pc, #300]	; (8004720 <HAL_RCC_GetSysClockFreq+0x160>)
 80045f4:	60bb      	str	r3, [r7, #8]
      break;
 80045f6:	e089      	b.n	800470c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045f8:	4b47      	ldr	r3, [pc, #284]	; (8004718 <HAL_RCC_GetSysClockFreq+0x158>)
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004600:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004602:	4b45      	ldr	r3, [pc, #276]	; (8004718 <HAL_RCC_GetSysClockFreq+0x158>)
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d023      	beq.n	8004656 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800460e:	4b42      	ldr	r3, [pc, #264]	; (8004718 <HAL_RCC_GetSysClockFreq+0x158>)
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	099b      	lsrs	r3, r3, #6
 8004614:	f04f 0400 	mov.w	r4, #0
 8004618:	f240 11ff 	movw	r1, #511	; 0x1ff
 800461c:	f04f 0200 	mov.w	r2, #0
 8004620:	ea03 0501 	and.w	r5, r3, r1
 8004624:	ea04 0602 	and.w	r6, r4, r2
 8004628:	4a3d      	ldr	r2, [pc, #244]	; (8004720 <HAL_RCC_GetSysClockFreq+0x160>)
 800462a:	fb02 f106 	mul.w	r1, r2, r6
 800462e:	2200      	movs	r2, #0
 8004630:	fb02 f205 	mul.w	r2, r2, r5
 8004634:	440a      	add	r2, r1
 8004636:	493a      	ldr	r1, [pc, #232]	; (8004720 <HAL_RCC_GetSysClockFreq+0x160>)
 8004638:	fba5 0101 	umull	r0, r1, r5, r1
 800463c:	1853      	adds	r3, r2, r1
 800463e:	4619      	mov	r1, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f04f 0400 	mov.w	r4, #0
 8004646:	461a      	mov	r2, r3
 8004648:	4623      	mov	r3, r4
 800464a:	f7fc faa9 	bl	8000ba0 <__aeabi_uldivmod>
 800464e:	4603      	mov	r3, r0
 8004650:	460c      	mov	r4, r1
 8004652:	60fb      	str	r3, [r7, #12]
 8004654:	e049      	b.n	80046ea <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004656:	4b30      	ldr	r3, [pc, #192]	; (8004718 <HAL_RCC_GetSysClockFreq+0x158>)
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	099b      	lsrs	r3, r3, #6
 800465c:	f04f 0400 	mov.w	r4, #0
 8004660:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004664:	f04f 0200 	mov.w	r2, #0
 8004668:	ea03 0501 	and.w	r5, r3, r1
 800466c:	ea04 0602 	and.w	r6, r4, r2
 8004670:	4629      	mov	r1, r5
 8004672:	4632      	mov	r2, r6
 8004674:	f04f 0300 	mov.w	r3, #0
 8004678:	f04f 0400 	mov.w	r4, #0
 800467c:	0154      	lsls	r4, r2, #5
 800467e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004682:	014b      	lsls	r3, r1, #5
 8004684:	4619      	mov	r1, r3
 8004686:	4622      	mov	r2, r4
 8004688:	1b49      	subs	r1, r1, r5
 800468a:	eb62 0206 	sbc.w	r2, r2, r6
 800468e:	f04f 0300 	mov.w	r3, #0
 8004692:	f04f 0400 	mov.w	r4, #0
 8004696:	0194      	lsls	r4, r2, #6
 8004698:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800469c:	018b      	lsls	r3, r1, #6
 800469e:	1a5b      	subs	r3, r3, r1
 80046a0:	eb64 0402 	sbc.w	r4, r4, r2
 80046a4:	f04f 0100 	mov.w	r1, #0
 80046a8:	f04f 0200 	mov.w	r2, #0
 80046ac:	00e2      	lsls	r2, r4, #3
 80046ae:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80046b2:	00d9      	lsls	r1, r3, #3
 80046b4:	460b      	mov	r3, r1
 80046b6:	4614      	mov	r4, r2
 80046b8:	195b      	adds	r3, r3, r5
 80046ba:	eb44 0406 	adc.w	r4, r4, r6
 80046be:	f04f 0100 	mov.w	r1, #0
 80046c2:	f04f 0200 	mov.w	r2, #0
 80046c6:	02a2      	lsls	r2, r4, #10
 80046c8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80046cc:	0299      	lsls	r1, r3, #10
 80046ce:	460b      	mov	r3, r1
 80046d0:	4614      	mov	r4, r2
 80046d2:	4618      	mov	r0, r3
 80046d4:	4621      	mov	r1, r4
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f04f 0400 	mov.w	r4, #0
 80046dc:	461a      	mov	r2, r3
 80046de:	4623      	mov	r3, r4
 80046e0:	f7fc fa5e 	bl	8000ba0 <__aeabi_uldivmod>
 80046e4:	4603      	mov	r3, r0
 80046e6:	460c      	mov	r4, r1
 80046e8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80046ea:	4b0b      	ldr	r3, [pc, #44]	; (8004718 <HAL_RCC_GetSysClockFreq+0x158>)
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	0c1b      	lsrs	r3, r3, #16
 80046f0:	f003 0303 	and.w	r3, r3, #3
 80046f4:	3301      	adds	r3, #1
 80046f6:	005b      	lsls	r3, r3, #1
 80046f8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80046fa:	68fa      	ldr	r2, [r7, #12]
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004702:	60bb      	str	r3, [r7, #8]
      break;
 8004704:	e002      	b.n	800470c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004706:	4b05      	ldr	r3, [pc, #20]	; (800471c <HAL_RCC_GetSysClockFreq+0x15c>)
 8004708:	60bb      	str	r3, [r7, #8]
      break;
 800470a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800470c:	68bb      	ldr	r3, [r7, #8]
}
 800470e:	4618      	mov	r0, r3
 8004710:	3714      	adds	r7, #20
 8004712:	46bd      	mov	sp, r7
 8004714:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004716:	bf00      	nop
 8004718:	40023800 	.word	0x40023800
 800471c:	00f42400 	.word	0x00f42400
 8004720:	017d7840 	.word	0x017d7840

08004724 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004724:	b480      	push	{r7}
 8004726:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004728:	4b03      	ldr	r3, [pc, #12]	; (8004738 <HAL_RCC_GetHCLKFreq+0x14>)
 800472a:	681b      	ldr	r3, [r3, #0]
}
 800472c:	4618      	mov	r0, r3
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr
 8004736:	bf00      	nop
 8004738:	20000008 	.word	0x20000008

0800473c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004740:	f7ff fff0 	bl	8004724 <HAL_RCC_GetHCLKFreq>
 8004744:	4601      	mov	r1, r0
 8004746:	4b05      	ldr	r3, [pc, #20]	; (800475c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	0a9b      	lsrs	r3, r3, #10
 800474c:	f003 0307 	and.w	r3, r3, #7
 8004750:	4a03      	ldr	r2, [pc, #12]	; (8004760 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004752:	5cd3      	ldrb	r3, [r2, r3]
 8004754:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004758:	4618      	mov	r0, r3
 800475a:	bd80      	pop	{r7, pc}
 800475c:	40023800 	.word	0x40023800
 8004760:	08009c28 	.word	0x08009c28

08004764 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004768:	f7ff ffdc 	bl	8004724 <HAL_RCC_GetHCLKFreq>
 800476c:	4601      	mov	r1, r0
 800476e:	4b05      	ldr	r3, [pc, #20]	; (8004784 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	0b5b      	lsrs	r3, r3, #13
 8004774:	f003 0307 	and.w	r3, r3, #7
 8004778:	4a03      	ldr	r2, [pc, #12]	; (8004788 <HAL_RCC_GetPCLK2Freq+0x24>)
 800477a:	5cd3      	ldrb	r3, [r2, r3]
 800477c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004780:	4618      	mov	r0, r3
 8004782:	bd80      	pop	{r7, pc}
 8004784:	40023800 	.word	0x40023800
 8004788:	08009c28 	.word	0x08009c28

0800478c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b082      	sub	sp, #8
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d101      	bne.n	800479e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e056      	b.n	800484c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d106      	bne.n	80047be <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f7fd fb1f 	bl	8001dfc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2202      	movs	r2, #2
 80047c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047d4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	685a      	ldr	r2, [r3, #4]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	431a      	orrs	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	431a      	orrs	r2, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	431a      	orrs	r2, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	695b      	ldr	r3, [r3, #20]
 80047f0:	431a      	orrs	r2, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	699b      	ldr	r3, [r3, #24]
 80047f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047fa:	431a      	orrs	r2, r3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	69db      	ldr	r3, [r3, #28]
 8004800:	431a      	orrs	r2, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a1b      	ldr	r3, [r3, #32]
 8004806:	ea42 0103 	orr.w	r1, r2, r3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	430a      	orrs	r2, r1
 8004814:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	699b      	ldr	r3, [r3, #24]
 800481a:	0c1b      	lsrs	r3, r3, #16
 800481c:	f003 0104 	and.w	r1, r3, #4
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	430a      	orrs	r2, r1
 800482a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	69da      	ldr	r2, [r3, #28]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800483a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2201      	movs	r2, #1
 8004846:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800484a:	2300      	movs	r3, #0
}
 800484c:	4618      	mov	r0, r3
 800484e:	3708      	adds	r7, #8
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b08c      	sub	sp, #48	; 0x30
 8004858:	af00      	add	r7, sp, #0
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	60b9      	str	r1, [r7, #8]
 800485e:	607a      	str	r2, [r7, #4]
 8004860:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004862:	2301      	movs	r3, #1
 8004864:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004866:	2300      	movs	r3, #0
 8004868:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004872:	2b01      	cmp	r3, #1
 8004874:	d101      	bne.n	800487a <HAL_SPI_TransmitReceive+0x26>
 8004876:	2302      	movs	r3, #2
 8004878:	e18a      	b.n	8004b90 <HAL_SPI_TransmitReceive+0x33c>
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2201      	movs	r2, #1
 800487e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004882:	f7fe f8c7 	bl	8002a14 <HAL_GetTick>
 8004886:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800488e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004898:	887b      	ldrh	r3, [r7, #2]
 800489a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800489c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d00f      	beq.n	80048c4 <HAL_SPI_TransmitReceive+0x70>
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048aa:	d107      	bne.n	80048bc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d103      	bne.n	80048bc <HAL_SPI_TransmitReceive+0x68>
 80048b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80048b8:	2b04      	cmp	r3, #4
 80048ba:	d003      	beq.n	80048c4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80048bc:	2302      	movs	r3, #2
 80048be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80048c2:	e15b      	b.n	8004b7c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d005      	beq.n	80048d6 <HAL_SPI_TransmitReceive+0x82>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d002      	beq.n	80048d6 <HAL_SPI_TransmitReceive+0x82>
 80048d0:	887b      	ldrh	r3, [r7, #2]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d103      	bne.n	80048de <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80048dc:	e14e      	b.n	8004b7c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	2b04      	cmp	r3, #4
 80048e8:	d003      	beq.n	80048f2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2205      	movs	r2, #5
 80048ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2200      	movs	r2, #0
 80048f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	887a      	ldrh	r2, [r7, #2]
 8004902:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	887a      	ldrh	r2, [r7, #2]
 8004908:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	68ba      	ldr	r2, [r7, #8]
 800490e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	887a      	ldrh	r2, [r7, #2]
 8004914:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	887a      	ldrh	r2, [r7, #2]
 800491a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2200      	movs	r2, #0
 8004920:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2200      	movs	r2, #0
 8004926:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004932:	2b40      	cmp	r3, #64	; 0x40
 8004934:	d007      	beq.n	8004946 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004944:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800494e:	d178      	bne.n	8004a42 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d002      	beq.n	800495e <HAL_SPI_TransmitReceive+0x10a>
 8004958:	8b7b      	ldrh	r3, [r7, #26]
 800495a:	2b01      	cmp	r3, #1
 800495c:	d166      	bne.n	8004a2c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004962:	881a      	ldrh	r2, [r3, #0]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800496e:	1c9a      	adds	r2, r3, #2
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004978:	b29b      	uxth	r3, r3
 800497a:	3b01      	subs	r3, #1
 800497c:	b29a      	uxth	r2, r3
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004982:	e053      	b.n	8004a2c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	f003 0302 	and.w	r3, r3, #2
 800498e:	2b02      	cmp	r3, #2
 8004990:	d11b      	bne.n	80049ca <HAL_SPI_TransmitReceive+0x176>
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004996:	b29b      	uxth	r3, r3
 8004998:	2b00      	cmp	r3, #0
 800499a:	d016      	beq.n	80049ca <HAL_SPI_TransmitReceive+0x176>
 800499c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d113      	bne.n	80049ca <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a6:	881a      	ldrh	r2, [r3, #0]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b2:	1c9a      	adds	r2, r3, #2
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049bc:	b29b      	uxth	r3, r3
 80049be:	3b01      	subs	r3, #1
 80049c0:	b29a      	uxth	r2, r3
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80049c6:	2300      	movs	r3, #0
 80049c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	f003 0301 	and.w	r3, r3, #1
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d119      	bne.n	8004a0c <HAL_SPI_TransmitReceive+0x1b8>
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049dc:	b29b      	uxth	r3, r3
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d014      	beq.n	8004a0c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	68da      	ldr	r2, [r3, #12]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ec:	b292      	uxth	r2, r2
 80049ee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f4:	1c9a      	adds	r2, r3, #2
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	3b01      	subs	r3, #1
 8004a02:	b29a      	uxth	r2, r3
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004a0c:	f7fe f802 	bl	8002a14 <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d807      	bhi.n	8004a2c <HAL_SPI_TransmitReceive+0x1d8>
 8004a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a22:	d003      	beq.n	8004a2c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004a24:	2303      	movs	r3, #3
 8004a26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004a2a:	e0a7      	b.n	8004b7c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d1a6      	bne.n	8004984 <HAL_SPI_TransmitReceive+0x130>
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d1a1      	bne.n	8004984 <HAL_SPI_TransmitReceive+0x130>
 8004a40:	e07c      	b.n	8004b3c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d002      	beq.n	8004a50 <HAL_SPI_TransmitReceive+0x1fc>
 8004a4a:	8b7b      	ldrh	r3, [r7, #26]
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d16b      	bne.n	8004b28 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	330c      	adds	r3, #12
 8004a5a:	7812      	ldrb	r2, [r2, #0]
 8004a5c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a62:	1c5a      	adds	r2, r3, #1
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	3b01      	subs	r3, #1
 8004a70:	b29a      	uxth	r2, r3
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a76:	e057      	b.n	8004b28 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	f003 0302 	and.w	r3, r3, #2
 8004a82:	2b02      	cmp	r3, #2
 8004a84:	d11c      	bne.n	8004ac0 <HAL_SPI_TransmitReceive+0x26c>
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d017      	beq.n	8004ac0 <HAL_SPI_TransmitReceive+0x26c>
 8004a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d114      	bne.n	8004ac0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	330c      	adds	r3, #12
 8004aa0:	7812      	ldrb	r2, [r2, #0]
 8004aa2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa8:	1c5a      	adds	r2, r3, #1
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	3b01      	subs	r3, #1
 8004ab6:	b29a      	uxth	r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004abc:	2300      	movs	r3, #0
 8004abe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f003 0301 	and.w	r3, r3, #1
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d119      	bne.n	8004b02 <HAL_SPI_TransmitReceive+0x2ae>
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d014      	beq.n	8004b02 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68da      	ldr	r2, [r3, #12]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae2:	b2d2      	uxtb	r2, r2
 8004ae4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aea:	1c5a      	adds	r2, r3, #1
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	3b01      	subs	r3, #1
 8004af8:	b29a      	uxth	r2, r3
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004afe:	2301      	movs	r3, #1
 8004b00:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004b02:	f7fd ff87 	bl	8002a14 <HAL_GetTick>
 8004b06:	4602      	mov	r2, r0
 8004b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0a:	1ad3      	subs	r3, r2, r3
 8004b0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d803      	bhi.n	8004b1a <HAL_SPI_TransmitReceive+0x2c6>
 8004b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b18:	d102      	bne.n	8004b20 <HAL_SPI_TransmitReceive+0x2cc>
 8004b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d103      	bne.n	8004b28 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004b20:	2303      	movs	r3, #3
 8004b22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004b26:	e029      	b.n	8004b7c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d1a2      	bne.n	8004a78 <HAL_SPI_TransmitReceive+0x224>
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d19d      	bne.n	8004a78 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b3e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004b40:	68f8      	ldr	r0, [r7, #12]
 8004b42:	f000 f893 	bl	8004c6c <SPI_EndRxTxTransaction>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d006      	beq.n	8004b5a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2220      	movs	r2, #32
 8004b56:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004b58:	e010      	b.n	8004b7c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d10b      	bne.n	8004b7a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b62:	2300      	movs	r3, #0
 8004b64:	617b      	str	r3, [r7, #20]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	617b      	str	r3, [r7, #20]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	617b      	str	r3, [r7, #20]
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	e000      	b.n	8004b7c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004b7a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004b8c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3730      	adds	r7, #48	; 0x30
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	603b      	str	r3, [r7, #0]
 8004ba4:	4613      	mov	r3, r2
 8004ba6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ba8:	e04c      	b.n	8004c44 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bb0:	d048      	beq.n	8004c44 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004bb2:	f7fd ff2f 	bl	8002a14 <HAL_GetTick>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	69bb      	ldr	r3, [r7, #24]
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	683a      	ldr	r2, [r7, #0]
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d902      	bls.n	8004bc8 <SPI_WaitFlagStateUntilTimeout+0x30>
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d13d      	bne.n	8004c44 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	685a      	ldr	r2, [r3, #4]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004bd6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004be0:	d111      	bne.n	8004c06 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bea:	d004      	beq.n	8004bf6 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bf4:	d107      	bne.n	8004c06 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c04:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c0e:	d10f      	bne.n	8004c30 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c1e:	601a      	str	r2, [r3, #0]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c2e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004c40:	2303      	movs	r3, #3
 8004c42:	e00f      	b.n	8004c64 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	689a      	ldr	r2, [r3, #8]
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	68ba      	ldr	r2, [r7, #8]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	bf0c      	ite	eq
 8004c54:	2301      	moveq	r3, #1
 8004c56:	2300      	movne	r3, #0
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	79fb      	ldrb	r3, [r7, #7]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d1a3      	bne.n	8004baa <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004c62:	2300      	movs	r3, #0
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3710      	adds	r7, #16
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b088      	sub	sp, #32
 8004c70:	af02      	add	r7, sp, #8
 8004c72:	60f8      	str	r0, [r7, #12]
 8004c74:	60b9      	str	r1, [r7, #8]
 8004c76:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004c78:	4b1b      	ldr	r3, [pc, #108]	; (8004ce8 <SPI_EndRxTxTransaction+0x7c>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a1b      	ldr	r2, [pc, #108]	; (8004cec <SPI_EndRxTxTransaction+0x80>)
 8004c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c82:	0d5b      	lsrs	r3, r3, #21
 8004c84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004c88:	fb02 f303 	mul.w	r3, r2, r3
 8004c8c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c96:	d112      	bne.n	8004cbe <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	9300      	str	r3, [sp, #0]
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	2180      	movs	r1, #128	; 0x80
 8004ca2:	68f8      	ldr	r0, [r7, #12]
 8004ca4:	f7ff ff78 	bl	8004b98 <SPI_WaitFlagStateUntilTimeout>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d016      	beq.n	8004cdc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cb2:	f043 0220 	orr.w	r2, r3, #32
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e00f      	b.n	8004cde <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d00a      	beq.n	8004cda <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	3b01      	subs	r3, #1
 8004cc8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cd4:	2b80      	cmp	r3, #128	; 0x80
 8004cd6:	d0f2      	beq.n	8004cbe <SPI_EndRxTxTransaction+0x52>
 8004cd8:	e000      	b.n	8004cdc <SPI_EndRxTxTransaction+0x70>
        break;
 8004cda:	bf00      	nop
  }

  return HAL_OK;
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3718      	adds	r7, #24
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	20000008 	.word	0x20000008
 8004cec:	165e9f81 	.word	0x165e9f81

08004cf0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b082      	sub	sp, #8
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d101      	bne.n	8004d02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e01d      	b.n	8004d3e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d106      	bne.n	8004d1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f7fd fb98 	bl	800244c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2202      	movs	r2, #2
 8004d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	3304      	adds	r3, #4
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	4610      	mov	r0, r2
 8004d30:	f000 fb44 	bl	80053bc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3708      	adds	r7, #8
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}

08004d46 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d46:	b480      	push	{r7}
 8004d48:	b085      	sub	sp, #20
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	68da      	ldr	r2, [r3, #12]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f042 0201 	orr.w	r2, r2, #1
 8004d5c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	f003 0307 	and.w	r3, r3, #7
 8004d68:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2b06      	cmp	r3, #6
 8004d6e:	d007      	beq.n	8004d80 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f042 0201 	orr.w	r2, r2, #1
 8004d7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3714      	adds	r7, #20
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr

08004d8e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004d8e:	b580      	push	{r7, lr}
 8004d90:	b082      	sub	sp, #8
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d101      	bne.n	8004da0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e01d      	b.n	8004ddc <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d106      	bne.n	8004dba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f7fd fb85 	bl	80024c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2202      	movs	r2, #2
 8004dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	3304      	adds	r3, #4
 8004dca:	4619      	mov	r1, r3
 8004dcc:	4610      	mov	r0, r2
 8004dce:	f000 faf5 	bl	80053bc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004dda:	2300      	movs	r3, #0
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3708      	adds	r7, #8
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b084      	sub	sp, #16
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	2201      	movs	r2, #1
 8004df4:	6839      	ldr	r1, [r7, #0]
 8004df6:	4618      	mov	r0, r3
 8004df8:	f000 fdca 	bl	8005990 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a15      	ldr	r2, [pc, #84]	; (8004e58 <HAL_TIM_PWM_Start+0x74>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d004      	beq.n	8004e10 <HAL_TIM_PWM_Start+0x2c>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a14      	ldr	r2, [pc, #80]	; (8004e5c <HAL_TIM_PWM_Start+0x78>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d101      	bne.n	8004e14 <HAL_TIM_PWM_Start+0x30>
 8004e10:	2301      	movs	r3, #1
 8004e12:	e000      	b.n	8004e16 <HAL_TIM_PWM_Start+0x32>
 8004e14:	2300      	movs	r3, #0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d007      	beq.n	8004e2a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e28:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	f003 0307 	and.w	r3, r3, #7
 8004e34:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2b06      	cmp	r3, #6
 8004e3a:	d007      	beq.n	8004e4c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f042 0201 	orr.w	r2, r2, #1
 8004e4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e4c:	2300      	movs	r3, #0
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3710      	adds	r7, #16
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	40010000 	.word	0x40010000
 8004e5c:	40010400 	.word	0x40010400

08004e60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b082      	sub	sp, #8
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	691b      	ldr	r3, [r3, #16]
 8004e6e:	f003 0302 	and.w	r3, r3, #2
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d122      	bne.n	8004ebc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	f003 0302 	and.w	r3, r3, #2
 8004e80:	2b02      	cmp	r3, #2
 8004e82:	d11b      	bne.n	8004ebc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f06f 0202 	mvn.w	r2, #2
 8004e8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2201      	movs	r2, #1
 8004e92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	699b      	ldr	r3, [r3, #24]
 8004e9a:	f003 0303 	and.w	r3, r3, #3
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d003      	beq.n	8004eaa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 fa6b 	bl	800537e <HAL_TIM_IC_CaptureCallback>
 8004ea8:	e005      	b.n	8004eb6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 fa5d 	bl	800536a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f000 fa6e 	bl	8005392 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	f003 0304 	and.w	r3, r3, #4
 8004ec6:	2b04      	cmp	r3, #4
 8004ec8:	d122      	bne.n	8004f10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	f003 0304 	and.w	r3, r3, #4
 8004ed4:	2b04      	cmp	r3, #4
 8004ed6:	d11b      	bne.n	8004f10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f06f 0204 	mvn.w	r2, #4
 8004ee0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2202      	movs	r2, #2
 8004ee6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	699b      	ldr	r3, [r3, #24]
 8004eee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d003      	beq.n	8004efe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 fa41 	bl	800537e <HAL_TIM_IC_CaptureCallback>
 8004efc:	e005      	b.n	8004f0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f000 fa33 	bl	800536a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f000 fa44 	bl	8005392 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	f003 0308 	and.w	r3, r3, #8
 8004f1a:	2b08      	cmp	r3, #8
 8004f1c:	d122      	bne.n	8004f64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	f003 0308 	and.w	r3, r3, #8
 8004f28:	2b08      	cmp	r3, #8
 8004f2a:	d11b      	bne.n	8004f64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f06f 0208 	mvn.w	r2, #8
 8004f34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2204      	movs	r2, #4
 8004f3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	69db      	ldr	r3, [r3, #28]
 8004f42:	f003 0303 	and.w	r3, r3, #3
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d003      	beq.n	8004f52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f000 fa17 	bl	800537e <HAL_TIM_IC_CaptureCallback>
 8004f50:	e005      	b.n	8004f5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f000 fa09 	bl	800536a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 fa1a 	bl	8005392 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	f003 0310 	and.w	r3, r3, #16
 8004f6e:	2b10      	cmp	r3, #16
 8004f70:	d122      	bne.n	8004fb8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	f003 0310 	and.w	r3, r3, #16
 8004f7c:	2b10      	cmp	r3, #16
 8004f7e:	d11b      	bne.n	8004fb8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f06f 0210 	mvn.w	r2, #16
 8004f88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2208      	movs	r2, #8
 8004f8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	69db      	ldr	r3, [r3, #28]
 8004f96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d003      	beq.n	8004fa6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f000 f9ed 	bl	800537e <HAL_TIM_IC_CaptureCallback>
 8004fa4:	e005      	b.n	8004fb2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 f9df 	bl	800536a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f000 f9f0 	bl	8005392 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	691b      	ldr	r3, [r3, #16]
 8004fbe:	f003 0301 	and.w	r3, r3, #1
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d10e      	bne.n	8004fe4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	f003 0301 	and.w	r3, r3, #1
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d107      	bne.n	8004fe4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f06f 0201 	mvn.w	r2, #1
 8004fdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f7fc fd6a 	bl	8001ab8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	691b      	ldr	r3, [r3, #16]
 8004fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fee:	2b80      	cmp	r3, #128	; 0x80
 8004ff0:	d10e      	bne.n	8005010 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ffc:	2b80      	cmp	r3, #128	; 0x80
 8004ffe:	d107      	bne.n	8005010 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f000 fdbe 	bl	8005b8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800501a:	2b40      	cmp	r3, #64	; 0x40
 800501c:	d10e      	bne.n	800503c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005028:	2b40      	cmp	r3, #64	; 0x40
 800502a:	d107      	bne.n	800503c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 f9b5 	bl	80053a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	f003 0320 	and.w	r3, r3, #32
 8005046:	2b20      	cmp	r3, #32
 8005048:	d10e      	bne.n	8005068 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	f003 0320 	and.w	r3, r3, #32
 8005054:	2b20      	cmp	r3, #32
 8005056:	d107      	bne.n	8005068 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f06f 0220 	mvn.w	r2, #32
 8005060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 fd88 	bl	8005b78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005068:	bf00      	nop
 800506a:	3708      	adds	r7, #8
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}

08005070 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b084      	sub	sp, #16
 8005074:	af00      	add	r7, sp, #0
 8005076:	60f8      	str	r0, [r7, #12]
 8005078:	60b9      	str	r1, [r7, #8]
 800507a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005082:	2b01      	cmp	r3, #1
 8005084:	d101      	bne.n	800508a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005086:	2302      	movs	r3, #2
 8005088:	e0b4      	b.n	80051f4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2201      	movs	r2, #1
 800508e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2202      	movs	r2, #2
 8005096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2b0c      	cmp	r3, #12
 800509e:	f200 809f 	bhi.w	80051e0 <HAL_TIM_PWM_ConfigChannel+0x170>
 80050a2:	a201      	add	r2, pc, #4	; (adr r2, 80050a8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80050a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a8:	080050dd 	.word	0x080050dd
 80050ac:	080051e1 	.word	0x080051e1
 80050b0:	080051e1 	.word	0x080051e1
 80050b4:	080051e1 	.word	0x080051e1
 80050b8:	0800511d 	.word	0x0800511d
 80050bc:	080051e1 	.word	0x080051e1
 80050c0:	080051e1 	.word	0x080051e1
 80050c4:	080051e1 	.word	0x080051e1
 80050c8:	0800515f 	.word	0x0800515f
 80050cc:	080051e1 	.word	0x080051e1
 80050d0:	080051e1 	.word	0x080051e1
 80050d4:	080051e1 	.word	0x080051e1
 80050d8:	0800519f 	.word	0x0800519f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68b9      	ldr	r1, [r7, #8]
 80050e2:	4618      	mov	r0, r3
 80050e4:	f000 fa0a 	bl	80054fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	699a      	ldr	r2, [r3, #24]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f042 0208 	orr.w	r2, r2, #8
 80050f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	699a      	ldr	r2, [r3, #24]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f022 0204 	bic.w	r2, r2, #4
 8005106:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	6999      	ldr	r1, [r3, #24]
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	691a      	ldr	r2, [r3, #16]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	430a      	orrs	r2, r1
 8005118:	619a      	str	r2, [r3, #24]
      break;
 800511a:	e062      	b.n	80051e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	68b9      	ldr	r1, [r7, #8]
 8005122:	4618      	mov	r0, r3
 8005124:	f000 fa5a 	bl	80055dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	699a      	ldr	r2, [r3, #24]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005136:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	699a      	ldr	r2, [r3, #24]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005146:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	6999      	ldr	r1, [r3, #24]
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	021a      	lsls	r2, r3, #8
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	430a      	orrs	r2, r1
 800515a:	619a      	str	r2, [r3, #24]
      break;
 800515c:	e041      	b.n	80051e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	68b9      	ldr	r1, [r7, #8]
 8005164:	4618      	mov	r0, r3
 8005166:	f000 faaf 	bl	80056c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	69da      	ldr	r2, [r3, #28]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f042 0208 	orr.w	r2, r2, #8
 8005178:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	69da      	ldr	r2, [r3, #28]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f022 0204 	bic.w	r2, r2, #4
 8005188:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	69d9      	ldr	r1, [r3, #28]
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	691a      	ldr	r2, [r3, #16]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	430a      	orrs	r2, r1
 800519a:	61da      	str	r2, [r3, #28]
      break;
 800519c:	e021      	b.n	80051e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	68b9      	ldr	r1, [r7, #8]
 80051a4:	4618      	mov	r0, r3
 80051a6:	f000 fb03 	bl	80057b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	69da      	ldr	r2, [r3, #28]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	69da      	ldr	r2, [r3, #28]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	69d9      	ldr	r1, [r3, #28]
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	691b      	ldr	r3, [r3, #16]
 80051d4:	021a      	lsls	r2, r3, #8
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	430a      	orrs	r2, r1
 80051dc:	61da      	str	r2, [r3, #28]
      break;
 80051de:	e000      	b.n	80051e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80051e0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2201      	movs	r2, #1
 80051e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2200      	movs	r2, #0
 80051ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051f2:	2300      	movs	r3, #0
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3710      	adds	r7, #16
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}

080051fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b084      	sub	sp, #16
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800520c:	2b01      	cmp	r3, #1
 800520e:	d101      	bne.n	8005214 <HAL_TIM_ConfigClockSource+0x18>
 8005210:	2302      	movs	r3, #2
 8005212:	e0a6      	b.n	8005362 <HAL_TIM_ConfigClockSource+0x166>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2202      	movs	r2, #2
 8005220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005232:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800523a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	68fa      	ldr	r2, [r7, #12]
 8005242:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2b40      	cmp	r3, #64	; 0x40
 800524a:	d067      	beq.n	800531c <HAL_TIM_ConfigClockSource+0x120>
 800524c:	2b40      	cmp	r3, #64	; 0x40
 800524e:	d80b      	bhi.n	8005268 <HAL_TIM_ConfigClockSource+0x6c>
 8005250:	2b10      	cmp	r3, #16
 8005252:	d073      	beq.n	800533c <HAL_TIM_ConfigClockSource+0x140>
 8005254:	2b10      	cmp	r3, #16
 8005256:	d802      	bhi.n	800525e <HAL_TIM_ConfigClockSource+0x62>
 8005258:	2b00      	cmp	r3, #0
 800525a:	d06f      	beq.n	800533c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800525c:	e078      	b.n	8005350 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800525e:	2b20      	cmp	r3, #32
 8005260:	d06c      	beq.n	800533c <HAL_TIM_ConfigClockSource+0x140>
 8005262:	2b30      	cmp	r3, #48	; 0x30
 8005264:	d06a      	beq.n	800533c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005266:	e073      	b.n	8005350 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005268:	2b70      	cmp	r3, #112	; 0x70
 800526a:	d00d      	beq.n	8005288 <HAL_TIM_ConfigClockSource+0x8c>
 800526c:	2b70      	cmp	r3, #112	; 0x70
 800526e:	d804      	bhi.n	800527a <HAL_TIM_ConfigClockSource+0x7e>
 8005270:	2b50      	cmp	r3, #80	; 0x50
 8005272:	d033      	beq.n	80052dc <HAL_TIM_ConfigClockSource+0xe0>
 8005274:	2b60      	cmp	r3, #96	; 0x60
 8005276:	d041      	beq.n	80052fc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005278:	e06a      	b.n	8005350 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800527a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800527e:	d066      	beq.n	800534e <HAL_TIM_ConfigClockSource+0x152>
 8005280:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005284:	d017      	beq.n	80052b6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005286:	e063      	b.n	8005350 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6818      	ldr	r0, [r3, #0]
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	6899      	ldr	r1, [r3, #8]
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	685a      	ldr	r2, [r3, #4]
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	f000 fb5a 	bl	8005950 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80052aa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	68fa      	ldr	r2, [r7, #12]
 80052b2:	609a      	str	r2, [r3, #8]
      break;
 80052b4:	e04c      	b.n	8005350 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6818      	ldr	r0, [r3, #0]
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	6899      	ldr	r1, [r3, #8]
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	685a      	ldr	r2, [r3, #4]
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	f000 fb43 	bl	8005950 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	689a      	ldr	r2, [r3, #8]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052d8:	609a      	str	r2, [r3, #8]
      break;
 80052da:	e039      	b.n	8005350 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6818      	ldr	r0, [r3, #0]
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	6859      	ldr	r1, [r3, #4]
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	461a      	mov	r2, r3
 80052ea:	f000 fab7 	bl	800585c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	2150      	movs	r1, #80	; 0x50
 80052f4:	4618      	mov	r0, r3
 80052f6:	f000 fb10 	bl	800591a <TIM_ITRx_SetConfig>
      break;
 80052fa:	e029      	b.n	8005350 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6818      	ldr	r0, [r3, #0]
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	6859      	ldr	r1, [r3, #4]
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	461a      	mov	r2, r3
 800530a:	f000 fad6 	bl	80058ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	2160      	movs	r1, #96	; 0x60
 8005314:	4618      	mov	r0, r3
 8005316:	f000 fb00 	bl	800591a <TIM_ITRx_SetConfig>
      break;
 800531a:	e019      	b.n	8005350 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6818      	ldr	r0, [r3, #0]
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	6859      	ldr	r1, [r3, #4]
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	461a      	mov	r2, r3
 800532a:	f000 fa97 	bl	800585c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	2140      	movs	r1, #64	; 0x40
 8005334:	4618      	mov	r0, r3
 8005336:	f000 faf0 	bl	800591a <TIM_ITRx_SetConfig>
      break;
 800533a:	e009      	b.n	8005350 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4619      	mov	r1, r3
 8005346:	4610      	mov	r0, r2
 8005348:	f000 fae7 	bl	800591a <TIM_ITRx_SetConfig>
      break;
 800534c:	e000      	b.n	8005350 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800534e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005360:	2300      	movs	r3, #0
}
 8005362:	4618      	mov	r0, r3
 8005364:	3710      	adds	r7, #16
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}

0800536a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800536a:	b480      	push	{r7}
 800536c:	b083      	sub	sp, #12
 800536e:	af00      	add	r7, sp, #0
 8005370:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005372:	bf00      	nop
 8005374:	370c      	adds	r7, #12
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr

0800537e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800537e:	b480      	push	{r7}
 8005380:	b083      	sub	sp, #12
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005386:	bf00      	nop
 8005388:	370c      	adds	r7, #12
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr

08005392 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005392:	b480      	push	{r7}
 8005394:	b083      	sub	sp, #12
 8005396:	af00      	add	r7, sp, #0
 8005398:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800539a:	bf00      	nop
 800539c:	370c      	adds	r7, #12
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr

080053a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053a6:	b480      	push	{r7}
 80053a8:	b083      	sub	sp, #12
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053ae:	bf00      	nop
 80053b0:	370c      	adds	r7, #12
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr
	...

080053bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80053bc:	b480      	push	{r7}
 80053be:	b085      	sub	sp, #20
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4a40      	ldr	r2, [pc, #256]	; (80054d0 <TIM_Base_SetConfig+0x114>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d013      	beq.n	80053fc <TIM_Base_SetConfig+0x40>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053da:	d00f      	beq.n	80053fc <TIM_Base_SetConfig+0x40>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4a3d      	ldr	r2, [pc, #244]	; (80054d4 <TIM_Base_SetConfig+0x118>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d00b      	beq.n	80053fc <TIM_Base_SetConfig+0x40>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4a3c      	ldr	r2, [pc, #240]	; (80054d8 <TIM_Base_SetConfig+0x11c>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d007      	beq.n	80053fc <TIM_Base_SetConfig+0x40>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	4a3b      	ldr	r2, [pc, #236]	; (80054dc <TIM_Base_SetConfig+0x120>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d003      	beq.n	80053fc <TIM_Base_SetConfig+0x40>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	4a3a      	ldr	r2, [pc, #232]	; (80054e0 <TIM_Base_SetConfig+0x124>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d108      	bne.n	800540e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005402:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	68fa      	ldr	r2, [r7, #12]
 800540a:	4313      	orrs	r3, r2
 800540c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a2f      	ldr	r2, [pc, #188]	; (80054d0 <TIM_Base_SetConfig+0x114>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d02b      	beq.n	800546e <TIM_Base_SetConfig+0xb2>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800541c:	d027      	beq.n	800546e <TIM_Base_SetConfig+0xb2>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4a2c      	ldr	r2, [pc, #176]	; (80054d4 <TIM_Base_SetConfig+0x118>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d023      	beq.n	800546e <TIM_Base_SetConfig+0xb2>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a2b      	ldr	r2, [pc, #172]	; (80054d8 <TIM_Base_SetConfig+0x11c>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d01f      	beq.n	800546e <TIM_Base_SetConfig+0xb2>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4a2a      	ldr	r2, [pc, #168]	; (80054dc <TIM_Base_SetConfig+0x120>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d01b      	beq.n	800546e <TIM_Base_SetConfig+0xb2>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	4a29      	ldr	r2, [pc, #164]	; (80054e0 <TIM_Base_SetConfig+0x124>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d017      	beq.n	800546e <TIM_Base_SetConfig+0xb2>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4a28      	ldr	r2, [pc, #160]	; (80054e4 <TIM_Base_SetConfig+0x128>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d013      	beq.n	800546e <TIM_Base_SetConfig+0xb2>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a27      	ldr	r2, [pc, #156]	; (80054e8 <TIM_Base_SetConfig+0x12c>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d00f      	beq.n	800546e <TIM_Base_SetConfig+0xb2>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4a26      	ldr	r2, [pc, #152]	; (80054ec <TIM_Base_SetConfig+0x130>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d00b      	beq.n	800546e <TIM_Base_SetConfig+0xb2>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4a25      	ldr	r2, [pc, #148]	; (80054f0 <TIM_Base_SetConfig+0x134>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d007      	beq.n	800546e <TIM_Base_SetConfig+0xb2>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4a24      	ldr	r2, [pc, #144]	; (80054f4 <TIM_Base_SetConfig+0x138>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d003      	beq.n	800546e <TIM_Base_SetConfig+0xb2>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4a23      	ldr	r2, [pc, #140]	; (80054f8 <TIM_Base_SetConfig+0x13c>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d108      	bne.n	8005480 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005474:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	4313      	orrs	r3, r2
 800547e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	695b      	ldr	r3, [r3, #20]
 800548a:	4313      	orrs	r3, r2
 800548c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	68fa      	ldr	r2, [r7, #12]
 8005492:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	689a      	ldr	r2, [r3, #8]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a0a      	ldr	r2, [pc, #40]	; (80054d0 <TIM_Base_SetConfig+0x114>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d003      	beq.n	80054b4 <TIM_Base_SetConfig+0xf8>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a0c      	ldr	r2, [pc, #48]	; (80054e0 <TIM_Base_SetConfig+0x124>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d103      	bne.n	80054bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	691a      	ldr	r2, [r3, #16]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	615a      	str	r2, [r3, #20]
}
 80054c2:	bf00      	nop
 80054c4:	3714      	adds	r7, #20
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr
 80054ce:	bf00      	nop
 80054d0:	40010000 	.word	0x40010000
 80054d4:	40000400 	.word	0x40000400
 80054d8:	40000800 	.word	0x40000800
 80054dc:	40000c00 	.word	0x40000c00
 80054e0:	40010400 	.word	0x40010400
 80054e4:	40014000 	.word	0x40014000
 80054e8:	40014400 	.word	0x40014400
 80054ec:	40014800 	.word	0x40014800
 80054f0:	40001800 	.word	0x40001800
 80054f4:	40001c00 	.word	0x40001c00
 80054f8:	40002000 	.word	0x40002000

080054fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b087      	sub	sp, #28
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a1b      	ldr	r3, [r3, #32]
 800550a:	f023 0201 	bic.w	r2, r3, #1
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a1b      	ldr	r3, [r3, #32]
 8005516:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	699b      	ldr	r3, [r3, #24]
 8005522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800552a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f023 0303 	bic.w	r3, r3, #3
 8005532:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	68fa      	ldr	r2, [r7, #12]
 800553a:	4313      	orrs	r3, r2
 800553c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	f023 0302 	bic.w	r3, r3, #2
 8005544:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	697a      	ldr	r2, [r7, #20]
 800554c:	4313      	orrs	r3, r2
 800554e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4a20      	ldr	r2, [pc, #128]	; (80055d4 <TIM_OC1_SetConfig+0xd8>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d003      	beq.n	8005560 <TIM_OC1_SetConfig+0x64>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4a1f      	ldr	r2, [pc, #124]	; (80055d8 <TIM_OC1_SetConfig+0xdc>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d10c      	bne.n	800557a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	f023 0308 	bic.w	r3, r3, #8
 8005566:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	697a      	ldr	r2, [r7, #20]
 800556e:	4313      	orrs	r3, r2
 8005570:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	f023 0304 	bic.w	r3, r3, #4
 8005578:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a15      	ldr	r2, [pc, #84]	; (80055d4 <TIM_OC1_SetConfig+0xd8>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d003      	beq.n	800558a <TIM_OC1_SetConfig+0x8e>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a14      	ldr	r2, [pc, #80]	; (80055d8 <TIM_OC1_SetConfig+0xdc>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d111      	bne.n	80055ae <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005590:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005598:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	695b      	ldr	r3, [r3, #20]
 800559e:	693a      	ldr	r2, [r7, #16]
 80055a0:	4313      	orrs	r3, r2
 80055a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	699b      	ldr	r3, [r3, #24]
 80055a8:	693a      	ldr	r2, [r7, #16]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	693a      	ldr	r2, [r7, #16]
 80055b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	68fa      	ldr	r2, [r7, #12]
 80055b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	685a      	ldr	r2, [r3, #4]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	697a      	ldr	r2, [r7, #20]
 80055c6:	621a      	str	r2, [r3, #32]
}
 80055c8:	bf00      	nop
 80055ca:	371c      	adds	r7, #28
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr
 80055d4:	40010000 	.word	0x40010000
 80055d8:	40010400 	.word	0x40010400

080055dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055dc:	b480      	push	{r7}
 80055de:	b087      	sub	sp, #28
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a1b      	ldr	r3, [r3, #32]
 80055ea:	f023 0210 	bic.w	r2, r3, #16
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a1b      	ldr	r3, [r3, #32]
 80055f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	699b      	ldr	r3, [r3, #24]
 8005602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800560a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005612:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	021b      	lsls	r3, r3, #8
 800561a:	68fa      	ldr	r2, [r7, #12]
 800561c:	4313      	orrs	r3, r2
 800561e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	f023 0320 	bic.w	r3, r3, #32
 8005626:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	011b      	lsls	r3, r3, #4
 800562e:	697a      	ldr	r2, [r7, #20]
 8005630:	4313      	orrs	r3, r2
 8005632:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	4a22      	ldr	r2, [pc, #136]	; (80056c0 <TIM_OC2_SetConfig+0xe4>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d003      	beq.n	8005644 <TIM_OC2_SetConfig+0x68>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	4a21      	ldr	r2, [pc, #132]	; (80056c4 <TIM_OC2_SetConfig+0xe8>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d10d      	bne.n	8005660 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800564a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	011b      	lsls	r3, r3, #4
 8005652:	697a      	ldr	r2, [r7, #20]
 8005654:	4313      	orrs	r3, r2
 8005656:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800565e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4a17      	ldr	r2, [pc, #92]	; (80056c0 <TIM_OC2_SetConfig+0xe4>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d003      	beq.n	8005670 <TIM_OC2_SetConfig+0x94>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	4a16      	ldr	r2, [pc, #88]	; (80056c4 <TIM_OC2_SetConfig+0xe8>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d113      	bne.n	8005698 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005676:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800567e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	695b      	ldr	r3, [r3, #20]
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	693a      	ldr	r2, [r7, #16]
 8005688:	4313      	orrs	r3, r2
 800568a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	699b      	ldr	r3, [r3, #24]
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	693a      	ldr	r2, [r7, #16]
 8005694:	4313      	orrs	r3, r2
 8005696:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	693a      	ldr	r2, [r7, #16]
 800569c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	68fa      	ldr	r2, [r7, #12]
 80056a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	685a      	ldr	r2, [r3, #4]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	697a      	ldr	r2, [r7, #20]
 80056b0:	621a      	str	r2, [r3, #32]
}
 80056b2:	bf00      	nop
 80056b4:	371c      	adds	r7, #28
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr
 80056be:	bf00      	nop
 80056c0:	40010000 	.word	0x40010000
 80056c4:	40010400 	.word	0x40010400

080056c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b087      	sub	sp, #28
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6a1b      	ldr	r3, [r3, #32]
 80056d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a1b      	ldr	r3, [r3, #32]
 80056e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	69db      	ldr	r3, [r3, #28]
 80056ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f023 0303 	bic.w	r3, r3, #3
 80056fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	68fa      	ldr	r2, [r7, #12]
 8005706:	4313      	orrs	r3, r2
 8005708:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005710:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	021b      	lsls	r3, r3, #8
 8005718:	697a      	ldr	r2, [r7, #20]
 800571a:	4313      	orrs	r3, r2
 800571c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a21      	ldr	r2, [pc, #132]	; (80057a8 <TIM_OC3_SetConfig+0xe0>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d003      	beq.n	800572e <TIM_OC3_SetConfig+0x66>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a20      	ldr	r2, [pc, #128]	; (80057ac <TIM_OC3_SetConfig+0xe4>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d10d      	bne.n	800574a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005734:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	021b      	lsls	r3, r3, #8
 800573c:	697a      	ldr	r2, [r7, #20]
 800573e:	4313      	orrs	r3, r2
 8005740:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005748:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a16      	ldr	r2, [pc, #88]	; (80057a8 <TIM_OC3_SetConfig+0xe0>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d003      	beq.n	800575a <TIM_OC3_SetConfig+0x92>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a15      	ldr	r2, [pc, #84]	; (80057ac <TIM_OC3_SetConfig+0xe4>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d113      	bne.n	8005782 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005760:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005768:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	695b      	ldr	r3, [r3, #20]
 800576e:	011b      	lsls	r3, r3, #4
 8005770:	693a      	ldr	r2, [r7, #16]
 8005772:	4313      	orrs	r3, r2
 8005774:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	699b      	ldr	r3, [r3, #24]
 800577a:	011b      	lsls	r3, r3, #4
 800577c:	693a      	ldr	r2, [r7, #16]
 800577e:	4313      	orrs	r3, r2
 8005780:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	693a      	ldr	r2, [r7, #16]
 8005786:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	68fa      	ldr	r2, [r7, #12]
 800578c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	685a      	ldr	r2, [r3, #4]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	697a      	ldr	r2, [r7, #20]
 800579a:	621a      	str	r2, [r3, #32]
}
 800579c:	bf00      	nop
 800579e:	371c      	adds	r7, #28
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr
 80057a8:	40010000 	.word	0x40010000
 80057ac:	40010400 	.word	0x40010400

080057b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b087      	sub	sp, #28
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6a1b      	ldr	r3, [r3, #32]
 80057be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a1b      	ldr	r3, [r3, #32]
 80057ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	69db      	ldr	r3, [r3, #28]
 80057d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	021b      	lsls	r3, r3, #8
 80057ee:	68fa      	ldr	r2, [r7, #12]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80057fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	031b      	lsls	r3, r3, #12
 8005802:	693a      	ldr	r2, [r7, #16]
 8005804:	4313      	orrs	r3, r2
 8005806:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	4a12      	ldr	r2, [pc, #72]	; (8005854 <TIM_OC4_SetConfig+0xa4>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d003      	beq.n	8005818 <TIM_OC4_SetConfig+0x68>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	4a11      	ldr	r2, [pc, #68]	; (8005858 <TIM_OC4_SetConfig+0xa8>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d109      	bne.n	800582c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800581e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	695b      	ldr	r3, [r3, #20]
 8005824:	019b      	lsls	r3, r3, #6
 8005826:	697a      	ldr	r2, [r7, #20]
 8005828:	4313      	orrs	r3, r2
 800582a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	697a      	ldr	r2, [r7, #20]
 8005830:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	68fa      	ldr	r2, [r7, #12]
 8005836:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	685a      	ldr	r2, [r3, #4]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	693a      	ldr	r2, [r7, #16]
 8005844:	621a      	str	r2, [r3, #32]
}
 8005846:	bf00      	nop
 8005848:	371c      	adds	r7, #28
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr
 8005852:	bf00      	nop
 8005854:	40010000 	.word	0x40010000
 8005858:	40010400 	.word	0x40010400

0800585c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800585c:	b480      	push	{r7}
 800585e:	b087      	sub	sp, #28
 8005860:	af00      	add	r7, sp, #0
 8005862:	60f8      	str	r0, [r7, #12]
 8005864:	60b9      	str	r1, [r7, #8]
 8005866:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6a1b      	ldr	r3, [r3, #32]
 800586c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	6a1b      	ldr	r3, [r3, #32]
 8005872:	f023 0201 	bic.w	r2, r3, #1
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	699b      	ldr	r3, [r3, #24]
 800587e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005886:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	011b      	lsls	r3, r3, #4
 800588c:	693a      	ldr	r2, [r7, #16]
 800588e:	4313      	orrs	r3, r2
 8005890:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	f023 030a 	bic.w	r3, r3, #10
 8005898:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800589a:	697a      	ldr	r2, [r7, #20]
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	4313      	orrs	r3, r2
 80058a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	693a      	ldr	r2, [r7, #16]
 80058a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	697a      	ldr	r2, [r7, #20]
 80058ac:	621a      	str	r2, [r3, #32]
}
 80058ae:	bf00      	nop
 80058b0:	371c      	adds	r7, #28
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr

080058ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058ba:	b480      	push	{r7}
 80058bc:	b087      	sub	sp, #28
 80058be:	af00      	add	r7, sp, #0
 80058c0:	60f8      	str	r0, [r7, #12]
 80058c2:	60b9      	str	r1, [r7, #8]
 80058c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6a1b      	ldr	r3, [r3, #32]
 80058ca:	f023 0210 	bic.w	r2, r3, #16
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	699b      	ldr	r3, [r3, #24]
 80058d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6a1b      	ldr	r3, [r3, #32]
 80058dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80058e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	031b      	lsls	r3, r3, #12
 80058ea:	697a      	ldr	r2, [r7, #20]
 80058ec:	4313      	orrs	r3, r2
 80058ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80058f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	011b      	lsls	r3, r3, #4
 80058fc:	693a      	ldr	r2, [r7, #16]
 80058fe:	4313      	orrs	r3, r2
 8005900:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	697a      	ldr	r2, [r7, #20]
 8005906:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	693a      	ldr	r2, [r7, #16]
 800590c:	621a      	str	r2, [r3, #32]
}
 800590e:	bf00      	nop
 8005910:	371c      	adds	r7, #28
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr

0800591a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800591a:	b480      	push	{r7}
 800591c:	b085      	sub	sp, #20
 800591e:	af00      	add	r7, sp, #0
 8005920:	6078      	str	r0, [r7, #4]
 8005922:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005930:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005932:	683a      	ldr	r2, [r7, #0]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	4313      	orrs	r3, r2
 8005938:	f043 0307 	orr.w	r3, r3, #7
 800593c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	609a      	str	r2, [r3, #8]
}
 8005944:	bf00      	nop
 8005946:	3714      	adds	r7, #20
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005950:	b480      	push	{r7}
 8005952:	b087      	sub	sp, #28
 8005954:	af00      	add	r7, sp, #0
 8005956:	60f8      	str	r0, [r7, #12]
 8005958:	60b9      	str	r1, [r7, #8]
 800595a:	607a      	str	r2, [r7, #4]
 800595c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800596a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	021a      	lsls	r2, r3, #8
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	431a      	orrs	r2, r3
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	4313      	orrs	r3, r2
 8005978:	697a      	ldr	r2, [r7, #20]
 800597a:	4313      	orrs	r3, r2
 800597c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	697a      	ldr	r2, [r7, #20]
 8005982:	609a      	str	r2, [r3, #8]
}
 8005984:	bf00      	nop
 8005986:	371c      	adds	r7, #28
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr

08005990 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005990:	b480      	push	{r7}
 8005992:	b087      	sub	sp, #28
 8005994:	af00      	add	r7, sp, #0
 8005996:	60f8      	str	r0, [r7, #12]
 8005998:	60b9      	str	r1, [r7, #8]
 800599a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	f003 031f 	and.w	r3, r3, #31
 80059a2:	2201      	movs	r2, #1
 80059a4:	fa02 f303 	lsl.w	r3, r2, r3
 80059a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	6a1a      	ldr	r2, [r3, #32]
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	43db      	mvns	r3, r3
 80059b2:	401a      	ands	r2, r3
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6a1a      	ldr	r2, [r3, #32]
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	f003 031f 	and.w	r3, r3, #31
 80059c2:	6879      	ldr	r1, [r7, #4]
 80059c4:	fa01 f303 	lsl.w	r3, r1, r3
 80059c8:	431a      	orrs	r2, r3
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	621a      	str	r2, [r3, #32]
}
 80059ce:	bf00      	nop
 80059d0:	371c      	adds	r7, #28
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr
	...

080059dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059dc:	b480      	push	{r7}
 80059de:	b085      	sub	sp, #20
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d101      	bne.n	80059f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059f0:	2302      	movs	r3, #2
 80059f2:	e05a      	b.n	8005aaa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2202      	movs	r2, #2
 8005a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	68fa      	ldr	r2, [r7, #12]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	68fa      	ldr	r2, [r7, #12]
 8005a2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a21      	ldr	r2, [pc, #132]	; (8005ab8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d022      	beq.n	8005a7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a40:	d01d      	beq.n	8005a7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a1d      	ldr	r2, [pc, #116]	; (8005abc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d018      	beq.n	8005a7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a1b      	ldr	r2, [pc, #108]	; (8005ac0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d013      	beq.n	8005a7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a1a      	ldr	r2, [pc, #104]	; (8005ac4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d00e      	beq.n	8005a7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a18      	ldr	r2, [pc, #96]	; (8005ac8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d009      	beq.n	8005a7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a17      	ldr	r2, [pc, #92]	; (8005acc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d004      	beq.n	8005a7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a15      	ldr	r2, [pc, #84]	; (8005ad0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d10c      	bne.n	8005a98 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	68ba      	ldr	r2, [r7, #8]
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68ba      	ldr	r2, [r7, #8]
 8005a96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005aa8:	2300      	movs	r3, #0
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3714      	adds	r7, #20
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr
 8005ab6:	bf00      	nop
 8005ab8:	40010000 	.word	0x40010000
 8005abc:	40000400 	.word	0x40000400
 8005ac0:	40000800 	.word	0x40000800
 8005ac4:	40000c00 	.word	0x40000c00
 8005ac8:	40010400 	.word	0x40010400
 8005acc:	40014000 	.word	0x40014000
 8005ad0:	40001800 	.word	0x40001800

08005ad4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b085      	sub	sp, #20
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d101      	bne.n	8005af0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005aec:	2302      	movs	r3, #2
 8005aee:	e03d      	b.n	8005b6c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	68db      	ldr	r3, [r3, #12]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	4313      	orrs	r3, r2
 8005b12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	691b      	ldr	r3, [r3, #16]
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	695b      	ldr	r3, [r3, #20]
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	69db      	ldr	r3, [r3, #28]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	68fa      	ldr	r2, [r7, #12]
 8005b60:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b6a:	2300      	movs	r3, #0
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3714      	adds	r7, #20
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr

08005b78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b083      	sub	sp, #12
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b80:	bf00      	nop
 8005b82:	370c      	adds	r7, #12
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr

08005b8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b083      	sub	sp, #12
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b94:	bf00      	nop
 8005b96:	370c      	adds	r7, #12
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr

08005ba0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b082      	sub	sp, #8
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d101      	bne.n	8005bb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e03f      	b.n	8005c32 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d106      	bne.n	8005bcc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f7fc fdde 	bl	8002788 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2224      	movs	r2, #36	; 0x24
 8005bd0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	68da      	ldr	r2, [r3, #12]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005be2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f000 fbb5 	bl	8006354 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	691a      	ldr	r2, [r3, #16]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005bf8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	695a      	ldr	r2, [r3, #20]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	68da      	ldr	r2, [r3, #12]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2220      	movs	r2, #32
 8005c24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2220      	movs	r2, #32
 8005c2c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3708      	adds	r7, #8
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}

08005c3a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c3a:	b480      	push	{r7}
 8005c3c:	b085      	sub	sp, #20
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	60f8      	str	r0, [r7, #12]
 8005c42:	60b9      	str	r1, [r7, #8]
 8005c44:	4613      	mov	r3, r2
 8005c46:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005c4e:	b2db      	uxtb	r3, r3
 8005c50:	2b20      	cmp	r3, #32
 8005c52:	d140      	bne.n	8005cd6 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d002      	beq.n	8005c60 <HAL_UART_Receive_IT+0x26>
 8005c5a:	88fb      	ldrh	r3, [r7, #6]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d101      	bne.n	8005c64 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	e039      	b.n	8005cd8 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d101      	bne.n	8005c72 <HAL_UART_Receive_IT+0x38>
 8005c6e:	2302      	movs	r3, #2
 8005c70:	e032      	b.n	8005cd8 <HAL_UART_Receive_IT+0x9e>
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2201      	movs	r2, #1
 8005c76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	68ba      	ldr	r2, [r7, #8]
 8005c7e:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	88fa      	ldrh	r2, [r7, #6]
 8005c84:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	88fa      	ldrh	r2, [r7, #6]
 8005c8a:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2222      	movs	r2, #34	; 0x22
 8005c96:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	68da      	ldr	r2, [r3, #12]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005cb0:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	695a      	ldr	r2, [r3, #20]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f042 0201 	orr.w	r2, r2, #1
 8005cc0:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	68da      	ldr	r2, [r3, #12]
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f042 0220 	orr.w	r2, r2, #32
 8005cd0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	e000      	b.n	8005cd8 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005cd6:	2302      	movs	r3, #2
  }
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3714      	adds	r7, #20
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr

08005ce4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b086      	sub	sp, #24
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	60f8      	str	r0, [r7, #12]
 8005cec:	60b9      	str	r1, [r7, #8]
 8005cee:	4613      	mov	r3, r2
 8005cf0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	2b20      	cmp	r3, #32
 8005cfc:	d153      	bne.n	8005da6 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d002      	beq.n	8005d0a <HAL_UART_Transmit_DMA+0x26>
 8005d04:	88fb      	ldrh	r3, [r7, #6]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d101      	bne.n	8005d0e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e04c      	b.n	8005da8 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d101      	bne.n	8005d1c <HAL_UART_Transmit_DMA+0x38>
 8005d18:	2302      	movs	r3, #2
 8005d1a:	e045      	b.n	8005da8 <HAL_UART_Transmit_DMA+0xc4>
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8005d24:	68ba      	ldr	r2, [r7, #8]
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	88fa      	ldrh	r2, [r7, #6]
 8005d2e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	88fa      	ldrh	r2, [r7, #6]
 8005d34:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2221      	movs	r2, #33	; 0x21
 8005d40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d48:	4a19      	ldr	r2, [pc, #100]	; (8005db0 <HAL_UART_Transmit_DMA+0xcc>)
 8005d4a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d50:	4a18      	ldr	r2, [pc, #96]	; (8005db4 <HAL_UART_Transmit_DMA+0xd0>)
 8005d52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d58:	4a17      	ldr	r2, [pc, #92]	; (8005db8 <HAL_UART_Transmit_DMA+0xd4>)
 8005d5a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d60:	2200      	movs	r2, #0
 8005d62:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8005d64:	f107 0308 	add.w	r3, r7, #8
 8005d68:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	6819      	ldr	r1, [r3, #0]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	3304      	adds	r3, #4
 8005d78:	461a      	mov	r2, r3
 8005d7a:	88fb      	ldrh	r3, [r7, #6]
 8005d7c:	f7fd fc02 	bl	8003584 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005d88:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	695a      	ldr	r2, [r3, #20]
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005da0:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8005da2:	2300      	movs	r3, #0
 8005da4:	e000      	b.n	8005da8 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8005da6:	2302      	movs	r3, #2
  }
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3718      	adds	r7, #24
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}
 8005db0:	08005fe5 	.word	0x08005fe5
 8005db4:	08006037 	.word	0x08006037
 8005db8:	08006053 	.word	0x08006053

08005dbc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b088      	sub	sp, #32
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	695b      	ldr	r3, [r3, #20]
 8005dda:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005de0:	2300      	movs	r3, #0
 8005de2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005de4:	69fb      	ldr	r3, [r7, #28]
 8005de6:	f003 030f 	and.w	r3, r3, #15
 8005dea:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d10d      	bne.n	8005e0e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005df2:	69fb      	ldr	r3, [r7, #28]
 8005df4:	f003 0320 	and.w	r3, r3, #32
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d008      	beq.n	8005e0e <HAL_UART_IRQHandler+0x52>
 8005dfc:	69bb      	ldr	r3, [r7, #24]
 8005dfe:	f003 0320 	and.w	r3, r3, #32
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d003      	beq.n	8005e0e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 fa23 	bl	8006252 <UART_Receive_IT>
      return;
 8005e0c:	e0d1      	b.n	8005fb2 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	f000 80b0 	beq.w	8005f76 <HAL_UART_IRQHandler+0x1ba>
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	f003 0301 	and.w	r3, r3, #1
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d105      	bne.n	8005e2c <HAL_UART_IRQHandler+0x70>
 8005e20:	69bb      	ldr	r3, [r7, #24]
 8005e22:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	f000 80a5 	beq.w	8005f76 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005e2c:	69fb      	ldr	r3, [r7, #28]
 8005e2e:	f003 0301 	and.w	r3, r3, #1
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d00a      	beq.n	8005e4c <HAL_UART_IRQHandler+0x90>
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d005      	beq.n	8005e4c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e44:	f043 0201 	orr.w	r2, r3, #1
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	f003 0304 	and.w	r3, r3, #4
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d00a      	beq.n	8005e6c <HAL_UART_IRQHandler+0xb0>
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	f003 0301 	and.w	r3, r3, #1
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d005      	beq.n	8005e6c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e64:	f043 0202 	orr.w	r2, r3, #2
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e6c:	69fb      	ldr	r3, [r7, #28]
 8005e6e:	f003 0302 	and.w	r3, r3, #2
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d00a      	beq.n	8005e8c <HAL_UART_IRQHandler+0xd0>
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	f003 0301 	and.w	r3, r3, #1
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d005      	beq.n	8005e8c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e84:	f043 0204 	orr.w	r2, r3, #4
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005e8c:	69fb      	ldr	r3, [r7, #28]
 8005e8e:	f003 0308 	and.w	r3, r3, #8
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d00f      	beq.n	8005eb6 <HAL_UART_IRQHandler+0xfa>
 8005e96:	69bb      	ldr	r3, [r7, #24]
 8005e98:	f003 0320 	and.w	r3, r3, #32
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d104      	bne.n	8005eaa <HAL_UART_IRQHandler+0xee>
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	f003 0301 	and.w	r3, r3, #1
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d005      	beq.n	8005eb6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eae:	f043 0208 	orr.w	r2, r3, #8
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d078      	beq.n	8005fb0 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ebe:	69fb      	ldr	r3, [r7, #28]
 8005ec0:	f003 0320 	and.w	r3, r3, #32
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d007      	beq.n	8005ed8 <HAL_UART_IRQHandler+0x11c>
 8005ec8:	69bb      	ldr	r3, [r7, #24]
 8005eca:	f003 0320 	and.w	r3, r3, #32
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d002      	beq.n	8005ed8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f000 f9bd 	bl	8006252 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	695b      	ldr	r3, [r3, #20]
 8005ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ee2:	2b40      	cmp	r3, #64	; 0x40
 8005ee4:	bf0c      	ite	eq
 8005ee6:	2301      	moveq	r3, #1
 8005ee8:	2300      	movne	r3, #0
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ef2:	f003 0308 	and.w	r3, r3, #8
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d102      	bne.n	8005f00 <HAL_UART_IRQHandler+0x144>
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d031      	beq.n	8005f64 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f000 f906 	bl	8006112 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	695b      	ldr	r3, [r3, #20]
 8005f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f10:	2b40      	cmp	r3, #64	; 0x40
 8005f12:	d123      	bne.n	8005f5c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	695a      	ldr	r2, [r3, #20]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f22:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d013      	beq.n	8005f54 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f30:	4a21      	ldr	r2, [pc, #132]	; (8005fb8 <HAL_UART_IRQHandler+0x1fc>)
 8005f32:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f7fd fb7b 	bl	8003634 <HAL_DMA_Abort_IT>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d016      	beq.n	8005f72 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f4a:	687a      	ldr	r2, [r7, #4]
 8005f4c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005f4e:	4610      	mov	r0, r2
 8005f50:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f52:	e00e      	b.n	8005f72 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f000 f83b 	bl	8005fd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f5a:	e00a      	b.n	8005f72 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f000 f837 	bl	8005fd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f62:	e006      	b.n	8005f72 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f000 f833 	bl	8005fd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005f70:	e01e      	b.n	8005fb0 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f72:	bf00      	nop
    return;
 8005f74:	e01c      	b.n	8005fb0 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d008      	beq.n	8005f92 <HAL_UART_IRQHandler+0x1d6>
 8005f80:	69bb      	ldr	r3, [r7, #24]
 8005f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d003      	beq.n	8005f92 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 f8f3 	bl	8006176 <UART_Transmit_IT>
    return;
 8005f90:	e00f      	b.n	8005fb2 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005f92:	69fb      	ldr	r3, [r7, #28]
 8005f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d00a      	beq.n	8005fb2 <HAL_UART_IRQHandler+0x1f6>
 8005f9c:	69bb      	ldr	r3, [r7, #24]
 8005f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d005      	beq.n	8005fb2 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f000 f93b 	bl	8006222 <UART_EndTransmit_IT>
    return;
 8005fac:	bf00      	nop
 8005fae:	e000      	b.n	8005fb2 <HAL_UART_IRQHandler+0x1f6>
    return;
 8005fb0:	bf00      	nop
  }
}
 8005fb2:	3720      	adds	r7, #32
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}
 8005fb8:	0800614f 	.word	0x0800614f

08005fbc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b083      	sub	sp, #12
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005fc4:	bf00      	nop
 8005fc6:	370c      	adds	r7, #12
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr

08005fd0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b083      	sub	sp, #12
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005fd8:	bf00      	nop
 8005fda:	370c      	adds	r7, #12
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr

08005fe4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff0:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d113      	bne.n	8006028 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2200      	movs	r2, #0
 8006004:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	695a      	ldr	r2, [r3, #20]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006014:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	68da      	ldr	r2, [r3, #12]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006024:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006026:	e002      	b.n	800602e <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8006028:	68f8      	ldr	r0, [r7, #12]
 800602a:	f7fb fe65 	bl	8001cf8 <HAL_UART_TxCpltCallback>
}
 800602e:	bf00      	nop
 8006030:	3710      	adds	r7, #16
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}

08006036 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006036:	b580      	push	{r7, lr}
 8006038:	b084      	sub	sp, #16
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006042:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006044:	68f8      	ldr	r0, [r7, #12]
 8006046:	f7ff ffb9 	bl	8005fbc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800604a:	bf00      	nop
 800604c:	3710      	adds	r7, #16
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}

08006052 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006052:	b580      	push	{r7, lr}
 8006054:	b084      	sub	sp, #16
 8006056:	af00      	add	r7, sp, #0
 8006058:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800605a:	2300      	movs	r3, #0
 800605c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006062:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	695b      	ldr	r3, [r3, #20]
 800606a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800606e:	2b80      	cmp	r3, #128	; 0x80
 8006070:	bf0c      	ite	eq
 8006072:	2301      	moveq	r3, #1
 8006074:	2300      	movne	r3, #0
 8006076:	b2db      	uxtb	r3, r3
 8006078:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006080:	b2db      	uxtb	r3, r3
 8006082:	2b21      	cmp	r3, #33	; 0x21
 8006084:	d108      	bne.n	8006098 <UART_DMAError+0x46>
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d005      	beq.n	8006098 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	2200      	movs	r2, #0
 8006090:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006092:	68b8      	ldr	r0, [r7, #8]
 8006094:	f000 f827 	bl	80060e6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	695b      	ldr	r3, [r3, #20]
 800609e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060a2:	2b40      	cmp	r3, #64	; 0x40
 80060a4:	bf0c      	ite	eq
 80060a6:	2301      	moveq	r3, #1
 80060a8:	2300      	movne	r3, #0
 80060aa:	b2db      	uxtb	r3, r3
 80060ac:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	2b22      	cmp	r3, #34	; 0x22
 80060b8:	d108      	bne.n	80060cc <UART_DMAError+0x7a>
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d005      	beq.n	80060cc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	2200      	movs	r2, #0
 80060c4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80060c6:	68b8      	ldr	r0, [r7, #8]
 80060c8:	f000 f823 	bl	8006112 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060d0:	f043 0210 	orr.w	r2, r3, #16
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80060d8:	68b8      	ldr	r0, [r7, #8]
 80060da:	f7ff ff79 	bl	8005fd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060de:	bf00      	nop
 80060e0:	3710      	adds	r7, #16
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}

080060e6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80060e6:	b480      	push	{r7}
 80060e8:	b083      	sub	sp, #12
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	68da      	ldr	r2, [r3, #12]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80060fc:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2220      	movs	r2, #32
 8006102:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8006106:	bf00      	nop
 8006108:	370c      	adds	r7, #12
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr

08006112 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006112:	b480      	push	{r7}
 8006114:	b083      	sub	sp, #12
 8006116:	af00      	add	r7, sp, #0
 8006118:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	68da      	ldr	r2, [r3, #12]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006128:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	695a      	ldr	r2, [r3, #20]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f022 0201 	bic.w	r2, r2, #1
 8006138:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2220      	movs	r2, #32
 800613e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006142:	bf00      	nop
 8006144:	370c      	adds	r7, #12
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr

0800614e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800614e:	b580      	push	{r7, lr}
 8006150:	b084      	sub	sp, #16
 8006152:	af00      	add	r7, sp, #0
 8006154:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800615a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2200      	movs	r2, #0
 8006160:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2200      	movs	r2, #0
 8006166:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006168:	68f8      	ldr	r0, [r7, #12]
 800616a:	f7ff ff31 	bl	8005fd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800616e:	bf00      	nop
 8006170:	3710      	adds	r7, #16
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}

08006176 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006176:	b480      	push	{r7}
 8006178:	b085      	sub	sp, #20
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006184:	b2db      	uxtb	r3, r3
 8006186:	2b21      	cmp	r3, #33	; 0x21
 8006188:	d144      	bne.n	8006214 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006192:	d11a      	bne.n	80061ca <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6a1b      	ldr	r3, [r3, #32]
 8006198:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	881b      	ldrh	r3, [r3, #0]
 800619e:	461a      	mov	r2, r3
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061a8:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	691b      	ldr	r3, [r3, #16]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d105      	bne.n	80061be <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6a1b      	ldr	r3, [r3, #32]
 80061b6:	1c9a      	adds	r2, r3, #2
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	621a      	str	r2, [r3, #32]
 80061bc:	e00e      	b.n	80061dc <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6a1b      	ldr	r3, [r3, #32]
 80061c2:	1c5a      	adds	r2, r3, #1
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	621a      	str	r2, [r3, #32]
 80061c8:	e008      	b.n	80061dc <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6a1b      	ldr	r3, [r3, #32]
 80061ce:	1c59      	adds	r1, r3, #1
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	6211      	str	r1, [r2, #32]
 80061d4:	781a      	ldrb	r2, [r3, #0]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	3b01      	subs	r3, #1
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	687a      	ldr	r2, [r7, #4]
 80061e8:	4619      	mov	r1, r3
 80061ea:	84d1      	strh	r1, [r2, #38]	; 0x26
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d10f      	bne.n	8006210 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	68da      	ldr	r2, [r3, #12]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80061fe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	68da      	ldr	r2, [r3, #12]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800620e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006210:	2300      	movs	r3, #0
 8006212:	e000      	b.n	8006216 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006214:	2302      	movs	r3, #2
  }
}
 8006216:	4618      	mov	r0, r3
 8006218:	3714      	adds	r7, #20
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr

08006222 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006222:	b580      	push	{r7, lr}
 8006224:	b082      	sub	sp, #8
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	68da      	ldr	r2, [r3, #12]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006238:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2220      	movs	r2, #32
 800623e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f7fb fd58 	bl	8001cf8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006248:	2300      	movs	r3, #0
}
 800624a:	4618      	mov	r0, r3
 800624c:	3708      	adds	r7, #8
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}

08006252 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006252:	b580      	push	{r7, lr}
 8006254:	b084      	sub	sp, #16
 8006256:	af00      	add	r7, sp, #0
 8006258:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006260:	b2db      	uxtb	r3, r3
 8006262:	2b22      	cmp	r3, #34	; 0x22
 8006264:	d171      	bne.n	800634a <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800626e:	d123      	bne.n	80062b8 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006274:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	691b      	ldr	r3, [r3, #16]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d10e      	bne.n	800629c <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	b29b      	uxth	r3, r3
 8006286:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800628a:	b29a      	uxth	r2, r3
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006294:	1c9a      	adds	r2, r3, #2
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	629a      	str	r2, [r3, #40]	; 0x28
 800629a:	e029      	b.n	80062f0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	b29a      	uxth	r2, r3
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062b0:	1c5a      	adds	r2, r3, #1
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	629a      	str	r2, [r3, #40]	; 0x28
 80062b6:	e01b      	b.n	80062f0 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	691b      	ldr	r3, [r3, #16]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d10a      	bne.n	80062d6 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	6858      	ldr	r0, [r3, #4]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ca:	1c59      	adds	r1, r3, #1
 80062cc:	687a      	ldr	r2, [r7, #4]
 80062ce:	6291      	str	r1, [r2, #40]	; 0x28
 80062d0:	b2c2      	uxtb	r2, r0
 80062d2:	701a      	strb	r2, [r3, #0]
 80062d4:	e00c      	b.n	80062f0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	b2da      	uxtb	r2, r3
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062e2:	1c58      	adds	r0, r3, #1
 80062e4:	6879      	ldr	r1, [r7, #4]
 80062e6:	6288      	str	r0, [r1, #40]	; 0x28
 80062e8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80062ec:	b2d2      	uxtb	r2, r2
 80062ee:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	3b01      	subs	r3, #1
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	687a      	ldr	r2, [r7, #4]
 80062fc:	4619      	mov	r1, r3
 80062fe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006300:	2b00      	cmp	r3, #0
 8006302:	d120      	bne.n	8006346 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	68da      	ldr	r2, [r3, #12]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f022 0220 	bic.w	r2, r2, #32
 8006312:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	68da      	ldr	r2, [r3, #12]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006322:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	695a      	ldr	r2, [r3, #20]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f022 0201 	bic.w	r2, r2, #1
 8006332:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2220      	movs	r2, #32
 8006338:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f7fb fcc5 	bl	8001ccc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006342:	2300      	movs	r3, #0
 8006344:	e002      	b.n	800634c <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006346:	2300      	movs	r3, #0
 8006348:	e000      	b.n	800634c <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800634a:	2302      	movs	r3, #2
  }
}
 800634c:	4618      	mov	r0, r3
 800634e:	3710      	adds	r7, #16
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006358:	b085      	sub	sp, #20
 800635a:	af00      	add	r7, sp, #0
 800635c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	691b      	ldr	r3, [r3, #16]
 8006364:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	68da      	ldr	r2, [r3, #12]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	430a      	orrs	r2, r1
 8006372:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	689a      	ldr	r2, [r3, #8]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	691b      	ldr	r3, [r3, #16]
 800637c:	431a      	orrs	r2, r3
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	695b      	ldr	r3, [r3, #20]
 8006382:	431a      	orrs	r2, r3
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	69db      	ldr	r3, [r3, #28]
 8006388:	4313      	orrs	r3, r2
 800638a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	68db      	ldr	r3, [r3, #12]
 8006392:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006396:	f023 030c 	bic.w	r3, r3, #12
 800639a:	687a      	ldr	r2, [r7, #4]
 800639c:	6812      	ldr	r2, [r2, #0]
 800639e:	68f9      	ldr	r1, [r7, #12]
 80063a0:	430b      	orrs	r3, r1
 80063a2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	695b      	ldr	r3, [r3, #20]
 80063aa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	699a      	ldr	r2, [r3, #24]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	430a      	orrs	r2, r1
 80063b8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	69db      	ldr	r3, [r3, #28]
 80063be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063c2:	f040 818b 	bne.w	80066dc <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4ac1      	ldr	r2, [pc, #772]	; (80066d0 <UART_SetConfig+0x37c>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d005      	beq.n	80063dc <UART_SetConfig+0x88>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4abf      	ldr	r2, [pc, #764]	; (80066d4 <UART_SetConfig+0x380>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	f040 80bd 	bne.w	8006556 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80063dc:	f7fe f9c2 	bl	8004764 <HAL_RCC_GetPCLK2Freq>
 80063e0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	461d      	mov	r5, r3
 80063e6:	f04f 0600 	mov.w	r6, #0
 80063ea:	46a8      	mov	r8, r5
 80063ec:	46b1      	mov	r9, r6
 80063ee:	eb18 0308 	adds.w	r3, r8, r8
 80063f2:	eb49 0409 	adc.w	r4, r9, r9
 80063f6:	4698      	mov	r8, r3
 80063f8:	46a1      	mov	r9, r4
 80063fa:	eb18 0805 	adds.w	r8, r8, r5
 80063fe:	eb49 0906 	adc.w	r9, r9, r6
 8006402:	f04f 0100 	mov.w	r1, #0
 8006406:	f04f 0200 	mov.w	r2, #0
 800640a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800640e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006412:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006416:	4688      	mov	r8, r1
 8006418:	4691      	mov	r9, r2
 800641a:	eb18 0005 	adds.w	r0, r8, r5
 800641e:	eb49 0106 	adc.w	r1, r9, r6
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	461d      	mov	r5, r3
 8006428:	f04f 0600 	mov.w	r6, #0
 800642c:	196b      	adds	r3, r5, r5
 800642e:	eb46 0406 	adc.w	r4, r6, r6
 8006432:	461a      	mov	r2, r3
 8006434:	4623      	mov	r3, r4
 8006436:	f7fa fbb3 	bl	8000ba0 <__aeabi_uldivmod>
 800643a:	4603      	mov	r3, r0
 800643c:	460c      	mov	r4, r1
 800643e:	461a      	mov	r2, r3
 8006440:	4ba5      	ldr	r3, [pc, #660]	; (80066d8 <UART_SetConfig+0x384>)
 8006442:	fba3 2302 	umull	r2, r3, r3, r2
 8006446:	095b      	lsrs	r3, r3, #5
 8006448:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	461d      	mov	r5, r3
 8006450:	f04f 0600 	mov.w	r6, #0
 8006454:	46a9      	mov	r9, r5
 8006456:	46b2      	mov	sl, r6
 8006458:	eb19 0309 	adds.w	r3, r9, r9
 800645c:	eb4a 040a 	adc.w	r4, sl, sl
 8006460:	4699      	mov	r9, r3
 8006462:	46a2      	mov	sl, r4
 8006464:	eb19 0905 	adds.w	r9, r9, r5
 8006468:	eb4a 0a06 	adc.w	sl, sl, r6
 800646c:	f04f 0100 	mov.w	r1, #0
 8006470:	f04f 0200 	mov.w	r2, #0
 8006474:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006478:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800647c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006480:	4689      	mov	r9, r1
 8006482:	4692      	mov	sl, r2
 8006484:	eb19 0005 	adds.w	r0, r9, r5
 8006488:	eb4a 0106 	adc.w	r1, sl, r6
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	461d      	mov	r5, r3
 8006492:	f04f 0600 	mov.w	r6, #0
 8006496:	196b      	adds	r3, r5, r5
 8006498:	eb46 0406 	adc.w	r4, r6, r6
 800649c:	461a      	mov	r2, r3
 800649e:	4623      	mov	r3, r4
 80064a0:	f7fa fb7e 	bl	8000ba0 <__aeabi_uldivmod>
 80064a4:	4603      	mov	r3, r0
 80064a6:	460c      	mov	r4, r1
 80064a8:	461a      	mov	r2, r3
 80064aa:	4b8b      	ldr	r3, [pc, #556]	; (80066d8 <UART_SetConfig+0x384>)
 80064ac:	fba3 1302 	umull	r1, r3, r3, r2
 80064b0:	095b      	lsrs	r3, r3, #5
 80064b2:	2164      	movs	r1, #100	; 0x64
 80064b4:	fb01 f303 	mul.w	r3, r1, r3
 80064b8:	1ad3      	subs	r3, r2, r3
 80064ba:	00db      	lsls	r3, r3, #3
 80064bc:	3332      	adds	r3, #50	; 0x32
 80064be:	4a86      	ldr	r2, [pc, #536]	; (80066d8 <UART_SetConfig+0x384>)
 80064c0:	fba2 2303 	umull	r2, r3, r2, r3
 80064c4:	095b      	lsrs	r3, r3, #5
 80064c6:	005b      	lsls	r3, r3, #1
 80064c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80064cc:	4498      	add	r8, r3
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	461d      	mov	r5, r3
 80064d2:	f04f 0600 	mov.w	r6, #0
 80064d6:	46a9      	mov	r9, r5
 80064d8:	46b2      	mov	sl, r6
 80064da:	eb19 0309 	adds.w	r3, r9, r9
 80064de:	eb4a 040a 	adc.w	r4, sl, sl
 80064e2:	4699      	mov	r9, r3
 80064e4:	46a2      	mov	sl, r4
 80064e6:	eb19 0905 	adds.w	r9, r9, r5
 80064ea:	eb4a 0a06 	adc.w	sl, sl, r6
 80064ee:	f04f 0100 	mov.w	r1, #0
 80064f2:	f04f 0200 	mov.w	r2, #0
 80064f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80064fa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80064fe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006502:	4689      	mov	r9, r1
 8006504:	4692      	mov	sl, r2
 8006506:	eb19 0005 	adds.w	r0, r9, r5
 800650a:	eb4a 0106 	adc.w	r1, sl, r6
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	461d      	mov	r5, r3
 8006514:	f04f 0600 	mov.w	r6, #0
 8006518:	196b      	adds	r3, r5, r5
 800651a:	eb46 0406 	adc.w	r4, r6, r6
 800651e:	461a      	mov	r2, r3
 8006520:	4623      	mov	r3, r4
 8006522:	f7fa fb3d 	bl	8000ba0 <__aeabi_uldivmod>
 8006526:	4603      	mov	r3, r0
 8006528:	460c      	mov	r4, r1
 800652a:	461a      	mov	r2, r3
 800652c:	4b6a      	ldr	r3, [pc, #424]	; (80066d8 <UART_SetConfig+0x384>)
 800652e:	fba3 1302 	umull	r1, r3, r3, r2
 8006532:	095b      	lsrs	r3, r3, #5
 8006534:	2164      	movs	r1, #100	; 0x64
 8006536:	fb01 f303 	mul.w	r3, r1, r3
 800653a:	1ad3      	subs	r3, r2, r3
 800653c:	00db      	lsls	r3, r3, #3
 800653e:	3332      	adds	r3, #50	; 0x32
 8006540:	4a65      	ldr	r2, [pc, #404]	; (80066d8 <UART_SetConfig+0x384>)
 8006542:	fba2 2303 	umull	r2, r3, r2, r3
 8006546:	095b      	lsrs	r3, r3, #5
 8006548:	f003 0207 	and.w	r2, r3, #7
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4442      	add	r2, r8
 8006552:	609a      	str	r2, [r3, #8]
 8006554:	e26f      	b.n	8006a36 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006556:	f7fe f8f1 	bl	800473c <HAL_RCC_GetPCLK1Freq>
 800655a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	461d      	mov	r5, r3
 8006560:	f04f 0600 	mov.w	r6, #0
 8006564:	46a8      	mov	r8, r5
 8006566:	46b1      	mov	r9, r6
 8006568:	eb18 0308 	adds.w	r3, r8, r8
 800656c:	eb49 0409 	adc.w	r4, r9, r9
 8006570:	4698      	mov	r8, r3
 8006572:	46a1      	mov	r9, r4
 8006574:	eb18 0805 	adds.w	r8, r8, r5
 8006578:	eb49 0906 	adc.w	r9, r9, r6
 800657c:	f04f 0100 	mov.w	r1, #0
 8006580:	f04f 0200 	mov.w	r2, #0
 8006584:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006588:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800658c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006590:	4688      	mov	r8, r1
 8006592:	4691      	mov	r9, r2
 8006594:	eb18 0005 	adds.w	r0, r8, r5
 8006598:	eb49 0106 	adc.w	r1, r9, r6
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	461d      	mov	r5, r3
 80065a2:	f04f 0600 	mov.w	r6, #0
 80065a6:	196b      	adds	r3, r5, r5
 80065a8:	eb46 0406 	adc.w	r4, r6, r6
 80065ac:	461a      	mov	r2, r3
 80065ae:	4623      	mov	r3, r4
 80065b0:	f7fa faf6 	bl	8000ba0 <__aeabi_uldivmod>
 80065b4:	4603      	mov	r3, r0
 80065b6:	460c      	mov	r4, r1
 80065b8:	461a      	mov	r2, r3
 80065ba:	4b47      	ldr	r3, [pc, #284]	; (80066d8 <UART_SetConfig+0x384>)
 80065bc:	fba3 2302 	umull	r2, r3, r3, r2
 80065c0:	095b      	lsrs	r3, r3, #5
 80065c2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	461d      	mov	r5, r3
 80065ca:	f04f 0600 	mov.w	r6, #0
 80065ce:	46a9      	mov	r9, r5
 80065d0:	46b2      	mov	sl, r6
 80065d2:	eb19 0309 	adds.w	r3, r9, r9
 80065d6:	eb4a 040a 	adc.w	r4, sl, sl
 80065da:	4699      	mov	r9, r3
 80065dc:	46a2      	mov	sl, r4
 80065de:	eb19 0905 	adds.w	r9, r9, r5
 80065e2:	eb4a 0a06 	adc.w	sl, sl, r6
 80065e6:	f04f 0100 	mov.w	r1, #0
 80065ea:	f04f 0200 	mov.w	r2, #0
 80065ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80065f2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80065f6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80065fa:	4689      	mov	r9, r1
 80065fc:	4692      	mov	sl, r2
 80065fe:	eb19 0005 	adds.w	r0, r9, r5
 8006602:	eb4a 0106 	adc.w	r1, sl, r6
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	461d      	mov	r5, r3
 800660c:	f04f 0600 	mov.w	r6, #0
 8006610:	196b      	adds	r3, r5, r5
 8006612:	eb46 0406 	adc.w	r4, r6, r6
 8006616:	461a      	mov	r2, r3
 8006618:	4623      	mov	r3, r4
 800661a:	f7fa fac1 	bl	8000ba0 <__aeabi_uldivmod>
 800661e:	4603      	mov	r3, r0
 8006620:	460c      	mov	r4, r1
 8006622:	461a      	mov	r2, r3
 8006624:	4b2c      	ldr	r3, [pc, #176]	; (80066d8 <UART_SetConfig+0x384>)
 8006626:	fba3 1302 	umull	r1, r3, r3, r2
 800662a:	095b      	lsrs	r3, r3, #5
 800662c:	2164      	movs	r1, #100	; 0x64
 800662e:	fb01 f303 	mul.w	r3, r1, r3
 8006632:	1ad3      	subs	r3, r2, r3
 8006634:	00db      	lsls	r3, r3, #3
 8006636:	3332      	adds	r3, #50	; 0x32
 8006638:	4a27      	ldr	r2, [pc, #156]	; (80066d8 <UART_SetConfig+0x384>)
 800663a:	fba2 2303 	umull	r2, r3, r2, r3
 800663e:	095b      	lsrs	r3, r3, #5
 8006640:	005b      	lsls	r3, r3, #1
 8006642:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006646:	4498      	add	r8, r3
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	461d      	mov	r5, r3
 800664c:	f04f 0600 	mov.w	r6, #0
 8006650:	46a9      	mov	r9, r5
 8006652:	46b2      	mov	sl, r6
 8006654:	eb19 0309 	adds.w	r3, r9, r9
 8006658:	eb4a 040a 	adc.w	r4, sl, sl
 800665c:	4699      	mov	r9, r3
 800665e:	46a2      	mov	sl, r4
 8006660:	eb19 0905 	adds.w	r9, r9, r5
 8006664:	eb4a 0a06 	adc.w	sl, sl, r6
 8006668:	f04f 0100 	mov.w	r1, #0
 800666c:	f04f 0200 	mov.w	r2, #0
 8006670:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006674:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006678:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800667c:	4689      	mov	r9, r1
 800667e:	4692      	mov	sl, r2
 8006680:	eb19 0005 	adds.w	r0, r9, r5
 8006684:	eb4a 0106 	adc.w	r1, sl, r6
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	461d      	mov	r5, r3
 800668e:	f04f 0600 	mov.w	r6, #0
 8006692:	196b      	adds	r3, r5, r5
 8006694:	eb46 0406 	adc.w	r4, r6, r6
 8006698:	461a      	mov	r2, r3
 800669a:	4623      	mov	r3, r4
 800669c:	f7fa fa80 	bl	8000ba0 <__aeabi_uldivmod>
 80066a0:	4603      	mov	r3, r0
 80066a2:	460c      	mov	r4, r1
 80066a4:	461a      	mov	r2, r3
 80066a6:	4b0c      	ldr	r3, [pc, #48]	; (80066d8 <UART_SetConfig+0x384>)
 80066a8:	fba3 1302 	umull	r1, r3, r3, r2
 80066ac:	095b      	lsrs	r3, r3, #5
 80066ae:	2164      	movs	r1, #100	; 0x64
 80066b0:	fb01 f303 	mul.w	r3, r1, r3
 80066b4:	1ad3      	subs	r3, r2, r3
 80066b6:	00db      	lsls	r3, r3, #3
 80066b8:	3332      	adds	r3, #50	; 0x32
 80066ba:	4a07      	ldr	r2, [pc, #28]	; (80066d8 <UART_SetConfig+0x384>)
 80066bc:	fba2 2303 	umull	r2, r3, r2, r3
 80066c0:	095b      	lsrs	r3, r3, #5
 80066c2:	f003 0207 	and.w	r2, r3, #7
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4442      	add	r2, r8
 80066cc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80066ce:	e1b2      	b.n	8006a36 <UART_SetConfig+0x6e2>
 80066d0:	40011000 	.word	0x40011000
 80066d4:	40011400 	.word	0x40011400
 80066d8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4ad7      	ldr	r2, [pc, #860]	; (8006a40 <UART_SetConfig+0x6ec>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d005      	beq.n	80066f2 <UART_SetConfig+0x39e>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4ad6      	ldr	r2, [pc, #856]	; (8006a44 <UART_SetConfig+0x6f0>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	f040 80d1 	bne.w	8006894 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80066f2:	f7fe f837 	bl	8004764 <HAL_RCC_GetPCLK2Freq>
 80066f6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	469a      	mov	sl, r3
 80066fc:	f04f 0b00 	mov.w	fp, #0
 8006700:	46d0      	mov	r8, sl
 8006702:	46d9      	mov	r9, fp
 8006704:	eb18 0308 	adds.w	r3, r8, r8
 8006708:	eb49 0409 	adc.w	r4, r9, r9
 800670c:	4698      	mov	r8, r3
 800670e:	46a1      	mov	r9, r4
 8006710:	eb18 080a 	adds.w	r8, r8, sl
 8006714:	eb49 090b 	adc.w	r9, r9, fp
 8006718:	f04f 0100 	mov.w	r1, #0
 800671c:	f04f 0200 	mov.w	r2, #0
 8006720:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006724:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006728:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800672c:	4688      	mov	r8, r1
 800672e:	4691      	mov	r9, r2
 8006730:	eb1a 0508 	adds.w	r5, sl, r8
 8006734:	eb4b 0609 	adc.w	r6, fp, r9
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	4619      	mov	r1, r3
 800673e:	f04f 0200 	mov.w	r2, #0
 8006742:	f04f 0300 	mov.w	r3, #0
 8006746:	f04f 0400 	mov.w	r4, #0
 800674a:	0094      	lsls	r4, r2, #2
 800674c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006750:	008b      	lsls	r3, r1, #2
 8006752:	461a      	mov	r2, r3
 8006754:	4623      	mov	r3, r4
 8006756:	4628      	mov	r0, r5
 8006758:	4631      	mov	r1, r6
 800675a:	f7fa fa21 	bl	8000ba0 <__aeabi_uldivmod>
 800675e:	4603      	mov	r3, r0
 8006760:	460c      	mov	r4, r1
 8006762:	461a      	mov	r2, r3
 8006764:	4bb8      	ldr	r3, [pc, #736]	; (8006a48 <UART_SetConfig+0x6f4>)
 8006766:	fba3 2302 	umull	r2, r3, r3, r2
 800676a:	095b      	lsrs	r3, r3, #5
 800676c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	469b      	mov	fp, r3
 8006774:	f04f 0c00 	mov.w	ip, #0
 8006778:	46d9      	mov	r9, fp
 800677a:	46e2      	mov	sl, ip
 800677c:	eb19 0309 	adds.w	r3, r9, r9
 8006780:	eb4a 040a 	adc.w	r4, sl, sl
 8006784:	4699      	mov	r9, r3
 8006786:	46a2      	mov	sl, r4
 8006788:	eb19 090b 	adds.w	r9, r9, fp
 800678c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006790:	f04f 0100 	mov.w	r1, #0
 8006794:	f04f 0200 	mov.w	r2, #0
 8006798:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800679c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80067a0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80067a4:	4689      	mov	r9, r1
 80067a6:	4692      	mov	sl, r2
 80067a8:	eb1b 0509 	adds.w	r5, fp, r9
 80067ac:	eb4c 060a 	adc.w	r6, ip, sl
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	4619      	mov	r1, r3
 80067b6:	f04f 0200 	mov.w	r2, #0
 80067ba:	f04f 0300 	mov.w	r3, #0
 80067be:	f04f 0400 	mov.w	r4, #0
 80067c2:	0094      	lsls	r4, r2, #2
 80067c4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80067c8:	008b      	lsls	r3, r1, #2
 80067ca:	461a      	mov	r2, r3
 80067cc:	4623      	mov	r3, r4
 80067ce:	4628      	mov	r0, r5
 80067d0:	4631      	mov	r1, r6
 80067d2:	f7fa f9e5 	bl	8000ba0 <__aeabi_uldivmod>
 80067d6:	4603      	mov	r3, r0
 80067d8:	460c      	mov	r4, r1
 80067da:	461a      	mov	r2, r3
 80067dc:	4b9a      	ldr	r3, [pc, #616]	; (8006a48 <UART_SetConfig+0x6f4>)
 80067de:	fba3 1302 	umull	r1, r3, r3, r2
 80067e2:	095b      	lsrs	r3, r3, #5
 80067e4:	2164      	movs	r1, #100	; 0x64
 80067e6:	fb01 f303 	mul.w	r3, r1, r3
 80067ea:	1ad3      	subs	r3, r2, r3
 80067ec:	011b      	lsls	r3, r3, #4
 80067ee:	3332      	adds	r3, #50	; 0x32
 80067f0:	4a95      	ldr	r2, [pc, #596]	; (8006a48 <UART_SetConfig+0x6f4>)
 80067f2:	fba2 2303 	umull	r2, r3, r2, r3
 80067f6:	095b      	lsrs	r3, r3, #5
 80067f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80067fc:	4498      	add	r8, r3
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	469b      	mov	fp, r3
 8006802:	f04f 0c00 	mov.w	ip, #0
 8006806:	46d9      	mov	r9, fp
 8006808:	46e2      	mov	sl, ip
 800680a:	eb19 0309 	adds.w	r3, r9, r9
 800680e:	eb4a 040a 	adc.w	r4, sl, sl
 8006812:	4699      	mov	r9, r3
 8006814:	46a2      	mov	sl, r4
 8006816:	eb19 090b 	adds.w	r9, r9, fp
 800681a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800681e:	f04f 0100 	mov.w	r1, #0
 8006822:	f04f 0200 	mov.w	r2, #0
 8006826:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800682a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800682e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006832:	4689      	mov	r9, r1
 8006834:	4692      	mov	sl, r2
 8006836:	eb1b 0509 	adds.w	r5, fp, r9
 800683a:	eb4c 060a 	adc.w	r6, ip, sl
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	4619      	mov	r1, r3
 8006844:	f04f 0200 	mov.w	r2, #0
 8006848:	f04f 0300 	mov.w	r3, #0
 800684c:	f04f 0400 	mov.w	r4, #0
 8006850:	0094      	lsls	r4, r2, #2
 8006852:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006856:	008b      	lsls	r3, r1, #2
 8006858:	461a      	mov	r2, r3
 800685a:	4623      	mov	r3, r4
 800685c:	4628      	mov	r0, r5
 800685e:	4631      	mov	r1, r6
 8006860:	f7fa f99e 	bl	8000ba0 <__aeabi_uldivmod>
 8006864:	4603      	mov	r3, r0
 8006866:	460c      	mov	r4, r1
 8006868:	461a      	mov	r2, r3
 800686a:	4b77      	ldr	r3, [pc, #476]	; (8006a48 <UART_SetConfig+0x6f4>)
 800686c:	fba3 1302 	umull	r1, r3, r3, r2
 8006870:	095b      	lsrs	r3, r3, #5
 8006872:	2164      	movs	r1, #100	; 0x64
 8006874:	fb01 f303 	mul.w	r3, r1, r3
 8006878:	1ad3      	subs	r3, r2, r3
 800687a:	011b      	lsls	r3, r3, #4
 800687c:	3332      	adds	r3, #50	; 0x32
 800687e:	4a72      	ldr	r2, [pc, #456]	; (8006a48 <UART_SetConfig+0x6f4>)
 8006880:	fba2 2303 	umull	r2, r3, r2, r3
 8006884:	095b      	lsrs	r3, r3, #5
 8006886:	f003 020f 	and.w	r2, r3, #15
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4442      	add	r2, r8
 8006890:	609a      	str	r2, [r3, #8]
 8006892:	e0d0      	b.n	8006a36 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006894:	f7fd ff52 	bl	800473c <HAL_RCC_GetPCLK1Freq>
 8006898:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	469a      	mov	sl, r3
 800689e:	f04f 0b00 	mov.w	fp, #0
 80068a2:	46d0      	mov	r8, sl
 80068a4:	46d9      	mov	r9, fp
 80068a6:	eb18 0308 	adds.w	r3, r8, r8
 80068aa:	eb49 0409 	adc.w	r4, r9, r9
 80068ae:	4698      	mov	r8, r3
 80068b0:	46a1      	mov	r9, r4
 80068b2:	eb18 080a 	adds.w	r8, r8, sl
 80068b6:	eb49 090b 	adc.w	r9, r9, fp
 80068ba:	f04f 0100 	mov.w	r1, #0
 80068be:	f04f 0200 	mov.w	r2, #0
 80068c2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80068c6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80068ca:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80068ce:	4688      	mov	r8, r1
 80068d0:	4691      	mov	r9, r2
 80068d2:	eb1a 0508 	adds.w	r5, sl, r8
 80068d6:	eb4b 0609 	adc.w	r6, fp, r9
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	4619      	mov	r1, r3
 80068e0:	f04f 0200 	mov.w	r2, #0
 80068e4:	f04f 0300 	mov.w	r3, #0
 80068e8:	f04f 0400 	mov.w	r4, #0
 80068ec:	0094      	lsls	r4, r2, #2
 80068ee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80068f2:	008b      	lsls	r3, r1, #2
 80068f4:	461a      	mov	r2, r3
 80068f6:	4623      	mov	r3, r4
 80068f8:	4628      	mov	r0, r5
 80068fa:	4631      	mov	r1, r6
 80068fc:	f7fa f950 	bl	8000ba0 <__aeabi_uldivmod>
 8006900:	4603      	mov	r3, r0
 8006902:	460c      	mov	r4, r1
 8006904:	461a      	mov	r2, r3
 8006906:	4b50      	ldr	r3, [pc, #320]	; (8006a48 <UART_SetConfig+0x6f4>)
 8006908:	fba3 2302 	umull	r2, r3, r3, r2
 800690c:	095b      	lsrs	r3, r3, #5
 800690e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	469b      	mov	fp, r3
 8006916:	f04f 0c00 	mov.w	ip, #0
 800691a:	46d9      	mov	r9, fp
 800691c:	46e2      	mov	sl, ip
 800691e:	eb19 0309 	adds.w	r3, r9, r9
 8006922:	eb4a 040a 	adc.w	r4, sl, sl
 8006926:	4699      	mov	r9, r3
 8006928:	46a2      	mov	sl, r4
 800692a:	eb19 090b 	adds.w	r9, r9, fp
 800692e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006932:	f04f 0100 	mov.w	r1, #0
 8006936:	f04f 0200 	mov.w	r2, #0
 800693a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800693e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006942:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006946:	4689      	mov	r9, r1
 8006948:	4692      	mov	sl, r2
 800694a:	eb1b 0509 	adds.w	r5, fp, r9
 800694e:	eb4c 060a 	adc.w	r6, ip, sl
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	4619      	mov	r1, r3
 8006958:	f04f 0200 	mov.w	r2, #0
 800695c:	f04f 0300 	mov.w	r3, #0
 8006960:	f04f 0400 	mov.w	r4, #0
 8006964:	0094      	lsls	r4, r2, #2
 8006966:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800696a:	008b      	lsls	r3, r1, #2
 800696c:	461a      	mov	r2, r3
 800696e:	4623      	mov	r3, r4
 8006970:	4628      	mov	r0, r5
 8006972:	4631      	mov	r1, r6
 8006974:	f7fa f914 	bl	8000ba0 <__aeabi_uldivmod>
 8006978:	4603      	mov	r3, r0
 800697a:	460c      	mov	r4, r1
 800697c:	461a      	mov	r2, r3
 800697e:	4b32      	ldr	r3, [pc, #200]	; (8006a48 <UART_SetConfig+0x6f4>)
 8006980:	fba3 1302 	umull	r1, r3, r3, r2
 8006984:	095b      	lsrs	r3, r3, #5
 8006986:	2164      	movs	r1, #100	; 0x64
 8006988:	fb01 f303 	mul.w	r3, r1, r3
 800698c:	1ad3      	subs	r3, r2, r3
 800698e:	011b      	lsls	r3, r3, #4
 8006990:	3332      	adds	r3, #50	; 0x32
 8006992:	4a2d      	ldr	r2, [pc, #180]	; (8006a48 <UART_SetConfig+0x6f4>)
 8006994:	fba2 2303 	umull	r2, r3, r2, r3
 8006998:	095b      	lsrs	r3, r3, #5
 800699a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800699e:	4498      	add	r8, r3
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	469b      	mov	fp, r3
 80069a4:	f04f 0c00 	mov.w	ip, #0
 80069a8:	46d9      	mov	r9, fp
 80069aa:	46e2      	mov	sl, ip
 80069ac:	eb19 0309 	adds.w	r3, r9, r9
 80069b0:	eb4a 040a 	adc.w	r4, sl, sl
 80069b4:	4699      	mov	r9, r3
 80069b6:	46a2      	mov	sl, r4
 80069b8:	eb19 090b 	adds.w	r9, r9, fp
 80069bc:	eb4a 0a0c 	adc.w	sl, sl, ip
 80069c0:	f04f 0100 	mov.w	r1, #0
 80069c4:	f04f 0200 	mov.w	r2, #0
 80069c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80069cc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80069d0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80069d4:	4689      	mov	r9, r1
 80069d6:	4692      	mov	sl, r2
 80069d8:	eb1b 0509 	adds.w	r5, fp, r9
 80069dc:	eb4c 060a 	adc.w	r6, ip, sl
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	4619      	mov	r1, r3
 80069e6:	f04f 0200 	mov.w	r2, #0
 80069ea:	f04f 0300 	mov.w	r3, #0
 80069ee:	f04f 0400 	mov.w	r4, #0
 80069f2:	0094      	lsls	r4, r2, #2
 80069f4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80069f8:	008b      	lsls	r3, r1, #2
 80069fa:	461a      	mov	r2, r3
 80069fc:	4623      	mov	r3, r4
 80069fe:	4628      	mov	r0, r5
 8006a00:	4631      	mov	r1, r6
 8006a02:	f7fa f8cd 	bl	8000ba0 <__aeabi_uldivmod>
 8006a06:	4603      	mov	r3, r0
 8006a08:	460c      	mov	r4, r1
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	4b0e      	ldr	r3, [pc, #56]	; (8006a48 <UART_SetConfig+0x6f4>)
 8006a0e:	fba3 1302 	umull	r1, r3, r3, r2
 8006a12:	095b      	lsrs	r3, r3, #5
 8006a14:	2164      	movs	r1, #100	; 0x64
 8006a16:	fb01 f303 	mul.w	r3, r1, r3
 8006a1a:	1ad3      	subs	r3, r2, r3
 8006a1c:	011b      	lsls	r3, r3, #4
 8006a1e:	3332      	adds	r3, #50	; 0x32
 8006a20:	4a09      	ldr	r2, [pc, #36]	; (8006a48 <UART_SetConfig+0x6f4>)
 8006a22:	fba2 2303 	umull	r2, r3, r2, r3
 8006a26:	095b      	lsrs	r3, r3, #5
 8006a28:	f003 020f 	and.w	r2, r3, #15
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4442      	add	r2, r8
 8006a32:	609a      	str	r2, [r3, #8]
}
 8006a34:	e7ff      	b.n	8006a36 <UART_SetConfig+0x6e2>
 8006a36:	bf00      	nop
 8006a38:	3714      	adds	r7, #20
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a40:	40011000 	.word	0x40011000
 8006a44:	40011400 	.word	0x40011400
 8006a48:	51eb851f 	.word	0x51eb851f

08006a4c <__errno>:
 8006a4c:	4b01      	ldr	r3, [pc, #4]	; (8006a54 <__errno+0x8>)
 8006a4e:	6818      	ldr	r0, [r3, #0]
 8006a50:	4770      	bx	lr
 8006a52:	bf00      	nop
 8006a54:	20000014 	.word	0x20000014

08006a58 <__libc_init_array>:
 8006a58:	b570      	push	{r4, r5, r6, lr}
 8006a5a:	4e0d      	ldr	r6, [pc, #52]	; (8006a90 <__libc_init_array+0x38>)
 8006a5c:	4c0d      	ldr	r4, [pc, #52]	; (8006a94 <__libc_init_array+0x3c>)
 8006a5e:	1ba4      	subs	r4, r4, r6
 8006a60:	10a4      	asrs	r4, r4, #2
 8006a62:	2500      	movs	r5, #0
 8006a64:	42a5      	cmp	r5, r4
 8006a66:	d109      	bne.n	8006a7c <__libc_init_array+0x24>
 8006a68:	4e0b      	ldr	r6, [pc, #44]	; (8006a98 <__libc_init_array+0x40>)
 8006a6a:	4c0c      	ldr	r4, [pc, #48]	; (8006a9c <__libc_init_array+0x44>)
 8006a6c:	f003 f8ba 	bl	8009be4 <_init>
 8006a70:	1ba4      	subs	r4, r4, r6
 8006a72:	10a4      	asrs	r4, r4, #2
 8006a74:	2500      	movs	r5, #0
 8006a76:	42a5      	cmp	r5, r4
 8006a78:	d105      	bne.n	8006a86 <__libc_init_array+0x2e>
 8006a7a:	bd70      	pop	{r4, r5, r6, pc}
 8006a7c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006a80:	4798      	blx	r3
 8006a82:	3501      	adds	r5, #1
 8006a84:	e7ee      	b.n	8006a64 <__libc_init_array+0xc>
 8006a86:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006a8a:	4798      	blx	r3
 8006a8c:	3501      	adds	r5, #1
 8006a8e:	e7f2      	b.n	8006a76 <__libc_init_array+0x1e>
 8006a90:	0800a2b0 	.word	0x0800a2b0
 8006a94:	0800a2b0 	.word	0x0800a2b0
 8006a98:	0800a2b0 	.word	0x0800a2b0
 8006a9c:	0800a2b4 	.word	0x0800a2b4

08006aa0 <memset>:
 8006aa0:	4402      	add	r2, r0
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d100      	bne.n	8006aaa <memset+0xa>
 8006aa8:	4770      	bx	lr
 8006aaa:	f803 1b01 	strb.w	r1, [r3], #1
 8006aae:	e7f9      	b.n	8006aa4 <memset+0x4>

08006ab0 <__cvt>:
 8006ab0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ab4:	ec55 4b10 	vmov	r4, r5, d0
 8006ab8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8006aba:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006abe:	2d00      	cmp	r5, #0
 8006ac0:	460e      	mov	r6, r1
 8006ac2:	4691      	mov	r9, r2
 8006ac4:	4619      	mov	r1, r3
 8006ac6:	bfb8      	it	lt
 8006ac8:	4622      	movlt	r2, r4
 8006aca:	462b      	mov	r3, r5
 8006acc:	f027 0720 	bic.w	r7, r7, #32
 8006ad0:	bfbb      	ittet	lt
 8006ad2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006ad6:	461d      	movlt	r5, r3
 8006ad8:	2300      	movge	r3, #0
 8006ada:	232d      	movlt	r3, #45	; 0x2d
 8006adc:	bfb8      	it	lt
 8006ade:	4614      	movlt	r4, r2
 8006ae0:	2f46      	cmp	r7, #70	; 0x46
 8006ae2:	700b      	strb	r3, [r1, #0]
 8006ae4:	d004      	beq.n	8006af0 <__cvt+0x40>
 8006ae6:	2f45      	cmp	r7, #69	; 0x45
 8006ae8:	d100      	bne.n	8006aec <__cvt+0x3c>
 8006aea:	3601      	adds	r6, #1
 8006aec:	2102      	movs	r1, #2
 8006aee:	e000      	b.n	8006af2 <__cvt+0x42>
 8006af0:	2103      	movs	r1, #3
 8006af2:	ab03      	add	r3, sp, #12
 8006af4:	9301      	str	r3, [sp, #4]
 8006af6:	ab02      	add	r3, sp, #8
 8006af8:	9300      	str	r3, [sp, #0]
 8006afa:	4632      	mov	r2, r6
 8006afc:	4653      	mov	r3, sl
 8006afe:	ec45 4b10 	vmov	d0, r4, r5
 8006b02:	f000 fd85 	bl	8007610 <_dtoa_r>
 8006b06:	2f47      	cmp	r7, #71	; 0x47
 8006b08:	4680      	mov	r8, r0
 8006b0a:	d102      	bne.n	8006b12 <__cvt+0x62>
 8006b0c:	f019 0f01 	tst.w	r9, #1
 8006b10:	d026      	beq.n	8006b60 <__cvt+0xb0>
 8006b12:	2f46      	cmp	r7, #70	; 0x46
 8006b14:	eb08 0906 	add.w	r9, r8, r6
 8006b18:	d111      	bne.n	8006b3e <__cvt+0x8e>
 8006b1a:	f898 3000 	ldrb.w	r3, [r8]
 8006b1e:	2b30      	cmp	r3, #48	; 0x30
 8006b20:	d10a      	bne.n	8006b38 <__cvt+0x88>
 8006b22:	2200      	movs	r2, #0
 8006b24:	2300      	movs	r3, #0
 8006b26:	4620      	mov	r0, r4
 8006b28:	4629      	mov	r1, r5
 8006b2a:	f7f9 ff79 	bl	8000a20 <__aeabi_dcmpeq>
 8006b2e:	b918      	cbnz	r0, 8006b38 <__cvt+0x88>
 8006b30:	f1c6 0601 	rsb	r6, r6, #1
 8006b34:	f8ca 6000 	str.w	r6, [sl]
 8006b38:	f8da 3000 	ldr.w	r3, [sl]
 8006b3c:	4499      	add	r9, r3
 8006b3e:	2200      	movs	r2, #0
 8006b40:	2300      	movs	r3, #0
 8006b42:	4620      	mov	r0, r4
 8006b44:	4629      	mov	r1, r5
 8006b46:	f7f9 ff6b 	bl	8000a20 <__aeabi_dcmpeq>
 8006b4a:	b938      	cbnz	r0, 8006b5c <__cvt+0xac>
 8006b4c:	2230      	movs	r2, #48	; 0x30
 8006b4e:	9b03      	ldr	r3, [sp, #12]
 8006b50:	454b      	cmp	r3, r9
 8006b52:	d205      	bcs.n	8006b60 <__cvt+0xb0>
 8006b54:	1c59      	adds	r1, r3, #1
 8006b56:	9103      	str	r1, [sp, #12]
 8006b58:	701a      	strb	r2, [r3, #0]
 8006b5a:	e7f8      	b.n	8006b4e <__cvt+0x9e>
 8006b5c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006b60:	9b03      	ldr	r3, [sp, #12]
 8006b62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006b64:	eba3 0308 	sub.w	r3, r3, r8
 8006b68:	4640      	mov	r0, r8
 8006b6a:	6013      	str	r3, [r2, #0]
 8006b6c:	b004      	add	sp, #16
 8006b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006b72 <__exponent>:
 8006b72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b74:	2900      	cmp	r1, #0
 8006b76:	4604      	mov	r4, r0
 8006b78:	bfba      	itte	lt
 8006b7a:	4249      	neglt	r1, r1
 8006b7c:	232d      	movlt	r3, #45	; 0x2d
 8006b7e:	232b      	movge	r3, #43	; 0x2b
 8006b80:	2909      	cmp	r1, #9
 8006b82:	f804 2b02 	strb.w	r2, [r4], #2
 8006b86:	7043      	strb	r3, [r0, #1]
 8006b88:	dd20      	ble.n	8006bcc <__exponent+0x5a>
 8006b8a:	f10d 0307 	add.w	r3, sp, #7
 8006b8e:	461f      	mov	r7, r3
 8006b90:	260a      	movs	r6, #10
 8006b92:	fb91 f5f6 	sdiv	r5, r1, r6
 8006b96:	fb06 1115 	mls	r1, r6, r5, r1
 8006b9a:	3130      	adds	r1, #48	; 0x30
 8006b9c:	2d09      	cmp	r5, #9
 8006b9e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006ba2:	f103 32ff 	add.w	r2, r3, #4294967295
 8006ba6:	4629      	mov	r1, r5
 8006ba8:	dc09      	bgt.n	8006bbe <__exponent+0x4c>
 8006baa:	3130      	adds	r1, #48	; 0x30
 8006bac:	3b02      	subs	r3, #2
 8006bae:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006bb2:	42bb      	cmp	r3, r7
 8006bb4:	4622      	mov	r2, r4
 8006bb6:	d304      	bcc.n	8006bc2 <__exponent+0x50>
 8006bb8:	1a10      	subs	r0, r2, r0
 8006bba:	b003      	add	sp, #12
 8006bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bbe:	4613      	mov	r3, r2
 8006bc0:	e7e7      	b.n	8006b92 <__exponent+0x20>
 8006bc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006bc6:	f804 2b01 	strb.w	r2, [r4], #1
 8006bca:	e7f2      	b.n	8006bb2 <__exponent+0x40>
 8006bcc:	2330      	movs	r3, #48	; 0x30
 8006bce:	4419      	add	r1, r3
 8006bd0:	7083      	strb	r3, [r0, #2]
 8006bd2:	1d02      	adds	r2, r0, #4
 8006bd4:	70c1      	strb	r1, [r0, #3]
 8006bd6:	e7ef      	b.n	8006bb8 <__exponent+0x46>

08006bd8 <_printf_float>:
 8006bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bdc:	b08d      	sub	sp, #52	; 0x34
 8006bde:	460c      	mov	r4, r1
 8006be0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8006be4:	4616      	mov	r6, r2
 8006be6:	461f      	mov	r7, r3
 8006be8:	4605      	mov	r5, r0
 8006bea:	f001 fc43 	bl	8008474 <_localeconv_r>
 8006bee:	6803      	ldr	r3, [r0, #0]
 8006bf0:	9304      	str	r3, [sp, #16]
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f7f9 fae8 	bl	80001c8 <strlen>
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	930a      	str	r3, [sp, #40]	; 0x28
 8006bfc:	f8d8 3000 	ldr.w	r3, [r8]
 8006c00:	9005      	str	r0, [sp, #20]
 8006c02:	3307      	adds	r3, #7
 8006c04:	f023 0307 	bic.w	r3, r3, #7
 8006c08:	f103 0208 	add.w	r2, r3, #8
 8006c0c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006c10:	f8d4 b000 	ldr.w	fp, [r4]
 8006c14:	f8c8 2000 	str.w	r2, [r8]
 8006c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c1c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006c20:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006c24:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006c28:	9307      	str	r3, [sp, #28]
 8006c2a:	f8cd 8018 	str.w	r8, [sp, #24]
 8006c2e:	f04f 32ff 	mov.w	r2, #4294967295
 8006c32:	4ba7      	ldr	r3, [pc, #668]	; (8006ed0 <_printf_float+0x2f8>)
 8006c34:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c38:	f7f9 ff24 	bl	8000a84 <__aeabi_dcmpun>
 8006c3c:	bb70      	cbnz	r0, 8006c9c <_printf_float+0xc4>
 8006c3e:	f04f 32ff 	mov.w	r2, #4294967295
 8006c42:	4ba3      	ldr	r3, [pc, #652]	; (8006ed0 <_printf_float+0x2f8>)
 8006c44:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c48:	f7f9 fefe 	bl	8000a48 <__aeabi_dcmple>
 8006c4c:	bb30      	cbnz	r0, 8006c9c <_printf_float+0xc4>
 8006c4e:	2200      	movs	r2, #0
 8006c50:	2300      	movs	r3, #0
 8006c52:	4640      	mov	r0, r8
 8006c54:	4649      	mov	r1, r9
 8006c56:	f7f9 feed 	bl	8000a34 <__aeabi_dcmplt>
 8006c5a:	b110      	cbz	r0, 8006c62 <_printf_float+0x8a>
 8006c5c:	232d      	movs	r3, #45	; 0x2d
 8006c5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c62:	4a9c      	ldr	r2, [pc, #624]	; (8006ed4 <_printf_float+0x2fc>)
 8006c64:	4b9c      	ldr	r3, [pc, #624]	; (8006ed8 <_printf_float+0x300>)
 8006c66:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006c6a:	bf8c      	ite	hi
 8006c6c:	4690      	movhi	r8, r2
 8006c6e:	4698      	movls	r8, r3
 8006c70:	2303      	movs	r3, #3
 8006c72:	f02b 0204 	bic.w	r2, fp, #4
 8006c76:	6123      	str	r3, [r4, #16]
 8006c78:	6022      	str	r2, [r4, #0]
 8006c7a:	f04f 0900 	mov.w	r9, #0
 8006c7e:	9700      	str	r7, [sp, #0]
 8006c80:	4633      	mov	r3, r6
 8006c82:	aa0b      	add	r2, sp, #44	; 0x2c
 8006c84:	4621      	mov	r1, r4
 8006c86:	4628      	mov	r0, r5
 8006c88:	f000 f9e6 	bl	8007058 <_printf_common>
 8006c8c:	3001      	adds	r0, #1
 8006c8e:	f040 808d 	bne.w	8006dac <_printf_float+0x1d4>
 8006c92:	f04f 30ff 	mov.w	r0, #4294967295
 8006c96:	b00d      	add	sp, #52	; 0x34
 8006c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c9c:	4642      	mov	r2, r8
 8006c9e:	464b      	mov	r3, r9
 8006ca0:	4640      	mov	r0, r8
 8006ca2:	4649      	mov	r1, r9
 8006ca4:	f7f9 feee 	bl	8000a84 <__aeabi_dcmpun>
 8006ca8:	b110      	cbz	r0, 8006cb0 <_printf_float+0xd8>
 8006caa:	4a8c      	ldr	r2, [pc, #560]	; (8006edc <_printf_float+0x304>)
 8006cac:	4b8c      	ldr	r3, [pc, #560]	; (8006ee0 <_printf_float+0x308>)
 8006cae:	e7da      	b.n	8006c66 <_printf_float+0x8e>
 8006cb0:	6861      	ldr	r1, [r4, #4]
 8006cb2:	1c4b      	adds	r3, r1, #1
 8006cb4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8006cb8:	a80a      	add	r0, sp, #40	; 0x28
 8006cba:	d13e      	bne.n	8006d3a <_printf_float+0x162>
 8006cbc:	2306      	movs	r3, #6
 8006cbe:	6063      	str	r3, [r4, #4]
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006cc6:	ab09      	add	r3, sp, #36	; 0x24
 8006cc8:	9300      	str	r3, [sp, #0]
 8006cca:	ec49 8b10 	vmov	d0, r8, r9
 8006cce:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006cd2:	6022      	str	r2, [r4, #0]
 8006cd4:	f8cd a004 	str.w	sl, [sp, #4]
 8006cd8:	6861      	ldr	r1, [r4, #4]
 8006cda:	4628      	mov	r0, r5
 8006cdc:	f7ff fee8 	bl	8006ab0 <__cvt>
 8006ce0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8006ce4:	2b47      	cmp	r3, #71	; 0x47
 8006ce6:	4680      	mov	r8, r0
 8006ce8:	d109      	bne.n	8006cfe <_printf_float+0x126>
 8006cea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cec:	1cd8      	adds	r0, r3, #3
 8006cee:	db02      	blt.n	8006cf6 <_printf_float+0x11e>
 8006cf0:	6862      	ldr	r2, [r4, #4]
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	dd47      	ble.n	8006d86 <_printf_float+0x1ae>
 8006cf6:	f1aa 0a02 	sub.w	sl, sl, #2
 8006cfa:	fa5f fa8a 	uxtb.w	sl, sl
 8006cfe:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006d02:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d04:	d824      	bhi.n	8006d50 <_printf_float+0x178>
 8006d06:	3901      	subs	r1, #1
 8006d08:	4652      	mov	r2, sl
 8006d0a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006d0e:	9109      	str	r1, [sp, #36]	; 0x24
 8006d10:	f7ff ff2f 	bl	8006b72 <__exponent>
 8006d14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d16:	1813      	adds	r3, r2, r0
 8006d18:	2a01      	cmp	r2, #1
 8006d1a:	4681      	mov	r9, r0
 8006d1c:	6123      	str	r3, [r4, #16]
 8006d1e:	dc02      	bgt.n	8006d26 <_printf_float+0x14e>
 8006d20:	6822      	ldr	r2, [r4, #0]
 8006d22:	07d1      	lsls	r1, r2, #31
 8006d24:	d501      	bpl.n	8006d2a <_printf_float+0x152>
 8006d26:	3301      	adds	r3, #1
 8006d28:	6123      	str	r3, [r4, #16]
 8006d2a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d0a5      	beq.n	8006c7e <_printf_float+0xa6>
 8006d32:	232d      	movs	r3, #45	; 0x2d
 8006d34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d38:	e7a1      	b.n	8006c7e <_printf_float+0xa6>
 8006d3a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8006d3e:	f000 8177 	beq.w	8007030 <_printf_float+0x458>
 8006d42:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006d46:	d1bb      	bne.n	8006cc0 <_printf_float+0xe8>
 8006d48:	2900      	cmp	r1, #0
 8006d4a:	d1b9      	bne.n	8006cc0 <_printf_float+0xe8>
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	e7b6      	b.n	8006cbe <_printf_float+0xe6>
 8006d50:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8006d54:	d119      	bne.n	8006d8a <_printf_float+0x1b2>
 8006d56:	2900      	cmp	r1, #0
 8006d58:	6863      	ldr	r3, [r4, #4]
 8006d5a:	dd0c      	ble.n	8006d76 <_printf_float+0x19e>
 8006d5c:	6121      	str	r1, [r4, #16]
 8006d5e:	b913      	cbnz	r3, 8006d66 <_printf_float+0x18e>
 8006d60:	6822      	ldr	r2, [r4, #0]
 8006d62:	07d2      	lsls	r2, r2, #31
 8006d64:	d502      	bpl.n	8006d6c <_printf_float+0x194>
 8006d66:	3301      	adds	r3, #1
 8006d68:	440b      	add	r3, r1
 8006d6a:	6123      	str	r3, [r4, #16]
 8006d6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d6e:	65a3      	str	r3, [r4, #88]	; 0x58
 8006d70:	f04f 0900 	mov.w	r9, #0
 8006d74:	e7d9      	b.n	8006d2a <_printf_float+0x152>
 8006d76:	b913      	cbnz	r3, 8006d7e <_printf_float+0x1a6>
 8006d78:	6822      	ldr	r2, [r4, #0]
 8006d7a:	07d0      	lsls	r0, r2, #31
 8006d7c:	d501      	bpl.n	8006d82 <_printf_float+0x1aa>
 8006d7e:	3302      	adds	r3, #2
 8006d80:	e7f3      	b.n	8006d6a <_printf_float+0x192>
 8006d82:	2301      	movs	r3, #1
 8006d84:	e7f1      	b.n	8006d6a <_printf_float+0x192>
 8006d86:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8006d8a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	db05      	blt.n	8006d9e <_printf_float+0x1c6>
 8006d92:	6822      	ldr	r2, [r4, #0]
 8006d94:	6123      	str	r3, [r4, #16]
 8006d96:	07d1      	lsls	r1, r2, #31
 8006d98:	d5e8      	bpl.n	8006d6c <_printf_float+0x194>
 8006d9a:	3301      	adds	r3, #1
 8006d9c:	e7e5      	b.n	8006d6a <_printf_float+0x192>
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	bfd4      	ite	le
 8006da2:	f1c3 0302 	rsble	r3, r3, #2
 8006da6:	2301      	movgt	r3, #1
 8006da8:	4413      	add	r3, r2
 8006daa:	e7de      	b.n	8006d6a <_printf_float+0x192>
 8006dac:	6823      	ldr	r3, [r4, #0]
 8006dae:	055a      	lsls	r2, r3, #21
 8006db0:	d407      	bmi.n	8006dc2 <_printf_float+0x1ea>
 8006db2:	6923      	ldr	r3, [r4, #16]
 8006db4:	4642      	mov	r2, r8
 8006db6:	4631      	mov	r1, r6
 8006db8:	4628      	mov	r0, r5
 8006dba:	47b8      	blx	r7
 8006dbc:	3001      	adds	r0, #1
 8006dbe:	d12b      	bne.n	8006e18 <_printf_float+0x240>
 8006dc0:	e767      	b.n	8006c92 <_printf_float+0xba>
 8006dc2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006dc6:	f240 80dc 	bls.w	8006f82 <_printf_float+0x3aa>
 8006dca:	2200      	movs	r2, #0
 8006dcc:	2300      	movs	r3, #0
 8006dce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006dd2:	f7f9 fe25 	bl	8000a20 <__aeabi_dcmpeq>
 8006dd6:	2800      	cmp	r0, #0
 8006dd8:	d033      	beq.n	8006e42 <_printf_float+0x26a>
 8006dda:	2301      	movs	r3, #1
 8006ddc:	4a41      	ldr	r2, [pc, #260]	; (8006ee4 <_printf_float+0x30c>)
 8006dde:	4631      	mov	r1, r6
 8006de0:	4628      	mov	r0, r5
 8006de2:	47b8      	blx	r7
 8006de4:	3001      	adds	r0, #1
 8006de6:	f43f af54 	beq.w	8006c92 <_printf_float+0xba>
 8006dea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006dee:	429a      	cmp	r2, r3
 8006df0:	db02      	blt.n	8006df8 <_printf_float+0x220>
 8006df2:	6823      	ldr	r3, [r4, #0]
 8006df4:	07d8      	lsls	r0, r3, #31
 8006df6:	d50f      	bpl.n	8006e18 <_printf_float+0x240>
 8006df8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006dfc:	4631      	mov	r1, r6
 8006dfe:	4628      	mov	r0, r5
 8006e00:	47b8      	blx	r7
 8006e02:	3001      	adds	r0, #1
 8006e04:	f43f af45 	beq.w	8006c92 <_printf_float+0xba>
 8006e08:	f04f 0800 	mov.w	r8, #0
 8006e0c:	f104 091a 	add.w	r9, r4, #26
 8006e10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e12:	3b01      	subs	r3, #1
 8006e14:	4543      	cmp	r3, r8
 8006e16:	dc09      	bgt.n	8006e2c <_printf_float+0x254>
 8006e18:	6823      	ldr	r3, [r4, #0]
 8006e1a:	079b      	lsls	r3, r3, #30
 8006e1c:	f100 8103 	bmi.w	8007026 <_printf_float+0x44e>
 8006e20:	68e0      	ldr	r0, [r4, #12]
 8006e22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e24:	4298      	cmp	r0, r3
 8006e26:	bfb8      	it	lt
 8006e28:	4618      	movlt	r0, r3
 8006e2a:	e734      	b.n	8006c96 <_printf_float+0xbe>
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	464a      	mov	r2, r9
 8006e30:	4631      	mov	r1, r6
 8006e32:	4628      	mov	r0, r5
 8006e34:	47b8      	blx	r7
 8006e36:	3001      	adds	r0, #1
 8006e38:	f43f af2b 	beq.w	8006c92 <_printf_float+0xba>
 8006e3c:	f108 0801 	add.w	r8, r8, #1
 8006e40:	e7e6      	b.n	8006e10 <_printf_float+0x238>
 8006e42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	dc2b      	bgt.n	8006ea0 <_printf_float+0x2c8>
 8006e48:	2301      	movs	r3, #1
 8006e4a:	4a26      	ldr	r2, [pc, #152]	; (8006ee4 <_printf_float+0x30c>)
 8006e4c:	4631      	mov	r1, r6
 8006e4e:	4628      	mov	r0, r5
 8006e50:	47b8      	blx	r7
 8006e52:	3001      	adds	r0, #1
 8006e54:	f43f af1d 	beq.w	8006c92 <_printf_float+0xba>
 8006e58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e5a:	b923      	cbnz	r3, 8006e66 <_printf_float+0x28e>
 8006e5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e5e:	b913      	cbnz	r3, 8006e66 <_printf_float+0x28e>
 8006e60:	6823      	ldr	r3, [r4, #0]
 8006e62:	07d9      	lsls	r1, r3, #31
 8006e64:	d5d8      	bpl.n	8006e18 <_printf_float+0x240>
 8006e66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e6a:	4631      	mov	r1, r6
 8006e6c:	4628      	mov	r0, r5
 8006e6e:	47b8      	blx	r7
 8006e70:	3001      	adds	r0, #1
 8006e72:	f43f af0e 	beq.w	8006c92 <_printf_float+0xba>
 8006e76:	f04f 0900 	mov.w	r9, #0
 8006e7a:	f104 0a1a 	add.w	sl, r4, #26
 8006e7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e80:	425b      	negs	r3, r3
 8006e82:	454b      	cmp	r3, r9
 8006e84:	dc01      	bgt.n	8006e8a <_printf_float+0x2b2>
 8006e86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e88:	e794      	b.n	8006db4 <_printf_float+0x1dc>
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	4652      	mov	r2, sl
 8006e8e:	4631      	mov	r1, r6
 8006e90:	4628      	mov	r0, r5
 8006e92:	47b8      	blx	r7
 8006e94:	3001      	adds	r0, #1
 8006e96:	f43f aefc 	beq.w	8006c92 <_printf_float+0xba>
 8006e9a:	f109 0901 	add.w	r9, r9, #1
 8006e9e:	e7ee      	b.n	8006e7e <_printf_float+0x2a6>
 8006ea0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ea2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	bfa8      	it	ge
 8006ea8:	461a      	movge	r2, r3
 8006eaa:	2a00      	cmp	r2, #0
 8006eac:	4691      	mov	r9, r2
 8006eae:	dd07      	ble.n	8006ec0 <_printf_float+0x2e8>
 8006eb0:	4613      	mov	r3, r2
 8006eb2:	4631      	mov	r1, r6
 8006eb4:	4642      	mov	r2, r8
 8006eb6:	4628      	mov	r0, r5
 8006eb8:	47b8      	blx	r7
 8006eba:	3001      	adds	r0, #1
 8006ebc:	f43f aee9 	beq.w	8006c92 <_printf_float+0xba>
 8006ec0:	f104 031a 	add.w	r3, r4, #26
 8006ec4:	f04f 0b00 	mov.w	fp, #0
 8006ec8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ecc:	9306      	str	r3, [sp, #24]
 8006ece:	e015      	b.n	8006efc <_printf_float+0x324>
 8006ed0:	7fefffff 	.word	0x7fefffff
 8006ed4:	08009c40 	.word	0x08009c40
 8006ed8:	08009c3c 	.word	0x08009c3c
 8006edc:	08009c48 	.word	0x08009c48
 8006ee0:	08009c44 	.word	0x08009c44
 8006ee4:	08009c4c 	.word	0x08009c4c
 8006ee8:	2301      	movs	r3, #1
 8006eea:	9a06      	ldr	r2, [sp, #24]
 8006eec:	4631      	mov	r1, r6
 8006eee:	4628      	mov	r0, r5
 8006ef0:	47b8      	blx	r7
 8006ef2:	3001      	adds	r0, #1
 8006ef4:	f43f aecd 	beq.w	8006c92 <_printf_float+0xba>
 8006ef8:	f10b 0b01 	add.w	fp, fp, #1
 8006efc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006f00:	ebaa 0309 	sub.w	r3, sl, r9
 8006f04:	455b      	cmp	r3, fp
 8006f06:	dcef      	bgt.n	8006ee8 <_printf_float+0x310>
 8006f08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	44d0      	add	r8, sl
 8006f10:	db15      	blt.n	8006f3e <_printf_float+0x366>
 8006f12:	6823      	ldr	r3, [r4, #0]
 8006f14:	07da      	lsls	r2, r3, #31
 8006f16:	d412      	bmi.n	8006f3e <_printf_float+0x366>
 8006f18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f1a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f1c:	eba3 020a 	sub.w	r2, r3, sl
 8006f20:	eba3 0a01 	sub.w	sl, r3, r1
 8006f24:	4592      	cmp	sl, r2
 8006f26:	bfa8      	it	ge
 8006f28:	4692      	movge	sl, r2
 8006f2a:	f1ba 0f00 	cmp.w	sl, #0
 8006f2e:	dc0e      	bgt.n	8006f4e <_printf_float+0x376>
 8006f30:	f04f 0800 	mov.w	r8, #0
 8006f34:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006f38:	f104 091a 	add.w	r9, r4, #26
 8006f3c:	e019      	b.n	8006f72 <_printf_float+0x39a>
 8006f3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f42:	4631      	mov	r1, r6
 8006f44:	4628      	mov	r0, r5
 8006f46:	47b8      	blx	r7
 8006f48:	3001      	adds	r0, #1
 8006f4a:	d1e5      	bne.n	8006f18 <_printf_float+0x340>
 8006f4c:	e6a1      	b.n	8006c92 <_printf_float+0xba>
 8006f4e:	4653      	mov	r3, sl
 8006f50:	4642      	mov	r2, r8
 8006f52:	4631      	mov	r1, r6
 8006f54:	4628      	mov	r0, r5
 8006f56:	47b8      	blx	r7
 8006f58:	3001      	adds	r0, #1
 8006f5a:	d1e9      	bne.n	8006f30 <_printf_float+0x358>
 8006f5c:	e699      	b.n	8006c92 <_printf_float+0xba>
 8006f5e:	2301      	movs	r3, #1
 8006f60:	464a      	mov	r2, r9
 8006f62:	4631      	mov	r1, r6
 8006f64:	4628      	mov	r0, r5
 8006f66:	47b8      	blx	r7
 8006f68:	3001      	adds	r0, #1
 8006f6a:	f43f ae92 	beq.w	8006c92 <_printf_float+0xba>
 8006f6e:	f108 0801 	add.w	r8, r8, #1
 8006f72:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f76:	1a9b      	subs	r3, r3, r2
 8006f78:	eba3 030a 	sub.w	r3, r3, sl
 8006f7c:	4543      	cmp	r3, r8
 8006f7e:	dcee      	bgt.n	8006f5e <_printf_float+0x386>
 8006f80:	e74a      	b.n	8006e18 <_printf_float+0x240>
 8006f82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f84:	2a01      	cmp	r2, #1
 8006f86:	dc01      	bgt.n	8006f8c <_printf_float+0x3b4>
 8006f88:	07db      	lsls	r3, r3, #31
 8006f8a:	d53a      	bpl.n	8007002 <_printf_float+0x42a>
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	4642      	mov	r2, r8
 8006f90:	4631      	mov	r1, r6
 8006f92:	4628      	mov	r0, r5
 8006f94:	47b8      	blx	r7
 8006f96:	3001      	adds	r0, #1
 8006f98:	f43f ae7b 	beq.w	8006c92 <_printf_float+0xba>
 8006f9c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006fa0:	4631      	mov	r1, r6
 8006fa2:	4628      	mov	r0, r5
 8006fa4:	47b8      	blx	r7
 8006fa6:	3001      	adds	r0, #1
 8006fa8:	f108 0801 	add.w	r8, r8, #1
 8006fac:	f43f ae71 	beq.w	8006c92 <_printf_float+0xba>
 8006fb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	f103 3aff 	add.w	sl, r3, #4294967295
 8006fb8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	f7f9 fd2f 	bl	8000a20 <__aeabi_dcmpeq>
 8006fc2:	b9c8      	cbnz	r0, 8006ff8 <_printf_float+0x420>
 8006fc4:	4653      	mov	r3, sl
 8006fc6:	4642      	mov	r2, r8
 8006fc8:	4631      	mov	r1, r6
 8006fca:	4628      	mov	r0, r5
 8006fcc:	47b8      	blx	r7
 8006fce:	3001      	adds	r0, #1
 8006fd0:	d10e      	bne.n	8006ff0 <_printf_float+0x418>
 8006fd2:	e65e      	b.n	8006c92 <_printf_float+0xba>
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	4652      	mov	r2, sl
 8006fd8:	4631      	mov	r1, r6
 8006fda:	4628      	mov	r0, r5
 8006fdc:	47b8      	blx	r7
 8006fde:	3001      	adds	r0, #1
 8006fe0:	f43f ae57 	beq.w	8006c92 <_printf_float+0xba>
 8006fe4:	f108 0801 	add.w	r8, r8, #1
 8006fe8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fea:	3b01      	subs	r3, #1
 8006fec:	4543      	cmp	r3, r8
 8006fee:	dcf1      	bgt.n	8006fd4 <_printf_float+0x3fc>
 8006ff0:	464b      	mov	r3, r9
 8006ff2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006ff6:	e6de      	b.n	8006db6 <_printf_float+0x1de>
 8006ff8:	f04f 0800 	mov.w	r8, #0
 8006ffc:	f104 0a1a 	add.w	sl, r4, #26
 8007000:	e7f2      	b.n	8006fe8 <_printf_float+0x410>
 8007002:	2301      	movs	r3, #1
 8007004:	e7df      	b.n	8006fc6 <_printf_float+0x3ee>
 8007006:	2301      	movs	r3, #1
 8007008:	464a      	mov	r2, r9
 800700a:	4631      	mov	r1, r6
 800700c:	4628      	mov	r0, r5
 800700e:	47b8      	blx	r7
 8007010:	3001      	adds	r0, #1
 8007012:	f43f ae3e 	beq.w	8006c92 <_printf_float+0xba>
 8007016:	f108 0801 	add.w	r8, r8, #1
 800701a:	68e3      	ldr	r3, [r4, #12]
 800701c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800701e:	1a9b      	subs	r3, r3, r2
 8007020:	4543      	cmp	r3, r8
 8007022:	dcf0      	bgt.n	8007006 <_printf_float+0x42e>
 8007024:	e6fc      	b.n	8006e20 <_printf_float+0x248>
 8007026:	f04f 0800 	mov.w	r8, #0
 800702a:	f104 0919 	add.w	r9, r4, #25
 800702e:	e7f4      	b.n	800701a <_printf_float+0x442>
 8007030:	2900      	cmp	r1, #0
 8007032:	f43f ae8b 	beq.w	8006d4c <_printf_float+0x174>
 8007036:	2300      	movs	r3, #0
 8007038:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800703c:	ab09      	add	r3, sp, #36	; 0x24
 800703e:	9300      	str	r3, [sp, #0]
 8007040:	ec49 8b10 	vmov	d0, r8, r9
 8007044:	6022      	str	r2, [r4, #0]
 8007046:	f8cd a004 	str.w	sl, [sp, #4]
 800704a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800704e:	4628      	mov	r0, r5
 8007050:	f7ff fd2e 	bl	8006ab0 <__cvt>
 8007054:	4680      	mov	r8, r0
 8007056:	e648      	b.n	8006cea <_printf_float+0x112>

08007058 <_printf_common>:
 8007058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800705c:	4691      	mov	r9, r2
 800705e:	461f      	mov	r7, r3
 8007060:	688a      	ldr	r2, [r1, #8]
 8007062:	690b      	ldr	r3, [r1, #16]
 8007064:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007068:	4293      	cmp	r3, r2
 800706a:	bfb8      	it	lt
 800706c:	4613      	movlt	r3, r2
 800706e:	f8c9 3000 	str.w	r3, [r9]
 8007072:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007076:	4606      	mov	r6, r0
 8007078:	460c      	mov	r4, r1
 800707a:	b112      	cbz	r2, 8007082 <_printf_common+0x2a>
 800707c:	3301      	adds	r3, #1
 800707e:	f8c9 3000 	str.w	r3, [r9]
 8007082:	6823      	ldr	r3, [r4, #0]
 8007084:	0699      	lsls	r1, r3, #26
 8007086:	bf42      	ittt	mi
 8007088:	f8d9 3000 	ldrmi.w	r3, [r9]
 800708c:	3302      	addmi	r3, #2
 800708e:	f8c9 3000 	strmi.w	r3, [r9]
 8007092:	6825      	ldr	r5, [r4, #0]
 8007094:	f015 0506 	ands.w	r5, r5, #6
 8007098:	d107      	bne.n	80070aa <_printf_common+0x52>
 800709a:	f104 0a19 	add.w	sl, r4, #25
 800709e:	68e3      	ldr	r3, [r4, #12]
 80070a0:	f8d9 2000 	ldr.w	r2, [r9]
 80070a4:	1a9b      	subs	r3, r3, r2
 80070a6:	42ab      	cmp	r3, r5
 80070a8:	dc28      	bgt.n	80070fc <_printf_common+0xa4>
 80070aa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80070ae:	6822      	ldr	r2, [r4, #0]
 80070b0:	3300      	adds	r3, #0
 80070b2:	bf18      	it	ne
 80070b4:	2301      	movne	r3, #1
 80070b6:	0692      	lsls	r2, r2, #26
 80070b8:	d42d      	bmi.n	8007116 <_printf_common+0xbe>
 80070ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80070be:	4639      	mov	r1, r7
 80070c0:	4630      	mov	r0, r6
 80070c2:	47c0      	blx	r8
 80070c4:	3001      	adds	r0, #1
 80070c6:	d020      	beq.n	800710a <_printf_common+0xb2>
 80070c8:	6823      	ldr	r3, [r4, #0]
 80070ca:	68e5      	ldr	r5, [r4, #12]
 80070cc:	f8d9 2000 	ldr.w	r2, [r9]
 80070d0:	f003 0306 	and.w	r3, r3, #6
 80070d4:	2b04      	cmp	r3, #4
 80070d6:	bf08      	it	eq
 80070d8:	1aad      	subeq	r5, r5, r2
 80070da:	68a3      	ldr	r3, [r4, #8]
 80070dc:	6922      	ldr	r2, [r4, #16]
 80070de:	bf0c      	ite	eq
 80070e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80070e4:	2500      	movne	r5, #0
 80070e6:	4293      	cmp	r3, r2
 80070e8:	bfc4      	itt	gt
 80070ea:	1a9b      	subgt	r3, r3, r2
 80070ec:	18ed      	addgt	r5, r5, r3
 80070ee:	f04f 0900 	mov.w	r9, #0
 80070f2:	341a      	adds	r4, #26
 80070f4:	454d      	cmp	r5, r9
 80070f6:	d11a      	bne.n	800712e <_printf_common+0xd6>
 80070f8:	2000      	movs	r0, #0
 80070fa:	e008      	b.n	800710e <_printf_common+0xb6>
 80070fc:	2301      	movs	r3, #1
 80070fe:	4652      	mov	r2, sl
 8007100:	4639      	mov	r1, r7
 8007102:	4630      	mov	r0, r6
 8007104:	47c0      	blx	r8
 8007106:	3001      	adds	r0, #1
 8007108:	d103      	bne.n	8007112 <_printf_common+0xba>
 800710a:	f04f 30ff 	mov.w	r0, #4294967295
 800710e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007112:	3501      	adds	r5, #1
 8007114:	e7c3      	b.n	800709e <_printf_common+0x46>
 8007116:	18e1      	adds	r1, r4, r3
 8007118:	1c5a      	adds	r2, r3, #1
 800711a:	2030      	movs	r0, #48	; 0x30
 800711c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007120:	4422      	add	r2, r4
 8007122:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007126:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800712a:	3302      	adds	r3, #2
 800712c:	e7c5      	b.n	80070ba <_printf_common+0x62>
 800712e:	2301      	movs	r3, #1
 8007130:	4622      	mov	r2, r4
 8007132:	4639      	mov	r1, r7
 8007134:	4630      	mov	r0, r6
 8007136:	47c0      	blx	r8
 8007138:	3001      	adds	r0, #1
 800713a:	d0e6      	beq.n	800710a <_printf_common+0xb2>
 800713c:	f109 0901 	add.w	r9, r9, #1
 8007140:	e7d8      	b.n	80070f4 <_printf_common+0x9c>
	...

08007144 <_puts_r>:
 8007144:	b570      	push	{r4, r5, r6, lr}
 8007146:	460e      	mov	r6, r1
 8007148:	4605      	mov	r5, r0
 800714a:	b118      	cbz	r0, 8007154 <_puts_r+0x10>
 800714c:	6983      	ldr	r3, [r0, #24]
 800714e:	b90b      	cbnz	r3, 8007154 <_puts_r+0x10>
 8007150:	f001 f906 	bl	8008360 <__sinit>
 8007154:	69ab      	ldr	r3, [r5, #24]
 8007156:	68ac      	ldr	r4, [r5, #8]
 8007158:	b913      	cbnz	r3, 8007160 <_puts_r+0x1c>
 800715a:	4628      	mov	r0, r5
 800715c:	f001 f900 	bl	8008360 <__sinit>
 8007160:	4b23      	ldr	r3, [pc, #140]	; (80071f0 <_puts_r+0xac>)
 8007162:	429c      	cmp	r4, r3
 8007164:	d117      	bne.n	8007196 <_puts_r+0x52>
 8007166:	686c      	ldr	r4, [r5, #4]
 8007168:	89a3      	ldrh	r3, [r4, #12]
 800716a:	071b      	lsls	r3, r3, #28
 800716c:	d51d      	bpl.n	80071aa <_puts_r+0x66>
 800716e:	6923      	ldr	r3, [r4, #16]
 8007170:	b1db      	cbz	r3, 80071aa <_puts_r+0x66>
 8007172:	3e01      	subs	r6, #1
 8007174:	68a3      	ldr	r3, [r4, #8]
 8007176:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800717a:	3b01      	subs	r3, #1
 800717c:	60a3      	str	r3, [r4, #8]
 800717e:	b9e9      	cbnz	r1, 80071bc <_puts_r+0x78>
 8007180:	2b00      	cmp	r3, #0
 8007182:	da2e      	bge.n	80071e2 <_puts_r+0x9e>
 8007184:	4622      	mov	r2, r4
 8007186:	210a      	movs	r1, #10
 8007188:	4628      	mov	r0, r5
 800718a:	f000 f8f5 	bl	8007378 <__swbuf_r>
 800718e:	3001      	adds	r0, #1
 8007190:	d011      	beq.n	80071b6 <_puts_r+0x72>
 8007192:	200a      	movs	r0, #10
 8007194:	e011      	b.n	80071ba <_puts_r+0x76>
 8007196:	4b17      	ldr	r3, [pc, #92]	; (80071f4 <_puts_r+0xb0>)
 8007198:	429c      	cmp	r4, r3
 800719a:	d101      	bne.n	80071a0 <_puts_r+0x5c>
 800719c:	68ac      	ldr	r4, [r5, #8]
 800719e:	e7e3      	b.n	8007168 <_puts_r+0x24>
 80071a0:	4b15      	ldr	r3, [pc, #84]	; (80071f8 <_puts_r+0xb4>)
 80071a2:	429c      	cmp	r4, r3
 80071a4:	bf08      	it	eq
 80071a6:	68ec      	ldreq	r4, [r5, #12]
 80071a8:	e7de      	b.n	8007168 <_puts_r+0x24>
 80071aa:	4621      	mov	r1, r4
 80071ac:	4628      	mov	r0, r5
 80071ae:	f000 f935 	bl	800741c <__swsetup_r>
 80071b2:	2800      	cmp	r0, #0
 80071b4:	d0dd      	beq.n	8007172 <_puts_r+0x2e>
 80071b6:	f04f 30ff 	mov.w	r0, #4294967295
 80071ba:	bd70      	pop	{r4, r5, r6, pc}
 80071bc:	2b00      	cmp	r3, #0
 80071be:	da04      	bge.n	80071ca <_puts_r+0x86>
 80071c0:	69a2      	ldr	r2, [r4, #24]
 80071c2:	429a      	cmp	r2, r3
 80071c4:	dc06      	bgt.n	80071d4 <_puts_r+0x90>
 80071c6:	290a      	cmp	r1, #10
 80071c8:	d004      	beq.n	80071d4 <_puts_r+0x90>
 80071ca:	6823      	ldr	r3, [r4, #0]
 80071cc:	1c5a      	adds	r2, r3, #1
 80071ce:	6022      	str	r2, [r4, #0]
 80071d0:	7019      	strb	r1, [r3, #0]
 80071d2:	e7cf      	b.n	8007174 <_puts_r+0x30>
 80071d4:	4622      	mov	r2, r4
 80071d6:	4628      	mov	r0, r5
 80071d8:	f000 f8ce 	bl	8007378 <__swbuf_r>
 80071dc:	3001      	adds	r0, #1
 80071de:	d1c9      	bne.n	8007174 <_puts_r+0x30>
 80071e0:	e7e9      	b.n	80071b6 <_puts_r+0x72>
 80071e2:	6823      	ldr	r3, [r4, #0]
 80071e4:	200a      	movs	r0, #10
 80071e6:	1c5a      	adds	r2, r3, #1
 80071e8:	6022      	str	r2, [r4, #0]
 80071ea:	7018      	strb	r0, [r3, #0]
 80071ec:	e7e5      	b.n	80071ba <_puts_r+0x76>
 80071ee:	bf00      	nop
 80071f0:	08009c7c 	.word	0x08009c7c
 80071f4:	08009c9c 	.word	0x08009c9c
 80071f8:	08009c5c 	.word	0x08009c5c

080071fc <puts>:
 80071fc:	4b02      	ldr	r3, [pc, #8]	; (8007208 <puts+0xc>)
 80071fe:	4601      	mov	r1, r0
 8007200:	6818      	ldr	r0, [r3, #0]
 8007202:	f7ff bf9f 	b.w	8007144 <_puts_r>
 8007206:	bf00      	nop
 8007208:	20000014 	.word	0x20000014

0800720c <setbuf>:
 800720c:	2900      	cmp	r1, #0
 800720e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007212:	bf0c      	ite	eq
 8007214:	2202      	moveq	r2, #2
 8007216:	2200      	movne	r2, #0
 8007218:	f000 b800 	b.w	800721c <setvbuf>

0800721c <setvbuf>:
 800721c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007220:	461d      	mov	r5, r3
 8007222:	4b51      	ldr	r3, [pc, #324]	; (8007368 <setvbuf+0x14c>)
 8007224:	681e      	ldr	r6, [r3, #0]
 8007226:	4604      	mov	r4, r0
 8007228:	460f      	mov	r7, r1
 800722a:	4690      	mov	r8, r2
 800722c:	b126      	cbz	r6, 8007238 <setvbuf+0x1c>
 800722e:	69b3      	ldr	r3, [r6, #24]
 8007230:	b913      	cbnz	r3, 8007238 <setvbuf+0x1c>
 8007232:	4630      	mov	r0, r6
 8007234:	f001 f894 	bl	8008360 <__sinit>
 8007238:	4b4c      	ldr	r3, [pc, #304]	; (800736c <setvbuf+0x150>)
 800723a:	429c      	cmp	r4, r3
 800723c:	d152      	bne.n	80072e4 <setvbuf+0xc8>
 800723e:	6874      	ldr	r4, [r6, #4]
 8007240:	f1b8 0f02 	cmp.w	r8, #2
 8007244:	d006      	beq.n	8007254 <setvbuf+0x38>
 8007246:	f1b8 0f01 	cmp.w	r8, #1
 800724a:	f200 8089 	bhi.w	8007360 <setvbuf+0x144>
 800724e:	2d00      	cmp	r5, #0
 8007250:	f2c0 8086 	blt.w	8007360 <setvbuf+0x144>
 8007254:	4621      	mov	r1, r4
 8007256:	4630      	mov	r0, r6
 8007258:	f001 f818 	bl	800828c <_fflush_r>
 800725c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800725e:	b141      	cbz	r1, 8007272 <setvbuf+0x56>
 8007260:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007264:	4299      	cmp	r1, r3
 8007266:	d002      	beq.n	800726e <setvbuf+0x52>
 8007268:	4630      	mov	r0, r6
 800726a:	f001 fc71 	bl	8008b50 <_free_r>
 800726e:	2300      	movs	r3, #0
 8007270:	6363      	str	r3, [r4, #52]	; 0x34
 8007272:	2300      	movs	r3, #0
 8007274:	61a3      	str	r3, [r4, #24]
 8007276:	6063      	str	r3, [r4, #4]
 8007278:	89a3      	ldrh	r3, [r4, #12]
 800727a:	061b      	lsls	r3, r3, #24
 800727c:	d503      	bpl.n	8007286 <setvbuf+0x6a>
 800727e:	6921      	ldr	r1, [r4, #16]
 8007280:	4630      	mov	r0, r6
 8007282:	f001 fc65 	bl	8008b50 <_free_r>
 8007286:	89a3      	ldrh	r3, [r4, #12]
 8007288:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800728c:	f023 0303 	bic.w	r3, r3, #3
 8007290:	f1b8 0f02 	cmp.w	r8, #2
 8007294:	81a3      	strh	r3, [r4, #12]
 8007296:	d05d      	beq.n	8007354 <setvbuf+0x138>
 8007298:	ab01      	add	r3, sp, #4
 800729a:	466a      	mov	r2, sp
 800729c:	4621      	mov	r1, r4
 800729e:	4630      	mov	r0, r6
 80072a0:	f001 f8f6 	bl	8008490 <__swhatbuf_r>
 80072a4:	89a3      	ldrh	r3, [r4, #12]
 80072a6:	4318      	orrs	r0, r3
 80072a8:	81a0      	strh	r0, [r4, #12]
 80072aa:	bb2d      	cbnz	r5, 80072f8 <setvbuf+0xdc>
 80072ac:	9d00      	ldr	r5, [sp, #0]
 80072ae:	4628      	mov	r0, r5
 80072b0:	f001 f952 	bl	8008558 <malloc>
 80072b4:	4607      	mov	r7, r0
 80072b6:	2800      	cmp	r0, #0
 80072b8:	d14e      	bne.n	8007358 <setvbuf+0x13c>
 80072ba:	f8dd 9000 	ldr.w	r9, [sp]
 80072be:	45a9      	cmp	r9, r5
 80072c0:	d13c      	bne.n	800733c <setvbuf+0x120>
 80072c2:	f04f 30ff 	mov.w	r0, #4294967295
 80072c6:	89a3      	ldrh	r3, [r4, #12]
 80072c8:	f043 0302 	orr.w	r3, r3, #2
 80072cc:	81a3      	strh	r3, [r4, #12]
 80072ce:	2300      	movs	r3, #0
 80072d0:	60a3      	str	r3, [r4, #8]
 80072d2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80072d6:	6023      	str	r3, [r4, #0]
 80072d8:	6123      	str	r3, [r4, #16]
 80072da:	2301      	movs	r3, #1
 80072dc:	6163      	str	r3, [r4, #20]
 80072de:	b003      	add	sp, #12
 80072e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80072e4:	4b22      	ldr	r3, [pc, #136]	; (8007370 <setvbuf+0x154>)
 80072e6:	429c      	cmp	r4, r3
 80072e8:	d101      	bne.n	80072ee <setvbuf+0xd2>
 80072ea:	68b4      	ldr	r4, [r6, #8]
 80072ec:	e7a8      	b.n	8007240 <setvbuf+0x24>
 80072ee:	4b21      	ldr	r3, [pc, #132]	; (8007374 <setvbuf+0x158>)
 80072f0:	429c      	cmp	r4, r3
 80072f2:	bf08      	it	eq
 80072f4:	68f4      	ldreq	r4, [r6, #12]
 80072f6:	e7a3      	b.n	8007240 <setvbuf+0x24>
 80072f8:	2f00      	cmp	r7, #0
 80072fa:	d0d8      	beq.n	80072ae <setvbuf+0x92>
 80072fc:	69b3      	ldr	r3, [r6, #24]
 80072fe:	b913      	cbnz	r3, 8007306 <setvbuf+0xea>
 8007300:	4630      	mov	r0, r6
 8007302:	f001 f82d 	bl	8008360 <__sinit>
 8007306:	f1b8 0f01 	cmp.w	r8, #1
 800730a:	bf08      	it	eq
 800730c:	89a3      	ldrheq	r3, [r4, #12]
 800730e:	6027      	str	r7, [r4, #0]
 8007310:	bf04      	itt	eq
 8007312:	f043 0301 	orreq.w	r3, r3, #1
 8007316:	81a3      	strheq	r3, [r4, #12]
 8007318:	89a3      	ldrh	r3, [r4, #12]
 800731a:	f013 0008 	ands.w	r0, r3, #8
 800731e:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8007322:	d01b      	beq.n	800735c <setvbuf+0x140>
 8007324:	f013 0001 	ands.w	r0, r3, #1
 8007328:	bf18      	it	ne
 800732a:	426d      	negne	r5, r5
 800732c:	f04f 0300 	mov.w	r3, #0
 8007330:	bf1d      	ittte	ne
 8007332:	60a3      	strne	r3, [r4, #8]
 8007334:	61a5      	strne	r5, [r4, #24]
 8007336:	4618      	movne	r0, r3
 8007338:	60a5      	streq	r5, [r4, #8]
 800733a:	e7d0      	b.n	80072de <setvbuf+0xc2>
 800733c:	4648      	mov	r0, r9
 800733e:	f001 f90b 	bl	8008558 <malloc>
 8007342:	4607      	mov	r7, r0
 8007344:	2800      	cmp	r0, #0
 8007346:	d0bc      	beq.n	80072c2 <setvbuf+0xa6>
 8007348:	89a3      	ldrh	r3, [r4, #12]
 800734a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800734e:	81a3      	strh	r3, [r4, #12]
 8007350:	464d      	mov	r5, r9
 8007352:	e7d3      	b.n	80072fc <setvbuf+0xe0>
 8007354:	2000      	movs	r0, #0
 8007356:	e7b6      	b.n	80072c6 <setvbuf+0xaa>
 8007358:	46a9      	mov	r9, r5
 800735a:	e7f5      	b.n	8007348 <setvbuf+0x12c>
 800735c:	60a0      	str	r0, [r4, #8]
 800735e:	e7be      	b.n	80072de <setvbuf+0xc2>
 8007360:	f04f 30ff 	mov.w	r0, #4294967295
 8007364:	e7bb      	b.n	80072de <setvbuf+0xc2>
 8007366:	bf00      	nop
 8007368:	20000014 	.word	0x20000014
 800736c:	08009c7c 	.word	0x08009c7c
 8007370:	08009c9c 	.word	0x08009c9c
 8007374:	08009c5c 	.word	0x08009c5c

08007378 <__swbuf_r>:
 8007378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800737a:	460e      	mov	r6, r1
 800737c:	4614      	mov	r4, r2
 800737e:	4605      	mov	r5, r0
 8007380:	b118      	cbz	r0, 800738a <__swbuf_r+0x12>
 8007382:	6983      	ldr	r3, [r0, #24]
 8007384:	b90b      	cbnz	r3, 800738a <__swbuf_r+0x12>
 8007386:	f000 ffeb 	bl	8008360 <__sinit>
 800738a:	4b21      	ldr	r3, [pc, #132]	; (8007410 <__swbuf_r+0x98>)
 800738c:	429c      	cmp	r4, r3
 800738e:	d12a      	bne.n	80073e6 <__swbuf_r+0x6e>
 8007390:	686c      	ldr	r4, [r5, #4]
 8007392:	69a3      	ldr	r3, [r4, #24]
 8007394:	60a3      	str	r3, [r4, #8]
 8007396:	89a3      	ldrh	r3, [r4, #12]
 8007398:	071a      	lsls	r2, r3, #28
 800739a:	d52e      	bpl.n	80073fa <__swbuf_r+0x82>
 800739c:	6923      	ldr	r3, [r4, #16]
 800739e:	b363      	cbz	r3, 80073fa <__swbuf_r+0x82>
 80073a0:	6923      	ldr	r3, [r4, #16]
 80073a2:	6820      	ldr	r0, [r4, #0]
 80073a4:	1ac0      	subs	r0, r0, r3
 80073a6:	6963      	ldr	r3, [r4, #20]
 80073a8:	b2f6      	uxtb	r6, r6
 80073aa:	4283      	cmp	r3, r0
 80073ac:	4637      	mov	r7, r6
 80073ae:	dc04      	bgt.n	80073ba <__swbuf_r+0x42>
 80073b0:	4621      	mov	r1, r4
 80073b2:	4628      	mov	r0, r5
 80073b4:	f000 ff6a 	bl	800828c <_fflush_r>
 80073b8:	bb28      	cbnz	r0, 8007406 <__swbuf_r+0x8e>
 80073ba:	68a3      	ldr	r3, [r4, #8]
 80073bc:	3b01      	subs	r3, #1
 80073be:	60a3      	str	r3, [r4, #8]
 80073c0:	6823      	ldr	r3, [r4, #0]
 80073c2:	1c5a      	adds	r2, r3, #1
 80073c4:	6022      	str	r2, [r4, #0]
 80073c6:	701e      	strb	r6, [r3, #0]
 80073c8:	6963      	ldr	r3, [r4, #20]
 80073ca:	3001      	adds	r0, #1
 80073cc:	4283      	cmp	r3, r0
 80073ce:	d004      	beq.n	80073da <__swbuf_r+0x62>
 80073d0:	89a3      	ldrh	r3, [r4, #12]
 80073d2:	07db      	lsls	r3, r3, #31
 80073d4:	d519      	bpl.n	800740a <__swbuf_r+0x92>
 80073d6:	2e0a      	cmp	r6, #10
 80073d8:	d117      	bne.n	800740a <__swbuf_r+0x92>
 80073da:	4621      	mov	r1, r4
 80073dc:	4628      	mov	r0, r5
 80073de:	f000 ff55 	bl	800828c <_fflush_r>
 80073e2:	b190      	cbz	r0, 800740a <__swbuf_r+0x92>
 80073e4:	e00f      	b.n	8007406 <__swbuf_r+0x8e>
 80073e6:	4b0b      	ldr	r3, [pc, #44]	; (8007414 <__swbuf_r+0x9c>)
 80073e8:	429c      	cmp	r4, r3
 80073ea:	d101      	bne.n	80073f0 <__swbuf_r+0x78>
 80073ec:	68ac      	ldr	r4, [r5, #8]
 80073ee:	e7d0      	b.n	8007392 <__swbuf_r+0x1a>
 80073f0:	4b09      	ldr	r3, [pc, #36]	; (8007418 <__swbuf_r+0xa0>)
 80073f2:	429c      	cmp	r4, r3
 80073f4:	bf08      	it	eq
 80073f6:	68ec      	ldreq	r4, [r5, #12]
 80073f8:	e7cb      	b.n	8007392 <__swbuf_r+0x1a>
 80073fa:	4621      	mov	r1, r4
 80073fc:	4628      	mov	r0, r5
 80073fe:	f000 f80d 	bl	800741c <__swsetup_r>
 8007402:	2800      	cmp	r0, #0
 8007404:	d0cc      	beq.n	80073a0 <__swbuf_r+0x28>
 8007406:	f04f 37ff 	mov.w	r7, #4294967295
 800740a:	4638      	mov	r0, r7
 800740c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800740e:	bf00      	nop
 8007410:	08009c7c 	.word	0x08009c7c
 8007414:	08009c9c 	.word	0x08009c9c
 8007418:	08009c5c 	.word	0x08009c5c

0800741c <__swsetup_r>:
 800741c:	4b32      	ldr	r3, [pc, #200]	; (80074e8 <__swsetup_r+0xcc>)
 800741e:	b570      	push	{r4, r5, r6, lr}
 8007420:	681d      	ldr	r5, [r3, #0]
 8007422:	4606      	mov	r6, r0
 8007424:	460c      	mov	r4, r1
 8007426:	b125      	cbz	r5, 8007432 <__swsetup_r+0x16>
 8007428:	69ab      	ldr	r3, [r5, #24]
 800742a:	b913      	cbnz	r3, 8007432 <__swsetup_r+0x16>
 800742c:	4628      	mov	r0, r5
 800742e:	f000 ff97 	bl	8008360 <__sinit>
 8007432:	4b2e      	ldr	r3, [pc, #184]	; (80074ec <__swsetup_r+0xd0>)
 8007434:	429c      	cmp	r4, r3
 8007436:	d10f      	bne.n	8007458 <__swsetup_r+0x3c>
 8007438:	686c      	ldr	r4, [r5, #4]
 800743a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800743e:	b29a      	uxth	r2, r3
 8007440:	0715      	lsls	r5, r2, #28
 8007442:	d42c      	bmi.n	800749e <__swsetup_r+0x82>
 8007444:	06d0      	lsls	r0, r2, #27
 8007446:	d411      	bmi.n	800746c <__swsetup_r+0x50>
 8007448:	2209      	movs	r2, #9
 800744a:	6032      	str	r2, [r6, #0]
 800744c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007450:	81a3      	strh	r3, [r4, #12]
 8007452:	f04f 30ff 	mov.w	r0, #4294967295
 8007456:	e03e      	b.n	80074d6 <__swsetup_r+0xba>
 8007458:	4b25      	ldr	r3, [pc, #148]	; (80074f0 <__swsetup_r+0xd4>)
 800745a:	429c      	cmp	r4, r3
 800745c:	d101      	bne.n	8007462 <__swsetup_r+0x46>
 800745e:	68ac      	ldr	r4, [r5, #8]
 8007460:	e7eb      	b.n	800743a <__swsetup_r+0x1e>
 8007462:	4b24      	ldr	r3, [pc, #144]	; (80074f4 <__swsetup_r+0xd8>)
 8007464:	429c      	cmp	r4, r3
 8007466:	bf08      	it	eq
 8007468:	68ec      	ldreq	r4, [r5, #12]
 800746a:	e7e6      	b.n	800743a <__swsetup_r+0x1e>
 800746c:	0751      	lsls	r1, r2, #29
 800746e:	d512      	bpl.n	8007496 <__swsetup_r+0x7a>
 8007470:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007472:	b141      	cbz	r1, 8007486 <__swsetup_r+0x6a>
 8007474:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007478:	4299      	cmp	r1, r3
 800747a:	d002      	beq.n	8007482 <__swsetup_r+0x66>
 800747c:	4630      	mov	r0, r6
 800747e:	f001 fb67 	bl	8008b50 <_free_r>
 8007482:	2300      	movs	r3, #0
 8007484:	6363      	str	r3, [r4, #52]	; 0x34
 8007486:	89a3      	ldrh	r3, [r4, #12]
 8007488:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800748c:	81a3      	strh	r3, [r4, #12]
 800748e:	2300      	movs	r3, #0
 8007490:	6063      	str	r3, [r4, #4]
 8007492:	6923      	ldr	r3, [r4, #16]
 8007494:	6023      	str	r3, [r4, #0]
 8007496:	89a3      	ldrh	r3, [r4, #12]
 8007498:	f043 0308 	orr.w	r3, r3, #8
 800749c:	81a3      	strh	r3, [r4, #12]
 800749e:	6923      	ldr	r3, [r4, #16]
 80074a0:	b94b      	cbnz	r3, 80074b6 <__swsetup_r+0x9a>
 80074a2:	89a3      	ldrh	r3, [r4, #12]
 80074a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80074a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074ac:	d003      	beq.n	80074b6 <__swsetup_r+0x9a>
 80074ae:	4621      	mov	r1, r4
 80074b0:	4630      	mov	r0, r6
 80074b2:	f001 f811 	bl	80084d8 <__smakebuf_r>
 80074b6:	89a2      	ldrh	r2, [r4, #12]
 80074b8:	f012 0301 	ands.w	r3, r2, #1
 80074bc:	d00c      	beq.n	80074d8 <__swsetup_r+0xbc>
 80074be:	2300      	movs	r3, #0
 80074c0:	60a3      	str	r3, [r4, #8]
 80074c2:	6963      	ldr	r3, [r4, #20]
 80074c4:	425b      	negs	r3, r3
 80074c6:	61a3      	str	r3, [r4, #24]
 80074c8:	6923      	ldr	r3, [r4, #16]
 80074ca:	b953      	cbnz	r3, 80074e2 <__swsetup_r+0xc6>
 80074cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074d0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80074d4:	d1ba      	bne.n	800744c <__swsetup_r+0x30>
 80074d6:	bd70      	pop	{r4, r5, r6, pc}
 80074d8:	0792      	lsls	r2, r2, #30
 80074da:	bf58      	it	pl
 80074dc:	6963      	ldrpl	r3, [r4, #20]
 80074de:	60a3      	str	r3, [r4, #8]
 80074e0:	e7f2      	b.n	80074c8 <__swsetup_r+0xac>
 80074e2:	2000      	movs	r0, #0
 80074e4:	e7f7      	b.n	80074d6 <__swsetup_r+0xba>
 80074e6:	bf00      	nop
 80074e8:	20000014 	.word	0x20000014
 80074ec:	08009c7c 	.word	0x08009c7c
 80074f0:	08009c9c 	.word	0x08009c9c
 80074f4:	08009c5c 	.word	0x08009c5c

080074f8 <quorem>:
 80074f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074fc:	6903      	ldr	r3, [r0, #16]
 80074fe:	690c      	ldr	r4, [r1, #16]
 8007500:	42a3      	cmp	r3, r4
 8007502:	4680      	mov	r8, r0
 8007504:	f2c0 8082 	blt.w	800760c <quorem+0x114>
 8007508:	3c01      	subs	r4, #1
 800750a:	f101 0714 	add.w	r7, r1, #20
 800750e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8007512:	f100 0614 	add.w	r6, r0, #20
 8007516:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800751a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800751e:	eb06 030c 	add.w	r3, r6, ip
 8007522:	3501      	adds	r5, #1
 8007524:	eb07 090c 	add.w	r9, r7, ip
 8007528:	9301      	str	r3, [sp, #4]
 800752a:	fbb0 f5f5 	udiv	r5, r0, r5
 800752e:	b395      	cbz	r5, 8007596 <quorem+0x9e>
 8007530:	f04f 0a00 	mov.w	sl, #0
 8007534:	4638      	mov	r0, r7
 8007536:	46b6      	mov	lr, r6
 8007538:	46d3      	mov	fp, sl
 800753a:	f850 2b04 	ldr.w	r2, [r0], #4
 800753e:	b293      	uxth	r3, r2
 8007540:	fb05 a303 	mla	r3, r5, r3, sl
 8007544:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007548:	b29b      	uxth	r3, r3
 800754a:	ebab 0303 	sub.w	r3, fp, r3
 800754e:	0c12      	lsrs	r2, r2, #16
 8007550:	f8de b000 	ldr.w	fp, [lr]
 8007554:	fb05 a202 	mla	r2, r5, r2, sl
 8007558:	fa13 f38b 	uxtah	r3, r3, fp
 800755c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007560:	fa1f fb82 	uxth.w	fp, r2
 8007564:	f8de 2000 	ldr.w	r2, [lr]
 8007568:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800756c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007570:	b29b      	uxth	r3, r3
 8007572:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007576:	4581      	cmp	r9, r0
 8007578:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800757c:	f84e 3b04 	str.w	r3, [lr], #4
 8007580:	d2db      	bcs.n	800753a <quorem+0x42>
 8007582:	f856 300c 	ldr.w	r3, [r6, ip]
 8007586:	b933      	cbnz	r3, 8007596 <quorem+0x9e>
 8007588:	9b01      	ldr	r3, [sp, #4]
 800758a:	3b04      	subs	r3, #4
 800758c:	429e      	cmp	r6, r3
 800758e:	461a      	mov	r2, r3
 8007590:	d330      	bcc.n	80075f4 <quorem+0xfc>
 8007592:	f8c8 4010 	str.w	r4, [r8, #16]
 8007596:	4640      	mov	r0, r8
 8007598:	f001 fa06 	bl	80089a8 <__mcmp>
 800759c:	2800      	cmp	r0, #0
 800759e:	db25      	blt.n	80075ec <quorem+0xf4>
 80075a0:	3501      	adds	r5, #1
 80075a2:	4630      	mov	r0, r6
 80075a4:	f04f 0c00 	mov.w	ip, #0
 80075a8:	f857 2b04 	ldr.w	r2, [r7], #4
 80075ac:	f8d0 e000 	ldr.w	lr, [r0]
 80075b0:	b293      	uxth	r3, r2
 80075b2:	ebac 0303 	sub.w	r3, ip, r3
 80075b6:	0c12      	lsrs	r2, r2, #16
 80075b8:	fa13 f38e 	uxtah	r3, r3, lr
 80075bc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80075c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80075ca:	45b9      	cmp	r9, r7
 80075cc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80075d0:	f840 3b04 	str.w	r3, [r0], #4
 80075d4:	d2e8      	bcs.n	80075a8 <quorem+0xb0>
 80075d6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80075da:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80075de:	b92a      	cbnz	r2, 80075ec <quorem+0xf4>
 80075e0:	3b04      	subs	r3, #4
 80075e2:	429e      	cmp	r6, r3
 80075e4:	461a      	mov	r2, r3
 80075e6:	d30b      	bcc.n	8007600 <quorem+0x108>
 80075e8:	f8c8 4010 	str.w	r4, [r8, #16]
 80075ec:	4628      	mov	r0, r5
 80075ee:	b003      	add	sp, #12
 80075f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075f4:	6812      	ldr	r2, [r2, #0]
 80075f6:	3b04      	subs	r3, #4
 80075f8:	2a00      	cmp	r2, #0
 80075fa:	d1ca      	bne.n	8007592 <quorem+0x9a>
 80075fc:	3c01      	subs	r4, #1
 80075fe:	e7c5      	b.n	800758c <quorem+0x94>
 8007600:	6812      	ldr	r2, [r2, #0]
 8007602:	3b04      	subs	r3, #4
 8007604:	2a00      	cmp	r2, #0
 8007606:	d1ef      	bne.n	80075e8 <quorem+0xf0>
 8007608:	3c01      	subs	r4, #1
 800760a:	e7ea      	b.n	80075e2 <quorem+0xea>
 800760c:	2000      	movs	r0, #0
 800760e:	e7ee      	b.n	80075ee <quorem+0xf6>

08007610 <_dtoa_r>:
 8007610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007614:	ec57 6b10 	vmov	r6, r7, d0
 8007618:	b097      	sub	sp, #92	; 0x5c
 800761a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800761c:	9106      	str	r1, [sp, #24]
 800761e:	4604      	mov	r4, r0
 8007620:	920b      	str	r2, [sp, #44]	; 0x2c
 8007622:	9312      	str	r3, [sp, #72]	; 0x48
 8007624:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007628:	e9cd 6700 	strd	r6, r7, [sp]
 800762c:	b93d      	cbnz	r5, 800763e <_dtoa_r+0x2e>
 800762e:	2010      	movs	r0, #16
 8007630:	f000 ff92 	bl	8008558 <malloc>
 8007634:	6260      	str	r0, [r4, #36]	; 0x24
 8007636:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800763a:	6005      	str	r5, [r0, #0]
 800763c:	60c5      	str	r5, [r0, #12]
 800763e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007640:	6819      	ldr	r1, [r3, #0]
 8007642:	b151      	cbz	r1, 800765a <_dtoa_r+0x4a>
 8007644:	685a      	ldr	r2, [r3, #4]
 8007646:	604a      	str	r2, [r1, #4]
 8007648:	2301      	movs	r3, #1
 800764a:	4093      	lsls	r3, r2
 800764c:	608b      	str	r3, [r1, #8]
 800764e:	4620      	mov	r0, r4
 8007650:	f000 ffc9 	bl	80085e6 <_Bfree>
 8007654:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007656:	2200      	movs	r2, #0
 8007658:	601a      	str	r2, [r3, #0]
 800765a:	1e3b      	subs	r3, r7, #0
 800765c:	bfbb      	ittet	lt
 800765e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007662:	9301      	strlt	r3, [sp, #4]
 8007664:	2300      	movge	r3, #0
 8007666:	2201      	movlt	r2, #1
 8007668:	bfac      	ite	ge
 800766a:	f8c8 3000 	strge.w	r3, [r8]
 800766e:	f8c8 2000 	strlt.w	r2, [r8]
 8007672:	4baf      	ldr	r3, [pc, #700]	; (8007930 <_dtoa_r+0x320>)
 8007674:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007678:	ea33 0308 	bics.w	r3, r3, r8
 800767c:	d114      	bne.n	80076a8 <_dtoa_r+0x98>
 800767e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007680:	f242 730f 	movw	r3, #9999	; 0x270f
 8007684:	6013      	str	r3, [r2, #0]
 8007686:	9b00      	ldr	r3, [sp, #0]
 8007688:	b923      	cbnz	r3, 8007694 <_dtoa_r+0x84>
 800768a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800768e:	2800      	cmp	r0, #0
 8007690:	f000 8542 	beq.w	8008118 <_dtoa_r+0xb08>
 8007694:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007696:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8007944 <_dtoa_r+0x334>
 800769a:	2b00      	cmp	r3, #0
 800769c:	f000 8544 	beq.w	8008128 <_dtoa_r+0xb18>
 80076a0:	f10b 0303 	add.w	r3, fp, #3
 80076a4:	f000 bd3e 	b.w	8008124 <_dtoa_r+0xb14>
 80076a8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80076ac:	2200      	movs	r2, #0
 80076ae:	2300      	movs	r3, #0
 80076b0:	4630      	mov	r0, r6
 80076b2:	4639      	mov	r1, r7
 80076b4:	f7f9 f9b4 	bl	8000a20 <__aeabi_dcmpeq>
 80076b8:	4681      	mov	r9, r0
 80076ba:	b168      	cbz	r0, 80076d8 <_dtoa_r+0xc8>
 80076bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80076be:	2301      	movs	r3, #1
 80076c0:	6013      	str	r3, [r2, #0]
 80076c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	f000 8524 	beq.w	8008112 <_dtoa_r+0xb02>
 80076ca:	4b9a      	ldr	r3, [pc, #616]	; (8007934 <_dtoa_r+0x324>)
 80076cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80076ce:	f103 3bff 	add.w	fp, r3, #4294967295
 80076d2:	6013      	str	r3, [r2, #0]
 80076d4:	f000 bd28 	b.w	8008128 <_dtoa_r+0xb18>
 80076d8:	aa14      	add	r2, sp, #80	; 0x50
 80076da:	a915      	add	r1, sp, #84	; 0x54
 80076dc:	ec47 6b10 	vmov	d0, r6, r7
 80076e0:	4620      	mov	r0, r4
 80076e2:	f001 f9d8 	bl	8008a96 <__d2b>
 80076e6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80076ea:	9004      	str	r0, [sp, #16]
 80076ec:	2d00      	cmp	r5, #0
 80076ee:	d07c      	beq.n	80077ea <_dtoa_r+0x1da>
 80076f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80076f4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80076f8:	46b2      	mov	sl, r6
 80076fa:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80076fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007702:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8007706:	2200      	movs	r2, #0
 8007708:	4b8b      	ldr	r3, [pc, #556]	; (8007938 <_dtoa_r+0x328>)
 800770a:	4650      	mov	r0, sl
 800770c:	4659      	mov	r1, fp
 800770e:	f7f8 fd67 	bl	80001e0 <__aeabi_dsub>
 8007712:	a381      	add	r3, pc, #516	; (adr r3, 8007918 <_dtoa_r+0x308>)
 8007714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007718:	f7f8 ff1a 	bl	8000550 <__aeabi_dmul>
 800771c:	a380      	add	r3, pc, #512	; (adr r3, 8007920 <_dtoa_r+0x310>)
 800771e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007722:	f7f8 fd5f 	bl	80001e4 <__adddf3>
 8007726:	4606      	mov	r6, r0
 8007728:	4628      	mov	r0, r5
 800772a:	460f      	mov	r7, r1
 800772c:	f7f8 fea6 	bl	800047c <__aeabi_i2d>
 8007730:	a37d      	add	r3, pc, #500	; (adr r3, 8007928 <_dtoa_r+0x318>)
 8007732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007736:	f7f8 ff0b 	bl	8000550 <__aeabi_dmul>
 800773a:	4602      	mov	r2, r0
 800773c:	460b      	mov	r3, r1
 800773e:	4630      	mov	r0, r6
 8007740:	4639      	mov	r1, r7
 8007742:	f7f8 fd4f 	bl	80001e4 <__adddf3>
 8007746:	4606      	mov	r6, r0
 8007748:	460f      	mov	r7, r1
 800774a:	f7f9 f9b1 	bl	8000ab0 <__aeabi_d2iz>
 800774e:	2200      	movs	r2, #0
 8007750:	4682      	mov	sl, r0
 8007752:	2300      	movs	r3, #0
 8007754:	4630      	mov	r0, r6
 8007756:	4639      	mov	r1, r7
 8007758:	f7f9 f96c 	bl	8000a34 <__aeabi_dcmplt>
 800775c:	b148      	cbz	r0, 8007772 <_dtoa_r+0x162>
 800775e:	4650      	mov	r0, sl
 8007760:	f7f8 fe8c 	bl	800047c <__aeabi_i2d>
 8007764:	4632      	mov	r2, r6
 8007766:	463b      	mov	r3, r7
 8007768:	f7f9 f95a 	bl	8000a20 <__aeabi_dcmpeq>
 800776c:	b908      	cbnz	r0, 8007772 <_dtoa_r+0x162>
 800776e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007772:	f1ba 0f16 	cmp.w	sl, #22
 8007776:	d859      	bhi.n	800782c <_dtoa_r+0x21c>
 8007778:	4970      	ldr	r1, [pc, #448]	; (800793c <_dtoa_r+0x32c>)
 800777a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800777e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007782:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007786:	f7f9 f973 	bl	8000a70 <__aeabi_dcmpgt>
 800778a:	2800      	cmp	r0, #0
 800778c:	d050      	beq.n	8007830 <_dtoa_r+0x220>
 800778e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007792:	2300      	movs	r3, #0
 8007794:	930f      	str	r3, [sp, #60]	; 0x3c
 8007796:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007798:	1b5d      	subs	r5, r3, r5
 800779a:	f1b5 0801 	subs.w	r8, r5, #1
 800779e:	bf49      	itett	mi
 80077a0:	f1c5 0301 	rsbmi	r3, r5, #1
 80077a4:	2300      	movpl	r3, #0
 80077a6:	9305      	strmi	r3, [sp, #20]
 80077a8:	f04f 0800 	movmi.w	r8, #0
 80077ac:	bf58      	it	pl
 80077ae:	9305      	strpl	r3, [sp, #20]
 80077b0:	f1ba 0f00 	cmp.w	sl, #0
 80077b4:	db3e      	blt.n	8007834 <_dtoa_r+0x224>
 80077b6:	2300      	movs	r3, #0
 80077b8:	44d0      	add	r8, sl
 80077ba:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80077be:	9307      	str	r3, [sp, #28]
 80077c0:	9b06      	ldr	r3, [sp, #24]
 80077c2:	2b09      	cmp	r3, #9
 80077c4:	f200 8090 	bhi.w	80078e8 <_dtoa_r+0x2d8>
 80077c8:	2b05      	cmp	r3, #5
 80077ca:	bfc4      	itt	gt
 80077cc:	3b04      	subgt	r3, #4
 80077ce:	9306      	strgt	r3, [sp, #24]
 80077d0:	9b06      	ldr	r3, [sp, #24]
 80077d2:	f1a3 0302 	sub.w	r3, r3, #2
 80077d6:	bfcc      	ite	gt
 80077d8:	2500      	movgt	r5, #0
 80077da:	2501      	movle	r5, #1
 80077dc:	2b03      	cmp	r3, #3
 80077de:	f200 808f 	bhi.w	8007900 <_dtoa_r+0x2f0>
 80077e2:	e8df f003 	tbb	[pc, r3]
 80077e6:	7f7d      	.short	0x7f7d
 80077e8:	7131      	.short	0x7131
 80077ea:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80077ee:	441d      	add	r5, r3
 80077f0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80077f4:	2820      	cmp	r0, #32
 80077f6:	dd13      	ble.n	8007820 <_dtoa_r+0x210>
 80077f8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80077fc:	9b00      	ldr	r3, [sp, #0]
 80077fe:	fa08 f800 	lsl.w	r8, r8, r0
 8007802:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8007806:	fa23 f000 	lsr.w	r0, r3, r0
 800780a:	ea48 0000 	orr.w	r0, r8, r0
 800780e:	f7f8 fe25 	bl	800045c <__aeabi_ui2d>
 8007812:	2301      	movs	r3, #1
 8007814:	4682      	mov	sl, r0
 8007816:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800781a:	3d01      	subs	r5, #1
 800781c:	9313      	str	r3, [sp, #76]	; 0x4c
 800781e:	e772      	b.n	8007706 <_dtoa_r+0xf6>
 8007820:	9b00      	ldr	r3, [sp, #0]
 8007822:	f1c0 0020 	rsb	r0, r0, #32
 8007826:	fa03 f000 	lsl.w	r0, r3, r0
 800782a:	e7f0      	b.n	800780e <_dtoa_r+0x1fe>
 800782c:	2301      	movs	r3, #1
 800782e:	e7b1      	b.n	8007794 <_dtoa_r+0x184>
 8007830:	900f      	str	r0, [sp, #60]	; 0x3c
 8007832:	e7b0      	b.n	8007796 <_dtoa_r+0x186>
 8007834:	9b05      	ldr	r3, [sp, #20]
 8007836:	eba3 030a 	sub.w	r3, r3, sl
 800783a:	9305      	str	r3, [sp, #20]
 800783c:	f1ca 0300 	rsb	r3, sl, #0
 8007840:	9307      	str	r3, [sp, #28]
 8007842:	2300      	movs	r3, #0
 8007844:	930e      	str	r3, [sp, #56]	; 0x38
 8007846:	e7bb      	b.n	80077c0 <_dtoa_r+0x1b0>
 8007848:	2301      	movs	r3, #1
 800784a:	930a      	str	r3, [sp, #40]	; 0x28
 800784c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800784e:	2b00      	cmp	r3, #0
 8007850:	dd59      	ble.n	8007906 <_dtoa_r+0x2f6>
 8007852:	9302      	str	r3, [sp, #8]
 8007854:	4699      	mov	r9, r3
 8007856:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007858:	2200      	movs	r2, #0
 800785a:	6072      	str	r2, [r6, #4]
 800785c:	2204      	movs	r2, #4
 800785e:	f102 0014 	add.w	r0, r2, #20
 8007862:	4298      	cmp	r0, r3
 8007864:	6871      	ldr	r1, [r6, #4]
 8007866:	d953      	bls.n	8007910 <_dtoa_r+0x300>
 8007868:	4620      	mov	r0, r4
 800786a:	f000 fe88 	bl	800857e <_Balloc>
 800786e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007870:	6030      	str	r0, [r6, #0]
 8007872:	f1b9 0f0e 	cmp.w	r9, #14
 8007876:	f8d3 b000 	ldr.w	fp, [r3]
 800787a:	f200 80e6 	bhi.w	8007a4a <_dtoa_r+0x43a>
 800787e:	2d00      	cmp	r5, #0
 8007880:	f000 80e3 	beq.w	8007a4a <_dtoa_r+0x43a>
 8007884:	ed9d 7b00 	vldr	d7, [sp]
 8007888:	f1ba 0f00 	cmp.w	sl, #0
 800788c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8007890:	dd74      	ble.n	800797c <_dtoa_r+0x36c>
 8007892:	4a2a      	ldr	r2, [pc, #168]	; (800793c <_dtoa_r+0x32c>)
 8007894:	f00a 030f 	and.w	r3, sl, #15
 8007898:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800789c:	ed93 7b00 	vldr	d7, [r3]
 80078a0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80078a4:	06f0      	lsls	r0, r6, #27
 80078a6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80078aa:	d565      	bpl.n	8007978 <_dtoa_r+0x368>
 80078ac:	4b24      	ldr	r3, [pc, #144]	; (8007940 <_dtoa_r+0x330>)
 80078ae:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80078b2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80078b6:	f7f8 ff75 	bl	80007a4 <__aeabi_ddiv>
 80078ba:	e9cd 0100 	strd	r0, r1, [sp]
 80078be:	f006 060f 	and.w	r6, r6, #15
 80078c2:	2503      	movs	r5, #3
 80078c4:	4f1e      	ldr	r7, [pc, #120]	; (8007940 <_dtoa_r+0x330>)
 80078c6:	e04c      	b.n	8007962 <_dtoa_r+0x352>
 80078c8:	2301      	movs	r3, #1
 80078ca:	930a      	str	r3, [sp, #40]	; 0x28
 80078cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078ce:	4453      	add	r3, sl
 80078d0:	f103 0901 	add.w	r9, r3, #1
 80078d4:	9302      	str	r3, [sp, #8]
 80078d6:	464b      	mov	r3, r9
 80078d8:	2b01      	cmp	r3, #1
 80078da:	bfb8      	it	lt
 80078dc:	2301      	movlt	r3, #1
 80078de:	e7ba      	b.n	8007856 <_dtoa_r+0x246>
 80078e0:	2300      	movs	r3, #0
 80078e2:	e7b2      	b.n	800784a <_dtoa_r+0x23a>
 80078e4:	2300      	movs	r3, #0
 80078e6:	e7f0      	b.n	80078ca <_dtoa_r+0x2ba>
 80078e8:	2501      	movs	r5, #1
 80078ea:	2300      	movs	r3, #0
 80078ec:	9306      	str	r3, [sp, #24]
 80078ee:	950a      	str	r5, [sp, #40]	; 0x28
 80078f0:	f04f 33ff 	mov.w	r3, #4294967295
 80078f4:	9302      	str	r3, [sp, #8]
 80078f6:	4699      	mov	r9, r3
 80078f8:	2200      	movs	r2, #0
 80078fa:	2312      	movs	r3, #18
 80078fc:	920b      	str	r2, [sp, #44]	; 0x2c
 80078fe:	e7aa      	b.n	8007856 <_dtoa_r+0x246>
 8007900:	2301      	movs	r3, #1
 8007902:	930a      	str	r3, [sp, #40]	; 0x28
 8007904:	e7f4      	b.n	80078f0 <_dtoa_r+0x2e0>
 8007906:	2301      	movs	r3, #1
 8007908:	9302      	str	r3, [sp, #8]
 800790a:	4699      	mov	r9, r3
 800790c:	461a      	mov	r2, r3
 800790e:	e7f5      	b.n	80078fc <_dtoa_r+0x2ec>
 8007910:	3101      	adds	r1, #1
 8007912:	6071      	str	r1, [r6, #4]
 8007914:	0052      	lsls	r2, r2, #1
 8007916:	e7a2      	b.n	800785e <_dtoa_r+0x24e>
 8007918:	636f4361 	.word	0x636f4361
 800791c:	3fd287a7 	.word	0x3fd287a7
 8007920:	8b60c8b3 	.word	0x8b60c8b3
 8007924:	3fc68a28 	.word	0x3fc68a28
 8007928:	509f79fb 	.word	0x509f79fb
 800792c:	3fd34413 	.word	0x3fd34413
 8007930:	7ff00000 	.word	0x7ff00000
 8007934:	08009c4d 	.word	0x08009c4d
 8007938:	3ff80000 	.word	0x3ff80000
 800793c:	08009ce8 	.word	0x08009ce8
 8007940:	08009cc0 	.word	0x08009cc0
 8007944:	08009c57 	.word	0x08009c57
 8007948:	07f1      	lsls	r1, r6, #31
 800794a:	d508      	bpl.n	800795e <_dtoa_r+0x34e>
 800794c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007950:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007954:	f7f8 fdfc 	bl	8000550 <__aeabi_dmul>
 8007958:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800795c:	3501      	adds	r5, #1
 800795e:	1076      	asrs	r6, r6, #1
 8007960:	3708      	adds	r7, #8
 8007962:	2e00      	cmp	r6, #0
 8007964:	d1f0      	bne.n	8007948 <_dtoa_r+0x338>
 8007966:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800796a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800796e:	f7f8 ff19 	bl	80007a4 <__aeabi_ddiv>
 8007972:	e9cd 0100 	strd	r0, r1, [sp]
 8007976:	e01a      	b.n	80079ae <_dtoa_r+0x39e>
 8007978:	2502      	movs	r5, #2
 800797a:	e7a3      	b.n	80078c4 <_dtoa_r+0x2b4>
 800797c:	f000 80a0 	beq.w	8007ac0 <_dtoa_r+0x4b0>
 8007980:	f1ca 0600 	rsb	r6, sl, #0
 8007984:	4b9f      	ldr	r3, [pc, #636]	; (8007c04 <_dtoa_r+0x5f4>)
 8007986:	4fa0      	ldr	r7, [pc, #640]	; (8007c08 <_dtoa_r+0x5f8>)
 8007988:	f006 020f 	and.w	r2, r6, #15
 800798c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007994:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007998:	f7f8 fdda 	bl	8000550 <__aeabi_dmul>
 800799c:	e9cd 0100 	strd	r0, r1, [sp]
 80079a0:	1136      	asrs	r6, r6, #4
 80079a2:	2300      	movs	r3, #0
 80079a4:	2502      	movs	r5, #2
 80079a6:	2e00      	cmp	r6, #0
 80079a8:	d17f      	bne.n	8007aaa <_dtoa_r+0x49a>
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d1e1      	bne.n	8007972 <_dtoa_r+0x362>
 80079ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	f000 8087 	beq.w	8007ac4 <_dtoa_r+0x4b4>
 80079b6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80079ba:	2200      	movs	r2, #0
 80079bc:	4b93      	ldr	r3, [pc, #588]	; (8007c0c <_dtoa_r+0x5fc>)
 80079be:	4630      	mov	r0, r6
 80079c0:	4639      	mov	r1, r7
 80079c2:	f7f9 f837 	bl	8000a34 <__aeabi_dcmplt>
 80079c6:	2800      	cmp	r0, #0
 80079c8:	d07c      	beq.n	8007ac4 <_dtoa_r+0x4b4>
 80079ca:	f1b9 0f00 	cmp.w	r9, #0
 80079ce:	d079      	beq.n	8007ac4 <_dtoa_r+0x4b4>
 80079d0:	9b02      	ldr	r3, [sp, #8]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	dd35      	ble.n	8007a42 <_dtoa_r+0x432>
 80079d6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80079da:	9308      	str	r3, [sp, #32]
 80079dc:	4639      	mov	r1, r7
 80079de:	2200      	movs	r2, #0
 80079e0:	4b8b      	ldr	r3, [pc, #556]	; (8007c10 <_dtoa_r+0x600>)
 80079e2:	4630      	mov	r0, r6
 80079e4:	f7f8 fdb4 	bl	8000550 <__aeabi_dmul>
 80079e8:	e9cd 0100 	strd	r0, r1, [sp]
 80079ec:	9f02      	ldr	r7, [sp, #8]
 80079ee:	3501      	adds	r5, #1
 80079f0:	4628      	mov	r0, r5
 80079f2:	f7f8 fd43 	bl	800047c <__aeabi_i2d>
 80079f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80079fa:	f7f8 fda9 	bl	8000550 <__aeabi_dmul>
 80079fe:	2200      	movs	r2, #0
 8007a00:	4b84      	ldr	r3, [pc, #528]	; (8007c14 <_dtoa_r+0x604>)
 8007a02:	f7f8 fbef 	bl	80001e4 <__adddf3>
 8007a06:	4605      	mov	r5, r0
 8007a08:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007a0c:	2f00      	cmp	r7, #0
 8007a0e:	d15d      	bne.n	8007acc <_dtoa_r+0x4bc>
 8007a10:	2200      	movs	r2, #0
 8007a12:	4b81      	ldr	r3, [pc, #516]	; (8007c18 <_dtoa_r+0x608>)
 8007a14:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a18:	f7f8 fbe2 	bl	80001e0 <__aeabi_dsub>
 8007a1c:	462a      	mov	r2, r5
 8007a1e:	4633      	mov	r3, r6
 8007a20:	e9cd 0100 	strd	r0, r1, [sp]
 8007a24:	f7f9 f824 	bl	8000a70 <__aeabi_dcmpgt>
 8007a28:	2800      	cmp	r0, #0
 8007a2a:	f040 8288 	bne.w	8007f3e <_dtoa_r+0x92e>
 8007a2e:	462a      	mov	r2, r5
 8007a30:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007a34:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a38:	f7f8 fffc 	bl	8000a34 <__aeabi_dcmplt>
 8007a3c:	2800      	cmp	r0, #0
 8007a3e:	f040 827c 	bne.w	8007f3a <_dtoa_r+0x92a>
 8007a42:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007a46:	e9cd 2300 	strd	r2, r3, [sp]
 8007a4a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	f2c0 8150 	blt.w	8007cf2 <_dtoa_r+0x6e2>
 8007a52:	f1ba 0f0e 	cmp.w	sl, #14
 8007a56:	f300 814c 	bgt.w	8007cf2 <_dtoa_r+0x6e2>
 8007a5a:	4b6a      	ldr	r3, [pc, #424]	; (8007c04 <_dtoa_r+0x5f4>)
 8007a5c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007a60:	ed93 7b00 	vldr	d7, [r3]
 8007a64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007a6c:	f280 80d8 	bge.w	8007c20 <_dtoa_r+0x610>
 8007a70:	f1b9 0f00 	cmp.w	r9, #0
 8007a74:	f300 80d4 	bgt.w	8007c20 <_dtoa_r+0x610>
 8007a78:	f040 825e 	bne.w	8007f38 <_dtoa_r+0x928>
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	4b66      	ldr	r3, [pc, #408]	; (8007c18 <_dtoa_r+0x608>)
 8007a80:	ec51 0b17 	vmov	r0, r1, d7
 8007a84:	f7f8 fd64 	bl	8000550 <__aeabi_dmul>
 8007a88:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a8c:	f7f8 ffe6 	bl	8000a5c <__aeabi_dcmpge>
 8007a90:	464f      	mov	r7, r9
 8007a92:	464e      	mov	r6, r9
 8007a94:	2800      	cmp	r0, #0
 8007a96:	f040 8234 	bne.w	8007f02 <_dtoa_r+0x8f2>
 8007a9a:	2331      	movs	r3, #49	; 0x31
 8007a9c:	f10b 0501 	add.w	r5, fp, #1
 8007aa0:	f88b 3000 	strb.w	r3, [fp]
 8007aa4:	f10a 0a01 	add.w	sl, sl, #1
 8007aa8:	e22f      	b.n	8007f0a <_dtoa_r+0x8fa>
 8007aaa:	07f2      	lsls	r2, r6, #31
 8007aac:	d505      	bpl.n	8007aba <_dtoa_r+0x4aa>
 8007aae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ab2:	f7f8 fd4d 	bl	8000550 <__aeabi_dmul>
 8007ab6:	3501      	adds	r5, #1
 8007ab8:	2301      	movs	r3, #1
 8007aba:	1076      	asrs	r6, r6, #1
 8007abc:	3708      	adds	r7, #8
 8007abe:	e772      	b.n	80079a6 <_dtoa_r+0x396>
 8007ac0:	2502      	movs	r5, #2
 8007ac2:	e774      	b.n	80079ae <_dtoa_r+0x39e>
 8007ac4:	f8cd a020 	str.w	sl, [sp, #32]
 8007ac8:	464f      	mov	r7, r9
 8007aca:	e791      	b.n	80079f0 <_dtoa_r+0x3e0>
 8007acc:	4b4d      	ldr	r3, [pc, #308]	; (8007c04 <_dtoa_r+0x5f4>)
 8007ace:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007ad2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8007ad6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d047      	beq.n	8007b6c <_dtoa_r+0x55c>
 8007adc:	4602      	mov	r2, r0
 8007ade:	460b      	mov	r3, r1
 8007ae0:	2000      	movs	r0, #0
 8007ae2:	494e      	ldr	r1, [pc, #312]	; (8007c1c <_dtoa_r+0x60c>)
 8007ae4:	f7f8 fe5e 	bl	80007a4 <__aeabi_ddiv>
 8007ae8:	462a      	mov	r2, r5
 8007aea:	4633      	mov	r3, r6
 8007aec:	f7f8 fb78 	bl	80001e0 <__aeabi_dsub>
 8007af0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007af4:	465d      	mov	r5, fp
 8007af6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007afa:	f7f8 ffd9 	bl	8000ab0 <__aeabi_d2iz>
 8007afe:	4606      	mov	r6, r0
 8007b00:	f7f8 fcbc 	bl	800047c <__aeabi_i2d>
 8007b04:	4602      	mov	r2, r0
 8007b06:	460b      	mov	r3, r1
 8007b08:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b0c:	f7f8 fb68 	bl	80001e0 <__aeabi_dsub>
 8007b10:	3630      	adds	r6, #48	; 0x30
 8007b12:	f805 6b01 	strb.w	r6, [r5], #1
 8007b16:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007b1a:	e9cd 0100 	strd	r0, r1, [sp]
 8007b1e:	f7f8 ff89 	bl	8000a34 <__aeabi_dcmplt>
 8007b22:	2800      	cmp	r0, #0
 8007b24:	d163      	bne.n	8007bee <_dtoa_r+0x5de>
 8007b26:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b2a:	2000      	movs	r0, #0
 8007b2c:	4937      	ldr	r1, [pc, #220]	; (8007c0c <_dtoa_r+0x5fc>)
 8007b2e:	f7f8 fb57 	bl	80001e0 <__aeabi_dsub>
 8007b32:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007b36:	f7f8 ff7d 	bl	8000a34 <__aeabi_dcmplt>
 8007b3a:	2800      	cmp	r0, #0
 8007b3c:	f040 80b7 	bne.w	8007cae <_dtoa_r+0x69e>
 8007b40:	eba5 030b 	sub.w	r3, r5, fp
 8007b44:	429f      	cmp	r7, r3
 8007b46:	f77f af7c 	ble.w	8007a42 <_dtoa_r+0x432>
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	4b30      	ldr	r3, [pc, #192]	; (8007c10 <_dtoa_r+0x600>)
 8007b4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007b52:	f7f8 fcfd 	bl	8000550 <__aeabi_dmul>
 8007b56:	2200      	movs	r2, #0
 8007b58:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007b5c:	4b2c      	ldr	r3, [pc, #176]	; (8007c10 <_dtoa_r+0x600>)
 8007b5e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b62:	f7f8 fcf5 	bl	8000550 <__aeabi_dmul>
 8007b66:	e9cd 0100 	strd	r0, r1, [sp]
 8007b6a:	e7c4      	b.n	8007af6 <_dtoa_r+0x4e6>
 8007b6c:	462a      	mov	r2, r5
 8007b6e:	4633      	mov	r3, r6
 8007b70:	f7f8 fcee 	bl	8000550 <__aeabi_dmul>
 8007b74:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007b78:	eb0b 0507 	add.w	r5, fp, r7
 8007b7c:	465e      	mov	r6, fp
 8007b7e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b82:	f7f8 ff95 	bl	8000ab0 <__aeabi_d2iz>
 8007b86:	4607      	mov	r7, r0
 8007b88:	f7f8 fc78 	bl	800047c <__aeabi_i2d>
 8007b8c:	3730      	adds	r7, #48	; 0x30
 8007b8e:	4602      	mov	r2, r0
 8007b90:	460b      	mov	r3, r1
 8007b92:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b96:	f7f8 fb23 	bl	80001e0 <__aeabi_dsub>
 8007b9a:	f806 7b01 	strb.w	r7, [r6], #1
 8007b9e:	42ae      	cmp	r6, r5
 8007ba0:	e9cd 0100 	strd	r0, r1, [sp]
 8007ba4:	f04f 0200 	mov.w	r2, #0
 8007ba8:	d126      	bne.n	8007bf8 <_dtoa_r+0x5e8>
 8007baa:	4b1c      	ldr	r3, [pc, #112]	; (8007c1c <_dtoa_r+0x60c>)
 8007bac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007bb0:	f7f8 fb18 	bl	80001e4 <__adddf3>
 8007bb4:	4602      	mov	r2, r0
 8007bb6:	460b      	mov	r3, r1
 8007bb8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007bbc:	f7f8 ff58 	bl	8000a70 <__aeabi_dcmpgt>
 8007bc0:	2800      	cmp	r0, #0
 8007bc2:	d174      	bne.n	8007cae <_dtoa_r+0x69e>
 8007bc4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007bc8:	2000      	movs	r0, #0
 8007bca:	4914      	ldr	r1, [pc, #80]	; (8007c1c <_dtoa_r+0x60c>)
 8007bcc:	f7f8 fb08 	bl	80001e0 <__aeabi_dsub>
 8007bd0:	4602      	mov	r2, r0
 8007bd2:	460b      	mov	r3, r1
 8007bd4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007bd8:	f7f8 ff2c 	bl	8000a34 <__aeabi_dcmplt>
 8007bdc:	2800      	cmp	r0, #0
 8007bde:	f43f af30 	beq.w	8007a42 <_dtoa_r+0x432>
 8007be2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007be6:	2b30      	cmp	r3, #48	; 0x30
 8007be8:	f105 32ff 	add.w	r2, r5, #4294967295
 8007bec:	d002      	beq.n	8007bf4 <_dtoa_r+0x5e4>
 8007bee:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007bf2:	e04a      	b.n	8007c8a <_dtoa_r+0x67a>
 8007bf4:	4615      	mov	r5, r2
 8007bf6:	e7f4      	b.n	8007be2 <_dtoa_r+0x5d2>
 8007bf8:	4b05      	ldr	r3, [pc, #20]	; (8007c10 <_dtoa_r+0x600>)
 8007bfa:	f7f8 fca9 	bl	8000550 <__aeabi_dmul>
 8007bfe:	e9cd 0100 	strd	r0, r1, [sp]
 8007c02:	e7bc      	b.n	8007b7e <_dtoa_r+0x56e>
 8007c04:	08009ce8 	.word	0x08009ce8
 8007c08:	08009cc0 	.word	0x08009cc0
 8007c0c:	3ff00000 	.word	0x3ff00000
 8007c10:	40240000 	.word	0x40240000
 8007c14:	401c0000 	.word	0x401c0000
 8007c18:	40140000 	.word	0x40140000
 8007c1c:	3fe00000 	.word	0x3fe00000
 8007c20:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007c24:	465d      	mov	r5, fp
 8007c26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c2a:	4630      	mov	r0, r6
 8007c2c:	4639      	mov	r1, r7
 8007c2e:	f7f8 fdb9 	bl	80007a4 <__aeabi_ddiv>
 8007c32:	f7f8 ff3d 	bl	8000ab0 <__aeabi_d2iz>
 8007c36:	4680      	mov	r8, r0
 8007c38:	f7f8 fc20 	bl	800047c <__aeabi_i2d>
 8007c3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c40:	f7f8 fc86 	bl	8000550 <__aeabi_dmul>
 8007c44:	4602      	mov	r2, r0
 8007c46:	460b      	mov	r3, r1
 8007c48:	4630      	mov	r0, r6
 8007c4a:	4639      	mov	r1, r7
 8007c4c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8007c50:	f7f8 fac6 	bl	80001e0 <__aeabi_dsub>
 8007c54:	f805 6b01 	strb.w	r6, [r5], #1
 8007c58:	eba5 060b 	sub.w	r6, r5, fp
 8007c5c:	45b1      	cmp	r9, r6
 8007c5e:	4602      	mov	r2, r0
 8007c60:	460b      	mov	r3, r1
 8007c62:	d139      	bne.n	8007cd8 <_dtoa_r+0x6c8>
 8007c64:	f7f8 fabe 	bl	80001e4 <__adddf3>
 8007c68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c6c:	4606      	mov	r6, r0
 8007c6e:	460f      	mov	r7, r1
 8007c70:	f7f8 fefe 	bl	8000a70 <__aeabi_dcmpgt>
 8007c74:	b9c8      	cbnz	r0, 8007caa <_dtoa_r+0x69a>
 8007c76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c7a:	4630      	mov	r0, r6
 8007c7c:	4639      	mov	r1, r7
 8007c7e:	f7f8 fecf 	bl	8000a20 <__aeabi_dcmpeq>
 8007c82:	b110      	cbz	r0, 8007c8a <_dtoa_r+0x67a>
 8007c84:	f018 0f01 	tst.w	r8, #1
 8007c88:	d10f      	bne.n	8007caa <_dtoa_r+0x69a>
 8007c8a:	9904      	ldr	r1, [sp, #16]
 8007c8c:	4620      	mov	r0, r4
 8007c8e:	f000 fcaa 	bl	80085e6 <_Bfree>
 8007c92:	2300      	movs	r3, #0
 8007c94:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007c96:	702b      	strb	r3, [r5, #0]
 8007c98:	f10a 0301 	add.w	r3, sl, #1
 8007c9c:	6013      	str	r3, [r2, #0]
 8007c9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	f000 8241 	beq.w	8008128 <_dtoa_r+0xb18>
 8007ca6:	601d      	str	r5, [r3, #0]
 8007ca8:	e23e      	b.n	8008128 <_dtoa_r+0xb18>
 8007caa:	f8cd a020 	str.w	sl, [sp, #32]
 8007cae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007cb2:	2a39      	cmp	r2, #57	; 0x39
 8007cb4:	f105 33ff 	add.w	r3, r5, #4294967295
 8007cb8:	d108      	bne.n	8007ccc <_dtoa_r+0x6bc>
 8007cba:	459b      	cmp	fp, r3
 8007cbc:	d10a      	bne.n	8007cd4 <_dtoa_r+0x6c4>
 8007cbe:	9b08      	ldr	r3, [sp, #32]
 8007cc0:	3301      	adds	r3, #1
 8007cc2:	9308      	str	r3, [sp, #32]
 8007cc4:	2330      	movs	r3, #48	; 0x30
 8007cc6:	f88b 3000 	strb.w	r3, [fp]
 8007cca:	465b      	mov	r3, fp
 8007ccc:	781a      	ldrb	r2, [r3, #0]
 8007cce:	3201      	adds	r2, #1
 8007cd0:	701a      	strb	r2, [r3, #0]
 8007cd2:	e78c      	b.n	8007bee <_dtoa_r+0x5de>
 8007cd4:	461d      	mov	r5, r3
 8007cd6:	e7ea      	b.n	8007cae <_dtoa_r+0x69e>
 8007cd8:	2200      	movs	r2, #0
 8007cda:	4b9b      	ldr	r3, [pc, #620]	; (8007f48 <_dtoa_r+0x938>)
 8007cdc:	f7f8 fc38 	bl	8000550 <__aeabi_dmul>
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	4606      	mov	r6, r0
 8007ce6:	460f      	mov	r7, r1
 8007ce8:	f7f8 fe9a 	bl	8000a20 <__aeabi_dcmpeq>
 8007cec:	2800      	cmp	r0, #0
 8007cee:	d09a      	beq.n	8007c26 <_dtoa_r+0x616>
 8007cf0:	e7cb      	b.n	8007c8a <_dtoa_r+0x67a>
 8007cf2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007cf4:	2a00      	cmp	r2, #0
 8007cf6:	f000 808b 	beq.w	8007e10 <_dtoa_r+0x800>
 8007cfa:	9a06      	ldr	r2, [sp, #24]
 8007cfc:	2a01      	cmp	r2, #1
 8007cfe:	dc6e      	bgt.n	8007dde <_dtoa_r+0x7ce>
 8007d00:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007d02:	2a00      	cmp	r2, #0
 8007d04:	d067      	beq.n	8007dd6 <_dtoa_r+0x7c6>
 8007d06:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007d0a:	9f07      	ldr	r7, [sp, #28]
 8007d0c:	9d05      	ldr	r5, [sp, #20]
 8007d0e:	9a05      	ldr	r2, [sp, #20]
 8007d10:	2101      	movs	r1, #1
 8007d12:	441a      	add	r2, r3
 8007d14:	4620      	mov	r0, r4
 8007d16:	9205      	str	r2, [sp, #20]
 8007d18:	4498      	add	r8, r3
 8007d1a:	f000 fd04 	bl	8008726 <__i2b>
 8007d1e:	4606      	mov	r6, r0
 8007d20:	2d00      	cmp	r5, #0
 8007d22:	dd0c      	ble.n	8007d3e <_dtoa_r+0x72e>
 8007d24:	f1b8 0f00 	cmp.w	r8, #0
 8007d28:	dd09      	ble.n	8007d3e <_dtoa_r+0x72e>
 8007d2a:	4545      	cmp	r5, r8
 8007d2c:	9a05      	ldr	r2, [sp, #20]
 8007d2e:	462b      	mov	r3, r5
 8007d30:	bfa8      	it	ge
 8007d32:	4643      	movge	r3, r8
 8007d34:	1ad2      	subs	r2, r2, r3
 8007d36:	9205      	str	r2, [sp, #20]
 8007d38:	1aed      	subs	r5, r5, r3
 8007d3a:	eba8 0803 	sub.w	r8, r8, r3
 8007d3e:	9b07      	ldr	r3, [sp, #28]
 8007d40:	b1eb      	cbz	r3, 8007d7e <_dtoa_r+0x76e>
 8007d42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d067      	beq.n	8007e18 <_dtoa_r+0x808>
 8007d48:	b18f      	cbz	r7, 8007d6e <_dtoa_r+0x75e>
 8007d4a:	4631      	mov	r1, r6
 8007d4c:	463a      	mov	r2, r7
 8007d4e:	4620      	mov	r0, r4
 8007d50:	f000 fd88 	bl	8008864 <__pow5mult>
 8007d54:	9a04      	ldr	r2, [sp, #16]
 8007d56:	4601      	mov	r1, r0
 8007d58:	4606      	mov	r6, r0
 8007d5a:	4620      	mov	r0, r4
 8007d5c:	f000 fcec 	bl	8008738 <__multiply>
 8007d60:	9904      	ldr	r1, [sp, #16]
 8007d62:	9008      	str	r0, [sp, #32]
 8007d64:	4620      	mov	r0, r4
 8007d66:	f000 fc3e 	bl	80085e6 <_Bfree>
 8007d6a:	9b08      	ldr	r3, [sp, #32]
 8007d6c:	9304      	str	r3, [sp, #16]
 8007d6e:	9b07      	ldr	r3, [sp, #28]
 8007d70:	1bda      	subs	r2, r3, r7
 8007d72:	d004      	beq.n	8007d7e <_dtoa_r+0x76e>
 8007d74:	9904      	ldr	r1, [sp, #16]
 8007d76:	4620      	mov	r0, r4
 8007d78:	f000 fd74 	bl	8008864 <__pow5mult>
 8007d7c:	9004      	str	r0, [sp, #16]
 8007d7e:	2101      	movs	r1, #1
 8007d80:	4620      	mov	r0, r4
 8007d82:	f000 fcd0 	bl	8008726 <__i2b>
 8007d86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d88:	4607      	mov	r7, r0
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	f000 81d0 	beq.w	8008130 <_dtoa_r+0xb20>
 8007d90:	461a      	mov	r2, r3
 8007d92:	4601      	mov	r1, r0
 8007d94:	4620      	mov	r0, r4
 8007d96:	f000 fd65 	bl	8008864 <__pow5mult>
 8007d9a:	9b06      	ldr	r3, [sp, #24]
 8007d9c:	2b01      	cmp	r3, #1
 8007d9e:	4607      	mov	r7, r0
 8007da0:	dc40      	bgt.n	8007e24 <_dtoa_r+0x814>
 8007da2:	9b00      	ldr	r3, [sp, #0]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d139      	bne.n	8007e1c <_dtoa_r+0x80c>
 8007da8:	9b01      	ldr	r3, [sp, #4]
 8007daa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d136      	bne.n	8007e20 <_dtoa_r+0x810>
 8007db2:	9b01      	ldr	r3, [sp, #4]
 8007db4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007db8:	0d1b      	lsrs	r3, r3, #20
 8007dba:	051b      	lsls	r3, r3, #20
 8007dbc:	b12b      	cbz	r3, 8007dca <_dtoa_r+0x7ba>
 8007dbe:	9b05      	ldr	r3, [sp, #20]
 8007dc0:	3301      	adds	r3, #1
 8007dc2:	9305      	str	r3, [sp, #20]
 8007dc4:	f108 0801 	add.w	r8, r8, #1
 8007dc8:	2301      	movs	r3, #1
 8007dca:	9307      	str	r3, [sp, #28]
 8007dcc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d12a      	bne.n	8007e28 <_dtoa_r+0x818>
 8007dd2:	2001      	movs	r0, #1
 8007dd4:	e030      	b.n	8007e38 <_dtoa_r+0x828>
 8007dd6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007dd8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007ddc:	e795      	b.n	8007d0a <_dtoa_r+0x6fa>
 8007dde:	9b07      	ldr	r3, [sp, #28]
 8007de0:	f109 37ff 	add.w	r7, r9, #4294967295
 8007de4:	42bb      	cmp	r3, r7
 8007de6:	bfbf      	itttt	lt
 8007de8:	9b07      	ldrlt	r3, [sp, #28]
 8007dea:	9707      	strlt	r7, [sp, #28]
 8007dec:	1afa      	sublt	r2, r7, r3
 8007dee:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007df0:	bfbb      	ittet	lt
 8007df2:	189b      	addlt	r3, r3, r2
 8007df4:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007df6:	1bdf      	subge	r7, r3, r7
 8007df8:	2700      	movlt	r7, #0
 8007dfa:	f1b9 0f00 	cmp.w	r9, #0
 8007dfe:	bfb5      	itete	lt
 8007e00:	9b05      	ldrlt	r3, [sp, #20]
 8007e02:	9d05      	ldrge	r5, [sp, #20]
 8007e04:	eba3 0509 	sublt.w	r5, r3, r9
 8007e08:	464b      	movge	r3, r9
 8007e0a:	bfb8      	it	lt
 8007e0c:	2300      	movlt	r3, #0
 8007e0e:	e77e      	b.n	8007d0e <_dtoa_r+0x6fe>
 8007e10:	9f07      	ldr	r7, [sp, #28]
 8007e12:	9d05      	ldr	r5, [sp, #20]
 8007e14:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8007e16:	e783      	b.n	8007d20 <_dtoa_r+0x710>
 8007e18:	9a07      	ldr	r2, [sp, #28]
 8007e1a:	e7ab      	b.n	8007d74 <_dtoa_r+0x764>
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	e7d4      	b.n	8007dca <_dtoa_r+0x7ba>
 8007e20:	9b00      	ldr	r3, [sp, #0]
 8007e22:	e7d2      	b.n	8007dca <_dtoa_r+0x7ba>
 8007e24:	2300      	movs	r3, #0
 8007e26:	9307      	str	r3, [sp, #28]
 8007e28:	693b      	ldr	r3, [r7, #16]
 8007e2a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8007e2e:	6918      	ldr	r0, [r3, #16]
 8007e30:	f000 fc2b 	bl	800868a <__hi0bits>
 8007e34:	f1c0 0020 	rsb	r0, r0, #32
 8007e38:	4440      	add	r0, r8
 8007e3a:	f010 001f 	ands.w	r0, r0, #31
 8007e3e:	d047      	beq.n	8007ed0 <_dtoa_r+0x8c0>
 8007e40:	f1c0 0320 	rsb	r3, r0, #32
 8007e44:	2b04      	cmp	r3, #4
 8007e46:	dd3b      	ble.n	8007ec0 <_dtoa_r+0x8b0>
 8007e48:	9b05      	ldr	r3, [sp, #20]
 8007e4a:	f1c0 001c 	rsb	r0, r0, #28
 8007e4e:	4403      	add	r3, r0
 8007e50:	9305      	str	r3, [sp, #20]
 8007e52:	4405      	add	r5, r0
 8007e54:	4480      	add	r8, r0
 8007e56:	9b05      	ldr	r3, [sp, #20]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	dd05      	ble.n	8007e68 <_dtoa_r+0x858>
 8007e5c:	461a      	mov	r2, r3
 8007e5e:	9904      	ldr	r1, [sp, #16]
 8007e60:	4620      	mov	r0, r4
 8007e62:	f000 fd4d 	bl	8008900 <__lshift>
 8007e66:	9004      	str	r0, [sp, #16]
 8007e68:	f1b8 0f00 	cmp.w	r8, #0
 8007e6c:	dd05      	ble.n	8007e7a <_dtoa_r+0x86a>
 8007e6e:	4639      	mov	r1, r7
 8007e70:	4642      	mov	r2, r8
 8007e72:	4620      	mov	r0, r4
 8007e74:	f000 fd44 	bl	8008900 <__lshift>
 8007e78:	4607      	mov	r7, r0
 8007e7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007e7c:	b353      	cbz	r3, 8007ed4 <_dtoa_r+0x8c4>
 8007e7e:	4639      	mov	r1, r7
 8007e80:	9804      	ldr	r0, [sp, #16]
 8007e82:	f000 fd91 	bl	80089a8 <__mcmp>
 8007e86:	2800      	cmp	r0, #0
 8007e88:	da24      	bge.n	8007ed4 <_dtoa_r+0x8c4>
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	220a      	movs	r2, #10
 8007e8e:	9904      	ldr	r1, [sp, #16]
 8007e90:	4620      	mov	r0, r4
 8007e92:	f000 fbbf 	bl	8008614 <__multadd>
 8007e96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e98:	9004      	str	r0, [sp, #16]
 8007e9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	f000 814d 	beq.w	800813e <_dtoa_r+0xb2e>
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	4631      	mov	r1, r6
 8007ea8:	220a      	movs	r2, #10
 8007eaa:	4620      	mov	r0, r4
 8007eac:	f000 fbb2 	bl	8008614 <__multadd>
 8007eb0:	9b02      	ldr	r3, [sp, #8]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	4606      	mov	r6, r0
 8007eb6:	dc4f      	bgt.n	8007f58 <_dtoa_r+0x948>
 8007eb8:	9b06      	ldr	r3, [sp, #24]
 8007eba:	2b02      	cmp	r3, #2
 8007ebc:	dd4c      	ble.n	8007f58 <_dtoa_r+0x948>
 8007ebe:	e011      	b.n	8007ee4 <_dtoa_r+0x8d4>
 8007ec0:	d0c9      	beq.n	8007e56 <_dtoa_r+0x846>
 8007ec2:	9a05      	ldr	r2, [sp, #20]
 8007ec4:	331c      	adds	r3, #28
 8007ec6:	441a      	add	r2, r3
 8007ec8:	9205      	str	r2, [sp, #20]
 8007eca:	441d      	add	r5, r3
 8007ecc:	4498      	add	r8, r3
 8007ece:	e7c2      	b.n	8007e56 <_dtoa_r+0x846>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	e7f6      	b.n	8007ec2 <_dtoa_r+0x8b2>
 8007ed4:	f1b9 0f00 	cmp.w	r9, #0
 8007ed8:	dc38      	bgt.n	8007f4c <_dtoa_r+0x93c>
 8007eda:	9b06      	ldr	r3, [sp, #24]
 8007edc:	2b02      	cmp	r3, #2
 8007ede:	dd35      	ble.n	8007f4c <_dtoa_r+0x93c>
 8007ee0:	f8cd 9008 	str.w	r9, [sp, #8]
 8007ee4:	9b02      	ldr	r3, [sp, #8]
 8007ee6:	b963      	cbnz	r3, 8007f02 <_dtoa_r+0x8f2>
 8007ee8:	4639      	mov	r1, r7
 8007eea:	2205      	movs	r2, #5
 8007eec:	4620      	mov	r0, r4
 8007eee:	f000 fb91 	bl	8008614 <__multadd>
 8007ef2:	4601      	mov	r1, r0
 8007ef4:	4607      	mov	r7, r0
 8007ef6:	9804      	ldr	r0, [sp, #16]
 8007ef8:	f000 fd56 	bl	80089a8 <__mcmp>
 8007efc:	2800      	cmp	r0, #0
 8007efe:	f73f adcc 	bgt.w	8007a9a <_dtoa_r+0x48a>
 8007f02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f04:	465d      	mov	r5, fp
 8007f06:	ea6f 0a03 	mvn.w	sl, r3
 8007f0a:	f04f 0900 	mov.w	r9, #0
 8007f0e:	4639      	mov	r1, r7
 8007f10:	4620      	mov	r0, r4
 8007f12:	f000 fb68 	bl	80085e6 <_Bfree>
 8007f16:	2e00      	cmp	r6, #0
 8007f18:	f43f aeb7 	beq.w	8007c8a <_dtoa_r+0x67a>
 8007f1c:	f1b9 0f00 	cmp.w	r9, #0
 8007f20:	d005      	beq.n	8007f2e <_dtoa_r+0x91e>
 8007f22:	45b1      	cmp	r9, r6
 8007f24:	d003      	beq.n	8007f2e <_dtoa_r+0x91e>
 8007f26:	4649      	mov	r1, r9
 8007f28:	4620      	mov	r0, r4
 8007f2a:	f000 fb5c 	bl	80085e6 <_Bfree>
 8007f2e:	4631      	mov	r1, r6
 8007f30:	4620      	mov	r0, r4
 8007f32:	f000 fb58 	bl	80085e6 <_Bfree>
 8007f36:	e6a8      	b.n	8007c8a <_dtoa_r+0x67a>
 8007f38:	2700      	movs	r7, #0
 8007f3a:	463e      	mov	r6, r7
 8007f3c:	e7e1      	b.n	8007f02 <_dtoa_r+0x8f2>
 8007f3e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007f42:	463e      	mov	r6, r7
 8007f44:	e5a9      	b.n	8007a9a <_dtoa_r+0x48a>
 8007f46:	bf00      	nop
 8007f48:	40240000 	.word	0x40240000
 8007f4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f4e:	f8cd 9008 	str.w	r9, [sp, #8]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	f000 80fa 	beq.w	800814c <_dtoa_r+0xb3c>
 8007f58:	2d00      	cmp	r5, #0
 8007f5a:	dd05      	ble.n	8007f68 <_dtoa_r+0x958>
 8007f5c:	4631      	mov	r1, r6
 8007f5e:	462a      	mov	r2, r5
 8007f60:	4620      	mov	r0, r4
 8007f62:	f000 fccd 	bl	8008900 <__lshift>
 8007f66:	4606      	mov	r6, r0
 8007f68:	9b07      	ldr	r3, [sp, #28]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d04c      	beq.n	8008008 <_dtoa_r+0x9f8>
 8007f6e:	6871      	ldr	r1, [r6, #4]
 8007f70:	4620      	mov	r0, r4
 8007f72:	f000 fb04 	bl	800857e <_Balloc>
 8007f76:	6932      	ldr	r2, [r6, #16]
 8007f78:	3202      	adds	r2, #2
 8007f7a:	4605      	mov	r5, r0
 8007f7c:	0092      	lsls	r2, r2, #2
 8007f7e:	f106 010c 	add.w	r1, r6, #12
 8007f82:	300c      	adds	r0, #12
 8007f84:	f000 faf0 	bl	8008568 <memcpy>
 8007f88:	2201      	movs	r2, #1
 8007f8a:	4629      	mov	r1, r5
 8007f8c:	4620      	mov	r0, r4
 8007f8e:	f000 fcb7 	bl	8008900 <__lshift>
 8007f92:	9b00      	ldr	r3, [sp, #0]
 8007f94:	f8cd b014 	str.w	fp, [sp, #20]
 8007f98:	f003 0301 	and.w	r3, r3, #1
 8007f9c:	46b1      	mov	r9, r6
 8007f9e:	9307      	str	r3, [sp, #28]
 8007fa0:	4606      	mov	r6, r0
 8007fa2:	4639      	mov	r1, r7
 8007fa4:	9804      	ldr	r0, [sp, #16]
 8007fa6:	f7ff faa7 	bl	80074f8 <quorem>
 8007faa:	4649      	mov	r1, r9
 8007fac:	4605      	mov	r5, r0
 8007fae:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007fb2:	9804      	ldr	r0, [sp, #16]
 8007fb4:	f000 fcf8 	bl	80089a8 <__mcmp>
 8007fb8:	4632      	mov	r2, r6
 8007fba:	9000      	str	r0, [sp, #0]
 8007fbc:	4639      	mov	r1, r7
 8007fbe:	4620      	mov	r0, r4
 8007fc0:	f000 fd0c 	bl	80089dc <__mdiff>
 8007fc4:	68c3      	ldr	r3, [r0, #12]
 8007fc6:	4602      	mov	r2, r0
 8007fc8:	bb03      	cbnz	r3, 800800c <_dtoa_r+0x9fc>
 8007fca:	4601      	mov	r1, r0
 8007fcc:	9008      	str	r0, [sp, #32]
 8007fce:	9804      	ldr	r0, [sp, #16]
 8007fd0:	f000 fcea 	bl	80089a8 <__mcmp>
 8007fd4:	9a08      	ldr	r2, [sp, #32]
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	4611      	mov	r1, r2
 8007fda:	4620      	mov	r0, r4
 8007fdc:	9308      	str	r3, [sp, #32]
 8007fde:	f000 fb02 	bl	80085e6 <_Bfree>
 8007fe2:	9b08      	ldr	r3, [sp, #32]
 8007fe4:	b9a3      	cbnz	r3, 8008010 <_dtoa_r+0xa00>
 8007fe6:	9a06      	ldr	r2, [sp, #24]
 8007fe8:	b992      	cbnz	r2, 8008010 <_dtoa_r+0xa00>
 8007fea:	9a07      	ldr	r2, [sp, #28]
 8007fec:	b982      	cbnz	r2, 8008010 <_dtoa_r+0xa00>
 8007fee:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007ff2:	d029      	beq.n	8008048 <_dtoa_r+0xa38>
 8007ff4:	9b00      	ldr	r3, [sp, #0]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	dd01      	ble.n	8007ffe <_dtoa_r+0x9ee>
 8007ffa:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8007ffe:	9b05      	ldr	r3, [sp, #20]
 8008000:	1c5d      	adds	r5, r3, #1
 8008002:	f883 8000 	strb.w	r8, [r3]
 8008006:	e782      	b.n	8007f0e <_dtoa_r+0x8fe>
 8008008:	4630      	mov	r0, r6
 800800a:	e7c2      	b.n	8007f92 <_dtoa_r+0x982>
 800800c:	2301      	movs	r3, #1
 800800e:	e7e3      	b.n	8007fd8 <_dtoa_r+0x9c8>
 8008010:	9a00      	ldr	r2, [sp, #0]
 8008012:	2a00      	cmp	r2, #0
 8008014:	db04      	blt.n	8008020 <_dtoa_r+0xa10>
 8008016:	d125      	bne.n	8008064 <_dtoa_r+0xa54>
 8008018:	9a06      	ldr	r2, [sp, #24]
 800801a:	bb1a      	cbnz	r2, 8008064 <_dtoa_r+0xa54>
 800801c:	9a07      	ldr	r2, [sp, #28]
 800801e:	bb0a      	cbnz	r2, 8008064 <_dtoa_r+0xa54>
 8008020:	2b00      	cmp	r3, #0
 8008022:	ddec      	ble.n	8007ffe <_dtoa_r+0x9ee>
 8008024:	2201      	movs	r2, #1
 8008026:	9904      	ldr	r1, [sp, #16]
 8008028:	4620      	mov	r0, r4
 800802a:	f000 fc69 	bl	8008900 <__lshift>
 800802e:	4639      	mov	r1, r7
 8008030:	9004      	str	r0, [sp, #16]
 8008032:	f000 fcb9 	bl	80089a8 <__mcmp>
 8008036:	2800      	cmp	r0, #0
 8008038:	dc03      	bgt.n	8008042 <_dtoa_r+0xa32>
 800803a:	d1e0      	bne.n	8007ffe <_dtoa_r+0x9ee>
 800803c:	f018 0f01 	tst.w	r8, #1
 8008040:	d0dd      	beq.n	8007ffe <_dtoa_r+0x9ee>
 8008042:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008046:	d1d8      	bne.n	8007ffa <_dtoa_r+0x9ea>
 8008048:	9b05      	ldr	r3, [sp, #20]
 800804a:	9a05      	ldr	r2, [sp, #20]
 800804c:	1c5d      	adds	r5, r3, #1
 800804e:	2339      	movs	r3, #57	; 0x39
 8008050:	7013      	strb	r3, [r2, #0]
 8008052:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008056:	2b39      	cmp	r3, #57	; 0x39
 8008058:	f105 32ff 	add.w	r2, r5, #4294967295
 800805c:	d04f      	beq.n	80080fe <_dtoa_r+0xaee>
 800805e:	3301      	adds	r3, #1
 8008060:	7013      	strb	r3, [r2, #0]
 8008062:	e754      	b.n	8007f0e <_dtoa_r+0x8fe>
 8008064:	9a05      	ldr	r2, [sp, #20]
 8008066:	2b00      	cmp	r3, #0
 8008068:	f102 0501 	add.w	r5, r2, #1
 800806c:	dd06      	ble.n	800807c <_dtoa_r+0xa6c>
 800806e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008072:	d0e9      	beq.n	8008048 <_dtoa_r+0xa38>
 8008074:	f108 0801 	add.w	r8, r8, #1
 8008078:	9b05      	ldr	r3, [sp, #20]
 800807a:	e7c2      	b.n	8008002 <_dtoa_r+0x9f2>
 800807c:	9a02      	ldr	r2, [sp, #8]
 800807e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8008082:	eba5 030b 	sub.w	r3, r5, fp
 8008086:	4293      	cmp	r3, r2
 8008088:	d021      	beq.n	80080ce <_dtoa_r+0xabe>
 800808a:	2300      	movs	r3, #0
 800808c:	220a      	movs	r2, #10
 800808e:	9904      	ldr	r1, [sp, #16]
 8008090:	4620      	mov	r0, r4
 8008092:	f000 fabf 	bl	8008614 <__multadd>
 8008096:	45b1      	cmp	r9, r6
 8008098:	9004      	str	r0, [sp, #16]
 800809a:	f04f 0300 	mov.w	r3, #0
 800809e:	f04f 020a 	mov.w	r2, #10
 80080a2:	4649      	mov	r1, r9
 80080a4:	4620      	mov	r0, r4
 80080a6:	d105      	bne.n	80080b4 <_dtoa_r+0xaa4>
 80080a8:	f000 fab4 	bl	8008614 <__multadd>
 80080ac:	4681      	mov	r9, r0
 80080ae:	4606      	mov	r6, r0
 80080b0:	9505      	str	r5, [sp, #20]
 80080b2:	e776      	b.n	8007fa2 <_dtoa_r+0x992>
 80080b4:	f000 faae 	bl	8008614 <__multadd>
 80080b8:	4631      	mov	r1, r6
 80080ba:	4681      	mov	r9, r0
 80080bc:	2300      	movs	r3, #0
 80080be:	220a      	movs	r2, #10
 80080c0:	4620      	mov	r0, r4
 80080c2:	f000 faa7 	bl	8008614 <__multadd>
 80080c6:	4606      	mov	r6, r0
 80080c8:	e7f2      	b.n	80080b0 <_dtoa_r+0xaa0>
 80080ca:	f04f 0900 	mov.w	r9, #0
 80080ce:	2201      	movs	r2, #1
 80080d0:	9904      	ldr	r1, [sp, #16]
 80080d2:	4620      	mov	r0, r4
 80080d4:	f000 fc14 	bl	8008900 <__lshift>
 80080d8:	4639      	mov	r1, r7
 80080da:	9004      	str	r0, [sp, #16]
 80080dc:	f000 fc64 	bl	80089a8 <__mcmp>
 80080e0:	2800      	cmp	r0, #0
 80080e2:	dcb6      	bgt.n	8008052 <_dtoa_r+0xa42>
 80080e4:	d102      	bne.n	80080ec <_dtoa_r+0xadc>
 80080e6:	f018 0f01 	tst.w	r8, #1
 80080ea:	d1b2      	bne.n	8008052 <_dtoa_r+0xa42>
 80080ec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80080f0:	2b30      	cmp	r3, #48	; 0x30
 80080f2:	f105 32ff 	add.w	r2, r5, #4294967295
 80080f6:	f47f af0a 	bne.w	8007f0e <_dtoa_r+0x8fe>
 80080fa:	4615      	mov	r5, r2
 80080fc:	e7f6      	b.n	80080ec <_dtoa_r+0xadc>
 80080fe:	4593      	cmp	fp, r2
 8008100:	d105      	bne.n	800810e <_dtoa_r+0xafe>
 8008102:	2331      	movs	r3, #49	; 0x31
 8008104:	f10a 0a01 	add.w	sl, sl, #1
 8008108:	f88b 3000 	strb.w	r3, [fp]
 800810c:	e6ff      	b.n	8007f0e <_dtoa_r+0x8fe>
 800810e:	4615      	mov	r5, r2
 8008110:	e79f      	b.n	8008052 <_dtoa_r+0xa42>
 8008112:	f8df b064 	ldr.w	fp, [pc, #100]	; 8008178 <_dtoa_r+0xb68>
 8008116:	e007      	b.n	8008128 <_dtoa_r+0xb18>
 8008118:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800811a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800817c <_dtoa_r+0xb6c>
 800811e:	b11b      	cbz	r3, 8008128 <_dtoa_r+0xb18>
 8008120:	f10b 0308 	add.w	r3, fp, #8
 8008124:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008126:	6013      	str	r3, [r2, #0]
 8008128:	4658      	mov	r0, fp
 800812a:	b017      	add	sp, #92	; 0x5c
 800812c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008130:	9b06      	ldr	r3, [sp, #24]
 8008132:	2b01      	cmp	r3, #1
 8008134:	f77f ae35 	ble.w	8007da2 <_dtoa_r+0x792>
 8008138:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800813a:	9307      	str	r3, [sp, #28]
 800813c:	e649      	b.n	8007dd2 <_dtoa_r+0x7c2>
 800813e:	9b02      	ldr	r3, [sp, #8]
 8008140:	2b00      	cmp	r3, #0
 8008142:	dc03      	bgt.n	800814c <_dtoa_r+0xb3c>
 8008144:	9b06      	ldr	r3, [sp, #24]
 8008146:	2b02      	cmp	r3, #2
 8008148:	f73f aecc 	bgt.w	8007ee4 <_dtoa_r+0x8d4>
 800814c:	465d      	mov	r5, fp
 800814e:	4639      	mov	r1, r7
 8008150:	9804      	ldr	r0, [sp, #16]
 8008152:	f7ff f9d1 	bl	80074f8 <quorem>
 8008156:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800815a:	f805 8b01 	strb.w	r8, [r5], #1
 800815e:	9a02      	ldr	r2, [sp, #8]
 8008160:	eba5 030b 	sub.w	r3, r5, fp
 8008164:	429a      	cmp	r2, r3
 8008166:	ddb0      	ble.n	80080ca <_dtoa_r+0xaba>
 8008168:	2300      	movs	r3, #0
 800816a:	220a      	movs	r2, #10
 800816c:	9904      	ldr	r1, [sp, #16]
 800816e:	4620      	mov	r0, r4
 8008170:	f000 fa50 	bl	8008614 <__multadd>
 8008174:	9004      	str	r0, [sp, #16]
 8008176:	e7ea      	b.n	800814e <_dtoa_r+0xb3e>
 8008178:	08009c4c 	.word	0x08009c4c
 800817c:	08009c4e 	.word	0x08009c4e

08008180 <__sflush_r>:
 8008180:	898a      	ldrh	r2, [r1, #12]
 8008182:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008186:	4605      	mov	r5, r0
 8008188:	0710      	lsls	r0, r2, #28
 800818a:	460c      	mov	r4, r1
 800818c:	d458      	bmi.n	8008240 <__sflush_r+0xc0>
 800818e:	684b      	ldr	r3, [r1, #4]
 8008190:	2b00      	cmp	r3, #0
 8008192:	dc05      	bgt.n	80081a0 <__sflush_r+0x20>
 8008194:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008196:	2b00      	cmp	r3, #0
 8008198:	dc02      	bgt.n	80081a0 <__sflush_r+0x20>
 800819a:	2000      	movs	r0, #0
 800819c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80081a2:	2e00      	cmp	r6, #0
 80081a4:	d0f9      	beq.n	800819a <__sflush_r+0x1a>
 80081a6:	2300      	movs	r3, #0
 80081a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80081ac:	682f      	ldr	r7, [r5, #0]
 80081ae:	6a21      	ldr	r1, [r4, #32]
 80081b0:	602b      	str	r3, [r5, #0]
 80081b2:	d032      	beq.n	800821a <__sflush_r+0x9a>
 80081b4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80081b6:	89a3      	ldrh	r3, [r4, #12]
 80081b8:	075a      	lsls	r2, r3, #29
 80081ba:	d505      	bpl.n	80081c8 <__sflush_r+0x48>
 80081bc:	6863      	ldr	r3, [r4, #4]
 80081be:	1ac0      	subs	r0, r0, r3
 80081c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80081c2:	b10b      	cbz	r3, 80081c8 <__sflush_r+0x48>
 80081c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80081c6:	1ac0      	subs	r0, r0, r3
 80081c8:	2300      	movs	r3, #0
 80081ca:	4602      	mov	r2, r0
 80081cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80081ce:	6a21      	ldr	r1, [r4, #32]
 80081d0:	4628      	mov	r0, r5
 80081d2:	47b0      	blx	r6
 80081d4:	1c43      	adds	r3, r0, #1
 80081d6:	89a3      	ldrh	r3, [r4, #12]
 80081d8:	d106      	bne.n	80081e8 <__sflush_r+0x68>
 80081da:	6829      	ldr	r1, [r5, #0]
 80081dc:	291d      	cmp	r1, #29
 80081de:	d848      	bhi.n	8008272 <__sflush_r+0xf2>
 80081e0:	4a29      	ldr	r2, [pc, #164]	; (8008288 <__sflush_r+0x108>)
 80081e2:	40ca      	lsrs	r2, r1
 80081e4:	07d6      	lsls	r6, r2, #31
 80081e6:	d544      	bpl.n	8008272 <__sflush_r+0xf2>
 80081e8:	2200      	movs	r2, #0
 80081ea:	6062      	str	r2, [r4, #4]
 80081ec:	04d9      	lsls	r1, r3, #19
 80081ee:	6922      	ldr	r2, [r4, #16]
 80081f0:	6022      	str	r2, [r4, #0]
 80081f2:	d504      	bpl.n	80081fe <__sflush_r+0x7e>
 80081f4:	1c42      	adds	r2, r0, #1
 80081f6:	d101      	bne.n	80081fc <__sflush_r+0x7c>
 80081f8:	682b      	ldr	r3, [r5, #0]
 80081fa:	b903      	cbnz	r3, 80081fe <__sflush_r+0x7e>
 80081fc:	6560      	str	r0, [r4, #84]	; 0x54
 80081fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008200:	602f      	str	r7, [r5, #0]
 8008202:	2900      	cmp	r1, #0
 8008204:	d0c9      	beq.n	800819a <__sflush_r+0x1a>
 8008206:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800820a:	4299      	cmp	r1, r3
 800820c:	d002      	beq.n	8008214 <__sflush_r+0x94>
 800820e:	4628      	mov	r0, r5
 8008210:	f000 fc9e 	bl	8008b50 <_free_r>
 8008214:	2000      	movs	r0, #0
 8008216:	6360      	str	r0, [r4, #52]	; 0x34
 8008218:	e7c0      	b.n	800819c <__sflush_r+0x1c>
 800821a:	2301      	movs	r3, #1
 800821c:	4628      	mov	r0, r5
 800821e:	47b0      	blx	r6
 8008220:	1c41      	adds	r1, r0, #1
 8008222:	d1c8      	bne.n	80081b6 <__sflush_r+0x36>
 8008224:	682b      	ldr	r3, [r5, #0]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d0c5      	beq.n	80081b6 <__sflush_r+0x36>
 800822a:	2b1d      	cmp	r3, #29
 800822c:	d001      	beq.n	8008232 <__sflush_r+0xb2>
 800822e:	2b16      	cmp	r3, #22
 8008230:	d101      	bne.n	8008236 <__sflush_r+0xb6>
 8008232:	602f      	str	r7, [r5, #0]
 8008234:	e7b1      	b.n	800819a <__sflush_r+0x1a>
 8008236:	89a3      	ldrh	r3, [r4, #12]
 8008238:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800823c:	81a3      	strh	r3, [r4, #12]
 800823e:	e7ad      	b.n	800819c <__sflush_r+0x1c>
 8008240:	690f      	ldr	r7, [r1, #16]
 8008242:	2f00      	cmp	r7, #0
 8008244:	d0a9      	beq.n	800819a <__sflush_r+0x1a>
 8008246:	0793      	lsls	r3, r2, #30
 8008248:	680e      	ldr	r6, [r1, #0]
 800824a:	bf08      	it	eq
 800824c:	694b      	ldreq	r3, [r1, #20]
 800824e:	600f      	str	r7, [r1, #0]
 8008250:	bf18      	it	ne
 8008252:	2300      	movne	r3, #0
 8008254:	eba6 0807 	sub.w	r8, r6, r7
 8008258:	608b      	str	r3, [r1, #8]
 800825a:	f1b8 0f00 	cmp.w	r8, #0
 800825e:	dd9c      	ble.n	800819a <__sflush_r+0x1a>
 8008260:	4643      	mov	r3, r8
 8008262:	463a      	mov	r2, r7
 8008264:	6a21      	ldr	r1, [r4, #32]
 8008266:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008268:	4628      	mov	r0, r5
 800826a:	47b0      	blx	r6
 800826c:	2800      	cmp	r0, #0
 800826e:	dc06      	bgt.n	800827e <__sflush_r+0xfe>
 8008270:	89a3      	ldrh	r3, [r4, #12]
 8008272:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008276:	81a3      	strh	r3, [r4, #12]
 8008278:	f04f 30ff 	mov.w	r0, #4294967295
 800827c:	e78e      	b.n	800819c <__sflush_r+0x1c>
 800827e:	4407      	add	r7, r0
 8008280:	eba8 0800 	sub.w	r8, r8, r0
 8008284:	e7e9      	b.n	800825a <__sflush_r+0xda>
 8008286:	bf00      	nop
 8008288:	20400001 	.word	0x20400001

0800828c <_fflush_r>:
 800828c:	b538      	push	{r3, r4, r5, lr}
 800828e:	690b      	ldr	r3, [r1, #16]
 8008290:	4605      	mov	r5, r0
 8008292:	460c      	mov	r4, r1
 8008294:	b1db      	cbz	r3, 80082ce <_fflush_r+0x42>
 8008296:	b118      	cbz	r0, 80082a0 <_fflush_r+0x14>
 8008298:	6983      	ldr	r3, [r0, #24]
 800829a:	b90b      	cbnz	r3, 80082a0 <_fflush_r+0x14>
 800829c:	f000 f860 	bl	8008360 <__sinit>
 80082a0:	4b0c      	ldr	r3, [pc, #48]	; (80082d4 <_fflush_r+0x48>)
 80082a2:	429c      	cmp	r4, r3
 80082a4:	d109      	bne.n	80082ba <_fflush_r+0x2e>
 80082a6:	686c      	ldr	r4, [r5, #4]
 80082a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082ac:	b17b      	cbz	r3, 80082ce <_fflush_r+0x42>
 80082ae:	4621      	mov	r1, r4
 80082b0:	4628      	mov	r0, r5
 80082b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082b6:	f7ff bf63 	b.w	8008180 <__sflush_r>
 80082ba:	4b07      	ldr	r3, [pc, #28]	; (80082d8 <_fflush_r+0x4c>)
 80082bc:	429c      	cmp	r4, r3
 80082be:	d101      	bne.n	80082c4 <_fflush_r+0x38>
 80082c0:	68ac      	ldr	r4, [r5, #8]
 80082c2:	e7f1      	b.n	80082a8 <_fflush_r+0x1c>
 80082c4:	4b05      	ldr	r3, [pc, #20]	; (80082dc <_fflush_r+0x50>)
 80082c6:	429c      	cmp	r4, r3
 80082c8:	bf08      	it	eq
 80082ca:	68ec      	ldreq	r4, [r5, #12]
 80082cc:	e7ec      	b.n	80082a8 <_fflush_r+0x1c>
 80082ce:	2000      	movs	r0, #0
 80082d0:	bd38      	pop	{r3, r4, r5, pc}
 80082d2:	bf00      	nop
 80082d4:	08009c7c 	.word	0x08009c7c
 80082d8:	08009c9c 	.word	0x08009c9c
 80082dc:	08009c5c 	.word	0x08009c5c

080082e0 <std>:
 80082e0:	2300      	movs	r3, #0
 80082e2:	b510      	push	{r4, lr}
 80082e4:	4604      	mov	r4, r0
 80082e6:	e9c0 3300 	strd	r3, r3, [r0]
 80082ea:	6083      	str	r3, [r0, #8]
 80082ec:	8181      	strh	r1, [r0, #12]
 80082ee:	6643      	str	r3, [r0, #100]	; 0x64
 80082f0:	81c2      	strh	r2, [r0, #14]
 80082f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80082f6:	6183      	str	r3, [r0, #24]
 80082f8:	4619      	mov	r1, r3
 80082fa:	2208      	movs	r2, #8
 80082fc:	305c      	adds	r0, #92	; 0x5c
 80082fe:	f7fe fbcf 	bl	8006aa0 <memset>
 8008302:	4b05      	ldr	r3, [pc, #20]	; (8008318 <std+0x38>)
 8008304:	6263      	str	r3, [r4, #36]	; 0x24
 8008306:	4b05      	ldr	r3, [pc, #20]	; (800831c <std+0x3c>)
 8008308:	62a3      	str	r3, [r4, #40]	; 0x28
 800830a:	4b05      	ldr	r3, [pc, #20]	; (8008320 <std+0x40>)
 800830c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800830e:	4b05      	ldr	r3, [pc, #20]	; (8008324 <std+0x44>)
 8008310:	6224      	str	r4, [r4, #32]
 8008312:	6323      	str	r3, [r4, #48]	; 0x30
 8008314:	bd10      	pop	{r4, pc}
 8008316:	bf00      	nop
 8008318:	08008cc1 	.word	0x08008cc1
 800831c:	08008ce3 	.word	0x08008ce3
 8008320:	08008d1b 	.word	0x08008d1b
 8008324:	08008d3f 	.word	0x08008d3f

08008328 <_cleanup_r>:
 8008328:	4901      	ldr	r1, [pc, #4]	; (8008330 <_cleanup_r+0x8>)
 800832a:	f000 b885 	b.w	8008438 <_fwalk_reent>
 800832e:	bf00      	nop
 8008330:	0800828d 	.word	0x0800828d

08008334 <__sfmoreglue>:
 8008334:	b570      	push	{r4, r5, r6, lr}
 8008336:	1e4a      	subs	r2, r1, #1
 8008338:	2568      	movs	r5, #104	; 0x68
 800833a:	4355      	muls	r5, r2
 800833c:	460e      	mov	r6, r1
 800833e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008342:	f000 fc53 	bl	8008bec <_malloc_r>
 8008346:	4604      	mov	r4, r0
 8008348:	b140      	cbz	r0, 800835c <__sfmoreglue+0x28>
 800834a:	2100      	movs	r1, #0
 800834c:	e9c0 1600 	strd	r1, r6, [r0]
 8008350:	300c      	adds	r0, #12
 8008352:	60a0      	str	r0, [r4, #8]
 8008354:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008358:	f7fe fba2 	bl	8006aa0 <memset>
 800835c:	4620      	mov	r0, r4
 800835e:	bd70      	pop	{r4, r5, r6, pc}

08008360 <__sinit>:
 8008360:	6983      	ldr	r3, [r0, #24]
 8008362:	b510      	push	{r4, lr}
 8008364:	4604      	mov	r4, r0
 8008366:	bb33      	cbnz	r3, 80083b6 <__sinit+0x56>
 8008368:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800836c:	6503      	str	r3, [r0, #80]	; 0x50
 800836e:	4b12      	ldr	r3, [pc, #72]	; (80083b8 <__sinit+0x58>)
 8008370:	4a12      	ldr	r2, [pc, #72]	; (80083bc <__sinit+0x5c>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	6282      	str	r2, [r0, #40]	; 0x28
 8008376:	4298      	cmp	r0, r3
 8008378:	bf04      	itt	eq
 800837a:	2301      	moveq	r3, #1
 800837c:	6183      	streq	r3, [r0, #24]
 800837e:	f000 f81f 	bl	80083c0 <__sfp>
 8008382:	6060      	str	r0, [r4, #4]
 8008384:	4620      	mov	r0, r4
 8008386:	f000 f81b 	bl	80083c0 <__sfp>
 800838a:	60a0      	str	r0, [r4, #8]
 800838c:	4620      	mov	r0, r4
 800838e:	f000 f817 	bl	80083c0 <__sfp>
 8008392:	2200      	movs	r2, #0
 8008394:	60e0      	str	r0, [r4, #12]
 8008396:	2104      	movs	r1, #4
 8008398:	6860      	ldr	r0, [r4, #4]
 800839a:	f7ff ffa1 	bl	80082e0 <std>
 800839e:	2201      	movs	r2, #1
 80083a0:	2109      	movs	r1, #9
 80083a2:	68a0      	ldr	r0, [r4, #8]
 80083a4:	f7ff ff9c 	bl	80082e0 <std>
 80083a8:	2202      	movs	r2, #2
 80083aa:	2112      	movs	r1, #18
 80083ac:	68e0      	ldr	r0, [r4, #12]
 80083ae:	f7ff ff97 	bl	80082e0 <std>
 80083b2:	2301      	movs	r3, #1
 80083b4:	61a3      	str	r3, [r4, #24]
 80083b6:	bd10      	pop	{r4, pc}
 80083b8:	08009c38 	.word	0x08009c38
 80083bc:	08008329 	.word	0x08008329

080083c0 <__sfp>:
 80083c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083c2:	4b1b      	ldr	r3, [pc, #108]	; (8008430 <__sfp+0x70>)
 80083c4:	681e      	ldr	r6, [r3, #0]
 80083c6:	69b3      	ldr	r3, [r6, #24]
 80083c8:	4607      	mov	r7, r0
 80083ca:	b913      	cbnz	r3, 80083d2 <__sfp+0x12>
 80083cc:	4630      	mov	r0, r6
 80083ce:	f7ff ffc7 	bl	8008360 <__sinit>
 80083d2:	3648      	adds	r6, #72	; 0x48
 80083d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80083d8:	3b01      	subs	r3, #1
 80083da:	d503      	bpl.n	80083e4 <__sfp+0x24>
 80083dc:	6833      	ldr	r3, [r6, #0]
 80083de:	b133      	cbz	r3, 80083ee <__sfp+0x2e>
 80083e0:	6836      	ldr	r6, [r6, #0]
 80083e2:	e7f7      	b.n	80083d4 <__sfp+0x14>
 80083e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80083e8:	b16d      	cbz	r5, 8008406 <__sfp+0x46>
 80083ea:	3468      	adds	r4, #104	; 0x68
 80083ec:	e7f4      	b.n	80083d8 <__sfp+0x18>
 80083ee:	2104      	movs	r1, #4
 80083f0:	4638      	mov	r0, r7
 80083f2:	f7ff ff9f 	bl	8008334 <__sfmoreglue>
 80083f6:	6030      	str	r0, [r6, #0]
 80083f8:	2800      	cmp	r0, #0
 80083fa:	d1f1      	bne.n	80083e0 <__sfp+0x20>
 80083fc:	230c      	movs	r3, #12
 80083fe:	603b      	str	r3, [r7, #0]
 8008400:	4604      	mov	r4, r0
 8008402:	4620      	mov	r0, r4
 8008404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008406:	4b0b      	ldr	r3, [pc, #44]	; (8008434 <__sfp+0x74>)
 8008408:	6665      	str	r5, [r4, #100]	; 0x64
 800840a:	e9c4 5500 	strd	r5, r5, [r4]
 800840e:	60a5      	str	r5, [r4, #8]
 8008410:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8008414:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8008418:	2208      	movs	r2, #8
 800841a:	4629      	mov	r1, r5
 800841c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008420:	f7fe fb3e 	bl	8006aa0 <memset>
 8008424:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008428:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800842c:	e7e9      	b.n	8008402 <__sfp+0x42>
 800842e:	bf00      	nop
 8008430:	08009c38 	.word	0x08009c38
 8008434:	ffff0001 	.word	0xffff0001

08008438 <_fwalk_reent>:
 8008438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800843c:	4680      	mov	r8, r0
 800843e:	4689      	mov	r9, r1
 8008440:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008444:	2600      	movs	r6, #0
 8008446:	b914      	cbnz	r4, 800844e <_fwalk_reent+0x16>
 8008448:	4630      	mov	r0, r6
 800844a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800844e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8008452:	3f01      	subs	r7, #1
 8008454:	d501      	bpl.n	800845a <_fwalk_reent+0x22>
 8008456:	6824      	ldr	r4, [r4, #0]
 8008458:	e7f5      	b.n	8008446 <_fwalk_reent+0xe>
 800845a:	89ab      	ldrh	r3, [r5, #12]
 800845c:	2b01      	cmp	r3, #1
 800845e:	d907      	bls.n	8008470 <_fwalk_reent+0x38>
 8008460:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008464:	3301      	adds	r3, #1
 8008466:	d003      	beq.n	8008470 <_fwalk_reent+0x38>
 8008468:	4629      	mov	r1, r5
 800846a:	4640      	mov	r0, r8
 800846c:	47c8      	blx	r9
 800846e:	4306      	orrs	r6, r0
 8008470:	3568      	adds	r5, #104	; 0x68
 8008472:	e7ee      	b.n	8008452 <_fwalk_reent+0x1a>

08008474 <_localeconv_r>:
 8008474:	4b04      	ldr	r3, [pc, #16]	; (8008488 <_localeconv_r+0x14>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	6a18      	ldr	r0, [r3, #32]
 800847a:	4b04      	ldr	r3, [pc, #16]	; (800848c <_localeconv_r+0x18>)
 800847c:	2800      	cmp	r0, #0
 800847e:	bf08      	it	eq
 8008480:	4618      	moveq	r0, r3
 8008482:	30f0      	adds	r0, #240	; 0xf0
 8008484:	4770      	bx	lr
 8008486:	bf00      	nop
 8008488:	20000014 	.word	0x20000014
 800848c:	20000078 	.word	0x20000078

08008490 <__swhatbuf_r>:
 8008490:	b570      	push	{r4, r5, r6, lr}
 8008492:	460e      	mov	r6, r1
 8008494:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008498:	2900      	cmp	r1, #0
 800849a:	b096      	sub	sp, #88	; 0x58
 800849c:	4614      	mov	r4, r2
 800849e:	461d      	mov	r5, r3
 80084a0:	da07      	bge.n	80084b2 <__swhatbuf_r+0x22>
 80084a2:	2300      	movs	r3, #0
 80084a4:	602b      	str	r3, [r5, #0]
 80084a6:	89b3      	ldrh	r3, [r6, #12]
 80084a8:	061a      	lsls	r2, r3, #24
 80084aa:	d410      	bmi.n	80084ce <__swhatbuf_r+0x3e>
 80084ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084b0:	e00e      	b.n	80084d0 <__swhatbuf_r+0x40>
 80084b2:	466a      	mov	r2, sp
 80084b4:	f000 fc6a 	bl	8008d8c <_fstat_r>
 80084b8:	2800      	cmp	r0, #0
 80084ba:	dbf2      	blt.n	80084a2 <__swhatbuf_r+0x12>
 80084bc:	9a01      	ldr	r2, [sp, #4]
 80084be:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80084c2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80084c6:	425a      	negs	r2, r3
 80084c8:	415a      	adcs	r2, r3
 80084ca:	602a      	str	r2, [r5, #0]
 80084cc:	e7ee      	b.n	80084ac <__swhatbuf_r+0x1c>
 80084ce:	2340      	movs	r3, #64	; 0x40
 80084d0:	2000      	movs	r0, #0
 80084d2:	6023      	str	r3, [r4, #0]
 80084d4:	b016      	add	sp, #88	; 0x58
 80084d6:	bd70      	pop	{r4, r5, r6, pc}

080084d8 <__smakebuf_r>:
 80084d8:	898b      	ldrh	r3, [r1, #12]
 80084da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80084dc:	079d      	lsls	r5, r3, #30
 80084de:	4606      	mov	r6, r0
 80084e0:	460c      	mov	r4, r1
 80084e2:	d507      	bpl.n	80084f4 <__smakebuf_r+0x1c>
 80084e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80084e8:	6023      	str	r3, [r4, #0]
 80084ea:	6123      	str	r3, [r4, #16]
 80084ec:	2301      	movs	r3, #1
 80084ee:	6163      	str	r3, [r4, #20]
 80084f0:	b002      	add	sp, #8
 80084f2:	bd70      	pop	{r4, r5, r6, pc}
 80084f4:	ab01      	add	r3, sp, #4
 80084f6:	466a      	mov	r2, sp
 80084f8:	f7ff ffca 	bl	8008490 <__swhatbuf_r>
 80084fc:	9900      	ldr	r1, [sp, #0]
 80084fe:	4605      	mov	r5, r0
 8008500:	4630      	mov	r0, r6
 8008502:	f000 fb73 	bl	8008bec <_malloc_r>
 8008506:	b948      	cbnz	r0, 800851c <__smakebuf_r+0x44>
 8008508:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800850c:	059a      	lsls	r2, r3, #22
 800850e:	d4ef      	bmi.n	80084f0 <__smakebuf_r+0x18>
 8008510:	f023 0303 	bic.w	r3, r3, #3
 8008514:	f043 0302 	orr.w	r3, r3, #2
 8008518:	81a3      	strh	r3, [r4, #12]
 800851a:	e7e3      	b.n	80084e4 <__smakebuf_r+0xc>
 800851c:	4b0d      	ldr	r3, [pc, #52]	; (8008554 <__smakebuf_r+0x7c>)
 800851e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008520:	89a3      	ldrh	r3, [r4, #12]
 8008522:	6020      	str	r0, [r4, #0]
 8008524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008528:	81a3      	strh	r3, [r4, #12]
 800852a:	9b00      	ldr	r3, [sp, #0]
 800852c:	6163      	str	r3, [r4, #20]
 800852e:	9b01      	ldr	r3, [sp, #4]
 8008530:	6120      	str	r0, [r4, #16]
 8008532:	b15b      	cbz	r3, 800854c <__smakebuf_r+0x74>
 8008534:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008538:	4630      	mov	r0, r6
 800853a:	f000 fc39 	bl	8008db0 <_isatty_r>
 800853e:	b128      	cbz	r0, 800854c <__smakebuf_r+0x74>
 8008540:	89a3      	ldrh	r3, [r4, #12]
 8008542:	f023 0303 	bic.w	r3, r3, #3
 8008546:	f043 0301 	orr.w	r3, r3, #1
 800854a:	81a3      	strh	r3, [r4, #12]
 800854c:	89a3      	ldrh	r3, [r4, #12]
 800854e:	431d      	orrs	r5, r3
 8008550:	81a5      	strh	r5, [r4, #12]
 8008552:	e7cd      	b.n	80084f0 <__smakebuf_r+0x18>
 8008554:	08008329 	.word	0x08008329

08008558 <malloc>:
 8008558:	4b02      	ldr	r3, [pc, #8]	; (8008564 <malloc+0xc>)
 800855a:	4601      	mov	r1, r0
 800855c:	6818      	ldr	r0, [r3, #0]
 800855e:	f000 bb45 	b.w	8008bec <_malloc_r>
 8008562:	bf00      	nop
 8008564:	20000014 	.word	0x20000014

08008568 <memcpy>:
 8008568:	b510      	push	{r4, lr}
 800856a:	1e43      	subs	r3, r0, #1
 800856c:	440a      	add	r2, r1
 800856e:	4291      	cmp	r1, r2
 8008570:	d100      	bne.n	8008574 <memcpy+0xc>
 8008572:	bd10      	pop	{r4, pc}
 8008574:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008578:	f803 4f01 	strb.w	r4, [r3, #1]!
 800857c:	e7f7      	b.n	800856e <memcpy+0x6>

0800857e <_Balloc>:
 800857e:	b570      	push	{r4, r5, r6, lr}
 8008580:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008582:	4604      	mov	r4, r0
 8008584:	460e      	mov	r6, r1
 8008586:	b93d      	cbnz	r5, 8008598 <_Balloc+0x1a>
 8008588:	2010      	movs	r0, #16
 800858a:	f7ff ffe5 	bl	8008558 <malloc>
 800858e:	6260      	str	r0, [r4, #36]	; 0x24
 8008590:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008594:	6005      	str	r5, [r0, #0]
 8008596:	60c5      	str	r5, [r0, #12]
 8008598:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800859a:	68eb      	ldr	r3, [r5, #12]
 800859c:	b183      	cbz	r3, 80085c0 <_Balloc+0x42>
 800859e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085a0:	68db      	ldr	r3, [r3, #12]
 80085a2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80085a6:	b9b8      	cbnz	r0, 80085d8 <_Balloc+0x5a>
 80085a8:	2101      	movs	r1, #1
 80085aa:	fa01 f506 	lsl.w	r5, r1, r6
 80085ae:	1d6a      	adds	r2, r5, #5
 80085b0:	0092      	lsls	r2, r2, #2
 80085b2:	4620      	mov	r0, r4
 80085b4:	f000 fabe 	bl	8008b34 <_calloc_r>
 80085b8:	b160      	cbz	r0, 80085d4 <_Balloc+0x56>
 80085ba:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80085be:	e00e      	b.n	80085de <_Balloc+0x60>
 80085c0:	2221      	movs	r2, #33	; 0x21
 80085c2:	2104      	movs	r1, #4
 80085c4:	4620      	mov	r0, r4
 80085c6:	f000 fab5 	bl	8008b34 <_calloc_r>
 80085ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085cc:	60e8      	str	r0, [r5, #12]
 80085ce:	68db      	ldr	r3, [r3, #12]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d1e4      	bne.n	800859e <_Balloc+0x20>
 80085d4:	2000      	movs	r0, #0
 80085d6:	bd70      	pop	{r4, r5, r6, pc}
 80085d8:	6802      	ldr	r2, [r0, #0]
 80085da:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80085de:	2300      	movs	r3, #0
 80085e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80085e4:	e7f7      	b.n	80085d6 <_Balloc+0x58>

080085e6 <_Bfree>:
 80085e6:	b570      	push	{r4, r5, r6, lr}
 80085e8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80085ea:	4606      	mov	r6, r0
 80085ec:	460d      	mov	r5, r1
 80085ee:	b93c      	cbnz	r4, 8008600 <_Bfree+0x1a>
 80085f0:	2010      	movs	r0, #16
 80085f2:	f7ff ffb1 	bl	8008558 <malloc>
 80085f6:	6270      	str	r0, [r6, #36]	; 0x24
 80085f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80085fc:	6004      	str	r4, [r0, #0]
 80085fe:	60c4      	str	r4, [r0, #12]
 8008600:	b13d      	cbz	r5, 8008612 <_Bfree+0x2c>
 8008602:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008604:	686a      	ldr	r2, [r5, #4]
 8008606:	68db      	ldr	r3, [r3, #12]
 8008608:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800860c:	6029      	str	r1, [r5, #0]
 800860e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008612:	bd70      	pop	{r4, r5, r6, pc}

08008614 <__multadd>:
 8008614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008618:	690d      	ldr	r5, [r1, #16]
 800861a:	461f      	mov	r7, r3
 800861c:	4606      	mov	r6, r0
 800861e:	460c      	mov	r4, r1
 8008620:	f101 0c14 	add.w	ip, r1, #20
 8008624:	2300      	movs	r3, #0
 8008626:	f8dc 0000 	ldr.w	r0, [ip]
 800862a:	b281      	uxth	r1, r0
 800862c:	fb02 7101 	mla	r1, r2, r1, r7
 8008630:	0c0f      	lsrs	r7, r1, #16
 8008632:	0c00      	lsrs	r0, r0, #16
 8008634:	fb02 7000 	mla	r0, r2, r0, r7
 8008638:	b289      	uxth	r1, r1
 800863a:	3301      	adds	r3, #1
 800863c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008640:	429d      	cmp	r5, r3
 8008642:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008646:	f84c 1b04 	str.w	r1, [ip], #4
 800864a:	dcec      	bgt.n	8008626 <__multadd+0x12>
 800864c:	b1d7      	cbz	r7, 8008684 <__multadd+0x70>
 800864e:	68a3      	ldr	r3, [r4, #8]
 8008650:	42ab      	cmp	r3, r5
 8008652:	dc12      	bgt.n	800867a <__multadd+0x66>
 8008654:	6861      	ldr	r1, [r4, #4]
 8008656:	4630      	mov	r0, r6
 8008658:	3101      	adds	r1, #1
 800865a:	f7ff ff90 	bl	800857e <_Balloc>
 800865e:	6922      	ldr	r2, [r4, #16]
 8008660:	3202      	adds	r2, #2
 8008662:	f104 010c 	add.w	r1, r4, #12
 8008666:	4680      	mov	r8, r0
 8008668:	0092      	lsls	r2, r2, #2
 800866a:	300c      	adds	r0, #12
 800866c:	f7ff ff7c 	bl	8008568 <memcpy>
 8008670:	4621      	mov	r1, r4
 8008672:	4630      	mov	r0, r6
 8008674:	f7ff ffb7 	bl	80085e6 <_Bfree>
 8008678:	4644      	mov	r4, r8
 800867a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800867e:	3501      	adds	r5, #1
 8008680:	615f      	str	r7, [r3, #20]
 8008682:	6125      	str	r5, [r4, #16]
 8008684:	4620      	mov	r0, r4
 8008686:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800868a <__hi0bits>:
 800868a:	0c02      	lsrs	r2, r0, #16
 800868c:	0412      	lsls	r2, r2, #16
 800868e:	4603      	mov	r3, r0
 8008690:	b9b2      	cbnz	r2, 80086c0 <__hi0bits+0x36>
 8008692:	0403      	lsls	r3, r0, #16
 8008694:	2010      	movs	r0, #16
 8008696:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800869a:	bf04      	itt	eq
 800869c:	021b      	lsleq	r3, r3, #8
 800869e:	3008      	addeq	r0, #8
 80086a0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80086a4:	bf04      	itt	eq
 80086a6:	011b      	lsleq	r3, r3, #4
 80086a8:	3004      	addeq	r0, #4
 80086aa:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80086ae:	bf04      	itt	eq
 80086b0:	009b      	lsleq	r3, r3, #2
 80086b2:	3002      	addeq	r0, #2
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	db06      	blt.n	80086c6 <__hi0bits+0x3c>
 80086b8:	005b      	lsls	r3, r3, #1
 80086ba:	d503      	bpl.n	80086c4 <__hi0bits+0x3a>
 80086bc:	3001      	adds	r0, #1
 80086be:	4770      	bx	lr
 80086c0:	2000      	movs	r0, #0
 80086c2:	e7e8      	b.n	8008696 <__hi0bits+0xc>
 80086c4:	2020      	movs	r0, #32
 80086c6:	4770      	bx	lr

080086c8 <__lo0bits>:
 80086c8:	6803      	ldr	r3, [r0, #0]
 80086ca:	f013 0207 	ands.w	r2, r3, #7
 80086ce:	4601      	mov	r1, r0
 80086d0:	d00b      	beq.n	80086ea <__lo0bits+0x22>
 80086d2:	07da      	lsls	r2, r3, #31
 80086d4:	d423      	bmi.n	800871e <__lo0bits+0x56>
 80086d6:	0798      	lsls	r0, r3, #30
 80086d8:	bf49      	itett	mi
 80086da:	085b      	lsrmi	r3, r3, #1
 80086dc:	089b      	lsrpl	r3, r3, #2
 80086de:	2001      	movmi	r0, #1
 80086e0:	600b      	strmi	r3, [r1, #0]
 80086e2:	bf5c      	itt	pl
 80086e4:	600b      	strpl	r3, [r1, #0]
 80086e6:	2002      	movpl	r0, #2
 80086e8:	4770      	bx	lr
 80086ea:	b298      	uxth	r0, r3
 80086ec:	b9a8      	cbnz	r0, 800871a <__lo0bits+0x52>
 80086ee:	0c1b      	lsrs	r3, r3, #16
 80086f0:	2010      	movs	r0, #16
 80086f2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80086f6:	bf04      	itt	eq
 80086f8:	0a1b      	lsreq	r3, r3, #8
 80086fa:	3008      	addeq	r0, #8
 80086fc:	071a      	lsls	r2, r3, #28
 80086fe:	bf04      	itt	eq
 8008700:	091b      	lsreq	r3, r3, #4
 8008702:	3004      	addeq	r0, #4
 8008704:	079a      	lsls	r2, r3, #30
 8008706:	bf04      	itt	eq
 8008708:	089b      	lsreq	r3, r3, #2
 800870a:	3002      	addeq	r0, #2
 800870c:	07da      	lsls	r2, r3, #31
 800870e:	d402      	bmi.n	8008716 <__lo0bits+0x4e>
 8008710:	085b      	lsrs	r3, r3, #1
 8008712:	d006      	beq.n	8008722 <__lo0bits+0x5a>
 8008714:	3001      	adds	r0, #1
 8008716:	600b      	str	r3, [r1, #0]
 8008718:	4770      	bx	lr
 800871a:	4610      	mov	r0, r2
 800871c:	e7e9      	b.n	80086f2 <__lo0bits+0x2a>
 800871e:	2000      	movs	r0, #0
 8008720:	4770      	bx	lr
 8008722:	2020      	movs	r0, #32
 8008724:	4770      	bx	lr

08008726 <__i2b>:
 8008726:	b510      	push	{r4, lr}
 8008728:	460c      	mov	r4, r1
 800872a:	2101      	movs	r1, #1
 800872c:	f7ff ff27 	bl	800857e <_Balloc>
 8008730:	2201      	movs	r2, #1
 8008732:	6144      	str	r4, [r0, #20]
 8008734:	6102      	str	r2, [r0, #16]
 8008736:	bd10      	pop	{r4, pc}

08008738 <__multiply>:
 8008738:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800873c:	4614      	mov	r4, r2
 800873e:	690a      	ldr	r2, [r1, #16]
 8008740:	6923      	ldr	r3, [r4, #16]
 8008742:	429a      	cmp	r2, r3
 8008744:	bfb8      	it	lt
 8008746:	460b      	movlt	r3, r1
 8008748:	4688      	mov	r8, r1
 800874a:	bfbc      	itt	lt
 800874c:	46a0      	movlt	r8, r4
 800874e:	461c      	movlt	r4, r3
 8008750:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008754:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008758:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800875c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008760:	eb07 0609 	add.w	r6, r7, r9
 8008764:	42b3      	cmp	r3, r6
 8008766:	bfb8      	it	lt
 8008768:	3101      	addlt	r1, #1
 800876a:	f7ff ff08 	bl	800857e <_Balloc>
 800876e:	f100 0514 	add.w	r5, r0, #20
 8008772:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8008776:	462b      	mov	r3, r5
 8008778:	2200      	movs	r2, #0
 800877a:	4573      	cmp	r3, lr
 800877c:	d316      	bcc.n	80087ac <__multiply+0x74>
 800877e:	f104 0214 	add.w	r2, r4, #20
 8008782:	f108 0114 	add.w	r1, r8, #20
 8008786:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800878a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800878e:	9300      	str	r3, [sp, #0]
 8008790:	9b00      	ldr	r3, [sp, #0]
 8008792:	9201      	str	r2, [sp, #4]
 8008794:	4293      	cmp	r3, r2
 8008796:	d80c      	bhi.n	80087b2 <__multiply+0x7a>
 8008798:	2e00      	cmp	r6, #0
 800879a:	dd03      	ble.n	80087a4 <__multiply+0x6c>
 800879c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d05d      	beq.n	8008860 <__multiply+0x128>
 80087a4:	6106      	str	r6, [r0, #16]
 80087a6:	b003      	add	sp, #12
 80087a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087ac:	f843 2b04 	str.w	r2, [r3], #4
 80087b0:	e7e3      	b.n	800877a <__multiply+0x42>
 80087b2:	f8b2 b000 	ldrh.w	fp, [r2]
 80087b6:	f1bb 0f00 	cmp.w	fp, #0
 80087ba:	d023      	beq.n	8008804 <__multiply+0xcc>
 80087bc:	4689      	mov	r9, r1
 80087be:	46ac      	mov	ip, r5
 80087c0:	f04f 0800 	mov.w	r8, #0
 80087c4:	f859 4b04 	ldr.w	r4, [r9], #4
 80087c8:	f8dc a000 	ldr.w	sl, [ip]
 80087cc:	b2a3      	uxth	r3, r4
 80087ce:	fa1f fa8a 	uxth.w	sl, sl
 80087d2:	fb0b a303 	mla	r3, fp, r3, sl
 80087d6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80087da:	f8dc 4000 	ldr.w	r4, [ip]
 80087de:	4443      	add	r3, r8
 80087e0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80087e4:	fb0b 840a 	mla	r4, fp, sl, r8
 80087e8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80087ec:	46e2      	mov	sl, ip
 80087ee:	b29b      	uxth	r3, r3
 80087f0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80087f4:	454f      	cmp	r7, r9
 80087f6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80087fa:	f84a 3b04 	str.w	r3, [sl], #4
 80087fe:	d82b      	bhi.n	8008858 <__multiply+0x120>
 8008800:	f8cc 8004 	str.w	r8, [ip, #4]
 8008804:	9b01      	ldr	r3, [sp, #4]
 8008806:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800880a:	3204      	adds	r2, #4
 800880c:	f1ba 0f00 	cmp.w	sl, #0
 8008810:	d020      	beq.n	8008854 <__multiply+0x11c>
 8008812:	682b      	ldr	r3, [r5, #0]
 8008814:	4689      	mov	r9, r1
 8008816:	46a8      	mov	r8, r5
 8008818:	f04f 0b00 	mov.w	fp, #0
 800881c:	f8b9 c000 	ldrh.w	ip, [r9]
 8008820:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008824:	fb0a 440c 	mla	r4, sl, ip, r4
 8008828:	445c      	add	r4, fp
 800882a:	46c4      	mov	ip, r8
 800882c:	b29b      	uxth	r3, r3
 800882e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008832:	f84c 3b04 	str.w	r3, [ip], #4
 8008836:	f859 3b04 	ldr.w	r3, [r9], #4
 800883a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800883e:	0c1b      	lsrs	r3, r3, #16
 8008840:	fb0a b303 	mla	r3, sl, r3, fp
 8008844:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008848:	454f      	cmp	r7, r9
 800884a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800884e:	d805      	bhi.n	800885c <__multiply+0x124>
 8008850:	f8c8 3004 	str.w	r3, [r8, #4]
 8008854:	3504      	adds	r5, #4
 8008856:	e79b      	b.n	8008790 <__multiply+0x58>
 8008858:	46d4      	mov	ip, sl
 800885a:	e7b3      	b.n	80087c4 <__multiply+0x8c>
 800885c:	46e0      	mov	r8, ip
 800885e:	e7dd      	b.n	800881c <__multiply+0xe4>
 8008860:	3e01      	subs	r6, #1
 8008862:	e799      	b.n	8008798 <__multiply+0x60>

08008864 <__pow5mult>:
 8008864:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008868:	4615      	mov	r5, r2
 800886a:	f012 0203 	ands.w	r2, r2, #3
 800886e:	4606      	mov	r6, r0
 8008870:	460f      	mov	r7, r1
 8008872:	d007      	beq.n	8008884 <__pow5mult+0x20>
 8008874:	3a01      	subs	r2, #1
 8008876:	4c21      	ldr	r4, [pc, #132]	; (80088fc <__pow5mult+0x98>)
 8008878:	2300      	movs	r3, #0
 800887a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800887e:	f7ff fec9 	bl	8008614 <__multadd>
 8008882:	4607      	mov	r7, r0
 8008884:	10ad      	asrs	r5, r5, #2
 8008886:	d035      	beq.n	80088f4 <__pow5mult+0x90>
 8008888:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800888a:	b93c      	cbnz	r4, 800889c <__pow5mult+0x38>
 800888c:	2010      	movs	r0, #16
 800888e:	f7ff fe63 	bl	8008558 <malloc>
 8008892:	6270      	str	r0, [r6, #36]	; 0x24
 8008894:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008898:	6004      	str	r4, [r0, #0]
 800889a:	60c4      	str	r4, [r0, #12]
 800889c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80088a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80088a4:	b94c      	cbnz	r4, 80088ba <__pow5mult+0x56>
 80088a6:	f240 2171 	movw	r1, #625	; 0x271
 80088aa:	4630      	mov	r0, r6
 80088ac:	f7ff ff3b 	bl	8008726 <__i2b>
 80088b0:	2300      	movs	r3, #0
 80088b2:	f8c8 0008 	str.w	r0, [r8, #8]
 80088b6:	4604      	mov	r4, r0
 80088b8:	6003      	str	r3, [r0, #0]
 80088ba:	f04f 0800 	mov.w	r8, #0
 80088be:	07eb      	lsls	r3, r5, #31
 80088c0:	d50a      	bpl.n	80088d8 <__pow5mult+0x74>
 80088c2:	4639      	mov	r1, r7
 80088c4:	4622      	mov	r2, r4
 80088c6:	4630      	mov	r0, r6
 80088c8:	f7ff ff36 	bl	8008738 <__multiply>
 80088cc:	4639      	mov	r1, r7
 80088ce:	4681      	mov	r9, r0
 80088d0:	4630      	mov	r0, r6
 80088d2:	f7ff fe88 	bl	80085e6 <_Bfree>
 80088d6:	464f      	mov	r7, r9
 80088d8:	106d      	asrs	r5, r5, #1
 80088da:	d00b      	beq.n	80088f4 <__pow5mult+0x90>
 80088dc:	6820      	ldr	r0, [r4, #0]
 80088de:	b938      	cbnz	r0, 80088f0 <__pow5mult+0x8c>
 80088e0:	4622      	mov	r2, r4
 80088e2:	4621      	mov	r1, r4
 80088e4:	4630      	mov	r0, r6
 80088e6:	f7ff ff27 	bl	8008738 <__multiply>
 80088ea:	6020      	str	r0, [r4, #0]
 80088ec:	f8c0 8000 	str.w	r8, [r0]
 80088f0:	4604      	mov	r4, r0
 80088f2:	e7e4      	b.n	80088be <__pow5mult+0x5a>
 80088f4:	4638      	mov	r0, r7
 80088f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088fa:	bf00      	nop
 80088fc:	08009db0 	.word	0x08009db0

08008900 <__lshift>:
 8008900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008904:	460c      	mov	r4, r1
 8008906:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800890a:	6923      	ldr	r3, [r4, #16]
 800890c:	6849      	ldr	r1, [r1, #4]
 800890e:	eb0a 0903 	add.w	r9, sl, r3
 8008912:	68a3      	ldr	r3, [r4, #8]
 8008914:	4607      	mov	r7, r0
 8008916:	4616      	mov	r6, r2
 8008918:	f109 0501 	add.w	r5, r9, #1
 800891c:	42ab      	cmp	r3, r5
 800891e:	db32      	blt.n	8008986 <__lshift+0x86>
 8008920:	4638      	mov	r0, r7
 8008922:	f7ff fe2c 	bl	800857e <_Balloc>
 8008926:	2300      	movs	r3, #0
 8008928:	4680      	mov	r8, r0
 800892a:	f100 0114 	add.w	r1, r0, #20
 800892e:	461a      	mov	r2, r3
 8008930:	4553      	cmp	r3, sl
 8008932:	db2b      	blt.n	800898c <__lshift+0x8c>
 8008934:	6920      	ldr	r0, [r4, #16]
 8008936:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800893a:	f104 0314 	add.w	r3, r4, #20
 800893e:	f016 021f 	ands.w	r2, r6, #31
 8008942:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008946:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800894a:	d025      	beq.n	8008998 <__lshift+0x98>
 800894c:	f1c2 0e20 	rsb	lr, r2, #32
 8008950:	2000      	movs	r0, #0
 8008952:	681e      	ldr	r6, [r3, #0]
 8008954:	468a      	mov	sl, r1
 8008956:	4096      	lsls	r6, r2
 8008958:	4330      	orrs	r0, r6
 800895a:	f84a 0b04 	str.w	r0, [sl], #4
 800895e:	f853 0b04 	ldr.w	r0, [r3], #4
 8008962:	459c      	cmp	ip, r3
 8008964:	fa20 f00e 	lsr.w	r0, r0, lr
 8008968:	d814      	bhi.n	8008994 <__lshift+0x94>
 800896a:	6048      	str	r0, [r1, #4]
 800896c:	b108      	cbz	r0, 8008972 <__lshift+0x72>
 800896e:	f109 0502 	add.w	r5, r9, #2
 8008972:	3d01      	subs	r5, #1
 8008974:	4638      	mov	r0, r7
 8008976:	f8c8 5010 	str.w	r5, [r8, #16]
 800897a:	4621      	mov	r1, r4
 800897c:	f7ff fe33 	bl	80085e6 <_Bfree>
 8008980:	4640      	mov	r0, r8
 8008982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008986:	3101      	adds	r1, #1
 8008988:	005b      	lsls	r3, r3, #1
 800898a:	e7c7      	b.n	800891c <__lshift+0x1c>
 800898c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008990:	3301      	adds	r3, #1
 8008992:	e7cd      	b.n	8008930 <__lshift+0x30>
 8008994:	4651      	mov	r1, sl
 8008996:	e7dc      	b.n	8008952 <__lshift+0x52>
 8008998:	3904      	subs	r1, #4
 800899a:	f853 2b04 	ldr.w	r2, [r3], #4
 800899e:	f841 2f04 	str.w	r2, [r1, #4]!
 80089a2:	459c      	cmp	ip, r3
 80089a4:	d8f9      	bhi.n	800899a <__lshift+0x9a>
 80089a6:	e7e4      	b.n	8008972 <__lshift+0x72>

080089a8 <__mcmp>:
 80089a8:	6903      	ldr	r3, [r0, #16]
 80089aa:	690a      	ldr	r2, [r1, #16]
 80089ac:	1a9b      	subs	r3, r3, r2
 80089ae:	b530      	push	{r4, r5, lr}
 80089b0:	d10c      	bne.n	80089cc <__mcmp+0x24>
 80089b2:	0092      	lsls	r2, r2, #2
 80089b4:	3014      	adds	r0, #20
 80089b6:	3114      	adds	r1, #20
 80089b8:	1884      	adds	r4, r0, r2
 80089ba:	4411      	add	r1, r2
 80089bc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80089c0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80089c4:	4295      	cmp	r5, r2
 80089c6:	d003      	beq.n	80089d0 <__mcmp+0x28>
 80089c8:	d305      	bcc.n	80089d6 <__mcmp+0x2e>
 80089ca:	2301      	movs	r3, #1
 80089cc:	4618      	mov	r0, r3
 80089ce:	bd30      	pop	{r4, r5, pc}
 80089d0:	42a0      	cmp	r0, r4
 80089d2:	d3f3      	bcc.n	80089bc <__mcmp+0x14>
 80089d4:	e7fa      	b.n	80089cc <__mcmp+0x24>
 80089d6:	f04f 33ff 	mov.w	r3, #4294967295
 80089da:	e7f7      	b.n	80089cc <__mcmp+0x24>

080089dc <__mdiff>:
 80089dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089e0:	460d      	mov	r5, r1
 80089e2:	4607      	mov	r7, r0
 80089e4:	4611      	mov	r1, r2
 80089e6:	4628      	mov	r0, r5
 80089e8:	4614      	mov	r4, r2
 80089ea:	f7ff ffdd 	bl	80089a8 <__mcmp>
 80089ee:	1e06      	subs	r6, r0, #0
 80089f0:	d108      	bne.n	8008a04 <__mdiff+0x28>
 80089f2:	4631      	mov	r1, r6
 80089f4:	4638      	mov	r0, r7
 80089f6:	f7ff fdc2 	bl	800857e <_Balloc>
 80089fa:	2301      	movs	r3, #1
 80089fc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008a00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a04:	bfa4      	itt	ge
 8008a06:	4623      	movge	r3, r4
 8008a08:	462c      	movge	r4, r5
 8008a0a:	4638      	mov	r0, r7
 8008a0c:	6861      	ldr	r1, [r4, #4]
 8008a0e:	bfa6      	itte	ge
 8008a10:	461d      	movge	r5, r3
 8008a12:	2600      	movge	r6, #0
 8008a14:	2601      	movlt	r6, #1
 8008a16:	f7ff fdb2 	bl	800857e <_Balloc>
 8008a1a:	692b      	ldr	r3, [r5, #16]
 8008a1c:	60c6      	str	r6, [r0, #12]
 8008a1e:	6926      	ldr	r6, [r4, #16]
 8008a20:	f105 0914 	add.w	r9, r5, #20
 8008a24:	f104 0214 	add.w	r2, r4, #20
 8008a28:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008a2c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008a30:	f100 0514 	add.w	r5, r0, #20
 8008a34:	f04f 0e00 	mov.w	lr, #0
 8008a38:	f852 ab04 	ldr.w	sl, [r2], #4
 8008a3c:	f859 4b04 	ldr.w	r4, [r9], #4
 8008a40:	fa1e f18a 	uxtah	r1, lr, sl
 8008a44:	b2a3      	uxth	r3, r4
 8008a46:	1ac9      	subs	r1, r1, r3
 8008a48:	0c23      	lsrs	r3, r4, #16
 8008a4a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8008a4e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008a52:	b289      	uxth	r1, r1
 8008a54:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8008a58:	45c8      	cmp	r8, r9
 8008a5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008a5e:	4694      	mov	ip, r2
 8008a60:	f845 3b04 	str.w	r3, [r5], #4
 8008a64:	d8e8      	bhi.n	8008a38 <__mdiff+0x5c>
 8008a66:	45bc      	cmp	ip, r7
 8008a68:	d304      	bcc.n	8008a74 <__mdiff+0x98>
 8008a6a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8008a6e:	b183      	cbz	r3, 8008a92 <__mdiff+0xb6>
 8008a70:	6106      	str	r6, [r0, #16]
 8008a72:	e7c5      	b.n	8008a00 <__mdiff+0x24>
 8008a74:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008a78:	fa1e f381 	uxtah	r3, lr, r1
 8008a7c:	141a      	asrs	r2, r3, #16
 8008a7e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008a82:	b29b      	uxth	r3, r3
 8008a84:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a88:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8008a8c:	f845 3b04 	str.w	r3, [r5], #4
 8008a90:	e7e9      	b.n	8008a66 <__mdiff+0x8a>
 8008a92:	3e01      	subs	r6, #1
 8008a94:	e7e9      	b.n	8008a6a <__mdiff+0x8e>

08008a96 <__d2b>:
 8008a96:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008a9a:	460e      	mov	r6, r1
 8008a9c:	2101      	movs	r1, #1
 8008a9e:	ec59 8b10 	vmov	r8, r9, d0
 8008aa2:	4615      	mov	r5, r2
 8008aa4:	f7ff fd6b 	bl	800857e <_Balloc>
 8008aa8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008aac:	4607      	mov	r7, r0
 8008aae:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008ab2:	bb34      	cbnz	r4, 8008b02 <__d2b+0x6c>
 8008ab4:	9301      	str	r3, [sp, #4]
 8008ab6:	f1b8 0300 	subs.w	r3, r8, #0
 8008aba:	d027      	beq.n	8008b0c <__d2b+0x76>
 8008abc:	a802      	add	r0, sp, #8
 8008abe:	f840 3d08 	str.w	r3, [r0, #-8]!
 8008ac2:	f7ff fe01 	bl	80086c8 <__lo0bits>
 8008ac6:	9900      	ldr	r1, [sp, #0]
 8008ac8:	b1f0      	cbz	r0, 8008b08 <__d2b+0x72>
 8008aca:	9a01      	ldr	r2, [sp, #4]
 8008acc:	f1c0 0320 	rsb	r3, r0, #32
 8008ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ad4:	430b      	orrs	r3, r1
 8008ad6:	40c2      	lsrs	r2, r0
 8008ad8:	617b      	str	r3, [r7, #20]
 8008ada:	9201      	str	r2, [sp, #4]
 8008adc:	9b01      	ldr	r3, [sp, #4]
 8008ade:	61bb      	str	r3, [r7, #24]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	bf14      	ite	ne
 8008ae4:	2102      	movne	r1, #2
 8008ae6:	2101      	moveq	r1, #1
 8008ae8:	6139      	str	r1, [r7, #16]
 8008aea:	b1c4      	cbz	r4, 8008b1e <__d2b+0x88>
 8008aec:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008af0:	4404      	add	r4, r0
 8008af2:	6034      	str	r4, [r6, #0]
 8008af4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008af8:	6028      	str	r0, [r5, #0]
 8008afa:	4638      	mov	r0, r7
 8008afc:	b003      	add	sp, #12
 8008afe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008b06:	e7d5      	b.n	8008ab4 <__d2b+0x1e>
 8008b08:	6179      	str	r1, [r7, #20]
 8008b0a:	e7e7      	b.n	8008adc <__d2b+0x46>
 8008b0c:	a801      	add	r0, sp, #4
 8008b0e:	f7ff fddb 	bl	80086c8 <__lo0bits>
 8008b12:	9b01      	ldr	r3, [sp, #4]
 8008b14:	617b      	str	r3, [r7, #20]
 8008b16:	2101      	movs	r1, #1
 8008b18:	6139      	str	r1, [r7, #16]
 8008b1a:	3020      	adds	r0, #32
 8008b1c:	e7e5      	b.n	8008aea <__d2b+0x54>
 8008b1e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8008b22:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008b26:	6030      	str	r0, [r6, #0]
 8008b28:	6918      	ldr	r0, [r3, #16]
 8008b2a:	f7ff fdae 	bl	800868a <__hi0bits>
 8008b2e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008b32:	e7e1      	b.n	8008af8 <__d2b+0x62>

08008b34 <_calloc_r>:
 8008b34:	b538      	push	{r3, r4, r5, lr}
 8008b36:	fb02 f401 	mul.w	r4, r2, r1
 8008b3a:	4621      	mov	r1, r4
 8008b3c:	f000 f856 	bl	8008bec <_malloc_r>
 8008b40:	4605      	mov	r5, r0
 8008b42:	b118      	cbz	r0, 8008b4c <_calloc_r+0x18>
 8008b44:	4622      	mov	r2, r4
 8008b46:	2100      	movs	r1, #0
 8008b48:	f7fd ffaa 	bl	8006aa0 <memset>
 8008b4c:	4628      	mov	r0, r5
 8008b4e:	bd38      	pop	{r3, r4, r5, pc}

08008b50 <_free_r>:
 8008b50:	b538      	push	{r3, r4, r5, lr}
 8008b52:	4605      	mov	r5, r0
 8008b54:	2900      	cmp	r1, #0
 8008b56:	d045      	beq.n	8008be4 <_free_r+0x94>
 8008b58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b5c:	1f0c      	subs	r4, r1, #4
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	bfb8      	it	lt
 8008b62:	18e4      	addlt	r4, r4, r3
 8008b64:	f000 f958 	bl	8008e18 <__malloc_lock>
 8008b68:	4a1f      	ldr	r2, [pc, #124]	; (8008be8 <_free_r+0x98>)
 8008b6a:	6813      	ldr	r3, [r2, #0]
 8008b6c:	4610      	mov	r0, r2
 8008b6e:	b933      	cbnz	r3, 8008b7e <_free_r+0x2e>
 8008b70:	6063      	str	r3, [r4, #4]
 8008b72:	6014      	str	r4, [r2, #0]
 8008b74:	4628      	mov	r0, r5
 8008b76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b7a:	f000 b94e 	b.w	8008e1a <__malloc_unlock>
 8008b7e:	42a3      	cmp	r3, r4
 8008b80:	d90c      	bls.n	8008b9c <_free_r+0x4c>
 8008b82:	6821      	ldr	r1, [r4, #0]
 8008b84:	1862      	adds	r2, r4, r1
 8008b86:	4293      	cmp	r3, r2
 8008b88:	bf04      	itt	eq
 8008b8a:	681a      	ldreq	r2, [r3, #0]
 8008b8c:	685b      	ldreq	r3, [r3, #4]
 8008b8e:	6063      	str	r3, [r4, #4]
 8008b90:	bf04      	itt	eq
 8008b92:	1852      	addeq	r2, r2, r1
 8008b94:	6022      	streq	r2, [r4, #0]
 8008b96:	6004      	str	r4, [r0, #0]
 8008b98:	e7ec      	b.n	8008b74 <_free_r+0x24>
 8008b9a:	4613      	mov	r3, r2
 8008b9c:	685a      	ldr	r2, [r3, #4]
 8008b9e:	b10a      	cbz	r2, 8008ba4 <_free_r+0x54>
 8008ba0:	42a2      	cmp	r2, r4
 8008ba2:	d9fa      	bls.n	8008b9a <_free_r+0x4a>
 8008ba4:	6819      	ldr	r1, [r3, #0]
 8008ba6:	1858      	adds	r0, r3, r1
 8008ba8:	42a0      	cmp	r0, r4
 8008baa:	d10b      	bne.n	8008bc4 <_free_r+0x74>
 8008bac:	6820      	ldr	r0, [r4, #0]
 8008bae:	4401      	add	r1, r0
 8008bb0:	1858      	adds	r0, r3, r1
 8008bb2:	4282      	cmp	r2, r0
 8008bb4:	6019      	str	r1, [r3, #0]
 8008bb6:	d1dd      	bne.n	8008b74 <_free_r+0x24>
 8008bb8:	6810      	ldr	r0, [r2, #0]
 8008bba:	6852      	ldr	r2, [r2, #4]
 8008bbc:	605a      	str	r2, [r3, #4]
 8008bbe:	4401      	add	r1, r0
 8008bc0:	6019      	str	r1, [r3, #0]
 8008bc2:	e7d7      	b.n	8008b74 <_free_r+0x24>
 8008bc4:	d902      	bls.n	8008bcc <_free_r+0x7c>
 8008bc6:	230c      	movs	r3, #12
 8008bc8:	602b      	str	r3, [r5, #0]
 8008bca:	e7d3      	b.n	8008b74 <_free_r+0x24>
 8008bcc:	6820      	ldr	r0, [r4, #0]
 8008bce:	1821      	adds	r1, r4, r0
 8008bd0:	428a      	cmp	r2, r1
 8008bd2:	bf04      	itt	eq
 8008bd4:	6811      	ldreq	r1, [r2, #0]
 8008bd6:	6852      	ldreq	r2, [r2, #4]
 8008bd8:	6062      	str	r2, [r4, #4]
 8008bda:	bf04      	itt	eq
 8008bdc:	1809      	addeq	r1, r1, r0
 8008bde:	6021      	streq	r1, [r4, #0]
 8008be0:	605c      	str	r4, [r3, #4]
 8008be2:	e7c7      	b.n	8008b74 <_free_r+0x24>
 8008be4:	bd38      	pop	{r3, r4, r5, pc}
 8008be6:	bf00      	nop
 8008be8:	20000218 	.word	0x20000218

08008bec <_malloc_r>:
 8008bec:	b570      	push	{r4, r5, r6, lr}
 8008bee:	1ccd      	adds	r5, r1, #3
 8008bf0:	f025 0503 	bic.w	r5, r5, #3
 8008bf4:	3508      	adds	r5, #8
 8008bf6:	2d0c      	cmp	r5, #12
 8008bf8:	bf38      	it	cc
 8008bfa:	250c      	movcc	r5, #12
 8008bfc:	2d00      	cmp	r5, #0
 8008bfe:	4606      	mov	r6, r0
 8008c00:	db01      	blt.n	8008c06 <_malloc_r+0x1a>
 8008c02:	42a9      	cmp	r1, r5
 8008c04:	d903      	bls.n	8008c0e <_malloc_r+0x22>
 8008c06:	230c      	movs	r3, #12
 8008c08:	6033      	str	r3, [r6, #0]
 8008c0a:	2000      	movs	r0, #0
 8008c0c:	bd70      	pop	{r4, r5, r6, pc}
 8008c0e:	f000 f903 	bl	8008e18 <__malloc_lock>
 8008c12:	4a21      	ldr	r2, [pc, #132]	; (8008c98 <_malloc_r+0xac>)
 8008c14:	6814      	ldr	r4, [r2, #0]
 8008c16:	4621      	mov	r1, r4
 8008c18:	b991      	cbnz	r1, 8008c40 <_malloc_r+0x54>
 8008c1a:	4c20      	ldr	r4, [pc, #128]	; (8008c9c <_malloc_r+0xb0>)
 8008c1c:	6823      	ldr	r3, [r4, #0]
 8008c1e:	b91b      	cbnz	r3, 8008c28 <_malloc_r+0x3c>
 8008c20:	4630      	mov	r0, r6
 8008c22:	f000 f83d 	bl	8008ca0 <_sbrk_r>
 8008c26:	6020      	str	r0, [r4, #0]
 8008c28:	4629      	mov	r1, r5
 8008c2a:	4630      	mov	r0, r6
 8008c2c:	f000 f838 	bl	8008ca0 <_sbrk_r>
 8008c30:	1c43      	adds	r3, r0, #1
 8008c32:	d124      	bne.n	8008c7e <_malloc_r+0x92>
 8008c34:	230c      	movs	r3, #12
 8008c36:	6033      	str	r3, [r6, #0]
 8008c38:	4630      	mov	r0, r6
 8008c3a:	f000 f8ee 	bl	8008e1a <__malloc_unlock>
 8008c3e:	e7e4      	b.n	8008c0a <_malloc_r+0x1e>
 8008c40:	680b      	ldr	r3, [r1, #0]
 8008c42:	1b5b      	subs	r3, r3, r5
 8008c44:	d418      	bmi.n	8008c78 <_malloc_r+0x8c>
 8008c46:	2b0b      	cmp	r3, #11
 8008c48:	d90f      	bls.n	8008c6a <_malloc_r+0x7e>
 8008c4a:	600b      	str	r3, [r1, #0]
 8008c4c:	50cd      	str	r5, [r1, r3]
 8008c4e:	18cc      	adds	r4, r1, r3
 8008c50:	4630      	mov	r0, r6
 8008c52:	f000 f8e2 	bl	8008e1a <__malloc_unlock>
 8008c56:	f104 000b 	add.w	r0, r4, #11
 8008c5a:	1d23      	adds	r3, r4, #4
 8008c5c:	f020 0007 	bic.w	r0, r0, #7
 8008c60:	1ac3      	subs	r3, r0, r3
 8008c62:	d0d3      	beq.n	8008c0c <_malloc_r+0x20>
 8008c64:	425a      	negs	r2, r3
 8008c66:	50e2      	str	r2, [r4, r3]
 8008c68:	e7d0      	b.n	8008c0c <_malloc_r+0x20>
 8008c6a:	428c      	cmp	r4, r1
 8008c6c:	684b      	ldr	r3, [r1, #4]
 8008c6e:	bf16      	itet	ne
 8008c70:	6063      	strne	r3, [r4, #4]
 8008c72:	6013      	streq	r3, [r2, #0]
 8008c74:	460c      	movne	r4, r1
 8008c76:	e7eb      	b.n	8008c50 <_malloc_r+0x64>
 8008c78:	460c      	mov	r4, r1
 8008c7a:	6849      	ldr	r1, [r1, #4]
 8008c7c:	e7cc      	b.n	8008c18 <_malloc_r+0x2c>
 8008c7e:	1cc4      	adds	r4, r0, #3
 8008c80:	f024 0403 	bic.w	r4, r4, #3
 8008c84:	42a0      	cmp	r0, r4
 8008c86:	d005      	beq.n	8008c94 <_malloc_r+0xa8>
 8008c88:	1a21      	subs	r1, r4, r0
 8008c8a:	4630      	mov	r0, r6
 8008c8c:	f000 f808 	bl	8008ca0 <_sbrk_r>
 8008c90:	3001      	adds	r0, #1
 8008c92:	d0cf      	beq.n	8008c34 <_malloc_r+0x48>
 8008c94:	6025      	str	r5, [r4, #0]
 8008c96:	e7db      	b.n	8008c50 <_malloc_r+0x64>
 8008c98:	20000218 	.word	0x20000218
 8008c9c:	2000021c 	.word	0x2000021c

08008ca0 <_sbrk_r>:
 8008ca0:	b538      	push	{r3, r4, r5, lr}
 8008ca2:	4c06      	ldr	r4, [pc, #24]	; (8008cbc <_sbrk_r+0x1c>)
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	4605      	mov	r5, r0
 8008ca8:	4608      	mov	r0, r1
 8008caa:	6023      	str	r3, [r4, #0]
 8008cac:	f7f9 fa2a 	bl	8002104 <_sbrk>
 8008cb0:	1c43      	adds	r3, r0, #1
 8008cb2:	d102      	bne.n	8008cba <_sbrk_r+0x1a>
 8008cb4:	6823      	ldr	r3, [r4, #0]
 8008cb6:	b103      	cbz	r3, 8008cba <_sbrk_r+0x1a>
 8008cb8:	602b      	str	r3, [r5, #0]
 8008cba:	bd38      	pop	{r3, r4, r5, pc}
 8008cbc:	20000abc 	.word	0x20000abc

08008cc0 <__sread>:
 8008cc0:	b510      	push	{r4, lr}
 8008cc2:	460c      	mov	r4, r1
 8008cc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cc8:	f000 f8a8 	bl	8008e1c <_read_r>
 8008ccc:	2800      	cmp	r0, #0
 8008cce:	bfab      	itete	ge
 8008cd0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008cd2:	89a3      	ldrhlt	r3, [r4, #12]
 8008cd4:	181b      	addge	r3, r3, r0
 8008cd6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008cda:	bfac      	ite	ge
 8008cdc:	6563      	strge	r3, [r4, #84]	; 0x54
 8008cde:	81a3      	strhlt	r3, [r4, #12]
 8008ce0:	bd10      	pop	{r4, pc}

08008ce2 <__swrite>:
 8008ce2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ce6:	461f      	mov	r7, r3
 8008ce8:	898b      	ldrh	r3, [r1, #12]
 8008cea:	05db      	lsls	r3, r3, #23
 8008cec:	4605      	mov	r5, r0
 8008cee:	460c      	mov	r4, r1
 8008cf0:	4616      	mov	r6, r2
 8008cf2:	d505      	bpl.n	8008d00 <__swrite+0x1e>
 8008cf4:	2302      	movs	r3, #2
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cfc:	f000 f868 	bl	8008dd0 <_lseek_r>
 8008d00:	89a3      	ldrh	r3, [r4, #12]
 8008d02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d0a:	81a3      	strh	r3, [r4, #12]
 8008d0c:	4632      	mov	r2, r6
 8008d0e:	463b      	mov	r3, r7
 8008d10:	4628      	mov	r0, r5
 8008d12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d16:	f000 b817 	b.w	8008d48 <_write_r>

08008d1a <__sseek>:
 8008d1a:	b510      	push	{r4, lr}
 8008d1c:	460c      	mov	r4, r1
 8008d1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d22:	f000 f855 	bl	8008dd0 <_lseek_r>
 8008d26:	1c43      	adds	r3, r0, #1
 8008d28:	89a3      	ldrh	r3, [r4, #12]
 8008d2a:	bf15      	itete	ne
 8008d2c:	6560      	strne	r0, [r4, #84]	; 0x54
 8008d2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008d32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008d36:	81a3      	strheq	r3, [r4, #12]
 8008d38:	bf18      	it	ne
 8008d3a:	81a3      	strhne	r3, [r4, #12]
 8008d3c:	bd10      	pop	{r4, pc}

08008d3e <__sclose>:
 8008d3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d42:	f000 b813 	b.w	8008d6c <_close_r>
	...

08008d48 <_write_r>:
 8008d48:	b538      	push	{r3, r4, r5, lr}
 8008d4a:	4c07      	ldr	r4, [pc, #28]	; (8008d68 <_write_r+0x20>)
 8008d4c:	4605      	mov	r5, r0
 8008d4e:	4608      	mov	r0, r1
 8008d50:	4611      	mov	r1, r2
 8008d52:	2200      	movs	r2, #0
 8008d54:	6022      	str	r2, [r4, #0]
 8008d56:	461a      	mov	r2, r3
 8008d58:	f7f9 f983 	bl	8002062 <_write>
 8008d5c:	1c43      	adds	r3, r0, #1
 8008d5e:	d102      	bne.n	8008d66 <_write_r+0x1e>
 8008d60:	6823      	ldr	r3, [r4, #0]
 8008d62:	b103      	cbz	r3, 8008d66 <_write_r+0x1e>
 8008d64:	602b      	str	r3, [r5, #0]
 8008d66:	bd38      	pop	{r3, r4, r5, pc}
 8008d68:	20000abc 	.word	0x20000abc

08008d6c <_close_r>:
 8008d6c:	b538      	push	{r3, r4, r5, lr}
 8008d6e:	4c06      	ldr	r4, [pc, #24]	; (8008d88 <_close_r+0x1c>)
 8008d70:	2300      	movs	r3, #0
 8008d72:	4605      	mov	r5, r0
 8008d74:	4608      	mov	r0, r1
 8008d76:	6023      	str	r3, [r4, #0]
 8008d78:	f7f9 f98f 	bl	800209a <_close>
 8008d7c:	1c43      	adds	r3, r0, #1
 8008d7e:	d102      	bne.n	8008d86 <_close_r+0x1a>
 8008d80:	6823      	ldr	r3, [r4, #0]
 8008d82:	b103      	cbz	r3, 8008d86 <_close_r+0x1a>
 8008d84:	602b      	str	r3, [r5, #0]
 8008d86:	bd38      	pop	{r3, r4, r5, pc}
 8008d88:	20000abc 	.word	0x20000abc

08008d8c <_fstat_r>:
 8008d8c:	b538      	push	{r3, r4, r5, lr}
 8008d8e:	4c07      	ldr	r4, [pc, #28]	; (8008dac <_fstat_r+0x20>)
 8008d90:	2300      	movs	r3, #0
 8008d92:	4605      	mov	r5, r0
 8008d94:	4608      	mov	r0, r1
 8008d96:	4611      	mov	r1, r2
 8008d98:	6023      	str	r3, [r4, #0]
 8008d9a:	f7f9 f98a 	bl	80020b2 <_fstat>
 8008d9e:	1c43      	adds	r3, r0, #1
 8008da0:	d102      	bne.n	8008da8 <_fstat_r+0x1c>
 8008da2:	6823      	ldr	r3, [r4, #0]
 8008da4:	b103      	cbz	r3, 8008da8 <_fstat_r+0x1c>
 8008da6:	602b      	str	r3, [r5, #0]
 8008da8:	bd38      	pop	{r3, r4, r5, pc}
 8008daa:	bf00      	nop
 8008dac:	20000abc 	.word	0x20000abc

08008db0 <_isatty_r>:
 8008db0:	b538      	push	{r3, r4, r5, lr}
 8008db2:	4c06      	ldr	r4, [pc, #24]	; (8008dcc <_isatty_r+0x1c>)
 8008db4:	2300      	movs	r3, #0
 8008db6:	4605      	mov	r5, r0
 8008db8:	4608      	mov	r0, r1
 8008dba:	6023      	str	r3, [r4, #0]
 8008dbc:	f7f9 f989 	bl	80020d2 <_isatty>
 8008dc0:	1c43      	adds	r3, r0, #1
 8008dc2:	d102      	bne.n	8008dca <_isatty_r+0x1a>
 8008dc4:	6823      	ldr	r3, [r4, #0]
 8008dc6:	b103      	cbz	r3, 8008dca <_isatty_r+0x1a>
 8008dc8:	602b      	str	r3, [r5, #0]
 8008dca:	bd38      	pop	{r3, r4, r5, pc}
 8008dcc:	20000abc 	.word	0x20000abc

08008dd0 <_lseek_r>:
 8008dd0:	b538      	push	{r3, r4, r5, lr}
 8008dd2:	4c07      	ldr	r4, [pc, #28]	; (8008df0 <_lseek_r+0x20>)
 8008dd4:	4605      	mov	r5, r0
 8008dd6:	4608      	mov	r0, r1
 8008dd8:	4611      	mov	r1, r2
 8008dda:	2200      	movs	r2, #0
 8008ddc:	6022      	str	r2, [r4, #0]
 8008dde:	461a      	mov	r2, r3
 8008de0:	f7f9 f982 	bl	80020e8 <_lseek>
 8008de4:	1c43      	adds	r3, r0, #1
 8008de6:	d102      	bne.n	8008dee <_lseek_r+0x1e>
 8008de8:	6823      	ldr	r3, [r4, #0]
 8008dea:	b103      	cbz	r3, 8008dee <_lseek_r+0x1e>
 8008dec:	602b      	str	r3, [r5, #0]
 8008dee:	bd38      	pop	{r3, r4, r5, pc}
 8008df0:	20000abc 	.word	0x20000abc

08008df4 <__ascii_mbtowc>:
 8008df4:	b082      	sub	sp, #8
 8008df6:	b901      	cbnz	r1, 8008dfa <__ascii_mbtowc+0x6>
 8008df8:	a901      	add	r1, sp, #4
 8008dfa:	b142      	cbz	r2, 8008e0e <__ascii_mbtowc+0x1a>
 8008dfc:	b14b      	cbz	r3, 8008e12 <__ascii_mbtowc+0x1e>
 8008dfe:	7813      	ldrb	r3, [r2, #0]
 8008e00:	600b      	str	r3, [r1, #0]
 8008e02:	7812      	ldrb	r2, [r2, #0]
 8008e04:	1c10      	adds	r0, r2, #0
 8008e06:	bf18      	it	ne
 8008e08:	2001      	movne	r0, #1
 8008e0a:	b002      	add	sp, #8
 8008e0c:	4770      	bx	lr
 8008e0e:	4610      	mov	r0, r2
 8008e10:	e7fb      	b.n	8008e0a <__ascii_mbtowc+0x16>
 8008e12:	f06f 0001 	mvn.w	r0, #1
 8008e16:	e7f8      	b.n	8008e0a <__ascii_mbtowc+0x16>

08008e18 <__malloc_lock>:
 8008e18:	4770      	bx	lr

08008e1a <__malloc_unlock>:
 8008e1a:	4770      	bx	lr

08008e1c <_read_r>:
 8008e1c:	b538      	push	{r3, r4, r5, lr}
 8008e1e:	4c07      	ldr	r4, [pc, #28]	; (8008e3c <_read_r+0x20>)
 8008e20:	4605      	mov	r5, r0
 8008e22:	4608      	mov	r0, r1
 8008e24:	4611      	mov	r1, r2
 8008e26:	2200      	movs	r2, #0
 8008e28:	6022      	str	r2, [r4, #0]
 8008e2a:	461a      	mov	r2, r3
 8008e2c:	f7f9 f8fc 	bl	8002028 <_read>
 8008e30:	1c43      	adds	r3, r0, #1
 8008e32:	d102      	bne.n	8008e3a <_read_r+0x1e>
 8008e34:	6823      	ldr	r3, [r4, #0]
 8008e36:	b103      	cbz	r3, 8008e3a <_read_r+0x1e>
 8008e38:	602b      	str	r3, [r5, #0]
 8008e3a:	bd38      	pop	{r3, r4, r5, pc}
 8008e3c:	20000abc 	.word	0x20000abc

08008e40 <__ascii_wctomb>:
 8008e40:	b149      	cbz	r1, 8008e56 <__ascii_wctomb+0x16>
 8008e42:	2aff      	cmp	r2, #255	; 0xff
 8008e44:	bf85      	ittet	hi
 8008e46:	238a      	movhi	r3, #138	; 0x8a
 8008e48:	6003      	strhi	r3, [r0, #0]
 8008e4a:	700a      	strbls	r2, [r1, #0]
 8008e4c:	f04f 30ff 	movhi.w	r0, #4294967295
 8008e50:	bf98      	it	ls
 8008e52:	2001      	movls	r0, #1
 8008e54:	4770      	bx	lr
 8008e56:	4608      	mov	r0, r1
 8008e58:	4770      	bx	lr
	...

08008e5c <cosf>:
 8008e5c:	ee10 3a10 	vmov	r3, s0
 8008e60:	b507      	push	{r0, r1, r2, lr}
 8008e62:	4a1c      	ldr	r2, [pc, #112]	; (8008ed4 <cosf+0x78>)
 8008e64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	dc04      	bgt.n	8008e76 <cosf+0x1a>
 8008e6c:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8008ed8 <cosf+0x7c>
 8008e70:	f000 fad8 	bl	8009424 <__kernel_cosf>
 8008e74:	e004      	b.n	8008e80 <cosf+0x24>
 8008e76:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008e7a:	db04      	blt.n	8008e86 <cosf+0x2a>
 8008e7c:	ee30 0a40 	vsub.f32	s0, s0, s0
 8008e80:	b003      	add	sp, #12
 8008e82:	f85d fb04 	ldr.w	pc, [sp], #4
 8008e86:	4668      	mov	r0, sp
 8008e88:	f000 f9a0 	bl	80091cc <__ieee754_rem_pio2f>
 8008e8c:	f000 0003 	and.w	r0, r0, #3
 8008e90:	2801      	cmp	r0, #1
 8008e92:	d007      	beq.n	8008ea4 <cosf+0x48>
 8008e94:	2802      	cmp	r0, #2
 8008e96:	d00e      	beq.n	8008eb6 <cosf+0x5a>
 8008e98:	b9a0      	cbnz	r0, 8008ec4 <cosf+0x68>
 8008e9a:	eddd 0a01 	vldr	s1, [sp, #4]
 8008e9e:	ed9d 0a00 	vldr	s0, [sp]
 8008ea2:	e7e5      	b.n	8008e70 <cosf+0x14>
 8008ea4:	eddd 0a01 	vldr	s1, [sp, #4]
 8008ea8:	ed9d 0a00 	vldr	s0, [sp]
 8008eac:	f000 fd9a 	bl	80099e4 <__kernel_sinf>
 8008eb0:	eeb1 0a40 	vneg.f32	s0, s0
 8008eb4:	e7e4      	b.n	8008e80 <cosf+0x24>
 8008eb6:	eddd 0a01 	vldr	s1, [sp, #4]
 8008eba:	ed9d 0a00 	vldr	s0, [sp]
 8008ebe:	f000 fab1 	bl	8009424 <__kernel_cosf>
 8008ec2:	e7f5      	b.n	8008eb0 <cosf+0x54>
 8008ec4:	2001      	movs	r0, #1
 8008ec6:	eddd 0a01 	vldr	s1, [sp, #4]
 8008eca:	ed9d 0a00 	vldr	s0, [sp]
 8008ece:	f000 fd89 	bl	80099e4 <__kernel_sinf>
 8008ed2:	e7d5      	b.n	8008e80 <cosf+0x24>
 8008ed4:	3f490fd8 	.word	0x3f490fd8
 8008ed8:	00000000 	.word	0x00000000

08008edc <fmaxf>:
 8008edc:	b508      	push	{r3, lr}
 8008ede:	ed2d 8b02 	vpush	{d8}
 8008ee2:	eeb0 8a40 	vmov.f32	s16, s0
 8008ee6:	eef0 8a60 	vmov.f32	s17, s1
 8008eea:	f000 f82d 	bl	8008f48 <__fpclassifyf>
 8008eee:	b148      	cbz	r0, 8008f04 <fmaxf+0x28>
 8008ef0:	eeb0 0a68 	vmov.f32	s0, s17
 8008ef4:	f000 f828 	bl	8008f48 <__fpclassifyf>
 8008ef8:	b130      	cbz	r0, 8008f08 <fmaxf+0x2c>
 8008efa:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8008efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f02:	dc01      	bgt.n	8008f08 <fmaxf+0x2c>
 8008f04:	eeb0 8a68 	vmov.f32	s16, s17
 8008f08:	eeb0 0a48 	vmov.f32	s0, s16
 8008f0c:	ecbd 8b02 	vpop	{d8}
 8008f10:	bd08      	pop	{r3, pc}

08008f12 <fminf>:
 8008f12:	b508      	push	{r3, lr}
 8008f14:	ed2d 8b02 	vpush	{d8}
 8008f18:	eeb0 8a40 	vmov.f32	s16, s0
 8008f1c:	eef0 8a60 	vmov.f32	s17, s1
 8008f20:	f000 f812 	bl	8008f48 <__fpclassifyf>
 8008f24:	b148      	cbz	r0, 8008f3a <fminf+0x28>
 8008f26:	eeb0 0a68 	vmov.f32	s0, s17
 8008f2a:	f000 f80d 	bl	8008f48 <__fpclassifyf>
 8008f2e:	b130      	cbz	r0, 8008f3e <fminf+0x2c>
 8008f30:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8008f34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f38:	d401      	bmi.n	8008f3e <fminf+0x2c>
 8008f3a:	eeb0 8a68 	vmov.f32	s16, s17
 8008f3e:	eeb0 0a48 	vmov.f32	s0, s16
 8008f42:	ecbd 8b02 	vpop	{d8}
 8008f46:	bd08      	pop	{r3, pc}

08008f48 <__fpclassifyf>:
 8008f48:	ee10 3a10 	vmov	r3, s0
 8008f4c:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 8008f50:	d00d      	beq.n	8008f6e <__fpclassifyf+0x26>
 8008f52:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 8008f56:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8008f5a:	d30a      	bcc.n	8008f72 <__fpclassifyf+0x2a>
 8008f5c:	4b07      	ldr	r3, [pc, #28]	; (8008f7c <__fpclassifyf+0x34>)
 8008f5e:	1e42      	subs	r2, r0, #1
 8008f60:	429a      	cmp	r2, r3
 8008f62:	d908      	bls.n	8008f76 <__fpclassifyf+0x2e>
 8008f64:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 8008f68:	4258      	negs	r0, r3
 8008f6a:	4158      	adcs	r0, r3
 8008f6c:	4770      	bx	lr
 8008f6e:	2002      	movs	r0, #2
 8008f70:	4770      	bx	lr
 8008f72:	2004      	movs	r0, #4
 8008f74:	4770      	bx	lr
 8008f76:	2003      	movs	r0, #3
 8008f78:	4770      	bx	lr
 8008f7a:	bf00      	nop
 8008f7c:	007ffffe 	.word	0x007ffffe

08008f80 <sinf>:
 8008f80:	ee10 3a10 	vmov	r3, s0
 8008f84:	b507      	push	{r0, r1, r2, lr}
 8008f86:	4a1d      	ldr	r2, [pc, #116]	; (8008ffc <sinf+0x7c>)
 8008f88:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	dc05      	bgt.n	8008f9c <sinf+0x1c>
 8008f90:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8009000 <sinf+0x80>
 8008f94:	2000      	movs	r0, #0
 8008f96:	f000 fd25 	bl	80099e4 <__kernel_sinf>
 8008f9a:	e004      	b.n	8008fa6 <sinf+0x26>
 8008f9c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008fa0:	db04      	blt.n	8008fac <sinf+0x2c>
 8008fa2:	ee30 0a40 	vsub.f32	s0, s0, s0
 8008fa6:	b003      	add	sp, #12
 8008fa8:	f85d fb04 	ldr.w	pc, [sp], #4
 8008fac:	4668      	mov	r0, sp
 8008fae:	f000 f90d 	bl	80091cc <__ieee754_rem_pio2f>
 8008fb2:	f000 0003 	and.w	r0, r0, #3
 8008fb6:	2801      	cmp	r0, #1
 8008fb8:	d008      	beq.n	8008fcc <sinf+0x4c>
 8008fba:	2802      	cmp	r0, #2
 8008fbc:	d00d      	beq.n	8008fda <sinf+0x5a>
 8008fbe:	b9b0      	cbnz	r0, 8008fee <sinf+0x6e>
 8008fc0:	2001      	movs	r0, #1
 8008fc2:	eddd 0a01 	vldr	s1, [sp, #4]
 8008fc6:	ed9d 0a00 	vldr	s0, [sp]
 8008fca:	e7e4      	b.n	8008f96 <sinf+0x16>
 8008fcc:	eddd 0a01 	vldr	s1, [sp, #4]
 8008fd0:	ed9d 0a00 	vldr	s0, [sp]
 8008fd4:	f000 fa26 	bl	8009424 <__kernel_cosf>
 8008fd8:	e7e5      	b.n	8008fa6 <sinf+0x26>
 8008fda:	2001      	movs	r0, #1
 8008fdc:	eddd 0a01 	vldr	s1, [sp, #4]
 8008fe0:	ed9d 0a00 	vldr	s0, [sp]
 8008fe4:	f000 fcfe 	bl	80099e4 <__kernel_sinf>
 8008fe8:	eeb1 0a40 	vneg.f32	s0, s0
 8008fec:	e7db      	b.n	8008fa6 <sinf+0x26>
 8008fee:	eddd 0a01 	vldr	s1, [sp, #4]
 8008ff2:	ed9d 0a00 	vldr	s0, [sp]
 8008ff6:	f000 fa15 	bl	8009424 <__kernel_cosf>
 8008ffa:	e7f5      	b.n	8008fe8 <sinf+0x68>
 8008ffc:	3f490fd8 	.word	0x3f490fd8
 8009000:	00000000 	.word	0x00000000

08009004 <fmodf>:
 8009004:	b5d0      	push	{r4, r6, r7, lr}
 8009006:	ed2d 8b02 	vpush	{d8}
 800900a:	b08a      	sub	sp, #40	; 0x28
 800900c:	eef0 8a40 	vmov.f32	s17, s0
 8009010:	eeb0 8a60 	vmov.f32	s16, s1
 8009014:	f000 f852 	bl	80090bc <__ieee754_fmodf>
 8009018:	4b26      	ldr	r3, [pc, #152]	; (80090b4 <fmodf+0xb0>)
 800901a:	f993 4000 	ldrsb.w	r4, [r3]
 800901e:	1c63      	adds	r3, r4, #1
 8009020:	d035      	beq.n	800908e <fmodf+0x8a>
 8009022:	eeb4 8a48 	vcmp.f32	s16, s16
 8009026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800902a:	d630      	bvs.n	800908e <fmodf+0x8a>
 800902c:	eef4 8a68 	vcmp.f32	s17, s17
 8009030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009034:	d62b      	bvs.n	800908e <fmodf+0x8a>
 8009036:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800903a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800903e:	d126      	bne.n	800908e <fmodf+0x8a>
 8009040:	2301      	movs	r3, #1
 8009042:	9300      	str	r3, [sp, #0]
 8009044:	4b1c      	ldr	r3, [pc, #112]	; (80090b8 <fmodf+0xb4>)
 8009046:	9301      	str	r3, [sp, #4]
 8009048:	ee18 0a90 	vmov	r0, s17
 800904c:	2300      	movs	r3, #0
 800904e:	9308      	str	r3, [sp, #32]
 8009050:	f7f7 fa26 	bl	80004a0 <__aeabi_f2d>
 8009054:	4606      	mov	r6, r0
 8009056:	460f      	mov	r7, r1
 8009058:	ee18 0a10 	vmov	r0, s16
 800905c:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8009060:	f7f7 fa1e 	bl	80004a0 <__aeabi_f2d>
 8009064:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009068:	b9ac      	cbnz	r4, 8009096 <fmodf+0x92>
 800906a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800906e:	4668      	mov	r0, sp
 8009070:	f000 fd00 	bl	8009a74 <matherr>
 8009074:	b1c8      	cbz	r0, 80090aa <fmodf+0xa6>
 8009076:	9b08      	ldr	r3, [sp, #32]
 8009078:	b11b      	cbz	r3, 8009082 <fmodf+0x7e>
 800907a:	f7fd fce7 	bl	8006a4c <__errno>
 800907e:	9b08      	ldr	r3, [sp, #32]
 8009080:	6003      	str	r3, [r0, #0]
 8009082:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009086:	f7f7 fd3b 	bl	8000b00 <__aeabi_d2f>
 800908a:	ee00 0a10 	vmov	s0, r0
 800908e:	b00a      	add	sp, #40	; 0x28
 8009090:	ecbd 8b02 	vpop	{d8}
 8009094:	bdd0      	pop	{r4, r6, r7, pc}
 8009096:	2200      	movs	r2, #0
 8009098:	2300      	movs	r3, #0
 800909a:	4610      	mov	r0, r2
 800909c:	4619      	mov	r1, r3
 800909e:	f7f7 fb81 	bl	80007a4 <__aeabi_ddiv>
 80090a2:	2c02      	cmp	r4, #2
 80090a4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80090a8:	d1e1      	bne.n	800906e <fmodf+0x6a>
 80090aa:	f7fd fccf 	bl	8006a4c <__errno>
 80090ae:	2321      	movs	r3, #33	; 0x21
 80090b0:	6003      	str	r3, [r0, #0]
 80090b2:	e7e0      	b.n	8009076 <fmodf+0x72>
 80090b4:	200001e4 	.word	0x200001e4
 80090b8:	08009ec7 	.word	0x08009ec7

080090bc <__ieee754_fmodf>:
 80090bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090be:	ee10 6a90 	vmov	r6, s1
 80090c2:	f036 4500 	bics.w	r5, r6, #2147483648	; 0x80000000
 80090c6:	ee10 3a10 	vmov	r3, s0
 80090ca:	d009      	beq.n	80090e0 <__ieee754_fmodf+0x24>
 80090cc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80090d0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80090d4:	ee10 7a10 	vmov	r7, s0
 80090d8:	da02      	bge.n	80090e0 <__ieee754_fmodf+0x24>
 80090da:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80090de:	dd0a      	ble.n	80090f6 <__ieee754_fmodf+0x3a>
 80090e0:	ee07 3a90 	vmov	s15, r3
 80090e4:	ee67 0aa0 	vmul.f32	s1, s15, s1
 80090e8:	eec0 7aa0 	vdiv.f32	s15, s1, s1
 80090ec:	ee17 3a90 	vmov	r3, s15
 80090f0:	ee00 3a10 	vmov	s0, r3
 80090f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090f6:	42a9      	cmp	r1, r5
 80090f8:	dbfa      	blt.n	80090f0 <__ieee754_fmodf+0x34>
 80090fa:	f003 4400 	and.w	r4, r3, #2147483648	; 0x80000000
 80090fe:	d105      	bne.n	800910c <__ieee754_fmodf+0x50>
 8009100:	4a30      	ldr	r2, [pc, #192]	; (80091c4 <__ieee754_fmodf+0x108>)
 8009102:	0fe3      	lsrs	r3, r4, #31
 8009104:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	e7f1      	b.n	80090f0 <__ieee754_fmodf+0x34>
 800910c:	4b2e      	ldr	r3, [pc, #184]	; (80091c8 <__ieee754_fmodf+0x10c>)
 800910e:	4299      	cmp	r1, r3
 8009110:	dc3e      	bgt.n	8009190 <__ieee754_fmodf+0xd4>
 8009112:	020a      	lsls	r2, r1, #8
 8009114:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 8009118:	2a00      	cmp	r2, #0
 800911a:	dc36      	bgt.n	800918a <__ieee754_fmodf+0xce>
 800911c:	429d      	cmp	r5, r3
 800911e:	dc3a      	bgt.n	8009196 <__ieee754_fmodf+0xda>
 8009120:	022b      	lsls	r3, r5, #8
 8009122:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 8009126:	005b      	lsls	r3, r3, #1
 8009128:	f102 32ff 	add.w	r2, r2, #4294967295
 800912c:	d5fb      	bpl.n	8009126 <__ieee754_fmodf+0x6a>
 800912e:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 8009132:	bfbb      	ittet	lt
 8009134:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 8009138:	1a1b      	sublt	r3, r3, r0
 800913a:	f3c7 0116 	ubfxge	r1, r7, #0, #23
 800913e:	4099      	lsllt	r1, r3
 8009140:	bfa8      	it	ge
 8009142:	f441 0100 	orrge.w	r1, r1, #8388608	; 0x800000
 8009146:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 800914a:	bfb5      	itete	lt
 800914c:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 8009150:	f3c6 0516 	ubfxge	r5, r6, #0, #23
 8009154:	1a9b      	sublt	r3, r3, r2
 8009156:	f445 0500 	orrge.w	r5, r5, #8388608	; 0x800000
 800915a:	bfb8      	it	lt
 800915c:	409d      	lsllt	r5, r3
 800915e:	1a80      	subs	r0, r0, r2
 8009160:	1b4b      	subs	r3, r1, r5
 8009162:	b9d8      	cbnz	r0, 800919c <__ieee754_fmodf+0xe0>
 8009164:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 8009168:	bf28      	it	cs
 800916a:	460b      	movcs	r3, r1
 800916c:	2b00      	cmp	r3, #0
 800916e:	d0c7      	beq.n	8009100 <__ieee754_fmodf+0x44>
 8009170:	4915      	ldr	r1, [pc, #84]	; (80091c8 <__ieee754_fmodf+0x10c>)
 8009172:	428b      	cmp	r3, r1
 8009174:	dd1a      	ble.n	80091ac <__ieee754_fmodf+0xf0>
 8009176:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 800917a:	db1a      	blt.n	80091b2 <__ieee754_fmodf+0xf6>
 800917c:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8009180:	4323      	orrs	r3, r4
 8009182:	327f      	adds	r2, #127	; 0x7f
 8009184:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8009188:	e7b2      	b.n	80090f0 <__ieee754_fmodf+0x34>
 800918a:	3801      	subs	r0, #1
 800918c:	0052      	lsls	r2, r2, #1
 800918e:	e7c3      	b.n	8009118 <__ieee754_fmodf+0x5c>
 8009190:	15c8      	asrs	r0, r1, #23
 8009192:	387f      	subs	r0, #127	; 0x7f
 8009194:	e7c2      	b.n	800911c <__ieee754_fmodf+0x60>
 8009196:	15ea      	asrs	r2, r5, #23
 8009198:	3a7f      	subs	r2, #127	; 0x7f
 800919a:	e7c8      	b.n	800912e <__ieee754_fmodf+0x72>
 800919c:	2b00      	cmp	r3, #0
 800919e:	da02      	bge.n	80091a6 <__ieee754_fmodf+0xea>
 80091a0:	0049      	lsls	r1, r1, #1
 80091a2:	3801      	subs	r0, #1
 80091a4:	e7dc      	b.n	8009160 <__ieee754_fmodf+0xa4>
 80091a6:	d0ab      	beq.n	8009100 <__ieee754_fmodf+0x44>
 80091a8:	0059      	lsls	r1, r3, #1
 80091aa:	e7fa      	b.n	80091a2 <__ieee754_fmodf+0xe6>
 80091ac:	005b      	lsls	r3, r3, #1
 80091ae:	3a01      	subs	r2, #1
 80091b0:	e7df      	b.n	8009172 <__ieee754_fmodf+0xb6>
 80091b2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80091b6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80091ba:	3282      	adds	r2, #130	; 0x82
 80091bc:	4113      	asrs	r3, r2
 80091be:	4323      	orrs	r3, r4
 80091c0:	e796      	b.n	80090f0 <__ieee754_fmodf+0x34>
 80091c2:	bf00      	nop
 80091c4:	08009ed0 	.word	0x08009ed0
 80091c8:	007fffff 	.word	0x007fffff

080091cc <__ieee754_rem_pio2f>:
 80091cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091ce:	ee10 6a10 	vmov	r6, s0
 80091d2:	4b86      	ldr	r3, [pc, #536]	; (80093ec <__ieee754_rem_pio2f+0x220>)
 80091d4:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 80091d8:	429c      	cmp	r4, r3
 80091da:	b087      	sub	sp, #28
 80091dc:	4605      	mov	r5, r0
 80091de:	dc05      	bgt.n	80091ec <__ieee754_rem_pio2f+0x20>
 80091e0:	2300      	movs	r3, #0
 80091e2:	ed85 0a00 	vstr	s0, [r5]
 80091e6:	6043      	str	r3, [r0, #4]
 80091e8:	2000      	movs	r0, #0
 80091ea:	e020      	b.n	800922e <__ieee754_rem_pio2f+0x62>
 80091ec:	4b80      	ldr	r3, [pc, #512]	; (80093f0 <__ieee754_rem_pio2f+0x224>)
 80091ee:	429c      	cmp	r4, r3
 80091f0:	dc38      	bgt.n	8009264 <__ieee754_rem_pio2f+0x98>
 80091f2:	2e00      	cmp	r6, #0
 80091f4:	f024 040f 	bic.w	r4, r4, #15
 80091f8:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 80093f4 <__ieee754_rem_pio2f+0x228>
 80091fc:	4b7e      	ldr	r3, [pc, #504]	; (80093f8 <__ieee754_rem_pio2f+0x22c>)
 80091fe:	dd18      	ble.n	8009232 <__ieee754_rem_pio2f+0x66>
 8009200:	429c      	cmp	r4, r3
 8009202:	ee70 7a47 	vsub.f32	s15, s0, s14
 8009206:	bf09      	itett	eq
 8009208:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 80093fc <__ieee754_rem_pio2f+0x230>
 800920c:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8009400 <__ieee754_rem_pio2f+0x234>
 8009210:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8009214:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8009404 <__ieee754_rem_pio2f+0x238>
 8009218:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800921c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009220:	edc0 6a00 	vstr	s13, [r0]
 8009224:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009228:	edc0 7a01 	vstr	s15, [r0, #4]
 800922c:	2001      	movs	r0, #1
 800922e:	b007      	add	sp, #28
 8009230:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009232:	429c      	cmp	r4, r3
 8009234:	ee70 7a07 	vadd.f32	s15, s0, s14
 8009238:	bf09      	itett	eq
 800923a:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 80093fc <__ieee754_rem_pio2f+0x230>
 800923e:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8009400 <__ieee754_rem_pio2f+0x234>
 8009242:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8009246:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8009404 <__ieee754_rem_pio2f+0x238>
 800924a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800924e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009252:	edc0 6a00 	vstr	s13, [r0]
 8009256:	ee77 7a87 	vadd.f32	s15, s15, s14
 800925a:	edc0 7a01 	vstr	s15, [r0, #4]
 800925e:	f04f 30ff 	mov.w	r0, #4294967295
 8009262:	e7e4      	b.n	800922e <__ieee754_rem_pio2f+0x62>
 8009264:	4b68      	ldr	r3, [pc, #416]	; (8009408 <__ieee754_rem_pio2f+0x23c>)
 8009266:	429c      	cmp	r4, r3
 8009268:	dc71      	bgt.n	800934e <__ieee754_rem_pio2f+0x182>
 800926a:	f000 fc05 	bl	8009a78 <fabsf>
 800926e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800940c <__ieee754_rem_pio2f+0x240>
 8009272:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8009276:	eee0 7a07 	vfma.f32	s15, s0, s14
 800927a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800927e:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8009282:	ee17 0a90 	vmov	r0, s15
 8009286:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80093f4 <__ieee754_rem_pio2f+0x228>
 800928a:	eeb1 7a46 	vneg.f32	s14, s12
 800928e:	eea7 0a27 	vfma.f32	s0, s14, s15
 8009292:	281f      	cmp	r0, #31
 8009294:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8009400 <__ieee754_rem_pio2f+0x234>
 8009298:	ee66 7a27 	vmul.f32	s15, s12, s15
 800929c:	ee70 6a67 	vsub.f32	s13, s0, s15
 80092a0:	ee16 3a90 	vmov	r3, s13
 80092a4:	dc1c      	bgt.n	80092e0 <__ieee754_rem_pio2f+0x114>
 80092a6:	1e47      	subs	r7, r0, #1
 80092a8:	4959      	ldr	r1, [pc, #356]	; (8009410 <__ieee754_rem_pio2f+0x244>)
 80092aa:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80092ae:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 80092b2:	428a      	cmp	r2, r1
 80092b4:	d014      	beq.n	80092e0 <__ieee754_rem_pio2f+0x114>
 80092b6:	602b      	str	r3, [r5, #0]
 80092b8:	ed95 7a00 	vldr	s14, [r5]
 80092bc:	ee30 0a47 	vsub.f32	s0, s0, s14
 80092c0:	2e00      	cmp	r6, #0
 80092c2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80092c6:	ed85 0a01 	vstr	s0, [r5, #4]
 80092ca:	dab0      	bge.n	800922e <__ieee754_rem_pio2f+0x62>
 80092cc:	eeb1 7a47 	vneg.f32	s14, s14
 80092d0:	eeb1 0a40 	vneg.f32	s0, s0
 80092d4:	ed85 7a00 	vstr	s14, [r5]
 80092d8:	ed85 0a01 	vstr	s0, [r5, #4]
 80092dc:	4240      	negs	r0, r0
 80092de:	e7a6      	b.n	800922e <__ieee754_rem_pio2f+0x62>
 80092e0:	15e4      	asrs	r4, r4, #23
 80092e2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80092e6:	1aa2      	subs	r2, r4, r2
 80092e8:	2a08      	cmp	r2, #8
 80092ea:	dde4      	ble.n	80092b6 <__ieee754_rem_pio2f+0xea>
 80092ec:	eddf 7a43 	vldr	s15, [pc, #268]	; 80093fc <__ieee754_rem_pio2f+0x230>
 80092f0:	eef0 6a40 	vmov.f32	s13, s0
 80092f4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80092f8:	ee30 0a66 	vsub.f32	s0, s0, s13
 80092fc:	eea7 0a27 	vfma.f32	s0, s14, s15
 8009300:	eddf 7a40 	vldr	s15, [pc, #256]	; 8009404 <__ieee754_rem_pio2f+0x238>
 8009304:	ee96 0a27 	vfnms.f32	s0, s12, s15
 8009308:	ee76 5ac0 	vsub.f32	s11, s13, s0
 800930c:	eef0 7a40 	vmov.f32	s15, s0
 8009310:	ee15 3a90 	vmov	r3, s11
 8009314:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8009318:	1aa4      	subs	r4, r4, r2
 800931a:	2c19      	cmp	r4, #25
 800931c:	dc04      	bgt.n	8009328 <__ieee754_rem_pio2f+0x15c>
 800931e:	edc5 5a00 	vstr	s11, [r5]
 8009322:	eeb0 0a66 	vmov.f32	s0, s13
 8009326:	e7c7      	b.n	80092b8 <__ieee754_rem_pio2f+0xec>
 8009328:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8009414 <__ieee754_rem_pio2f+0x248>
 800932c:	eeb0 0a66 	vmov.f32	s0, s13
 8009330:	eea7 0a25 	vfma.f32	s0, s14, s11
 8009334:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8009338:	eee7 7a25 	vfma.f32	s15, s14, s11
 800933c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8009418 <__ieee754_rem_pio2f+0x24c>
 8009340:	eed6 7a07 	vfnms.f32	s15, s12, s14
 8009344:	ee30 7a67 	vsub.f32	s14, s0, s15
 8009348:	ed85 7a00 	vstr	s14, [r5]
 800934c:	e7b4      	b.n	80092b8 <__ieee754_rem_pio2f+0xec>
 800934e:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8009352:	db06      	blt.n	8009362 <__ieee754_rem_pio2f+0x196>
 8009354:	ee70 7a40 	vsub.f32	s15, s0, s0
 8009358:	edc0 7a01 	vstr	s15, [r0, #4]
 800935c:	edc0 7a00 	vstr	s15, [r0]
 8009360:	e742      	b.n	80091e8 <__ieee754_rem_pio2f+0x1c>
 8009362:	15e2      	asrs	r2, r4, #23
 8009364:	3a86      	subs	r2, #134	; 0x86
 8009366:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 800936a:	ee07 3a90 	vmov	s15, r3
 800936e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8009372:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800941c <__ieee754_rem_pio2f+0x250>
 8009376:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800937a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800937e:	ed8d 7a03 	vstr	s14, [sp, #12]
 8009382:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009386:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800938a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800938e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009392:	ed8d 7a04 	vstr	s14, [sp, #16]
 8009396:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800939a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800939e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093a2:	edcd 7a05 	vstr	s15, [sp, #20]
 80093a6:	d11e      	bne.n	80093e6 <__ieee754_rem_pio2f+0x21a>
 80093a8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80093ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093b0:	bf0c      	ite	eq
 80093b2:	2301      	moveq	r3, #1
 80093b4:	2302      	movne	r3, #2
 80093b6:	491a      	ldr	r1, [pc, #104]	; (8009420 <__ieee754_rem_pio2f+0x254>)
 80093b8:	9101      	str	r1, [sp, #4]
 80093ba:	2102      	movs	r1, #2
 80093bc:	9100      	str	r1, [sp, #0]
 80093be:	a803      	add	r0, sp, #12
 80093c0:	4629      	mov	r1, r5
 80093c2:	f000 f88d 	bl	80094e0 <__kernel_rem_pio2f>
 80093c6:	2e00      	cmp	r6, #0
 80093c8:	f6bf af31 	bge.w	800922e <__ieee754_rem_pio2f+0x62>
 80093cc:	edd5 7a00 	vldr	s15, [r5]
 80093d0:	eef1 7a67 	vneg.f32	s15, s15
 80093d4:	edc5 7a00 	vstr	s15, [r5]
 80093d8:	edd5 7a01 	vldr	s15, [r5, #4]
 80093dc:	eef1 7a67 	vneg.f32	s15, s15
 80093e0:	edc5 7a01 	vstr	s15, [r5, #4]
 80093e4:	e77a      	b.n	80092dc <__ieee754_rem_pio2f+0x110>
 80093e6:	2303      	movs	r3, #3
 80093e8:	e7e5      	b.n	80093b6 <__ieee754_rem_pio2f+0x1ea>
 80093ea:	bf00      	nop
 80093ec:	3f490fd8 	.word	0x3f490fd8
 80093f0:	4016cbe3 	.word	0x4016cbe3
 80093f4:	3fc90f80 	.word	0x3fc90f80
 80093f8:	3fc90fd0 	.word	0x3fc90fd0
 80093fc:	37354400 	.word	0x37354400
 8009400:	37354443 	.word	0x37354443
 8009404:	2e85a308 	.word	0x2e85a308
 8009408:	43490f80 	.word	0x43490f80
 800940c:	3f22f984 	.word	0x3f22f984
 8009410:	08009ed8 	.word	0x08009ed8
 8009414:	2e85a300 	.word	0x2e85a300
 8009418:	248d3132 	.word	0x248d3132
 800941c:	43800000 	.word	0x43800000
 8009420:	08009f58 	.word	0x08009f58

08009424 <__kernel_cosf>:
 8009424:	ee10 3a10 	vmov	r3, s0
 8009428:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800942c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8009430:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009434:	da05      	bge.n	8009442 <__kernel_cosf+0x1e>
 8009436:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800943a:	ee17 2a90 	vmov	r2, s15
 800943e:	2a00      	cmp	r2, #0
 8009440:	d03b      	beq.n	80094ba <__kernel_cosf+0x96>
 8009442:	ee20 6a00 	vmul.f32	s12, s0, s0
 8009446:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800944a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80094c0 <__kernel_cosf+0x9c>
 800944e:	4a1d      	ldr	r2, [pc, #116]	; (80094c4 <__kernel_cosf+0xa0>)
 8009450:	ee66 7a07 	vmul.f32	s15, s12, s14
 8009454:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80094c8 <__kernel_cosf+0xa4>
 8009458:	eea6 7a25 	vfma.f32	s14, s12, s11
 800945c:	4293      	cmp	r3, r2
 800945e:	eddf 5a1b 	vldr	s11, [pc, #108]	; 80094cc <__kernel_cosf+0xa8>
 8009462:	eee7 5a06 	vfma.f32	s11, s14, s12
 8009466:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80094d0 <__kernel_cosf+0xac>
 800946a:	eea5 7a86 	vfma.f32	s14, s11, s12
 800946e:	eddf 5a19 	vldr	s11, [pc, #100]	; 80094d4 <__kernel_cosf+0xb0>
 8009472:	eee7 5a06 	vfma.f32	s11, s14, s12
 8009476:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80094d8 <__kernel_cosf+0xb4>
 800947a:	eea5 7a86 	vfma.f32	s14, s11, s12
 800947e:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8009482:	ee27 7a06 	vmul.f32	s14, s14, s12
 8009486:	eee6 0a07 	vfma.f32	s1, s12, s14
 800948a:	dc04      	bgt.n	8009496 <__kernel_cosf+0x72>
 800948c:	ee77 0ae0 	vsub.f32	s1, s15, s1
 8009490:	ee36 0ae0 	vsub.f32	s0, s13, s1
 8009494:	4770      	bx	lr
 8009496:	4a11      	ldr	r2, [pc, #68]	; (80094dc <__kernel_cosf+0xb8>)
 8009498:	4293      	cmp	r3, r2
 800949a:	bfda      	itte	le
 800949c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80094a0:	ee07 3a10 	vmovle	s14, r3
 80094a4:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 80094a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80094ac:	ee36 0ac7 	vsub.f32	s0, s13, s14
 80094b0:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80094b4:	ee30 0a67 	vsub.f32	s0, s0, s15
 80094b8:	4770      	bx	lr
 80094ba:	eeb0 0a66 	vmov.f32	s0, s13
 80094be:	4770      	bx	lr
 80094c0:	ad47d74e 	.word	0xad47d74e
 80094c4:	3e999999 	.word	0x3e999999
 80094c8:	310f74f6 	.word	0x310f74f6
 80094cc:	b493f27c 	.word	0xb493f27c
 80094d0:	37d00d01 	.word	0x37d00d01
 80094d4:	bab60b61 	.word	0xbab60b61
 80094d8:	3d2aaaab 	.word	0x3d2aaaab
 80094dc:	3f480000 	.word	0x3f480000

080094e0 <__kernel_rem_pio2f>:
 80094e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094e4:	ed2d 8b04 	vpush	{d8-d9}
 80094e8:	b0d7      	sub	sp, #348	; 0x15c
 80094ea:	469b      	mov	fp, r3
 80094ec:	460e      	mov	r6, r1
 80094ee:	4bbe      	ldr	r3, [pc, #760]	; (80097e8 <__kernel_rem_pio2f+0x308>)
 80094f0:	9964      	ldr	r1, [sp, #400]	; 0x190
 80094f2:	9002      	str	r0, [sp, #8]
 80094f4:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 80094f8:	9865      	ldr	r0, [sp, #404]	; 0x194
 80094fa:	ed9f 7abf 	vldr	s14, [pc, #764]	; 80097f8 <__kernel_rem_pio2f+0x318>
 80094fe:	1ed1      	subs	r1, r2, #3
 8009500:	2308      	movs	r3, #8
 8009502:	fb91 f1f3 	sdiv	r1, r1, r3
 8009506:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800950a:	f10b 3aff 	add.w	sl, fp, #4294967295
 800950e:	1c4c      	adds	r4, r1, #1
 8009510:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 8009514:	eba1 050a 	sub.w	r5, r1, sl
 8009518:	aa1a      	add	r2, sp, #104	; 0x68
 800951a:	eb09 070a 	add.w	r7, r9, sl
 800951e:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 8009522:	4696      	mov	lr, r2
 8009524:	2300      	movs	r3, #0
 8009526:	42bb      	cmp	r3, r7
 8009528:	dd0f      	ble.n	800954a <__kernel_rem_pio2f+0x6a>
 800952a:	af42      	add	r7, sp, #264	; 0x108
 800952c:	2200      	movs	r2, #0
 800952e:	454a      	cmp	r2, r9
 8009530:	dc27      	bgt.n	8009582 <__kernel_rem_pio2f+0xa2>
 8009532:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 8009536:	eb0b 0302 	add.w	r3, fp, r2
 800953a:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 800953e:	9d02      	ldr	r5, [sp, #8]
 8009540:	eddf 7aad 	vldr	s15, [pc, #692]	; 80097f8 <__kernel_rem_pio2f+0x318>
 8009544:	f04f 0c00 	mov.w	ip, #0
 8009548:	e015      	b.n	8009576 <__kernel_rem_pio2f+0x96>
 800954a:	42dd      	cmn	r5, r3
 800954c:	bf5d      	ittte	pl
 800954e:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 8009552:	ee07 2a90 	vmovpl	s15, r2
 8009556:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800955a:	eef0 7a47 	vmovmi.f32	s15, s14
 800955e:	ecee 7a01 	vstmia	lr!, {s15}
 8009562:	3301      	adds	r3, #1
 8009564:	e7df      	b.n	8009526 <__kernel_rem_pio2f+0x46>
 8009566:	ecf5 6a01 	vldmia	r5!, {s13}
 800956a:	ed33 7a01 	vldmdb	r3!, {s14}
 800956e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009572:	f10c 0c01 	add.w	ip, ip, #1
 8009576:	45d4      	cmp	ip, sl
 8009578:	ddf5      	ble.n	8009566 <__kernel_rem_pio2f+0x86>
 800957a:	ece7 7a01 	vstmia	r7!, {s15}
 800957e:	3201      	adds	r2, #1
 8009580:	e7d5      	b.n	800952e <__kernel_rem_pio2f+0x4e>
 8009582:	ab06      	add	r3, sp, #24
 8009584:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8009588:	9304      	str	r3, [sp, #16]
 800958a:	eddf 8a9a 	vldr	s17, [pc, #616]	; 80097f4 <__kernel_rem_pio2f+0x314>
 800958e:	ed9f 9a98 	vldr	s18, [pc, #608]	; 80097f0 <__kernel_rem_pio2f+0x310>
 8009592:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8009596:	9303      	str	r3, [sp, #12]
 8009598:	464d      	mov	r5, r9
 800959a:	ab56      	add	r3, sp, #344	; 0x158
 800959c:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 80095a0:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80095a4:	3f01      	subs	r7, #1
 80095a6:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 80095aa:	00bf      	lsls	r7, r7, #2
 80095ac:	ab56      	add	r3, sp, #344	; 0x158
 80095ae:	19da      	adds	r2, r3, r7
 80095b0:	3a4c      	subs	r2, #76	; 0x4c
 80095b2:	2300      	movs	r3, #0
 80095b4:	1ae9      	subs	r1, r5, r3
 80095b6:	2900      	cmp	r1, #0
 80095b8:	dc4c      	bgt.n	8009654 <__kernel_rem_pio2f+0x174>
 80095ba:	4620      	mov	r0, r4
 80095bc:	f000 faa6 	bl	8009b0c <scalbnf>
 80095c0:	eeb0 8a40 	vmov.f32	s16, s0
 80095c4:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80095c8:	ee28 0a00 	vmul.f32	s0, s16, s0
 80095cc:	f000 fa5c 	bl	8009a88 <floorf>
 80095d0:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80095d4:	eea0 8a67 	vfms.f32	s16, s0, s15
 80095d8:	2c00      	cmp	r4, #0
 80095da:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80095de:	edcd 7a01 	vstr	s15, [sp, #4]
 80095e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80095e6:	ee38 8a67 	vsub.f32	s16, s16, s15
 80095ea:	dd48      	ble.n	800967e <__kernel_rem_pio2f+0x19e>
 80095ec:	1e69      	subs	r1, r5, #1
 80095ee:	ab06      	add	r3, sp, #24
 80095f0:	f1c4 0008 	rsb	r0, r4, #8
 80095f4:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 80095f8:	9a01      	ldr	r2, [sp, #4]
 80095fa:	fa4c f300 	asr.w	r3, ip, r0
 80095fe:	441a      	add	r2, r3
 8009600:	4083      	lsls	r3, r0
 8009602:	9201      	str	r2, [sp, #4]
 8009604:	ebac 0203 	sub.w	r2, ip, r3
 8009608:	ab06      	add	r3, sp, #24
 800960a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800960e:	f1c4 0307 	rsb	r3, r4, #7
 8009612:	fa42 f803 	asr.w	r8, r2, r3
 8009616:	f1b8 0f00 	cmp.w	r8, #0
 800961a:	dd41      	ble.n	80096a0 <__kernel_rem_pio2f+0x1c0>
 800961c:	9b01      	ldr	r3, [sp, #4]
 800961e:	2000      	movs	r0, #0
 8009620:	3301      	adds	r3, #1
 8009622:	9301      	str	r3, [sp, #4]
 8009624:	4601      	mov	r1, r0
 8009626:	4285      	cmp	r5, r0
 8009628:	dc6d      	bgt.n	8009706 <__kernel_rem_pio2f+0x226>
 800962a:	2c00      	cmp	r4, #0
 800962c:	dd04      	ble.n	8009638 <__kernel_rem_pio2f+0x158>
 800962e:	2c01      	cmp	r4, #1
 8009630:	d07e      	beq.n	8009730 <__kernel_rem_pio2f+0x250>
 8009632:	2c02      	cmp	r4, #2
 8009634:	f000 8086 	beq.w	8009744 <__kernel_rem_pio2f+0x264>
 8009638:	f1b8 0f02 	cmp.w	r8, #2
 800963c:	d130      	bne.n	80096a0 <__kernel_rem_pio2f+0x1c0>
 800963e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8009642:	ee30 8a48 	vsub.f32	s16, s0, s16
 8009646:	b359      	cbz	r1, 80096a0 <__kernel_rem_pio2f+0x1c0>
 8009648:	4620      	mov	r0, r4
 800964a:	f000 fa5f 	bl	8009b0c <scalbnf>
 800964e:	ee38 8a40 	vsub.f32	s16, s16, s0
 8009652:	e025      	b.n	80096a0 <__kernel_rem_pio2f+0x1c0>
 8009654:	ee60 7a28 	vmul.f32	s15, s0, s17
 8009658:	a806      	add	r0, sp, #24
 800965a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800965e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009662:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8009666:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800966a:	ee10 1a10 	vmov	r1, s0
 800966e:	ed32 0a01 	vldmdb	r2!, {s0}
 8009672:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 8009676:	ee37 0a80 	vadd.f32	s0, s15, s0
 800967a:	3301      	adds	r3, #1
 800967c:	e79a      	b.n	80095b4 <__kernel_rem_pio2f+0xd4>
 800967e:	d106      	bne.n	800968e <__kernel_rem_pio2f+0x1ae>
 8009680:	1e6b      	subs	r3, r5, #1
 8009682:	aa06      	add	r2, sp, #24
 8009684:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009688:	ea4f 2822 	mov.w	r8, r2, asr #8
 800968c:	e7c3      	b.n	8009616 <__kernel_rem_pio2f+0x136>
 800968e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8009692:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8009696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800969a:	da31      	bge.n	8009700 <__kernel_rem_pio2f+0x220>
 800969c:	f04f 0800 	mov.w	r8, #0
 80096a0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80096a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096a8:	f040 80a8 	bne.w	80097fc <__kernel_rem_pio2f+0x31c>
 80096ac:	1e6b      	subs	r3, r5, #1
 80096ae:	4618      	mov	r0, r3
 80096b0:	2200      	movs	r2, #0
 80096b2:	4548      	cmp	r0, r9
 80096b4:	da4d      	bge.n	8009752 <__kernel_rem_pio2f+0x272>
 80096b6:	2a00      	cmp	r2, #0
 80096b8:	f000 8087 	beq.w	80097ca <__kernel_rem_pio2f+0x2ea>
 80096bc:	aa06      	add	r2, sp, #24
 80096be:	3c08      	subs	r4, #8
 80096c0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80096c4:	2900      	cmp	r1, #0
 80096c6:	f000 808d 	beq.w	80097e4 <__kernel_rem_pio2f+0x304>
 80096ca:	4620      	mov	r0, r4
 80096cc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80096d0:	9302      	str	r3, [sp, #8]
 80096d2:	f000 fa1b 	bl	8009b0c <scalbnf>
 80096d6:	9b02      	ldr	r3, [sp, #8]
 80096d8:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80097f4 <__kernel_rem_pio2f+0x314>
 80096dc:	0099      	lsls	r1, r3, #2
 80096de:	aa42      	add	r2, sp, #264	; 0x108
 80096e0:	1850      	adds	r0, r2, r1
 80096e2:	1d05      	adds	r5, r0, #4
 80096e4:	461c      	mov	r4, r3
 80096e6:	2c00      	cmp	r4, #0
 80096e8:	f280 80b8 	bge.w	800985c <__kernel_rem_pio2f+0x37c>
 80096ec:	2500      	movs	r5, #0
 80096ee:	1b5c      	subs	r4, r3, r5
 80096f0:	2c00      	cmp	r4, #0
 80096f2:	f2c0 80d8 	blt.w	80098a6 <__kernel_rem_pio2f+0x3c6>
 80096f6:	4f3d      	ldr	r7, [pc, #244]	; (80097ec <__kernel_rem_pio2f+0x30c>)
 80096f8:	eddf 7a3f 	vldr	s15, [pc, #252]	; 80097f8 <__kernel_rem_pio2f+0x318>
 80096fc:	2400      	movs	r4, #0
 80096fe:	e0c6      	b.n	800988e <__kernel_rem_pio2f+0x3ae>
 8009700:	f04f 0802 	mov.w	r8, #2
 8009704:	e78a      	b.n	800961c <__kernel_rem_pio2f+0x13c>
 8009706:	ab06      	add	r3, sp, #24
 8009708:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800970c:	b949      	cbnz	r1, 8009722 <__kernel_rem_pio2f+0x242>
 800970e:	b12b      	cbz	r3, 800971c <__kernel_rem_pio2f+0x23c>
 8009710:	aa06      	add	r2, sp, #24
 8009712:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8009716:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800971a:	2301      	movs	r3, #1
 800971c:	3001      	adds	r0, #1
 800971e:	4619      	mov	r1, r3
 8009720:	e781      	b.n	8009626 <__kernel_rem_pio2f+0x146>
 8009722:	aa06      	add	r2, sp, #24
 8009724:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8009728:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800972c:	460b      	mov	r3, r1
 800972e:	e7f5      	b.n	800971c <__kernel_rem_pio2f+0x23c>
 8009730:	1e68      	subs	r0, r5, #1
 8009732:	ab06      	add	r3, sp, #24
 8009734:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8009738:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800973c:	aa06      	add	r2, sp, #24
 800973e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8009742:	e779      	b.n	8009638 <__kernel_rem_pio2f+0x158>
 8009744:	1e68      	subs	r0, r5, #1
 8009746:	ab06      	add	r3, sp, #24
 8009748:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800974c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009750:	e7f4      	b.n	800973c <__kernel_rem_pio2f+0x25c>
 8009752:	a906      	add	r1, sp, #24
 8009754:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8009758:	3801      	subs	r0, #1
 800975a:	430a      	orrs	r2, r1
 800975c:	e7a9      	b.n	80096b2 <__kernel_rem_pio2f+0x1d2>
 800975e:	f10c 0c01 	add.w	ip, ip, #1
 8009762:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009766:	2a00      	cmp	r2, #0
 8009768:	d0f9      	beq.n	800975e <__kernel_rem_pio2f+0x27e>
 800976a:	eb0b 0305 	add.w	r3, fp, r5
 800976e:	aa1a      	add	r2, sp, #104	; 0x68
 8009770:	009b      	lsls	r3, r3, #2
 8009772:	1898      	adds	r0, r3, r2
 8009774:	3004      	adds	r0, #4
 8009776:	1c69      	adds	r1, r5, #1
 8009778:	3704      	adds	r7, #4
 800977a:	2200      	movs	r2, #0
 800977c:	4465      	add	r5, ip
 800977e:	9005      	str	r0, [sp, #20]
 8009780:	428d      	cmp	r5, r1
 8009782:	f6ff af0a 	blt.w	800959a <__kernel_rem_pio2f+0xba>
 8009786:	a81a      	add	r0, sp, #104	; 0x68
 8009788:	eb02 0c03 	add.w	ip, r2, r3
 800978c:	4484      	add	ip, r0
 800978e:	9803      	ldr	r0, [sp, #12]
 8009790:	f8dd e008 	ldr.w	lr, [sp, #8]
 8009794:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8009798:	9001      	str	r0, [sp, #4]
 800979a:	ee07 0a90 	vmov	s15, r0
 800979e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80097a2:	9805      	ldr	r0, [sp, #20]
 80097a4:	edcc 7a00 	vstr	s15, [ip]
 80097a8:	eddf 7a13 	vldr	s15, [pc, #76]	; 80097f8 <__kernel_rem_pio2f+0x318>
 80097ac:	eb00 0802 	add.w	r8, r0, r2
 80097b0:	f04f 0c00 	mov.w	ip, #0
 80097b4:	45d4      	cmp	ip, sl
 80097b6:	dd0c      	ble.n	80097d2 <__kernel_rem_pio2f+0x2f2>
 80097b8:	eb02 0c07 	add.w	ip, r2, r7
 80097bc:	a842      	add	r0, sp, #264	; 0x108
 80097be:	4484      	add	ip, r0
 80097c0:	edcc 7a01 	vstr	s15, [ip, #4]
 80097c4:	3101      	adds	r1, #1
 80097c6:	3204      	adds	r2, #4
 80097c8:	e7da      	b.n	8009780 <__kernel_rem_pio2f+0x2a0>
 80097ca:	9b04      	ldr	r3, [sp, #16]
 80097cc:	f04f 0c01 	mov.w	ip, #1
 80097d0:	e7c7      	b.n	8009762 <__kernel_rem_pio2f+0x282>
 80097d2:	ecfe 6a01 	vldmia	lr!, {s13}
 80097d6:	ed38 7a01 	vldmdb	r8!, {s14}
 80097da:	f10c 0c01 	add.w	ip, ip, #1
 80097de:	eee6 7a87 	vfma.f32	s15, s13, s14
 80097e2:	e7e7      	b.n	80097b4 <__kernel_rem_pio2f+0x2d4>
 80097e4:	3b01      	subs	r3, #1
 80097e6:	e769      	b.n	80096bc <__kernel_rem_pio2f+0x1dc>
 80097e8:	0800a29c 	.word	0x0800a29c
 80097ec:	0800a270 	.word	0x0800a270
 80097f0:	43800000 	.word	0x43800000
 80097f4:	3b800000 	.word	0x3b800000
 80097f8:	00000000 	.word	0x00000000
 80097fc:	4260      	negs	r0, r4
 80097fe:	eeb0 0a48 	vmov.f32	s0, s16
 8009802:	f000 f983 	bl	8009b0c <scalbnf>
 8009806:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 80097f0 <__kernel_rem_pio2f+0x310>
 800980a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800980e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009812:	db1a      	blt.n	800984a <__kernel_rem_pio2f+0x36a>
 8009814:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 80097f4 <__kernel_rem_pio2f+0x314>
 8009818:	ee60 7a27 	vmul.f32	s15, s0, s15
 800981c:	aa06      	add	r2, sp, #24
 800981e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009822:	a906      	add	r1, sp, #24
 8009824:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009828:	3408      	adds	r4, #8
 800982a:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800982e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009832:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8009836:	ee10 3a10 	vmov	r3, s0
 800983a:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800983e:	1c6b      	adds	r3, r5, #1
 8009840:	ee17 2a90 	vmov	r2, s15
 8009844:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009848:	e73f      	b.n	80096ca <__kernel_rem_pio2f+0x1ea>
 800984a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800984e:	aa06      	add	r2, sp, #24
 8009850:	ee10 3a10 	vmov	r3, s0
 8009854:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8009858:	462b      	mov	r3, r5
 800985a:	e736      	b.n	80096ca <__kernel_rem_pio2f+0x1ea>
 800985c:	aa06      	add	r2, sp, #24
 800985e:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8009862:	9202      	str	r2, [sp, #8]
 8009864:	ee07 2a90 	vmov	s15, r2
 8009868:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800986c:	3c01      	subs	r4, #1
 800986e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8009872:	ee20 0a07 	vmul.f32	s0, s0, s14
 8009876:	ed65 7a01 	vstmdb	r5!, {s15}
 800987a:	e734      	b.n	80096e6 <__kernel_rem_pio2f+0x206>
 800987c:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 8009880:	ecf7 6a01 	vldmia	r7!, {s13}
 8009884:	ed9c 7a00 	vldr	s14, [ip]
 8009888:	eee6 7a87 	vfma.f32	s15, s13, s14
 800988c:	3401      	adds	r4, #1
 800988e:	454c      	cmp	r4, r9
 8009890:	dc01      	bgt.n	8009896 <__kernel_rem_pio2f+0x3b6>
 8009892:	42a5      	cmp	r5, r4
 8009894:	daf2      	bge.n	800987c <__kernel_rem_pio2f+0x39c>
 8009896:	aa56      	add	r2, sp, #344	; 0x158
 8009898:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 800989c:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 80098a0:	3501      	adds	r5, #1
 80098a2:	3804      	subs	r0, #4
 80098a4:	e723      	b.n	80096ee <__kernel_rem_pio2f+0x20e>
 80098a6:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80098a8:	2a03      	cmp	r2, #3
 80098aa:	d84d      	bhi.n	8009948 <__kernel_rem_pio2f+0x468>
 80098ac:	e8df f002 	tbb	[pc, r2]
 80098b0:	021f1f3e 	.word	0x021f1f3e
 80098b4:	aa56      	add	r2, sp, #344	; 0x158
 80098b6:	4411      	add	r1, r2
 80098b8:	399c      	subs	r1, #156	; 0x9c
 80098ba:	4608      	mov	r0, r1
 80098bc:	461c      	mov	r4, r3
 80098be:	2c00      	cmp	r4, #0
 80098c0:	dc5f      	bgt.n	8009982 <__kernel_rem_pio2f+0x4a2>
 80098c2:	4608      	mov	r0, r1
 80098c4:	461c      	mov	r4, r3
 80098c6:	2c01      	cmp	r4, #1
 80098c8:	dc6b      	bgt.n	80099a2 <__kernel_rem_pio2f+0x4c2>
 80098ca:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 80097f8 <__kernel_rem_pio2f+0x318>
 80098ce:	2b01      	cmp	r3, #1
 80098d0:	dc77      	bgt.n	80099c2 <__kernel_rem_pio2f+0x4e2>
 80098d2:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 80098d6:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 80098da:	f1b8 0f00 	cmp.w	r8, #0
 80098de:	d176      	bne.n	80099ce <__kernel_rem_pio2f+0x4ee>
 80098e0:	edc6 6a00 	vstr	s13, [r6]
 80098e4:	ed86 7a01 	vstr	s14, [r6, #4]
 80098e8:	edc6 7a02 	vstr	s15, [r6, #8]
 80098ec:	e02c      	b.n	8009948 <__kernel_rem_pio2f+0x468>
 80098ee:	aa56      	add	r2, sp, #344	; 0x158
 80098f0:	4411      	add	r1, r2
 80098f2:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 80097f8 <__kernel_rem_pio2f+0x318>
 80098f6:	399c      	subs	r1, #156	; 0x9c
 80098f8:	4618      	mov	r0, r3
 80098fa:	2800      	cmp	r0, #0
 80098fc:	da32      	bge.n	8009964 <__kernel_rem_pio2f+0x484>
 80098fe:	f1b8 0f00 	cmp.w	r8, #0
 8009902:	d035      	beq.n	8009970 <__kernel_rem_pio2f+0x490>
 8009904:	eef1 7a47 	vneg.f32	s15, s14
 8009908:	edc6 7a00 	vstr	s15, [r6]
 800990c:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8009910:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009914:	a82f      	add	r0, sp, #188	; 0xbc
 8009916:	2101      	movs	r1, #1
 8009918:	428b      	cmp	r3, r1
 800991a:	da2c      	bge.n	8009976 <__kernel_rem_pio2f+0x496>
 800991c:	f1b8 0f00 	cmp.w	r8, #0
 8009920:	d001      	beq.n	8009926 <__kernel_rem_pio2f+0x446>
 8009922:	eef1 7a67 	vneg.f32	s15, s15
 8009926:	edc6 7a01 	vstr	s15, [r6, #4]
 800992a:	e00d      	b.n	8009948 <__kernel_rem_pio2f+0x468>
 800992c:	aa56      	add	r2, sp, #344	; 0x158
 800992e:	4411      	add	r1, r2
 8009930:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 80097f8 <__kernel_rem_pio2f+0x318>
 8009934:	399c      	subs	r1, #156	; 0x9c
 8009936:	2b00      	cmp	r3, #0
 8009938:	da0e      	bge.n	8009958 <__kernel_rem_pio2f+0x478>
 800993a:	f1b8 0f00 	cmp.w	r8, #0
 800993e:	d001      	beq.n	8009944 <__kernel_rem_pio2f+0x464>
 8009940:	eef1 7a67 	vneg.f32	s15, s15
 8009944:	edc6 7a00 	vstr	s15, [r6]
 8009948:	9b01      	ldr	r3, [sp, #4]
 800994a:	f003 0007 	and.w	r0, r3, #7
 800994e:	b057      	add	sp, #348	; 0x15c
 8009950:	ecbd 8b04 	vpop	{d8-d9}
 8009954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009958:	ed31 7a01 	vldmdb	r1!, {s14}
 800995c:	3b01      	subs	r3, #1
 800995e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009962:	e7e8      	b.n	8009936 <__kernel_rem_pio2f+0x456>
 8009964:	ed71 7a01 	vldmdb	r1!, {s15}
 8009968:	3801      	subs	r0, #1
 800996a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800996e:	e7c4      	b.n	80098fa <__kernel_rem_pio2f+0x41a>
 8009970:	eef0 7a47 	vmov.f32	s15, s14
 8009974:	e7c8      	b.n	8009908 <__kernel_rem_pio2f+0x428>
 8009976:	ecb0 7a01 	vldmia	r0!, {s14}
 800997a:	3101      	adds	r1, #1
 800997c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009980:	e7ca      	b.n	8009918 <__kernel_rem_pio2f+0x438>
 8009982:	ed50 7a02 	vldr	s15, [r0, #-8]
 8009986:	ed70 6a01 	vldmdb	r0!, {s13}
 800998a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800998e:	3c01      	subs	r4, #1
 8009990:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009994:	ed00 7a01 	vstr	s14, [r0, #-4]
 8009998:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800999c:	edc0 7a00 	vstr	s15, [r0]
 80099a0:	e78d      	b.n	80098be <__kernel_rem_pio2f+0x3de>
 80099a2:	ed50 7a02 	vldr	s15, [r0, #-8]
 80099a6:	ed70 6a01 	vldmdb	r0!, {s13}
 80099aa:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80099ae:	3c01      	subs	r4, #1
 80099b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80099b4:	ed00 7a01 	vstr	s14, [r0, #-4]
 80099b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099bc:	edc0 7a00 	vstr	s15, [r0]
 80099c0:	e781      	b.n	80098c6 <__kernel_rem_pio2f+0x3e6>
 80099c2:	ed31 7a01 	vldmdb	r1!, {s14}
 80099c6:	3b01      	subs	r3, #1
 80099c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80099cc:	e77f      	b.n	80098ce <__kernel_rem_pio2f+0x3ee>
 80099ce:	eef1 6a66 	vneg.f32	s13, s13
 80099d2:	eeb1 7a47 	vneg.f32	s14, s14
 80099d6:	edc6 6a00 	vstr	s13, [r6]
 80099da:	ed86 7a01 	vstr	s14, [r6, #4]
 80099de:	eef1 7a67 	vneg.f32	s15, s15
 80099e2:	e781      	b.n	80098e8 <__kernel_rem_pio2f+0x408>

080099e4 <__kernel_sinf>:
 80099e4:	ee10 3a10 	vmov	r3, s0
 80099e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80099ec:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80099f0:	da04      	bge.n	80099fc <__kernel_sinf+0x18>
 80099f2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80099f6:	ee17 3a90 	vmov	r3, s15
 80099fa:	b35b      	cbz	r3, 8009a54 <__kernel_sinf+0x70>
 80099fc:	ee20 7a00 	vmul.f32	s14, s0, s0
 8009a00:	eddf 7a15 	vldr	s15, [pc, #84]	; 8009a58 <__kernel_sinf+0x74>
 8009a04:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8009a5c <__kernel_sinf+0x78>
 8009a08:	eea7 6a27 	vfma.f32	s12, s14, s15
 8009a0c:	eddf 7a14 	vldr	s15, [pc, #80]	; 8009a60 <__kernel_sinf+0x7c>
 8009a10:	eee6 7a07 	vfma.f32	s15, s12, s14
 8009a14:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8009a64 <__kernel_sinf+0x80>
 8009a18:	eea7 6a87 	vfma.f32	s12, s15, s14
 8009a1c:	eddf 7a12 	vldr	s15, [pc, #72]	; 8009a68 <__kernel_sinf+0x84>
 8009a20:	ee60 6a07 	vmul.f32	s13, s0, s14
 8009a24:	eee6 7a07 	vfma.f32	s15, s12, s14
 8009a28:	b930      	cbnz	r0, 8009a38 <__kernel_sinf+0x54>
 8009a2a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8009a6c <__kernel_sinf+0x88>
 8009a2e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8009a32:	eea6 0a26 	vfma.f32	s0, s12, s13
 8009a36:	4770      	bx	lr
 8009a38:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8009a3c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8009a40:	eee0 7a86 	vfma.f32	s15, s1, s12
 8009a44:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8009a48:	eddf 7a09 	vldr	s15, [pc, #36]	; 8009a70 <__kernel_sinf+0x8c>
 8009a4c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8009a50:	ee30 0a60 	vsub.f32	s0, s0, s1
 8009a54:	4770      	bx	lr
 8009a56:	bf00      	nop
 8009a58:	2f2ec9d3 	.word	0x2f2ec9d3
 8009a5c:	b2d72f34 	.word	0xb2d72f34
 8009a60:	3638ef1b 	.word	0x3638ef1b
 8009a64:	b9500d01 	.word	0xb9500d01
 8009a68:	3c088889 	.word	0x3c088889
 8009a6c:	be2aaaab 	.word	0xbe2aaaab
 8009a70:	3e2aaaab 	.word	0x3e2aaaab

08009a74 <matherr>:
 8009a74:	2000      	movs	r0, #0
 8009a76:	4770      	bx	lr

08009a78 <fabsf>:
 8009a78:	ee10 3a10 	vmov	r3, s0
 8009a7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009a80:	ee00 3a10 	vmov	s0, r3
 8009a84:	4770      	bx	lr
	...

08009a88 <floorf>:
 8009a88:	ee10 3a10 	vmov	r3, s0
 8009a8c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009a90:	0dca      	lsrs	r2, r1, #23
 8009a92:	3a7f      	subs	r2, #127	; 0x7f
 8009a94:	2a16      	cmp	r2, #22
 8009a96:	dc2a      	bgt.n	8009aee <floorf+0x66>
 8009a98:	2a00      	cmp	r2, #0
 8009a9a:	da11      	bge.n	8009ac0 <floorf+0x38>
 8009a9c:	eddf 7a18 	vldr	s15, [pc, #96]	; 8009b00 <floorf+0x78>
 8009aa0:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009aa4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009aa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009aac:	dd05      	ble.n	8009aba <floorf+0x32>
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	da23      	bge.n	8009afa <floorf+0x72>
 8009ab2:	4a14      	ldr	r2, [pc, #80]	; (8009b04 <floorf+0x7c>)
 8009ab4:	2900      	cmp	r1, #0
 8009ab6:	bf18      	it	ne
 8009ab8:	4613      	movne	r3, r2
 8009aba:	ee00 3a10 	vmov	s0, r3
 8009abe:	4770      	bx	lr
 8009ac0:	4911      	ldr	r1, [pc, #68]	; (8009b08 <floorf+0x80>)
 8009ac2:	4111      	asrs	r1, r2
 8009ac4:	420b      	tst	r3, r1
 8009ac6:	d0fa      	beq.n	8009abe <floorf+0x36>
 8009ac8:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8009b00 <floorf+0x78>
 8009acc:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009ad0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ad8:	ddef      	ble.n	8009aba <floorf+0x32>
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	bfbe      	ittt	lt
 8009ade:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8009ae2:	fa40 f202 	asrlt.w	r2, r0, r2
 8009ae6:	189b      	addlt	r3, r3, r2
 8009ae8:	ea23 0301 	bic.w	r3, r3, r1
 8009aec:	e7e5      	b.n	8009aba <floorf+0x32>
 8009aee:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8009af2:	d3e4      	bcc.n	8009abe <floorf+0x36>
 8009af4:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009af8:	4770      	bx	lr
 8009afa:	2300      	movs	r3, #0
 8009afc:	e7dd      	b.n	8009aba <floorf+0x32>
 8009afe:	bf00      	nop
 8009b00:	7149f2ca 	.word	0x7149f2ca
 8009b04:	bf800000 	.word	0xbf800000
 8009b08:	007fffff 	.word	0x007fffff

08009b0c <scalbnf>:
 8009b0c:	b508      	push	{r3, lr}
 8009b0e:	ee10 2a10 	vmov	r2, s0
 8009b12:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8009b16:	ed2d 8b02 	vpush	{d8}
 8009b1a:	eef0 0a40 	vmov.f32	s1, s0
 8009b1e:	d004      	beq.n	8009b2a <scalbnf+0x1e>
 8009b20:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009b24:	d306      	bcc.n	8009b34 <scalbnf+0x28>
 8009b26:	ee70 0a00 	vadd.f32	s1, s0, s0
 8009b2a:	ecbd 8b02 	vpop	{d8}
 8009b2e:	eeb0 0a60 	vmov.f32	s0, s1
 8009b32:	bd08      	pop	{r3, pc}
 8009b34:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009b38:	d21c      	bcs.n	8009b74 <scalbnf+0x68>
 8009b3a:	4b1f      	ldr	r3, [pc, #124]	; (8009bb8 <scalbnf+0xac>)
 8009b3c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8009bbc <scalbnf+0xb0>
 8009b40:	4298      	cmp	r0, r3
 8009b42:	ee60 0a27 	vmul.f32	s1, s0, s15
 8009b46:	db10      	blt.n	8009b6a <scalbnf+0x5e>
 8009b48:	ee10 2a90 	vmov	r2, s1
 8009b4c:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8009b50:	3b19      	subs	r3, #25
 8009b52:	4403      	add	r3, r0
 8009b54:	2bfe      	cmp	r3, #254	; 0xfe
 8009b56:	dd0f      	ble.n	8009b78 <scalbnf+0x6c>
 8009b58:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8009bc0 <scalbnf+0xb4>
 8009b5c:	eeb0 0a48 	vmov.f32	s0, s16
 8009b60:	f000 f834 	bl	8009bcc <copysignf>
 8009b64:	ee60 0a08 	vmul.f32	s1, s0, s16
 8009b68:	e7df      	b.n	8009b2a <scalbnf+0x1e>
 8009b6a:	eddf 7a16 	vldr	s15, [pc, #88]	; 8009bc4 <scalbnf+0xb8>
 8009b6e:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8009b72:	e7da      	b.n	8009b2a <scalbnf+0x1e>
 8009b74:	0ddb      	lsrs	r3, r3, #23
 8009b76:	e7ec      	b.n	8009b52 <scalbnf+0x46>
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	dd06      	ble.n	8009b8a <scalbnf+0x7e>
 8009b7c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8009b80:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8009b84:	ee00 3a90 	vmov	s1, r3
 8009b88:	e7cf      	b.n	8009b2a <scalbnf+0x1e>
 8009b8a:	f113 0f16 	cmn.w	r3, #22
 8009b8e:	da06      	bge.n	8009b9e <scalbnf+0x92>
 8009b90:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009b94:	4298      	cmp	r0, r3
 8009b96:	dcdf      	bgt.n	8009b58 <scalbnf+0x4c>
 8009b98:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8009bc4 <scalbnf+0xb8>
 8009b9c:	e7de      	b.n	8009b5c <scalbnf+0x50>
 8009b9e:	3319      	adds	r3, #25
 8009ba0:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8009ba4:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8009ba8:	eddf 7a07 	vldr	s15, [pc, #28]	; 8009bc8 <scalbnf+0xbc>
 8009bac:	ee07 3a10 	vmov	s14, r3
 8009bb0:	ee67 0a27 	vmul.f32	s1, s14, s15
 8009bb4:	e7b9      	b.n	8009b2a <scalbnf+0x1e>
 8009bb6:	bf00      	nop
 8009bb8:	ffff3cb0 	.word	0xffff3cb0
 8009bbc:	4c000000 	.word	0x4c000000
 8009bc0:	7149f2ca 	.word	0x7149f2ca
 8009bc4:	0da24260 	.word	0x0da24260
 8009bc8:	33000000 	.word	0x33000000

08009bcc <copysignf>:
 8009bcc:	ee10 3a10 	vmov	r3, s0
 8009bd0:	ee10 2a90 	vmov	r2, s1
 8009bd4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009bd8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8009bdc:	4313      	orrs	r3, r2
 8009bde:	ee00 3a10 	vmov	s0, r3
 8009be2:	4770      	bx	lr

08009be4 <_init>:
 8009be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009be6:	bf00      	nop
 8009be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bea:	bc08      	pop	{r3}
 8009bec:	469e      	mov	lr, r3
 8009bee:	4770      	bx	lr

08009bf0 <_fini>:
 8009bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bf2:	bf00      	nop
 8009bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bf6:	bc08      	pop	{r3}
 8009bf8:	469e      	mov	lr, r3
 8009bfa:	4770      	bx	lr
