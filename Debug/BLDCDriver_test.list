
BLDCDriver_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092e8  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d8  08009470  08009470  00019470  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009748  08009748  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  08009748  08009748  00019748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009750  08009750  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009750  08009750  00019750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009754  08009754  00019754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08009758  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008e4  200001ec  08009944  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ad0  08009944  00020ad0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019e09  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003b6d  00000000  00000000  0003a025  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001300  00000000  00000000  0003db98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001120  00000000  00000000  0003ee98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023c6e  00000000  00000000  0003ffb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012ff2  00000000  00000000  00063c26  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c790d  00000000  00000000  00076c18  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013e525  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a00  00000000  00000000  0013e5a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001ec 	.word	0x200001ec
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009458 	.word	0x08009458

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001f0 	.word	0x200001f0
 80001c4:	08009458 	.word	0x08009458

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2f>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b08:	bf24      	itt	cs
 8000b0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b12:	d90d      	bls.n	8000b30 <__aeabi_d2f+0x30>
 8000b14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b34:	d121      	bne.n	8000b7a <__aeabi_d2f+0x7a>
 8000b36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3a:	bfbc      	itt	lt
 8000b3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	4770      	bxlt	lr
 8000b42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4a:	f1c2 0218 	rsb	r2, r2, #24
 8000b4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b56:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5a:	bf18      	it	ne
 8000b5c:	f040 0001 	orrne.w	r0, r0, #1
 8000b60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b6c:	ea40 000c 	orr.w	r0, r0, ip
 8000b70:	fa23 f302 	lsr.w	r3, r3, r2
 8000b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b78:	e7cc      	b.n	8000b14 <__aeabi_d2f+0x14>
 8000b7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7e:	d107      	bne.n	8000b90 <__aeabi_d2f+0x90>
 8000b80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b84:	bf1e      	ittt	ne
 8000b86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b8e:	4770      	bxne	lr
 8000b90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb4:	f000 b972 	b.w	8000e9c <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f806 	bl	8000bd0 <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__udivmoddi4>:
 8000bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd4:	9e08      	ldr	r6, [sp, #32]
 8000bd6:	4604      	mov	r4, r0
 8000bd8:	4688      	mov	r8, r1
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d14b      	bne.n	8000c76 <__udivmoddi4+0xa6>
 8000bde:	428a      	cmp	r2, r1
 8000be0:	4615      	mov	r5, r2
 8000be2:	d967      	bls.n	8000cb4 <__udivmoddi4+0xe4>
 8000be4:	fab2 f282 	clz	r2, r2
 8000be8:	b14a      	cbz	r2, 8000bfe <__udivmoddi4+0x2e>
 8000bea:	f1c2 0720 	rsb	r7, r2, #32
 8000bee:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf2:	fa20 f707 	lsr.w	r7, r0, r7
 8000bf6:	4095      	lsls	r5, r2
 8000bf8:	ea47 0803 	orr.w	r8, r7, r3
 8000bfc:	4094      	lsls	r4, r2
 8000bfe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c02:	0c23      	lsrs	r3, r4, #16
 8000c04:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c08:	fa1f fc85 	uxth.w	ip, r5
 8000c0c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c10:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c14:	fb07 f10c 	mul.w	r1, r7, ip
 8000c18:	4299      	cmp	r1, r3
 8000c1a:	d909      	bls.n	8000c30 <__udivmoddi4+0x60>
 8000c1c:	18eb      	adds	r3, r5, r3
 8000c1e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c22:	f080 811b 	bcs.w	8000e5c <__udivmoddi4+0x28c>
 8000c26:	4299      	cmp	r1, r3
 8000c28:	f240 8118 	bls.w	8000e5c <__udivmoddi4+0x28c>
 8000c2c:	3f02      	subs	r7, #2
 8000c2e:	442b      	add	r3, r5
 8000c30:	1a5b      	subs	r3, r3, r1
 8000c32:	b2a4      	uxth	r4, r4
 8000c34:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c38:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c3c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c40:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c44:	45a4      	cmp	ip, r4
 8000c46:	d909      	bls.n	8000c5c <__udivmoddi4+0x8c>
 8000c48:	192c      	adds	r4, r5, r4
 8000c4a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c4e:	f080 8107 	bcs.w	8000e60 <__udivmoddi4+0x290>
 8000c52:	45a4      	cmp	ip, r4
 8000c54:	f240 8104 	bls.w	8000e60 <__udivmoddi4+0x290>
 8000c58:	3802      	subs	r0, #2
 8000c5a:	442c      	add	r4, r5
 8000c5c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c60:	eba4 040c 	sub.w	r4, r4, ip
 8000c64:	2700      	movs	r7, #0
 8000c66:	b11e      	cbz	r6, 8000c70 <__udivmoddi4+0xa0>
 8000c68:	40d4      	lsrs	r4, r2
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	e9c6 4300 	strd	r4, r3, [r6]
 8000c70:	4639      	mov	r1, r7
 8000c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c76:	428b      	cmp	r3, r1
 8000c78:	d909      	bls.n	8000c8e <__udivmoddi4+0xbe>
 8000c7a:	2e00      	cmp	r6, #0
 8000c7c:	f000 80eb 	beq.w	8000e56 <__udivmoddi4+0x286>
 8000c80:	2700      	movs	r7, #0
 8000c82:	e9c6 0100 	strd	r0, r1, [r6]
 8000c86:	4638      	mov	r0, r7
 8000c88:	4639      	mov	r1, r7
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	fab3 f783 	clz	r7, r3
 8000c92:	2f00      	cmp	r7, #0
 8000c94:	d147      	bne.n	8000d26 <__udivmoddi4+0x156>
 8000c96:	428b      	cmp	r3, r1
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xd0>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 80fa 	bhi.w	8000e94 <__udivmoddi4+0x2c4>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4698      	mov	r8, r3
 8000caa:	2e00      	cmp	r6, #0
 8000cac:	d0e0      	beq.n	8000c70 <__udivmoddi4+0xa0>
 8000cae:	e9c6 4800 	strd	r4, r8, [r6]
 8000cb2:	e7dd      	b.n	8000c70 <__udivmoddi4+0xa0>
 8000cb4:	b902      	cbnz	r2, 8000cb8 <__udivmoddi4+0xe8>
 8000cb6:	deff      	udf	#255	; 0xff
 8000cb8:	fab2 f282 	clz	r2, r2
 8000cbc:	2a00      	cmp	r2, #0
 8000cbe:	f040 808f 	bne.w	8000de0 <__udivmoddi4+0x210>
 8000cc2:	1b49      	subs	r1, r1, r5
 8000cc4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cc8:	fa1f f885 	uxth.w	r8, r5
 8000ccc:	2701      	movs	r7, #1
 8000cce:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cd2:	0c23      	lsrs	r3, r4, #16
 8000cd4:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cd8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cdc:	fb08 f10c 	mul.w	r1, r8, ip
 8000ce0:	4299      	cmp	r1, r3
 8000ce2:	d907      	bls.n	8000cf4 <__udivmoddi4+0x124>
 8000ce4:	18eb      	adds	r3, r5, r3
 8000ce6:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x122>
 8000cec:	4299      	cmp	r1, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2bc>
 8000cf2:	4684      	mov	ip, r0
 8000cf4:	1a59      	subs	r1, r3, r1
 8000cf6:	b2a3      	uxth	r3, r4
 8000cf8:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cfc:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d00:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d04:	fb08 f800 	mul.w	r8, r8, r0
 8000d08:	45a0      	cmp	r8, r4
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x14c>
 8000d0c:	192c      	adds	r4, r5, r4
 8000d0e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x14a>
 8000d14:	45a0      	cmp	r8, r4
 8000d16:	f200 80b6 	bhi.w	8000e86 <__udivmoddi4+0x2b6>
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	eba4 0408 	sub.w	r4, r4, r8
 8000d20:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d24:	e79f      	b.n	8000c66 <__udivmoddi4+0x96>
 8000d26:	f1c7 0c20 	rsb	ip, r7, #32
 8000d2a:	40bb      	lsls	r3, r7
 8000d2c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d30:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d34:	fa01 f407 	lsl.w	r4, r1, r7
 8000d38:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d3c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d40:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d44:	4325      	orrs	r5, r4
 8000d46:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d4a:	0c2c      	lsrs	r4, r5, #16
 8000d4c:	fb08 3319 	mls	r3, r8, r9, r3
 8000d50:	fa1f fa8e 	uxth.w	sl, lr
 8000d54:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d58:	fb09 f40a 	mul.w	r4, r9, sl
 8000d5c:	429c      	cmp	r4, r3
 8000d5e:	fa02 f207 	lsl.w	r2, r2, r7
 8000d62:	fa00 f107 	lsl.w	r1, r0, r7
 8000d66:	d90b      	bls.n	8000d80 <__udivmoddi4+0x1b0>
 8000d68:	eb1e 0303 	adds.w	r3, lr, r3
 8000d6c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d70:	f080 8087 	bcs.w	8000e82 <__udivmoddi4+0x2b2>
 8000d74:	429c      	cmp	r4, r3
 8000d76:	f240 8084 	bls.w	8000e82 <__udivmoddi4+0x2b2>
 8000d7a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d7e:	4473      	add	r3, lr
 8000d80:	1b1b      	subs	r3, r3, r4
 8000d82:	b2ad      	uxth	r5, r5
 8000d84:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d88:	fb08 3310 	mls	r3, r8, r0, r3
 8000d8c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d90:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d94:	45a2      	cmp	sl, r4
 8000d96:	d908      	bls.n	8000daa <__udivmoddi4+0x1da>
 8000d98:	eb1e 0404 	adds.w	r4, lr, r4
 8000d9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da0:	d26b      	bcs.n	8000e7a <__udivmoddi4+0x2aa>
 8000da2:	45a2      	cmp	sl, r4
 8000da4:	d969      	bls.n	8000e7a <__udivmoddi4+0x2aa>
 8000da6:	3802      	subs	r0, #2
 8000da8:	4474      	add	r4, lr
 8000daa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dae:	fba0 8902 	umull	r8, r9, r0, r2
 8000db2:	eba4 040a 	sub.w	r4, r4, sl
 8000db6:	454c      	cmp	r4, r9
 8000db8:	46c2      	mov	sl, r8
 8000dba:	464b      	mov	r3, r9
 8000dbc:	d354      	bcc.n	8000e68 <__udivmoddi4+0x298>
 8000dbe:	d051      	beq.n	8000e64 <__udivmoddi4+0x294>
 8000dc0:	2e00      	cmp	r6, #0
 8000dc2:	d069      	beq.n	8000e98 <__udivmoddi4+0x2c8>
 8000dc4:	ebb1 050a 	subs.w	r5, r1, sl
 8000dc8:	eb64 0403 	sbc.w	r4, r4, r3
 8000dcc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dd0:	40fd      	lsrs	r5, r7
 8000dd2:	40fc      	lsrs	r4, r7
 8000dd4:	ea4c 0505 	orr.w	r5, ip, r5
 8000dd8:	e9c6 5400 	strd	r5, r4, [r6]
 8000ddc:	2700      	movs	r7, #0
 8000dde:	e747      	b.n	8000c70 <__udivmoddi4+0xa0>
 8000de0:	f1c2 0320 	rsb	r3, r2, #32
 8000de4:	fa20 f703 	lsr.w	r7, r0, r3
 8000de8:	4095      	lsls	r5, r2
 8000dea:	fa01 f002 	lsl.w	r0, r1, r2
 8000dee:	fa21 f303 	lsr.w	r3, r1, r3
 8000df2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000df6:	4338      	orrs	r0, r7
 8000df8:	0c01      	lsrs	r1, r0, #16
 8000dfa:	fbb3 f7fe 	udiv	r7, r3, lr
 8000dfe:	fa1f f885 	uxth.w	r8, r5
 8000e02:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e06:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e0a:	fb07 f308 	mul.w	r3, r7, r8
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	fa04 f402 	lsl.w	r4, r4, r2
 8000e14:	d907      	bls.n	8000e26 <__udivmoddi4+0x256>
 8000e16:	1869      	adds	r1, r5, r1
 8000e18:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e1c:	d22f      	bcs.n	8000e7e <__udivmoddi4+0x2ae>
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d92d      	bls.n	8000e7e <__udivmoddi4+0x2ae>
 8000e22:	3f02      	subs	r7, #2
 8000e24:	4429      	add	r1, r5
 8000e26:	1acb      	subs	r3, r1, r3
 8000e28:	b281      	uxth	r1, r0
 8000e2a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e32:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e36:	fb00 f308 	mul.w	r3, r0, r8
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d907      	bls.n	8000e4e <__udivmoddi4+0x27e>
 8000e3e:	1869      	adds	r1, r5, r1
 8000e40:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e44:	d217      	bcs.n	8000e76 <__udivmoddi4+0x2a6>
 8000e46:	428b      	cmp	r3, r1
 8000e48:	d915      	bls.n	8000e76 <__udivmoddi4+0x2a6>
 8000e4a:	3802      	subs	r0, #2
 8000e4c:	4429      	add	r1, r5
 8000e4e:	1ac9      	subs	r1, r1, r3
 8000e50:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e54:	e73b      	b.n	8000cce <__udivmoddi4+0xfe>
 8000e56:	4637      	mov	r7, r6
 8000e58:	4630      	mov	r0, r6
 8000e5a:	e709      	b.n	8000c70 <__udivmoddi4+0xa0>
 8000e5c:	4607      	mov	r7, r0
 8000e5e:	e6e7      	b.n	8000c30 <__udivmoddi4+0x60>
 8000e60:	4618      	mov	r0, r3
 8000e62:	e6fb      	b.n	8000c5c <__udivmoddi4+0x8c>
 8000e64:	4541      	cmp	r1, r8
 8000e66:	d2ab      	bcs.n	8000dc0 <__udivmoddi4+0x1f0>
 8000e68:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e6c:	eb69 020e 	sbc.w	r2, r9, lr
 8000e70:	3801      	subs	r0, #1
 8000e72:	4613      	mov	r3, r2
 8000e74:	e7a4      	b.n	8000dc0 <__udivmoddi4+0x1f0>
 8000e76:	4660      	mov	r0, ip
 8000e78:	e7e9      	b.n	8000e4e <__udivmoddi4+0x27e>
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	e795      	b.n	8000daa <__udivmoddi4+0x1da>
 8000e7e:	4667      	mov	r7, ip
 8000e80:	e7d1      	b.n	8000e26 <__udivmoddi4+0x256>
 8000e82:	4681      	mov	r9, r0
 8000e84:	e77c      	b.n	8000d80 <__udivmoddi4+0x1b0>
 8000e86:	3802      	subs	r0, #2
 8000e88:	442c      	add	r4, r5
 8000e8a:	e747      	b.n	8000d1c <__udivmoddi4+0x14c>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	442b      	add	r3, r5
 8000e92:	e72f      	b.n	8000cf4 <__udivmoddi4+0x124>
 8000e94:	4638      	mov	r0, r7
 8000e96:	e708      	b.n	8000caa <__udivmoddi4+0xda>
 8000e98:	4637      	mov	r7, r6
 8000e9a:	e6e9      	b.n	8000c70 <__udivmoddi4+0xa0>

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ea6:	463b      	mov	r3, r7
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000eb2:	4b30      	ldr	r3, [pc, #192]	; (8000f74 <MX_ADC1_Init+0xd4>)
 8000eb4:	4a30      	ldr	r2, [pc, #192]	; (8000f78 <MX_ADC1_Init+0xd8>)
 8000eb6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000eb8:	4b2e      	ldr	r3, [pc, #184]	; (8000f74 <MX_ADC1_Init+0xd4>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ebe:	4b2d      	ldr	r3, [pc, #180]	; (8000f74 <MX_ADC1_Init+0xd4>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000ec4:	4b2b      	ldr	r3, [pc, #172]	; (8000f74 <MX_ADC1_Init+0xd4>)
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000eca:	4b2a      	ldr	r3, [pc, #168]	; (8000f74 <MX_ADC1_Init+0xd4>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ed0:	4b28      	ldr	r3, [pc, #160]	; (8000f74 <MX_ADC1_Init+0xd4>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000ed8:	4b26      	ldr	r3, [pc, #152]	; (8000f74 <MX_ADC1_Init+0xd4>)
 8000eda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ede:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000ee0:	4b24      	ldr	r3, [pc, #144]	; (8000f74 <MX_ADC1_Init+0xd4>)
 8000ee2:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000ee6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ee8:	4b22      	ldr	r3, [pc, #136]	; (8000f74 <MX_ADC1_Init+0xd4>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000eee:	4b21      	ldr	r3, [pc, #132]	; (8000f74 <MX_ADC1_Init+0xd4>)
 8000ef0:	2203      	movs	r2, #3
 8000ef2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000ef4:	4b1f      	ldr	r3, [pc, #124]	; (8000f74 <MX_ADC1_Init+0xd4>)
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000efc:	4b1d      	ldr	r3, [pc, #116]	; (8000f74 <MX_ADC1_Init+0xd4>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f02:	481c      	ldr	r0, [pc, #112]	; (8000f74 <MX_ADC1_Init+0xd4>)
 8000f04:	f001 fe70 	bl	8002be8 <HAL_ADC_Init>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000f0e:	f000 ffc9 	bl	8001ea4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000f12:	230c      	movs	r3, #12
 8000f14:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f16:	2301      	movs	r3, #1
 8000f18:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f1e:	463b      	mov	r3, r7
 8000f20:	4619      	mov	r1, r3
 8000f22:	4814      	ldr	r0, [pc, #80]	; (8000f74 <MX_ADC1_Init+0xd4>)
 8000f24:	f002 f8fe 	bl	8003124 <HAL_ADC_ConfigChannel>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000f2e:	f000 ffb9 	bl	8001ea4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000f32:	230b      	movs	r3, #11
 8000f34:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000f36:	2302      	movs	r3, #2
 8000f38:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f3a:	463b      	mov	r3, r7
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	480d      	ldr	r0, [pc, #52]	; (8000f74 <MX_ADC1_Init+0xd4>)
 8000f40:	f002 f8f0 	bl	8003124 <HAL_ADC_ConfigChannel>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000f4a:	f000 ffab 	bl	8001ea4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000f4e:	230a      	movs	r3, #10
 8000f50:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000f52:	2303      	movs	r3, #3
 8000f54:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f56:	463b      	mov	r3, r7
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4806      	ldr	r0, [pc, #24]	; (8000f74 <MX_ADC1_Init+0xd4>)
 8000f5c:	f002 f8e2 	bl	8003124 <HAL_ADC_ConfigChannel>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 8000f66:	f000 ff9d 	bl	8001ea4 <Error_Handler>
  }

}
 8000f6a:	bf00      	nop
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	20000278 	.word	0x20000278
 8000f78:	40012000 	.word	0x40012000

08000f7c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f82:	463b      	mov	r3, r7
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc2.Instance = ADC2;
 8000f8e:	4b21      	ldr	r3, [pc, #132]	; (8001014 <MX_ADC2_Init+0x98>)
 8000f90:	4a21      	ldr	r2, [pc, #132]	; (8001018 <MX_ADC2_Init+0x9c>)
 8000f92:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000f94:	4b1f      	ldr	r3, [pc, #124]	; (8001014 <MX_ADC2_Init+0x98>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000f9a:	4b1e      	ldr	r3, [pc, #120]	; (8001014 <MX_ADC2_Init+0x98>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000fa0:	4b1c      	ldr	r3, [pc, #112]	; (8001014 <MX_ADC2_Init+0x98>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000fa6:	4b1b      	ldr	r3, [pc, #108]	; (8001014 <MX_ADC2_Init+0x98>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000fac:	4b19      	ldr	r3, [pc, #100]	; (8001014 <MX_ADC2_Init+0x98>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fb4:	4b17      	ldr	r3, [pc, #92]	; (8001014 <MX_ADC2_Init+0x98>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fba:	4b16      	ldr	r3, [pc, #88]	; (8001014 <MX_ADC2_Init+0x98>)
 8000fbc:	4a17      	ldr	r2, [pc, #92]	; (800101c <MX_ADC2_Init+0xa0>)
 8000fbe:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fc0:	4b14      	ldr	r3, [pc, #80]	; (8001014 <MX_ADC2_Init+0x98>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000fc6:	4b13      	ldr	r3, [pc, #76]	; (8001014 <MX_ADC2_Init+0x98>)
 8000fc8:	2201      	movs	r2, #1
 8000fca:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000fcc:	4b11      	ldr	r3, [pc, #68]	; (8001014 <MX_ADC2_Init+0x98>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fd4:	4b0f      	ldr	r3, [pc, #60]	; (8001014 <MX_ADC2_Init+0x98>)
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000fda:	480e      	ldr	r0, [pc, #56]	; (8001014 <MX_ADC2_Init+0x98>)
 8000fdc:	f001 fe04 	bl	8002be8 <HAL_ADC_Init>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8000fe6:	f000 ff5d 	bl	8001ea4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000fea:	230d      	movs	r3, #13
 8000fec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000ff6:	463b      	mov	r3, r7
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4806      	ldr	r0, [pc, #24]	; (8001014 <MX_ADC2_Init+0x98>)
 8000ffc:	f002 f892 	bl	8003124 <HAL_ADC_ConfigChannel>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8001006:	f000 ff4d 	bl	8001ea4 <Error_Handler>
  }

}
 800100a:	bf00      	nop
 800100c:	3710      	adds	r7, #16
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000230 	.word	0x20000230
 8001018:	40012100 	.word	0x40012100
 800101c:	0f000001 	.word	0x0f000001

08001020 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b08c      	sub	sp, #48	; 0x30
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001028:	f107 031c 	add.w	r3, r7, #28
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a5b      	ldr	r2, [pc, #364]	; (80011ac <HAL_ADC_MspInit+0x18c>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d160      	bne.n	8001104 <HAL_ADC_MspInit+0xe4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	61bb      	str	r3, [r7, #24]
 8001046:	4b5a      	ldr	r3, [pc, #360]	; (80011b0 <HAL_ADC_MspInit+0x190>)
 8001048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104a:	4a59      	ldr	r2, [pc, #356]	; (80011b0 <HAL_ADC_MspInit+0x190>)
 800104c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001050:	6453      	str	r3, [r2, #68]	; 0x44
 8001052:	4b57      	ldr	r3, [pc, #348]	; (80011b0 <HAL_ADC_MspInit+0x190>)
 8001054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800105a:	61bb      	str	r3, [r7, #24]
 800105c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	617b      	str	r3, [r7, #20]
 8001062:	4b53      	ldr	r3, [pc, #332]	; (80011b0 <HAL_ADC_MspInit+0x190>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	4a52      	ldr	r2, [pc, #328]	; (80011b0 <HAL_ADC_MspInit+0x190>)
 8001068:	f043 0304 	orr.w	r3, r3, #4
 800106c:	6313      	str	r3, [r2, #48]	; 0x30
 800106e:	4b50      	ldr	r3, [pc, #320]	; (80011b0 <HAL_ADC_MspInit+0x190>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	f003 0304 	and.w	r3, r3, #4
 8001076:	617b      	str	r3, [r7, #20]
 8001078:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration    
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800107a:	2307      	movs	r3, #7
 800107c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800107e:	2303      	movs	r3, #3
 8001080:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001086:	f107 031c 	add.w	r3, r7, #28
 800108a:	4619      	mov	r1, r3
 800108c:	4849      	ldr	r0, [pc, #292]	; (80011b4 <HAL_ADC_MspInit+0x194>)
 800108e:	f002 ff95 	bl	8003fbc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001092:	4b49      	ldr	r3, [pc, #292]	; (80011b8 <HAL_ADC_MspInit+0x198>)
 8001094:	4a49      	ldr	r2, [pc, #292]	; (80011bc <HAL_ADC_MspInit+0x19c>)
 8001096:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001098:	4b47      	ldr	r3, [pc, #284]	; (80011b8 <HAL_ADC_MspInit+0x198>)
 800109a:	2200      	movs	r2, #0
 800109c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800109e:	4b46      	ldr	r3, [pc, #280]	; (80011b8 <HAL_ADC_MspInit+0x198>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010a4:	4b44      	ldr	r3, [pc, #272]	; (80011b8 <HAL_ADC_MspInit+0x198>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80010aa:	4b43      	ldr	r3, [pc, #268]	; (80011b8 <HAL_ADC_MspInit+0x198>)
 80010ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010b0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010b2:	4b41      	ldr	r3, [pc, #260]	; (80011b8 <HAL_ADC_MspInit+0x198>)
 80010b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010b8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010ba:	4b3f      	ldr	r3, [pc, #252]	; (80011b8 <HAL_ADC_MspInit+0x198>)
 80010bc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010c0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80010c2:	4b3d      	ldr	r3, [pc, #244]	; (80011b8 <HAL_ADC_MspInit+0x198>)
 80010c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010c8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80010ca:	4b3b      	ldr	r3, [pc, #236]	; (80011b8 <HAL_ADC_MspInit+0x198>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010d0:	4b39      	ldr	r3, [pc, #228]	; (80011b8 <HAL_ADC_MspInit+0x198>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80010d6:	4838      	ldr	r0, [pc, #224]	; (80011b8 <HAL_ADC_MspInit+0x198>)
 80010d8:	f002 fbe0 	bl	800389c <HAL_DMA_Init>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80010e2:	f000 fedf 	bl	8001ea4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a33      	ldr	r2, [pc, #204]	; (80011b8 <HAL_ADC_MspInit+0x198>)
 80010ea:	639a      	str	r2, [r3, #56]	; 0x38
 80010ec:	4a32      	ldr	r2, [pc, #200]	; (80011b8 <HAL_ADC_MspInit+0x198>)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80010f2:	2200      	movs	r2, #0
 80010f4:	2100      	movs	r1, #0
 80010f6:	2012      	movs	r0, #18
 80010f8:	f002 fb99 	bl	800382e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80010fc:	2012      	movs	r0, #18
 80010fe:	f002 fbb2 	bl	8003866 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001102:	e04e      	b.n	80011a2 <HAL_ADC_MspInit+0x182>
  else if(adcHandle->Instance==ADC2)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a2d      	ldr	r2, [pc, #180]	; (80011c0 <HAL_ADC_MspInit+0x1a0>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d149      	bne.n	80011a2 <HAL_ADC_MspInit+0x182>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	613b      	str	r3, [r7, #16]
 8001112:	4b27      	ldr	r3, [pc, #156]	; (80011b0 <HAL_ADC_MspInit+0x190>)
 8001114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001116:	4a26      	ldr	r2, [pc, #152]	; (80011b0 <HAL_ADC_MspInit+0x190>)
 8001118:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800111c:	6453      	str	r3, [r2, #68]	; 0x44
 800111e:	4b24      	ldr	r3, [pc, #144]	; (80011b0 <HAL_ADC_MspInit+0x190>)
 8001120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001122:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001126:	613b      	str	r3, [r7, #16]
 8001128:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	60fb      	str	r3, [r7, #12]
 800112e:	4b20      	ldr	r3, [pc, #128]	; (80011b0 <HAL_ADC_MspInit+0x190>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	4a1f      	ldr	r2, [pc, #124]	; (80011b0 <HAL_ADC_MspInit+0x190>)
 8001134:	f043 0304 	orr.w	r3, r3, #4
 8001138:	6313      	str	r3, [r2, #48]	; 0x30
 800113a:	4b1d      	ldr	r3, [pc, #116]	; (80011b0 <HAL_ADC_MspInit+0x190>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	f003 0304 	and.w	r3, r3, #4
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	60bb      	str	r3, [r7, #8]
 800114a:	4b19      	ldr	r3, [pc, #100]	; (80011b0 <HAL_ADC_MspInit+0x190>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	4a18      	ldr	r2, [pc, #96]	; (80011b0 <HAL_ADC_MspInit+0x190>)
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	6313      	str	r3, [r2, #48]	; 0x30
 8001156:	4b16      	ldr	r3, [pc, #88]	; (80011b0 <HAL_ADC_MspInit+0x190>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	60bb      	str	r3, [r7, #8]
 8001160:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001162:	2308      	movs	r3, #8
 8001164:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001166:	2303      	movs	r3, #3
 8001168:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800116e:	f107 031c 	add.w	r3, r7, #28
 8001172:	4619      	mov	r1, r3
 8001174:	480f      	ldr	r0, [pc, #60]	; (80011b4 <HAL_ADC_MspInit+0x194>)
 8001176:	f002 ff21 	bl	8003fbc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800117a:	2307      	movs	r3, #7
 800117c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800117e:	2303      	movs	r3, #3
 8001180:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001186:	f107 031c 	add.w	r3, r7, #28
 800118a:	4619      	mov	r1, r3
 800118c:	480d      	ldr	r0, [pc, #52]	; (80011c4 <HAL_ADC_MspInit+0x1a4>)
 800118e:	f002 ff15 	bl	8003fbc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001192:	2200      	movs	r2, #0
 8001194:	2100      	movs	r1, #0
 8001196:	2012      	movs	r0, #18
 8001198:	f002 fb49 	bl	800382e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800119c:	2012      	movs	r0, #18
 800119e:	f002 fb62 	bl	8003866 <HAL_NVIC_EnableIRQ>
}
 80011a2:	bf00      	nop
 80011a4:	3730      	adds	r7, #48	; 0x30
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40012000 	.word	0x40012000
 80011b0:	40023800 	.word	0x40023800
 80011b4:	40020800 	.word	0x40020800
 80011b8:	200002c0 	.word	0x200002c0
 80011bc:	40026410 	.word	0x40026410
 80011c0:	40012100 	.word	0x40012100
 80011c4:	40020000 	.word	0x40020000

080011c8 <AS5147Read>:
/*
 * Read Register
 * @param	address : AS5147 regigster address
 * @return	16 bit data
 */
uint16_t AS5147Read(uint16_t address) {
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b086      	sub	sp, #24
 80011cc:	af02      	add	r7, sp, #8
 80011ce:	4603      	mov	r3, r0
 80011d0:	80fb      	strh	r3, [r7, #6]
	uint8_t txdata[2] = {((AS5147AddParityBit(address | 0x4000) & 0xFF00) >> 8), (AS5147AddParityBit(address | 0x4000) & 0x00FF)};
 80011d2:	88fb      	ldrh	r3, [r7, #6]
 80011d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011d8:	b29b      	uxth	r3, r3
 80011da:	4618      	mov	r0, r3
 80011dc:	f000 f844 	bl	8001268 <AS5147AddParityBit>
 80011e0:	4603      	mov	r3, r0
 80011e2:	121b      	asrs	r3, r3, #8
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	733b      	strb	r3, [r7, #12]
 80011e8:	88fb      	ldrh	r3, [r7, #6]
 80011ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	4618      	mov	r0, r3
 80011f2:	f000 f839 	bl	8001268 <AS5147AddParityBit>
 80011f6:	4603      	mov	r3, r0
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	737b      	strb	r3, [r7, #13]
	uint8_t rxdata[2] = {};
 80011fc:	2300      	movs	r3, #0
 80011fe:	813b      	strh	r3, [r7, #8]
	AS5147Select();
 8001200:	f000 f81a 	bl	8001238 <AS5147Select>
	HAL_SPI_TransmitReceive(&AS5147_SPI_HANDLER, txdata, rxdata, 2, 1);
 8001204:	f107 0208 	add.w	r2, r7, #8
 8001208:	f107 010c 	add.w	r1, r7, #12
 800120c:	2301      	movs	r3, #1
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	2302      	movs	r3, #2
 8001212:	4808      	ldr	r0, [pc, #32]	; (8001234 <AS5147Read+0x6c>)
 8001214:	f003 fd58 	bl	8004cc8 <HAL_SPI_TransmitReceive>
	AS5147Deselect();
 8001218:	f000 f81a 	bl	8001250 <AS5147Deselect>
	return ((rxdata[0] << 8) | rxdata[1]);
 800121c:	7a3b      	ldrb	r3, [r7, #8]
 800121e:	021b      	lsls	r3, r3, #8
 8001220:	b21a      	sxth	r2, r3
 8001222:	7a7b      	ldrb	r3, [r7, #9]
 8001224:	b21b      	sxth	r3, r3
 8001226:	4313      	orrs	r3, r2
 8001228:	b21b      	sxth	r3, r3
 800122a:	b29b      	uxth	r3, r3
}
 800122c:	4618      	mov	r0, r3
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	2000078c 	.word	0x2000078c

08001238 <AS5147Select>:
/*
 * Select
 * @param
 * @return
 */
static void AS5147Select(void) {
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(AS5147_CS_PORT, AS5147_CS_PIN, GPIO_PIN_RESET);
 800123c:	2200      	movs	r2, #0
 800123e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001242:	4802      	ldr	r0, [pc, #8]	; (800124c <AS5147Select+0x14>)
 8001244:	f003 f86c 	bl	8004320 <HAL_GPIO_WritePin>
}
 8001248:	bf00      	nop
 800124a:	bd80      	pop	{r7, pc}
 800124c:	40020000 	.word	0x40020000

08001250 <AS5147Deselect>:
/*
 * Deselect
 * @param
 * @return
 */
static void AS5147Deselect(void) {
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(AS5147_CS_PORT, AS5147_CS_PIN, GPIO_PIN_SET);
 8001254:	2201      	movs	r2, #1
 8001256:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800125a:	4802      	ldr	r0, [pc, #8]	; (8001264 <AS5147Deselect+0x14>)
 800125c:	f003 f860 	bl	8004320 <HAL_GPIO_WritePin>
}
 8001260:	bf00      	nop
 8001262:	bd80      	pop	{r7, pc}
 8001264:	40020000 	.word	0x40020000

08001268 <AS5147AddParityBit>:
/*
 * Parity Calculation
 * @param	raw_data
 * @return	parity bit + raw_data
 */
static uint16_t AS5147AddParityBit(uint16_t raw_data) {
 8001268:	b480      	push	{r7}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	80fb      	strh	r3, [r7, #6]
	uint16_t parity = raw_data;
 8001272:	88fb      	ldrh	r3, [r7, #6]
 8001274:	81fb      	strh	r3, [r7, #14]
	parity ^= parity >> 8;
 8001276:	89fb      	ldrh	r3, [r7, #14]
 8001278:	0a1b      	lsrs	r3, r3, #8
 800127a:	b29a      	uxth	r2, r3
 800127c:	89fb      	ldrh	r3, [r7, #14]
 800127e:	4053      	eors	r3, r2
 8001280:	81fb      	strh	r3, [r7, #14]
	parity ^= parity >> 4;
 8001282:	89fb      	ldrh	r3, [r7, #14]
 8001284:	091b      	lsrs	r3, r3, #4
 8001286:	b29a      	uxth	r2, r3
 8001288:	89fb      	ldrh	r3, [r7, #14]
 800128a:	4053      	eors	r3, r2
 800128c:	81fb      	strh	r3, [r7, #14]
	parity ^= parity >> 2;
 800128e:	89fb      	ldrh	r3, [r7, #14]
 8001290:	089b      	lsrs	r3, r3, #2
 8001292:	b29a      	uxth	r2, r3
 8001294:	89fb      	ldrh	r3, [r7, #14]
 8001296:	4053      	eors	r3, r2
 8001298:	81fb      	strh	r3, [r7, #14]
	parity ^= parity >> 1;
 800129a:	89fb      	ldrh	r3, [r7, #14]
 800129c:	085b      	lsrs	r3, r3, #1
 800129e:	b29a      	uxth	r2, r3
 80012a0:	89fb      	ldrh	r3, [r7, #14]
 80012a2:	4053      	eors	r3, r2
 80012a4:	81fb      	strh	r3, [r7, #14]

	return (raw_data | ((parity & 0x0001) << 15));
 80012a6:	89fb      	ldrh	r3, [r7, #14]
 80012a8:	03db      	lsls	r3, r3, #15
 80012aa:	b21a      	sxth	r2, r3
 80012ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	b21b      	sxth	r3, r3
 80012b4:	b29b      	uxth	r3, r3
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3714      	adds	r7, #20
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
	...

080012c4 <BLDC120DegConduction>:
			printf("%d %d %f\n", i, angle_data, elec_angle_deg);
		}
	}
}

void BLDC120DegConduction(bldc_conduction_phase phase, float pwm_duty) {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	ed87 0a00 	vstr	s0, [r7]
 80012d0:	71fb      	strb	r3, [r7, #7]
	switch(phase) {
 80012d2:	79fb      	ldrb	r3, [r7, #7]
 80012d4:	2b05      	cmp	r3, #5
 80012d6:	f200 810b 	bhi.w	80014f0 <BLDC120DegConduction+0x22c>
 80012da:	a201      	add	r2, pc, #4	; (adr r2, 80012e0 <BLDC120DegConduction+0x1c>)
 80012dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012e0:	080012f9 	.word	0x080012f9
 80012e4:	0800134d 	.word	0x0800134d
 80012e8:	080013a1 	.word	0x080013a1
 80012ec:	080013f5 	.word	0x080013f5
 80012f0:	08001449 	.word	0x08001449
 80012f4:	0800149d 	.word	0x0800149d
	case 0 :
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, __HAL_TIM_GET_AUTORELOAD(&htim8) * pwm_duty);
 80012f8:	4b7f      	ldr	r3, [pc, #508]	; (80014f8 <BLDC120DegConduction+0x234>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012fe:	ee07 3a90 	vmov	s15, r3
 8001302:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001306:	edd7 7a00 	vldr	s15, [r7]
 800130a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800130e:	4b7a      	ldr	r3, [pc, #488]	; (80014f8 <BLDC120DegConduction+0x234>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001316:	ee17 2a90 	vmov	r2, s15
 800131a:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);
 800131c:	4b76      	ldr	r3, [pc, #472]	; (80014f8 <BLDC120DegConduction+0x234>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2200      	movs	r2, #0
 8001322:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, 0);
 8001324:	4b74      	ldr	r3, [pc, #464]	; (80014f8 <BLDC120DegConduction+0x234>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2200      	movs	r2, #0
 800132a:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 800132c:	2200      	movs	r2, #0
 800132e:	2180      	movs	r1, #128	; 0x80
 8001330:	4872      	ldr	r0, [pc, #456]	; (80014fc <BLDC120DegConduction+0x238>)
 8001332:	f002 fff5 	bl	8004320 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8001336:	2201      	movs	r2, #1
 8001338:	2101      	movs	r1, #1
 800133a:	4871      	ldr	r0, [pc, #452]	; (8001500 <BLDC120DegConduction+0x23c>)
 800133c:	f002 fff0 	bl	8004320 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8001340:	2200      	movs	r2, #0
 8001342:	2102      	movs	r1, #2
 8001344:	486e      	ldr	r0, [pc, #440]	; (8001500 <BLDC120DegConduction+0x23c>)
 8001346:	f002 ffeb 	bl	8004320 <HAL_GPIO_WritePin>
		break;
 800134a:	e0d1      	b.n	80014f0 <BLDC120DegConduction+0x22c>
	case 1 :
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, __HAL_TIM_GET_AUTORELOAD(&htim8) * pwm_duty);
 800134c:	4b6a      	ldr	r3, [pc, #424]	; (80014f8 <BLDC120DegConduction+0x234>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001352:	ee07 3a90 	vmov	s15, r3
 8001356:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800135a:	edd7 7a00 	vldr	s15, [r7]
 800135e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001362:	4b65      	ldr	r3, [pc, #404]	; (80014f8 <BLDC120DegConduction+0x234>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800136a:	ee17 2a90 	vmov	r2, s15
 800136e:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);
 8001370:	4b61      	ldr	r3, [pc, #388]	; (80014f8 <BLDC120DegConduction+0x234>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2200      	movs	r2, #0
 8001376:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, 0);
 8001378:	4b5f      	ldr	r3, [pc, #380]	; (80014f8 <BLDC120DegConduction+0x234>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2200      	movs	r2, #0
 800137e:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8001380:	2200      	movs	r2, #0
 8001382:	2180      	movs	r1, #128	; 0x80
 8001384:	485d      	ldr	r0, [pc, #372]	; (80014fc <BLDC120DegConduction+0x238>)
 8001386:	f002 ffcb 	bl	8004320 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800138a:	2200      	movs	r2, #0
 800138c:	2101      	movs	r1, #1
 800138e:	485c      	ldr	r0, [pc, #368]	; (8001500 <BLDC120DegConduction+0x23c>)
 8001390:	f002 ffc6 	bl	8004320 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8001394:	2201      	movs	r2, #1
 8001396:	2102      	movs	r1, #2
 8001398:	4859      	ldr	r0, [pc, #356]	; (8001500 <BLDC120DegConduction+0x23c>)
 800139a:	f002 ffc1 	bl	8004320 <HAL_GPIO_WritePin>
		break;
 800139e:	e0a7      	b.n	80014f0 <BLDC120DegConduction+0x22c>
	case 2 :
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);
 80013a0:	4b55      	ldr	r3, [pc, #340]	; (80014f8 <BLDC120DegConduction+0x234>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2200      	movs	r2, #0
 80013a6:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, __HAL_TIM_GET_AUTORELOAD(&htim8) * pwm_duty);
 80013a8:	4b53      	ldr	r3, [pc, #332]	; (80014f8 <BLDC120DegConduction+0x234>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ae:	ee07 3a90 	vmov	s15, r3
 80013b2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013b6:	edd7 7a00 	vldr	s15, [r7]
 80013ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013be:	4b4e      	ldr	r3, [pc, #312]	; (80014f8 <BLDC120DegConduction+0x234>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013c6:	ee17 2a90 	vmov	r2, s15
 80013ca:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, 0);
 80013cc:	4b4a      	ldr	r3, [pc, #296]	; (80014f8 <BLDC120DegConduction+0x234>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2200      	movs	r2, #0
 80013d2:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80013d4:	2200      	movs	r2, #0
 80013d6:	2180      	movs	r1, #128	; 0x80
 80013d8:	4848      	ldr	r0, [pc, #288]	; (80014fc <BLDC120DegConduction+0x238>)
 80013da:	f002 ffa1 	bl	8004320 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80013de:	2200      	movs	r2, #0
 80013e0:	2101      	movs	r1, #1
 80013e2:	4847      	ldr	r0, [pc, #284]	; (8001500 <BLDC120DegConduction+0x23c>)
 80013e4:	f002 ff9c 	bl	8004320 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 80013e8:	2201      	movs	r2, #1
 80013ea:	2102      	movs	r1, #2
 80013ec:	4844      	ldr	r0, [pc, #272]	; (8001500 <BLDC120DegConduction+0x23c>)
 80013ee:	f002 ff97 	bl	8004320 <HAL_GPIO_WritePin>
		break;
 80013f2:	e07d      	b.n	80014f0 <BLDC120DegConduction+0x22c>
	case 3 :
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);
 80013f4:	4b40      	ldr	r3, [pc, #256]	; (80014f8 <BLDC120DegConduction+0x234>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2200      	movs	r2, #0
 80013fa:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, __HAL_TIM_GET_AUTORELOAD(&htim8) * pwm_duty);
 80013fc:	4b3e      	ldr	r3, [pc, #248]	; (80014f8 <BLDC120DegConduction+0x234>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001402:	ee07 3a90 	vmov	s15, r3
 8001406:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800140a:	edd7 7a00 	vldr	s15, [r7]
 800140e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001412:	4b39      	ldr	r3, [pc, #228]	; (80014f8 <BLDC120DegConduction+0x234>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800141a:	ee17 2a90 	vmov	r2, s15
 800141e:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, 0);
 8001420:	4b35      	ldr	r3, [pc, #212]	; (80014f8 <BLDC120DegConduction+0x234>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2200      	movs	r2, #0
 8001426:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8001428:	2201      	movs	r2, #1
 800142a:	2180      	movs	r1, #128	; 0x80
 800142c:	4833      	ldr	r0, [pc, #204]	; (80014fc <BLDC120DegConduction+0x238>)
 800142e:	f002 ff77 	bl	8004320 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001432:	2200      	movs	r2, #0
 8001434:	2101      	movs	r1, #1
 8001436:	4832      	ldr	r0, [pc, #200]	; (8001500 <BLDC120DegConduction+0x23c>)
 8001438:	f002 ff72 	bl	8004320 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 800143c:	2200      	movs	r2, #0
 800143e:	2102      	movs	r1, #2
 8001440:	482f      	ldr	r0, [pc, #188]	; (8001500 <BLDC120DegConduction+0x23c>)
 8001442:	f002 ff6d 	bl	8004320 <HAL_GPIO_WritePin>
		break;
 8001446:	e053      	b.n	80014f0 <BLDC120DegConduction+0x22c>
	case 4 :
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);
 8001448:	4b2b      	ldr	r3, [pc, #172]	; (80014f8 <BLDC120DegConduction+0x234>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2200      	movs	r2, #0
 800144e:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);
 8001450:	4b29      	ldr	r3, [pc, #164]	; (80014f8 <BLDC120DegConduction+0x234>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2200      	movs	r2, #0
 8001456:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, __HAL_TIM_GET_AUTORELOAD(&htim8) * pwm_duty);
 8001458:	4b27      	ldr	r3, [pc, #156]	; (80014f8 <BLDC120DegConduction+0x234>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800145e:	ee07 3a90 	vmov	s15, r3
 8001462:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001466:	edd7 7a00 	vldr	s15, [r7]
 800146a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800146e:	4b22      	ldr	r3, [pc, #136]	; (80014f8 <BLDC120DegConduction+0x234>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001476:	ee17 2a90 	vmov	r2, s15
 800147a:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 800147c:	2201      	movs	r2, #1
 800147e:	2180      	movs	r1, #128	; 0x80
 8001480:	481e      	ldr	r0, [pc, #120]	; (80014fc <BLDC120DegConduction+0x238>)
 8001482:	f002 ff4d 	bl	8004320 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001486:	2200      	movs	r2, #0
 8001488:	2101      	movs	r1, #1
 800148a:	481d      	ldr	r0, [pc, #116]	; (8001500 <BLDC120DegConduction+0x23c>)
 800148c:	f002 ff48 	bl	8004320 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8001490:	2200      	movs	r2, #0
 8001492:	2102      	movs	r1, #2
 8001494:	481a      	ldr	r0, [pc, #104]	; (8001500 <BLDC120DegConduction+0x23c>)
 8001496:	f002 ff43 	bl	8004320 <HAL_GPIO_WritePin>
		break;
 800149a:	e029      	b.n	80014f0 <BLDC120DegConduction+0x22c>
	case 5 :
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);
 800149c:	4b16      	ldr	r3, [pc, #88]	; (80014f8 <BLDC120DegConduction+0x234>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2200      	movs	r2, #0
 80014a2:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);
 80014a4:	4b14      	ldr	r3, [pc, #80]	; (80014f8 <BLDC120DegConduction+0x234>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2200      	movs	r2, #0
 80014aa:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, __HAL_TIM_GET_AUTORELOAD(&htim8) * pwm_duty);
 80014ac:	4b12      	ldr	r3, [pc, #72]	; (80014f8 <BLDC120DegConduction+0x234>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b2:	ee07 3a90 	vmov	s15, r3
 80014b6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80014ba:	edd7 7a00 	vldr	s15, [r7]
 80014be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014c2:	4b0d      	ldr	r3, [pc, #52]	; (80014f8 <BLDC120DegConduction+0x234>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014ca:	ee17 2a90 	vmov	r2, s15
 80014ce:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80014d0:	2200      	movs	r2, #0
 80014d2:	2180      	movs	r1, #128	; 0x80
 80014d4:	4809      	ldr	r0, [pc, #36]	; (80014fc <BLDC120DegConduction+0x238>)
 80014d6:	f002 ff23 	bl	8004320 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80014da:	2201      	movs	r2, #1
 80014dc:	2101      	movs	r1, #1
 80014de:	4808      	ldr	r0, [pc, #32]	; (8001500 <BLDC120DegConduction+0x23c>)
 80014e0:	f002 ff1e 	bl	8004320 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80014e4:	2200      	movs	r2, #0
 80014e6:	2102      	movs	r1, #2
 80014e8:	4805      	ldr	r0, [pc, #20]	; (8001500 <BLDC120DegConduction+0x23c>)
 80014ea:	f002 ff19 	bl	8004320 <HAL_GPIO_WritePin>
		break;
 80014ee:	bf00      	nop
	}
}
 80014f0:	bf00      	nop
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	200007e4 	.word	0x200007e4
 80014fc:	40020000 	.word	0x40020000
 8001500:	40020400 	.word	0x40020400

08001504 <BLDCStartCurrentSense>:
 * @param
 * @return
 * @note	Triggered by tim8(at the center of center aligned PWM.
 * 			Data will be automatically transfered to the variable by DMA
 */
void BLDCStartCurrentSense(void) {
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)current_sense_data, ADC_CURRENT_SENSE_BUFFER_SIZE);
 8001508:	2203      	movs	r2, #3
 800150a:	4903      	ldr	r1, [pc, #12]	; (8001518 <BLDCStartCurrentSense+0x14>)
 800150c:	4803      	ldr	r0, [pc, #12]	; (800151c <BLDCStartCurrentSense+0x18>)
 800150e:	f001 fcef 	bl	8002ef0 <HAL_ADC_Start_DMA>
}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	20000208 	.word	0x20000208
 800151c:	20000278 	.word	0x20000278

08001520 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	607b      	str	r3, [r7, #4]
 800152a:	4b14      	ldr	r3, [pc, #80]	; (800157c <MX_DMA_Init+0x5c>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	4a13      	ldr	r2, [pc, #76]	; (800157c <MX_DMA_Init+0x5c>)
 8001530:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001534:	6313      	str	r3, [r2, #48]	; 0x30
 8001536:	4b11      	ldr	r3, [pc, #68]	; (800157c <MX_DMA_Init+0x5c>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800153e:	607b      	str	r3, [r7, #4]
 8001540:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001542:	2200      	movs	r2, #0
 8001544:	2100      	movs	r1, #0
 8001546:	2038      	movs	r0, #56	; 0x38
 8001548:	f002 f971 	bl	800382e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800154c:	2038      	movs	r0, #56	; 0x38
 800154e:	f002 f98a 	bl	8003866 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001552:	2200      	movs	r2, #0
 8001554:	2100      	movs	r1, #0
 8001556:	203a      	movs	r0, #58	; 0x3a
 8001558:	f002 f969 	bl	800382e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800155c:	203a      	movs	r0, #58	; 0x3a
 800155e:	f002 f982 	bl	8003866 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8001562:	2200      	movs	r2, #0
 8001564:	2100      	movs	r1, #0
 8001566:	2046      	movs	r0, #70	; 0x46
 8001568:	f002 f961 	bl	800382e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800156c:	2046      	movs	r0, #70	; 0x46
 800156e:	f002 f97a 	bl	8003866 <HAL_NVIC_EnableIRQ>

}
 8001572:	bf00      	nop
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40023800 	.word	0x40023800

08001580 <dma_printf_init>:
#include "dma_ring.h"
#include <stdbool.h>

struct dma_printf_info dmi;

void dma_printf_init(UART_HandleTypeDef *printf_huart){
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
    dmi.huart = printf_huart;
 8001588:	4a09      	ldr	r2, [pc, #36]	; (80015b0 <dma_printf_init+0x30>)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
    dma_ring_init(&dmi.tx_ring);
 8001590:	4807      	ldr	r0, [pc, #28]	; (80015b0 <dma_printf_init+0x30>)
 8001592:	f000 f87d 	bl	8001690 <dma_ring_init>
    dmi.sending = false;
 8001596:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <dma_printf_init+0x30>)
 8001598:	2200      	movs	r2, #0
 800159a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    dmi.previous_send_len = 0;
 800159e:	4b04      	ldr	r3, [pc, #16]	; (80015b0 <dma_printf_init+0x30>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
}
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	20000320 	.word	0x20000320

080015b4 <dma_printf_putc>:

void dma_printf_putc(uint8_t c){
 80015b4:	b590      	push	{r4, r7, lr}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	71fb      	strb	r3, [r7, #7]
    dma_ring_putc(&dmi.tx_ring, c);
 80015be:	79fb      	ldrb	r3, [r7, #7]
 80015c0:	4619      	mov	r1, r3
 80015c2:	4814      	ldr	r0, [pc, #80]	; (8001614 <dma_printf_putc+0x60>)
 80015c4:	f000 f87f 	bl	80016c6 <dma_ring_putc>
    if(!dmi.sending){
 80015c8:	4b12      	ldr	r3, [pc, #72]	; (8001614 <dma_printf_putc+0x60>)
 80015ca:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d11b      	bne.n	800160a <dma_printf_putc+0x56>
        uint16_t len = (uint16_t)dma_ring_available_linear(&dmi.tx_ring);
 80015d2:	4810      	ldr	r0, [pc, #64]	; (8001614 <dma_printf_putc+0x60>)
 80015d4:	f000 f8ac 	bl	8001730 <dma_ring_available_linear>
 80015d8:	4603      	mov	r3, r0
 80015da:	81fb      	strh	r3, [r7, #14]
        dmi.previous_send_len = len;
 80015dc:	89fb      	ldrh	r3, [r7, #14]
 80015de:	4a0d      	ldr	r2, [pc, #52]	; (8001614 <dma_printf_putc+0x60>)
 80015e0:	f8c2 3410 	str.w	r3, [r2, #1040]	; 0x410
        dmi.sending = true;
 80015e4:	4b0b      	ldr	r3, [pc, #44]	; (8001614 <dma_printf_putc+0x60>)
 80015e6:	2201      	movs	r2, #1
 80015e8:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        HAL_UART_Transmit_DMA(dmi.huart, dmi.tx_ring.buf+dma_ring_get_r_ptr(&dmi.tx_ring), len);
 80015ec:	4b09      	ldr	r3, [pc, #36]	; (8001614 <dma_printf_putc+0x60>)
 80015ee:	f8d3 440c 	ldr.w	r4, [r3, #1036]	; 0x40c
 80015f2:	4808      	ldr	r0, [pc, #32]	; (8001614 <dma_printf_putc+0x60>)
 80015f4:	f000 f8bf 	bl	8001776 <dma_ring_get_r_ptr>
 80015f8:	4603      	mov	r3, r0
 80015fa:	461a      	mov	r2, r3
 80015fc:	4b05      	ldr	r3, [pc, #20]	; (8001614 <dma_printf_putc+0x60>)
 80015fe:	4413      	add	r3, r2
 8001600:	89fa      	ldrh	r2, [r7, #14]
 8001602:	4619      	mov	r1, r3
 8001604:	4620      	mov	r0, r4
 8001606:	f004 fd83 	bl	8006110 <HAL_UART_Transmit_DMA>
    }
}
 800160a:	bf00      	nop
 800160c:	3714      	adds	r7, #20
 800160e:	46bd      	mov	sp, r7
 8001610:	bd90      	pop	{r4, r7, pc}
 8001612:	bf00      	nop
 8001614:	20000320 	.word	0x20000320

08001618 <dma_printf_send_it>:

void dma_printf_send_it(UART_HandleTypeDef *printf_huart) {
 8001618:	b590      	push	{r4, r7, lr}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
    if(dmi.huart != printf_huart) return;
 8001620:	4b1a      	ldr	r3, [pc, #104]	; (800168c <dma_printf_send_it+0x74>)
 8001622:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	429a      	cmp	r2, r3
 800162a:	d12b      	bne.n	8001684 <dma_printf_send_it+0x6c>

    dma_ring_forward_r_ptr(&dmi.tx_ring, dmi.previous_send_len);
 800162c:	4b17      	ldr	r3, [pc, #92]	; (800168c <dma_printf_send_it+0x74>)
 800162e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8001632:	4619      	mov	r1, r3
 8001634:	4815      	ldr	r0, [pc, #84]	; (800168c <dma_printf_send_it+0x74>)
 8001636:	f000 f8ab 	bl	8001790 <dma_ring_forward_r_ptr>
    uint16_t len = (uint16_t)dma_ring_available_linear(&dmi.tx_ring);
 800163a:	4814      	ldr	r0, [pc, #80]	; (800168c <dma_printf_send_it+0x74>)
 800163c:	f000 f878 	bl	8001730 <dma_ring_available_linear>
 8001640:	4603      	mov	r3, r0
 8001642:	81fb      	strh	r3, [r7, #14]
    if (len > 0 ) {
 8001644:	89fb      	ldrh	r3, [r7, #14]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d017      	beq.n	800167a <dma_printf_send_it+0x62>
        dmi.previous_send_len = len;
 800164a:	89fb      	ldrh	r3, [r7, #14]
 800164c:	4a0f      	ldr	r2, [pc, #60]	; (800168c <dma_printf_send_it+0x74>)
 800164e:	f8c2 3410 	str.w	r3, [r2, #1040]	; 0x410
        dmi.sending = true;
 8001652:	4b0e      	ldr	r3, [pc, #56]	; (800168c <dma_printf_send_it+0x74>)
 8001654:	2201      	movs	r2, #1
 8001656:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        HAL_UART_Transmit_DMA(dmi.huart, dmi.tx_ring.buf+dma_ring_get_r_ptr(&dmi.tx_ring), len);
 800165a:	4b0c      	ldr	r3, [pc, #48]	; (800168c <dma_printf_send_it+0x74>)
 800165c:	f8d3 440c 	ldr.w	r4, [r3, #1036]	; 0x40c
 8001660:	480a      	ldr	r0, [pc, #40]	; (800168c <dma_printf_send_it+0x74>)
 8001662:	f000 f888 	bl	8001776 <dma_ring_get_r_ptr>
 8001666:	4603      	mov	r3, r0
 8001668:	461a      	mov	r2, r3
 800166a:	4b08      	ldr	r3, [pc, #32]	; (800168c <dma_printf_send_it+0x74>)
 800166c:	4413      	add	r3, r2
 800166e:	89fa      	ldrh	r2, [r7, #14]
 8001670:	4619      	mov	r1, r3
 8001672:	4620      	mov	r0, r4
 8001674:	f004 fd4c 	bl	8006110 <HAL_UART_Transmit_DMA>
 8001678:	e005      	b.n	8001686 <dma_printf_send_it+0x6e>
    }else{
        dmi.sending = false;
 800167a:	4b04      	ldr	r3, [pc, #16]	; (800168c <dma_printf_send_it+0x74>)
 800167c:	2200      	movs	r2, #0
 800167e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8001682:	e000      	b.n	8001686 <dma_printf_send_it+0x6e>
    if(dmi.huart != printf_huart) return;
 8001684:	bf00      	nop
    }
}
 8001686:	3714      	adds	r7, #20
 8001688:	46bd      	mov	sp, r7
 800168a:	bd90      	pop	{r4, r7, pc}
 800168c:	20000320 	.word	0x20000320

08001690 <dma_ring_init>:
#include "dma_ring.h"
#include "main.h"
#include <stdio.h>

void dma_ring_init(struct dma_ring_buf *ring){
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  ring->buf_size = RING_BUF_SIZE;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800169e:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
  ring->w_ptr = 0;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
  ring->r_ptr = 0;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2200      	movs	r2, #0
 80016ae:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
  ring->overwrite_cnt = 0;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2200      	movs	r2, #0
 80016b6:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
}
 80016ba:	bf00      	nop
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <dma_ring_putc>:
  *c = ring->buf[ring->r_ptr];
  ring->r_ptr = next_ptr;
  return RING_SUCCESS;
}

int dma_ring_putc(struct dma_ring_buf *ring, uint8_t c){
 80016c6:	b480      	push	{r7}
 80016c8:	b085      	sub	sp, #20
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
 80016ce:	460b      	mov	r3, r1
 80016d0:	70fb      	strb	r3, [r7, #3]
  uint16_t next_ptr = ring->w_ptr+1;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 80016d8:	3301      	adds	r3, #1
 80016da:	81fb      	strh	r3, [r7, #14]
  if(next_ptr >= ring->buf_size) next_ptr = 0;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 80016e2:	89fa      	ldrh	r2, [r7, #14]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d301      	bcc.n	80016ec <dma_ring_putc+0x26>
 80016e8:	2300      	movs	r3, #0
 80016ea:	81fb      	strh	r3, [r7, #14]

  if(next_ptr == ring->r_ptr){
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 80016f2:	89fa      	ldrh	r2, [r7, #14]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d109      	bne.n	800170c <dma_ring_putc+0x46>
    ring->overwrite_cnt++;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 80016fe:	3301      	adds	r3, #1
 8001700:	b29a      	uxth	r2, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
    return RING_FAIL;
 8001708:	2301      	movs	r3, #1
 800170a:	e00b      	b.n	8001724 <dma_ring_putc+0x5e>
  }
  ring->buf[ring->w_ptr] = c;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8001712:	4619      	mov	r1, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	78fa      	ldrb	r2, [r7, #3]
 8001718:	545a      	strb	r2, [r3, r1]
  ring->w_ptr = next_ptr;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	89fa      	ldrh	r2, [r7, #14]
 800171e:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
  return RING_SUCCESS;
 8001722:	2300      	movs	r3, #0
}
 8001724:	4618      	mov	r0, r3
 8001726:	3714      	adds	r7, #20
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <dma_ring_available_linear>:
    return ring->w_ptr - ring->r_ptr;
  }else{
    return ring->buf_size + ring->w_ptr - ring->r_ptr;
  }
}
int dma_ring_available_linear(struct dma_ring_buf *ring){
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  if(ring->w_ptr >= ring->r_ptr){
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8001744:	429a      	cmp	r2, r3
 8001746:	d308      	bcc.n	800175a <dma_ring_available_linear+0x2a>
    return ring->w_ptr - ring->r_ptr;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 800174e:	461a      	mov	r2, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	e007      	b.n	800176a <dma_ring_available_linear+0x3a>
  }else{
    return ring->buf_size - ring->r_ptr;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8001760:	461a      	mov	r2, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8001768:	1ad3      	subs	r3, r2, r3
  }
}
 800176a:	4618      	mov	r0, r3
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <dma_ring_get_r_ptr>:

uint16_t dma_ring_get_w_ptr(struct dma_ring_buf *ring){
  return ring->w_ptr;
}

uint16_t dma_ring_get_r_ptr(struct dma_ring_buf *ring){
 8001776:	b480      	push	{r7}
 8001778:	b083      	sub	sp, #12
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
  return ring->r_ptr;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
}
 8001784:	4618      	mov	r0, r3
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <dma_ring_forward_r_ptr>:

void dma_ring_forward_r_ptr(struct dma_ring_buf *ring, int len){
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
  while(len > 0){
 800179a:	e018      	b.n	80017ce <dma_ring_forward_r_ptr+0x3e>
    if(ring->r_ptr+1 >= ring->buf_size){
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 80017a2:	3301      	adds	r3, #1
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	f8b2 2400 	ldrh.w	r2, [r2, #1024]	; 0x400
 80017aa:	4293      	cmp	r3, r2
 80017ac:	db04      	blt.n	80017b8 <dma_ring_forward_r_ptr+0x28>
      ring->r_ptr = 0;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2200      	movs	r2, #0
 80017b2:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 80017b6:	e007      	b.n	80017c8 <dma_ring_forward_r_ptr+0x38>
    }else{
      ring->r_ptr += 1;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 80017be:	3301      	adds	r3, #1
 80017c0:	b29a      	uxth	r2, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
    }
    len--;
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	3b01      	subs	r3, #1
 80017cc:	603b      	str	r3, [r7, #0]
  while(len > 0){
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	dce3      	bgt.n	800179c <dma_ring_forward_r_ptr+0xc>
  }
}
 80017d4:	bf00      	nop
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <DRV8305Init>:
/*
 * Initialize DRV8305
 * @param
 * @return
 */
void DRV8305Init(void) {
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
	DRV8305Write(DRV8305_GATE_DRIVER_CONTROL, 0x0256);	//6 PWM mode -> 3 PWM mode
 80017e4:	f240 2156 	movw	r1, #598	; 0x256
 80017e8:	2007      	movs	r0, #7
 80017ea:	f000 f803 	bl	80017f4 <DRV8305Write>
}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
	...

080017f4 <DRV8305Write>:
 * Write Register
 * @param	address : DRV8305 regigster address(8bit)
 * 			data : data to write(11bit)
 * @return
 */
uint16_t DRV8305Write(uint8_t address, uint16_t data) {
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af02      	add	r7, sp, #8
 80017fa:	4603      	mov	r3, r0
 80017fc:	460a      	mov	r2, r1
 80017fe:	71fb      	strb	r3, [r7, #7]
 8001800:	4613      	mov	r3, r2
 8001802:	80bb      	strh	r3, [r7, #4]
	uint16_t adr_data = (address << 11) | (data & 0x07FF);		//0(1bit) + address(4bit) + data(11bit) = 16bit
 8001804:	79fb      	ldrb	r3, [r7, #7]
 8001806:	02db      	lsls	r3, r3, #11
 8001808:	b21a      	sxth	r2, r3
 800180a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800180e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001812:	b21b      	sxth	r3, r3
 8001814:	4313      	orrs	r3, r2
 8001816:	b21b      	sxth	r3, r3
 8001818:	81fb      	strh	r3, [r7, #14]
	uint8_t txdata[2] = {adr_data >> 8, adr_data & 0xFF};		//{msb8bit, lsb8bit}
 800181a:	89fb      	ldrh	r3, [r7, #14]
 800181c:	0a1b      	lsrs	r3, r3, #8
 800181e:	b29b      	uxth	r3, r3
 8001820:	b2db      	uxtb	r3, r3
 8001822:	733b      	strb	r3, [r7, #12]
 8001824:	89fb      	ldrh	r3, [r7, #14]
 8001826:	b2db      	uxtb	r3, r3
 8001828:	737b      	strb	r3, [r7, #13]
	uint8_t rxdata[2] = {};
 800182a:	2300      	movs	r3, #0
 800182c:	813b      	strh	r3, [r7, #8]
	DRV8305Select();
 800182e:	f000 f84d 	bl	80018cc <DRV8305Select>
	HAL_SPI_TransmitReceive(&DRV8305_SPI_HANDLER, txdata, rxdata, 2, 1);
 8001832:	f107 0208 	add.w	r2, r7, #8
 8001836:	f107 010c 	add.w	r1, r7, #12
 800183a:	2301      	movs	r3, #1
 800183c:	9300      	str	r3, [sp, #0]
 800183e:	2302      	movs	r3, #2
 8001840:	4809      	ldr	r0, [pc, #36]	; (8001868 <DRV8305Write+0x74>)
 8001842:	f003 fa41 	bl	8004cc8 <HAL_SPI_TransmitReceive>
	DRV8305Deselect();
 8001846:	f000 f84d 	bl	80018e4 <DRV8305Deselect>
	return (((rxdata[0] & 0x07) << 8) | rxdata[1]);
 800184a:	7a3b      	ldrb	r3, [r7, #8]
 800184c:	021b      	lsls	r3, r3, #8
 800184e:	b21b      	sxth	r3, r3
 8001850:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001854:	b21a      	sxth	r2, r3
 8001856:	7a7b      	ldrb	r3, [r7, #9]
 8001858:	b21b      	sxth	r3, r3
 800185a:	4313      	orrs	r3, r2
 800185c:	b21b      	sxth	r3, r3
 800185e:	b29b      	uxth	r3, r3
}
 8001860:	4618      	mov	r0, r3
 8001862:	3710      	adds	r7, #16
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	20000734 	.word	0x20000734

0800186c <DRV8305Read>:
/*
 * Read Register
 * @param	address : DRV8305 regigster address(8bit)
 * @return	data in the designated address(11bit)
 */
uint16_t DRV8305Read(uint8_t address) {
 800186c:	b580      	push	{r7, lr}
 800186e:	b086      	sub	sp, #24
 8001870:	af02      	add	r7, sp, #8
 8001872:	4603      	mov	r3, r0
 8001874:	71fb      	strb	r3, [r7, #7]
	uint8_t txdata[2] = {(address << 3) | 0x80, 0x00};
 8001876:	79fb      	ldrb	r3, [r7, #7]
 8001878:	00db      	lsls	r3, r3, #3
 800187a:	b25b      	sxtb	r3, r3
 800187c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001880:	b25b      	sxtb	r3, r3
 8001882:	b2db      	uxtb	r3, r3
 8001884:	733b      	strb	r3, [r7, #12]
 8001886:	2300      	movs	r3, #0
 8001888:	737b      	strb	r3, [r7, #13]
	uint8_t rxdata[2] = {};
 800188a:	2300      	movs	r3, #0
 800188c:	813b      	strh	r3, [r7, #8]
	DRV8305Select();
 800188e:	f000 f81d 	bl	80018cc <DRV8305Select>
	HAL_SPI_TransmitReceive(&DRV8305_SPI_HANDLER, txdata, rxdata, 2, 1);
 8001892:	f107 0208 	add.w	r2, r7, #8
 8001896:	f107 010c 	add.w	r1, r7, #12
 800189a:	2301      	movs	r3, #1
 800189c:	9300      	str	r3, [sp, #0]
 800189e:	2302      	movs	r3, #2
 80018a0:	4809      	ldr	r0, [pc, #36]	; (80018c8 <DRV8305Read+0x5c>)
 80018a2:	f003 fa11 	bl	8004cc8 <HAL_SPI_TransmitReceive>
	DRV8305Deselect();
 80018a6:	f000 f81d 	bl	80018e4 <DRV8305Deselect>
	return (((rxdata[0] & 0x07) << 8) | rxdata[1]);
 80018aa:	7a3b      	ldrb	r3, [r7, #8]
 80018ac:	021b      	lsls	r3, r3, #8
 80018ae:	b21b      	sxth	r3, r3
 80018b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80018b4:	b21a      	sxth	r2, r3
 80018b6:	7a7b      	ldrb	r3, [r7, #9]
 80018b8:	b21b      	sxth	r3, r3
 80018ba:	4313      	orrs	r3, r2
 80018bc:	b21b      	sxth	r3, r3
 80018be:	b29b      	uxth	r3, r3
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3710      	adds	r7, #16
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	20000734 	.word	0x20000734

080018cc <DRV8305Select>:
/*
 * Select
 * @param
 * @return
 */
static void DRV8305Select(void) {
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DRV8305_CS_PORT, DRV8305_CS_PIN, GPIO_PIN_RESET);
 80018d0:	2200      	movs	r2, #0
 80018d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018d6:	4802      	ldr	r0, [pc, #8]	; (80018e0 <DRV8305Select+0x14>)
 80018d8:	f002 fd22 	bl	8004320 <HAL_GPIO_WritePin>
}
 80018dc:	bf00      	nop
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	40020400 	.word	0x40020400

080018e4 <DRV8305Deselect>:
/*
 * Deselect
 * @param
 * @return
 */
static void DRV8305Deselect(void) {
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DRV8305_CS_PORT, DRV8305_CS_PIN, GPIO_PIN_SET);
 80018e8:	2201      	movs	r2, #1
 80018ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018ee:	4802      	ldr	r0, [pc, #8]	; (80018f8 <DRV8305Deselect+0x14>)
 80018f0:	f002 fd16 	bl	8004320 <HAL_GPIO_WritePin>
}
 80018f4:	bf00      	nop
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	40020400 	.word	0x40020400

080018fc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b088      	sub	sp, #32
 8001900:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001902:	f107 030c 	add.w	r3, r7, #12
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	605a      	str	r2, [r3, #4]
 800190c:	609a      	str	r2, [r3, #8]
 800190e:	60da      	str	r2, [r3, #12]
 8001910:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001912:	2300      	movs	r3, #0
 8001914:	60bb      	str	r3, [r7, #8]
 8001916:	4b45      	ldr	r3, [pc, #276]	; (8001a2c <MX_GPIO_Init+0x130>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	4a44      	ldr	r2, [pc, #272]	; (8001a2c <MX_GPIO_Init+0x130>)
 800191c:	f043 0304 	orr.w	r3, r3, #4
 8001920:	6313      	str	r3, [r2, #48]	; 0x30
 8001922:	4b42      	ldr	r3, [pc, #264]	; (8001a2c <MX_GPIO_Init+0x130>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	f003 0304 	and.w	r3, r3, #4
 800192a:	60bb      	str	r3, [r7, #8]
 800192c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	607b      	str	r3, [r7, #4]
 8001932:	4b3e      	ldr	r3, [pc, #248]	; (8001a2c <MX_GPIO_Init+0x130>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001936:	4a3d      	ldr	r2, [pc, #244]	; (8001a2c <MX_GPIO_Init+0x130>)
 8001938:	f043 0301 	orr.w	r3, r3, #1
 800193c:	6313      	str	r3, [r2, #48]	; 0x30
 800193e:	4b3b      	ldr	r3, [pc, #236]	; (8001a2c <MX_GPIO_Init+0x130>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	607b      	str	r3, [r7, #4]
 8001948:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800194a:	2300      	movs	r3, #0
 800194c:	603b      	str	r3, [r7, #0]
 800194e:	4b37      	ldr	r3, [pc, #220]	; (8001a2c <MX_GPIO_Init+0x130>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	4a36      	ldr	r2, [pc, #216]	; (8001a2c <MX_GPIO_Init+0x130>)
 8001954:	f043 0302 	orr.w	r3, r3, #2
 8001958:	6313      	str	r3, [r2, #48]	; 0x30
 800195a:	4b34      	ldr	r3, [pc, #208]	; (8001a2c <MX_GPIO_Init+0x130>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	603b      	str	r3, [r7, #0]
 8001964:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
 8001966:	2200      	movs	r2, #0
 8001968:	f248 11d0 	movw	r1, #33232	; 0x81d0
 800196c:	4830      	ldr	r0, [pc, #192]	; (8001a30 <MX_GPIO_Init+0x134>)
 800196e:	f002 fcd7 	bl	8004320 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12, GPIO_PIN_RESET);
 8001972:	2200      	movs	r2, #0
 8001974:	f241 0103 	movw	r1, #4099	; 0x1003
 8001978:	482e      	ldr	r0, [pc, #184]	; (8001a34 <MX_GPIO_Init+0x138>)
 800197a:	f002 fcd1 	bl	8004320 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA6 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_8;
 800197e:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001982:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001984:	2301      	movs	r3, #1
 8001986:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001988:	2300      	movs	r3, #0
 800198a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198c:	2300      	movs	r3, #0
 800198e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001990:	f107 030c 	add.w	r3, r7, #12
 8001994:	4619      	mov	r1, r3
 8001996:	4826      	ldr	r0, [pc, #152]	; (8001a30 <MX_GPIO_Init+0x134>)
 8001998:	f002 fb10 	bl	8003fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA7 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_15;
 800199c:	f248 0380 	movw	r3, #32896	; 0x8080
 80019a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019a2:	2301      	movs	r3, #1
 80019a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a6:	2300      	movs	r3, #0
 80019a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019aa:	2303      	movs	r3, #3
 80019ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ae:	f107 030c 	add.w	r3, r7, #12
 80019b2:	4619      	mov	r1, r3
 80019b4:	481e      	ldr	r0, [pc, #120]	; (8001a30 <MX_GPIO_Init+0x134>)
 80019b6:	f002 fb01 	bl	8003fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12;
 80019ba:	f241 0303 	movw	r3, #4099	; 0x1003
 80019be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c0:	2301      	movs	r3, #1
 80019c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c4:	2300      	movs	r3, #0
 80019c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c8:	2303      	movs	r3, #3
 80019ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019cc:	f107 030c 	add.w	r3, r7, #12
 80019d0:	4619      	mov	r1, r3
 80019d2:	4818      	ldr	r0, [pc, #96]	; (8001a34 <MX_GPIO_Init+0x138>)
 80019d4:	f002 faf2 	bl	8003fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80019d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80019dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019de:	2300      	movs	r3, #0
 80019e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019e2:	2301      	movs	r3, #1
 80019e4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019e6:	f107 030c 	add.w	r3, r7, #12
 80019ea:	4619      	mov	r1, r3
 80019ec:	4811      	ldr	r0, [pc, #68]	; (8001a34 <MX_GPIO_Init+0x138>)
 80019ee:	f002 fae5 	bl	8003fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80019f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019f8:	2300      	movs	r3, #0
 80019fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019fc:	2301      	movs	r3, #1
 80019fe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a00:	f107 030c 	add.w	r3, r7, #12
 8001a04:	4619      	mov	r1, r3
 8001a06:	480c      	ldr	r0, [pc, #48]	; (8001a38 <MX_GPIO_Init+0x13c>)
 8001a08:	f002 fad8 	bl	8003fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001a0c:	2380      	movs	r3, #128	; 0x80
 8001a0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a10:	2300      	movs	r3, #0
 8001a12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a14:	2300      	movs	r3, #0
 8001a16:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a18:	f107 030c 	add.w	r3, r7, #12
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4805      	ldr	r0, [pc, #20]	; (8001a34 <MX_GPIO_Init+0x138>)
 8001a20:	f002 facc 	bl	8003fbc <HAL_GPIO_Init>

}
 8001a24:	bf00      	nop
 8001a26:	3720      	adds	r7, #32
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	40023800 	.word	0x40023800
 8001a30:	40020000 	.word	0x40020000
 8001a34:	40020400 	.word	0x40020400
 8001a38:	40020800 	.word	0x40020800

08001a3c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6) {
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a89      	ldr	r2, [pc, #548]	; (8001c70 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	f040 810b 	bne.w	8001c66 <HAL_TIM_PeriodElapsedCallback+0x22a>
		static int32_t t = 0;
		static float pwm_duty = 0.25;
		static uint16_t angle_data;
		static float elec_angle_deg;

		angle_data = (AS5147Read(AS5147_ANGLECOM) & 0x3FFF);		//mask lower 14bit
 8001a50:	f643 70ff 	movw	r0, #16383	; 0x3fff
 8001a54:	f7ff fbb8 	bl	80011c8 <AS5147Read>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001a5e:	b29a      	uxth	r2, r3
 8001a60:	4b84      	ldr	r3, [pc, #528]	; (8001c74 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001a62:	801a      	strh	r2, [r3, #0]
		elec_angle_deg = fmodf(((float)angle_data + ((float)0x3FFF / 12) - 361), ((float)0x3FFF / 12)) * ((float)(360 * 12) / 0x3FFF);
 8001a64:	4b83      	ldr	r3, [pc, #524]	; (8001c74 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001a66:	881b      	ldrh	r3, [r3, #0]
 8001a68:	ee07 3a90 	vmov	s15, r3
 8001a6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a70:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8001c78 <HAL_TIM_PeriodElapsedCallback+0x23c>
 8001a74:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a78:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8001c7c <HAL_TIM_PeriodElapsedCallback+0x240>
 8001a7c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a80:	eddf 0a7d 	vldr	s1, [pc, #500]	; 8001c78 <HAL_TIM_PeriodElapsedCallback+0x23c>
 8001a84:	eeb0 0a67 	vmov.f32	s0, s15
 8001a88:	f007 fc00 	bl	800928c <fmodf>
 8001a8c:	eeb0 7a40 	vmov.f32	s14, s0
 8001a90:	eddf 7a7b 	vldr	s15, [pc, #492]	; 8001c80 <HAL_TIM_PeriodElapsedCallback+0x244>
 8001a94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a98:	4b7a      	ldr	r3, [pc, #488]	; (8001c84 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001a9a:	edc3 7a00 	vstr	s15, [r3]

		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET) {
 8001a9e:	2180      	movs	r1, #128	; 0x80
 8001aa0:	4879      	ldr	r0, [pc, #484]	; (8001c88 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001aa2:	f002 fc25 	bl	80042f0 <HAL_GPIO_ReadPin>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	f040 80ae 	bne.w	8001c0a <HAL_TIM_PeriodElapsedCallback+0x1ce>
			if     ((90.0f  <= elec_angle_deg) && (elec_angle_deg < 150.0f)) {BLDC120DegConduction(BLDC_UtoV, pwm_duty);}
 8001aae:	4b75      	ldr	r3, [pc, #468]	; (8001c84 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001ab0:	edd3 7a00 	vldr	s15, [r3]
 8001ab4:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8001c8c <HAL_TIM_PeriodElapsedCallback+0x250>
 8001ab8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ac0:	db12      	blt.n	8001ae8 <HAL_TIM_PeriodElapsedCallback+0xac>
 8001ac2:	4b70      	ldr	r3, [pc, #448]	; (8001c84 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001ac4:	edd3 7a00 	vldr	s15, [r3]
 8001ac8:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8001c90 <HAL_TIM_PeriodElapsedCallback+0x254>
 8001acc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ad4:	d508      	bpl.n	8001ae8 <HAL_TIM_PeriodElapsedCallback+0xac>
 8001ad6:	4b6f      	ldr	r3, [pc, #444]	; (8001c94 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001ad8:	edd3 7a00 	vldr	s15, [r3]
 8001adc:	eeb0 0a67 	vmov.f32	s0, s15
 8001ae0:	2000      	movs	r0, #0
 8001ae2:	f7ff fbef 	bl	80012c4 <BLDC120DegConduction>
 8001ae6:	e0ab      	b.n	8001c40 <HAL_TIM_PeriodElapsedCallback+0x204>
			else if((150.0f <= elec_angle_deg) && (elec_angle_deg < 210.0f)) {BLDC120DegConduction(BLDC_UtoW, pwm_duty);}
 8001ae8:	4b66      	ldr	r3, [pc, #408]	; (8001c84 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001aea:	edd3 7a00 	vldr	s15, [r3]
 8001aee:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8001c90 <HAL_TIM_PeriodElapsedCallback+0x254>
 8001af2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001afa:	db12      	blt.n	8001b22 <HAL_TIM_PeriodElapsedCallback+0xe6>
 8001afc:	4b61      	ldr	r3, [pc, #388]	; (8001c84 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001afe:	edd3 7a00 	vldr	s15, [r3]
 8001b02:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8001c98 <HAL_TIM_PeriodElapsedCallback+0x25c>
 8001b06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b0e:	d508      	bpl.n	8001b22 <HAL_TIM_PeriodElapsedCallback+0xe6>
 8001b10:	4b60      	ldr	r3, [pc, #384]	; (8001c94 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001b12:	edd3 7a00 	vldr	s15, [r3]
 8001b16:	eeb0 0a67 	vmov.f32	s0, s15
 8001b1a:	2001      	movs	r0, #1
 8001b1c:	f7ff fbd2 	bl	80012c4 <BLDC120DegConduction>
 8001b20:	e08e      	b.n	8001c40 <HAL_TIM_PeriodElapsedCallback+0x204>
			else if((210.0f <= elec_angle_deg) && (elec_angle_deg < 270.0f)) {BLDC120DegConduction(BLDC_VtoW, pwm_duty);}
 8001b22:	4b58      	ldr	r3, [pc, #352]	; (8001c84 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001b24:	edd3 7a00 	vldr	s15, [r3]
 8001b28:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8001c98 <HAL_TIM_PeriodElapsedCallback+0x25c>
 8001b2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b34:	db12      	blt.n	8001b5c <HAL_TIM_PeriodElapsedCallback+0x120>
 8001b36:	4b53      	ldr	r3, [pc, #332]	; (8001c84 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001b38:	edd3 7a00 	vldr	s15, [r3]
 8001b3c:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8001c9c <HAL_TIM_PeriodElapsedCallback+0x260>
 8001b40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b48:	d508      	bpl.n	8001b5c <HAL_TIM_PeriodElapsedCallback+0x120>
 8001b4a:	4b52      	ldr	r3, [pc, #328]	; (8001c94 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001b4c:	edd3 7a00 	vldr	s15, [r3]
 8001b50:	eeb0 0a67 	vmov.f32	s0, s15
 8001b54:	2002      	movs	r0, #2
 8001b56:	f7ff fbb5 	bl	80012c4 <BLDC120DegConduction>
 8001b5a:	e071      	b.n	8001c40 <HAL_TIM_PeriodElapsedCallback+0x204>
			else if((270.0f <= elec_angle_deg) && (elec_angle_deg < 330.0f)) {BLDC120DegConduction(BLDC_VtoU, pwm_duty);}
 8001b5c:	4b49      	ldr	r3, [pc, #292]	; (8001c84 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001b5e:	edd3 7a00 	vldr	s15, [r3]
 8001b62:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8001c9c <HAL_TIM_PeriodElapsedCallback+0x260>
 8001b66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b6e:	db12      	blt.n	8001b96 <HAL_TIM_PeriodElapsedCallback+0x15a>
 8001b70:	4b44      	ldr	r3, [pc, #272]	; (8001c84 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001b72:	edd3 7a00 	vldr	s15, [r3]
 8001b76:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8001ca0 <HAL_TIM_PeriodElapsedCallback+0x264>
 8001b7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b82:	d508      	bpl.n	8001b96 <HAL_TIM_PeriodElapsedCallback+0x15a>
 8001b84:	4b43      	ldr	r3, [pc, #268]	; (8001c94 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001b86:	edd3 7a00 	vldr	s15, [r3]
 8001b8a:	eeb0 0a67 	vmov.f32	s0, s15
 8001b8e:	2003      	movs	r0, #3
 8001b90:	f7ff fb98 	bl	80012c4 <BLDC120DegConduction>
 8001b94:	e054      	b.n	8001c40 <HAL_TIM_PeriodElapsedCallback+0x204>
			else if((330.0f <= elec_angle_deg) || (elec_angle_deg <  30.0f)) {BLDC120DegConduction(BLDC_WtoU, pwm_duty);}
 8001b96:	4b3b      	ldr	r3, [pc, #236]	; (8001c84 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001b98:	edd3 7a00 	vldr	s15, [r3]
 8001b9c:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8001ca0 <HAL_TIM_PeriodElapsedCallback+0x264>
 8001ba0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ba8:	da09      	bge.n	8001bbe <HAL_TIM_PeriodElapsedCallback+0x182>
 8001baa:	4b36      	ldr	r3, [pc, #216]	; (8001c84 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001bac:	edd3 7a00 	vldr	s15, [r3]
 8001bb0:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001bb4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bbc:	d508      	bpl.n	8001bd0 <HAL_TIM_PeriodElapsedCallback+0x194>
 8001bbe:	4b35      	ldr	r3, [pc, #212]	; (8001c94 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001bc0:	edd3 7a00 	vldr	s15, [r3]
 8001bc4:	eeb0 0a67 	vmov.f32	s0, s15
 8001bc8:	2004      	movs	r0, #4
 8001bca:	f7ff fb7b 	bl	80012c4 <BLDC120DegConduction>
 8001bce:	e037      	b.n	8001c40 <HAL_TIM_PeriodElapsedCallback+0x204>
			else if(( 30.0f <= elec_angle_deg) && (elec_angle_deg <  90.0f)) {BLDC120DegConduction(BLDC_WtoV, pwm_duty);}
 8001bd0:	4b2c      	ldr	r3, [pc, #176]	; (8001c84 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001bd2:	edd3 7a00 	vldr	s15, [r3]
 8001bd6:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001bda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001be2:	db2d      	blt.n	8001c40 <HAL_TIM_PeriodElapsedCallback+0x204>
 8001be4:	4b27      	ldr	r3, [pc, #156]	; (8001c84 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001be6:	edd3 7a00 	vldr	s15, [r3]
 8001bea:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001c8c <HAL_TIM_PeriodElapsedCallback+0x250>
 8001bee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bf6:	d523      	bpl.n	8001c40 <HAL_TIM_PeriodElapsedCallback+0x204>
 8001bf8:	4b26      	ldr	r3, [pc, #152]	; (8001c94 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001bfa:	edd3 7a00 	vldr	s15, [r3]
 8001bfe:	eeb0 0a67 	vmov.f32	s0, s15
 8001c02:	2005      	movs	r0, #5
 8001c04:	f7ff fb5e 	bl	80012c4 <BLDC120DegConduction>
 8001c08:	e01a      	b.n	8001c40 <HAL_TIM_PeriodElapsedCallback+0x204>
		} else {
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);
 8001c0a:	4b26      	ldr	r3, [pc, #152]	; (8001ca4 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);
 8001c12:	4b24      	ldr	r3, [pc, #144]	; (8001ca4 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2200      	movs	r2, #0
 8001c18:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, 0);
 8001c1a:	4b22      	ldr	r3, [pc, #136]	; (8001ca4 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8001c22:	2200      	movs	r2, #0
 8001c24:	2180      	movs	r1, #128	; 0x80
 8001c26:	4820      	ldr	r0, [pc, #128]	; (8001ca8 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001c28:	f002 fb7a 	bl	8004320 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	2101      	movs	r1, #1
 8001c30:	4815      	ldr	r0, [pc, #84]	; (8001c88 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001c32:	f002 fb75 	bl	8004320 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8001c36:	2200      	movs	r2, #0
 8001c38:	2102      	movs	r1, #2
 8001c3a:	4813      	ldr	r0, [pc, #76]	; (8001c88 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001c3c:	f002 fb70 	bl	8004320 <HAL_GPIO_WritePin>

		}

		if (t > 5000) {
 8001c40:	4b1a      	ldr	r3, [pc, #104]	; (8001cac <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	dd07      	ble.n	8001c5c <HAL_TIM_PeriodElapsedCallback+0x220>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001c4c:	2120      	movs	r1, #32
 8001c4e:	4816      	ldr	r0, [pc, #88]	; (8001ca8 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001c50:	f002 fb7f 	bl	8004352 <HAL_GPIO_TogglePin>
			t = 0;
 8001c54:	4b15      	ldr	r3, [pc, #84]	; (8001cac <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	601a      	str	r2, [r3, #0]
		} else {
			t++;
		}
	}
}
 8001c5a:	e004      	b.n	8001c66 <HAL_TIM_PeriodElapsedCallback+0x22a>
			t++;
 8001c5c:	4b13      	ldr	r3, [pc, #76]	; (8001cac <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	3301      	adds	r3, #1
 8001c62:	4a12      	ldr	r2, [pc, #72]	; (8001cac <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001c64:	6013      	str	r3, [r2, #0]
}
 8001c66:	bf00      	nop
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	40001000 	.word	0x40001000
 8001c74:	20000210 	.word	0x20000210
 8001c78:	44aaa800 	.word	0x44aaa800
 8001c7c:	43b48000 	.word	0x43b48000
 8001c80:	3e87021c 	.word	0x3e87021c
 8001c84:	20000214 	.word	0x20000214
 8001c88:	40020400 	.word	0x40020400
 8001c8c:	42b40000 	.word	0x42b40000
 8001c90:	43160000 	.word	0x43160000
 8001c94:	20000008 	.word	0x20000008
 8001c98:	43520000 	.word	0x43520000
 8001c9c:	43870000 	.word	0x43870000
 8001ca0:	43a50000 	.word	0x43a50000
 8001ca4:	200007e4 	.word	0x200007e4
 8001ca8:	40020000 	.word	0x40020000
 8001cac:	20000218 	.word	0x20000218

08001cb0 <__io_putchar>:
#ifdef __GNUC__
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
void __io_putchar(uint8_t ch) {
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	71fb      	strb	r3, [r7, #7]
	dma_printf_putc(ch);
 8001cba:	79fb      	ldrb	r3, [r7, #7]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff fc79 	bl	80015b4 <dma_printf_putc>
}
 8001cc2:	bf00      	nop
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
	...

08001ccc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cd0:	f000 fef6 	bl	8002ac0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cd4:	f000 f858 	bl	8001d88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cd8:	f7ff fe10 	bl	80018fc <MX_GPIO_Init>
  MX_DMA_Init();
 8001cdc:	f7ff fc20 	bl	8001520 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001ce0:	f000 fde4 	bl	80028ac <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8001ce4:	f000 f8e6 	bl	8001eb4 <MX_SPI2_Init>
  MX_TIM8_Init();
 8001ce8:	f000 fbd0 	bl	800248c <MX_TIM8_Init>
  MX_SPI3_Init();
 8001cec:	f000 f918 	bl	8001f20 <MX_SPI3_Init>
  MX_TIM6_Init();
 8001cf0:	f000 fb96 	bl	8002420 <MX_TIM6_Init>
  MX_ADC1_Init();
 8001cf4:	f7ff f8d4 	bl	8000ea0 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001cf8:	f000 fb0e 	bl	8002318 <MX_TIM2_Init>
  MX_ADC2_Init();
 8001cfc:	f7ff f93e 	bl	8000f7c <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  //wait after power on
  HAL_Delay(10);
 8001d00:	200a      	movs	r0, #10
 8001d02:	f000 ff4f 	bl	8002ba4 <HAL_Delay>

  //printf settings
  dma_printf_init(&huart1);
 8001d06:	481b      	ldr	r0, [pc, #108]	; (8001d74 <main+0xa8>)
 8001d08:	f7ff fc3a 	bl	8001580 <dma_printf_init>
  setbuf(stdin, NULL);
 8001d0c:	4b1a      	ldr	r3, [pc, #104]	; (8001d78 <main+0xac>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	2100      	movs	r1, #0
 8001d14:	4618      	mov	r0, r3
 8001d16:	f005 fc8f 	bl	8007638 <setbuf>
  setbuf(stdout, NULL);
 8001d1a:	4b17      	ldr	r3, [pc, #92]	; (8001d78 <main+0xac>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	2100      	movs	r1, #0
 8001d22:	4618      	mov	r0, r3
 8001d24:	f005 fc88 	bl	8007638 <setbuf>
  setbuf(stderr, NULL);
 8001d28:	4b13      	ldr	r3, [pc, #76]	; (8001d78 <main+0xac>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	2100      	movs	r1, #0
 8001d30:	4618      	mov	r0, r3
 8001d32:	f005 fc81 	bl	8007638 <setbuf>
  printf("Hello BLDCDriver_v1!\n");
 8001d36:	4811      	ldr	r0, [pc, #68]	; (8001d7c <main+0xb0>)
 8001d38:	f005 fc76 	bl	8007628 <puts>

  //dummy spi com(to avoid error at the first com)
  AS5147Read(AS5147_ANGLECOM);
 8001d3c:	f643 70ff 	movw	r0, #16383	; 0x3fff
 8001d40:	f7ff fa42 	bl	80011c8 <AS5147Read>
  DRV8305Read(DRV8305_WARNING_WATCHDOG_RESET);
 8001d44:	2001      	movs	r0, #1
 8001d46:	f7ff fd91 	bl	800186c <DRV8305Read>

  //Enable BLDC
  DRV8305Init();
 8001d4a:	f7ff fd49 	bl	80017e0 <DRV8305Init>
//  BLDCEnable();

//  while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_RESET);
//  BLDCCalibZeroPos();

  BLDCStartCurrentSense();
 8001d4e:	f7ff fbd9 	bl	8001504 <BLDCStartCurrentSense>

  //start timer interrupt
//  HAL_TIM_Base_Start_IT(&htim6);

  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 250);
 8001d52:	4b0b      	ldr	r3, [pc, #44]	; (8001d80 <main+0xb4>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	22fa      	movs	r2, #250	; 0xfa
 8001d58:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	4808      	ldr	r0, [pc, #32]	; (8001d80 <main+0xb4>)
 8001d5e:	f003 fa57 	bl	8005210 <HAL_TIM_PWM_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //LED
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8001d62:	2110      	movs	r1, #16
 8001d64:	4807      	ldr	r0, [pc, #28]	; (8001d84 <main+0xb8>)
 8001d66:	f002 faf4 	bl	8004352 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8001d6a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d6e:	f000 ff19 	bl	8002ba4 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8001d72:	e7f6      	b.n	8001d62 <main+0x96>
 8001d74:	20000a88 	.word	0x20000a88
 8001d78:	20000018 	.word	0x20000018
 8001d7c:	08009470 	.word	0x08009470
 8001d80:	20000864 	.word	0x20000864
 8001d84:	40020000 	.word	0x40020000

08001d88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b094      	sub	sp, #80	; 0x50
 8001d8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d8e:	f107 0320 	add.w	r3, r7, #32
 8001d92:	2230      	movs	r2, #48	; 0x30
 8001d94:	2100      	movs	r1, #0
 8001d96:	4618      	mov	r0, r3
 8001d98:	f005 f898 	bl	8006ecc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d9c:	f107 030c 	add.w	r3, r7, #12
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	605a      	str	r2, [r3, #4]
 8001da6:	609a      	str	r2, [r3, #8]
 8001da8:	60da      	str	r2, [r3, #12]
 8001daa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dac:	2300      	movs	r3, #0
 8001dae:	60bb      	str	r3, [r7, #8]
 8001db0:	4b28      	ldr	r3, [pc, #160]	; (8001e54 <SystemClock_Config+0xcc>)
 8001db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db4:	4a27      	ldr	r2, [pc, #156]	; (8001e54 <SystemClock_Config+0xcc>)
 8001db6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dba:	6413      	str	r3, [r2, #64]	; 0x40
 8001dbc:	4b25      	ldr	r3, [pc, #148]	; (8001e54 <SystemClock_Config+0xcc>)
 8001dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc4:	60bb      	str	r3, [r7, #8]
 8001dc6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001dc8:	2300      	movs	r3, #0
 8001dca:	607b      	str	r3, [r7, #4]
 8001dcc:	4b22      	ldr	r3, [pc, #136]	; (8001e58 <SystemClock_Config+0xd0>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a21      	ldr	r2, [pc, #132]	; (8001e58 <SystemClock_Config+0xd0>)
 8001dd2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dd6:	6013      	str	r3, [r2, #0]
 8001dd8:	4b1f      	ldr	r3, [pc, #124]	; (8001e58 <SystemClock_Config+0xd0>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001de0:	607b      	str	r3, [r7, #4]
 8001de2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001de4:	2302      	movs	r3, #2
 8001de6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001de8:	2301      	movs	r3, #1
 8001dea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001dec:	2310      	movs	r3, #16
 8001dee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001df0:	2302      	movs	r3, #2
 8001df2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001df4:	2300      	movs	r3, #0
 8001df6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001df8:	2308      	movs	r3, #8
 8001dfa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001dfc:	2364      	movs	r3, #100	; 0x64
 8001dfe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e00:	2302      	movs	r3, #2
 8001e02:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001e04:	2304      	movs	r3, #4
 8001e06:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e08:	f107 0320 	add.w	r3, r7, #32
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f002 fabb 	bl	8004388 <HAL_RCC_OscConfig>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001e18:	f000 f844 	bl	8001ea4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e1c:	230f      	movs	r3, #15
 8001e1e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e20:	2302      	movs	r3, #2
 8001e22:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e24:	2300      	movs	r3, #0
 8001e26:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001e28:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001e2c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001e2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e32:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001e34:	f107 030c 	add.w	r3, r7, #12
 8001e38:	2103      	movs	r1, #3
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f002 fd14 	bl	8004868 <HAL_RCC_ClockConfig>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001e46:	f000 f82d 	bl	8001ea4 <Error_Handler>
  }
}
 8001e4a:	bf00      	nop
 8001e4c:	3750      	adds	r7, #80	; 0x50
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	40023800 	.word	0x40023800
 8001e58:	40007000 	.word	0x40007000

08001e5c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
//UART Callback for printf(...)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle) {
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
	uart_flag=1;
 8001e64:	4b05      	ldr	r3, [pc, #20]	; (8001e7c <HAL_UART_RxCpltCallback+0x20>)
 8001e66:	2201      	movs	r2, #1
 8001e68:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart1, uart_buf, 4);
 8001e6a:	2204      	movs	r2, #4
 8001e6c:	4904      	ldr	r1, [pc, #16]	; (8001e80 <HAL_UART_RxCpltCallback+0x24>)
 8001e6e:	4805      	ldr	r0, [pc, #20]	; (8001e84 <HAL_UART_RxCpltCallback+0x28>)
 8001e70:	f004 f8f9 	bl	8006066 <HAL_UART_Receive_IT>
}
 8001e74:	bf00      	nop
 8001e76:	3708      	adds	r7, #8
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	2000020e 	.word	0x2000020e
 8001e80:	20000000 	.word	0x20000000
 8001e84:	20000a88 	.word	0x20000a88

08001e88 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
    uart_com_send_it(huart);
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f000 fc55 	bl	8002740 <uart_com_send_it>
    dma_printf_send_it(huart);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f7ff fbbe 	bl	8001618 <dma_printf_send_it>
}
 8001e9c:	bf00      	nop
 8001e9e:	3708      	adds	r7, #8
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001ea8:	bf00      	nop
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
	...

08001eb4 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8001eb8:	4b17      	ldr	r3, [pc, #92]	; (8001f18 <MX_SPI2_Init+0x64>)
 8001eba:	4a18      	ldr	r2, [pc, #96]	; (8001f1c <MX_SPI2_Init+0x68>)
 8001ebc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001ebe:	4b16      	ldr	r3, [pc, #88]	; (8001f18 <MX_SPI2_Init+0x64>)
 8001ec0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ec4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001ec6:	4b14      	ldr	r3, [pc, #80]	; (8001f18 <MX_SPI2_Init+0x64>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ecc:	4b12      	ldr	r3, [pc, #72]	; (8001f18 <MX_SPI2_Init+0x64>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ed2:	4b11      	ldr	r3, [pc, #68]	; (8001f18 <MX_SPI2_Init+0x64>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001ed8:	4b0f      	ldr	r3, [pc, #60]	; (8001f18 <MX_SPI2_Init+0x64>)
 8001eda:	2201      	movs	r2, #1
 8001edc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001ede:	4b0e      	ldr	r3, [pc, #56]	; (8001f18 <MX_SPI2_Init+0x64>)
 8001ee0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ee4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001ee6:	4b0c      	ldr	r3, [pc, #48]	; (8001f18 <MX_SPI2_Init+0x64>)
 8001ee8:	2218      	movs	r2, #24
 8001eea:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001eec:	4b0a      	ldr	r3, [pc, #40]	; (8001f18 <MX_SPI2_Init+0x64>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ef2:	4b09      	ldr	r3, [pc, #36]	; (8001f18 <MX_SPI2_Init+0x64>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ef8:	4b07      	ldr	r3, [pc, #28]	; (8001f18 <MX_SPI2_Init+0x64>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001efe:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <MX_SPI2_Init+0x64>)
 8001f00:	220a      	movs	r2, #10
 8001f02:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001f04:	4804      	ldr	r0, [pc, #16]	; (8001f18 <MX_SPI2_Init+0x64>)
 8001f06:	f002 fe7b 	bl	8004c00 <HAL_SPI_Init>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001f10:	f7ff ffc8 	bl	8001ea4 <Error_Handler>
  }

}
 8001f14:	bf00      	nop
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	20000734 	.word	0x20000734
 8001f1c:	40003800 	.word	0x40003800

08001f20 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8001f24:	4b17      	ldr	r3, [pc, #92]	; (8001f84 <MX_SPI3_Init+0x64>)
 8001f26:	4a18      	ldr	r2, [pc, #96]	; (8001f88 <MX_SPI3_Init+0x68>)
 8001f28:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001f2a:	4b16      	ldr	r3, [pc, #88]	; (8001f84 <MX_SPI3_Init+0x64>)
 8001f2c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f30:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001f32:	4b14      	ldr	r3, [pc, #80]	; (8001f84 <MX_SPI3_Init+0x64>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f38:	4b12      	ldr	r3, [pc, #72]	; (8001f84 <MX_SPI3_Init+0x64>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f3e:	4b11      	ldr	r3, [pc, #68]	; (8001f84 <MX_SPI3_Init+0x64>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001f44:	4b0f      	ldr	r3, [pc, #60]	; (8001f84 <MX_SPI3_Init+0x64>)
 8001f46:	2201      	movs	r2, #1
 8001f48:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001f4a:	4b0e      	ldr	r3, [pc, #56]	; (8001f84 <MX_SPI3_Init+0x64>)
 8001f4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f50:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001f52:	4b0c      	ldr	r3, [pc, #48]	; (8001f84 <MX_SPI3_Init+0x64>)
 8001f54:	2208      	movs	r2, #8
 8001f56:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f58:	4b0a      	ldr	r3, [pc, #40]	; (8001f84 <MX_SPI3_Init+0x64>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f5e:	4b09      	ldr	r3, [pc, #36]	; (8001f84 <MX_SPI3_Init+0x64>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f64:	4b07      	ldr	r3, [pc, #28]	; (8001f84 <MX_SPI3_Init+0x64>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001f6a:	4b06      	ldr	r3, [pc, #24]	; (8001f84 <MX_SPI3_Init+0x64>)
 8001f6c:	220a      	movs	r2, #10
 8001f6e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001f70:	4804      	ldr	r0, [pc, #16]	; (8001f84 <MX_SPI3_Init+0x64>)
 8001f72:	f002 fe45 	bl	8004c00 <HAL_SPI_Init>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001f7c:	f7ff ff92 	bl	8001ea4 <Error_Handler>
  }

}
 8001f80:	bf00      	nop
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	2000078c 	.word	0x2000078c
 8001f88:	40003c00 	.word	0x40003c00

08001f8c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b08c      	sub	sp, #48	; 0x30
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f94:	f107 031c 	add.w	r3, r7, #28
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	605a      	str	r2, [r3, #4]
 8001f9e:	609a      	str	r2, [r3, #8]
 8001fa0:	60da      	str	r2, [r3, #12]
 8001fa2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a33      	ldr	r2, [pc, #204]	; (8002078 <HAL_SPI_MspInit+0xec>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d12d      	bne.n	800200a <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001fae:	2300      	movs	r3, #0
 8001fb0:	61bb      	str	r3, [r7, #24]
 8001fb2:	4b32      	ldr	r3, [pc, #200]	; (800207c <HAL_SPI_MspInit+0xf0>)
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb6:	4a31      	ldr	r2, [pc, #196]	; (800207c <HAL_SPI_MspInit+0xf0>)
 8001fb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fbc:	6413      	str	r3, [r2, #64]	; 0x40
 8001fbe:	4b2f      	ldr	r3, [pc, #188]	; (800207c <HAL_SPI_MspInit+0xf0>)
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fc6:	61bb      	str	r3, [r7, #24]
 8001fc8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fca:	2300      	movs	r3, #0
 8001fcc:	617b      	str	r3, [r7, #20]
 8001fce:	4b2b      	ldr	r3, [pc, #172]	; (800207c <HAL_SPI_MspInit+0xf0>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd2:	4a2a      	ldr	r2, [pc, #168]	; (800207c <HAL_SPI_MspInit+0xf0>)
 8001fd4:	f043 0302 	orr.w	r3, r3, #2
 8001fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fda:	4b28      	ldr	r3, [pc, #160]	; (800207c <HAL_SPI_MspInit+0xf0>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	617b      	str	r3, [r7, #20]
 8001fe4:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001fe6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001fea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fec:	2302      	movs	r3, #2
 8001fee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ff8:	2305      	movs	r3, #5
 8001ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ffc:	f107 031c 	add.w	r3, r7, #28
 8002000:	4619      	mov	r1, r3
 8002002:	481f      	ldr	r0, [pc, #124]	; (8002080 <HAL_SPI_MspInit+0xf4>)
 8002004:	f001 ffda 	bl	8003fbc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8002008:	e031      	b.n	800206e <HAL_SPI_MspInit+0xe2>
  else if(spiHandle->Instance==SPI3)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a1d      	ldr	r2, [pc, #116]	; (8002084 <HAL_SPI_MspInit+0xf8>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d12c      	bne.n	800206e <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002014:	2300      	movs	r3, #0
 8002016:	613b      	str	r3, [r7, #16]
 8002018:	4b18      	ldr	r3, [pc, #96]	; (800207c <HAL_SPI_MspInit+0xf0>)
 800201a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201c:	4a17      	ldr	r2, [pc, #92]	; (800207c <HAL_SPI_MspInit+0xf0>)
 800201e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002022:	6413      	str	r3, [r2, #64]	; 0x40
 8002024:	4b15      	ldr	r3, [pc, #84]	; (800207c <HAL_SPI_MspInit+0xf0>)
 8002026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002028:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800202c:	613b      	str	r3, [r7, #16]
 800202e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002030:	2300      	movs	r3, #0
 8002032:	60fb      	str	r3, [r7, #12]
 8002034:	4b11      	ldr	r3, [pc, #68]	; (800207c <HAL_SPI_MspInit+0xf0>)
 8002036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002038:	4a10      	ldr	r2, [pc, #64]	; (800207c <HAL_SPI_MspInit+0xf0>)
 800203a:	f043 0304 	orr.w	r3, r3, #4
 800203e:	6313      	str	r3, [r2, #48]	; 0x30
 8002040:	4b0e      	ldr	r3, [pc, #56]	; (800207c <HAL_SPI_MspInit+0xf0>)
 8002042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002044:	f003 0304 	and.w	r3, r3, #4
 8002048:	60fb      	str	r3, [r7, #12]
 800204a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800204c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002050:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002052:	2302      	movs	r3, #2
 8002054:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002056:	2300      	movs	r3, #0
 8002058:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800205a:	2303      	movs	r3, #3
 800205c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800205e:	2306      	movs	r3, #6
 8002060:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002062:	f107 031c 	add.w	r3, r7, #28
 8002066:	4619      	mov	r1, r3
 8002068:	4807      	ldr	r0, [pc, #28]	; (8002088 <HAL_SPI_MspInit+0xfc>)
 800206a:	f001 ffa7 	bl	8003fbc <HAL_GPIO_Init>
}
 800206e:	bf00      	nop
 8002070:	3730      	adds	r7, #48	; 0x30
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	40003800 	.word	0x40003800
 800207c:	40023800 	.word	0x40023800
 8002080:	40020400 	.word	0x40020400
 8002084:	40003c00 	.word	0x40003c00
 8002088:	40020800 	.word	0x40020800

0800208c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002092:	2300      	movs	r3, #0
 8002094:	607b      	str	r3, [r7, #4]
 8002096:	4b10      	ldr	r3, [pc, #64]	; (80020d8 <HAL_MspInit+0x4c>)
 8002098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209a:	4a0f      	ldr	r2, [pc, #60]	; (80020d8 <HAL_MspInit+0x4c>)
 800209c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020a0:	6453      	str	r3, [r2, #68]	; 0x44
 80020a2:	4b0d      	ldr	r3, [pc, #52]	; (80020d8 <HAL_MspInit+0x4c>)
 80020a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020aa:	607b      	str	r3, [r7, #4]
 80020ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020ae:	2300      	movs	r3, #0
 80020b0:	603b      	str	r3, [r7, #0]
 80020b2:	4b09      	ldr	r3, [pc, #36]	; (80020d8 <HAL_MspInit+0x4c>)
 80020b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b6:	4a08      	ldr	r2, [pc, #32]	; (80020d8 <HAL_MspInit+0x4c>)
 80020b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020bc:	6413      	str	r3, [r2, #64]	; 0x40
 80020be:	4b06      	ldr	r3, [pc, #24]	; (80020d8 <HAL_MspInit+0x4c>)
 80020c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c6:	603b      	str	r3, [r7, #0]
 80020c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020ca:	bf00      	nop
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	40023800 	.word	0x40023800

080020dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80020e0:	bf00      	nop
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr

080020ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020ea:	b480      	push	{r7}
 80020ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020ee:	e7fe      	b.n	80020ee <HardFault_Handler+0x4>

080020f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020f4:	e7fe      	b.n	80020f4 <MemManage_Handler+0x4>

080020f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020f6:	b480      	push	{r7}
 80020f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020fa:	e7fe      	b.n	80020fa <BusFault_Handler+0x4>

080020fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002100:	e7fe      	b.n	8002100 <UsageFault_Handler+0x4>

08002102 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002102:	b480      	push	{r7}
 8002104:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002106:	bf00      	nop
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002114:	bf00      	nop
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr

0800211e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800211e:	b480      	push	{r7}
 8002120:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002122:	bf00      	nop
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002130:	f000 fd18 	bl	8002b64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002134:	bf00      	nop
 8002136:	bd80      	pop	{r7, pc}

08002138 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800213c:	4803      	ldr	r0, [pc, #12]	; (800214c <ADC_IRQHandler+0x14>)
 800213e:	f000 fd96 	bl	8002c6e <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8002142:	4803      	ldr	r0, [pc, #12]	; (8002150 <ADC_IRQHandler+0x18>)
 8002144:	f000 fd93 	bl	8002c6e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002148:	bf00      	nop
 800214a:	bd80      	pop	{r7, pc}
 800214c:	20000278 	.word	0x20000278
 8002150:	20000230 	.word	0x20000230

08002154 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002158:	4802      	ldr	r0, [pc, #8]	; (8002164 <USART1_IRQHandler+0x10>)
 800215a:	f004 f845 	bl	80061e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800215e:	bf00      	nop
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	20000a88 	.word	0x20000a88

08002168 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800216c:	4802      	ldr	r0, [pc, #8]	; (8002178 <TIM6_DAC_IRQHandler+0x10>)
 800216e:	f003 f88d 	bl	800528c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002172:	bf00      	nop
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	20000824 	.word	0x20000824

0800217c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002180:	4802      	ldr	r0, [pc, #8]	; (800218c <DMA2_Stream0_IRQHandler+0x10>)
 8002182:	f001 fcb3 	bl	8003aec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002186:	bf00      	nop
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	200002c0 	.word	0x200002c0

08002190 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002194:	4802      	ldr	r0, [pc, #8]	; (80021a0 <DMA2_Stream2_IRQHandler+0x10>)
 8002196:	f001 fca9 	bl	8003aec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800219a:	bf00      	nop
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	20000a28 	.word	0x20000a28

080021a4 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80021a8:	4802      	ldr	r0, [pc, #8]	; (80021b4 <DMA2_Stream7_IRQHandler+0x10>)
 80021aa:	f001 fc9f 	bl	8003aec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80021ae:	bf00      	nop
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	200009c8 	.word	0x200009c8

080021b8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021c4:	2300      	movs	r3, #0
 80021c6:	617b      	str	r3, [r7, #20]
 80021c8:	e00a      	b.n	80021e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80021ca:	f3af 8000 	nop.w
 80021ce:	4601      	mov	r1, r0
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	1c5a      	adds	r2, r3, #1
 80021d4:	60ba      	str	r2, [r7, #8]
 80021d6:	b2ca      	uxtb	r2, r1
 80021d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	3301      	adds	r3, #1
 80021de:	617b      	str	r3, [r7, #20]
 80021e0:	697a      	ldr	r2, [r7, #20]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	dbf0      	blt.n	80021ca <_read+0x12>
	}

return len;
 80021e8:	687b      	ldr	r3, [r7, #4]
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3718      	adds	r7, #24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b086      	sub	sp, #24
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	60f8      	str	r0, [r7, #12]
 80021fa:	60b9      	str	r1, [r7, #8]
 80021fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021fe:	2300      	movs	r3, #0
 8002200:	617b      	str	r3, [r7, #20]
 8002202:	e009      	b.n	8002218 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	1c5a      	adds	r2, r3, #1
 8002208:	60ba      	str	r2, [r7, #8]
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	4618      	mov	r0, r3
 800220e:	f7ff fd4f 	bl	8001cb0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	3301      	adds	r3, #1
 8002216:	617b      	str	r3, [r7, #20]
 8002218:	697a      	ldr	r2, [r7, #20]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	429a      	cmp	r2, r3
 800221e:	dbf1      	blt.n	8002204 <_write+0x12>
	}
	return len;
 8002220:	687b      	ldr	r3, [r7, #4]
}
 8002222:	4618      	mov	r0, r3
 8002224:	3718      	adds	r7, #24
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}

0800222a <_close>:

int _close(int file)
{
 800222a:	b480      	push	{r7}
 800222c:	b083      	sub	sp, #12
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
	return -1;
 8002232:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002236:	4618      	mov	r0, r3
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr

08002242 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002242:	b480      	push	{r7}
 8002244:	b083      	sub	sp, #12
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
 800224a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002252:	605a      	str	r2, [r3, #4]
	return 0;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr

08002262 <_isatty>:

int _isatty(int file)
{
 8002262:	b480      	push	{r7}
 8002264:	b083      	sub	sp, #12
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
	return 1;
 800226a:	2301      	movs	r3, #1
}
 800226c:	4618      	mov	r0, r3
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002278:	b480      	push	{r7}
 800227a:	b085      	sub	sp, #20
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]
	return 0;
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3714      	adds	r7, #20
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
	...

08002294 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800229c:	4b11      	ldr	r3, [pc, #68]	; (80022e4 <_sbrk+0x50>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d102      	bne.n	80022aa <_sbrk+0x16>
		heap_end = &end;
 80022a4:	4b0f      	ldr	r3, [pc, #60]	; (80022e4 <_sbrk+0x50>)
 80022a6:	4a10      	ldr	r2, [pc, #64]	; (80022e8 <_sbrk+0x54>)
 80022a8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80022aa:	4b0e      	ldr	r3, [pc, #56]	; (80022e4 <_sbrk+0x50>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80022b0:	4b0c      	ldr	r3, [pc, #48]	; (80022e4 <_sbrk+0x50>)
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	4413      	add	r3, r2
 80022b8:	466a      	mov	r2, sp
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d907      	bls.n	80022ce <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80022be:	f004 fddb 	bl	8006e78 <__errno>
 80022c2:	4602      	mov	r2, r0
 80022c4:	230c      	movs	r3, #12
 80022c6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80022c8:	f04f 33ff 	mov.w	r3, #4294967295
 80022cc:	e006      	b.n	80022dc <_sbrk+0x48>
	}

	heap_end += incr;
 80022ce:	4b05      	ldr	r3, [pc, #20]	; (80022e4 <_sbrk+0x50>)
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4413      	add	r3, r2
 80022d6:	4a03      	ldr	r2, [pc, #12]	; (80022e4 <_sbrk+0x50>)
 80022d8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80022da:	68fb      	ldr	r3, [r7, #12]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3710      	adds	r7, #16
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	2000021c 	.word	0x2000021c
 80022e8:	20000ad0 	.word	0x20000ad0

080022ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022f0:	4b08      	ldr	r3, [pc, #32]	; (8002314 <SystemInit+0x28>)
 80022f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022f6:	4a07      	ldr	r2, [pc, #28]	; (8002314 <SystemInit+0x28>)
 80022f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002300:	4b04      	ldr	r3, [pc, #16]	; (8002314 <SystemInit+0x28>)
 8002302:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002306:	609a      	str	r2, [r3, #8]
#endif
}
 8002308:	bf00      	nop
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	e000ed00 	.word	0xe000ed00

08002318 <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b08e      	sub	sp, #56	; 0x38
 800231c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800231e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002322:	2200      	movs	r2, #0
 8002324:	601a      	str	r2, [r3, #0]
 8002326:	605a      	str	r2, [r3, #4]
 8002328:	609a      	str	r2, [r3, #8]
 800232a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800232c:	f107 0320 	add.w	r3, r7, #32
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002336:	1d3b      	adds	r3, r7, #4
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]
 800233c:	605a      	str	r2, [r3, #4]
 800233e:	609a      	str	r2, [r3, #8]
 8002340:	60da      	str	r2, [r3, #12]
 8002342:	611a      	str	r2, [r3, #16]
 8002344:	615a      	str	r2, [r3, #20]
 8002346:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8002348:	4b34      	ldr	r3, [pc, #208]	; (800241c <MX_TIM2_Init+0x104>)
 800234a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800234e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 50000-1;
 8002350:	4b32      	ldr	r3, [pc, #200]	; (800241c <MX_TIM2_Init+0x104>)
 8002352:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8002356:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8002358:	4b30      	ldr	r3, [pc, #192]	; (800241c <MX_TIM2_Init+0x104>)
 800235a:	2220      	movs	r2, #32
 800235c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 500-1;
 800235e:	4b2f      	ldr	r3, [pc, #188]	; (800241c <MX_TIM2_Init+0x104>)
 8002360:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002364:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002366:	4b2d      	ldr	r3, [pc, #180]	; (800241c <MX_TIM2_Init+0x104>)
 8002368:	2200      	movs	r2, #0
 800236a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800236c:	4b2b      	ldr	r3, [pc, #172]	; (800241c <MX_TIM2_Init+0x104>)
 800236e:	2280      	movs	r2, #128	; 0x80
 8002370:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002372:	482a      	ldr	r0, [pc, #168]	; (800241c <MX_TIM2_Init+0x104>)
 8002374:	f002 fef6 	bl	8005164 <HAL_TIM_Base_Init>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800237e:	f7ff fd91 	bl	8001ea4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002382:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002386:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002388:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800238c:	4619      	mov	r1, r3
 800238e:	4823      	ldr	r0, [pc, #140]	; (800241c <MX_TIM2_Init+0x104>)
 8002390:	f003 f94a 	bl	8005628 <HAL_TIM_ConfigClockSource>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800239a:	f7ff fd83 	bl	8001ea4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800239e:	481f      	ldr	r0, [pc, #124]	; (800241c <MX_TIM2_Init+0x104>)
 80023a0:	f002 ff0b 	bl	80051ba <HAL_TIM_PWM_Init>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80023aa:	f7ff fd7b 	bl	8001ea4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 80023ae:	2350      	movs	r3, #80	; 0x50
 80023b0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023b2:	2300      	movs	r3, #0
 80023b4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80023b6:	f107 0320 	add.w	r3, r7, #32
 80023ba:	4619      	mov	r1, r3
 80023bc:	4817      	ldr	r0, [pc, #92]	; (800241c <MX_TIM2_Init+0x104>)
 80023be:	f003 fd23 	bl	8005e08 <HAL_TIMEx_MasterConfigSynchronization>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80023c8:	f7ff fd6c 	bl	8001ea4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023cc:	2360      	movs	r3, #96	; 0x60
 80023ce:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80023d0:	2300      	movs	r3, #0
 80023d2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023d4:	2300      	movs	r3, #0
 80023d6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023d8:	2300      	movs	r3, #0
 80023da:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023dc:	1d3b      	adds	r3, r7, #4
 80023de:	2200      	movs	r2, #0
 80023e0:	4619      	mov	r1, r3
 80023e2:	480e      	ldr	r0, [pc, #56]	; (800241c <MX_TIM2_Init+0x104>)
 80023e4:	f003 f85a 	bl	800549c <HAL_TIM_PWM_ConfigChannel>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80023ee:	f7ff fd59 	bl	8001ea4 <Error_Handler>
  }
  sConfigOC.Pulse = 498;
 80023f2:	f44f 73f9 	mov.w	r3, #498	; 0x1f2
 80023f6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80023f8:	1d3b      	adds	r3, r7, #4
 80023fa:	2204      	movs	r2, #4
 80023fc:	4619      	mov	r1, r3
 80023fe:	4807      	ldr	r0, [pc, #28]	; (800241c <MX_TIM2_Init+0x104>)
 8002400:	f003 f84c 	bl	800549c <HAL_TIM_PWM_ConfigChannel>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <MX_TIM2_Init+0xf6>
  {
    Error_Handler();
 800240a:	f7ff fd4b 	bl	8001ea4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 800240e:	4803      	ldr	r0, [pc, #12]	; (800241c <MX_TIM2_Init+0x104>)
 8002410:	f000 f936 	bl	8002680 <HAL_TIM_MspPostInit>

}
 8002414:	bf00      	nop
 8002416:	3738      	adds	r7, #56	; 0x38
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	20000864 	.word	0x20000864

08002420 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002426:	463b      	mov	r3, r7
 8002428:	2200      	movs	r2, #0
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	605a      	str	r2, [r3, #4]

  htim6.Instance = TIM6;
 800242e:	4b15      	ldr	r3, [pc, #84]	; (8002484 <MX_TIM6_Init+0x64>)
 8002430:	4a15      	ldr	r2, [pc, #84]	; (8002488 <MX_TIM6_Init+0x68>)
 8002432:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8002434:	4b13      	ldr	r3, [pc, #76]	; (8002484 <MX_TIM6_Init+0x64>)
 8002436:	2200      	movs	r2, #0
 8002438:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800243a:	4b12      	ldr	r3, [pc, #72]	; (8002484 <MX_TIM6_Init+0x64>)
 800243c:	2200      	movs	r2, #0
 800243e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 5000;
 8002440:	4b10      	ldr	r3, [pc, #64]	; (8002484 <MX_TIM6_Init+0x64>)
 8002442:	f241 3288 	movw	r2, #5000	; 0x1388
 8002446:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002448:	4b0e      	ldr	r3, [pc, #56]	; (8002484 <MX_TIM6_Init+0x64>)
 800244a:	2200      	movs	r2, #0
 800244c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800244e:	480d      	ldr	r0, [pc, #52]	; (8002484 <MX_TIM6_Init+0x64>)
 8002450:	f002 fe88 	bl	8005164 <HAL_TIM_Base_Init>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800245a:	f7ff fd23 	bl	8001ea4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800245e:	2300      	movs	r3, #0
 8002460:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002462:	2300      	movs	r3, #0
 8002464:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002466:	463b      	mov	r3, r7
 8002468:	4619      	mov	r1, r3
 800246a:	4806      	ldr	r0, [pc, #24]	; (8002484 <MX_TIM6_Init+0x64>)
 800246c:	f003 fccc 	bl	8005e08 <HAL_TIMEx_MasterConfigSynchronization>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002476:	f7ff fd15 	bl	8001ea4 <Error_Handler>
  }

}
 800247a:	bf00      	nop
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	20000824 	.word	0x20000824
 8002488:	40001000 	.word	0x40001000

0800248c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b092      	sub	sp, #72	; 0x48
 8002490:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002492:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002496:	2200      	movs	r2, #0
 8002498:	601a      	str	r2, [r3, #0]
 800249a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800249c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024a0:	2200      	movs	r2, #0
 80024a2:	601a      	str	r2, [r3, #0]
 80024a4:	605a      	str	r2, [r3, #4]
 80024a6:	609a      	str	r2, [r3, #8]
 80024a8:	60da      	str	r2, [r3, #12]
 80024aa:	611a      	str	r2, [r3, #16]
 80024ac:	615a      	str	r2, [r3, #20]
 80024ae:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80024b0:	1d3b      	adds	r3, r7, #4
 80024b2:	2220      	movs	r2, #32
 80024b4:	2100      	movs	r1, #0
 80024b6:	4618      	mov	r0, r3
 80024b8:	f004 fd08 	bl	8006ecc <memset>

  htim8.Instance = TIM8;
 80024bc:	4b3f      	ldr	r3, [pc, #252]	; (80025bc <MX_TIM8_Init+0x130>)
 80024be:	4a40      	ldr	r2, [pc, #256]	; (80025c0 <MX_TIM8_Init+0x134>)
 80024c0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80024c2:	4b3e      	ldr	r3, [pc, #248]	; (80025bc <MX_TIM8_Init+0x130>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024c8:	4b3c      	ldr	r3, [pc, #240]	; (80025bc <MX_TIM8_Init+0x130>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 2500-1;
 80024ce:	4b3b      	ldr	r3, [pc, #236]	; (80025bc <MX_TIM8_Init+0x130>)
 80024d0:	f640 12c3 	movw	r2, #2499	; 0x9c3
 80024d4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024d6:	4b39      	ldr	r3, [pc, #228]	; (80025bc <MX_TIM8_Init+0x130>)
 80024d8:	2200      	movs	r2, #0
 80024da:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80024dc:	4b37      	ldr	r3, [pc, #220]	; (80025bc <MX_TIM8_Init+0x130>)
 80024de:	2200      	movs	r2, #0
 80024e0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024e2:	4b36      	ldr	r3, [pc, #216]	; (80025bc <MX_TIM8_Init+0x130>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80024e8:	4834      	ldr	r0, [pc, #208]	; (80025bc <MX_TIM8_Init+0x130>)
 80024ea:	f002 fe66 	bl	80051ba <HAL_TIM_PWM_Init>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 80024f4:	f7ff fcd6 	bl	8001ea4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024f8:	2300      	movs	r3, #0
 80024fa:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024fc:	2300      	movs	r3, #0
 80024fe:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002500:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002504:	4619      	mov	r1, r3
 8002506:	482d      	ldr	r0, [pc, #180]	; (80025bc <MX_TIM8_Init+0x130>)
 8002508:	f003 fc7e 	bl	8005e08 <HAL_TIMEx_MasterConfigSynchronization>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8002512:	f7ff fcc7 	bl	8001ea4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002516:	2360      	movs	r3, #96	; 0x60
 8002518:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800251a:	2300      	movs	r3, #0
 800251c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800251e:	2300      	movs	r3, #0
 8002520:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002522:	2300      	movs	r3, #0
 8002524:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002526:	2300      	movs	r3, #0
 8002528:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800252a:	2300      	movs	r3, #0
 800252c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800252e:	2300      	movs	r3, #0
 8002530:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002532:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002536:	2200      	movs	r2, #0
 8002538:	4619      	mov	r1, r3
 800253a:	4820      	ldr	r0, [pc, #128]	; (80025bc <MX_TIM8_Init+0x130>)
 800253c:	f002 ffae 	bl	800549c <HAL_TIM_PWM_ConfigChannel>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8002546:	f7ff fcad 	bl	8001ea4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800254a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800254e:	2204      	movs	r2, #4
 8002550:	4619      	mov	r1, r3
 8002552:	481a      	ldr	r0, [pc, #104]	; (80025bc <MX_TIM8_Init+0x130>)
 8002554:	f002 ffa2 	bl	800549c <HAL_TIM_PWM_ConfigChannel>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 800255e:	f7ff fca1 	bl	8001ea4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002562:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002566:	2208      	movs	r2, #8
 8002568:	4619      	mov	r1, r3
 800256a:	4814      	ldr	r0, [pc, #80]	; (80025bc <MX_TIM8_Init+0x130>)
 800256c:	f002 ff96 	bl	800549c <HAL_TIM_PWM_ConfigChannel>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <MX_TIM8_Init+0xee>
  {
    Error_Handler();
 8002576:	f7ff fc95 	bl	8001ea4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800257a:	2300      	movs	r3, #0
 800257c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800257e:	2300      	movs	r3, #0
 8002580:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002582:	2300      	movs	r3, #0
 8002584:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002586:	2300      	movs	r3, #0
 8002588:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800258a:	2300      	movs	r3, #0
 800258c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800258e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002592:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002594:	2300      	movs	r3, #0
 8002596:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002598:	1d3b      	adds	r3, r7, #4
 800259a:	4619      	mov	r1, r3
 800259c:	4807      	ldr	r0, [pc, #28]	; (80025bc <MX_TIM8_Init+0x130>)
 800259e:	f003 fcaf 	bl	8005f00 <HAL_TIMEx_ConfigBreakDeadTime>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <MX_TIM8_Init+0x120>
  {
    Error_Handler();
 80025a8:	f7ff fc7c 	bl	8001ea4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 80025ac:	4803      	ldr	r0, [pc, #12]	; (80025bc <MX_TIM8_Init+0x130>)
 80025ae:	f000 f867 	bl	8002680 <HAL_TIM_MspPostInit>

}
 80025b2:	bf00      	nop
 80025b4:	3748      	adds	r7, #72	; 0x48
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	200007e4 	.word	0x200007e4
 80025c0:	40010400 	.word	0x40010400

080025c4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025d4:	d10e      	bne.n	80025f4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025d6:	2300      	movs	r3, #0
 80025d8:	60fb      	str	r3, [r7, #12]
 80025da:	4b16      	ldr	r3, [pc, #88]	; (8002634 <HAL_TIM_Base_MspInit+0x70>)
 80025dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025de:	4a15      	ldr	r2, [pc, #84]	; (8002634 <HAL_TIM_Base_MspInit+0x70>)
 80025e0:	f043 0301 	orr.w	r3, r3, #1
 80025e4:	6413      	str	r3, [r2, #64]	; 0x40
 80025e6:	4b13      	ldr	r3, [pc, #76]	; (8002634 <HAL_TIM_Base_MspInit+0x70>)
 80025e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	60fb      	str	r3, [r7, #12]
 80025f0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80025f2:	e01a      	b.n	800262a <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM6)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a0f      	ldr	r2, [pc, #60]	; (8002638 <HAL_TIM_Base_MspInit+0x74>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d115      	bne.n	800262a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80025fe:	2300      	movs	r3, #0
 8002600:	60bb      	str	r3, [r7, #8]
 8002602:	4b0c      	ldr	r3, [pc, #48]	; (8002634 <HAL_TIM_Base_MspInit+0x70>)
 8002604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002606:	4a0b      	ldr	r2, [pc, #44]	; (8002634 <HAL_TIM_Base_MspInit+0x70>)
 8002608:	f043 0310 	orr.w	r3, r3, #16
 800260c:	6413      	str	r3, [r2, #64]	; 0x40
 800260e:	4b09      	ldr	r3, [pc, #36]	; (8002634 <HAL_TIM_Base_MspInit+0x70>)
 8002610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002612:	f003 0310 	and.w	r3, r3, #16
 8002616:	60bb      	str	r3, [r7, #8]
 8002618:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800261a:	2200      	movs	r2, #0
 800261c:	2100      	movs	r1, #0
 800261e:	2036      	movs	r0, #54	; 0x36
 8002620:	f001 f905 	bl	800382e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002624:	2036      	movs	r0, #54	; 0x36
 8002626:	f001 f91e 	bl	8003866 <HAL_NVIC_EnableIRQ>
}
 800262a:	bf00      	nop
 800262c:	3710      	adds	r7, #16
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	40023800 	.word	0x40023800
 8002638:	40001000 	.word	0x40001000

0800263c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800263c:	b480      	push	{r7}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM8)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a0b      	ldr	r2, [pc, #44]	; (8002678 <HAL_TIM_PWM_MspInit+0x3c>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d10d      	bne.n	800266a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800264e:	2300      	movs	r3, #0
 8002650:	60fb      	str	r3, [r7, #12]
 8002652:	4b0a      	ldr	r3, [pc, #40]	; (800267c <HAL_TIM_PWM_MspInit+0x40>)
 8002654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002656:	4a09      	ldr	r2, [pc, #36]	; (800267c <HAL_TIM_PWM_MspInit+0x40>)
 8002658:	f043 0302 	orr.w	r3, r3, #2
 800265c:	6453      	str	r3, [r2, #68]	; 0x44
 800265e:	4b07      	ldr	r3, [pc, #28]	; (800267c <HAL_TIM_PWM_MspInit+0x40>)
 8002660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	60fb      	str	r3, [r7, #12]
 8002668:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800266a:	bf00      	nop
 800266c:	3714      	adds	r7, #20
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	40010400 	.word	0x40010400
 800267c:	40023800 	.word	0x40023800

08002680 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b08a      	sub	sp, #40	; 0x28
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002688:	f107 0314 	add.w	r3, r7, #20
 800268c:	2200      	movs	r2, #0
 800268e:	601a      	str	r2, [r3, #0]
 8002690:	605a      	str	r2, [r3, #4]
 8002692:	609a      	str	r2, [r3, #8]
 8002694:	60da      	str	r2, [r3, #12]
 8002696:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026a0:	d11e      	bne.n	80026e0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026a2:	2300      	movs	r3, #0
 80026a4:	613b      	str	r3, [r7, #16]
 80026a6:	4b22      	ldr	r3, [pc, #136]	; (8002730 <HAL_TIM_MspPostInit+0xb0>)
 80026a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026aa:	4a21      	ldr	r2, [pc, #132]	; (8002730 <HAL_TIM_MspPostInit+0xb0>)
 80026ac:	f043 0301 	orr.w	r3, r3, #1
 80026b0:	6313      	str	r3, [r2, #48]	; 0x30
 80026b2:	4b1f      	ldr	r3, [pc, #124]	; (8002730 <HAL_TIM_MspPostInit+0xb0>)
 80026b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	613b      	str	r3, [r7, #16]
 80026bc:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA5     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80026be:	2320      	movs	r3, #32
 80026c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c2:	2302      	movs	r3, #2
 80026c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c6:	2300      	movs	r3, #0
 80026c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ca:	2300      	movs	r3, #0
 80026cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80026ce:	2301      	movs	r3, #1
 80026d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026d2:	f107 0314 	add.w	r3, r7, #20
 80026d6:	4619      	mov	r1, r3
 80026d8:	4816      	ldr	r0, [pc, #88]	; (8002734 <HAL_TIM_MspPostInit+0xb4>)
 80026da:	f001 fc6f 	bl	8003fbc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80026de:	e023      	b.n	8002728 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM8)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a14      	ldr	r2, [pc, #80]	; (8002738 <HAL_TIM_MspPostInit+0xb8>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d11e      	bne.n	8002728 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026ea:	2300      	movs	r3, #0
 80026ec:	60fb      	str	r3, [r7, #12]
 80026ee:	4b10      	ldr	r3, [pc, #64]	; (8002730 <HAL_TIM_MspPostInit+0xb0>)
 80026f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f2:	4a0f      	ldr	r2, [pc, #60]	; (8002730 <HAL_TIM_MspPostInit+0xb0>)
 80026f4:	f043 0304 	orr.w	r3, r3, #4
 80026f8:	6313      	str	r3, [r2, #48]	; 0x30
 80026fa:	4b0d      	ldr	r3, [pc, #52]	; (8002730 <HAL_TIM_MspPostInit+0xb0>)
 80026fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fe:	f003 0304 	and.w	r3, r3, #4
 8002702:	60fb      	str	r3, [r7, #12]
 8002704:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8002706:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800270a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800270c:	2302      	movs	r3, #2
 800270e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002710:	2300      	movs	r3, #0
 8002712:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002714:	2303      	movs	r3, #3
 8002716:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002718:	2303      	movs	r3, #3
 800271a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800271c:	f107 0314 	add.w	r3, r7, #20
 8002720:	4619      	mov	r1, r3
 8002722:	4806      	ldr	r0, [pc, #24]	; (800273c <HAL_TIM_MspPostInit+0xbc>)
 8002724:	f001 fc4a 	bl	8003fbc <HAL_GPIO_Init>
}
 8002728:	bf00      	nop
 800272a:	3728      	adds	r7, #40	; 0x28
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	40023800 	.word	0x40023800
 8002734:	40020000 	.word	0x40020000
 8002738:	40010400 	.word	0x40010400
 800273c:	40020800 	.word	0x40020800

08002740 <uart_com_send_it>:
    uart_com_putc(value.u32_val&0xFF);
    uart_com_putc(UART_COM_END_0);
    uart_com_putc(UART_COM_END_1);
}

void uart_com_send_it(UART_HandleTypeDef *huart) {
 8002740:	b590      	push	{r4, r7, lr}
 8002742:	b085      	sub	sp, #20
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
    if(uart_com_ring_tx.huart != huart) return;
 8002748:	4b18      	ldr	r3, [pc, #96]	; (80027ac <uart_com_send_it+0x6c>)
 800274a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	429a      	cmp	r2, r3
 8002752:	d127      	bne.n	80027a4 <uart_com_send_it+0x64>

    uart_com_ring_forward_r_ptr(&uart_com_ring_tx, previous_send_len);
 8002754:	4b16      	ldr	r3, [pc, #88]	; (80027b0 <uart_com_send_it+0x70>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4619      	mov	r1, r3
 800275a:	4814      	ldr	r0, [pc, #80]	; (80027ac <uart_com_send_it+0x6c>)
 800275c:	f000 f87c 	bl	8002858 <uart_com_ring_forward_r_ptr>
    uint16_t len = (uint16_t)uart_com_ring_available_linear(&uart_com_ring_tx);
 8002760:	4812      	ldr	r0, [pc, #72]	; (80027ac <uart_com_send_it+0x6c>)
 8002762:	f000 f847 	bl	80027f4 <uart_com_ring_available_linear>
 8002766:	4603      	mov	r3, r0
 8002768:	81fb      	strh	r3, [r7, #14]
    if (len > 0 ) {
 800276a:	89fb      	ldrh	r3, [r7, #14]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d015      	beq.n	800279c <uart_com_send_it+0x5c>
        previous_send_len = len;
 8002770:	89fb      	ldrh	r3, [r7, #14]
 8002772:	4a0f      	ldr	r2, [pc, #60]	; (80027b0 <uart_com_send_it+0x70>)
 8002774:	6013      	str	r3, [r2, #0]
        send_lock = 1;
 8002776:	4b0f      	ldr	r3, [pc, #60]	; (80027b4 <uart_com_send_it+0x74>)
 8002778:	2201      	movs	r2, #1
 800277a:	601a      	str	r2, [r3, #0]
        HAL_UART_Transmit_DMA(uart_com_ring_tx.huart, uart_com_ring_tx.buf+uart_com_ring_get_r_ptr(&uart_com_ring_tx), len);
 800277c:	4b0b      	ldr	r3, [pc, #44]	; (80027ac <uart_com_send_it+0x6c>)
 800277e:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 8002782:	480a      	ldr	r0, [pc, #40]	; (80027ac <uart_com_send_it+0x6c>)
 8002784:	f000 f85a 	bl	800283c <uart_com_ring_get_r_ptr>
 8002788:	4603      	mov	r3, r0
 800278a:	461a      	mov	r2, r3
 800278c:	4b07      	ldr	r3, [pc, #28]	; (80027ac <uart_com_send_it+0x6c>)
 800278e:	4413      	add	r3, r2
 8002790:	89fa      	ldrh	r2, [r7, #14]
 8002792:	4619      	mov	r1, r3
 8002794:	4620      	mov	r0, r4
 8002796:	f003 fcbb 	bl	8006110 <HAL_UART_Transmit_DMA>
 800279a:	e004      	b.n	80027a6 <uart_com_send_it+0x66>
    }else{
        send_lock = 0;
 800279c:	4b05      	ldr	r3, [pc, #20]	; (80027b4 <uart_com_send_it+0x74>)
 800279e:	2200      	movs	r2, #0
 80027a0:	601a      	str	r2, [r3, #0]
 80027a2:	e000      	b.n	80027a6 <uart_com_send_it+0x66>
    if(uart_com_ring_tx.huart != huart) return;
 80027a4:	bf00      	nop
    }
}
 80027a6:	3714      	adds	r7, #20
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd90      	pop	{r4, r7, pc}
 80027ac:	200008a8 	.word	0x200008a8
 80027b0:	20000224 	.word	0x20000224
 80027b4:	20000220 	.word	0x20000220

080027b8 <update_w_ptr>:
#include "main.h"
#include <stdio.h>

static void update_w_ptr(struct ring_buf *ring){
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
    if(ring->type == RING_TYPE_RX_CIRCULAR){
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d10e      	bne.n	80027e8 <update_w_ptr+0x30>
        ring->w_ptr = (uint16_t) ((ring->buf_size - ring->huart->hdmarx->Instance->W_PTR) & 0xFFFF);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f8b3 2080 	ldrh.w	r2, [r3, #128]	; 0x80
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	b29b      	uxth	r3, r3
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	b29a      	uxth	r2, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
    }
}
 80027e8:	bf00      	nop
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <uart_com_ring_available_linear>:
    }else{
        return ring->buf_size + ring->w_ptr - ring->r_ptr;
    }
}

int uart_com_ring_available_linear(struct ring_buf *ring){
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
    update_w_ptr(ring);
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f7ff ffdb 	bl	80027b8 <update_w_ptr>

    if(ring->w_ptr >= ring->r_ptr){
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800280e:	429a      	cmp	r2, r3
 8002810:	d308      	bcc.n	8002824 <uart_com_ring_available_linear+0x30>
        return ring->w_ptr - ring->r_ptr;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8002818:	461a      	mov	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	e007      	b.n	8002834 <uart_com_ring_available_linear+0x40>
    }else{
        return ring->buf_size - ring->r_ptr;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 800282a:	461a      	mov	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8002832:	1ad3      	subs	r3, r2, r3
    }
}
 8002834:	4618      	mov	r0, r3
 8002836:	3708      	adds	r7, #8
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <uart_com_ring_get_r_ptr>:
    update_w_ptr(ring);

    return ring->w_ptr;
}

uint16_t uart_com_ring_get_r_ptr(struct ring_buf *ring){
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
    update_w_ptr(ring);
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f7ff ffb7 	bl	80027b8 <update_w_ptr>

    return ring->r_ptr;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
 8002850:	4618      	mov	r0, r3
 8002852:	3708      	adds	r7, #8
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <uart_com_ring_forward_r_ptr>:

void uart_com_ring_forward_r_ptr(struct ring_buf *ring, int len){
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
    update_w_ptr(ring);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f7ff ffa8 	bl	80027b8 <update_w_ptr>

    while(len > 0){
 8002868:	e018      	b.n	800289c <uart_com_ring_forward_r_ptr+0x44>
        if(ring->r_ptr+1 >= ring->buf_size){
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8002870:	3301      	adds	r3, #1
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	f8b2 2080 	ldrh.w	r2, [r2, #128]	; 0x80
 8002878:	4293      	cmp	r3, r2
 800287a:	db04      	blt.n	8002886 <uart_com_ring_forward_r_ptr+0x2e>
            ring->r_ptr = 0;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 8002884:	e007      	b.n	8002896 <uart_com_ring_forward_r_ptr+0x3e>
        }else{
            ring->r_ptr += 1;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800288c:	3301      	adds	r3, #1
 800288e:	b29a      	uxth	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
        }
        len--;
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	3b01      	subs	r3, #1
 800289a:	603b      	str	r3, [r7, #0]
    while(len > 0){
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	dce3      	bgt.n	800286a <uart_com_ring_forward_r_ptr+0x12>
    }
}
 80028a2:	bf00      	nop
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
	...

080028ac <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80028b0:	4b11      	ldr	r3, [pc, #68]	; (80028f8 <MX_USART1_UART_Init+0x4c>)
 80028b2:	4a12      	ldr	r2, [pc, #72]	; (80028fc <MX_USART1_UART_Init+0x50>)
 80028b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80028b6:	4b10      	ldr	r3, [pc, #64]	; (80028f8 <MX_USART1_UART_Init+0x4c>)
 80028b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80028bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80028be:	4b0e      	ldr	r3, [pc, #56]	; (80028f8 <MX_USART1_UART_Init+0x4c>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80028c4:	4b0c      	ldr	r3, [pc, #48]	; (80028f8 <MX_USART1_UART_Init+0x4c>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80028ca:	4b0b      	ldr	r3, [pc, #44]	; (80028f8 <MX_USART1_UART_Init+0x4c>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80028d0:	4b09      	ldr	r3, [pc, #36]	; (80028f8 <MX_USART1_UART_Init+0x4c>)
 80028d2:	220c      	movs	r2, #12
 80028d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028d6:	4b08      	ldr	r3, [pc, #32]	; (80028f8 <MX_USART1_UART_Init+0x4c>)
 80028d8:	2200      	movs	r2, #0
 80028da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80028dc:	4b06      	ldr	r3, [pc, #24]	; (80028f8 <MX_USART1_UART_Init+0x4c>)
 80028de:	2200      	movs	r2, #0
 80028e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80028e2:	4805      	ldr	r0, [pc, #20]	; (80028f8 <MX_USART1_UART_Init+0x4c>)
 80028e4:	f003 fb72 	bl	8005fcc <HAL_UART_Init>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80028ee:	f7ff fad9 	bl	8001ea4 <Error_Handler>
  }

}
 80028f2:	bf00      	nop
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	20000a88 	.word	0x20000a88
 80028fc:	40011000 	.word	0x40011000

08002900 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b08a      	sub	sp, #40	; 0x28
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002908:	f107 0314 	add.w	r3, r7, #20
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]
 8002910:	605a      	str	r2, [r3, #4]
 8002912:	609a      	str	r2, [r3, #8]
 8002914:	60da      	str	r2, [r3, #12]
 8002916:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a4c      	ldr	r2, [pc, #304]	; (8002a50 <HAL_UART_MspInit+0x150>)
 800291e:	4293      	cmp	r3, r2
 8002920:	f040 8092 	bne.w	8002a48 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002924:	2300      	movs	r3, #0
 8002926:	613b      	str	r3, [r7, #16]
 8002928:	4b4a      	ldr	r3, [pc, #296]	; (8002a54 <HAL_UART_MspInit+0x154>)
 800292a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800292c:	4a49      	ldr	r2, [pc, #292]	; (8002a54 <HAL_UART_MspInit+0x154>)
 800292e:	f043 0310 	orr.w	r3, r3, #16
 8002932:	6453      	str	r3, [r2, #68]	; 0x44
 8002934:	4b47      	ldr	r3, [pc, #284]	; (8002a54 <HAL_UART_MspInit+0x154>)
 8002936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002938:	f003 0310 	and.w	r3, r3, #16
 800293c:	613b      	str	r3, [r7, #16]
 800293e:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002940:	2300      	movs	r3, #0
 8002942:	60fb      	str	r3, [r7, #12]
 8002944:	4b43      	ldr	r3, [pc, #268]	; (8002a54 <HAL_UART_MspInit+0x154>)
 8002946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002948:	4a42      	ldr	r2, [pc, #264]	; (8002a54 <HAL_UART_MspInit+0x154>)
 800294a:	f043 0301 	orr.w	r3, r3, #1
 800294e:	6313      	str	r3, [r2, #48]	; 0x30
 8002950:	4b40      	ldr	r3, [pc, #256]	; (8002a54 <HAL_UART_MspInit+0x154>)
 8002952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002954:	f003 0301 	and.w	r3, r3, #1
 8002958:	60fb      	str	r3, [r7, #12]
 800295a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800295c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002960:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002962:	2302      	movs	r3, #2
 8002964:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002966:	2300      	movs	r3, #0
 8002968:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800296a:	2303      	movs	r3, #3
 800296c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800296e:	2307      	movs	r3, #7
 8002970:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002972:	f107 0314 	add.w	r3, r7, #20
 8002976:	4619      	mov	r1, r3
 8002978:	4837      	ldr	r0, [pc, #220]	; (8002a58 <HAL_UART_MspInit+0x158>)
 800297a:	f001 fb1f 	bl	8003fbc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800297e:	4b37      	ldr	r3, [pc, #220]	; (8002a5c <HAL_UART_MspInit+0x15c>)
 8002980:	4a37      	ldr	r2, [pc, #220]	; (8002a60 <HAL_UART_MspInit+0x160>)
 8002982:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002984:	4b35      	ldr	r3, [pc, #212]	; (8002a5c <HAL_UART_MspInit+0x15c>)
 8002986:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800298a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800298c:	4b33      	ldr	r3, [pc, #204]	; (8002a5c <HAL_UART_MspInit+0x15c>)
 800298e:	2200      	movs	r2, #0
 8002990:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002992:	4b32      	ldr	r3, [pc, #200]	; (8002a5c <HAL_UART_MspInit+0x15c>)
 8002994:	2200      	movs	r2, #0
 8002996:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002998:	4b30      	ldr	r3, [pc, #192]	; (8002a5c <HAL_UART_MspInit+0x15c>)
 800299a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800299e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029a0:	4b2e      	ldr	r3, [pc, #184]	; (8002a5c <HAL_UART_MspInit+0x15c>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029a6:	4b2d      	ldr	r3, [pc, #180]	; (8002a5c <HAL_UART_MspInit+0x15c>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80029ac:	4b2b      	ldr	r3, [pc, #172]	; (8002a5c <HAL_UART_MspInit+0x15c>)
 80029ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029b2:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80029b4:	4b29      	ldr	r3, [pc, #164]	; (8002a5c <HAL_UART_MspInit+0x15c>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029ba:	4b28      	ldr	r3, [pc, #160]	; (8002a5c <HAL_UART_MspInit+0x15c>)
 80029bc:	2200      	movs	r2, #0
 80029be:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80029c0:	4826      	ldr	r0, [pc, #152]	; (8002a5c <HAL_UART_MspInit+0x15c>)
 80029c2:	f000 ff6b 	bl	800389c <HAL_DMA_Init>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d001      	beq.n	80029d0 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 80029cc:	f7ff fa6a 	bl	8001ea4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4a22      	ldr	r2, [pc, #136]	; (8002a5c <HAL_UART_MspInit+0x15c>)
 80029d4:	635a      	str	r2, [r3, #52]	; 0x34
 80029d6:	4a21      	ldr	r2, [pc, #132]	; (8002a5c <HAL_UART_MspInit+0x15c>)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80029dc:	4b21      	ldr	r3, [pc, #132]	; (8002a64 <HAL_UART_MspInit+0x164>)
 80029de:	4a22      	ldr	r2, [pc, #136]	; (8002a68 <HAL_UART_MspInit+0x168>)
 80029e0:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80029e2:	4b20      	ldr	r3, [pc, #128]	; (8002a64 <HAL_UART_MspInit+0x164>)
 80029e4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80029e8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80029ea:	4b1e      	ldr	r3, [pc, #120]	; (8002a64 <HAL_UART_MspInit+0x164>)
 80029ec:	2240      	movs	r2, #64	; 0x40
 80029ee:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029f0:	4b1c      	ldr	r3, [pc, #112]	; (8002a64 <HAL_UART_MspInit+0x164>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80029f6:	4b1b      	ldr	r3, [pc, #108]	; (8002a64 <HAL_UART_MspInit+0x164>)
 80029f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029fc:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029fe:	4b19      	ldr	r3, [pc, #100]	; (8002a64 <HAL_UART_MspInit+0x164>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a04:	4b17      	ldr	r3, [pc, #92]	; (8002a64 <HAL_UART_MspInit+0x164>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002a0a:	4b16      	ldr	r3, [pc, #88]	; (8002a64 <HAL_UART_MspInit+0x164>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002a10:	4b14      	ldr	r3, [pc, #80]	; (8002a64 <HAL_UART_MspInit+0x164>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a16:	4b13      	ldr	r3, [pc, #76]	; (8002a64 <HAL_UART_MspInit+0x164>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002a1c:	4811      	ldr	r0, [pc, #68]	; (8002a64 <HAL_UART_MspInit+0x164>)
 8002a1e:	f000 ff3d 	bl	800389c <HAL_DMA_Init>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d001      	beq.n	8002a2c <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 8002a28:	f7ff fa3c 	bl	8001ea4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4a0d      	ldr	r2, [pc, #52]	; (8002a64 <HAL_UART_MspInit+0x164>)
 8002a30:	631a      	str	r2, [r3, #48]	; 0x30
 8002a32:	4a0c      	ldr	r2, [pc, #48]	; (8002a64 <HAL_UART_MspInit+0x164>)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002a38:	2200      	movs	r2, #0
 8002a3a:	2100      	movs	r1, #0
 8002a3c:	2025      	movs	r0, #37	; 0x25
 8002a3e:	f000 fef6 	bl	800382e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002a42:	2025      	movs	r0, #37	; 0x25
 8002a44:	f000 ff0f 	bl	8003866 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002a48:	bf00      	nop
 8002a4a:	3728      	adds	r7, #40	; 0x28
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	40011000 	.word	0x40011000
 8002a54:	40023800 	.word	0x40023800
 8002a58:	40020000 	.word	0x40020000
 8002a5c:	20000a28 	.word	0x20000a28
 8002a60:	40026440 	.word	0x40026440
 8002a64:	200009c8 	.word	0x200009c8
 8002a68:	400264b8 	.word	0x400264b8

08002a6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002a6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002aa4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002a70:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002a72:	e003      	b.n	8002a7c <LoopCopyDataInit>

08002a74 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002a74:	4b0c      	ldr	r3, [pc, #48]	; (8002aa8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002a76:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002a78:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002a7a:	3104      	adds	r1, #4

08002a7c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002a7c:	480b      	ldr	r0, [pc, #44]	; (8002aac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002a7e:	4b0c      	ldr	r3, [pc, #48]	; (8002ab0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002a80:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002a82:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002a84:	d3f6      	bcc.n	8002a74 <CopyDataInit>
  ldr  r2, =_sbss
 8002a86:	4a0b      	ldr	r2, [pc, #44]	; (8002ab4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002a88:	e002      	b.n	8002a90 <LoopFillZerobss>

08002a8a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002a8a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002a8c:	f842 3b04 	str.w	r3, [r2], #4

08002a90 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002a90:	4b09      	ldr	r3, [pc, #36]	; (8002ab8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002a92:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002a94:	d3f9      	bcc.n	8002a8a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002a96:	f7ff fc29 	bl	80022ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a9a:	f004 f9f3 	bl	8006e84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a9e:	f7ff f915 	bl	8001ccc <main>
  bx  lr    
 8002aa2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002aa4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002aa8:	08009758 	.word	0x08009758
  ldr  r0, =_sdata
 8002aac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002ab0:	200001ec 	.word	0x200001ec
  ldr  r2, =_sbss
 8002ab4:	200001ec 	.word	0x200001ec
  ldr  r3, = _ebss
 8002ab8:	20000ad0 	.word	0x20000ad0

08002abc <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002abc:	e7fe      	b.n	8002abc <CAN1_RX0_IRQHandler>
	...

08002ac0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ac4:	4b0e      	ldr	r3, [pc, #56]	; (8002b00 <HAL_Init+0x40>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a0d      	ldr	r2, [pc, #52]	; (8002b00 <HAL_Init+0x40>)
 8002aca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ace:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ad0:	4b0b      	ldr	r3, [pc, #44]	; (8002b00 <HAL_Init+0x40>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a0a      	ldr	r2, [pc, #40]	; (8002b00 <HAL_Init+0x40>)
 8002ad6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ada:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002adc:	4b08      	ldr	r3, [pc, #32]	; (8002b00 <HAL_Init+0x40>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a07      	ldr	r2, [pc, #28]	; (8002b00 <HAL_Init+0x40>)
 8002ae2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ae6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ae8:	2003      	movs	r0, #3
 8002aea:	f000 fe95 	bl	8003818 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002aee:	2000      	movs	r0, #0
 8002af0:	f000 f808 	bl	8002b04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002af4:	f7ff faca 	bl	800208c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	40023c00 	.word	0x40023c00

08002b04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b0c:	4b12      	ldr	r3, [pc, #72]	; (8002b58 <HAL_InitTick+0x54>)
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	4b12      	ldr	r3, [pc, #72]	; (8002b5c <HAL_InitTick+0x58>)
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	4619      	mov	r1, r3
 8002b16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b22:	4618      	mov	r0, r3
 8002b24:	f000 fead 	bl	8003882 <HAL_SYSTICK_Config>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e00e      	b.n	8002b50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2b0f      	cmp	r3, #15
 8002b36:	d80a      	bhi.n	8002b4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b38:	2200      	movs	r2, #0
 8002b3a:	6879      	ldr	r1, [r7, #4]
 8002b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b40:	f000 fe75 	bl	800382e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b44:	4a06      	ldr	r2, [pc, #24]	; (8002b60 <HAL_InitTick+0x5c>)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	e000      	b.n	8002b50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3708      	adds	r7, #8
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	2000000c 	.word	0x2000000c
 8002b5c:	20000014 	.word	0x20000014
 8002b60:	20000010 	.word	0x20000010

08002b64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b68:	4b06      	ldr	r3, [pc, #24]	; (8002b84 <HAL_IncTick+0x20>)
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	4b06      	ldr	r3, [pc, #24]	; (8002b88 <HAL_IncTick+0x24>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4413      	add	r3, r2
 8002b74:	4a04      	ldr	r2, [pc, #16]	; (8002b88 <HAL_IncTick+0x24>)
 8002b76:	6013      	str	r3, [r2, #0]
}
 8002b78:	bf00      	nop
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	20000014 	.word	0x20000014
 8002b88:	20000ac8 	.word	0x20000ac8

08002b8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
  return uwTick;
 8002b90:	4b03      	ldr	r3, [pc, #12]	; (8002ba0 <HAL_GetTick+0x14>)
 8002b92:	681b      	ldr	r3, [r3, #0]
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	20000ac8 	.word	0x20000ac8

08002ba4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bac:	f7ff ffee 	bl	8002b8c <HAL_GetTick>
 8002bb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bbc:	d005      	beq.n	8002bca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bbe:	4b09      	ldr	r3, [pc, #36]	; (8002be4 <HAL_Delay+0x40>)
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002bca:	bf00      	nop
 8002bcc:	f7ff ffde 	bl	8002b8c <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	68fa      	ldr	r2, [r7, #12]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d8f7      	bhi.n	8002bcc <HAL_Delay+0x28>
  {
  }
}
 8002bdc:	bf00      	nop
 8002bde:	3710      	adds	r7, #16
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	20000014 	.word	0x20000014

08002be8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d101      	bne.n	8002bfe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e033      	b.n	8002c66 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d109      	bne.n	8002c1a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f7fe fa0a 	bl	8001020 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1e:	f003 0310 	and.w	r3, r3, #16
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d118      	bne.n	8002c58 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002c2e:	f023 0302 	bic.w	r3, r3, #2
 8002c32:	f043 0202 	orr.w	r2, r3, #2
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 fb94 	bl	8003368 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4a:	f023 0303 	bic.w	r3, r3, #3
 8002c4e:	f043 0201 	orr.w	r2, r3, #1
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	641a      	str	r2, [r3, #64]	; 0x40
 8002c56:	e001      	b.n	8002c5c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3710      	adds	r7, #16
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b084      	sub	sp, #16
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002c76:	2300      	movs	r3, #0
 8002c78:	60fb      	str	r3, [r7, #12]
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0302 	and.w	r3, r3, #2
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	bf0c      	ite	eq
 8002c8c:	2301      	moveq	r3, #1
 8002c8e:	2300      	movne	r3, #0
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f003 0320 	and.w	r3, r3, #32
 8002c9e:	2b20      	cmp	r3, #32
 8002ca0:	bf0c      	ite	eq
 8002ca2:	2301      	moveq	r3, #1
 8002ca4:	2300      	movne	r3, #0
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d049      	beq.n	8002d44 <HAL_ADC_IRQHandler+0xd6>
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d046      	beq.n	8002d44 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cba:	f003 0310 	and.w	r3, r3, #16
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d105      	bne.n	8002cce <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d12b      	bne.n	8002d34 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d127      	bne.n	8002d34 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cea:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d006      	beq.n	8002d00 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d119      	bne.n	8002d34 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	685a      	ldr	r2, [r3, #4]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f022 0220 	bic.w	r2, r2, #32
 8002d0e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d14:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d105      	bne.n	8002d34 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2c:	f043 0201 	orr.w	r2, r3, #1
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f000 f9cd 	bl	80030d4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f06f 0212 	mvn.w	r2, #18
 8002d42:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0304 	and.w	r3, r3, #4
 8002d4e:	2b04      	cmp	r3, #4
 8002d50:	bf0c      	ite	eq
 8002d52:	2301      	moveq	r3, #1
 8002d54:	2300      	movne	r3, #0
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d64:	2b80      	cmp	r3, #128	; 0x80
 8002d66:	bf0c      	ite	eq
 8002d68:	2301      	moveq	r3, #1
 8002d6a:	2300      	movne	r3, #0
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d057      	beq.n	8002e26 <HAL_ADC_IRQHandler+0x1b8>
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d054      	beq.n	8002e26 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d80:	f003 0310 	and.w	r3, r3, #16
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d105      	bne.n	8002d94 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d139      	bne.n	8002e16 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d006      	beq.n	8002dbe <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d12b      	bne.n	8002e16 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d124      	bne.n	8002e16 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d11d      	bne.n	8002e16 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d119      	bne.n	8002e16 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	685a      	ldr	r2, [r3, #4]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002df0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d105      	bne.n	8002e16 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0e:	f043 0201 	orr.w	r2, r3, #1
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 fc24 	bl	8003664 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f06f 020c 	mvn.w	r2, #12
 8002e24:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0301 	and.w	r3, r3, #1
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	bf0c      	ite	eq
 8002e34:	2301      	moveq	r3, #1
 8002e36:	2300      	movne	r3, #0
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e46:	2b40      	cmp	r3, #64	; 0x40
 8002e48:	bf0c      	ite	eq
 8002e4a:	2301      	moveq	r3, #1
 8002e4c:	2300      	movne	r3, #0
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d017      	beq.n	8002e88 <HAL_ADC_IRQHandler+0x21a>
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d014      	beq.n	8002e88 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0301 	and.w	r3, r3, #1
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d10d      	bne.n	8002e88 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e70:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f000 f93f 	bl	80030fc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f06f 0201 	mvn.w	r2, #1
 8002e86:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0320 	and.w	r3, r3, #32
 8002e92:	2b20      	cmp	r3, #32
 8002e94:	bf0c      	ite	eq
 8002e96:	2301      	moveq	r3, #1
 8002e98:	2300      	movne	r3, #0
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ea8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002eac:	bf0c      	ite	eq
 8002eae:	2301      	moveq	r3, #1
 8002eb0:	2300      	movne	r3, #0
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d015      	beq.n	8002ee8 <HAL_ADC_IRQHandler+0x27a>
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d012      	beq.n	8002ee8 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec6:	f043 0202 	orr.w	r2, r3, #2
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f06f 0220 	mvn.w	r2, #32
 8002ed6:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f000 f919 	bl	8003110 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f06f 0220 	mvn.w	r2, #32
 8002ee6:	601a      	str	r2, [r3, #0]
  }
}
 8002ee8:	bf00      	nop
 8002eea:	3710      	adds	r7, #16
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b086      	sub	sp, #24
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002efc:	2300      	movs	r3, #0
 8002efe:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d101      	bne.n	8002f0e <HAL_ADC_Start_DMA+0x1e>
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	e0cc      	b.n	80030a8 <HAL_ADC_Start_DMA+0x1b8>
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2201      	movs	r2, #1
 8002f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	f003 0301 	and.w	r3, r3, #1
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d018      	beq.n	8002f56 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	689a      	ldr	r2, [r3, #8]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f042 0201 	orr.w	r2, r2, #1
 8002f32:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002f34:	4b5e      	ldr	r3, [pc, #376]	; (80030b0 <HAL_ADC_Start_DMA+0x1c0>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a5e      	ldr	r2, [pc, #376]	; (80030b4 <HAL_ADC_Start_DMA+0x1c4>)
 8002f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f3e:	0c9a      	lsrs	r2, r3, #18
 8002f40:	4613      	mov	r3, r2
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	4413      	add	r3, r2
 8002f46:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002f48:	e002      	b.n	8002f50 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1f9      	bne.n	8002f4a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f003 0301 	and.w	r3, r3, #1
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	f040 80a0 	bne.w	80030a6 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002f6e:	f023 0301 	bic.w	r3, r3, #1
 8002f72:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d007      	beq.n	8002f98 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002f90:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fa4:	d106      	bne.n	8002fb4 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002faa:	f023 0206 	bic.w	r2, r3, #6
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	645a      	str	r2, [r3, #68]	; 0x44
 8002fb2:	e002      	b.n	8002fba <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002fc2:	4b3d      	ldr	r3, [pc, #244]	; (80030b8 <HAL_ADC_Start_DMA+0x1c8>)
 8002fc4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fca:	4a3c      	ldr	r2, [pc, #240]	; (80030bc <HAL_ADC_Start_DMA+0x1cc>)
 8002fcc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd2:	4a3b      	ldr	r2, [pc, #236]	; (80030c0 <HAL_ADC_Start_DMA+0x1d0>)
 8002fd4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fda:	4a3a      	ldr	r2, [pc, #232]	; (80030c4 <HAL_ADC_Start_DMA+0x1d4>)
 8002fdc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002fe6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	685a      	ldr	r2, [r3, #4]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002ff6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	689a      	ldr	r2, [r3, #8]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003006:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	334c      	adds	r3, #76	; 0x4c
 8003012:	4619      	mov	r1, r3
 8003014:	68ba      	ldr	r2, [r7, #8]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f000 fcee 	bl	80039f8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f003 031f 	and.w	r3, r3, #31
 8003024:	2b00      	cmp	r3, #0
 8003026:	d12a      	bne.n	800307e <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a26      	ldr	r2, [pc, #152]	; (80030c8 <HAL_ADC_Start_DMA+0x1d8>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d015      	beq.n	800305e <HAL_ADC_Start_DMA+0x16e>
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a25      	ldr	r2, [pc, #148]	; (80030cc <HAL_ADC_Start_DMA+0x1dc>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d105      	bne.n	8003048 <HAL_ADC_Start_DMA+0x158>
 800303c:	4b1e      	ldr	r3, [pc, #120]	; (80030b8 <HAL_ADC_Start_DMA+0x1c8>)
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f003 031f 	and.w	r3, r3, #31
 8003044:	2b00      	cmp	r3, #0
 8003046:	d00a      	beq.n	800305e <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a20      	ldr	r2, [pc, #128]	; (80030d0 <HAL_ADC_Start_DMA+0x1e0>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d129      	bne.n	80030a6 <HAL_ADC_Start_DMA+0x1b6>
 8003052:	4b19      	ldr	r3, [pc, #100]	; (80030b8 <HAL_ADC_Start_DMA+0x1c8>)
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f003 031f 	and.w	r3, r3, #31
 800305a:	2b0f      	cmp	r3, #15
 800305c:	d823      	bhi.n	80030a6 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d11c      	bne.n	80030a6 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	689a      	ldr	r2, [r3, #8]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800307a:	609a      	str	r2, [r3, #8]
 800307c:	e013      	b.n	80030a6 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a11      	ldr	r2, [pc, #68]	; (80030c8 <HAL_ADC_Start_DMA+0x1d8>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d10e      	bne.n	80030a6 <HAL_ADC_Start_DMA+0x1b6>
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d107      	bne.n	80030a6 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	689a      	ldr	r2, [r3, #8]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80030a4:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80030a6:	2300      	movs	r3, #0
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3718      	adds	r7, #24
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	2000000c 	.word	0x2000000c
 80030b4:	431bde83 	.word	0x431bde83
 80030b8:	40012300 	.word	0x40012300
 80030bc:	08003561 	.word	0x08003561
 80030c0:	0800361b 	.word	0x0800361b
 80030c4:	08003637 	.word	0x08003637
 80030c8:	40012000 	.word	0x40012000
 80030cc:	40012100 	.word	0x40012100
 80030d0:	40012200 	.word	0x40012200

080030d4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80030f0:	bf00      	nop
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003104:	bf00      	nop
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003118:	bf00      	nop
 800311a:	370c      	adds	r7, #12
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003124:	b480      	push	{r7}
 8003126:	b085      	sub	sp, #20
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800312e:	2300      	movs	r3, #0
 8003130:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003138:	2b01      	cmp	r3, #1
 800313a:	d101      	bne.n	8003140 <HAL_ADC_ConfigChannel+0x1c>
 800313c:	2302      	movs	r3, #2
 800313e:	e105      	b.n	800334c <HAL_ADC_ConfigChannel+0x228>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2b09      	cmp	r3, #9
 800314e:	d925      	bls.n	800319c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	68d9      	ldr	r1, [r3, #12]
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	b29b      	uxth	r3, r3
 800315c:	461a      	mov	r2, r3
 800315e:	4613      	mov	r3, r2
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	4413      	add	r3, r2
 8003164:	3b1e      	subs	r3, #30
 8003166:	2207      	movs	r2, #7
 8003168:	fa02 f303 	lsl.w	r3, r2, r3
 800316c:	43da      	mvns	r2, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	400a      	ands	r2, r1
 8003174:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	68d9      	ldr	r1, [r3, #12]
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	689a      	ldr	r2, [r3, #8]
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	b29b      	uxth	r3, r3
 8003186:	4618      	mov	r0, r3
 8003188:	4603      	mov	r3, r0
 800318a:	005b      	lsls	r3, r3, #1
 800318c:	4403      	add	r3, r0
 800318e:	3b1e      	subs	r3, #30
 8003190:	409a      	lsls	r2, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	430a      	orrs	r2, r1
 8003198:	60da      	str	r2, [r3, #12]
 800319a:	e022      	b.n	80031e2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	6919      	ldr	r1, [r3, #16]
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	461a      	mov	r2, r3
 80031aa:	4613      	mov	r3, r2
 80031ac:	005b      	lsls	r3, r3, #1
 80031ae:	4413      	add	r3, r2
 80031b0:	2207      	movs	r2, #7
 80031b2:	fa02 f303 	lsl.w	r3, r2, r3
 80031b6:	43da      	mvns	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	400a      	ands	r2, r1
 80031be:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	6919      	ldr	r1, [r3, #16]
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	689a      	ldr	r2, [r3, #8]
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	4618      	mov	r0, r3
 80031d2:	4603      	mov	r3, r0
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	4403      	add	r3, r0
 80031d8:	409a      	lsls	r2, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	430a      	orrs	r2, r1
 80031e0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	2b06      	cmp	r3, #6
 80031e8:	d824      	bhi.n	8003234 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685a      	ldr	r2, [r3, #4]
 80031f4:	4613      	mov	r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	4413      	add	r3, r2
 80031fa:	3b05      	subs	r3, #5
 80031fc:	221f      	movs	r2, #31
 80031fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003202:	43da      	mvns	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	400a      	ands	r2, r1
 800320a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	b29b      	uxth	r3, r3
 8003218:	4618      	mov	r0, r3
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	685a      	ldr	r2, [r3, #4]
 800321e:	4613      	mov	r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	4413      	add	r3, r2
 8003224:	3b05      	subs	r3, #5
 8003226:	fa00 f203 	lsl.w	r2, r0, r3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	430a      	orrs	r2, r1
 8003230:	635a      	str	r2, [r3, #52]	; 0x34
 8003232:	e04c      	b.n	80032ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	2b0c      	cmp	r3, #12
 800323a:	d824      	bhi.n	8003286 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	685a      	ldr	r2, [r3, #4]
 8003246:	4613      	mov	r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	4413      	add	r3, r2
 800324c:	3b23      	subs	r3, #35	; 0x23
 800324e:	221f      	movs	r2, #31
 8003250:	fa02 f303 	lsl.w	r3, r2, r3
 8003254:	43da      	mvns	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	400a      	ands	r2, r1
 800325c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	b29b      	uxth	r3, r3
 800326a:	4618      	mov	r0, r3
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	685a      	ldr	r2, [r3, #4]
 8003270:	4613      	mov	r3, r2
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	4413      	add	r3, r2
 8003276:	3b23      	subs	r3, #35	; 0x23
 8003278:	fa00 f203 	lsl.w	r2, r0, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	430a      	orrs	r2, r1
 8003282:	631a      	str	r2, [r3, #48]	; 0x30
 8003284:	e023      	b.n	80032ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685a      	ldr	r2, [r3, #4]
 8003290:	4613      	mov	r3, r2
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	4413      	add	r3, r2
 8003296:	3b41      	subs	r3, #65	; 0x41
 8003298:	221f      	movs	r2, #31
 800329a:	fa02 f303 	lsl.w	r3, r2, r3
 800329e:	43da      	mvns	r2, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	400a      	ands	r2, r1
 80032a6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	4618      	mov	r0, r3
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	685a      	ldr	r2, [r3, #4]
 80032ba:	4613      	mov	r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	4413      	add	r3, r2
 80032c0:	3b41      	subs	r3, #65	; 0x41
 80032c2:	fa00 f203 	lsl.w	r2, r0, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	430a      	orrs	r2, r1
 80032cc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032ce:	4b22      	ldr	r3, [pc, #136]	; (8003358 <HAL_ADC_ConfigChannel+0x234>)
 80032d0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a21      	ldr	r2, [pc, #132]	; (800335c <HAL_ADC_ConfigChannel+0x238>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d109      	bne.n	80032f0 <HAL_ADC_ConfigChannel+0x1cc>
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2b12      	cmp	r3, #18
 80032e2:	d105      	bne.n	80032f0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a19      	ldr	r2, [pc, #100]	; (800335c <HAL_ADC_ConfigChannel+0x238>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d123      	bne.n	8003342 <HAL_ADC_ConfigChannel+0x21e>
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2b10      	cmp	r3, #16
 8003300:	d003      	beq.n	800330a <HAL_ADC_ConfigChannel+0x1e6>
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2b11      	cmp	r3, #17
 8003308:	d11b      	bne.n	8003342 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2b10      	cmp	r3, #16
 800331c:	d111      	bne.n	8003342 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800331e:	4b10      	ldr	r3, [pc, #64]	; (8003360 <HAL_ADC_ConfigChannel+0x23c>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a10      	ldr	r2, [pc, #64]	; (8003364 <HAL_ADC_ConfigChannel+0x240>)
 8003324:	fba2 2303 	umull	r2, r3, r2, r3
 8003328:	0c9a      	lsrs	r2, r3, #18
 800332a:	4613      	mov	r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	4413      	add	r3, r2
 8003330:	005b      	lsls	r3, r3, #1
 8003332:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003334:	e002      	b.n	800333c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	3b01      	subs	r3, #1
 800333a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1f9      	bne.n	8003336 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800334a:	2300      	movs	r3, #0
}
 800334c:	4618      	mov	r0, r3
 800334e:	3714      	adds	r7, #20
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr
 8003358:	40012300 	.word	0x40012300
 800335c:	40012000 	.word	0x40012000
 8003360:	2000000c 	.word	0x2000000c
 8003364:	431bde83 	.word	0x431bde83

08003368 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003368:	b480      	push	{r7}
 800336a:	b085      	sub	sp, #20
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003370:	4b79      	ldr	r3, [pc, #484]	; (8003558 <ADC_Init+0x1f0>)
 8003372:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	685a      	ldr	r2, [r3, #4]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	431a      	orrs	r2, r3
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	685a      	ldr	r2, [r3, #4]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800339c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	6859      	ldr	r1, [r3, #4]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	691b      	ldr	r3, [r3, #16]
 80033a8:	021a      	lsls	r2, r3, #8
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	430a      	orrs	r2, r1
 80033b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	685a      	ldr	r2, [r3, #4]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80033c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	6859      	ldr	r1, [r3, #4]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	689a      	ldr	r2, [r3, #8]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	430a      	orrs	r2, r1
 80033d2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	689a      	ldr	r2, [r3, #8]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	6899      	ldr	r1, [r3, #8]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	68da      	ldr	r2, [r3, #12]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	430a      	orrs	r2, r1
 80033f4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fa:	4a58      	ldr	r2, [pc, #352]	; (800355c <ADC_Init+0x1f4>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d022      	beq.n	8003446 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	689a      	ldr	r2, [r3, #8]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800340e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	6899      	ldr	r1, [r3, #8]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	430a      	orrs	r2, r1
 8003420:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	689a      	ldr	r2, [r3, #8]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003430:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	6899      	ldr	r1, [r3, #8]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	430a      	orrs	r2, r1
 8003442:	609a      	str	r2, [r3, #8]
 8003444:	e00f      	b.n	8003466 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	689a      	ldr	r2, [r3, #8]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003454:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	689a      	ldr	r2, [r3, #8]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003464:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	689a      	ldr	r2, [r3, #8]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f022 0202 	bic.w	r2, r2, #2
 8003474:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	6899      	ldr	r1, [r3, #8]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	7e1b      	ldrb	r3, [r3, #24]
 8003480:	005a      	lsls	r2, r3, #1
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	430a      	orrs	r2, r1
 8003488:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d01b      	beq.n	80034cc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	685a      	ldr	r2, [r3, #4]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034a2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	685a      	ldr	r2, [r3, #4]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80034b2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	6859      	ldr	r1, [r3, #4]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034be:	3b01      	subs	r3, #1
 80034c0:	035a      	lsls	r2, r3, #13
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	430a      	orrs	r2, r1
 80034c8:	605a      	str	r2, [r3, #4]
 80034ca:	e007      	b.n	80034dc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	685a      	ldr	r2, [r3, #4]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034da:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80034ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	69db      	ldr	r3, [r3, #28]
 80034f6:	3b01      	subs	r3, #1
 80034f8:	051a      	lsls	r2, r3, #20
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	430a      	orrs	r2, r1
 8003500:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	689a      	ldr	r2, [r3, #8]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003510:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	6899      	ldr	r1, [r3, #8]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800351e:	025a      	lsls	r2, r3, #9
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	430a      	orrs	r2, r1
 8003526:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	689a      	ldr	r2, [r3, #8]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003536:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	6899      	ldr	r1, [r3, #8]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	695b      	ldr	r3, [r3, #20]
 8003542:	029a      	lsls	r2, r3, #10
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	430a      	orrs	r2, r1
 800354a:	609a      	str	r2, [r3, #8]
}
 800354c:	bf00      	nop
 800354e:	3714      	adds	r7, #20
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr
 8003558:	40012300 	.word	0x40012300
 800355c:	0f000001 	.word	0x0f000001

08003560 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800356c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003572:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003576:	2b00      	cmp	r3, #0
 8003578:	d13c      	bne.n	80035f4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d12b      	bne.n	80035ec <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003598:	2b00      	cmp	r3, #0
 800359a:	d127      	bne.n	80035ec <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d006      	beq.n	80035b8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d119      	bne.n	80035ec <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	685a      	ldr	r2, [r3, #4]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f022 0220 	bic.w	r2, r2, #32
 80035c6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d105      	bne.n	80035ec <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e4:	f043 0201 	orr.w	r2, r3, #1
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80035ec:	68f8      	ldr	r0, [r7, #12]
 80035ee:	f7ff fd71 	bl	80030d4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80035f2:	e00e      	b.n	8003612 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f8:	f003 0310 	and.w	r3, r3, #16
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d003      	beq.n	8003608 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003600:	68f8      	ldr	r0, [r7, #12]
 8003602:	f7ff fd85 	bl	8003110 <HAL_ADC_ErrorCallback>
}
 8003606:	e004      	b.n	8003612 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800360c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	4798      	blx	r3
}
 8003612:	bf00      	nop
 8003614:	3710      	adds	r7, #16
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800361a:	b580      	push	{r7, lr}
 800361c:	b084      	sub	sp, #16
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003626:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003628:	68f8      	ldr	r0, [r7, #12]
 800362a:	f7ff fd5d 	bl	80030e8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800362e:	bf00      	nop
 8003630:	3710      	adds	r7, #16
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}

08003636 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003636:	b580      	push	{r7, lr}
 8003638:	b084      	sub	sp, #16
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003642:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2240      	movs	r2, #64	; 0x40
 8003648:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800364e:	f043 0204 	orr.w	r2, r3, #4
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003656:	68f8      	ldr	r0, [r7, #12]
 8003658:	f7ff fd5a 	bl	8003110 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800365c:	bf00      	nop
 800365e:	3710      	adds	r7, #16
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800366c:	bf00      	nop
 800366e:	370c      	adds	r7, #12
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003678:	b480      	push	{r7}
 800367a:	b085      	sub	sp, #20
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f003 0307 	and.w	r3, r3, #7
 8003686:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003688:	4b0c      	ldr	r3, [pc, #48]	; (80036bc <__NVIC_SetPriorityGrouping+0x44>)
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800368e:	68ba      	ldr	r2, [r7, #8]
 8003690:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003694:	4013      	ands	r3, r2
 8003696:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80036a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036aa:	4a04      	ldr	r2, [pc, #16]	; (80036bc <__NVIC_SetPriorityGrouping+0x44>)
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	60d3      	str	r3, [r2, #12]
}
 80036b0:	bf00      	nop
 80036b2:	3714      	adds	r7, #20
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr
 80036bc:	e000ed00 	.word	0xe000ed00

080036c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036c0:	b480      	push	{r7}
 80036c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036c4:	4b04      	ldr	r3, [pc, #16]	; (80036d8 <__NVIC_GetPriorityGrouping+0x18>)
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	0a1b      	lsrs	r3, r3, #8
 80036ca:	f003 0307 	and.w	r3, r3, #7
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr
 80036d8:	e000ed00 	.word	0xe000ed00

080036dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	4603      	mov	r3, r0
 80036e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	db0b      	blt.n	8003706 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036ee:	79fb      	ldrb	r3, [r7, #7]
 80036f0:	f003 021f 	and.w	r2, r3, #31
 80036f4:	4907      	ldr	r1, [pc, #28]	; (8003714 <__NVIC_EnableIRQ+0x38>)
 80036f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036fa:	095b      	lsrs	r3, r3, #5
 80036fc:	2001      	movs	r0, #1
 80036fe:	fa00 f202 	lsl.w	r2, r0, r2
 8003702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003706:	bf00      	nop
 8003708:	370c      	adds	r7, #12
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr
 8003712:	bf00      	nop
 8003714:	e000e100 	.word	0xe000e100

08003718 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	4603      	mov	r3, r0
 8003720:	6039      	str	r1, [r7, #0]
 8003722:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003728:	2b00      	cmp	r3, #0
 800372a:	db0a      	blt.n	8003742 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	b2da      	uxtb	r2, r3
 8003730:	490c      	ldr	r1, [pc, #48]	; (8003764 <__NVIC_SetPriority+0x4c>)
 8003732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003736:	0112      	lsls	r2, r2, #4
 8003738:	b2d2      	uxtb	r2, r2
 800373a:	440b      	add	r3, r1
 800373c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003740:	e00a      	b.n	8003758 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	b2da      	uxtb	r2, r3
 8003746:	4908      	ldr	r1, [pc, #32]	; (8003768 <__NVIC_SetPriority+0x50>)
 8003748:	79fb      	ldrb	r3, [r7, #7]
 800374a:	f003 030f 	and.w	r3, r3, #15
 800374e:	3b04      	subs	r3, #4
 8003750:	0112      	lsls	r2, r2, #4
 8003752:	b2d2      	uxtb	r2, r2
 8003754:	440b      	add	r3, r1
 8003756:	761a      	strb	r2, [r3, #24]
}
 8003758:	bf00      	nop
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr
 8003764:	e000e100 	.word	0xe000e100
 8003768:	e000ed00 	.word	0xe000ed00

0800376c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800376c:	b480      	push	{r7}
 800376e:	b089      	sub	sp, #36	; 0x24
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f003 0307 	and.w	r3, r3, #7
 800377e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	f1c3 0307 	rsb	r3, r3, #7
 8003786:	2b04      	cmp	r3, #4
 8003788:	bf28      	it	cs
 800378a:	2304      	movcs	r3, #4
 800378c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	3304      	adds	r3, #4
 8003792:	2b06      	cmp	r3, #6
 8003794:	d902      	bls.n	800379c <NVIC_EncodePriority+0x30>
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	3b03      	subs	r3, #3
 800379a:	e000      	b.n	800379e <NVIC_EncodePriority+0x32>
 800379c:	2300      	movs	r3, #0
 800379e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037a0:	f04f 32ff 	mov.w	r2, #4294967295
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	fa02 f303 	lsl.w	r3, r2, r3
 80037aa:	43da      	mvns	r2, r3
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	401a      	ands	r2, r3
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037b4:	f04f 31ff 	mov.w	r1, #4294967295
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	fa01 f303 	lsl.w	r3, r1, r3
 80037be:	43d9      	mvns	r1, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037c4:	4313      	orrs	r3, r2
         );
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3724      	adds	r7, #36	; 0x24
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
	...

080037d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	3b01      	subs	r3, #1
 80037e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037e4:	d301      	bcc.n	80037ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037e6:	2301      	movs	r3, #1
 80037e8:	e00f      	b.n	800380a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037ea:	4a0a      	ldr	r2, [pc, #40]	; (8003814 <SysTick_Config+0x40>)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	3b01      	subs	r3, #1
 80037f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037f2:	210f      	movs	r1, #15
 80037f4:	f04f 30ff 	mov.w	r0, #4294967295
 80037f8:	f7ff ff8e 	bl	8003718 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037fc:	4b05      	ldr	r3, [pc, #20]	; (8003814 <SysTick_Config+0x40>)
 80037fe:	2200      	movs	r2, #0
 8003800:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003802:	4b04      	ldr	r3, [pc, #16]	; (8003814 <SysTick_Config+0x40>)
 8003804:	2207      	movs	r2, #7
 8003806:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3708      	adds	r7, #8
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	e000e010 	.word	0xe000e010

08003818 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f7ff ff29 	bl	8003678 <__NVIC_SetPriorityGrouping>
}
 8003826:	bf00      	nop
 8003828:	3708      	adds	r7, #8
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}

0800382e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800382e:	b580      	push	{r7, lr}
 8003830:	b086      	sub	sp, #24
 8003832:	af00      	add	r7, sp, #0
 8003834:	4603      	mov	r3, r0
 8003836:	60b9      	str	r1, [r7, #8]
 8003838:	607a      	str	r2, [r7, #4]
 800383a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800383c:	2300      	movs	r3, #0
 800383e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003840:	f7ff ff3e 	bl	80036c0 <__NVIC_GetPriorityGrouping>
 8003844:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	68b9      	ldr	r1, [r7, #8]
 800384a:	6978      	ldr	r0, [r7, #20]
 800384c:	f7ff ff8e 	bl	800376c <NVIC_EncodePriority>
 8003850:	4602      	mov	r2, r0
 8003852:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003856:	4611      	mov	r1, r2
 8003858:	4618      	mov	r0, r3
 800385a:	f7ff ff5d 	bl	8003718 <__NVIC_SetPriority>
}
 800385e:	bf00      	nop
 8003860:	3718      	adds	r7, #24
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}

08003866 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003866:	b580      	push	{r7, lr}
 8003868:	b082      	sub	sp, #8
 800386a:	af00      	add	r7, sp, #0
 800386c:	4603      	mov	r3, r0
 800386e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003874:	4618      	mov	r0, r3
 8003876:	f7ff ff31 	bl	80036dc <__NVIC_EnableIRQ>
}
 800387a:	bf00      	nop
 800387c:	3708      	adds	r7, #8
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}

08003882 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003882:	b580      	push	{r7, lr}
 8003884:	b082      	sub	sp, #8
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f7ff ffa2 	bl	80037d4 <SysTick_Config>
 8003890:	4603      	mov	r3, r0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3708      	adds	r7, #8
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
	...

0800389c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b086      	sub	sp, #24
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80038a4:	2300      	movs	r3, #0
 80038a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80038a8:	f7ff f970 	bl	8002b8c <HAL_GetTick>
 80038ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d101      	bne.n	80038b8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e099      	b.n	80039ec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2202      	movs	r2, #2
 80038c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f022 0201 	bic.w	r2, r2, #1
 80038d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038d8:	e00f      	b.n	80038fa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80038da:	f7ff f957 	bl	8002b8c <HAL_GetTick>
 80038de:	4602      	mov	r2, r0
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	2b05      	cmp	r3, #5
 80038e6:	d908      	bls.n	80038fa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2220      	movs	r2, #32
 80038ec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2203      	movs	r2, #3
 80038f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e078      	b.n	80039ec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0301 	and.w	r3, r3, #1
 8003904:	2b00      	cmp	r3, #0
 8003906:	d1e8      	bne.n	80038da <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003910:	697a      	ldr	r2, [r7, #20]
 8003912:	4b38      	ldr	r3, [pc, #224]	; (80039f4 <HAL_DMA_Init+0x158>)
 8003914:	4013      	ands	r3, r2
 8003916:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685a      	ldr	r2, [r3, #4]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003926:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	691b      	ldr	r3, [r3, #16]
 800392c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003932:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	699b      	ldr	r3, [r3, #24]
 8003938:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800393e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6a1b      	ldr	r3, [r3, #32]
 8003944:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003946:	697a      	ldr	r2, [r7, #20]
 8003948:	4313      	orrs	r3, r2
 800394a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003950:	2b04      	cmp	r3, #4
 8003952:	d107      	bne.n	8003964 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395c:	4313      	orrs	r3, r2
 800395e:	697a      	ldr	r2, [r7, #20]
 8003960:	4313      	orrs	r3, r2
 8003962:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	697a      	ldr	r2, [r7, #20]
 800396a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	695b      	ldr	r3, [r3, #20]
 8003972:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	f023 0307 	bic.w	r3, r3, #7
 800397a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003980:	697a      	ldr	r2, [r7, #20]
 8003982:	4313      	orrs	r3, r2
 8003984:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398a:	2b04      	cmp	r3, #4
 800398c:	d117      	bne.n	80039be <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003992:	697a      	ldr	r2, [r7, #20]
 8003994:	4313      	orrs	r3, r2
 8003996:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800399c:	2b00      	cmp	r3, #0
 800399e:	d00e      	beq.n	80039be <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f000 fa91 	bl	8003ec8 <DMA_CheckFifoParam>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d008      	beq.n	80039be <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2240      	movs	r2, #64	; 0x40
 80039b0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2201      	movs	r2, #1
 80039b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80039ba:	2301      	movs	r3, #1
 80039bc:	e016      	b.n	80039ec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	697a      	ldr	r2, [r7, #20]
 80039c4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 fa48 	bl	8003e5c <DMA_CalcBaseAndBitshift>
 80039cc:	4603      	mov	r3, r0
 80039ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039d4:	223f      	movs	r2, #63	; 0x3f
 80039d6:	409a      	lsls	r2, r3
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2201      	movs	r2, #1
 80039e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80039ea:	2300      	movs	r3, #0
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3718      	adds	r7, #24
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	f010803f 	.word	0xf010803f

080039f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b086      	sub	sp, #24
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	607a      	str	r2, [r7, #4]
 8003a04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a06:	2300      	movs	r3, #0
 8003a08:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a0e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d101      	bne.n	8003a1e <HAL_DMA_Start_IT+0x26>
 8003a1a:	2302      	movs	r3, #2
 8003a1c:	e040      	b.n	8003aa0 <HAL_DMA_Start_IT+0xa8>
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2201      	movs	r2, #1
 8003a22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d12f      	bne.n	8003a92 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2202      	movs	r2, #2
 8003a36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	68b9      	ldr	r1, [r7, #8]
 8003a46:	68f8      	ldr	r0, [r7, #12]
 8003a48:	f000 f9da 	bl	8003e00 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a50:	223f      	movs	r2, #63	; 0x3f
 8003a52:	409a      	lsls	r2, r3
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f042 0216 	orr.w	r2, r2, #22
 8003a66:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d007      	beq.n	8003a80 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f042 0208 	orr.w	r2, r2, #8
 8003a7e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f042 0201 	orr.w	r2, r2, #1
 8003a8e:	601a      	str	r2, [r3, #0]
 8003a90:	e005      	b.n	8003a9e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003a9a:	2302      	movs	r3, #2
 8003a9c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003a9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3718      	adds	r7, #24
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	d004      	beq.n	8003ac6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2280      	movs	r2, #128	; 0x80
 8003ac0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e00c      	b.n	8003ae0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2205      	movs	r2, #5
 8003aca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f022 0201 	bic.w	r2, r2, #1
 8003adc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	370c      	adds	r7, #12
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b086      	sub	sp, #24
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003af4:	2300      	movs	r3, #0
 8003af6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003af8:	4b92      	ldr	r3, [pc, #584]	; (8003d44 <HAL_DMA_IRQHandler+0x258>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a92      	ldr	r2, [pc, #584]	; (8003d48 <HAL_DMA_IRQHandler+0x25c>)
 8003afe:	fba2 2303 	umull	r2, r3, r2, r3
 8003b02:	0a9b      	lsrs	r3, r3, #10
 8003b04:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b0a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b16:	2208      	movs	r2, #8
 8003b18:	409a      	lsls	r2, r3
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d01a      	beq.n	8003b58 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0304 	and.w	r3, r3, #4
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d013      	beq.n	8003b58 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f022 0204 	bic.w	r2, r2, #4
 8003b3e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b44:	2208      	movs	r2, #8
 8003b46:	409a      	lsls	r2, r3
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b50:	f043 0201 	orr.w	r2, r3, #1
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	409a      	lsls	r2, r3
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	4013      	ands	r3, r2
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d012      	beq.n	8003b8e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00b      	beq.n	8003b8e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	409a      	lsls	r2, r3
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b86:	f043 0202 	orr.w	r2, r3, #2
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b92:	2204      	movs	r2, #4
 8003b94:	409a      	lsls	r2, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	4013      	ands	r3, r2
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d012      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0302 	and.w	r3, r3, #2
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d00b      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bb0:	2204      	movs	r2, #4
 8003bb2:	409a      	lsls	r2, r3
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bbc:	f043 0204 	orr.w	r2, r3, #4
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bc8:	2210      	movs	r2, #16
 8003bca:	409a      	lsls	r2, r3
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	4013      	ands	r3, r2
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d043      	beq.n	8003c5c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0308 	and.w	r3, r3, #8
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d03c      	beq.n	8003c5c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003be6:	2210      	movs	r2, #16
 8003be8:	409a      	lsls	r2, r3
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d018      	beq.n	8003c2e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d108      	bne.n	8003c1c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d024      	beq.n	8003c5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	4798      	blx	r3
 8003c1a:	e01f      	b.n	8003c5c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d01b      	beq.n	8003c5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	4798      	blx	r3
 8003c2c:	e016      	b.n	8003c5c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d107      	bne.n	8003c4c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f022 0208 	bic.w	r2, r2, #8
 8003c4a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d003      	beq.n	8003c5c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c60:	2220      	movs	r2, #32
 8003c62:	409a      	lsls	r2, r3
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	4013      	ands	r3, r2
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	f000 808e 	beq.w	8003d8a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0310 	and.w	r3, r3, #16
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	f000 8086 	beq.w	8003d8a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c82:	2220      	movs	r2, #32
 8003c84:	409a      	lsls	r2, r3
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	2b05      	cmp	r3, #5
 8003c94:	d136      	bne.n	8003d04 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f022 0216 	bic.w	r2, r2, #22
 8003ca4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	695a      	ldr	r2, [r3, #20]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cb4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d103      	bne.n	8003cc6 <HAL_DMA_IRQHandler+0x1da>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d007      	beq.n	8003cd6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f022 0208 	bic.w	r2, r2, #8
 8003cd4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cda:	223f      	movs	r2, #63	; 0x3f
 8003cdc:	409a      	lsls	r2, r3
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2201      	movs	r2, #1
 8003cee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d07d      	beq.n	8003df6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	4798      	blx	r3
        }
        return;
 8003d02:	e078      	b.n	8003df6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d01c      	beq.n	8003d4c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d108      	bne.n	8003d32 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d030      	beq.n	8003d8a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	4798      	blx	r3
 8003d30:	e02b      	b.n	8003d8a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d027      	beq.n	8003d8a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	4798      	blx	r3
 8003d42:	e022      	b.n	8003d8a <HAL_DMA_IRQHandler+0x29e>
 8003d44:	2000000c 	.word	0x2000000c
 8003d48:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d10f      	bne.n	8003d7a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f022 0210 	bic.w	r2, r2, #16
 8003d68:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2201      	movs	r2, #1
 8003d76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d003      	beq.n	8003d8a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d032      	beq.n	8003df8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d96:	f003 0301 	and.w	r3, r3, #1
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d022      	beq.n	8003de4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2205      	movs	r2, #5
 8003da2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f022 0201 	bic.w	r2, r2, #1
 8003db4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	3301      	adds	r3, #1
 8003dba:	60bb      	str	r3, [r7, #8]
 8003dbc:	697a      	ldr	r2, [r7, #20]
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d307      	bcc.n	8003dd2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0301 	and.w	r3, r3, #1
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d1f2      	bne.n	8003db6 <HAL_DMA_IRQHandler+0x2ca>
 8003dd0:	e000      	b.n	8003dd4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003dd2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d005      	beq.n	8003df8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	4798      	blx	r3
 8003df4:	e000      	b.n	8003df8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003df6:	bf00      	nop
    }
  }
}
 8003df8:	3718      	adds	r7, #24
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop

08003e00 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b085      	sub	sp, #20
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	607a      	str	r2, [r7, #4]
 8003e0c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003e1c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	683a      	ldr	r2, [r7, #0]
 8003e24:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	2b40      	cmp	r3, #64	; 0x40
 8003e2c:	d108      	bne.n	8003e40 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68ba      	ldr	r2, [r7, #8]
 8003e3c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003e3e:	e007      	b.n	8003e50 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68ba      	ldr	r2, [r7, #8]
 8003e46:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	60da      	str	r2, [r3, #12]
}
 8003e50:	bf00      	nop
 8003e52:	3714      	adds	r7, #20
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b085      	sub	sp, #20
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	3b10      	subs	r3, #16
 8003e6c:	4a14      	ldr	r2, [pc, #80]	; (8003ec0 <DMA_CalcBaseAndBitshift+0x64>)
 8003e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e72:	091b      	lsrs	r3, r3, #4
 8003e74:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003e76:	4a13      	ldr	r2, [pc, #76]	; (8003ec4 <DMA_CalcBaseAndBitshift+0x68>)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	4413      	add	r3, r2
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	461a      	mov	r2, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2b03      	cmp	r3, #3
 8003e88:	d909      	bls.n	8003e9e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003e92:	f023 0303 	bic.w	r3, r3, #3
 8003e96:	1d1a      	adds	r2, r3, #4
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	659a      	str	r2, [r3, #88]	; 0x58
 8003e9c:	e007      	b.n	8003eae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003ea6:	f023 0303 	bic.w	r3, r3, #3
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3714      	adds	r7, #20
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop
 8003ec0:	aaaaaaab 	.word	0xaaaaaaab
 8003ec4:	080094a0 	.word	0x080094a0

08003ec8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b085      	sub	sp, #20
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	699b      	ldr	r3, [r3, #24]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d11f      	bne.n	8003f22 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	2b03      	cmp	r3, #3
 8003ee6:	d855      	bhi.n	8003f94 <DMA_CheckFifoParam+0xcc>
 8003ee8:	a201      	add	r2, pc, #4	; (adr r2, 8003ef0 <DMA_CheckFifoParam+0x28>)
 8003eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eee:	bf00      	nop
 8003ef0:	08003f01 	.word	0x08003f01
 8003ef4:	08003f13 	.word	0x08003f13
 8003ef8:	08003f01 	.word	0x08003f01
 8003efc:	08003f95 	.word	0x08003f95
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d045      	beq.n	8003f98 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f10:	e042      	b.n	8003f98 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f16:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f1a:	d13f      	bne.n	8003f9c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f20:	e03c      	b.n	8003f9c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	699b      	ldr	r3, [r3, #24]
 8003f26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f2a:	d121      	bne.n	8003f70 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	2b03      	cmp	r3, #3
 8003f30:	d836      	bhi.n	8003fa0 <DMA_CheckFifoParam+0xd8>
 8003f32:	a201      	add	r2, pc, #4	; (adr r2, 8003f38 <DMA_CheckFifoParam+0x70>)
 8003f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f38:	08003f49 	.word	0x08003f49
 8003f3c:	08003f4f 	.word	0x08003f4f
 8003f40:	08003f49 	.word	0x08003f49
 8003f44:	08003f61 	.word	0x08003f61
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	73fb      	strb	r3, [r7, #15]
      break;
 8003f4c:	e02f      	b.n	8003fae <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d024      	beq.n	8003fa4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f5e:	e021      	b.n	8003fa4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f64:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f68:	d11e      	bne.n	8003fa8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003f6e:	e01b      	b.n	8003fa8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d902      	bls.n	8003f7c <DMA_CheckFifoParam+0xb4>
 8003f76:	2b03      	cmp	r3, #3
 8003f78:	d003      	beq.n	8003f82 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003f7a:	e018      	b.n	8003fae <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	73fb      	strb	r3, [r7, #15]
      break;
 8003f80:	e015      	b.n	8003fae <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00e      	beq.n	8003fac <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	73fb      	strb	r3, [r7, #15]
      break;
 8003f92:	e00b      	b.n	8003fac <DMA_CheckFifoParam+0xe4>
      break;
 8003f94:	bf00      	nop
 8003f96:	e00a      	b.n	8003fae <DMA_CheckFifoParam+0xe6>
      break;
 8003f98:	bf00      	nop
 8003f9a:	e008      	b.n	8003fae <DMA_CheckFifoParam+0xe6>
      break;
 8003f9c:	bf00      	nop
 8003f9e:	e006      	b.n	8003fae <DMA_CheckFifoParam+0xe6>
      break;
 8003fa0:	bf00      	nop
 8003fa2:	e004      	b.n	8003fae <DMA_CheckFifoParam+0xe6>
      break;
 8003fa4:	bf00      	nop
 8003fa6:	e002      	b.n	8003fae <DMA_CheckFifoParam+0xe6>
      break;   
 8003fa8:	bf00      	nop
 8003faa:	e000      	b.n	8003fae <DMA_CheckFifoParam+0xe6>
      break;
 8003fac:	bf00      	nop
    }
  } 
  
  return status; 
 8003fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3714      	adds	r7, #20
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b089      	sub	sp, #36	; 0x24
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	61fb      	str	r3, [r7, #28]
 8003fd6:	e16b      	b.n	80042b0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003fd8:	2201      	movs	r2, #1
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	697a      	ldr	r2, [r7, #20]
 8003fe8:	4013      	ands	r3, r2
 8003fea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003fec:	693a      	ldr	r2, [r7, #16]
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	f040 815a 	bne.w	80042aa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d00b      	beq.n	8004016 <HAL_GPIO_Init+0x5a>
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	2b02      	cmp	r3, #2
 8004004:	d007      	beq.n	8004016 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800400a:	2b11      	cmp	r3, #17
 800400c:	d003      	beq.n	8004016 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	2b12      	cmp	r3, #18
 8004014:	d130      	bne.n	8004078 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	005b      	lsls	r3, r3, #1
 8004020:	2203      	movs	r2, #3
 8004022:	fa02 f303 	lsl.w	r3, r2, r3
 8004026:	43db      	mvns	r3, r3
 8004028:	69ba      	ldr	r2, [r7, #24]
 800402a:	4013      	ands	r3, r2
 800402c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	68da      	ldr	r2, [r3, #12]
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	005b      	lsls	r3, r3, #1
 8004036:	fa02 f303 	lsl.w	r3, r2, r3
 800403a:	69ba      	ldr	r2, [r7, #24]
 800403c:	4313      	orrs	r3, r2
 800403e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	69ba      	ldr	r2, [r7, #24]
 8004044:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800404c:	2201      	movs	r2, #1
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	fa02 f303 	lsl.w	r3, r2, r3
 8004054:	43db      	mvns	r3, r3
 8004056:	69ba      	ldr	r2, [r7, #24]
 8004058:	4013      	ands	r3, r2
 800405a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	091b      	lsrs	r3, r3, #4
 8004062:	f003 0201 	and.w	r2, r3, #1
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	fa02 f303 	lsl.w	r3, r2, r3
 800406c:	69ba      	ldr	r2, [r7, #24]
 800406e:	4313      	orrs	r3, r2
 8004070:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	69ba      	ldr	r2, [r7, #24]
 8004076:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	005b      	lsls	r3, r3, #1
 8004082:	2203      	movs	r2, #3
 8004084:	fa02 f303 	lsl.w	r3, r2, r3
 8004088:	43db      	mvns	r3, r3
 800408a:	69ba      	ldr	r2, [r7, #24]
 800408c:	4013      	ands	r3, r2
 800408e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	689a      	ldr	r2, [r3, #8]
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	005b      	lsls	r3, r3, #1
 8004098:	fa02 f303 	lsl.w	r3, r2, r3
 800409c:	69ba      	ldr	r2, [r7, #24]
 800409e:	4313      	orrs	r3, r2
 80040a0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	69ba      	ldr	r2, [r7, #24]
 80040a6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d003      	beq.n	80040b8 <HAL_GPIO_Init+0xfc>
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	2b12      	cmp	r3, #18
 80040b6:	d123      	bne.n	8004100 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	08da      	lsrs	r2, r3, #3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	3208      	adds	r2, #8
 80040c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	f003 0307 	and.w	r3, r3, #7
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	220f      	movs	r2, #15
 80040d0:	fa02 f303 	lsl.w	r3, r2, r3
 80040d4:	43db      	mvns	r3, r3
 80040d6:	69ba      	ldr	r2, [r7, #24]
 80040d8:	4013      	ands	r3, r2
 80040da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	691a      	ldr	r2, [r3, #16]
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	f003 0307 	and.w	r3, r3, #7
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	fa02 f303 	lsl.w	r3, r2, r3
 80040ec:	69ba      	ldr	r2, [r7, #24]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	08da      	lsrs	r2, r3, #3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	3208      	adds	r2, #8
 80040fa:	69b9      	ldr	r1, [r7, #24]
 80040fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	005b      	lsls	r3, r3, #1
 800410a:	2203      	movs	r2, #3
 800410c:	fa02 f303 	lsl.w	r3, r2, r3
 8004110:	43db      	mvns	r3, r3
 8004112:	69ba      	ldr	r2, [r7, #24]
 8004114:	4013      	ands	r3, r2
 8004116:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f003 0203 	and.w	r2, r3, #3
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	005b      	lsls	r3, r3, #1
 8004124:	fa02 f303 	lsl.w	r3, r2, r3
 8004128:	69ba      	ldr	r2, [r7, #24]
 800412a:	4313      	orrs	r3, r2
 800412c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	69ba      	ldr	r2, [r7, #24]
 8004132:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800413c:	2b00      	cmp	r3, #0
 800413e:	f000 80b4 	beq.w	80042aa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004142:	2300      	movs	r3, #0
 8004144:	60fb      	str	r3, [r7, #12]
 8004146:	4b5f      	ldr	r3, [pc, #380]	; (80042c4 <HAL_GPIO_Init+0x308>)
 8004148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800414a:	4a5e      	ldr	r2, [pc, #376]	; (80042c4 <HAL_GPIO_Init+0x308>)
 800414c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004150:	6453      	str	r3, [r2, #68]	; 0x44
 8004152:	4b5c      	ldr	r3, [pc, #368]	; (80042c4 <HAL_GPIO_Init+0x308>)
 8004154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004156:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800415a:	60fb      	str	r3, [r7, #12]
 800415c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800415e:	4a5a      	ldr	r2, [pc, #360]	; (80042c8 <HAL_GPIO_Init+0x30c>)
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	089b      	lsrs	r3, r3, #2
 8004164:	3302      	adds	r3, #2
 8004166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800416a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	f003 0303 	and.w	r3, r3, #3
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	220f      	movs	r2, #15
 8004176:	fa02 f303 	lsl.w	r3, r2, r3
 800417a:	43db      	mvns	r3, r3
 800417c:	69ba      	ldr	r2, [r7, #24]
 800417e:	4013      	ands	r3, r2
 8004180:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a51      	ldr	r2, [pc, #324]	; (80042cc <HAL_GPIO_Init+0x310>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d02b      	beq.n	80041e2 <HAL_GPIO_Init+0x226>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a50      	ldr	r2, [pc, #320]	; (80042d0 <HAL_GPIO_Init+0x314>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d025      	beq.n	80041de <HAL_GPIO_Init+0x222>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a4f      	ldr	r2, [pc, #316]	; (80042d4 <HAL_GPIO_Init+0x318>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d01f      	beq.n	80041da <HAL_GPIO_Init+0x21e>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a4e      	ldr	r2, [pc, #312]	; (80042d8 <HAL_GPIO_Init+0x31c>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d019      	beq.n	80041d6 <HAL_GPIO_Init+0x21a>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a4d      	ldr	r2, [pc, #308]	; (80042dc <HAL_GPIO_Init+0x320>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d013      	beq.n	80041d2 <HAL_GPIO_Init+0x216>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a4c      	ldr	r2, [pc, #304]	; (80042e0 <HAL_GPIO_Init+0x324>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d00d      	beq.n	80041ce <HAL_GPIO_Init+0x212>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a4b      	ldr	r2, [pc, #300]	; (80042e4 <HAL_GPIO_Init+0x328>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d007      	beq.n	80041ca <HAL_GPIO_Init+0x20e>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a4a      	ldr	r2, [pc, #296]	; (80042e8 <HAL_GPIO_Init+0x32c>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d101      	bne.n	80041c6 <HAL_GPIO_Init+0x20a>
 80041c2:	2307      	movs	r3, #7
 80041c4:	e00e      	b.n	80041e4 <HAL_GPIO_Init+0x228>
 80041c6:	2308      	movs	r3, #8
 80041c8:	e00c      	b.n	80041e4 <HAL_GPIO_Init+0x228>
 80041ca:	2306      	movs	r3, #6
 80041cc:	e00a      	b.n	80041e4 <HAL_GPIO_Init+0x228>
 80041ce:	2305      	movs	r3, #5
 80041d0:	e008      	b.n	80041e4 <HAL_GPIO_Init+0x228>
 80041d2:	2304      	movs	r3, #4
 80041d4:	e006      	b.n	80041e4 <HAL_GPIO_Init+0x228>
 80041d6:	2303      	movs	r3, #3
 80041d8:	e004      	b.n	80041e4 <HAL_GPIO_Init+0x228>
 80041da:	2302      	movs	r3, #2
 80041dc:	e002      	b.n	80041e4 <HAL_GPIO_Init+0x228>
 80041de:	2301      	movs	r3, #1
 80041e0:	e000      	b.n	80041e4 <HAL_GPIO_Init+0x228>
 80041e2:	2300      	movs	r3, #0
 80041e4:	69fa      	ldr	r2, [r7, #28]
 80041e6:	f002 0203 	and.w	r2, r2, #3
 80041ea:	0092      	lsls	r2, r2, #2
 80041ec:	4093      	lsls	r3, r2
 80041ee:	69ba      	ldr	r2, [r7, #24]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80041f4:	4934      	ldr	r1, [pc, #208]	; (80042c8 <HAL_GPIO_Init+0x30c>)
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	089b      	lsrs	r3, r3, #2
 80041fa:	3302      	adds	r3, #2
 80041fc:	69ba      	ldr	r2, [r7, #24]
 80041fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004202:	4b3a      	ldr	r3, [pc, #232]	; (80042ec <HAL_GPIO_Init+0x330>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	43db      	mvns	r3, r3
 800420c:	69ba      	ldr	r2, [r7, #24]
 800420e:	4013      	ands	r3, r2
 8004210:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d003      	beq.n	8004226 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800421e:	69ba      	ldr	r2, [r7, #24]
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	4313      	orrs	r3, r2
 8004224:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004226:	4a31      	ldr	r2, [pc, #196]	; (80042ec <HAL_GPIO_Init+0x330>)
 8004228:	69bb      	ldr	r3, [r7, #24]
 800422a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800422c:	4b2f      	ldr	r3, [pc, #188]	; (80042ec <HAL_GPIO_Init+0x330>)
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	43db      	mvns	r3, r3
 8004236:	69ba      	ldr	r2, [r7, #24]
 8004238:	4013      	ands	r3, r2
 800423a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d003      	beq.n	8004250 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004248:	69ba      	ldr	r2, [r7, #24]
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	4313      	orrs	r3, r2
 800424e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004250:	4a26      	ldr	r2, [pc, #152]	; (80042ec <HAL_GPIO_Init+0x330>)
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004256:	4b25      	ldr	r3, [pc, #148]	; (80042ec <HAL_GPIO_Init+0x330>)
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	43db      	mvns	r3, r3
 8004260:	69ba      	ldr	r2, [r7, #24]
 8004262:	4013      	ands	r3, r2
 8004264:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d003      	beq.n	800427a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004272:	69ba      	ldr	r2, [r7, #24]
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	4313      	orrs	r3, r2
 8004278:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800427a:	4a1c      	ldr	r2, [pc, #112]	; (80042ec <HAL_GPIO_Init+0x330>)
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004280:	4b1a      	ldr	r3, [pc, #104]	; (80042ec <HAL_GPIO_Init+0x330>)
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	43db      	mvns	r3, r3
 800428a:	69ba      	ldr	r2, [r7, #24]
 800428c:	4013      	ands	r3, r2
 800428e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d003      	beq.n	80042a4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800429c:	69ba      	ldr	r2, [r7, #24]
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80042a4:	4a11      	ldr	r2, [pc, #68]	; (80042ec <HAL_GPIO_Init+0x330>)
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	3301      	adds	r3, #1
 80042ae:	61fb      	str	r3, [r7, #28]
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	2b0f      	cmp	r3, #15
 80042b4:	f67f ae90 	bls.w	8003fd8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80042b8:	bf00      	nop
 80042ba:	3724      	adds	r7, #36	; 0x24
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr
 80042c4:	40023800 	.word	0x40023800
 80042c8:	40013800 	.word	0x40013800
 80042cc:	40020000 	.word	0x40020000
 80042d0:	40020400 	.word	0x40020400
 80042d4:	40020800 	.word	0x40020800
 80042d8:	40020c00 	.word	0x40020c00
 80042dc:	40021000 	.word	0x40021000
 80042e0:	40021400 	.word	0x40021400
 80042e4:	40021800 	.word	0x40021800
 80042e8:	40021c00 	.word	0x40021c00
 80042ec:	40013c00 	.word	0x40013c00

080042f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b085      	sub	sp, #20
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	460b      	mov	r3, r1
 80042fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	691a      	ldr	r2, [r3, #16]
 8004300:	887b      	ldrh	r3, [r7, #2]
 8004302:	4013      	ands	r3, r2
 8004304:	2b00      	cmp	r3, #0
 8004306:	d002      	beq.n	800430e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004308:	2301      	movs	r3, #1
 800430a:	73fb      	strb	r3, [r7, #15]
 800430c:	e001      	b.n	8004312 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800430e:	2300      	movs	r3, #0
 8004310:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004312:	7bfb      	ldrb	r3, [r7, #15]
}
 8004314:	4618      	mov	r0, r3
 8004316:	3714      	adds	r7, #20
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	460b      	mov	r3, r1
 800432a:	807b      	strh	r3, [r7, #2]
 800432c:	4613      	mov	r3, r2
 800432e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004330:	787b      	ldrb	r3, [r7, #1]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d003      	beq.n	800433e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004336:	887a      	ldrh	r2, [r7, #2]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800433c:	e003      	b.n	8004346 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800433e:	887b      	ldrh	r3, [r7, #2]
 8004340:	041a      	lsls	r2, r3, #16
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	619a      	str	r2, [r3, #24]
}
 8004346:	bf00      	nop
 8004348:	370c      	adds	r7, #12
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr

08004352 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004352:	b480      	push	{r7}
 8004354:	b083      	sub	sp, #12
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
 800435a:	460b      	mov	r3, r1
 800435c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	695a      	ldr	r2, [r3, #20]
 8004362:	887b      	ldrh	r3, [r7, #2]
 8004364:	401a      	ands	r2, r3
 8004366:	887b      	ldrh	r3, [r7, #2]
 8004368:	429a      	cmp	r2, r3
 800436a:	d104      	bne.n	8004376 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800436c:	887b      	ldrh	r3, [r7, #2]
 800436e:	041a      	lsls	r2, r3, #16
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8004374:	e002      	b.n	800437c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8004376:	887a      	ldrh	r2, [r7, #2]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	619a      	str	r2, [r3, #24]
}
 800437c:	bf00      	nop
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b086      	sub	sp, #24
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d101      	bne.n	800439a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e25b      	b.n	8004852 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0301 	and.w	r3, r3, #1
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d075      	beq.n	8004492 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043a6:	4ba3      	ldr	r3, [pc, #652]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	f003 030c 	and.w	r3, r3, #12
 80043ae:	2b04      	cmp	r3, #4
 80043b0:	d00c      	beq.n	80043cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043b2:	4ba0      	ldr	r3, [pc, #640]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043ba:	2b08      	cmp	r3, #8
 80043bc:	d112      	bne.n	80043e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043be:	4b9d      	ldr	r3, [pc, #628]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043ca:	d10b      	bne.n	80043e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043cc:	4b99      	ldr	r3, [pc, #612]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d05b      	beq.n	8004490 <HAL_RCC_OscConfig+0x108>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d157      	bne.n	8004490 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e236      	b.n	8004852 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043ec:	d106      	bne.n	80043fc <HAL_RCC_OscConfig+0x74>
 80043ee:	4b91      	ldr	r3, [pc, #580]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a90      	ldr	r2, [pc, #576]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 80043f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043f8:	6013      	str	r3, [r2, #0]
 80043fa:	e01d      	b.n	8004438 <HAL_RCC_OscConfig+0xb0>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004404:	d10c      	bne.n	8004420 <HAL_RCC_OscConfig+0x98>
 8004406:	4b8b      	ldr	r3, [pc, #556]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a8a      	ldr	r2, [pc, #552]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 800440c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004410:	6013      	str	r3, [r2, #0]
 8004412:	4b88      	ldr	r3, [pc, #544]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a87      	ldr	r2, [pc, #540]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 8004418:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800441c:	6013      	str	r3, [r2, #0]
 800441e:	e00b      	b.n	8004438 <HAL_RCC_OscConfig+0xb0>
 8004420:	4b84      	ldr	r3, [pc, #528]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a83      	ldr	r2, [pc, #524]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 8004426:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800442a:	6013      	str	r3, [r2, #0]
 800442c:	4b81      	ldr	r3, [pc, #516]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a80      	ldr	r2, [pc, #512]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 8004432:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004436:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d013      	beq.n	8004468 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004440:	f7fe fba4 	bl	8002b8c <HAL_GetTick>
 8004444:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004446:	e008      	b.n	800445a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004448:	f7fe fba0 	bl	8002b8c <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	2b64      	cmp	r3, #100	; 0x64
 8004454:	d901      	bls.n	800445a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e1fb      	b.n	8004852 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800445a:	4b76      	ldr	r3, [pc, #472]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d0f0      	beq.n	8004448 <HAL_RCC_OscConfig+0xc0>
 8004466:	e014      	b.n	8004492 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004468:	f7fe fb90 	bl	8002b8c <HAL_GetTick>
 800446c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800446e:	e008      	b.n	8004482 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004470:	f7fe fb8c 	bl	8002b8c <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	2b64      	cmp	r3, #100	; 0x64
 800447c:	d901      	bls.n	8004482 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	e1e7      	b.n	8004852 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004482:	4b6c      	ldr	r3, [pc, #432]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d1f0      	bne.n	8004470 <HAL_RCC_OscConfig+0xe8>
 800448e:	e000      	b.n	8004492 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004490:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0302 	and.w	r3, r3, #2
 800449a:	2b00      	cmp	r3, #0
 800449c:	d063      	beq.n	8004566 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800449e:	4b65      	ldr	r3, [pc, #404]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	f003 030c 	and.w	r3, r3, #12
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00b      	beq.n	80044c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044aa:	4b62      	ldr	r3, [pc, #392]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044b2:	2b08      	cmp	r3, #8
 80044b4:	d11c      	bne.n	80044f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044b6:	4b5f      	ldr	r3, [pc, #380]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d116      	bne.n	80044f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044c2:	4b5c      	ldr	r3, [pc, #368]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0302 	and.w	r3, r3, #2
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d005      	beq.n	80044da <HAL_RCC_OscConfig+0x152>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d001      	beq.n	80044da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e1bb      	b.n	8004852 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044da:	4b56      	ldr	r3, [pc, #344]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	00db      	lsls	r3, r3, #3
 80044e8:	4952      	ldr	r1, [pc, #328]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 80044ea:	4313      	orrs	r3, r2
 80044ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044ee:	e03a      	b.n	8004566 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d020      	beq.n	800453a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044f8:	4b4f      	ldr	r3, [pc, #316]	; (8004638 <HAL_RCC_OscConfig+0x2b0>)
 80044fa:	2201      	movs	r2, #1
 80044fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044fe:	f7fe fb45 	bl	8002b8c <HAL_GetTick>
 8004502:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004504:	e008      	b.n	8004518 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004506:	f7fe fb41 	bl	8002b8c <HAL_GetTick>
 800450a:	4602      	mov	r2, r0
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	2b02      	cmp	r3, #2
 8004512:	d901      	bls.n	8004518 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e19c      	b.n	8004852 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004518:	4b46      	ldr	r3, [pc, #280]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0302 	and.w	r3, r3, #2
 8004520:	2b00      	cmp	r3, #0
 8004522:	d0f0      	beq.n	8004506 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004524:	4b43      	ldr	r3, [pc, #268]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	691b      	ldr	r3, [r3, #16]
 8004530:	00db      	lsls	r3, r3, #3
 8004532:	4940      	ldr	r1, [pc, #256]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 8004534:	4313      	orrs	r3, r2
 8004536:	600b      	str	r3, [r1, #0]
 8004538:	e015      	b.n	8004566 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800453a:	4b3f      	ldr	r3, [pc, #252]	; (8004638 <HAL_RCC_OscConfig+0x2b0>)
 800453c:	2200      	movs	r2, #0
 800453e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004540:	f7fe fb24 	bl	8002b8c <HAL_GetTick>
 8004544:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004546:	e008      	b.n	800455a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004548:	f7fe fb20 	bl	8002b8c <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	2b02      	cmp	r3, #2
 8004554:	d901      	bls.n	800455a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e17b      	b.n	8004852 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800455a:	4b36      	ldr	r3, [pc, #216]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0302 	and.w	r3, r3, #2
 8004562:	2b00      	cmp	r3, #0
 8004564:	d1f0      	bne.n	8004548 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0308 	and.w	r3, r3, #8
 800456e:	2b00      	cmp	r3, #0
 8004570:	d030      	beq.n	80045d4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	695b      	ldr	r3, [r3, #20]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d016      	beq.n	80045a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800457a:	4b30      	ldr	r3, [pc, #192]	; (800463c <HAL_RCC_OscConfig+0x2b4>)
 800457c:	2201      	movs	r2, #1
 800457e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004580:	f7fe fb04 	bl	8002b8c <HAL_GetTick>
 8004584:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004586:	e008      	b.n	800459a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004588:	f7fe fb00 	bl	8002b8c <HAL_GetTick>
 800458c:	4602      	mov	r2, r0
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	2b02      	cmp	r3, #2
 8004594:	d901      	bls.n	800459a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	e15b      	b.n	8004852 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800459a:	4b26      	ldr	r3, [pc, #152]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 800459c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800459e:	f003 0302 	and.w	r3, r3, #2
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d0f0      	beq.n	8004588 <HAL_RCC_OscConfig+0x200>
 80045a6:	e015      	b.n	80045d4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045a8:	4b24      	ldr	r3, [pc, #144]	; (800463c <HAL_RCC_OscConfig+0x2b4>)
 80045aa:	2200      	movs	r2, #0
 80045ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045ae:	f7fe faed 	bl	8002b8c <HAL_GetTick>
 80045b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045b4:	e008      	b.n	80045c8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045b6:	f7fe fae9 	bl	8002b8c <HAL_GetTick>
 80045ba:	4602      	mov	r2, r0
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d901      	bls.n	80045c8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80045c4:	2303      	movs	r3, #3
 80045c6:	e144      	b.n	8004852 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045c8:	4b1a      	ldr	r3, [pc, #104]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 80045ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045cc:	f003 0302 	and.w	r3, r3, #2
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d1f0      	bne.n	80045b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0304 	and.w	r3, r3, #4
 80045dc:	2b00      	cmp	r3, #0
 80045de:	f000 80a0 	beq.w	8004722 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045e2:	2300      	movs	r3, #0
 80045e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045e6:	4b13      	ldr	r3, [pc, #76]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 80045e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d10f      	bne.n	8004612 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045f2:	2300      	movs	r3, #0
 80045f4:	60bb      	str	r3, [r7, #8]
 80045f6:	4b0f      	ldr	r3, [pc, #60]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 80045f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fa:	4a0e      	ldr	r2, [pc, #56]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 80045fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004600:	6413      	str	r3, [r2, #64]	; 0x40
 8004602:	4b0c      	ldr	r3, [pc, #48]	; (8004634 <HAL_RCC_OscConfig+0x2ac>)
 8004604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800460a:	60bb      	str	r3, [r7, #8]
 800460c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800460e:	2301      	movs	r3, #1
 8004610:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004612:	4b0b      	ldr	r3, [pc, #44]	; (8004640 <HAL_RCC_OscConfig+0x2b8>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800461a:	2b00      	cmp	r3, #0
 800461c:	d121      	bne.n	8004662 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800461e:	4b08      	ldr	r3, [pc, #32]	; (8004640 <HAL_RCC_OscConfig+0x2b8>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a07      	ldr	r2, [pc, #28]	; (8004640 <HAL_RCC_OscConfig+0x2b8>)
 8004624:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004628:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800462a:	f7fe faaf 	bl	8002b8c <HAL_GetTick>
 800462e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004630:	e011      	b.n	8004656 <HAL_RCC_OscConfig+0x2ce>
 8004632:	bf00      	nop
 8004634:	40023800 	.word	0x40023800
 8004638:	42470000 	.word	0x42470000
 800463c:	42470e80 	.word	0x42470e80
 8004640:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004644:	f7fe faa2 	bl	8002b8c <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	2b02      	cmp	r3, #2
 8004650:	d901      	bls.n	8004656 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e0fd      	b.n	8004852 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004656:	4b81      	ldr	r3, [pc, #516]	; (800485c <HAL_RCC_OscConfig+0x4d4>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800465e:	2b00      	cmp	r3, #0
 8004660:	d0f0      	beq.n	8004644 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	2b01      	cmp	r3, #1
 8004668:	d106      	bne.n	8004678 <HAL_RCC_OscConfig+0x2f0>
 800466a:	4b7d      	ldr	r3, [pc, #500]	; (8004860 <HAL_RCC_OscConfig+0x4d8>)
 800466c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800466e:	4a7c      	ldr	r2, [pc, #496]	; (8004860 <HAL_RCC_OscConfig+0x4d8>)
 8004670:	f043 0301 	orr.w	r3, r3, #1
 8004674:	6713      	str	r3, [r2, #112]	; 0x70
 8004676:	e01c      	b.n	80046b2 <HAL_RCC_OscConfig+0x32a>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	2b05      	cmp	r3, #5
 800467e:	d10c      	bne.n	800469a <HAL_RCC_OscConfig+0x312>
 8004680:	4b77      	ldr	r3, [pc, #476]	; (8004860 <HAL_RCC_OscConfig+0x4d8>)
 8004682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004684:	4a76      	ldr	r2, [pc, #472]	; (8004860 <HAL_RCC_OscConfig+0x4d8>)
 8004686:	f043 0304 	orr.w	r3, r3, #4
 800468a:	6713      	str	r3, [r2, #112]	; 0x70
 800468c:	4b74      	ldr	r3, [pc, #464]	; (8004860 <HAL_RCC_OscConfig+0x4d8>)
 800468e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004690:	4a73      	ldr	r2, [pc, #460]	; (8004860 <HAL_RCC_OscConfig+0x4d8>)
 8004692:	f043 0301 	orr.w	r3, r3, #1
 8004696:	6713      	str	r3, [r2, #112]	; 0x70
 8004698:	e00b      	b.n	80046b2 <HAL_RCC_OscConfig+0x32a>
 800469a:	4b71      	ldr	r3, [pc, #452]	; (8004860 <HAL_RCC_OscConfig+0x4d8>)
 800469c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800469e:	4a70      	ldr	r2, [pc, #448]	; (8004860 <HAL_RCC_OscConfig+0x4d8>)
 80046a0:	f023 0301 	bic.w	r3, r3, #1
 80046a4:	6713      	str	r3, [r2, #112]	; 0x70
 80046a6:	4b6e      	ldr	r3, [pc, #440]	; (8004860 <HAL_RCC_OscConfig+0x4d8>)
 80046a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046aa:	4a6d      	ldr	r2, [pc, #436]	; (8004860 <HAL_RCC_OscConfig+0x4d8>)
 80046ac:	f023 0304 	bic.w	r3, r3, #4
 80046b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d015      	beq.n	80046e6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046ba:	f7fe fa67 	bl	8002b8c <HAL_GetTick>
 80046be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046c0:	e00a      	b.n	80046d8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046c2:	f7fe fa63 	bl	8002b8c <HAL_GetTick>
 80046c6:	4602      	mov	r2, r0
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d901      	bls.n	80046d8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80046d4:	2303      	movs	r3, #3
 80046d6:	e0bc      	b.n	8004852 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046d8:	4b61      	ldr	r3, [pc, #388]	; (8004860 <HAL_RCC_OscConfig+0x4d8>)
 80046da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046dc:	f003 0302 	and.w	r3, r3, #2
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d0ee      	beq.n	80046c2 <HAL_RCC_OscConfig+0x33a>
 80046e4:	e014      	b.n	8004710 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046e6:	f7fe fa51 	bl	8002b8c <HAL_GetTick>
 80046ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046ec:	e00a      	b.n	8004704 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046ee:	f7fe fa4d 	bl	8002b8c <HAL_GetTick>
 80046f2:	4602      	mov	r2, r0
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	1ad3      	subs	r3, r2, r3
 80046f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d901      	bls.n	8004704 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e0a6      	b.n	8004852 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004704:	4b56      	ldr	r3, [pc, #344]	; (8004860 <HAL_RCC_OscConfig+0x4d8>)
 8004706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004708:	f003 0302 	and.w	r3, r3, #2
 800470c:	2b00      	cmp	r3, #0
 800470e:	d1ee      	bne.n	80046ee <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004710:	7dfb      	ldrb	r3, [r7, #23]
 8004712:	2b01      	cmp	r3, #1
 8004714:	d105      	bne.n	8004722 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004716:	4b52      	ldr	r3, [pc, #328]	; (8004860 <HAL_RCC_OscConfig+0x4d8>)
 8004718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471a:	4a51      	ldr	r2, [pc, #324]	; (8004860 <HAL_RCC_OscConfig+0x4d8>)
 800471c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004720:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	699b      	ldr	r3, [r3, #24]
 8004726:	2b00      	cmp	r3, #0
 8004728:	f000 8092 	beq.w	8004850 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800472c:	4b4c      	ldr	r3, [pc, #304]	; (8004860 <HAL_RCC_OscConfig+0x4d8>)
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	f003 030c 	and.w	r3, r3, #12
 8004734:	2b08      	cmp	r3, #8
 8004736:	d05c      	beq.n	80047f2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	699b      	ldr	r3, [r3, #24]
 800473c:	2b02      	cmp	r3, #2
 800473e:	d141      	bne.n	80047c4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004740:	4b48      	ldr	r3, [pc, #288]	; (8004864 <HAL_RCC_OscConfig+0x4dc>)
 8004742:	2200      	movs	r2, #0
 8004744:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004746:	f7fe fa21 	bl	8002b8c <HAL_GetTick>
 800474a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800474c:	e008      	b.n	8004760 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800474e:	f7fe fa1d 	bl	8002b8c <HAL_GetTick>
 8004752:	4602      	mov	r2, r0
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	1ad3      	subs	r3, r2, r3
 8004758:	2b02      	cmp	r3, #2
 800475a:	d901      	bls.n	8004760 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800475c:	2303      	movs	r3, #3
 800475e:	e078      	b.n	8004852 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004760:	4b3f      	ldr	r3, [pc, #252]	; (8004860 <HAL_RCC_OscConfig+0x4d8>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d1f0      	bne.n	800474e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	69da      	ldr	r2, [r3, #28]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a1b      	ldr	r3, [r3, #32]
 8004774:	431a      	orrs	r2, r3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477a:	019b      	lsls	r3, r3, #6
 800477c:	431a      	orrs	r2, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004782:	085b      	lsrs	r3, r3, #1
 8004784:	3b01      	subs	r3, #1
 8004786:	041b      	lsls	r3, r3, #16
 8004788:	431a      	orrs	r2, r3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800478e:	061b      	lsls	r3, r3, #24
 8004790:	4933      	ldr	r1, [pc, #204]	; (8004860 <HAL_RCC_OscConfig+0x4d8>)
 8004792:	4313      	orrs	r3, r2
 8004794:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004796:	4b33      	ldr	r3, [pc, #204]	; (8004864 <HAL_RCC_OscConfig+0x4dc>)
 8004798:	2201      	movs	r2, #1
 800479a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800479c:	f7fe f9f6 	bl	8002b8c <HAL_GetTick>
 80047a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047a2:	e008      	b.n	80047b6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047a4:	f7fe f9f2 	bl	8002b8c <HAL_GetTick>
 80047a8:	4602      	mov	r2, r0
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d901      	bls.n	80047b6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80047b2:	2303      	movs	r3, #3
 80047b4:	e04d      	b.n	8004852 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047b6:	4b2a      	ldr	r3, [pc, #168]	; (8004860 <HAL_RCC_OscConfig+0x4d8>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d0f0      	beq.n	80047a4 <HAL_RCC_OscConfig+0x41c>
 80047c2:	e045      	b.n	8004850 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047c4:	4b27      	ldr	r3, [pc, #156]	; (8004864 <HAL_RCC_OscConfig+0x4dc>)
 80047c6:	2200      	movs	r2, #0
 80047c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ca:	f7fe f9df 	bl	8002b8c <HAL_GetTick>
 80047ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047d0:	e008      	b.n	80047e4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047d2:	f7fe f9db 	bl	8002b8c <HAL_GetTick>
 80047d6:	4602      	mov	r2, r0
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	2b02      	cmp	r3, #2
 80047de:	d901      	bls.n	80047e4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80047e0:	2303      	movs	r3, #3
 80047e2:	e036      	b.n	8004852 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047e4:	4b1e      	ldr	r3, [pc, #120]	; (8004860 <HAL_RCC_OscConfig+0x4d8>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d1f0      	bne.n	80047d2 <HAL_RCC_OscConfig+0x44a>
 80047f0:	e02e      	b.n	8004850 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	699b      	ldr	r3, [r3, #24]
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d101      	bne.n	80047fe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e029      	b.n	8004852 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047fe:	4b18      	ldr	r3, [pc, #96]	; (8004860 <HAL_RCC_OscConfig+0x4d8>)
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	69db      	ldr	r3, [r3, #28]
 800480e:	429a      	cmp	r2, r3
 8004810:	d11c      	bne.n	800484c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800481c:	429a      	cmp	r2, r3
 800481e:	d115      	bne.n	800484c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004820:	68fa      	ldr	r2, [r7, #12]
 8004822:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004826:	4013      	ands	r3, r2
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800482c:	4293      	cmp	r3, r2
 800482e:	d10d      	bne.n	800484c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800483a:	429a      	cmp	r2, r3
 800483c:	d106      	bne.n	800484c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004848:	429a      	cmp	r2, r3
 800484a:	d001      	beq.n	8004850 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e000      	b.n	8004852 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004850:	2300      	movs	r3, #0
}
 8004852:	4618      	mov	r0, r3
 8004854:	3718      	adds	r7, #24
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	40007000 	.word	0x40007000
 8004860:	40023800 	.word	0x40023800
 8004864:	42470060 	.word	0x42470060

08004868 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b084      	sub	sp, #16
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d101      	bne.n	800487c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e0cc      	b.n	8004a16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800487c:	4b68      	ldr	r3, [pc, #416]	; (8004a20 <HAL_RCC_ClockConfig+0x1b8>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 030f 	and.w	r3, r3, #15
 8004884:	683a      	ldr	r2, [r7, #0]
 8004886:	429a      	cmp	r2, r3
 8004888:	d90c      	bls.n	80048a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800488a:	4b65      	ldr	r3, [pc, #404]	; (8004a20 <HAL_RCC_ClockConfig+0x1b8>)
 800488c:	683a      	ldr	r2, [r7, #0]
 800488e:	b2d2      	uxtb	r2, r2
 8004890:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004892:	4b63      	ldr	r3, [pc, #396]	; (8004a20 <HAL_RCC_ClockConfig+0x1b8>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 030f 	and.w	r3, r3, #15
 800489a:	683a      	ldr	r2, [r7, #0]
 800489c:	429a      	cmp	r2, r3
 800489e:	d001      	beq.n	80048a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e0b8      	b.n	8004a16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0302 	and.w	r3, r3, #2
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d020      	beq.n	80048f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0304 	and.w	r3, r3, #4
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d005      	beq.n	80048c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048bc:	4b59      	ldr	r3, [pc, #356]	; (8004a24 <HAL_RCC_ClockConfig+0x1bc>)
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	4a58      	ldr	r2, [pc, #352]	; (8004a24 <HAL_RCC_ClockConfig+0x1bc>)
 80048c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80048c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 0308 	and.w	r3, r3, #8
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d005      	beq.n	80048e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048d4:	4b53      	ldr	r3, [pc, #332]	; (8004a24 <HAL_RCC_ClockConfig+0x1bc>)
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	4a52      	ldr	r2, [pc, #328]	; (8004a24 <HAL_RCC_ClockConfig+0x1bc>)
 80048da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80048de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048e0:	4b50      	ldr	r3, [pc, #320]	; (8004a24 <HAL_RCC_ClockConfig+0x1bc>)
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	494d      	ldr	r1, [pc, #308]	; (8004a24 <HAL_RCC_ClockConfig+0x1bc>)
 80048ee:	4313      	orrs	r3, r2
 80048f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 0301 	and.w	r3, r3, #1
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d044      	beq.n	8004988 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	2b01      	cmp	r3, #1
 8004904:	d107      	bne.n	8004916 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004906:	4b47      	ldr	r3, [pc, #284]	; (8004a24 <HAL_RCC_ClockConfig+0x1bc>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d119      	bne.n	8004946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e07f      	b.n	8004a16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	2b02      	cmp	r3, #2
 800491c:	d003      	beq.n	8004926 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004922:	2b03      	cmp	r3, #3
 8004924:	d107      	bne.n	8004936 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004926:	4b3f      	ldr	r3, [pc, #252]	; (8004a24 <HAL_RCC_ClockConfig+0x1bc>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d109      	bne.n	8004946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e06f      	b.n	8004a16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004936:	4b3b      	ldr	r3, [pc, #236]	; (8004a24 <HAL_RCC_ClockConfig+0x1bc>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0302 	and.w	r3, r3, #2
 800493e:	2b00      	cmp	r3, #0
 8004940:	d101      	bne.n	8004946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e067      	b.n	8004a16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004946:	4b37      	ldr	r3, [pc, #220]	; (8004a24 <HAL_RCC_ClockConfig+0x1bc>)
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	f023 0203 	bic.w	r2, r3, #3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	4934      	ldr	r1, [pc, #208]	; (8004a24 <HAL_RCC_ClockConfig+0x1bc>)
 8004954:	4313      	orrs	r3, r2
 8004956:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004958:	f7fe f918 	bl	8002b8c <HAL_GetTick>
 800495c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800495e:	e00a      	b.n	8004976 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004960:	f7fe f914 	bl	8002b8c <HAL_GetTick>
 8004964:	4602      	mov	r2, r0
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	f241 3288 	movw	r2, #5000	; 0x1388
 800496e:	4293      	cmp	r3, r2
 8004970:	d901      	bls.n	8004976 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e04f      	b.n	8004a16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004976:	4b2b      	ldr	r3, [pc, #172]	; (8004a24 <HAL_RCC_ClockConfig+0x1bc>)
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	f003 020c 	and.w	r2, r3, #12
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	429a      	cmp	r2, r3
 8004986:	d1eb      	bne.n	8004960 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004988:	4b25      	ldr	r3, [pc, #148]	; (8004a20 <HAL_RCC_ClockConfig+0x1b8>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 030f 	and.w	r3, r3, #15
 8004990:	683a      	ldr	r2, [r7, #0]
 8004992:	429a      	cmp	r2, r3
 8004994:	d20c      	bcs.n	80049b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004996:	4b22      	ldr	r3, [pc, #136]	; (8004a20 <HAL_RCC_ClockConfig+0x1b8>)
 8004998:	683a      	ldr	r2, [r7, #0]
 800499a:	b2d2      	uxtb	r2, r2
 800499c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800499e:	4b20      	ldr	r3, [pc, #128]	; (8004a20 <HAL_RCC_ClockConfig+0x1b8>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 030f 	and.w	r3, r3, #15
 80049a6:	683a      	ldr	r2, [r7, #0]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d001      	beq.n	80049b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e032      	b.n	8004a16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0304 	and.w	r3, r3, #4
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d008      	beq.n	80049ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049bc:	4b19      	ldr	r3, [pc, #100]	; (8004a24 <HAL_RCC_ClockConfig+0x1bc>)
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	4916      	ldr	r1, [pc, #88]	; (8004a24 <HAL_RCC_ClockConfig+0x1bc>)
 80049ca:	4313      	orrs	r3, r2
 80049cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0308 	and.w	r3, r3, #8
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d009      	beq.n	80049ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049da:	4b12      	ldr	r3, [pc, #72]	; (8004a24 <HAL_RCC_ClockConfig+0x1bc>)
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	691b      	ldr	r3, [r3, #16]
 80049e6:	00db      	lsls	r3, r3, #3
 80049e8:	490e      	ldr	r1, [pc, #56]	; (8004a24 <HAL_RCC_ClockConfig+0x1bc>)
 80049ea:	4313      	orrs	r3, r2
 80049ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80049ee:	f000 f821 	bl	8004a34 <HAL_RCC_GetSysClockFreq>
 80049f2:	4601      	mov	r1, r0
 80049f4:	4b0b      	ldr	r3, [pc, #44]	; (8004a24 <HAL_RCC_ClockConfig+0x1bc>)
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	091b      	lsrs	r3, r3, #4
 80049fa:	f003 030f 	and.w	r3, r3, #15
 80049fe:	4a0a      	ldr	r2, [pc, #40]	; (8004a28 <HAL_RCC_ClockConfig+0x1c0>)
 8004a00:	5cd3      	ldrb	r3, [r2, r3]
 8004a02:	fa21 f303 	lsr.w	r3, r1, r3
 8004a06:	4a09      	ldr	r2, [pc, #36]	; (8004a2c <HAL_RCC_ClockConfig+0x1c4>)
 8004a08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a0a:	4b09      	ldr	r3, [pc, #36]	; (8004a30 <HAL_RCC_ClockConfig+0x1c8>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f7fe f878 	bl	8002b04 <HAL_InitTick>

  return HAL_OK;
 8004a14:	2300      	movs	r3, #0
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3710      	adds	r7, #16
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	40023c00 	.word	0x40023c00
 8004a24:	40023800 	.word	0x40023800
 8004a28:	08009488 	.word	0x08009488
 8004a2c:	2000000c 	.word	0x2000000c
 8004a30:	20000010 	.word	0x20000010

08004a34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a36:	b085      	sub	sp, #20
 8004a38:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	607b      	str	r3, [r7, #4]
 8004a3e:	2300      	movs	r3, #0
 8004a40:	60fb      	str	r3, [r7, #12]
 8004a42:	2300      	movs	r3, #0
 8004a44:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004a46:	2300      	movs	r3, #0
 8004a48:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a4a:	4b50      	ldr	r3, [pc, #320]	; (8004b8c <HAL_RCC_GetSysClockFreq+0x158>)
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	f003 030c 	and.w	r3, r3, #12
 8004a52:	2b04      	cmp	r3, #4
 8004a54:	d007      	beq.n	8004a66 <HAL_RCC_GetSysClockFreq+0x32>
 8004a56:	2b08      	cmp	r3, #8
 8004a58:	d008      	beq.n	8004a6c <HAL_RCC_GetSysClockFreq+0x38>
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	f040 808d 	bne.w	8004b7a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a60:	4b4b      	ldr	r3, [pc, #300]	; (8004b90 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004a62:	60bb      	str	r3, [r7, #8]
       break;
 8004a64:	e08c      	b.n	8004b80 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a66:	4b4b      	ldr	r3, [pc, #300]	; (8004b94 <HAL_RCC_GetSysClockFreq+0x160>)
 8004a68:	60bb      	str	r3, [r7, #8]
      break;
 8004a6a:	e089      	b.n	8004b80 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a6c:	4b47      	ldr	r3, [pc, #284]	; (8004b8c <HAL_RCC_GetSysClockFreq+0x158>)
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a74:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a76:	4b45      	ldr	r3, [pc, #276]	; (8004b8c <HAL_RCC_GetSysClockFreq+0x158>)
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d023      	beq.n	8004aca <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a82:	4b42      	ldr	r3, [pc, #264]	; (8004b8c <HAL_RCC_GetSysClockFreq+0x158>)
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	099b      	lsrs	r3, r3, #6
 8004a88:	f04f 0400 	mov.w	r4, #0
 8004a8c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004a90:	f04f 0200 	mov.w	r2, #0
 8004a94:	ea03 0501 	and.w	r5, r3, r1
 8004a98:	ea04 0602 	and.w	r6, r4, r2
 8004a9c:	4a3d      	ldr	r2, [pc, #244]	; (8004b94 <HAL_RCC_GetSysClockFreq+0x160>)
 8004a9e:	fb02 f106 	mul.w	r1, r2, r6
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	fb02 f205 	mul.w	r2, r2, r5
 8004aa8:	440a      	add	r2, r1
 8004aaa:	493a      	ldr	r1, [pc, #232]	; (8004b94 <HAL_RCC_GetSysClockFreq+0x160>)
 8004aac:	fba5 0101 	umull	r0, r1, r5, r1
 8004ab0:	1853      	adds	r3, r2, r1
 8004ab2:	4619      	mov	r1, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f04f 0400 	mov.w	r4, #0
 8004aba:	461a      	mov	r2, r3
 8004abc:	4623      	mov	r3, r4
 8004abe:	f7fc f86f 	bl	8000ba0 <__aeabi_uldivmod>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	460c      	mov	r4, r1
 8004ac6:	60fb      	str	r3, [r7, #12]
 8004ac8:	e049      	b.n	8004b5e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004aca:	4b30      	ldr	r3, [pc, #192]	; (8004b8c <HAL_RCC_GetSysClockFreq+0x158>)
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	099b      	lsrs	r3, r3, #6
 8004ad0:	f04f 0400 	mov.w	r4, #0
 8004ad4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004ad8:	f04f 0200 	mov.w	r2, #0
 8004adc:	ea03 0501 	and.w	r5, r3, r1
 8004ae0:	ea04 0602 	and.w	r6, r4, r2
 8004ae4:	4629      	mov	r1, r5
 8004ae6:	4632      	mov	r2, r6
 8004ae8:	f04f 0300 	mov.w	r3, #0
 8004aec:	f04f 0400 	mov.w	r4, #0
 8004af0:	0154      	lsls	r4, r2, #5
 8004af2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004af6:	014b      	lsls	r3, r1, #5
 8004af8:	4619      	mov	r1, r3
 8004afa:	4622      	mov	r2, r4
 8004afc:	1b49      	subs	r1, r1, r5
 8004afe:	eb62 0206 	sbc.w	r2, r2, r6
 8004b02:	f04f 0300 	mov.w	r3, #0
 8004b06:	f04f 0400 	mov.w	r4, #0
 8004b0a:	0194      	lsls	r4, r2, #6
 8004b0c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004b10:	018b      	lsls	r3, r1, #6
 8004b12:	1a5b      	subs	r3, r3, r1
 8004b14:	eb64 0402 	sbc.w	r4, r4, r2
 8004b18:	f04f 0100 	mov.w	r1, #0
 8004b1c:	f04f 0200 	mov.w	r2, #0
 8004b20:	00e2      	lsls	r2, r4, #3
 8004b22:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004b26:	00d9      	lsls	r1, r3, #3
 8004b28:	460b      	mov	r3, r1
 8004b2a:	4614      	mov	r4, r2
 8004b2c:	195b      	adds	r3, r3, r5
 8004b2e:	eb44 0406 	adc.w	r4, r4, r6
 8004b32:	f04f 0100 	mov.w	r1, #0
 8004b36:	f04f 0200 	mov.w	r2, #0
 8004b3a:	02a2      	lsls	r2, r4, #10
 8004b3c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004b40:	0299      	lsls	r1, r3, #10
 8004b42:	460b      	mov	r3, r1
 8004b44:	4614      	mov	r4, r2
 8004b46:	4618      	mov	r0, r3
 8004b48:	4621      	mov	r1, r4
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f04f 0400 	mov.w	r4, #0
 8004b50:	461a      	mov	r2, r3
 8004b52:	4623      	mov	r3, r4
 8004b54:	f7fc f824 	bl	8000ba0 <__aeabi_uldivmod>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	460c      	mov	r4, r1
 8004b5c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b5e:	4b0b      	ldr	r3, [pc, #44]	; (8004b8c <HAL_RCC_GetSysClockFreq+0x158>)
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	0c1b      	lsrs	r3, r3, #16
 8004b64:	f003 0303 	and.w	r3, r3, #3
 8004b68:	3301      	adds	r3, #1
 8004b6a:	005b      	lsls	r3, r3, #1
 8004b6c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004b6e:	68fa      	ldr	r2, [r7, #12]
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b76:	60bb      	str	r3, [r7, #8]
      break;
 8004b78:	e002      	b.n	8004b80 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b7a:	4b05      	ldr	r3, [pc, #20]	; (8004b90 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004b7c:	60bb      	str	r3, [r7, #8]
      break;
 8004b7e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b80:	68bb      	ldr	r3, [r7, #8]
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3714      	adds	r7, #20
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	40023800 	.word	0x40023800
 8004b90:	00f42400 	.word	0x00f42400
 8004b94:	017d7840 	.word	0x017d7840

08004b98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b9c:	4b03      	ldr	r3, [pc, #12]	; (8004bac <HAL_RCC_GetHCLKFreq+0x14>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop
 8004bac:	2000000c 	.word	0x2000000c

08004bb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004bb4:	f7ff fff0 	bl	8004b98 <HAL_RCC_GetHCLKFreq>
 8004bb8:	4601      	mov	r1, r0
 8004bba:	4b05      	ldr	r3, [pc, #20]	; (8004bd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	0a9b      	lsrs	r3, r3, #10
 8004bc0:	f003 0307 	and.w	r3, r3, #7
 8004bc4:	4a03      	ldr	r2, [pc, #12]	; (8004bd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bc6:	5cd3      	ldrb	r3, [r2, r3]
 8004bc8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	40023800 	.word	0x40023800
 8004bd4:	08009498 	.word	0x08009498

08004bd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004bdc:	f7ff ffdc 	bl	8004b98 <HAL_RCC_GetHCLKFreq>
 8004be0:	4601      	mov	r1, r0
 8004be2:	4b05      	ldr	r3, [pc, #20]	; (8004bf8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	0b5b      	lsrs	r3, r3, #13
 8004be8:	f003 0307 	and.w	r3, r3, #7
 8004bec:	4a03      	ldr	r2, [pc, #12]	; (8004bfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bee:	5cd3      	ldrb	r3, [r2, r3]
 8004bf0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	40023800 	.word	0x40023800
 8004bfc:	08009498 	.word	0x08009498

08004c00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b082      	sub	sp, #8
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d101      	bne.n	8004c12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e056      	b.n	8004cc0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d106      	bne.n	8004c32 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f7fd f9ad 	bl	8001f8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2202      	movs	r2, #2
 8004c36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c48:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	685a      	ldr	r2, [r3, #4]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	431a      	orrs	r2, r3
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	431a      	orrs	r2, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	431a      	orrs	r2, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	695b      	ldr	r3, [r3, #20]
 8004c64:	431a      	orrs	r2, r3
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	699b      	ldr	r3, [r3, #24]
 8004c6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c6e:	431a      	orrs	r2, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	69db      	ldr	r3, [r3, #28]
 8004c74:	431a      	orrs	r2, r3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a1b      	ldr	r3, [r3, #32]
 8004c7a:	ea42 0103 	orr.w	r1, r2, r3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	430a      	orrs	r2, r1
 8004c88:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	699b      	ldr	r3, [r3, #24]
 8004c8e:	0c1b      	lsrs	r3, r3, #16
 8004c90:	f003 0104 	and.w	r1, r3, #4
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	430a      	orrs	r2, r1
 8004c9e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	69da      	ldr	r2, [r3, #28]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cae:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3708      	adds	r7, #8
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b08c      	sub	sp, #48	; 0x30
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	607a      	str	r2, [r7, #4]
 8004cd4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d101      	bne.n	8004cee <HAL_SPI_TransmitReceive+0x26>
 8004cea:	2302      	movs	r3, #2
 8004cec:	e18a      	b.n	8005004 <HAL_SPI_TransmitReceive+0x33c>
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004cf6:	f7fd ff49 	bl	8002b8c <HAL_GetTick>
 8004cfa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004d0c:	887b      	ldrh	r3, [r7, #2]
 8004d0e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004d10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d00f      	beq.n	8004d38 <HAL_SPI_TransmitReceive+0x70>
 8004d18:	69fb      	ldr	r3, [r7, #28]
 8004d1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d1e:	d107      	bne.n	8004d30 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d103      	bne.n	8004d30 <HAL_SPI_TransmitReceive+0x68>
 8004d28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d2c:	2b04      	cmp	r3, #4
 8004d2e:	d003      	beq.n	8004d38 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004d30:	2302      	movs	r3, #2
 8004d32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004d36:	e15b      	b.n	8004ff0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d005      	beq.n	8004d4a <HAL_SPI_TransmitReceive+0x82>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d002      	beq.n	8004d4a <HAL_SPI_TransmitReceive+0x82>
 8004d44:	887b      	ldrh	r3, [r7, #2]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d103      	bne.n	8004d52 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004d50:	e14e      	b.n	8004ff0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	2b04      	cmp	r3, #4
 8004d5c:	d003      	beq.n	8004d66 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2205      	movs	r2, #5
 8004d62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	887a      	ldrh	r2, [r7, #2]
 8004d76:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	887a      	ldrh	r2, [r7, #2]
 8004d7c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	68ba      	ldr	r2, [r7, #8]
 8004d82:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	887a      	ldrh	r2, [r7, #2]
 8004d88:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	887a      	ldrh	r2, [r7, #2]
 8004d8e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2200      	movs	r2, #0
 8004d94:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004da6:	2b40      	cmp	r3, #64	; 0x40
 8004da8:	d007      	beq.n	8004dba <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004db8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dc2:	d178      	bne.n	8004eb6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d002      	beq.n	8004dd2 <HAL_SPI_TransmitReceive+0x10a>
 8004dcc:	8b7b      	ldrh	r3, [r7, #26]
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d166      	bne.n	8004ea0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd6:	881a      	ldrh	r2, [r3, #0]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004de2:	1c9a      	adds	r2, r3, #2
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	3b01      	subs	r3, #1
 8004df0:	b29a      	uxth	r2, r3
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004df6:	e053      	b.n	8004ea0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	f003 0302 	and.w	r3, r3, #2
 8004e02:	2b02      	cmp	r3, #2
 8004e04:	d11b      	bne.n	8004e3e <HAL_SPI_TransmitReceive+0x176>
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d016      	beq.n	8004e3e <HAL_SPI_TransmitReceive+0x176>
 8004e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d113      	bne.n	8004e3e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e1a:	881a      	ldrh	r2, [r3, #0]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e26:	1c9a      	adds	r2, r3, #2
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	3b01      	subs	r3, #1
 8004e34:	b29a      	uxth	r2, r3
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	f003 0301 	and.w	r3, r3, #1
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d119      	bne.n	8004e80 <HAL_SPI_TransmitReceive+0x1b8>
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d014      	beq.n	8004e80 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	68da      	ldr	r2, [r3, #12]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e60:	b292      	uxth	r2, r2
 8004e62:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e68:	1c9a      	adds	r2, r3, #2
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	3b01      	subs	r3, #1
 8004e76:	b29a      	uxth	r2, r3
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004e80:	f7fd fe84 	bl	8002b8c <HAL_GetTick>
 8004e84:	4602      	mov	r2, r0
 8004e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d807      	bhi.n	8004ea0 <HAL_SPI_TransmitReceive+0x1d8>
 8004e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e96:	d003      	beq.n	8004ea0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004e9e:	e0a7      	b.n	8004ff0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d1a6      	bne.n	8004df8 <HAL_SPI_TransmitReceive+0x130>
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d1a1      	bne.n	8004df8 <HAL_SPI_TransmitReceive+0x130>
 8004eb4:	e07c      	b.n	8004fb0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d002      	beq.n	8004ec4 <HAL_SPI_TransmitReceive+0x1fc>
 8004ebe:	8b7b      	ldrh	r3, [r7, #26]
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d16b      	bne.n	8004f9c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	330c      	adds	r3, #12
 8004ece:	7812      	ldrb	r2, [r2, #0]
 8004ed0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed6:	1c5a      	adds	r2, r3, #1
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	3b01      	subs	r3, #1
 8004ee4:	b29a      	uxth	r2, r3
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004eea:	e057      	b.n	8004f9c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f003 0302 	and.w	r3, r3, #2
 8004ef6:	2b02      	cmp	r3, #2
 8004ef8:	d11c      	bne.n	8004f34 <HAL_SPI_TransmitReceive+0x26c>
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d017      	beq.n	8004f34 <HAL_SPI_TransmitReceive+0x26c>
 8004f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d114      	bne.n	8004f34 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	330c      	adds	r3, #12
 8004f14:	7812      	ldrb	r2, [r2, #0]
 8004f16:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f1c:	1c5a      	adds	r2, r3, #1
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	3b01      	subs	r3, #1
 8004f2a:	b29a      	uxth	r2, r3
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f30:	2300      	movs	r3, #0
 8004f32:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	f003 0301 	and.w	r3, r3, #1
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d119      	bne.n	8004f76 <HAL_SPI_TransmitReceive+0x2ae>
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d014      	beq.n	8004f76 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	68da      	ldr	r2, [r3, #12]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f56:	b2d2      	uxtb	r2, r2
 8004f58:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f5e:	1c5a      	adds	r2, r3, #1
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	b29a      	uxth	r2, r3
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f72:	2301      	movs	r3, #1
 8004f74:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004f76:	f7fd fe09 	bl	8002b8c <HAL_GetTick>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d803      	bhi.n	8004f8e <HAL_SPI_TransmitReceive+0x2c6>
 8004f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f8c:	d102      	bne.n	8004f94 <HAL_SPI_TransmitReceive+0x2cc>
 8004f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d103      	bne.n	8004f9c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004f94:	2303      	movs	r3, #3
 8004f96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004f9a:	e029      	b.n	8004ff0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d1a2      	bne.n	8004eec <HAL_SPI_TransmitReceive+0x224>
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d19d      	bne.n	8004eec <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004fb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fb2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004fb4:	68f8      	ldr	r0, [r7, #12]
 8004fb6:	f000 f893 	bl	80050e0 <SPI_EndRxTxTransaction>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d006      	beq.n	8004fce <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2220      	movs	r2, #32
 8004fca:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004fcc:	e010      	b.n	8004ff0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d10b      	bne.n	8004fee <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	617b      	str	r3, [r7, #20]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	617b      	str	r3, [r7, #20]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	617b      	str	r3, [r7, #20]
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	e000      	b.n	8004ff0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004fee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005000:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005004:	4618      	mov	r0, r3
 8005006:	3730      	adds	r7, #48	; 0x30
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}

0800500c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	603b      	str	r3, [r7, #0]
 8005018:	4613      	mov	r3, r2
 800501a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800501c:	e04c      	b.n	80050b8 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005024:	d048      	beq.n	80050b8 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005026:	f7fd fdb1 	bl	8002b8c <HAL_GetTick>
 800502a:	4602      	mov	r2, r0
 800502c:	69bb      	ldr	r3, [r7, #24]
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	683a      	ldr	r2, [r7, #0]
 8005032:	429a      	cmp	r2, r3
 8005034:	d902      	bls.n	800503c <SPI_WaitFlagStateUntilTimeout+0x30>
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d13d      	bne.n	80050b8 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	685a      	ldr	r2, [r3, #4]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800504a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005054:	d111      	bne.n	800507a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800505e:	d004      	beq.n	800506a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005068:	d107      	bne.n	800507a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005078:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800507e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005082:	d10f      	bne.n	80050a4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005092:	601a      	str	r2, [r3, #0]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050a2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80050b4:	2303      	movs	r3, #3
 80050b6:	e00f      	b.n	80050d8 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	689a      	ldr	r2, [r3, #8]
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	4013      	ands	r3, r2
 80050c2:	68ba      	ldr	r2, [r7, #8]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	bf0c      	ite	eq
 80050c8:	2301      	moveq	r3, #1
 80050ca:	2300      	movne	r3, #0
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	461a      	mov	r2, r3
 80050d0:	79fb      	ldrb	r3, [r7, #7]
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d1a3      	bne.n	800501e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80050d6:	2300      	movs	r3, #0
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3710      	adds	r7, #16
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}

080050e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b088      	sub	sp, #32
 80050e4:	af02      	add	r7, sp, #8
 80050e6:	60f8      	str	r0, [r7, #12]
 80050e8:	60b9      	str	r1, [r7, #8]
 80050ea:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80050ec:	4b1b      	ldr	r3, [pc, #108]	; (800515c <SPI_EndRxTxTransaction+0x7c>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a1b      	ldr	r2, [pc, #108]	; (8005160 <SPI_EndRxTxTransaction+0x80>)
 80050f2:	fba2 2303 	umull	r2, r3, r2, r3
 80050f6:	0d5b      	lsrs	r3, r3, #21
 80050f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80050fc:	fb02 f303 	mul.w	r3, r2, r3
 8005100:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800510a:	d112      	bne.n	8005132 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	9300      	str	r3, [sp, #0]
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	2200      	movs	r2, #0
 8005114:	2180      	movs	r1, #128	; 0x80
 8005116:	68f8      	ldr	r0, [r7, #12]
 8005118:	f7ff ff78 	bl	800500c <SPI_WaitFlagStateUntilTimeout>
 800511c:	4603      	mov	r3, r0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d016      	beq.n	8005150 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005126:	f043 0220 	orr.w	r2, r3, #32
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	e00f      	b.n	8005152 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d00a      	beq.n	800514e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	3b01      	subs	r3, #1
 800513c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005148:	2b80      	cmp	r3, #128	; 0x80
 800514a:	d0f2      	beq.n	8005132 <SPI_EndRxTxTransaction+0x52>
 800514c:	e000      	b.n	8005150 <SPI_EndRxTxTransaction+0x70>
        break;
 800514e:	bf00      	nop
  }

  return HAL_OK;
 8005150:	2300      	movs	r3, #0
}
 8005152:	4618      	mov	r0, r3
 8005154:	3718      	adds	r7, #24
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	2000000c 	.word	0x2000000c
 8005160:	165e9f81 	.word	0x165e9f81

08005164 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b082      	sub	sp, #8
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d101      	bne.n	8005176 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e01d      	b.n	80051b2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800517c:	b2db      	uxtb	r3, r3
 800517e:	2b00      	cmp	r3, #0
 8005180:	d106      	bne.n	8005190 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f7fd fa1a 	bl	80025c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2202      	movs	r2, #2
 8005194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	3304      	adds	r3, #4
 80051a0:	4619      	mov	r1, r3
 80051a2:	4610      	mov	r0, r2
 80051a4:	f000 fb20 	bl	80057e8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3708      	adds	r7, #8
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}

080051ba <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80051ba:	b580      	push	{r7, lr}
 80051bc:	b082      	sub	sp, #8
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d101      	bne.n	80051cc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	e01d      	b.n	8005208 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d106      	bne.n	80051e6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f7fd fa2b 	bl	800263c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2202      	movs	r2, #2
 80051ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	3304      	adds	r3, #4
 80051f6:	4619      	mov	r1, r3
 80051f8:	4610      	mov	r0, r2
 80051fa:	f000 faf5 	bl	80057e8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2201      	movs	r2, #1
 8005202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005206:	2300      	movs	r3, #0
}
 8005208:	4618      	mov	r0, r3
 800520a:	3708      	adds	r7, #8
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	2201      	movs	r2, #1
 8005220:	6839      	ldr	r1, [r7, #0]
 8005222:	4618      	mov	r0, r3
 8005224:	f000 fdca 	bl	8005dbc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a15      	ldr	r2, [pc, #84]	; (8005284 <HAL_TIM_PWM_Start+0x74>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d004      	beq.n	800523c <HAL_TIM_PWM_Start+0x2c>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a14      	ldr	r2, [pc, #80]	; (8005288 <HAL_TIM_PWM_Start+0x78>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d101      	bne.n	8005240 <HAL_TIM_PWM_Start+0x30>
 800523c:	2301      	movs	r3, #1
 800523e:	e000      	b.n	8005242 <HAL_TIM_PWM_Start+0x32>
 8005240:	2300      	movs	r3, #0
 8005242:	2b00      	cmp	r3, #0
 8005244:	d007      	beq.n	8005256 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005254:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	f003 0307 	and.w	r3, r3, #7
 8005260:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2b06      	cmp	r3, #6
 8005266:	d007      	beq.n	8005278 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f042 0201 	orr.w	r2, r2, #1
 8005276:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005278:	2300      	movs	r3, #0
}
 800527a:	4618      	mov	r0, r3
 800527c:	3710      	adds	r7, #16
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	40010000 	.word	0x40010000
 8005288:	40010400 	.word	0x40010400

0800528c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b082      	sub	sp, #8
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	f003 0302 	and.w	r3, r3, #2
 800529e:	2b02      	cmp	r3, #2
 80052a0:	d122      	bne.n	80052e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	f003 0302 	and.w	r3, r3, #2
 80052ac:	2b02      	cmp	r3, #2
 80052ae:	d11b      	bne.n	80052e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f06f 0202 	mvn.w	r2, #2
 80052b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2201      	movs	r2, #1
 80052be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	699b      	ldr	r3, [r3, #24]
 80052c6:	f003 0303 	and.w	r3, r3, #3
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d003      	beq.n	80052d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 fa6b 	bl	80057aa <HAL_TIM_IC_CaptureCallback>
 80052d4:	e005      	b.n	80052e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f000 fa5d 	bl	8005796 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f000 fa6e 	bl	80057be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	f003 0304 	and.w	r3, r3, #4
 80052f2:	2b04      	cmp	r3, #4
 80052f4:	d122      	bne.n	800533c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	f003 0304 	and.w	r3, r3, #4
 8005300:	2b04      	cmp	r3, #4
 8005302:	d11b      	bne.n	800533c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f06f 0204 	mvn.w	r2, #4
 800530c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2202      	movs	r2, #2
 8005312:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	699b      	ldr	r3, [r3, #24]
 800531a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800531e:	2b00      	cmp	r3, #0
 8005320:	d003      	beq.n	800532a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f000 fa41 	bl	80057aa <HAL_TIM_IC_CaptureCallback>
 8005328:	e005      	b.n	8005336 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 fa33 	bl	8005796 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f000 fa44 	bl	80057be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	f003 0308 	and.w	r3, r3, #8
 8005346:	2b08      	cmp	r3, #8
 8005348:	d122      	bne.n	8005390 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	f003 0308 	and.w	r3, r3, #8
 8005354:	2b08      	cmp	r3, #8
 8005356:	d11b      	bne.n	8005390 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f06f 0208 	mvn.w	r2, #8
 8005360:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2204      	movs	r2, #4
 8005366:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	69db      	ldr	r3, [r3, #28]
 800536e:	f003 0303 	and.w	r3, r3, #3
 8005372:	2b00      	cmp	r3, #0
 8005374:	d003      	beq.n	800537e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 fa17 	bl	80057aa <HAL_TIM_IC_CaptureCallback>
 800537c:	e005      	b.n	800538a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 fa09 	bl	8005796 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f000 fa1a 	bl	80057be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	f003 0310 	and.w	r3, r3, #16
 800539a:	2b10      	cmp	r3, #16
 800539c:	d122      	bne.n	80053e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	f003 0310 	and.w	r3, r3, #16
 80053a8:	2b10      	cmp	r3, #16
 80053aa:	d11b      	bne.n	80053e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f06f 0210 	mvn.w	r2, #16
 80053b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2208      	movs	r2, #8
 80053ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	69db      	ldr	r3, [r3, #28]
 80053c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d003      	beq.n	80053d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 f9ed 	bl	80057aa <HAL_TIM_IC_CaptureCallback>
 80053d0:	e005      	b.n	80053de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 f9df 	bl	8005796 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f000 f9f0 	bl	80057be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	f003 0301 	and.w	r3, r3, #1
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d10e      	bne.n	8005410 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	f003 0301 	and.w	r3, r3, #1
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d107      	bne.n	8005410 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f06f 0201 	mvn.w	r2, #1
 8005408:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f7fc fb16 	bl	8001a3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800541a:	2b80      	cmp	r3, #128	; 0x80
 800541c:	d10e      	bne.n	800543c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005428:	2b80      	cmp	r3, #128	; 0x80
 800542a:	d107      	bne.n	800543c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005434:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 fdbe 	bl	8005fb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005446:	2b40      	cmp	r3, #64	; 0x40
 8005448:	d10e      	bne.n	8005468 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005454:	2b40      	cmp	r3, #64	; 0x40
 8005456:	d107      	bne.n	8005468 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005460:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f000 f9b5 	bl	80057d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	691b      	ldr	r3, [r3, #16]
 800546e:	f003 0320 	and.w	r3, r3, #32
 8005472:	2b20      	cmp	r3, #32
 8005474:	d10e      	bne.n	8005494 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	f003 0320 	and.w	r3, r3, #32
 8005480:	2b20      	cmp	r3, #32
 8005482:	d107      	bne.n	8005494 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f06f 0220 	mvn.w	r2, #32
 800548c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 fd88 	bl	8005fa4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005494:	bf00      	nop
 8005496:	3708      	adds	r7, #8
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}

0800549c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	60b9      	str	r1, [r7, #8]
 80054a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d101      	bne.n	80054b6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80054b2:	2302      	movs	r3, #2
 80054b4:	e0b4      	b.n	8005620 <HAL_TIM_PWM_ConfigChannel+0x184>
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2201      	movs	r2, #1
 80054ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2202      	movs	r2, #2
 80054c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2b0c      	cmp	r3, #12
 80054ca:	f200 809f 	bhi.w	800560c <HAL_TIM_PWM_ConfigChannel+0x170>
 80054ce:	a201      	add	r2, pc, #4	; (adr r2, 80054d4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80054d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d4:	08005509 	.word	0x08005509
 80054d8:	0800560d 	.word	0x0800560d
 80054dc:	0800560d 	.word	0x0800560d
 80054e0:	0800560d 	.word	0x0800560d
 80054e4:	08005549 	.word	0x08005549
 80054e8:	0800560d 	.word	0x0800560d
 80054ec:	0800560d 	.word	0x0800560d
 80054f0:	0800560d 	.word	0x0800560d
 80054f4:	0800558b 	.word	0x0800558b
 80054f8:	0800560d 	.word	0x0800560d
 80054fc:	0800560d 	.word	0x0800560d
 8005500:	0800560d 	.word	0x0800560d
 8005504:	080055cb 	.word	0x080055cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	68b9      	ldr	r1, [r7, #8]
 800550e:	4618      	mov	r0, r3
 8005510:	f000 fa0a 	bl	8005928 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	699a      	ldr	r2, [r3, #24]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f042 0208 	orr.w	r2, r2, #8
 8005522:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	699a      	ldr	r2, [r3, #24]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f022 0204 	bic.w	r2, r2, #4
 8005532:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	6999      	ldr	r1, [r3, #24]
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	691a      	ldr	r2, [r3, #16]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	430a      	orrs	r2, r1
 8005544:	619a      	str	r2, [r3, #24]
      break;
 8005546:	e062      	b.n	800560e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	68b9      	ldr	r1, [r7, #8]
 800554e:	4618      	mov	r0, r3
 8005550:	f000 fa5a 	bl	8005a08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	699a      	ldr	r2, [r3, #24]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005562:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	699a      	ldr	r2, [r3, #24]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005572:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	6999      	ldr	r1, [r3, #24]
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	691b      	ldr	r3, [r3, #16]
 800557e:	021a      	lsls	r2, r3, #8
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	430a      	orrs	r2, r1
 8005586:	619a      	str	r2, [r3, #24]
      break;
 8005588:	e041      	b.n	800560e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	68b9      	ldr	r1, [r7, #8]
 8005590:	4618      	mov	r0, r3
 8005592:	f000 faaf 	bl	8005af4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	69da      	ldr	r2, [r3, #28]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f042 0208 	orr.w	r2, r2, #8
 80055a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	69da      	ldr	r2, [r3, #28]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f022 0204 	bic.w	r2, r2, #4
 80055b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	69d9      	ldr	r1, [r3, #28]
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	691a      	ldr	r2, [r3, #16]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	430a      	orrs	r2, r1
 80055c6:	61da      	str	r2, [r3, #28]
      break;
 80055c8:	e021      	b.n	800560e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	68b9      	ldr	r1, [r7, #8]
 80055d0:	4618      	mov	r0, r3
 80055d2:	f000 fb03 	bl	8005bdc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	69da      	ldr	r2, [r3, #28]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	69da      	ldr	r2, [r3, #28]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	69d9      	ldr	r1, [r3, #28]
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	691b      	ldr	r3, [r3, #16]
 8005600:	021a      	lsls	r2, r3, #8
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	430a      	orrs	r2, r1
 8005608:	61da      	str	r2, [r3, #28]
      break;
 800560a:	e000      	b.n	800560e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800560c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2201      	movs	r2, #1
 8005612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2200      	movs	r2, #0
 800561a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800561e:	2300      	movs	r3, #0
}
 8005620:	4618      	mov	r0, r3
 8005622:	3710      	adds	r7, #16
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}

08005628 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b084      	sub	sp, #16
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005638:	2b01      	cmp	r3, #1
 800563a:	d101      	bne.n	8005640 <HAL_TIM_ConfigClockSource+0x18>
 800563c:	2302      	movs	r3, #2
 800563e:	e0a6      	b.n	800578e <HAL_TIM_ConfigClockSource+0x166>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2201      	movs	r2, #1
 8005644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2202      	movs	r2, #2
 800564c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800565e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005666:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	68fa      	ldr	r2, [r7, #12]
 800566e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	2b40      	cmp	r3, #64	; 0x40
 8005676:	d067      	beq.n	8005748 <HAL_TIM_ConfigClockSource+0x120>
 8005678:	2b40      	cmp	r3, #64	; 0x40
 800567a:	d80b      	bhi.n	8005694 <HAL_TIM_ConfigClockSource+0x6c>
 800567c:	2b10      	cmp	r3, #16
 800567e:	d073      	beq.n	8005768 <HAL_TIM_ConfigClockSource+0x140>
 8005680:	2b10      	cmp	r3, #16
 8005682:	d802      	bhi.n	800568a <HAL_TIM_ConfigClockSource+0x62>
 8005684:	2b00      	cmp	r3, #0
 8005686:	d06f      	beq.n	8005768 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005688:	e078      	b.n	800577c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800568a:	2b20      	cmp	r3, #32
 800568c:	d06c      	beq.n	8005768 <HAL_TIM_ConfigClockSource+0x140>
 800568e:	2b30      	cmp	r3, #48	; 0x30
 8005690:	d06a      	beq.n	8005768 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005692:	e073      	b.n	800577c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005694:	2b70      	cmp	r3, #112	; 0x70
 8005696:	d00d      	beq.n	80056b4 <HAL_TIM_ConfigClockSource+0x8c>
 8005698:	2b70      	cmp	r3, #112	; 0x70
 800569a:	d804      	bhi.n	80056a6 <HAL_TIM_ConfigClockSource+0x7e>
 800569c:	2b50      	cmp	r3, #80	; 0x50
 800569e:	d033      	beq.n	8005708 <HAL_TIM_ConfigClockSource+0xe0>
 80056a0:	2b60      	cmp	r3, #96	; 0x60
 80056a2:	d041      	beq.n	8005728 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80056a4:	e06a      	b.n	800577c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80056a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056aa:	d066      	beq.n	800577a <HAL_TIM_ConfigClockSource+0x152>
 80056ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056b0:	d017      	beq.n	80056e2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80056b2:	e063      	b.n	800577c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6818      	ldr	r0, [r3, #0]
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	6899      	ldr	r1, [r3, #8]
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	685a      	ldr	r2, [r3, #4]
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	f000 fb5a 	bl	8005d7c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80056d6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	68fa      	ldr	r2, [r7, #12]
 80056de:	609a      	str	r2, [r3, #8]
      break;
 80056e0:	e04c      	b.n	800577c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6818      	ldr	r0, [r3, #0]
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	6899      	ldr	r1, [r3, #8]
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	685a      	ldr	r2, [r3, #4]
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	68db      	ldr	r3, [r3, #12]
 80056f2:	f000 fb43 	bl	8005d7c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	689a      	ldr	r2, [r3, #8]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005704:	609a      	str	r2, [r3, #8]
      break;
 8005706:	e039      	b.n	800577c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6818      	ldr	r0, [r3, #0]
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	6859      	ldr	r1, [r3, #4]
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	461a      	mov	r2, r3
 8005716:	f000 fab7 	bl	8005c88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	2150      	movs	r1, #80	; 0x50
 8005720:	4618      	mov	r0, r3
 8005722:	f000 fb10 	bl	8005d46 <TIM_ITRx_SetConfig>
      break;
 8005726:	e029      	b.n	800577c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6818      	ldr	r0, [r3, #0]
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	6859      	ldr	r1, [r3, #4]
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	461a      	mov	r2, r3
 8005736:	f000 fad6 	bl	8005ce6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	2160      	movs	r1, #96	; 0x60
 8005740:	4618      	mov	r0, r3
 8005742:	f000 fb00 	bl	8005d46 <TIM_ITRx_SetConfig>
      break;
 8005746:	e019      	b.n	800577c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6818      	ldr	r0, [r3, #0]
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	6859      	ldr	r1, [r3, #4]
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	461a      	mov	r2, r3
 8005756:	f000 fa97 	bl	8005c88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	2140      	movs	r1, #64	; 0x40
 8005760:	4618      	mov	r0, r3
 8005762:	f000 faf0 	bl	8005d46 <TIM_ITRx_SetConfig>
      break;
 8005766:	e009      	b.n	800577c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4619      	mov	r1, r3
 8005772:	4610      	mov	r0, r2
 8005774:	f000 fae7 	bl	8005d46 <TIM_ITRx_SetConfig>
      break;
 8005778:	e000      	b.n	800577c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800577a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2200      	movs	r2, #0
 8005788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800578c:	2300      	movs	r3, #0
}
 800578e:	4618      	mov	r0, r3
 8005790:	3710      	adds	r7, #16
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}

08005796 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005796:	b480      	push	{r7}
 8005798:	b083      	sub	sp, #12
 800579a:	af00      	add	r7, sp, #0
 800579c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800579e:	bf00      	nop
 80057a0:	370c      	adds	r7, #12
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr

080057aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80057aa:	b480      	push	{r7}
 80057ac:	b083      	sub	sp, #12
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80057b2:	bf00      	nop
 80057b4:	370c      	adds	r7, #12
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr

080057be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80057be:	b480      	push	{r7}
 80057c0:	b083      	sub	sp, #12
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057c6:	bf00      	nop
 80057c8:	370c      	adds	r7, #12
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr

080057d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80057d2:	b480      	push	{r7}
 80057d4:	b083      	sub	sp, #12
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80057da:	bf00      	nop
 80057dc:	370c      	adds	r7, #12
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr
	...

080057e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b085      	sub	sp, #20
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	4a40      	ldr	r2, [pc, #256]	; (80058fc <TIM_Base_SetConfig+0x114>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d013      	beq.n	8005828 <TIM_Base_SetConfig+0x40>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005806:	d00f      	beq.n	8005828 <TIM_Base_SetConfig+0x40>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	4a3d      	ldr	r2, [pc, #244]	; (8005900 <TIM_Base_SetConfig+0x118>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d00b      	beq.n	8005828 <TIM_Base_SetConfig+0x40>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	4a3c      	ldr	r2, [pc, #240]	; (8005904 <TIM_Base_SetConfig+0x11c>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d007      	beq.n	8005828 <TIM_Base_SetConfig+0x40>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	4a3b      	ldr	r2, [pc, #236]	; (8005908 <TIM_Base_SetConfig+0x120>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d003      	beq.n	8005828 <TIM_Base_SetConfig+0x40>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	4a3a      	ldr	r2, [pc, #232]	; (800590c <TIM_Base_SetConfig+0x124>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d108      	bne.n	800583a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800582e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	68fa      	ldr	r2, [r7, #12]
 8005836:	4313      	orrs	r3, r2
 8005838:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4a2f      	ldr	r2, [pc, #188]	; (80058fc <TIM_Base_SetConfig+0x114>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d02b      	beq.n	800589a <TIM_Base_SetConfig+0xb2>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005848:	d027      	beq.n	800589a <TIM_Base_SetConfig+0xb2>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4a2c      	ldr	r2, [pc, #176]	; (8005900 <TIM_Base_SetConfig+0x118>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d023      	beq.n	800589a <TIM_Base_SetConfig+0xb2>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	4a2b      	ldr	r2, [pc, #172]	; (8005904 <TIM_Base_SetConfig+0x11c>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d01f      	beq.n	800589a <TIM_Base_SetConfig+0xb2>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4a2a      	ldr	r2, [pc, #168]	; (8005908 <TIM_Base_SetConfig+0x120>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d01b      	beq.n	800589a <TIM_Base_SetConfig+0xb2>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	4a29      	ldr	r2, [pc, #164]	; (800590c <TIM_Base_SetConfig+0x124>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d017      	beq.n	800589a <TIM_Base_SetConfig+0xb2>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a28      	ldr	r2, [pc, #160]	; (8005910 <TIM_Base_SetConfig+0x128>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d013      	beq.n	800589a <TIM_Base_SetConfig+0xb2>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a27      	ldr	r2, [pc, #156]	; (8005914 <TIM_Base_SetConfig+0x12c>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d00f      	beq.n	800589a <TIM_Base_SetConfig+0xb2>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a26      	ldr	r2, [pc, #152]	; (8005918 <TIM_Base_SetConfig+0x130>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d00b      	beq.n	800589a <TIM_Base_SetConfig+0xb2>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a25      	ldr	r2, [pc, #148]	; (800591c <TIM_Base_SetConfig+0x134>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d007      	beq.n	800589a <TIM_Base_SetConfig+0xb2>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a24      	ldr	r2, [pc, #144]	; (8005920 <TIM_Base_SetConfig+0x138>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d003      	beq.n	800589a <TIM_Base_SetConfig+0xb2>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a23      	ldr	r2, [pc, #140]	; (8005924 <TIM_Base_SetConfig+0x13c>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d108      	bne.n	80058ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	68fa      	ldr	r2, [r7, #12]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	695b      	ldr	r3, [r3, #20]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	68fa      	ldr	r2, [r7, #12]
 80058be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	689a      	ldr	r2, [r3, #8]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a0a      	ldr	r2, [pc, #40]	; (80058fc <TIM_Base_SetConfig+0x114>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d003      	beq.n	80058e0 <TIM_Base_SetConfig+0xf8>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4a0c      	ldr	r2, [pc, #48]	; (800590c <TIM_Base_SetConfig+0x124>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d103      	bne.n	80058e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	691a      	ldr	r2, [r3, #16]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	615a      	str	r2, [r3, #20]
}
 80058ee:	bf00      	nop
 80058f0:	3714      	adds	r7, #20
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr
 80058fa:	bf00      	nop
 80058fc:	40010000 	.word	0x40010000
 8005900:	40000400 	.word	0x40000400
 8005904:	40000800 	.word	0x40000800
 8005908:	40000c00 	.word	0x40000c00
 800590c:	40010400 	.word	0x40010400
 8005910:	40014000 	.word	0x40014000
 8005914:	40014400 	.word	0x40014400
 8005918:	40014800 	.word	0x40014800
 800591c:	40001800 	.word	0x40001800
 8005920:	40001c00 	.word	0x40001c00
 8005924:	40002000 	.word	0x40002000

08005928 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005928:	b480      	push	{r7}
 800592a:	b087      	sub	sp, #28
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6a1b      	ldr	r3, [r3, #32]
 8005936:	f023 0201 	bic.w	r2, r3, #1
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6a1b      	ldr	r3, [r3, #32]
 8005942:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	699b      	ldr	r3, [r3, #24]
 800594e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005956:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f023 0303 	bic.w	r3, r3, #3
 800595e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	68fa      	ldr	r2, [r7, #12]
 8005966:	4313      	orrs	r3, r2
 8005968:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	f023 0302 	bic.w	r3, r3, #2
 8005970:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	697a      	ldr	r2, [r7, #20]
 8005978:	4313      	orrs	r3, r2
 800597a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4a20      	ldr	r2, [pc, #128]	; (8005a00 <TIM_OC1_SetConfig+0xd8>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d003      	beq.n	800598c <TIM_OC1_SetConfig+0x64>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4a1f      	ldr	r2, [pc, #124]	; (8005a04 <TIM_OC1_SetConfig+0xdc>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d10c      	bne.n	80059a6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	f023 0308 	bic.w	r3, r3, #8
 8005992:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	68db      	ldr	r3, [r3, #12]
 8005998:	697a      	ldr	r2, [r7, #20]
 800599a:	4313      	orrs	r3, r2
 800599c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	f023 0304 	bic.w	r3, r3, #4
 80059a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a15      	ldr	r2, [pc, #84]	; (8005a00 <TIM_OC1_SetConfig+0xd8>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d003      	beq.n	80059b6 <TIM_OC1_SetConfig+0x8e>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a14      	ldr	r2, [pc, #80]	; (8005a04 <TIM_OC1_SetConfig+0xdc>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d111      	bne.n	80059da <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	695b      	ldr	r3, [r3, #20]
 80059ca:	693a      	ldr	r2, [r7, #16]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	699b      	ldr	r3, [r3, #24]
 80059d4:	693a      	ldr	r2, [r7, #16]
 80059d6:	4313      	orrs	r3, r2
 80059d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	693a      	ldr	r2, [r7, #16]
 80059de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	68fa      	ldr	r2, [r7, #12]
 80059e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	685a      	ldr	r2, [r3, #4]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	697a      	ldr	r2, [r7, #20]
 80059f2:	621a      	str	r2, [r3, #32]
}
 80059f4:	bf00      	nop
 80059f6:	371c      	adds	r7, #28
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr
 8005a00:	40010000 	.word	0x40010000
 8005a04:	40010400 	.word	0x40010400

08005a08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b087      	sub	sp, #28
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6a1b      	ldr	r3, [r3, #32]
 8005a16:	f023 0210 	bic.w	r2, r3, #16
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6a1b      	ldr	r3, [r3, #32]
 8005a22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	699b      	ldr	r3, [r3, #24]
 8005a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	021b      	lsls	r3, r3, #8
 8005a46:	68fa      	ldr	r2, [r7, #12]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	f023 0320 	bic.w	r3, r3, #32
 8005a52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	011b      	lsls	r3, r3, #4
 8005a5a:	697a      	ldr	r2, [r7, #20]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	4a22      	ldr	r2, [pc, #136]	; (8005aec <TIM_OC2_SetConfig+0xe4>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d003      	beq.n	8005a70 <TIM_OC2_SetConfig+0x68>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	4a21      	ldr	r2, [pc, #132]	; (8005af0 <TIM_OC2_SetConfig+0xe8>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d10d      	bne.n	8005a8c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	011b      	lsls	r3, r3, #4
 8005a7e:	697a      	ldr	r2, [r7, #20]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a8a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	4a17      	ldr	r2, [pc, #92]	; (8005aec <TIM_OC2_SetConfig+0xe4>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d003      	beq.n	8005a9c <TIM_OC2_SetConfig+0x94>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4a16      	ldr	r2, [pc, #88]	; (8005af0 <TIM_OC2_SetConfig+0xe8>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d113      	bne.n	8005ac4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005aa2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005aaa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	695b      	ldr	r3, [r3, #20]
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	693a      	ldr	r2, [r7, #16]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	699b      	ldr	r3, [r3, #24]
 8005abc:	009b      	lsls	r3, r3, #2
 8005abe:	693a      	ldr	r2, [r7, #16]
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	693a      	ldr	r2, [r7, #16]
 8005ac8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	68fa      	ldr	r2, [r7, #12]
 8005ace:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	685a      	ldr	r2, [r3, #4]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	697a      	ldr	r2, [r7, #20]
 8005adc:	621a      	str	r2, [r3, #32]
}
 8005ade:	bf00      	nop
 8005ae0:	371c      	adds	r7, #28
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr
 8005aea:	bf00      	nop
 8005aec:	40010000 	.word	0x40010000
 8005af0:	40010400 	.word	0x40010400

08005af4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b087      	sub	sp, #28
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6a1b      	ldr	r3, [r3, #32]
 8005b02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6a1b      	ldr	r3, [r3, #32]
 8005b0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	69db      	ldr	r3, [r3, #28]
 8005b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f023 0303 	bic.w	r3, r3, #3
 8005b2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	68fa      	ldr	r2, [r7, #12]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	021b      	lsls	r3, r3, #8
 8005b44:	697a      	ldr	r2, [r7, #20]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a21      	ldr	r2, [pc, #132]	; (8005bd4 <TIM_OC3_SetConfig+0xe0>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d003      	beq.n	8005b5a <TIM_OC3_SetConfig+0x66>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a20      	ldr	r2, [pc, #128]	; (8005bd8 <TIM_OC3_SetConfig+0xe4>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d10d      	bne.n	8005b76 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	021b      	lsls	r3, r3, #8
 8005b68:	697a      	ldr	r2, [r7, #20]
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a16      	ldr	r2, [pc, #88]	; (8005bd4 <TIM_OC3_SetConfig+0xe0>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d003      	beq.n	8005b86 <TIM_OC3_SetConfig+0x92>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4a15      	ldr	r2, [pc, #84]	; (8005bd8 <TIM_OC3_SetConfig+0xe4>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d113      	bne.n	8005bae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	695b      	ldr	r3, [r3, #20]
 8005b9a:	011b      	lsls	r3, r3, #4
 8005b9c:	693a      	ldr	r2, [r7, #16]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	699b      	ldr	r3, [r3, #24]
 8005ba6:	011b      	lsls	r3, r3, #4
 8005ba8:	693a      	ldr	r2, [r7, #16]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	693a      	ldr	r2, [r7, #16]
 8005bb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	68fa      	ldr	r2, [r7, #12]
 8005bb8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	685a      	ldr	r2, [r3, #4]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	697a      	ldr	r2, [r7, #20]
 8005bc6:	621a      	str	r2, [r3, #32]
}
 8005bc8:	bf00      	nop
 8005bca:	371c      	adds	r7, #28
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr
 8005bd4:	40010000 	.word	0x40010000
 8005bd8:	40010400 	.word	0x40010400

08005bdc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b087      	sub	sp, #28
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a1b      	ldr	r3, [r3, #32]
 8005bea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6a1b      	ldr	r3, [r3, #32]
 8005bf6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	69db      	ldr	r3, [r3, #28]
 8005c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	021b      	lsls	r3, r3, #8
 8005c1a:	68fa      	ldr	r2, [r7, #12]
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	031b      	lsls	r3, r3, #12
 8005c2e:	693a      	ldr	r2, [r7, #16]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4a12      	ldr	r2, [pc, #72]	; (8005c80 <TIM_OC4_SetConfig+0xa4>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d003      	beq.n	8005c44 <TIM_OC4_SetConfig+0x68>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	4a11      	ldr	r2, [pc, #68]	; (8005c84 <TIM_OC4_SetConfig+0xa8>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d109      	bne.n	8005c58 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	695b      	ldr	r3, [r3, #20]
 8005c50:	019b      	lsls	r3, r3, #6
 8005c52:	697a      	ldr	r2, [r7, #20]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	697a      	ldr	r2, [r7, #20]
 8005c5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	68fa      	ldr	r2, [r7, #12]
 8005c62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	685a      	ldr	r2, [r3, #4]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	693a      	ldr	r2, [r7, #16]
 8005c70:	621a      	str	r2, [r3, #32]
}
 8005c72:	bf00      	nop
 8005c74:	371c      	adds	r7, #28
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr
 8005c7e:	bf00      	nop
 8005c80:	40010000 	.word	0x40010000
 8005c84:	40010400 	.word	0x40010400

08005c88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b087      	sub	sp, #28
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	60f8      	str	r0, [r7, #12]
 8005c90:	60b9      	str	r1, [r7, #8]
 8005c92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6a1b      	ldr	r3, [r3, #32]
 8005c98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	6a1b      	ldr	r3, [r3, #32]
 8005c9e:	f023 0201 	bic.w	r2, r3, #1
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	699b      	ldr	r3, [r3, #24]
 8005caa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005cb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	011b      	lsls	r3, r3, #4
 8005cb8:	693a      	ldr	r2, [r7, #16]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	f023 030a 	bic.w	r3, r3, #10
 8005cc4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005cc6:	697a      	ldr	r2, [r7, #20]
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	693a      	ldr	r2, [r7, #16]
 8005cd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	697a      	ldr	r2, [r7, #20]
 8005cd8:	621a      	str	r2, [r3, #32]
}
 8005cda:	bf00      	nop
 8005cdc:	371c      	adds	r7, #28
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce4:	4770      	bx	lr

08005ce6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ce6:	b480      	push	{r7}
 8005ce8:	b087      	sub	sp, #28
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	60f8      	str	r0, [r7, #12]
 8005cee:	60b9      	str	r1, [r7, #8]
 8005cf0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	6a1b      	ldr	r3, [r3, #32]
 8005cf6:	f023 0210 	bic.w	r2, r3, #16
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	699b      	ldr	r3, [r3, #24]
 8005d02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6a1b      	ldr	r3, [r3, #32]
 8005d08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	031b      	lsls	r3, r3, #12
 8005d16:	697a      	ldr	r2, [r7, #20]
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d22:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	011b      	lsls	r3, r3, #4
 8005d28:	693a      	ldr	r2, [r7, #16]
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	697a      	ldr	r2, [r7, #20]
 8005d32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	693a      	ldr	r2, [r7, #16]
 8005d38:	621a      	str	r2, [r3, #32]
}
 8005d3a:	bf00      	nop
 8005d3c:	371c      	adds	r7, #28
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr

08005d46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d46:	b480      	push	{r7}
 8005d48:	b085      	sub	sp, #20
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
 8005d4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d5e:	683a      	ldr	r2, [r7, #0]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	f043 0307 	orr.w	r3, r3, #7
 8005d68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	68fa      	ldr	r2, [r7, #12]
 8005d6e:	609a      	str	r2, [r3, #8]
}
 8005d70:	bf00      	nop
 8005d72:	3714      	adds	r7, #20
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr

08005d7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b087      	sub	sp, #28
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	60b9      	str	r1, [r7, #8]
 8005d86:	607a      	str	r2, [r7, #4]
 8005d88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	021a      	lsls	r2, r3, #8
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	431a      	orrs	r2, r3
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	697a      	ldr	r2, [r7, #20]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	697a      	ldr	r2, [r7, #20]
 8005dae:	609a      	str	r2, [r3, #8]
}
 8005db0:	bf00      	nop
 8005db2:	371c      	adds	r7, #28
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b087      	sub	sp, #28
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	60b9      	str	r1, [r7, #8]
 8005dc6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	f003 031f 	and.w	r3, r3, #31
 8005dce:	2201      	movs	r2, #1
 8005dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	6a1a      	ldr	r2, [r3, #32]
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	43db      	mvns	r3, r3
 8005dde:	401a      	ands	r2, r3
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	6a1a      	ldr	r2, [r3, #32]
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	f003 031f 	and.w	r3, r3, #31
 8005dee:	6879      	ldr	r1, [r7, #4]
 8005df0:	fa01 f303 	lsl.w	r3, r1, r3
 8005df4:	431a      	orrs	r2, r3
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	621a      	str	r2, [r3, #32]
}
 8005dfa:	bf00      	nop
 8005dfc:	371c      	adds	r7, #28
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr
	...

08005e08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b085      	sub	sp, #20
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d101      	bne.n	8005e20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e1c:	2302      	movs	r3, #2
 8005e1e:	e05a      	b.n	8005ed6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2202      	movs	r2, #2
 8005e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	68fa      	ldr	r2, [r7, #12]
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	68fa      	ldr	r2, [r7, #12]
 8005e58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a21      	ldr	r2, [pc, #132]	; (8005ee4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d022      	beq.n	8005eaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e6c:	d01d      	beq.n	8005eaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a1d      	ldr	r2, [pc, #116]	; (8005ee8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d018      	beq.n	8005eaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a1b      	ldr	r2, [pc, #108]	; (8005eec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d013      	beq.n	8005eaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a1a      	ldr	r2, [pc, #104]	; (8005ef0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d00e      	beq.n	8005eaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a18      	ldr	r2, [pc, #96]	; (8005ef4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d009      	beq.n	8005eaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a17      	ldr	r2, [pc, #92]	; (8005ef8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d004      	beq.n	8005eaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a15      	ldr	r2, [pc, #84]	; (8005efc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d10c      	bne.n	8005ec4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005eb0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	68ba      	ldr	r2, [r7, #8]
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	68ba      	ldr	r2, [r7, #8]
 8005ec2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ed4:	2300      	movs	r3, #0
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3714      	adds	r7, #20
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr
 8005ee2:	bf00      	nop
 8005ee4:	40010000 	.word	0x40010000
 8005ee8:	40000400 	.word	0x40000400
 8005eec:	40000800 	.word	0x40000800
 8005ef0:	40000c00 	.word	0x40000c00
 8005ef4:	40010400 	.word	0x40010400
 8005ef8:	40014000 	.word	0x40014000
 8005efc:	40001800 	.word	0x40001800

08005f00 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b085      	sub	sp, #20
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d101      	bne.n	8005f1c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005f18:	2302      	movs	r3, #2
 8005f1a:	e03d      	b.n	8005f98 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	68db      	ldr	r3, [r3, #12]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	691b      	ldr	r3, [r3, #16]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	695b      	ldr	r3, [r3, #20]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	69db      	ldr	r3, [r3, #28]
 8005f82:	4313      	orrs	r3, r2
 8005f84:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	68fa      	ldr	r2, [r7, #12]
 8005f8c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f96:	2300      	movs	r3, #0
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3714      	adds	r7, #20
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr

08005fa4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005fac:	bf00      	nop
 8005fae:	370c      	adds	r7, #12
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr

08005fb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b083      	sub	sp, #12
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005fc0:	bf00      	nop
 8005fc2:	370c      	adds	r7, #12
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr

08005fcc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b082      	sub	sp, #8
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d101      	bne.n	8005fde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e03f      	b.n	800605e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005fe4:	b2db      	uxtb	r3, r3
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d106      	bne.n	8005ff8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f7fc fc84 	bl	8002900 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2224      	movs	r2, #36	; 0x24
 8005ffc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	68da      	ldr	r2, [r3, #12]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800600e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f000 fbb5 	bl	8006780 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	691a      	ldr	r2, [r3, #16]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006024:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	695a      	ldr	r2, [r3, #20]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006034:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	68da      	ldr	r2, [r3, #12]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006044:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2200      	movs	r2, #0
 800604a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2220      	movs	r2, #32
 8006050:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2220      	movs	r2, #32
 8006058:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800605c:	2300      	movs	r3, #0
}
 800605e:	4618      	mov	r0, r3
 8006060:	3708      	adds	r7, #8
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}

08006066 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006066:	b480      	push	{r7}
 8006068:	b085      	sub	sp, #20
 800606a:	af00      	add	r7, sp, #0
 800606c:	60f8      	str	r0, [r7, #12]
 800606e:	60b9      	str	r1, [r7, #8]
 8006070:	4613      	mov	r3, r2
 8006072:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800607a:	b2db      	uxtb	r3, r3
 800607c:	2b20      	cmp	r3, #32
 800607e:	d140      	bne.n	8006102 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d002      	beq.n	800608c <HAL_UART_Receive_IT+0x26>
 8006086:	88fb      	ldrh	r3, [r7, #6]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d101      	bne.n	8006090 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	e039      	b.n	8006104 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006096:	2b01      	cmp	r3, #1
 8006098:	d101      	bne.n	800609e <HAL_UART_Receive_IT+0x38>
 800609a:	2302      	movs	r3, #2
 800609c:	e032      	b.n	8006104 <HAL_UART_Receive_IT+0x9e>
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2201      	movs	r2, #1
 80060a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	68ba      	ldr	r2, [r7, #8]
 80060aa:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	88fa      	ldrh	r2, [r7, #6]
 80060b0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	88fa      	ldrh	r2, [r7, #6]
 80060b6:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2200      	movs	r2, #0
 80060bc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2222      	movs	r2, #34	; 0x22
 80060c2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2200      	movs	r2, #0
 80060ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	68da      	ldr	r2, [r3, #12]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060dc:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	695a      	ldr	r2, [r3, #20]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f042 0201 	orr.w	r2, r2, #1
 80060ec:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	68da      	ldr	r2, [r3, #12]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f042 0220 	orr.w	r2, r2, #32
 80060fc:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80060fe:	2300      	movs	r3, #0
 8006100:	e000      	b.n	8006104 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8006102:	2302      	movs	r3, #2
  }
}
 8006104:	4618      	mov	r0, r3
 8006106:	3714      	adds	r7, #20
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr

08006110 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b086      	sub	sp, #24
 8006114:	af00      	add	r7, sp, #0
 8006116:	60f8      	str	r0, [r7, #12]
 8006118:	60b9      	str	r1, [r7, #8]
 800611a:	4613      	mov	r3, r2
 800611c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006124:	b2db      	uxtb	r3, r3
 8006126:	2b20      	cmp	r3, #32
 8006128:	d153      	bne.n	80061d2 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d002      	beq.n	8006136 <HAL_UART_Transmit_DMA+0x26>
 8006130:	88fb      	ldrh	r3, [r7, #6]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d101      	bne.n	800613a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	e04c      	b.n	80061d4 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006140:	2b01      	cmp	r3, #1
 8006142:	d101      	bne.n	8006148 <HAL_UART_Transmit_DMA+0x38>
 8006144:	2302      	movs	r3, #2
 8006146:	e045      	b.n	80061d4 <HAL_UART_Transmit_DMA+0xc4>
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2201      	movs	r2, #1
 800614c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8006150:	68ba      	ldr	r2, [r7, #8]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	88fa      	ldrh	r2, [r7, #6]
 800615a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	88fa      	ldrh	r2, [r7, #6]
 8006160:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2200      	movs	r2, #0
 8006166:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2221      	movs	r2, #33	; 0x21
 800616c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006174:	4a19      	ldr	r2, [pc, #100]	; (80061dc <HAL_UART_Transmit_DMA+0xcc>)
 8006176:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800617c:	4a18      	ldr	r2, [pc, #96]	; (80061e0 <HAL_UART_Transmit_DMA+0xd0>)
 800617e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006184:	4a17      	ldr	r2, [pc, #92]	; (80061e4 <HAL_UART_Transmit_DMA+0xd4>)
 8006186:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800618c:	2200      	movs	r2, #0
 800618e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8006190:	f107 0308 	add.w	r3, r7, #8
 8006194:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	6819      	ldr	r1, [r3, #0]
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	3304      	adds	r3, #4
 80061a4:	461a      	mov	r2, r3
 80061a6:	88fb      	ldrh	r3, [r7, #6]
 80061a8:	f7fd fc26 	bl	80039f8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80061b4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2200      	movs	r2, #0
 80061ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	695a      	ldr	r2, [r3, #20]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80061cc:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80061ce:	2300      	movs	r3, #0
 80061d0:	e000      	b.n	80061d4 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80061d2:	2302      	movs	r3, #2
  }
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3718      	adds	r7, #24
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}
 80061dc:	08006411 	.word	0x08006411
 80061e0:	08006463 	.word	0x08006463
 80061e4:	0800647f 	.word	0x0800647f

080061e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b088      	sub	sp, #32
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	68db      	ldr	r3, [r3, #12]
 80061fe:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	695b      	ldr	r3, [r3, #20]
 8006206:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006208:	2300      	movs	r3, #0
 800620a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800620c:	2300      	movs	r3, #0
 800620e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	f003 030f 	and.w	r3, r3, #15
 8006216:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d10d      	bne.n	800623a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	f003 0320 	and.w	r3, r3, #32
 8006224:	2b00      	cmp	r3, #0
 8006226:	d008      	beq.n	800623a <HAL_UART_IRQHandler+0x52>
 8006228:	69bb      	ldr	r3, [r7, #24]
 800622a:	f003 0320 	and.w	r3, r3, #32
 800622e:	2b00      	cmp	r3, #0
 8006230:	d003      	beq.n	800623a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 fa23 	bl	800667e <UART_Receive_IT>
      return;
 8006238:	e0d1      	b.n	80063de <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	2b00      	cmp	r3, #0
 800623e:	f000 80b0 	beq.w	80063a2 <HAL_UART_IRQHandler+0x1ba>
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	f003 0301 	and.w	r3, r3, #1
 8006248:	2b00      	cmp	r3, #0
 800624a:	d105      	bne.n	8006258 <HAL_UART_IRQHandler+0x70>
 800624c:	69bb      	ldr	r3, [r7, #24]
 800624e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006252:	2b00      	cmp	r3, #0
 8006254:	f000 80a5 	beq.w	80063a2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	f003 0301 	and.w	r3, r3, #1
 800625e:	2b00      	cmp	r3, #0
 8006260:	d00a      	beq.n	8006278 <HAL_UART_IRQHandler+0x90>
 8006262:	69bb      	ldr	r3, [r7, #24]
 8006264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006268:	2b00      	cmp	r3, #0
 800626a:	d005      	beq.n	8006278 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006270:	f043 0201 	orr.w	r2, r3, #1
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006278:	69fb      	ldr	r3, [r7, #28]
 800627a:	f003 0304 	and.w	r3, r3, #4
 800627e:	2b00      	cmp	r3, #0
 8006280:	d00a      	beq.n	8006298 <HAL_UART_IRQHandler+0xb0>
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	f003 0301 	and.w	r3, r3, #1
 8006288:	2b00      	cmp	r3, #0
 800628a:	d005      	beq.n	8006298 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006290:	f043 0202 	orr.w	r2, r3, #2
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006298:	69fb      	ldr	r3, [r7, #28]
 800629a:	f003 0302 	and.w	r3, r3, #2
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d00a      	beq.n	80062b8 <HAL_UART_IRQHandler+0xd0>
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	f003 0301 	and.w	r3, r3, #1
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d005      	beq.n	80062b8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062b0:	f043 0204 	orr.w	r2, r3, #4
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80062b8:	69fb      	ldr	r3, [r7, #28]
 80062ba:	f003 0308 	and.w	r3, r3, #8
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d00f      	beq.n	80062e2 <HAL_UART_IRQHandler+0xfa>
 80062c2:	69bb      	ldr	r3, [r7, #24]
 80062c4:	f003 0320 	and.w	r3, r3, #32
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d104      	bne.n	80062d6 <HAL_UART_IRQHandler+0xee>
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	f003 0301 	and.w	r3, r3, #1
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d005      	beq.n	80062e2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062da:	f043 0208 	orr.w	r2, r3, #8
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d078      	beq.n	80063dc <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80062ea:	69fb      	ldr	r3, [r7, #28]
 80062ec:	f003 0320 	and.w	r3, r3, #32
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d007      	beq.n	8006304 <HAL_UART_IRQHandler+0x11c>
 80062f4:	69bb      	ldr	r3, [r7, #24]
 80062f6:	f003 0320 	and.w	r3, r3, #32
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d002      	beq.n	8006304 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f000 f9bd 	bl	800667e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	695b      	ldr	r3, [r3, #20]
 800630a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800630e:	2b40      	cmp	r3, #64	; 0x40
 8006310:	bf0c      	ite	eq
 8006312:	2301      	moveq	r3, #1
 8006314:	2300      	movne	r3, #0
 8006316:	b2db      	uxtb	r3, r3
 8006318:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800631e:	f003 0308 	and.w	r3, r3, #8
 8006322:	2b00      	cmp	r3, #0
 8006324:	d102      	bne.n	800632c <HAL_UART_IRQHandler+0x144>
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d031      	beq.n	8006390 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f000 f906 	bl	800653e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	695b      	ldr	r3, [r3, #20]
 8006338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800633c:	2b40      	cmp	r3, #64	; 0x40
 800633e:	d123      	bne.n	8006388 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	695a      	ldr	r2, [r3, #20]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800634e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006354:	2b00      	cmp	r3, #0
 8006356:	d013      	beq.n	8006380 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800635c:	4a21      	ldr	r2, [pc, #132]	; (80063e4 <HAL_UART_IRQHandler+0x1fc>)
 800635e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006364:	4618      	mov	r0, r3
 8006366:	f7fd fb9f 	bl	8003aa8 <HAL_DMA_Abort_IT>
 800636a:	4603      	mov	r3, r0
 800636c:	2b00      	cmp	r3, #0
 800636e:	d016      	beq.n	800639e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006374:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006376:	687a      	ldr	r2, [r7, #4]
 8006378:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800637a:	4610      	mov	r0, r2
 800637c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800637e:	e00e      	b.n	800639e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f000 f83b 	bl	80063fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006386:	e00a      	b.n	800639e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f000 f837 	bl	80063fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800638e:	e006      	b.n	800639e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f000 f833 	bl	80063fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2200      	movs	r2, #0
 800639a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800639c:	e01e      	b.n	80063dc <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800639e:	bf00      	nop
    return;
 80063a0:	e01c      	b.n	80063dc <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80063a2:	69fb      	ldr	r3, [r7, #28]
 80063a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d008      	beq.n	80063be <HAL_UART_IRQHandler+0x1d6>
 80063ac:	69bb      	ldr	r3, [r7, #24]
 80063ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d003      	beq.n	80063be <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f000 f8f3 	bl	80065a2 <UART_Transmit_IT>
    return;
 80063bc:	e00f      	b.n	80063de <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80063be:	69fb      	ldr	r3, [r7, #28]
 80063c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d00a      	beq.n	80063de <HAL_UART_IRQHandler+0x1f6>
 80063c8:	69bb      	ldr	r3, [r7, #24]
 80063ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d005      	beq.n	80063de <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 f93b 	bl	800664e <UART_EndTransmit_IT>
    return;
 80063d8:	bf00      	nop
 80063da:	e000      	b.n	80063de <HAL_UART_IRQHandler+0x1f6>
    return;
 80063dc:	bf00      	nop
  }
}
 80063de:	3720      	adds	r7, #32
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}
 80063e4:	0800657b 	.word	0x0800657b

080063e8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80063f0:	bf00      	nop
 80063f2:	370c      	adds	r7, #12
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr

080063fc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b083      	sub	sp, #12
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006404:	bf00      	nop
 8006406:	370c      	adds	r7, #12
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr

08006410 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b084      	sub	sp, #16
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800641c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006428:	2b00      	cmp	r3, #0
 800642a:	d113      	bne.n	8006454 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2200      	movs	r2, #0
 8006430:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	695a      	ldr	r2, [r3, #20]
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006440:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	68da      	ldr	r2, [r3, #12]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006450:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006452:	e002      	b.n	800645a <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8006454:	68f8      	ldr	r0, [r7, #12]
 8006456:	f7fb fd17 	bl	8001e88 <HAL_UART_TxCpltCallback>
}
 800645a:	bf00      	nop
 800645c:	3710      	adds	r7, #16
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}

08006462 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006462:	b580      	push	{r7, lr}
 8006464:	b084      	sub	sp, #16
 8006466:	af00      	add	r7, sp, #0
 8006468:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800646e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006470:	68f8      	ldr	r0, [r7, #12]
 8006472:	f7ff ffb9 	bl	80063e8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006476:	bf00      	nop
 8006478:	3710      	adds	r7, #16
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}

0800647e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800647e:	b580      	push	{r7, lr}
 8006480:	b084      	sub	sp, #16
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006486:	2300      	movs	r3, #0
 8006488:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800648e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	695b      	ldr	r3, [r3, #20]
 8006496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800649a:	2b80      	cmp	r3, #128	; 0x80
 800649c:	bf0c      	ite	eq
 800649e:	2301      	moveq	r3, #1
 80064a0:	2300      	movne	r3, #0
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	2b21      	cmp	r3, #33	; 0x21
 80064b0:	d108      	bne.n	80064c4 <UART_DMAError+0x46>
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d005      	beq.n	80064c4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	2200      	movs	r2, #0
 80064bc:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80064be:	68b8      	ldr	r0, [r7, #8]
 80064c0:	f000 f827 	bl	8006512 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	695b      	ldr	r3, [r3, #20]
 80064ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ce:	2b40      	cmp	r3, #64	; 0x40
 80064d0:	bf0c      	ite	eq
 80064d2:	2301      	moveq	r3, #1
 80064d4:	2300      	movne	r3, #0
 80064d6:	b2db      	uxtb	r3, r3
 80064d8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	2b22      	cmp	r3, #34	; 0x22
 80064e4:	d108      	bne.n	80064f8 <UART_DMAError+0x7a>
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d005      	beq.n	80064f8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	2200      	movs	r2, #0
 80064f0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80064f2:	68b8      	ldr	r0, [r7, #8]
 80064f4:	f000 f823 	bl	800653e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064fc:	f043 0210 	orr.w	r2, r3, #16
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006504:	68b8      	ldr	r0, [r7, #8]
 8006506:	f7ff ff79 	bl	80063fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800650a:	bf00      	nop
 800650c:	3710      	adds	r7, #16
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}

08006512 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006512:	b480      	push	{r7}
 8006514:	b083      	sub	sp, #12
 8006516:	af00      	add	r7, sp, #0
 8006518:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	68da      	ldr	r2, [r3, #12]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006528:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2220      	movs	r2, #32
 800652e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8006532:	bf00      	nop
 8006534:	370c      	adds	r7, #12
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr

0800653e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800653e:	b480      	push	{r7}
 8006540:	b083      	sub	sp, #12
 8006542:	af00      	add	r7, sp, #0
 8006544:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	68da      	ldr	r2, [r3, #12]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006554:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	695a      	ldr	r2, [r3, #20]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f022 0201 	bic.w	r2, r2, #1
 8006564:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2220      	movs	r2, #32
 800656a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800656e:	bf00      	nop
 8006570:	370c      	adds	r7, #12
 8006572:	46bd      	mov	sp, r7
 8006574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006578:	4770      	bx	lr

0800657a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800657a:	b580      	push	{r7, lr}
 800657c:	b084      	sub	sp, #16
 800657e:	af00      	add	r7, sp, #0
 8006580:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006586:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2200      	movs	r2, #0
 800658c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2200      	movs	r2, #0
 8006592:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006594:	68f8      	ldr	r0, [r7, #12]
 8006596:	f7ff ff31 	bl	80063fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800659a:	bf00      	nop
 800659c:	3710      	adds	r7, #16
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}

080065a2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80065a2:	b480      	push	{r7}
 80065a4:	b085      	sub	sp, #20
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80065b0:	b2db      	uxtb	r3, r3
 80065b2:	2b21      	cmp	r3, #33	; 0x21
 80065b4:	d144      	bne.n	8006640 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065be:	d11a      	bne.n	80065f6 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6a1b      	ldr	r3, [r3, #32]
 80065c4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	881b      	ldrh	r3, [r3, #0]
 80065ca:	461a      	mov	r2, r3
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065d4:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	691b      	ldr	r3, [r3, #16]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d105      	bne.n	80065ea <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6a1b      	ldr	r3, [r3, #32]
 80065e2:	1c9a      	adds	r2, r3, #2
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	621a      	str	r2, [r3, #32]
 80065e8:	e00e      	b.n	8006608 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6a1b      	ldr	r3, [r3, #32]
 80065ee:	1c5a      	adds	r2, r3, #1
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	621a      	str	r2, [r3, #32]
 80065f4:	e008      	b.n	8006608 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6a1b      	ldr	r3, [r3, #32]
 80065fa:	1c59      	adds	r1, r3, #1
 80065fc:	687a      	ldr	r2, [r7, #4]
 80065fe:	6211      	str	r1, [r2, #32]
 8006600:	781a      	ldrb	r2, [r3, #0]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800660c:	b29b      	uxth	r3, r3
 800660e:	3b01      	subs	r3, #1
 8006610:	b29b      	uxth	r3, r3
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	4619      	mov	r1, r3
 8006616:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006618:	2b00      	cmp	r3, #0
 800661a:	d10f      	bne.n	800663c <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	68da      	ldr	r2, [r3, #12]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800662a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	68da      	ldr	r2, [r3, #12]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800663a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800663c:	2300      	movs	r3, #0
 800663e:	e000      	b.n	8006642 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006640:	2302      	movs	r3, #2
  }
}
 8006642:	4618      	mov	r0, r3
 8006644:	3714      	adds	r7, #20
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr

0800664e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800664e:	b580      	push	{r7, lr}
 8006650:	b082      	sub	sp, #8
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	68da      	ldr	r2, [r3, #12]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006664:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2220      	movs	r2, #32
 800666a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f7fb fc0a 	bl	8001e88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006674:	2300      	movs	r3, #0
}
 8006676:	4618      	mov	r0, r3
 8006678:	3708      	adds	r7, #8
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}

0800667e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800667e:	b580      	push	{r7, lr}
 8006680:	b084      	sub	sp, #16
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800668c:	b2db      	uxtb	r3, r3
 800668e:	2b22      	cmp	r3, #34	; 0x22
 8006690:	d171      	bne.n	8006776 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800669a:	d123      	bne.n	80066e4 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066a0:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	691b      	ldr	r3, [r3, #16]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d10e      	bne.n	80066c8 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066b6:	b29a      	uxth	r2, r3
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066c0:	1c9a      	adds	r2, r3, #2
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	629a      	str	r2, [r3, #40]	; 0x28
 80066c6:	e029      	b.n	800671c <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	b29a      	uxth	r2, r3
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066dc:	1c5a      	adds	r2, r3, #1
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	629a      	str	r2, [r3, #40]	; 0x28
 80066e2:	e01b      	b.n	800671c <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	691b      	ldr	r3, [r3, #16]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d10a      	bne.n	8006702 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	6858      	ldr	r0, [r3, #4]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066f6:	1c59      	adds	r1, r3, #1
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	6291      	str	r1, [r2, #40]	; 0x28
 80066fc:	b2c2      	uxtb	r2, r0
 80066fe:	701a      	strb	r2, [r3, #0]
 8006700:	e00c      	b.n	800671c <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	b2da      	uxtb	r2, r3
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800670e:	1c58      	adds	r0, r3, #1
 8006710:	6879      	ldr	r1, [r7, #4]
 8006712:	6288      	str	r0, [r1, #40]	; 0x28
 8006714:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006718:	b2d2      	uxtb	r2, r2
 800671a:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006720:	b29b      	uxth	r3, r3
 8006722:	3b01      	subs	r3, #1
 8006724:	b29b      	uxth	r3, r3
 8006726:	687a      	ldr	r2, [r7, #4]
 8006728:	4619      	mov	r1, r3
 800672a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800672c:	2b00      	cmp	r3, #0
 800672e:	d120      	bne.n	8006772 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	68da      	ldr	r2, [r3, #12]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f022 0220 	bic.w	r2, r2, #32
 800673e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	68da      	ldr	r2, [r3, #12]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800674e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	695a      	ldr	r2, [r3, #20]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f022 0201 	bic.w	r2, r2, #1
 800675e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2220      	movs	r2, #32
 8006764:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f7fb fb77 	bl	8001e5c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800676e:	2300      	movs	r3, #0
 8006770:	e002      	b.n	8006778 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006772:	2300      	movs	r3, #0
 8006774:	e000      	b.n	8006778 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006776:	2302      	movs	r3, #2
  }
}
 8006778:	4618      	mov	r0, r3
 800677a:	3710      	adds	r7, #16
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}

08006780 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006784:	b085      	sub	sp, #20
 8006786:	af00      	add	r7, sp, #0
 8006788:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	691b      	ldr	r3, [r3, #16]
 8006790:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	68da      	ldr	r2, [r3, #12]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	430a      	orrs	r2, r1
 800679e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	689a      	ldr	r2, [r3, #8]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	691b      	ldr	r3, [r3, #16]
 80067a8:	431a      	orrs	r2, r3
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	695b      	ldr	r3, [r3, #20]
 80067ae:	431a      	orrs	r2, r3
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	69db      	ldr	r3, [r3, #28]
 80067b4:	4313      	orrs	r3, r2
 80067b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	68db      	ldr	r3, [r3, #12]
 80067be:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80067c2:	f023 030c 	bic.w	r3, r3, #12
 80067c6:	687a      	ldr	r2, [r7, #4]
 80067c8:	6812      	ldr	r2, [r2, #0]
 80067ca:	68f9      	ldr	r1, [r7, #12]
 80067cc:	430b      	orrs	r3, r1
 80067ce:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	695b      	ldr	r3, [r3, #20]
 80067d6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	699a      	ldr	r2, [r3, #24]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	430a      	orrs	r2, r1
 80067e4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	69db      	ldr	r3, [r3, #28]
 80067ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067ee:	f040 818b 	bne.w	8006b08 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4ac1      	ldr	r2, [pc, #772]	; (8006afc <UART_SetConfig+0x37c>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d005      	beq.n	8006808 <UART_SetConfig+0x88>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4abf      	ldr	r2, [pc, #764]	; (8006b00 <UART_SetConfig+0x380>)
 8006802:	4293      	cmp	r3, r2
 8006804:	f040 80bd 	bne.w	8006982 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006808:	f7fe f9e6 	bl	8004bd8 <HAL_RCC_GetPCLK2Freq>
 800680c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	461d      	mov	r5, r3
 8006812:	f04f 0600 	mov.w	r6, #0
 8006816:	46a8      	mov	r8, r5
 8006818:	46b1      	mov	r9, r6
 800681a:	eb18 0308 	adds.w	r3, r8, r8
 800681e:	eb49 0409 	adc.w	r4, r9, r9
 8006822:	4698      	mov	r8, r3
 8006824:	46a1      	mov	r9, r4
 8006826:	eb18 0805 	adds.w	r8, r8, r5
 800682a:	eb49 0906 	adc.w	r9, r9, r6
 800682e:	f04f 0100 	mov.w	r1, #0
 8006832:	f04f 0200 	mov.w	r2, #0
 8006836:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800683a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800683e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006842:	4688      	mov	r8, r1
 8006844:	4691      	mov	r9, r2
 8006846:	eb18 0005 	adds.w	r0, r8, r5
 800684a:	eb49 0106 	adc.w	r1, r9, r6
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	461d      	mov	r5, r3
 8006854:	f04f 0600 	mov.w	r6, #0
 8006858:	196b      	adds	r3, r5, r5
 800685a:	eb46 0406 	adc.w	r4, r6, r6
 800685e:	461a      	mov	r2, r3
 8006860:	4623      	mov	r3, r4
 8006862:	f7fa f99d 	bl	8000ba0 <__aeabi_uldivmod>
 8006866:	4603      	mov	r3, r0
 8006868:	460c      	mov	r4, r1
 800686a:	461a      	mov	r2, r3
 800686c:	4ba5      	ldr	r3, [pc, #660]	; (8006b04 <UART_SetConfig+0x384>)
 800686e:	fba3 2302 	umull	r2, r3, r3, r2
 8006872:	095b      	lsrs	r3, r3, #5
 8006874:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	461d      	mov	r5, r3
 800687c:	f04f 0600 	mov.w	r6, #0
 8006880:	46a9      	mov	r9, r5
 8006882:	46b2      	mov	sl, r6
 8006884:	eb19 0309 	adds.w	r3, r9, r9
 8006888:	eb4a 040a 	adc.w	r4, sl, sl
 800688c:	4699      	mov	r9, r3
 800688e:	46a2      	mov	sl, r4
 8006890:	eb19 0905 	adds.w	r9, r9, r5
 8006894:	eb4a 0a06 	adc.w	sl, sl, r6
 8006898:	f04f 0100 	mov.w	r1, #0
 800689c:	f04f 0200 	mov.w	r2, #0
 80068a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80068a4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80068a8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80068ac:	4689      	mov	r9, r1
 80068ae:	4692      	mov	sl, r2
 80068b0:	eb19 0005 	adds.w	r0, r9, r5
 80068b4:	eb4a 0106 	adc.w	r1, sl, r6
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	461d      	mov	r5, r3
 80068be:	f04f 0600 	mov.w	r6, #0
 80068c2:	196b      	adds	r3, r5, r5
 80068c4:	eb46 0406 	adc.w	r4, r6, r6
 80068c8:	461a      	mov	r2, r3
 80068ca:	4623      	mov	r3, r4
 80068cc:	f7fa f968 	bl	8000ba0 <__aeabi_uldivmod>
 80068d0:	4603      	mov	r3, r0
 80068d2:	460c      	mov	r4, r1
 80068d4:	461a      	mov	r2, r3
 80068d6:	4b8b      	ldr	r3, [pc, #556]	; (8006b04 <UART_SetConfig+0x384>)
 80068d8:	fba3 1302 	umull	r1, r3, r3, r2
 80068dc:	095b      	lsrs	r3, r3, #5
 80068de:	2164      	movs	r1, #100	; 0x64
 80068e0:	fb01 f303 	mul.w	r3, r1, r3
 80068e4:	1ad3      	subs	r3, r2, r3
 80068e6:	00db      	lsls	r3, r3, #3
 80068e8:	3332      	adds	r3, #50	; 0x32
 80068ea:	4a86      	ldr	r2, [pc, #536]	; (8006b04 <UART_SetConfig+0x384>)
 80068ec:	fba2 2303 	umull	r2, r3, r2, r3
 80068f0:	095b      	lsrs	r3, r3, #5
 80068f2:	005b      	lsls	r3, r3, #1
 80068f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80068f8:	4498      	add	r8, r3
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	461d      	mov	r5, r3
 80068fe:	f04f 0600 	mov.w	r6, #0
 8006902:	46a9      	mov	r9, r5
 8006904:	46b2      	mov	sl, r6
 8006906:	eb19 0309 	adds.w	r3, r9, r9
 800690a:	eb4a 040a 	adc.w	r4, sl, sl
 800690e:	4699      	mov	r9, r3
 8006910:	46a2      	mov	sl, r4
 8006912:	eb19 0905 	adds.w	r9, r9, r5
 8006916:	eb4a 0a06 	adc.w	sl, sl, r6
 800691a:	f04f 0100 	mov.w	r1, #0
 800691e:	f04f 0200 	mov.w	r2, #0
 8006922:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006926:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800692a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800692e:	4689      	mov	r9, r1
 8006930:	4692      	mov	sl, r2
 8006932:	eb19 0005 	adds.w	r0, r9, r5
 8006936:	eb4a 0106 	adc.w	r1, sl, r6
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	461d      	mov	r5, r3
 8006940:	f04f 0600 	mov.w	r6, #0
 8006944:	196b      	adds	r3, r5, r5
 8006946:	eb46 0406 	adc.w	r4, r6, r6
 800694a:	461a      	mov	r2, r3
 800694c:	4623      	mov	r3, r4
 800694e:	f7fa f927 	bl	8000ba0 <__aeabi_uldivmod>
 8006952:	4603      	mov	r3, r0
 8006954:	460c      	mov	r4, r1
 8006956:	461a      	mov	r2, r3
 8006958:	4b6a      	ldr	r3, [pc, #424]	; (8006b04 <UART_SetConfig+0x384>)
 800695a:	fba3 1302 	umull	r1, r3, r3, r2
 800695e:	095b      	lsrs	r3, r3, #5
 8006960:	2164      	movs	r1, #100	; 0x64
 8006962:	fb01 f303 	mul.w	r3, r1, r3
 8006966:	1ad3      	subs	r3, r2, r3
 8006968:	00db      	lsls	r3, r3, #3
 800696a:	3332      	adds	r3, #50	; 0x32
 800696c:	4a65      	ldr	r2, [pc, #404]	; (8006b04 <UART_SetConfig+0x384>)
 800696e:	fba2 2303 	umull	r2, r3, r2, r3
 8006972:	095b      	lsrs	r3, r3, #5
 8006974:	f003 0207 	and.w	r2, r3, #7
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4442      	add	r2, r8
 800697e:	609a      	str	r2, [r3, #8]
 8006980:	e26f      	b.n	8006e62 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006982:	f7fe f915 	bl	8004bb0 <HAL_RCC_GetPCLK1Freq>
 8006986:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	461d      	mov	r5, r3
 800698c:	f04f 0600 	mov.w	r6, #0
 8006990:	46a8      	mov	r8, r5
 8006992:	46b1      	mov	r9, r6
 8006994:	eb18 0308 	adds.w	r3, r8, r8
 8006998:	eb49 0409 	adc.w	r4, r9, r9
 800699c:	4698      	mov	r8, r3
 800699e:	46a1      	mov	r9, r4
 80069a0:	eb18 0805 	adds.w	r8, r8, r5
 80069a4:	eb49 0906 	adc.w	r9, r9, r6
 80069a8:	f04f 0100 	mov.w	r1, #0
 80069ac:	f04f 0200 	mov.w	r2, #0
 80069b0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80069b4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80069b8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80069bc:	4688      	mov	r8, r1
 80069be:	4691      	mov	r9, r2
 80069c0:	eb18 0005 	adds.w	r0, r8, r5
 80069c4:	eb49 0106 	adc.w	r1, r9, r6
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	461d      	mov	r5, r3
 80069ce:	f04f 0600 	mov.w	r6, #0
 80069d2:	196b      	adds	r3, r5, r5
 80069d4:	eb46 0406 	adc.w	r4, r6, r6
 80069d8:	461a      	mov	r2, r3
 80069da:	4623      	mov	r3, r4
 80069dc:	f7fa f8e0 	bl	8000ba0 <__aeabi_uldivmod>
 80069e0:	4603      	mov	r3, r0
 80069e2:	460c      	mov	r4, r1
 80069e4:	461a      	mov	r2, r3
 80069e6:	4b47      	ldr	r3, [pc, #284]	; (8006b04 <UART_SetConfig+0x384>)
 80069e8:	fba3 2302 	umull	r2, r3, r3, r2
 80069ec:	095b      	lsrs	r3, r3, #5
 80069ee:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	461d      	mov	r5, r3
 80069f6:	f04f 0600 	mov.w	r6, #0
 80069fa:	46a9      	mov	r9, r5
 80069fc:	46b2      	mov	sl, r6
 80069fe:	eb19 0309 	adds.w	r3, r9, r9
 8006a02:	eb4a 040a 	adc.w	r4, sl, sl
 8006a06:	4699      	mov	r9, r3
 8006a08:	46a2      	mov	sl, r4
 8006a0a:	eb19 0905 	adds.w	r9, r9, r5
 8006a0e:	eb4a 0a06 	adc.w	sl, sl, r6
 8006a12:	f04f 0100 	mov.w	r1, #0
 8006a16:	f04f 0200 	mov.w	r2, #0
 8006a1a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a1e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006a22:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006a26:	4689      	mov	r9, r1
 8006a28:	4692      	mov	sl, r2
 8006a2a:	eb19 0005 	adds.w	r0, r9, r5
 8006a2e:	eb4a 0106 	adc.w	r1, sl, r6
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	461d      	mov	r5, r3
 8006a38:	f04f 0600 	mov.w	r6, #0
 8006a3c:	196b      	adds	r3, r5, r5
 8006a3e:	eb46 0406 	adc.w	r4, r6, r6
 8006a42:	461a      	mov	r2, r3
 8006a44:	4623      	mov	r3, r4
 8006a46:	f7fa f8ab 	bl	8000ba0 <__aeabi_uldivmod>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	460c      	mov	r4, r1
 8006a4e:	461a      	mov	r2, r3
 8006a50:	4b2c      	ldr	r3, [pc, #176]	; (8006b04 <UART_SetConfig+0x384>)
 8006a52:	fba3 1302 	umull	r1, r3, r3, r2
 8006a56:	095b      	lsrs	r3, r3, #5
 8006a58:	2164      	movs	r1, #100	; 0x64
 8006a5a:	fb01 f303 	mul.w	r3, r1, r3
 8006a5e:	1ad3      	subs	r3, r2, r3
 8006a60:	00db      	lsls	r3, r3, #3
 8006a62:	3332      	adds	r3, #50	; 0x32
 8006a64:	4a27      	ldr	r2, [pc, #156]	; (8006b04 <UART_SetConfig+0x384>)
 8006a66:	fba2 2303 	umull	r2, r3, r2, r3
 8006a6a:	095b      	lsrs	r3, r3, #5
 8006a6c:	005b      	lsls	r3, r3, #1
 8006a6e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006a72:	4498      	add	r8, r3
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	461d      	mov	r5, r3
 8006a78:	f04f 0600 	mov.w	r6, #0
 8006a7c:	46a9      	mov	r9, r5
 8006a7e:	46b2      	mov	sl, r6
 8006a80:	eb19 0309 	adds.w	r3, r9, r9
 8006a84:	eb4a 040a 	adc.w	r4, sl, sl
 8006a88:	4699      	mov	r9, r3
 8006a8a:	46a2      	mov	sl, r4
 8006a8c:	eb19 0905 	adds.w	r9, r9, r5
 8006a90:	eb4a 0a06 	adc.w	sl, sl, r6
 8006a94:	f04f 0100 	mov.w	r1, #0
 8006a98:	f04f 0200 	mov.w	r2, #0
 8006a9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006aa0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006aa4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006aa8:	4689      	mov	r9, r1
 8006aaa:	4692      	mov	sl, r2
 8006aac:	eb19 0005 	adds.w	r0, r9, r5
 8006ab0:	eb4a 0106 	adc.w	r1, sl, r6
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	461d      	mov	r5, r3
 8006aba:	f04f 0600 	mov.w	r6, #0
 8006abe:	196b      	adds	r3, r5, r5
 8006ac0:	eb46 0406 	adc.w	r4, r6, r6
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	4623      	mov	r3, r4
 8006ac8:	f7fa f86a 	bl	8000ba0 <__aeabi_uldivmod>
 8006acc:	4603      	mov	r3, r0
 8006ace:	460c      	mov	r4, r1
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	4b0c      	ldr	r3, [pc, #48]	; (8006b04 <UART_SetConfig+0x384>)
 8006ad4:	fba3 1302 	umull	r1, r3, r3, r2
 8006ad8:	095b      	lsrs	r3, r3, #5
 8006ada:	2164      	movs	r1, #100	; 0x64
 8006adc:	fb01 f303 	mul.w	r3, r1, r3
 8006ae0:	1ad3      	subs	r3, r2, r3
 8006ae2:	00db      	lsls	r3, r3, #3
 8006ae4:	3332      	adds	r3, #50	; 0x32
 8006ae6:	4a07      	ldr	r2, [pc, #28]	; (8006b04 <UART_SetConfig+0x384>)
 8006ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8006aec:	095b      	lsrs	r3, r3, #5
 8006aee:	f003 0207 	and.w	r2, r3, #7
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4442      	add	r2, r8
 8006af8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006afa:	e1b2      	b.n	8006e62 <UART_SetConfig+0x6e2>
 8006afc:	40011000 	.word	0x40011000
 8006b00:	40011400 	.word	0x40011400
 8006b04:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4ad7      	ldr	r2, [pc, #860]	; (8006e6c <UART_SetConfig+0x6ec>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d005      	beq.n	8006b1e <UART_SetConfig+0x39e>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4ad6      	ldr	r2, [pc, #856]	; (8006e70 <UART_SetConfig+0x6f0>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	f040 80d1 	bne.w	8006cc0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006b1e:	f7fe f85b 	bl	8004bd8 <HAL_RCC_GetPCLK2Freq>
 8006b22:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	469a      	mov	sl, r3
 8006b28:	f04f 0b00 	mov.w	fp, #0
 8006b2c:	46d0      	mov	r8, sl
 8006b2e:	46d9      	mov	r9, fp
 8006b30:	eb18 0308 	adds.w	r3, r8, r8
 8006b34:	eb49 0409 	adc.w	r4, r9, r9
 8006b38:	4698      	mov	r8, r3
 8006b3a:	46a1      	mov	r9, r4
 8006b3c:	eb18 080a 	adds.w	r8, r8, sl
 8006b40:	eb49 090b 	adc.w	r9, r9, fp
 8006b44:	f04f 0100 	mov.w	r1, #0
 8006b48:	f04f 0200 	mov.w	r2, #0
 8006b4c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006b50:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006b54:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006b58:	4688      	mov	r8, r1
 8006b5a:	4691      	mov	r9, r2
 8006b5c:	eb1a 0508 	adds.w	r5, sl, r8
 8006b60:	eb4b 0609 	adc.w	r6, fp, r9
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	4619      	mov	r1, r3
 8006b6a:	f04f 0200 	mov.w	r2, #0
 8006b6e:	f04f 0300 	mov.w	r3, #0
 8006b72:	f04f 0400 	mov.w	r4, #0
 8006b76:	0094      	lsls	r4, r2, #2
 8006b78:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006b7c:	008b      	lsls	r3, r1, #2
 8006b7e:	461a      	mov	r2, r3
 8006b80:	4623      	mov	r3, r4
 8006b82:	4628      	mov	r0, r5
 8006b84:	4631      	mov	r1, r6
 8006b86:	f7fa f80b 	bl	8000ba0 <__aeabi_uldivmod>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	460c      	mov	r4, r1
 8006b8e:	461a      	mov	r2, r3
 8006b90:	4bb8      	ldr	r3, [pc, #736]	; (8006e74 <UART_SetConfig+0x6f4>)
 8006b92:	fba3 2302 	umull	r2, r3, r3, r2
 8006b96:	095b      	lsrs	r3, r3, #5
 8006b98:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	469b      	mov	fp, r3
 8006ba0:	f04f 0c00 	mov.w	ip, #0
 8006ba4:	46d9      	mov	r9, fp
 8006ba6:	46e2      	mov	sl, ip
 8006ba8:	eb19 0309 	adds.w	r3, r9, r9
 8006bac:	eb4a 040a 	adc.w	r4, sl, sl
 8006bb0:	4699      	mov	r9, r3
 8006bb2:	46a2      	mov	sl, r4
 8006bb4:	eb19 090b 	adds.w	r9, r9, fp
 8006bb8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006bbc:	f04f 0100 	mov.w	r1, #0
 8006bc0:	f04f 0200 	mov.w	r2, #0
 8006bc4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006bc8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006bcc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006bd0:	4689      	mov	r9, r1
 8006bd2:	4692      	mov	sl, r2
 8006bd4:	eb1b 0509 	adds.w	r5, fp, r9
 8006bd8:	eb4c 060a 	adc.w	r6, ip, sl
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	4619      	mov	r1, r3
 8006be2:	f04f 0200 	mov.w	r2, #0
 8006be6:	f04f 0300 	mov.w	r3, #0
 8006bea:	f04f 0400 	mov.w	r4, #0
 8006bee:	0094      	lsls	r4, r2, #2
 8006bf0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006bf4:	008b      	lsls	r3, r1, #2
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	4623      	mov	r3, r4
 8006bfa:	4628      	mov	r0, r5
 8006bfc:	4631      	mov	r1, r6
 8006bfe:	f7f9 ffcf 	bl	8000ba0 <__aeabi_uldivmod>
 8006c02:	4603      	mov	r3, r0
 8006c04:	460c      	mov	r4, r1
 8006c06:	461a      	mov	r2, r3
 8006c08:	4b9a      	ldr	r3, [pc, #616]	; (8006e74 <UART_SetConfig+0x6f4>)
 8006c0a:	fba3 1302 	umull	r1, r3, r3, r2
 8006c0e:	095b      	lsrs	r3, r3, #5
 8006c10:	2164      	movs	r1, #100	; 0x64
 8006c12:	fb01 f303 	mul.w	r3, r1, r3
 8006c16:	1ad3      	subs	r3, r2, r3
 8006c18:	011b      	lsls	r3, r3, #4
 8006c1a:	3332      	adds	r3, #50	; 0x32
 8006c1c:	4a95      	ldr	r2, [pc, #596]	; (8006e74 <UART_SetConfig+0x6f4>)
 8006c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c22:	095b      	lsrs	r3, r3, #5
 8006c24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c28:	4498      	add	r8, r3
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	469b      	mov	fp, r3
 8006c2e:	f04f 0c00 	mov.w	ip, #0
 8006c32:	46d9      	mov	r9, fp
 8006c34:	46e2      	mov	sl, ip
 8006c36:	eb19 0309 	adds.w	r3, r9, r9
 8006c3a:	eb4a 040a 	adc.w	r4, sl, sl
 8006c3e:	4699      	mov	r9, r3
 8006c40:	46a2      	mov	sl, r4
 8006c42:	eb19 090b 	adds.w	r9, r9, fp
 8006c46:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006c4a:	f04f 0100 	mov.w	r1, #0
 8006c4e:	f04f 0200 	mov.w	r2, #0
 8006c52:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c56:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006c5a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006c5e:	4689      	mov	r9, r1
 8006c60:	4692      	mov	sl, r2
 8006c62:	eb1b 0509 	adds.w	r5, fp, r9
 8006c66:	eb4c 060a 	adc.w	r6, ip, sl
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	4619      	mov	r1, r3
 8006c70:	f04f 0200 	mov.w	r2, #0
 8006c74:	f04f 0300 	mov.w	r3, #0
 8006c78:	f04f 0400 	mov.w	r4, #0
 8006c7c:	0094      	lsls	r4, r2, #2
 8006c7e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006c82:	008b      	lsls	r3, r1, #2
 8006c84:	461a      	mov	r2, r3
 8006c86:	4623      	mov	r3, r4
 8006c88:	4628      	mov	r0, r5
 8006c8a:	4631      	mov	r1, r6
 8006c8c:	f7f9 ff88 	bl	8000ba0 <__aeabi_uldivmod>
 8006c90:	4603      	mov	r3, r0
 8006c92:	460c      	mov	r4, r1
 8006c94:	461a      	mov	r2, r3
 8006c96:	4b77      	ldr	r3, [pc, #476]	; (8006e74 <UART_SetConfig+0x6f4>)
 8006c98:	fba3 1302 	umull	r1, r3, r3, r2
 8006c9c:	095b      	lsrs	r3, r3, #5
 8006c9e:	2164      	movs	r1, #100	; 0x64
 8006ca0:	fb01 f303 	mul.w	r3, r1, r3
 8006ca4:	1ad3      	subs	r3, r2, r3
 8006ca6:	011b      	lsls	r3, r3, #4
 8006ca8:	3332      	adds	r3, #50	; 0x32
 8006caa:	4a72      	ldr	r2, [pc, #456]	; (8006e74 <UART_SetConfig+0x6f4>)
 8006cac:	fba2 2303 	umull	r2, r3, r2, r3
 8006cb0:	095b      	lsrs	r3, r3, #5
 8006cb2:	f003 020f 	and.w	r2, r3, #15
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4442      	add	r2, r8
 8006cbc:	609a      	str	r2, [r3, #8]
 8006cbe:	e0d0      	b.n	8006e62 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006cc0:	f7fd ff76 	bl	8004bb0 <HAL_RCC_GetPCLK1Freq>
 8006cc4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	469a      	mov	sl, r3
 8006cca:	f04f 0b00 	mov.w	fp, #0
 8006cce:	46d0      	mov	r8, sl
 8006cd0:	46d9      	mov	r9, fp
 8006cd2:	eb18 0308 	adds.w	r3, r8, r8
 8006cd6:	eb49 0409 	adc.w	r4, r9, r9
 8006cda:	4698      	mov	r8, r3
 8006cdc:	46a1      	mov	r9, r4
 8006cde:	eb18 080a 	adds.w	r8, r8, sl
 8006ce2:	eb49 090b 	adc.w	r9, r9, fp
 8006ce6:	f04f 0100 	mov.w	r1, #0
 8006cea:	f04f 0200 	mov.w	r2, #0
 8006cee:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006cf2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006cf6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006cfa:	4688      	mov	r8, r1
 8006cfc:	4691      	mov	r9, r2
 8006cfe:	eb1a 0508 	adds.w	r5, sl, r8
 8006d02:	eb4b 0609 	adc.w	r6, fp, r9
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	4619      	mov	r1, r3
 8006d0c:	f04f 0200 	mov.w	r2, #0
 8006d10:	f04f 0300 	mov.w	r3, #0
 8006d14:	f04f 0400 	mov.w	r4, #0
 8006d18:	0094      	lsls	r4, r2, #2
 8006d1a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006d1e:	008b      	lsls	r3, r1, #2
 8006d20:	461a      	mov	r2, r3
 8006d22:	4623      	mov	r3, r4
 8006d24:	4628      	mov	r0, r5
 8006d26:	4631      	mov	r1, r6
 8006d28:	f7f9 ff3a 	bl	8000ba0 <__aeabi_uldivmod>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	460c      	mov	r4, r1
 8006d30:	461a      	mov	r2, r3
 8006d32:	4b50      	ldr	r3, [pc, #320]	; (8006e74 <UART_SetConfig+0x6f4>)
 8006d34:	fba3 2302 	umull	r2, r3, r3, r2
 8006d38:	095b      	lsrs	r3, r3, #5
 8006d3a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	469b      	mov	fp, r3
 8006d42:	f04f 0c00 	mov.w	ip, #0
 8006d46:	46d9      	mov	r9, fp
 8006d48:	46e2      	mov	sl, ip
 8006d4a:	eb19 0309 	adds.w	r3, r9, r9
 8006d4e:	eb4a 040a 	adc.w	r4, sl, sl
 8006d52:	4699      	mov	r9, r3
 8006d54:	46a2      	mov	sl, r4
 8006d56:	eb19 090b 	adds.w	r9, r9, fp
 8006d5a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006d5e:	f04f 0100 	mov.w	r1, #0
 8006d62:	f04f 0200 	mov.w	r2, #0
 8006d66:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d6a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006d6e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006d72:	4689      	mov	r9, r1
 8006d74:	4692      	mov	sl, r2
 8006d76:	eb1b 0509 	adds.w	r5, fp, r9
 8006d7a:	eb4c 060a 	adc.w	r6, ip, sl
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	4619      	mov	r1, r3
 8006d84:	f04f 0200 	mov.w	r2, #0
 8006d88:	f04f 0300 	mov.w	r3, #0
 8006d8c:	f04f 0400 	mov.w	r4, #0
 8006d90:	0094      	lsls	r4, r2, #2
 8006d92:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006d96:	008b      	lsls	r3, r1, #2
 8006d98:	461a      	mov	r2, r3
 8006d9a:	4623      	mov	r3, r4
 8006d9c:	4628      	mov	r0, r5
 8006d9e:	4631      	mov	r1, r6
 8006da0:	f7f9 fefe 	bl	8000ba0 <__aeabi_uldivmod>
 8006da4:	4603      	mov	r3, r0
 8006da6:	460c      	mov	r4, r1
 8006da8:	461a      	mov	r2, r3
 8006daa:	4b32      	ldr	r3, [pc, #200]	; (8006e74 <UART_SetConfig+0x6f4>)
 8006dac:	fba3 1302 	umull	r1, r3, r3, r2
 8006db0:	095b      	lsrs	r3, r3, #5
 8006db2:	2164      	movs	r1, #100	; 0x64
 8006db4:	fb01 f303 	mul.w	r3, r1, r3
 8006db8:	1ad3      	subs	r3, r2, r3
 8006dba:	011b      	lsls	r3, r3, #4
 8006dbc:	3332      	adds	r3, #50	; 0x32
 8006dbe:	4a2d      	ldr	r2, [pc, #180]	; (8006e74 <UART_SetConfig+0x6f4>)
 8006dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8006dc4:	095b      	lsrs	r3, r3, #5
 8006dc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006dca:	4498      	add	r8, r3
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	469b      	mov	fp, r3
 8006dd0:	f04f 0c00 	mov.w	ip, #0
 8006dd4:	46d9      	mov	r9, fp
 8006dd6:	46e2      	mov	sl, ip
 8006dd8:	eb19 0309 	adds.w	r3, r9, r9
 8006ddc:	eb4a 040a 	adc.w	r4, sl, sl
 8006de0:	4699      	mov	r9, r3
 8006de2:	46a2      	mov	sl, r4
 8006de4:	eb19 090b 	adds.w	r9, r9, fp
 8006de8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006dec:	f04f 0100 	mov.w	r1, #0
 8006df0:	f04f 0200 	mov.w	r2, #0
 8006df4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006df8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006dfc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006e00:	4689      	mov	r9, r1
 8006e02:	4692      	mov	sl, r2
 8006e04:	eb1b 0509 	adds.w	r5, fp, r9
 8006e08:	eb4c 060a 	adc.w	r6, ip, sl
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	4619      	mov	r1, r3
 8006e12:	f04f 0200 	mov.w	r2, #0
 8006e16:	f04f 0300 	mov.w	r3, #0
 8006e1a:	f04f 0400 	mov.w	r4, #0
 8006e1e:	0094      	lsls	r4, r2, #2
 8006e20:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006e24:	008b      	lsls	r3, r1, #2
 8006e26:	461a      	mov	r2, r3
 8006e28:	4623      	mov	r3, r4
 8006e2a:	4628      	mov	r0, r5
 8006e2c:	4631      	mov	r1, r6
 8006e2e:	f7f9 feb7 	bl	8000ba0 <__aeabi_uldivmod>
 8006e32:	4603      	mov	r3, r0
 8006e34:	460c      	mov	r4, r1
 8006e36:	461a      	mov	r2, r3
 8006e38:	4b0e      	ldr	r3, [pc, #56]	; (8006e74 <UART_SetConfig+0x6f4>)
 8006e3a:	fba3 1302 	umull	r1, r3, r3, r2
 8006e3e:	095b      	lsrs	r3, r3, #5
 8006e40:	2164      	movs	r1, #100	; 0x64
 8006e42:	fb01 f303 	mul.w	r3, r1, r3
 8006e46:	1ad3      	subs	r3, r2, r3
 8006e48:	011b      	lsls	r3, r3, #4
 8006e4a:	3332      	adds	r3, #50	; 0x32
 8006e4c:	4a09      	ldr	r2, [pc, #36]	; (8006e74 <UART_SetConfig+0x6f4>)
 8006e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8006e52:	095b      	lsrs	r3, r3, #5
 8006e54:	f003 020f 	and.w	r2, r3, #15
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4442      	add	r2, r8
 8006e5e:	609a      	str	r2, [r3, #8]
}
 8006e60:	e7ff      	b.n	8006e62 <UART_SetConfig+0x6e2>
 8006e62:	bf00      	nop
 8006e64:	3714      	adds	r7, #20
 8006e66:	46bd      	mov	sp, r7
 8006e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e6c:	40011000 	.word	0x40011000
 8006e70:	40011400 	.word	0x40011400
 8006e74:	51eb851f 	.word	0x51eb851f

08006e78 <__errno>:
 8006e78:	4b01      	ldr	r3, [pc, #4]	; (8006e80 <__errno+0x8>)
 8006e7a:	6818      	ldr	r0, [r3, #0]
 8006e7c:	4770      	bx	lr
 8006e7e:	bf00      	nop
 8006e80:	20000018 	.word	0x20000018

08006e84 <__libc_init_array>:
 8006e84:	b570      	push	{r4, r5, r6, lr}
 8006e86:	4e0d      	ldr	r6, [pc, #52]	; (8006ebc <__libc_init_array+0x38>)
 8006e88:	4c0d      	ldr	r4, [pc, #52]	; (8006ec0 <__libc_init_array+0x3c>)
 8006e8a:	1ba4      	subs	r4, r4, r6
 8006e8c:	10a4      	asrs	r4, r4, #2
 8006e8e:	2500      	movs	r5, #0
 8006e90:	42a5      	cmp	r5, r4
 8006e92:	d109      	bne.n	8006ea8 <__libc_init_array+0x24>
 8006e94:	4e0b      	ldr	r6, [pc, #44]	; (8006ec4 <__libc_init_array+0x40>)
 8006e96:	4c0c      	ldr	r4, [pc, #48]	; (8006ec8 <__libc_init_array+0x44>)
 8006e98:	f002 fade 	bl	8009458 <_init>
 8006e9c:	1ba4      	subs	r4, r4, r6
 8006e9e:	10a4      	asrs	r4, r4, #2
 8006ea0:	2500      	movs	r5, #0
 8006ea2:	42a5      	cmp	r5, r4
 8006ea4:	d105      	bne.n	8006eb2 <__libc_init_array+0x2e>
 8006ea6:	bd70      	pop	{r4, r5, r6, pc}
 8006ea8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006eac:	4798      	blx	r3
 8006eae:	3501      	adds	r5, #1
 8006eb0:	e7ee      	b.n	8006e90 <__libc_init_array+0xc>
 8006eb2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006eb6:	4798      	blx	r3
 8006eb8:	3501      	adds	r5, #1
 8006eba:	e7f2      	b.n	8006ea2 <__libc_init_array+0x1e>
 8006ebc:	08009750 	.word	0x08009750
 8006ec0:	08009750 	.word	0x08009750
 8006ec4:	08009750 	.word	0x08009750
 8006ec8:	08009754 	.word	0x08009754

08006ecc <memset>:
 8006ecc:	4402      	add	r2, r0
 8006ece:	4603      	mov	r3, r0
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d100      	bne.n	8006ed6 <memset+0xa>
 8006ed4:	4770      	bx	lr
 8006ed6:	f803 1b01 	strb.w	r1, [r3], #1
 8006eda:	e7f9      	b.n	8006ed0 <memset+0x4>

08006edc <__cvt>:
 8006edc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ee0:	ec55 4b10 	vmov	r4, r5, d0
 8006ee4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8006ee6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006eea:	2d00      	cmp	r5, #0
 8006eec:	460e      	mov	r6, r1
 8006eee:	4691      	mov	r9, r2
 8006ef0:	4619      	mov	r1, r3
 8006ef2:	bfb8      	it	lt
 8006ef4:	4622      	movlt	r2, r4
 8006ef6:	462b      	mov	r3, r5
 8006ef8:	f027 0720 	bic.w	r7, r7, #32
 8006efc:	bfbb      	ittet	lt
 8006efe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006f02:	461d      	movlt	r5, r3
 8006f04:	2300      	movge	r3, #0
 8006f06:	232d      	movlt	r3, #45	; 0x2d
 8006f08:	bfb8      	it	lt
 8006f0a:	4614      	movlt	r4, r2
 8006f0c:	2f46      	cmp	r7, #70	; 0x46
 8006f0e:	700b      	strb	r3, [r1, #0]
 8006f10:	d004      	beq.n	8006f1c <__cvt+0x40>
 8006f12:	2f45      	cmp	r7, #69	; 0x45
 8006f14:	d100      	bne.n	8006f18 <__cvt+0x3c>
 8006f16:	3601      	adds	r6, #1
 8006f18:	2102      	movs	r1, #2
 8006f1a:	e000      	b.n	8006f1e <__cvt+0x42>
 8006f1c:	2103      	movs	r1, #3
 8006f1e:	ab03      	add	r3, sp, #12
 8006f20:	9301      	str	r3, [sp, #4]
 8006f22:	ab02      	add	r3, sp, #8
 8006f24:	9300      	str	r3, [sp, #0]
 8006f26:	4632      	mov	r2, r6
 8006f28:	4653      	mov	r3, sl
 8006f2a:	ec45 4b10 	vmov	d0, r4, r5
 8006f2e:	f000 fd87 	bl	8007a40 <_dtoa_r>
 8006f32:	2f47      	cmp	r7, #71	; 0x47
 8006f34:	4680      	mov	r8, r0
 8006f36:	d102      	bne.n	8006f3e <__cvt+0x62>
 8006f38:	f019 0f01 	tst.w	r9, #1
 8006f3c:	d026      	beq.n	8006f8c <__cvt+0xb0>
 8006f3e:	2f46      	cmp	r7, #70	; 0x46
 8006f40:	eb08 0906 	add.w	r9, r8, r6
 8006f44:	d111      	bne.n	8006f6a <__cvt+0x8e>
 8006f46:	f898 3000 	ldrb.w	r3, [r8]
 8006f4a:	2b30      	cmp	r3, #48	; 0x30
 8006f4c:	d10a      	bne.n	8006f64 <__cvt+0x88>
 8006f4e:	2200      	movs	r2, #0
 8006f50:	2300      	movs	r3, #0
 8006f52:	4620      	mov	r0, r4
 8006f54:	4629      	mov	r1, r5
 8006f56:	f7f9 fd63 	bl	8000a20 <__aeabi_dcmpeq>
 8006f5a:	b918      	cbnz	r0, 8006f64 <__cvt+0x88>
 8006f5c:	f1c6 0601 	rsb	r6, r6, #1
 8006f60:	f8ca 6000 	str.w	r6, [sl]
 8006f64:	f8da 3000 	ldr.w	r3, [sl]
 8006f68:	4499      	add	r9, r3
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	4620      	mov	r0, r4
 8006f70:	4629      	mov	r1, r5
 8006f72:	f7f9 fd55 	bl	8000a20 <__aeabi_dcmpeq>
 8006f76:	b938      	cbnz	r0, 8006f88 <__cvt+0xac>
 8006f78:	2230      	movs	r2, #48	; 0x30
 8006f7a:	9b03      	ldr	r3, [sp, #12]
 8006f7c:	454b      	cmp	r3, r9
 8006f7e:	d205      	bcs.n	8006f8c <__cvt+0xb0>
 8006f80:	1c59      	adds	r1, r3, #1
 8006f82:	9103      	str	r1, [sp, #12]
 8006f84:	701a      	strb	r2, [r3, #0]
 8006f86:	e7f8      	b.n	8006f7a <__cvt+0x9e>
 8006f88:	f8cd 900c 	str.w	r9, [sp, #12]
 8006f8c:	9b03      	ldr	r3, [sp, #12]
 8006f8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006f90:	eba3 0308 	sub.w	r3, r3, r8
 8006f94:	4640      	mov	r0, r8
 8006f96:	6013      	str	r3, [r2, #0]
 8006f98:	b004      	add	sp, #16
 8006f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006f9e <__exponent>:
 8006f9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006fa0:	2900      	cmp	r1, #0
 8006fa2:	4604      	mov	r4, r0
 8006fa4:	bfba      	itte	lt
 8006fa6:	4249      	neglt	r1, r1
 8006fa8:	232d      	movlt	r3, #45	; 0x2d
 8006faa:	232b      	movge	r3, #43	; 0x2b
 8006fac:	2909      	cmp	r1, #9
 8006fae:	f804 2b02 	strb.w	r2, [r4], #2
 8006fb2:	7043      	strb	r3, [r0, #1]
 8006fb4:	dd20      	ble.n	8006ff8 <__exponent+0x5a>
 8006fb6:	f10d 0307 	add.w	r3, sp, #7
 8006fba:	461f      	mov	r7, r3
 8006fbc:	260a      	movs	r6, #10
 8006fbe:	fb91 f5f6 	sdiv	r5, r1, r6
 8006fc2:	fb06 1115 	mls	r1, r6, r5, r1
 8006fc6:	3130      	adds	r1, #48	; 0x30
 8006fc8:	2d09      	cmp	r5, #9
 8006fca:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006fce:	f103 32ff 	add.w	r2, r3, #4294967295
 8006fd2:	4629      	mov	r1, r5
 8006fd4:	dc09      	bgt.n	8006fea <__exponent+0x4c>
 8006fd6:	3130      	adds	r1, #48	; 0x30
 8006fd8:	3b02      	subs	r3, #2
 8006fda:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006fde:	42bb      	cmp	r3, r7
 8006fe0:	4622      	mov	r2, r4
 8006fe2:	d304      	bcc.n	8006fee <__exponent+0x50>
 8006fe4:	1a10      	subs	r0, r2, r0
 8006fe6:	b003      	add	sp, #12
 8006fe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fea:	4613      	mov	r3, r2
 8006fec:	e7e7      	b.n	8006fbe <__exponent+0x20>
 8006fee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ff2:	f804 2b01 	strb.w	r2, [r4], #1
 8006ff6:	e7f2      	b.n	8006fde <__exponent+0x40>
 8006ff8:	2330      	movs	r3, #48	; 0x30
 8006ffa:	4419      	add	r1, r3
 8006ffc:	7083      	strb	r3, [r0, #2]
 8006ffe:	1d02      	adds	r2, r0, #4
 8007000:	70c1      	strb	r1, [r0, #3]
 8007002:	e7ef      	b.n	8006fe4 <__exponent+0x46>

08007004 <_printf_float>:
 8007004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007008:	b08d      	sub	sp, #52	; 0x34
 800700a:	460c      	mov	r4, r1
 800700c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8007010:	4616      	mov	r6, r2
 8007012:	461f      	mov	r7, r3
 8007014:	4605      	mov	r5, r0
 8007016:	f001 fc45 	bl	80088a4 <_localeconv_r>
 800701a:	6803      	ldr	r3, [r0, #0]
 800701c:	9304      	str	r3, [sp, #16]
 800701e:	4618      	mov	r0, r3
 8007020:	f7f9 f8d2 	bl	80001c8 <strlen>
 8007024:	2300      	movs	r3, #0
 8007026:	930a      	str	r3, [sp, #40]	; 0x28
 8007028:	f8d8 3000 	ldr.w	r3, [r8]
 800702c:	9005      	str	r0, [sp, #20]
 800702e:	3307      	adds	r3, #7
 8007030:	f023 0307 	bic.w	r3, r3, #7
 8007034:	f103 0208 	add.w	r2, r3, #8
 8007038:	f894 a018 	ldrb.w	sl, [r4, #24]
 800703c:	f8d4 b000 	ldr.w	fp, [r4]
 8007040:	f8c8 2000 	str.w	r2, [r8]
 8007044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007048:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800704c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007050:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007054:	9307      	str	r3, [sp, #28]
 8007056:	f8cd 8018 	str.w	r8, [sp, #24]
 800705a:	f04f 32ff 	mov.w	r2, #4294967295
 800705e:	4ba7      	ldr	r3, [pc, #668]	; (80072fc <_printf_float+0x2f8>)
 8007060:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007064:	f7f9 fd0e 	bl	8000a84 <__aeabi_dcmpun>
 8007068:	bb70      	cbnz	r0, 80070c8 <_printf_float+0xc4>
 800706a:	f04f 32ff 	mov.w	r2, #4294967295
 800706e:	4ba3      	ldr	r3, [pc, #652]	; (80072fc <_printf_float+0x2f8>)
 8007070:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007074:	f7f9 fce8 	bl	8000a48 <__aeabi_dcmple>
 8007078:	bb30      	cbnz	r0, 80070c8 <_printf_float+0xc4>
 800707a:	2200      	movs	r2, #0
 800707c:	2300      	movs	r3, #0
 800707e:	4640      	mov	r0, r8
 8007080:	4649      	mov	r1, r9
 8007082:	f7f9 fcd7 	bl	8000a34 <__aeabi_dcmplt>
 8007086:	b110      	cbz	r0, 800708e <_printf_float+0x8a>
 8007088:	232d      	movs	r3, #45	; 0x2d
 800708a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800708e:	4a9c      	ldr	r2, [pc, #624]	; (8007300 <_printf_float+0x2fc>)
 8007090:	4b9c      	ldr	r3, [pc, #624]	; (8007304 <_printf_float+0x300>)
 8007092:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007096:	bf8c      	ite	hi
 8007098:	4690      	movhi	r8, r2
 800709a:	4698      	movls	r8, r3
 800709c:	2303      	movs	r3, #3
 800709e:	f02b 0204 	bic.w	r2, fp, #4
 80070a2:	6123      	str	r3, [r4, #16]
 80070a4:	6022      	str	r2, [r4, #0]
 80070a6:	f04f 0900 	mov.w	r9, #0
 80070aa:	9700      	str	r7, [sp, #0]
 80070ac:	4633      	mov	r3, r6
 80070ae:	aa0b      	add	r2, sp, #44	; 0x2c
 80070b0:	4621      	mov	r1, r4
 80070b2:	4628      	mov	r0, r5
 80070b4:	f000 f9e6 	bl	8007484 <_printf_common>
 80070b8:	3001      	adds	r0, #1
 80070ba:	f040 808d 	bne.w	80071d8 <_printf_float+0x1d4>
 80070be:	f04f 30ff 	mov.w	r0, #4294967295
 80070c2:	b00d      	add	sp, #52	; 0x34
 80070c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070c8:	4642      	mov	r2, r8
 80070ca:	464b      	mov	r3, r9
 80070cc:	4640      	mov	r0, r8
 80070ce:	4649      	mov	r1, r9
 80070d0:	f7f9 fcd8 	bl	8000a84 <__aeabi_dcmpun>
 80070d4:	b110      	cbz	r0, 80070dc <_printf_float+0xd8>
 80070d6:	4a8c      	ldr	r2, [pc, #560]	; (8007308 <_printf_float+0x304>)
 80070d8:	4b8c      	ldr	r3, [pc, #560]	; (800730c <_printf_float+0x308>)
 80070da:	e7da      	b.n	8007092 <_printf_float+0x8e>
 80070dc:	6861      	ldr	r1, [r4, #4]
 80070de:	1c4b      	adds	r3, r1, #1
 80070e0:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80070e4:	a80a      	add	r0, sp, #40	; 0x28
 80070e6:	d13e      	bne.n	8007166 <_printf_float+0x162>
 80070e8:	2306      	movs	r3, #6
 80070ea:	6063      	str	r3, [r4, #4]
 80070ec:	2300      	movs	r3, #0
 80070ee:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80070f2:	ab09      	add	r3, sp, #36	; 0x24
 80070f4:	9300      	str	r3, [sp, #0]
 80070f6:	ec49 8b10 	vmov	d0, r8, r9
 80070fa:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80070fe:	6022      	str	r2, [r4, #0]
 8007100:	f8cd a004 	str.w	sl, [sp, #4]
 8007104:	6861      	ldr	r1, [r4, #4]
 8007106:	4628      	mov	r0, r5
 8007108:	f7ff fee8 	bl	8006edc <__cvt>
 800710c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8007110:	2b47      	cmp	r3, #71	; 0x47
 8007112:	4680      	mov	r8, r0
 8007114:	d109      	bne.n	800712a <_printf_float+0x126>
 8007116:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007118:	1cd8      	adds	r0, r3, #3
 800711a:	db02      	blt.n	8007122 <_printf_float+0x11e>
 800711c:	6862      	ldr	r2, [r4, #4]
 800711e:	4293      	cmp	r3, r2
 8007120:	dd47      	ble.n	80071b2 <_printf_float+0x1ae>
 8007122:	f1aa 0a02 	sub.w	sl, sl, #2
 8007126:	fa5f fa8a 	uxtb.w	sl, sl
 800712a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800712e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007130:	d824      	bhi.n	800717c <_printf_float+0x178>
 8007132:	3901      	subs	r1, #1
 8007134:	4652      	mov	r2, sl
 8007136:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800713a:	9109      	str	r1, [sp, #36]	; 0x24
 800713c:	f7ff ff2f 	bl	8006f9e <__exponent>
 8007140:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007142:	1813      	adds	r3, r2, r0
 8007144:	2a01      	cmp	r2, #1
 8007146:	4681      	mov	r9, r0
 8007148:	6123      	str	r3, [r4, #16]
 800714a:	dc02      	bgt.n	8007152 <_printf_float+0x14e>
 800714c:	6822      	ldr	r2, [r4, #0]
 800714e:	07d1      	lsls	r1, r2, #31
 8007150:	d501      	bpl.n	8007156 <_printf_float+0x152>
 8007152:	3301      	adds	r3, #1
 8007154:	6123      	str	r3, [r4, #16]
 8007156:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800715a:	2b00      	cmp	r3, #0
 800715c:	d0a5      	beq.n	80070aa <_printf_float+0xa6>
 800715e:	232d      	movs	r3, #45	; 0x2d
 8007160:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007164:	e7a1      	b.n	80070aa <_printf_float+0xa6>
 8007166:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800716a:	f000 8177 	beq.w	800745c <_printf_float+0x458>
 800716e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007172:	d1bb      	bne.n	80070ec <_printf_float+0xe8>
 8007174:	2900      	cmp	r1, #0
 8007176:	d1b9      	bne.n	80070ec <_printf_float+0xe8>
 8007178:	2301      	movs	r3, #1
 800717a:	e7b6      	b.n	80070ea <_printf_float+0xe6>
 800717c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8007180:	d119      	bne.n	80071b6 <_printf_float+0x1b2>
 8007182:	2900      	cmp	r1, #0
 8007184:	6863      	ldr	r3, [r4, #4]
 8007186:	dd0c      	ble.n	80071a2 <_printf_float+0x19e>
 8007188:	6121      	str	r1, [r4, #16]
 800718a:	b913      	cbnz	r3, 8007192 <_printf_float+0x18e>
 800718c:	6822      	ldr	r2, [r4, #0]
 800718e:	07d2      	lsls	r2, r2, #31
 8007190:	d502      	bpl.n	8007198 <_printf_float+0x194>
 8007192:	3301      	adds	r3, #1
 8007194:	440b      	add	r3, r1
 8007196:	6123      	str	r3, [r4, #16]
 8007198:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800719a:	65a3      	str	r3, [r4, #88]	; 0x58
 800719c:	f04f 0900 	mov.w	r9, #0
 80071a0:	e7d9      	b.n	8007156 <_printf_float+0x152>
 80071a2:	b913      	cbnz	r3, 80071aa <_printf_float+0x1a6>
 80071a4:	6822      	ldr	r2, [r4, #0]
 80071a6:	07d0      	lsls	r0, r2, #31
 80071a8:	d501      	bpl.n	80071ae <_printf_float+0x1aa>
 80071aa:	3302      	adds	r3, #2
 80071ac:	e7f3      	b.n	8007196 <_printf_float+0x192>
 80071ae:	2301      	movs	r3, #1
 80071b0:	e7f1      	b.n	8007196 <_printf_float+0x192>
 80071b2:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80071b6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80071ba:	4293      	cmp	r3, r2
 80071bc:	db05      	blt.n	80071ca <_printf_float+0x1c6>
 80071be:	6822      	ldr	r2, [r4, #0]
 80071c0:	6123      	str	r3, [r4, #16]
 80071c2:	07d1      	lsls	r1, r2, #31
 80071c4:	d5e8      	bpl.n	8007198 <_printf_float+0x194>
 80071c6:	3301      	adds	r3, #1
 80071c8:	e7e5      	b.n	8007196 <_printf_float+0x192>
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	bfd4      	ite	le
 80071ce:	f1c3 0302 	rsble	r3, r3, #2
 80071d2:	2301      	movgt	r3, #1
 80071d4:	4413      	add	r3, r2
 80071d6:	e7de      	b.n	8007196 <_printf_float+0x192>
 80071d8:	6823      	ldr	r3, [r4, #0]
 80071da:	055a      	lsls	r2, r3, #21
 80071dc:	d407      	bmi.n	80071ee <_printf_float+0x1ea>
 80071de:	6923      	ldr	r3, [r4, #16]
 80071e0:	4642      	mov	r2, r8
 80071e2:	4631      	mov	r1, r6
 80071e4:	4628      	mov	r0, r5
 80071e6:	47b8      	blx	r7
 80071e8:	3001      	adds	r0, #1
 80071ea:	d12b      	bne.n	8007244 <_printf_float+0x240>
 80071ec:	e767      	b.n	80070be <_printf_float+0xba>
 80071ee:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80071f2:	f240 80dc 	bls.w	80073ae <_printf_float+0x3aa>
 80071f6:	2200      	movs	r2, #0
 80071f8:	2300      	movs	r3, #0
 80071fa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80071fe:	f7f9 fc0f 	bl	8000a20 <__aeabi_dcmpeq>
 8007202:	2800      	cmp	r0, #0
 8007204:	d033      	beq.n	800726e <_printf_float+0x26a>
 8007206:	2301      	movs	r3, #1
 8007208:	4a41      	ldr	r2, [pc, #260]	; (8007310 <_printf_float+0x30c>)
 800720a:	4631      	mov	r1, r6
 800720c:	4628      	mov	r0, r5
 800720e:	47b8      	blx	r7
 8007210:	3001      	adds	r0, #1
 8007212:	f43f af54 	beq.w	80070be <_printf_float+0xba>
 8007216:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800721a:	429a      	cmp	r2, r3
 800721c:	db02      	blt.n	8007224 <_printf_float+0x220>
 800721e:	6823      	ldr	r3, [r4, #0]
 8007220:	07d8      	lsls	r0, r3, #31
 8007222:	d50f      	bpl.n	8007244 <_printf_float+0x240>
 8007224:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007228:	4631      	mov	r1, r6
 800722a:	4628      	mov	r0, r5
 800722c:	47b8      	blx	r7
 800722e:	3001      	adds	r0, #1
 8007230:	f43f af45 	beq.w	80070be <_printf_float+0xba>
 8007234:	f04f 0800 	mov.w	r8, #0
 8007238:	f104 091a 	add.w	r9, r4, #26
 800723c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800723e:	3b01      	subs	r3, #1
 8007240:	4543      	cmp	r3, r8
 8007242:	dc09      	bgt.n	8007258 <_printf_float+0x254>
 8007244:	6823      	ldr	r3, [r4, #0]
 8007246:	079b      	lsls	r3, r3, #30
 8007248:	f100 8103 	bmi.w	8007452 <_printf_float+0x44e>
 800724c:	68e0      	ldr	r0, [r4, #12]
 800724e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007250:	4298      	cmp	r0, r3
 8007252:	bfb8      	it	lt
 8007254:	4618      	movlt	r0, r3
 8007256:	e734      	b.n	80070c2 <_printf_float+0xbe>
 8007258:	2301      	movs	r3, #1
 800725a:	464a      	mov	r2, r9
 800725c:	4631      	mov	r1, r6
 800725e:	4628      	mov	r0, r5
 8007260:	47b8      	blx	r7
 8007262:	3001      	adds	r0, #1
 8007264:	f43f af2b 	beq.w	80070be <_printf_float+0xba>
 8007268:	f108 0801 	add.w	r8, r8, #1
 800726c:	e7e6      	b.n	800723c <_printf_float+0x238>
 800726e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007270:	2b00      	cmp	r3, #0
 8007272:	dc2b      	bgt.n	80072cc <_printf_float+0x2c8>
 8007274:	2301      	movs	r3, #1
 8007276:	4a26      	ldr	r2, [pc, #152]	; (8007310 <_printf_float+0x30c>)
 8007278:	4631      	mov	r1, r6
 800727a:	4628      	mov	r0, r5
 800727c:	47b8      	blx	r7
 800727e:	3001      	adds	r0, #1
 8007280:	f43f af1d 	beq.w	80070be <_printf_float+0xba>
 8007284:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007286:	b923      	cbnz	r3, 8007292 <_printf_float+0x28e>
 8007288:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800728a:	b913      	cbnz	r3, 8007292 <_printf_float+0x28e>
 800728c:	6823      	ldr	r3, [r4, #0]
 800728e:	07d9      	lsls	r1, r3, #31
 8007290:	d5d8      	bpl.n	8007244 <_printf_float+0x240>
 8007292:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007296:	4631      	mov	r1, r6
 8007298:	4628      	mov	r0, r5
 800729a:	47b8      	blx	r7
 800729c:	3001      	adds	r0, #1
 800729e:	f43f af0e 	beq.w	80070be <_printf_float+0xba>
 80072a2:	f04f 0900 	mov.w	r9, #0
 80072a6:	f104 0a1a 	add.w	sl, r4, #26
 80072aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072ac:	425b      	negs	r3, r3
 80072ae:	454b      	cmp	r3, r9
 80072b0:	dc01      	bgt.n	80072b6 <_printf_float+0x2b2>
 80072b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072b4:	e794      	b.n	80071e0 <_printf_float+0x1dc>
 80072b6:	2301      	movs	r3, #1
 80072b8:	4652      	mov	r2, sl
 80072ba:	4631      	mov	r1, r6
 80072bc:	4628      	mov	r0, r5
 80072be:	47b8      	blx	r7
 80072c0:	3001      	adds	r0, #1
 80072c2:	f43f aefc 	beq.w	80070be <_printf_float+0xba>
 80072c6:	f109 0901 	add.w	r9, r9, #1
 80072ca:	e7ee      	b.n	80072aa <_printf_float+0x2a6>
 80072cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80072ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80072d0:	429a      	cmp	r2, r3
 80072d2:	bfa8      	it	ge
 80072d4:	461a      	movge	r2, r3
 80072d6:	2a00      	cmp	r2, #0
 80072d8:	4691      	mov	r9, r2
 80072da:	dd07      	ble.n	80072ec <_printf_float+0x2e8>
 80072dc:	4613      	mov	r3, r2
 80072de:	4631      	mov	r1, r6
 80072e0:	4642      	mov	r2, r8
 80072e2:	4628      	mov	r0, r5
 80072e4:	47b8      	blx	r7
 80072e6:	3001      	adds	r0, #1
 80072e8:	f43f aee9 	beq.w	80070be <_printf_float+0xba>
 80072ec:	f104 031a 	add.w	r3, r4, #26
 80072f0:	f04f 0b00 	mov.w	fp, #0
 80072f4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80072f8:	9306      	str	r3, [sp, #24]
 80072fa:	e015      	b.n	8007328 <_printf_float+0x324>
 80072fc:	7fefffff 	.word	0x7fefffff
 8007300:	080094b0 	.word	0x080094b0
 8007304:	080094ac 	.word	0x080094ac
 8007308:	080094b8 	.word	0x080094b8
 800730c:	080094b4 	.word	0x080094b4
 8007310:	080094bc 	.word	0x080094bc
 8007314:	2301      	movs	r3, #1
 8007316:	9a06      	ldr	r2, [sp, #24]
 8007318:	4631      	mov	r1, r6
 800731a:	4628      	mov	r0, r5
 800731c:	47b8      	blx	r7
 800731e:	3001      	adds	r0, #1
 8007320:	f43f aecd 	beq.w	80070be <_printf_float+0xba>
 8007324:	f10b 0b01 	add.w	fp, fp, #1
 8007328:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800732c:	ebaa 0309 	sub.w	r3, sl, r9
 8007330:	455b      	cmp	r3, fp
 8007332:	dcef      	bgt.n	8007314 <_printf_float+0x310>
 8007334:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007338:	429a      	cmp	r2, r3
 800733a:	44d0      	add	r8, sl
 800733c:	db15      	blt.n	800736a <_printf_float+0x366>
 800733e:	6823      	ldr	r3, [r4, #0]
 8007340:	07da      	lsls	r2, r3, #31
 8007342:	d412      	bmi.n	800736a <_printf_float+0x366>
 8007344:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007346:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007348:	eba3 020a 	sub.w	r2, r3, sl
 800734c:	eba3 0a01 	sub.w	sl, r3, r1
 8007350:	4592      	cmp	sl, r2
 8007352:	bfa8      	it	ge
 8007354:	4692      	movge	sl, r2
 8007356:	f1ba 0f00 	cmp.w	sl, #0
 800735a:	dc0e      	bgt.n	800737a <_printf_float+0x376>
 800735c:	f04f 0800 	mov.w	r8, #0
 8007360:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007364:	f104 091a 	add.w	r9, r4, #26
 8007368:	e019      	b.n	800739e <_printf_float+0x39a>
 800736a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800736e:	4631      	mov	r1, r6
 8007370:	4628      	mov	r0, r5
 8007372:	47b8      	blx	r7
 8007374:	3001      	adds	r0, #1
 8007376:	d1e5      	bne.n	8007344 <_printf_float+0x340>
 8007378:	e6a1      	b.n	80070be <_printf_float+0xba>
 800737a:	4653      	mov	r3, sl
 800737c:	4642      	mov	r2, r8
 800737e:	4631      	mov	r1, r6
 8007380:	4628      	mov	r0, r5
 8007382:	47b8      	blx	r7
 8007384:	3001      	adds	r0, #1
 8007386:	d1e9      	bne.n	800735c <_printf_float+0x358>
 8007388:	e699      	b.n	80070be <_printf_float+0xba>
 800738a:	2301      	movs	r3, #1
 800738c:	464a      	mov	r2, r9
 800738e:	4631      	mov	r1, r6
 8007390:	4628      	mov	r0, r5
 8007392:	47b8      	blx	r7
 8007394:	3001      	adds	r0, #1
 8007396:	f43f ae92 	beq.w	80070be <_printf_float+0xba>
 800739a:	f108 0801 	add.w	r8, r8, #1
 800739e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80073a2:	1a9b      	subs	r3, r3, r2
 80073a4:	eba3 030a 	sub.w	r3, r3, sl
 80073a8:	4543      	cmp	r3, r8
 80073aa:	dcee      	bgt.n	800738a <_printf_float+0x386>
 80073ac:	e74a      	b.n	8007244 <_printf_float+0x240>
 80073ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80073b0:	2a01      	cmp	r2, #1
 80073b2:	dc01      	bgt.n	80073b8 <_printf_float+0x3b4>
 80073b4:	07db      	lsls	r3, r3, #31
 80073b6:	d53a      	bpl.n	800742e <_printf_float+0x42a>
 80073b8:	2301      	movs	r3, #1
 80073ba:	4642      	mov	r2, r8
 80073bc:	4631      	mov	r1, r6
 80073be:	4628      	mov	r0, r5
 80073c0:	47b8      	blx	r7
 80073c2:	3001      	adds	r0, #1
 80073c4:	f43f ae7b 	beq.w	80070be <_printf_float+0xba>
 80073c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80073cc:	4631      	mov	r1, r6
 80073ce:	4628      	mov	r0, r5
 80073d0:	47b8      	blx	r7
 80073d2:	3001      	adds	r0, #1
 80073d4:	f108 0801 	add.w	r8, r8, #1
 80073d8:	f43f ae71 	beq.w	80070be <_printf_float+0xba>
 80073dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073de:	2200      	movs	r2, #0
 80073e0:	f103 3aff 	add.w	sl, r3, #4294967295
 80073e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80073e8:	2300      	movs	r3, #0
 80073ea:	f7f9 fb19 	bl	8000a20 <__aeabi_dcmpeq>
 80073ee:	b9c8      	cbnz	r0, 8007424 <_printf_float+0x420>
 80073f0:	4653      	mov	r3, sl
 80073f2:	4642      	mov	r2, r8
 80073f4:	4631      	mov	r1, r6
 80073f6:	4628      	mov	r0, r5
 80073f8:	47b8      	blx	r7
 80073fa:	3001      	adds	r0, #1
 80073fc:	d10e      	bne.n	800741c <_printf_float+0x418>
 80073fe:	e65e      	b.n	80070be <_printf_float+0xba>
 8007400:	2301      	movs	r3, #1
 8007402:	4652      	mov	r2, sl
 8007404:	4631      	mov	r1, r6
 8007406:	4628      	mov	r0, r5
 8007408:	47b8      	blx	r7
 800740a:	3001      	adds	r0, #1
 800740c:	f43f ae57 	beq.w	80070be <_printf_float+0xba>
 8007410:	f108 0801 	add.w	r8, r8, #1
 8007414:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007416:	3b01      	subs	r3, #1
 8007418:	4543      	cmp	r3, r8
 800741a:	dcf1      	bgt.n	8007400 <_printf_float+0x3fc>
 800741c:	464b      	mov	r3, r9
 800741e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007422:	e6de      	b.n	80071e2 <_printf_float+0x1de>
 8007424:	f04f 0800 	mov.w	r8, #0
 8007428:	f104 0a1a 	add.w	sl, r4, #26
 800742c:	e7f2      	b.n	8007414 <_printf_float+0x410>
 800742e:	2301      	movs	r3, #1
 8007430:	e7df      	b.n	80073f2 <_printf_float+0x3ee>
 8007432:	2301      	movs	r3, #1
 8007434:	464a      	mov	r2, r9
 8007436:	4631      	mov	r1, r6
 8007438:	4628      	mov	r0, r5
 800743a:	47b8      	blx	r7
 800743c:	3001      	adds	r0, #1
 800743e:	f43f ae3e 	beq.w	80070be <_printf_float+0xba>
 8007442:	f108 0801 	add.w	r8, r8, #1
 8007446:	68e3      	ldr	r3, [r4, #12]
 8007448:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800744a:	1a9b      	subs	r3, r3, r2
 800744c:	4543      	cmp	r3, r8
 800744e:	dcf0      	bgt.n	8007432 <_printf_float+0x42e>
 8007450:	e6fc      	b.n	800724c <_printf_float+0x248>
 8007452:	f04f 0800 	mov.w	r8, #0
 8007456:	f104 0919 	add.w	r9, r4, #25
 800745a:	e7f4      	b.n	8007446 <_printf_float+0x442>
 800745c:	2900      	cmp	r1, #0
 800745e:	f43f ae8b 	beq.w	8007178 <_printf_float+0x174>
 8007462:	2300      	movs	r3, #0
 8007464:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007468:	ab09      	add	r3, sp, #36	; 0x24
 800746a:	9300      	str	r3, [sp, #0]
 800746c:	ec49 8b10 	vmov	d0, r8, r9
 8007470:	6022      	str	r2, [r4, #0]
 8007472:	f8cd a004 	str.w	sl, [sp, #4]
 8007476:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800747a:	4628      	mov	r0, r5
 800747c:	f7ff fd2e 	bl	8006edc <__cvt>
 8007480:	4680      	mov	r8, r0
 8007482:	e648      	b.n	8007116 <_printf_float+0x112>

08007484 <_printf_common>:
 8007484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007488:	4691      	mov	r9, r2
 800748a:	461f      	mov	r7, r3
 800748c:	688a      	ldr	r2, [r1, #8]
 800748e:	690b      	ldr	r3, [r1, #16]
 8007490:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007494:	4293      	cmp	r3, r2
 8007496:	bfb8      	it	lt
 8007498:	4613      	movlt	r3, r2
 800749a:	f8c9 3000 	str.w	r3, [r9]
 800749e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80074a2:	4606      	mov	r6, r0
 80074a4:	460c      	mov	r4, r1
 80074a6:	b112      	cbz	r2, 80074ae <_printf_common+0x2a>
 80074a8:	3301      	adds	r3, #1
 80074aa:	f8c9 3000 	str.w	r3, [r9]
 80074ae:	6823      	ldr	r3, [r4, #0]
 80074b0:	0699      	lsls	r1, r3, #26
 80074b2:	bf42      	ittt	mi
 80074b4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80074b8:	3302      	addmi	r3, #2
 80074ba:	f8c9 3000 	strmi.w	r3, [r9]
 80074be:	6825      	ldr	r5, [r4, #0]
 80074c0:	f015 0506 	ands.w	r5, r5, #6
 80074c4:	d107      	bne.n	80074d6 <_printf_common+0x52>
 80074c6:	f104 0a19 	add.w	sl, r4, #25
 80074ca:	68e3      	ldr	r3, [r4, #12]
 80074cc:	f8d9 2000 	ldr.w	r2, [r9]
 80074d0:	1a9b      	subs	r3, r3, r2
 80074d2:	42ab      	cmp	r3, r5
 80074d4:	dc28      	bgt.n	8007528 <_printf_common+0xa4>
 80074d6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80074da:	6822      	ldr	r2, [r4, #0]
 80074dc:	3300      	adds	r3, #0
 80074de:	bf18      	it	ne
 80074e0:	2301      	movne	r3, #1
 80074e2:	0692      	lsls	r2, r2, #26
 80074e4:	d42d      	bmi.n	8007542 <_printf_common+0xbe>
 80074e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80074ea:	4639      	mov	r1, r7
 80074ec:	4630      	mov	r0, r6
 80074ee:	47c0      	blx	r8
 80074f0:	3001      	adds	r0, #1
 80074f2:	d020      	beq.n	8007536 <_printf_common+0xb2>
 80074f4:	6823      	ldr	r3, [r4, #0]
 80074f6:	68e5      	ldr	r5, [r4, #12]
 80074f8:	f8d9 2000 	ldr.w	r2, [r9]
 80074fc:	f003 0306 	and.w	r3, r3, #6
 8007500:	2b04      	cmp	r3, #4
 8007502:	bf08      	it	eq
 8007504:	1aad      	subeq	r5, r5, r2
 8007506:	68a3      	ldr	r3, [r4, #8]
 8007508:	6922      	ldr	r2, [r4, #16]
 800750a:	bf0c      	ite	eq
 800750c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007510:	2500      	movne	r5, #0
 8007512:	4293      	cmp	r3, r2
 8007514:	bfc4      	itt	gt
 8007516:	1a9b      	subgt	r3, r3, r2
 8007518:	18ed      	addgt	r5, r5, r3
 800751a:	f04f 0900 	mov.w	r9, #0
 800751e:	341a      	adds	r4, #26
 8007520:	454d      	cmp	r5, r9
 8007522:	d11a      	bne.n	800755a <_printf_common+0xd6>
 8007524:	2000      	movs	r0, #0
 8007526:	e008      	b.n	800753a <_printf_common+0xb6>
 8007528:	2301      	movs	r3, #1
 800752a:	4652      	mov	r2, sl
 800752c:	4639      	mov	r1, r7
 800752e:	4630      	mov	r0, r6
 8007530:	47c0      	blx	r8
 8007532:	3001      	adds	r0, #1
 8007534:	d103      	bne.n	800753e <_printf_common+0xba>
 8007536:	f04f 30ff 	mov.w	r0, #4294967295
 800753a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800753e:	3501      	adds	r5, #1
 8007540:	e7c3      	b.n	80074ca <_printf_common+0x46>
 8007542:	18e1      	adds	r1, r4, r3
 8007544:	1c5a      	adds	r2, r3, #1
 8007546:	2030      	movs	r0, #48	; 0x30
 8007548:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800754c:	4422      	add	r2, r4
 800754e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007552:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007556:	3302      	adds	r3, #2
 8007558:	e7c5      	b.n	80074e6 <_printf_common+0x62>
 800755a:	2301      	movs	r3, #1
 800755c:	4622      	mov	r2, r4
 800755e:	4639      	mov	r1, r7
 8007560:	4630      	mov	r0, r6
 8007562:	47c0      	blx	r8
 8007564:	3001      	adds	r0, #1
 8007566:	d0e6      	beq.n	8007536 <_printf_common+0xb2>
 8007568:	f109 0901 	add.w	r9, r9, #1
 800756c:	e7d8      	b.n	8007520 <_printf_common+0x9c>
	...

08007570 <_puts_r>:
 8007570:	b570      	push	{r4, r5, r6, lr}
 8007572:	460e      	mov	r6, r1
 8007574:	4605      	mov	r5, r0
 8007576:	b118      	cbz	r0, 8007580 <_puts_r+0x10>
 8007578:	6983      	ldr	r3, [r0, #24]
 800757a:	b90b      	cbnz	r3, 8007580 <_puts_r+0x10>
 800757c:	f001 f908 	bl	8008790 <__sinit>
 8007580:	69ab      	ldr	r3, [r5, #24]
 8007582:	68ac      	ldr	r4, [r5, #8]
 8007584:	b913      	cbnz	r3, 800758c <_puts_r+0x1c>
 8007586:	4628      	mov	r0, r5
 8007588:	f001 f902 	bl	8008790 <__sinit>
 800758c:	4b23      	ldr	r3, [pc, #140]	; (800761c <_puts_r+0xac>)
 800758e:	429c      	cmp	r4, r3
 8007590:	d117      	bne.n	80075c2 <_puts_r+0x52>
 8007592:	686c      	ldr	r4, [r5, #4]
 8007594:	89a3      	ldrh	r3, [r4, #12]
 8007596:	071b      	lsls	r3, r3, #28
 8007598:	d51d      	bpl.n	80075d6 <_puts_r+0x66>
 800759a:	6923      	ldr	r3, [r4, #16]
 800759c:	b1db      	cbz	r3, 80075d6 <_puts_r+0x66>
 800759e:	3e01      	subs	r6, #1
 80075a0:	68a3      	ldr	r3, [r4, #8]
 80075a2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80075a6:	3b01      	subs	r3, #1
 80075a8:	60a3      	str	r3, [r4, #8]
 80075aa:	b9e9      	cbnz	r1, 80075e8 <_puts_r+0x78>
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	da2e      	bge.n	800760e <_puts_r+0x9e>
 80075b0:	4622      	mov	r2, r4
 80075b2:	210a      	movs	r1, #10
 80075b4:	4628      	mov	r0, r5
 80075b6:	f000 f8f5 	bl	80077a4 <__swbuf_r>
 80075ba:	3001      	adds	r0, #1
 80075bc:	d011      	beq.n	80075e2 <_puts_r+0x72>
 80075be:	200a      	movs	r0, #10
 80075c0:	e011      	b.n	80075e6 <_puts_r+0x76>
 80075c2:	4b17      	ldr	r3, [pc, #92]	; (8007620 <_puts_r+0xb0>)
 80075c4:	429c      	cmp	r4, r3
 80075c6:	d101      	bne.n	80075cc <_puts_r+0x5c>
 80075c8:	68ac      	ldr	r4, [r5, #8]
 80075ca:	e7e3      	b.n	8007594 <_puts_r+0x24>
 80075cc:	4b15      	ldr	r3, [pc, #84]	; (8007624 <_puts_r+0xb4>)
 80075ce:	429c      	cmp	r4, r3
 80075d0:	bf08      	it	eq
 80075d2:	68ec      	ldreq	r4, [r5, #12]
 80075d4:	e7de      	b.n	8007594 <_puts_r+0x24>
 80075d6:	4621      	mov	r1, r4
 80075d8:	4628      	mov	r0, r5
 80075da:	f000 f935 	bl	8007848 <__swsetup_r>
 80075de:	2800      	cmp	r0, #0
 80075e0:	d0dd      	beq.n	800759e <_puts_r+0x2e>
 80075e2:	f04f 30ff 	mov.w	r0, #4294967295
 80075e6:	bd70      	pop	{r4, r5, r6, pc}
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	da04      	bge.n	80075f6 <_puts_r+0x86>
 80075ec:	69a2      	ldr	r2, [r4, #24]
 80075ee:	429a      	cmp	r2, r3
 80075f0:	dc06      	bgt.n	8007600 <_puts_r+0x90>
 80075f2:	290a      	cmp	r1, #10
 80075f4:	d004      	beq.n	8007600 <_puts_r+0x90>
 80075f6:	6823      	ldr	r3, [r4, #0]
 80075f8:	1c5a      	adds	r2, r3, #1
 80075fa:	6022      	str	r2, [r4, #0]
 80075fc:	7019      	strb	r1, [r3, #0]
 80075fe:	e7cf      	b.n	80075a0 <_puts_r+0x30>
 8007600:	4622      	mov	r2, r4
 8007602:	4628      	mov	r0, r5
 8007604:	f000 f8ce 	bl	80077a4 <__swbuf_r>
 8007608:	3001      	adds	r0, #1
 800760a:	d1c9      	bne.n	80075a0 <_puts_r+0x30>
 800760c:	e7e9      	b.n	80075e2 <_puts_r+0x72>
 800760e:	6823      	ldr	r3, [r4, #0]
 8007610:	200a      	movs	r0, #10
 8007612:	1c5a      	adds	r2, r3, #1
 8007614:	6022      	str	r2, [r4, #0]
 8007616:	7018      	strb	r0, [r3, #0]
 8007618:	e7e5      	b.n	80075e6 <_puts_r+0x76>
 800761a:	bf00      	nop
 800761c:	080094ec 	.word	0x080094ec
 8007620:	0800950c 	.word	0x0800950c
 8007624:	080094cc 	.word	0x080094cc

08007628 <puts>:
 8007628:	4b02      	ldr	r3, [pc, #8]	; (8007634 <puts+0xc>)
 800762a:	4601      	mov	r1, r0
 800762c:	6818      	ldr	r0, [r3, #0]
 800762e:	f7ff bf9f 	b.w	8007570 <_puts_r>
 8007632:	bf00      	nop
 8007634:	20000018 	.word	0x20000018

08007638 <setbuf>:
 8007638:	2900      	cmp	r1, #0
 800763a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800763e:	bf0c      	ite	eq
 8007640:	2202      	moveq	r2, #2
 8007642:	2200      	movne	r2, #0
 8007644:	f000 b800 	b.w	8007648 <setvbuf>

08007648 <setvbuf>:
 8007648:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800764c:	461d      	mov	r5, r3
 800764e:	4b51      	ldr	r3, [pc, #324]	; (8007794 <setvbuf+0x14c>)
 8007650:	681e      	ldr	r6, [r3, #0]
 8007652:	4604      	mov	r4, r0
 8007654:	460f      	mov	r7, r1
 8007656:	4690      	mov	r8, r2
 8007658:	b126      	cbz	r6, 8007664 <setvbuf+0x1c>
 800765a:	69b3      	ldr	r3, [r6, #24]
 800765c:	b913      	cbnz	r3, 8007664 <setvbuf+0x1c>
 800765e:	4630      	mov	r0, r6
 8007660:	f001 f896 	bl	8008790 <__sinit>
 8007664:	4b4c      	ldr	r3, [pc, #304]	; (8007798 <setvbuf+0x150>)
 8007666:	429c      	cmp	r4, r3
 8007668:	d152      	bne.n	8007710 <setvbuf+0xc8>
 800766a:	6874      	ldr	r4, [r6, #4]
 800766c:	f1b8 0f02 	cmp.w	r8, #2
 8007670:	d006      	beq.n	8007680 <setvbuf+0x38>
 8007672:	f1b8 0f01 	cmp.w	r8, #1
 8007676:	f200 8089 	bhi.w	800778c <setvbuf+0x144>
 800767a:	2d00      	cmp	r5, #0
 800767c:	f2c0 8086 	blt.w	800778c <setvbuf+0x144>
 8007680:	4621      	mov	r1, r4
 8007682:	4630      	mov	r0, r6
 8007684:	f001 f81a 	bl	80086bc <_fflush_r>
 8007688:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800768a:	b141      	cbz	r1, 800769e <setvbuf+0x56>
 800768c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007690:	4299      	cmp	r1, r3
 8007692:	d002      	beq.n	800769a <setvbuf+0x52>
 8007694:	4630      	mov	r0, r6
 8007696:	f001 fc73 	bl	8008f80 <_free_r>
 800769a:	2300      	movs	r3, #0
 800769c:	6363      	str	r3, [r4, #52]	; 0x34
 800769e:	2300      	movs	r3, #0
 80076a0:	61a3      	str	r3, [r4, #24]
 80076a2:	6063      	str	r3, [r4, #4]
 80076a4:	89a3      	ldrh	r3, [r4, #12]
 80076a6:	061b      	lsls	r3, r3, #24
 80076a8:	d503      	bpl.n	80076b2 <setvbuf+0x6a>
 80076aa:	6921      	ldr	r1, [r4, #16]
 80076ac:	4630      	mov	r0, r6
 80076ae:	f001 fc67 	bl	8008f80 <_free_r>
 80076b2:	89a3      	ldrh	r3, [r4, #12]
 80076b4:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80076b8:	f023 0303 	bic.w	r3, r3, #3
 80076bc:	f1b8 0f02 	cmp.w	r8, #2
 80076c0:	81a3      	strh	r3, [r4, #12]
 80076c2:	d05d      	beq.n	8007780 <setvbuf+0x138>
 80076c4:	ab01      	add	r3, sp, #4
 80076c6:	466a      	mov	r2, sp
 80076c8:	4621      	mov	r1, r4
 80076ca:	4630      	mov	r0, r6
 80076cc:	f001 f8f8 	bl	80088c0 <__swhatbuf_r>
 80076d0:	89a3      	ldrh	r3, [r4, #12]
 80076d2:	4318      	orrs	r0, r3
 80076d4:	81a0      	strh	r0, [r4, #12]
 80076d6:	bb2d      	cbnz	r5, 8007724 <setvbuf+0xdc>
 80076d8:	9d00      	ldr	r5, [sp, #0]
 80076da:	4628      	mov	r0, r5
 80076dc:	f001 f954 	bl	8008988 <malloc>
 80076e0:	4607      	mov	r7, r0
 80076e2:	2800      	cmp	r0, #0
 80076e4:	d14e      	bne.n	8007784 <setvbuf+0x13c>
 80076e6:	f8dd 9000 	ldr.w	r9, [sp]
 80076ea:	45a9      	cmp	r9, r5
 80076ec:	d13c      	bne.n	8007768 <setvbuf+0x120>
 80076ee:	f04f 30ff 	mov.w	r0, #4294967295
 80076f2:	89a3      	ldrh	r3, [r4, #12]
 80076f4:	f043 0302 	orr.w	r3, r3, #2
 80076f8:	81a3      	strh	r3, [r4, #12]
 80076fa:	2300      	movs	r3, #0
 80076fc:	60a3      	str	r3, [r4, #8]
 80076fe:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007702:	6023      	str	r3, [r4, #0]
 8007704:	6123      	str	r3, [r4, #16]
 8007706:	2301      	movs	r3, #1
 8007708:	6163      	str	r3, [r4, #20]
 800770a:	b003      	add	sp, #12
 800770c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007710:	4b22      	ldr	r3, [pc, #136]	; (800779c <setvbuf+0x154>)
 8007712:	429c      	cmp	r4, r3
 8007714:	d101      	bne.n	800771a <setvbuf+0xd2>
 8007716:	68b4      	ldr	r4, [r6, #8]
 8007718:	e7a8      	b.n	800766c <setvbuf+0x24>
 800771a:	4b21      	ldr	r3, [pc, #132]	; (80077a0 <setvbuf+0x158>)
 800771c:	429c      	cmp	r4, r3
 800771e:	bf08      	it	eq
 8007720:	68f4      	ldreq	r4, [r6, #12]
 8007722:	e7a3      	b.n	800766c <setvbuf+0x24>
 8007724:	2f00      	cmp	r7, #0
 8007726:	d0d8      	beq.n	80076da <setvbuf+0x92>
 8007728:	69b3      	ldr	r3, [r6, #24]
 800772a:	b913      	cbnz	r3, 8007732 <setvbuf+0xea>
 800772c:	4630      	mov	r0, r6
 800772e:	f001 f82f 	bl	8008790 <__sinit>
 8007732:	f1b8 0f01 	cmp.w	r8, #1
 8007736:	bf08      	it	eq
 8007738:	89a3      	ldrheq	r3, [r4, #12]
 800773a:	6027      	str	r7, [r4, #0]
 800773c:	bf04      	itt	eq
 800773e:	f043 0301 	orreq.w	r3, r3, #1
 8007742:	81a3      	strheq	r3, [r4, #12]
 8007744:	89a3      	ldrh	r3, [r4, #12]
 8007746:	f013 0008 	ands.w	r0, r3, #8
 800774a:	e9c4 7504 	strd	r7, r5, [r4, #16]
 800774e:	d01b      	beq.n	8007788 <setvbuf+0x140>
 8007750:	f013 0001 	ands.w	r0, r3, #1
 8007754:	bf18      	it	ne
 8007756:	426d      	negne	r5, r5
 8007758:	f04f 0300 	mov.w	r3, #0
 800775c:	bf1d      	ittte	ne
 800775e:	60a3      	strne	r3, [r4, #8]
 8007760:	61a5      	strne	r5, [r4, #24]
 8007762:	4618      	movne	r0, r3
 8007764:	60a5      	streq	r5, [r4, #8]
 8007766:	e7d0      	b.n	800770a <setvbuf+0xc2>
 8007768:	4648      	mov	r0, r9
 800776a:	f001 f90d 	bl	8008988 <malloc>
 800776e:	4607      	mov	r7, r0
 8007770:	2800      	cmp	r0, #0
 8007772:	d0bc      	beq.n	80076ee <setvbuf+0xa6>
 8007774:	89a3      	ldrh	r3, [r4, #12]
 8007776:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800777a:	81a3      	strh	r3, [r4, #12]
 800777c:	464d      	mov	r5, r9
 800777e:	e7d3      	b.n	8007728 <setvbuf+0xe0>
 8007780:	2000      	movs	r0, #0
 8007782:	e7b6      	b.n	80076f2 <setvbuf+0xaa>
 8007784:	46a9      	mov	r9, r5
 8007786:	e7f5      	b.n	8007774 <setvbuf+0x12c>
 8007788:	60a0      	str	r0, [r4, #8]
 800778a:	e7be      	b.n	800770a <setvbuf+0xc2>
 800778c:	f04f 30ff 	mov.w	r0, #4294967295
 8007790:	e7bb      	b.n	800770a <setvbuf+0xc2>
 8007792:	bf00      	nop
 8007794:	20000018 	.word	0x20000018
 8007798:	080094ec 	.word	0x080094ec
 800779c:	0800950c 	.word	0x0800950c
 80077a0:	080094cc 	.word	0x080094cc

080077a4 <__swbuf_r>:
 80077a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077a6:	460e      	mov	r6, r1
 80077a8:	4614      	mov	r4, r2
 80077aa:	4605      	mov	r5, r0
 80077ac:	b118      	cbz	r0, 80077b6 <__swbuf_r+0x12>
 80077ae:	6983      	ldr	r3, [r0, #24]
 80077b0:	b90b      	cbnz	r3, 80077b6 <__swbuf_r+0x12>
 80077b2:	f000 ffed 	bl	8008790 <__sinit>
 80077b6:	4b21      	ldr	r3, [pc, #132]	; (800783c <__swbuf_r+0x98>)
 80077b8:	429c      	cmp	r4, r3
 80077ba:	d12a      	bne.n	8007812 <__swbuf_r+0x6e>
 80077bc:	686c      	ldr	r4, [r5, #4]
 80077be:	69a3      	ldr	r3, [r4, #24]
 80077c0:	60a3      	str	r3, [r4, #8]
 80077c2:	89a3      	ldrh	r3, [r4, #12]
 80077c4:	071a      	lsls	r2, r3, #28
 80077c6:	d52e      	bpl.n	8007826 <__swbuf_r+0x82>
 80077c8:	6923      	ldr	r3, [r4, #16]
 80077ca:	b363      	cbz	r3, 8007826 <__swbuf_r+0x82>
 80077cc:	6923      	ldr	r3, [r4, #16]
 80077ce:	6820      	ldr	r0, [r4, #0]
 80077d0:	1ac0      	subs	r0, r0, r3
 80077d2:	6963      	ldr	r3, [r4, #20]
 80077d4:	b2f6      	uxtb	r6, r6
 80077d6:	4283      	cmp	r3, r0
 80077d8:	4637      	mov	r7, r6
 80077da:	dc04      	bgt.n	80077e6 <__swbuf_r+0x42>
 80077dc:	4621      	mov	r1, r4
 80077de:	4628      	mov	r0, r5
 80077e0:	f000 ff6c 	bl	80086bc <_fflush_r>
 80077e4:	bb28      	cbnz	r0, 8007832 <__swbuf_r+0x8e>
 80077e6:	68a3      	ldr	r3, [r4, #8]
 80077e8:	3b01      	subs	r3, #1
 80077ea:	60a3      	str	r3, [r4, #8]
 80077ec:	6823      	ldr	r3, [r4, #0]
 80077ee:	1c5a      	adds	r2, r3, #1
 80077f0:	6022      	str	r2, [r4, #0]
 80077f2:	701e      	strb	r6, [r3, #0]
 80077f4:	6963      	ldr	r3, [r4, #20]
 80077f6:	3001      	adds	r0, #1
 80077f8:	4283      	cmp	r3, r0
 80077fa:	d004      	beq.n	8007806 <__swbuf_r+0x62>
 80077fc:	89a3      	ldrh	r3, [r4, #12]
 80077fe:	07db      	lsls	r3, r3, #31
 8007800:	d519      	bpl.n	8007836 <__swbuf_r+0x92>
 8007802:	2e0a      	cmp	r6, #10
 8007804:	d117      	bne.n	8007836 <__swbuf_r+0x92>
 8007806:	4621      	mov	r1, r4
 8007808:	4628      	mov	r0, r5
 800780a:	f000 ff57 	bl	80086bc <_fflush_r>
 800780e:	b190      	cbz	r0, 8007836 <__swbuf_r+0x92>
 8007810:	e00f      	b.n	8007832 <__swbuf_r+0x8e>
 8007812:	4b0b      	ldr	r3, [pc, #44]	; (8007840 <__swbuf_r+0x9c>)
 8007814:	429c      	cmp	r4, r3
 8007816:	d101      	bne.n	800781c <__swbuf_r+0x78>
 8007818:	68ac      	ldr	r4, [r5, #8]
 800781a:	e7d0      	b.n	80077be <__swbuf_r+0x1a>
 800781c:	4b09      	ldr	r3, [pc, #36]	; (8007844 <__swbuf_r+0xa0>)
 800781e:	429c      	cmp	r4, r3
 8007820:	bf08      	it	eq
 8007822:	68ec      	ldreq	r4, [r5, #12]
 8007824:	e7cb      	b.n	80077be <__swbuf_r+0x1a>
 8007826:	4621      	mov	r1, r4
 8007828:	4628      	mov	r0, r5
 800782a:	f000 f80d 	bl	8007848 <__swsetup_r>
 800782e:	2800      	cmp	r0, #0
 8007830:	d0cc      	beq.n	80077cc <__swbuf_r+0x28>
 8007832:	f04f 37ff 	mov.w	r7, #4294967295
 8007836:	4638      	mov	r0, r7
 8007838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800783a:	bf00      	nop
 800783c:	080094ec 	.word	0x080094ec
 8007840:	0800950c 	.word	0x0800950c
 8007844:	080094cc 	.word	0x080094cc

08007848 <__swsetup_r>:
 8007848:	4b32      	ldr	r3, [pc, #200]	; (8007914 <__swsetup_r+0xcc>)
 800784a:	b570      	push	{r4, r5, r6, lr}
 800784c:	681d      	ldr	r5, [r3, #0]
 800784e:	4606      	mov	r6, r0
 8007850:	460c      	mov	r4, r1
 8007852:	b125      	cbz	r5, 800785e <__swsetup_r+0x16>
 8007854:	69ab      	ldr	r3, [r5, #24]
 8007856:	b913      	cbnz	r3, 800785e <__swsetup_r+0x16>
 8007858:	4628      	mov	r0, r5
 800785a:	f000 ff99 	bl	8008790 <__sinit>
 800785e:	4b2e      	ldr	r3, [pc, #184]	; (8007918 <__swsetup_r+0xd0>)
 8007860:	429c      	cmp	r4, r3
 8007862:	d10f      	bne.n	8007884 <__swsetup_r+0x3c>
 8007864:	686c      	ldr	r4, [r5, #4]
 8007866:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800786a:	b29a      	uxth	r2, r3
 800786c:	0715      	lsls	r5, r2, #28
 800786e:	d42c      	bmi.n	80078ca <__swsetup_r+0x82>
 8007870:	06d0      	lsls	r0, r2, #27
 8007872:	d411      	bmi.n	8007898 <__swsetup_r+0x50>
 8007874:	2209      	movs	r2, #9
 8007876:	6032      	str	r2, [r6, #0]
 8007878:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800787c:	81a3      	strh	r3, [r4, #12]
 800787e:	f04f 30ff 	mov.w	r0, #4294967295
 8007882:	e03e      	b.n	8007902 <__swsetup_r+0xba>
 8007884:	4b25      	ldr	r3, [pc, #148]	; (800791c <__swsetup_r+0xd4>)
 8007886:	429c      	cmp	r4, r3
 8007888:	d101      	bne.n	800788e <__swsetup_r+0x46>
 800788a:	68ac      	ldr	r4, [r5, #8]
 800788c:	e7eb      	b.n	8007866 <__swsetup_r+0x1e>
 800788e:	4b24      	ldr	r3, [pc, #144]	; (8007920 <__swsetup_r+0xd8>)
 8007890:	429c      	cmp	r4, r3
 8007892:	bf08      	it	eq
 8007894:	68ec      	ldreq	r4, [r5, #12]
 8007896:	e7e6      	b.n	8007866 <__swsetup_r+0x1e>
 8007898:	0751      	lsls	r1, r2, #29
 800789a:	d512      	bpl.n	80078c2 <__swsetup_r+0x7a>
 800789c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800789e:	b141      	cbz	r1, 80078b2 <__swsetup_r+0x6a>
 80078a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80078a4:	4299      	cmp	r1, r3
 80078a6:	d002      	beq.n	80078ae <__swsetup_r+0x66>
 80078a8:	4630      	mov	r0, r6
 80078aa:	f001 fb69 	bl	8008f80 <_free_r>
 80078ae:	2300      	movs	r3, #0
 80078b0:	6363      	str	r3, [r4, #52]	; 0x34
 80078b2:	89a3      	ldrh	r3, [r4, #12]
 80078b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80078b8:	81a3      	strh	r3, [r4, #12]
 80078ba:	2300      	movs	r3, #0
 80078bc:	6063      	str	r3, [r4, #4]
 80078be:	6923      	ldr	r3, [r4, #16]
 80078c0:	6023      	str	r3, [r4, #0]
 80078c2:	89a3      	ldrh	r3, [r4, #12]
 80078c4:	f043 0308 	orr.w	r3, r3, #8
 80078c8:	81a3      	strh	r3, [r4, #12]
 80078ca:	6923      	ldr	r3, [r4, #16]
 80078cc:	b94b      	cbnz	r3, 80078e2 <__swsetup_r+0x9a>
 80078ce:	89a3      	ldrh	r3, [r4, #12]
 80078d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80078d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078d8:	d003      	beq.n	80078e2 <__swsetup_r+0x9a>
 80078da:	4621      	mov	r1, r4
 80078dc:	4630      	mov	r0, r6
 80078de:	f001 f813 	bl	8008908 <__smakebuf_r>
 80078e2:	89a2      	ldrh	r2, [r4, #12]
 80078e4:	f012 0301 	ands.w	r3, r2, #1
 80078e8:	d00c      	beq.n	8007904 <__swsetup_r+0xbc>
 80078ea:	2300      	movs	r3, #0
 80078ec:	60a3      	str	r3, [r4, #8]
 80078ee:	6963      	ldr	r3, [r4, #20]
 80078f0:	425b      	negs	r3, r3
 80078f2:	61a3      	str	r3, [r4, #24]
 80078f4:	6923      	ldr	r3, [r4, #16]
 80078f6:	b953      	cbnz	r3, 800790e <__swsetup_r+0xc6>
 80078f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078fc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007900:	d1ba      	bne.n	8007878 <__swsetup_r+0x30>
 8007902:	bd70      	pop	{r4, r5, r6, pc}
 8007904:	0792      	lsls	r2, r2, #30
 8007906:	bf58      	it	pl
 8007908:	6963      	ldrpl	r3, [r4, #20]
 800790a:	60a3      	str	r3, [r4, #8]
 800790c:	e7f2      	b.n	80078f4 <__swsetup_r+0xac>
 800790e:	2000      	movs	r0, #0
 8007910:	e7f7      	b.n	8007902 <__swsetup_r+0xba>
 8007912:	bf00      	nop
 8007914:	20000018 	.word	0x20000018
 8007918:	080094ec 	.word	0x080094ec
 800791c:	0800950c 	.word	0x0800950c
 8007920:	080094cc 	.word	0x080094cc

08007924 <quorem>:
 8007924:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007928:	6903      	ldr	r3, [r0, #16]
 800792a:	690c      	ldr	r4, [r1, #16]
 800792c:	42a3      	cmp	r3, r4
 800792e:	4680      	mov	r8, r0
 8007930:	f2c0 8082 	blt.w	8007a38 <quorem+0x114>
 8007934:	3c01      	subs	r4, #1
 8007936:	f101 0714 	add.w	r7, r1, #20
 800793a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800793e:	f100 0614 	add.w	r6, r0, #20
 8007942:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8007946:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800794a:	eb06 030c 	add.w	r3, r6, ip
 800794e:	3501      	adds	r5, #1
 8007950:	eb07 090c 	add.w	r9, r7, ip
 8007954:	9301      	str	r3, [sp, #4]
 8007956:	fbb0 f5f5 	udiv	r5, r0, r5
 800795a:	b395      	cbz	r5, 80079c2 <quorem+0x9e>
 800795c:	f04f 0a00 	mov.w	sl, #0
 8007960:	4638      	mov	r0, r7
 8007962:	46b6      	mov	lr, r6
 8007964:	46d3      	mov	fp, sl
 8007966:	f850 2b04 	ldr.w	r2, [r0], #4
 800796a:	b293      	uxth	r3, r2
 800796c:	fb05 a303 	mla	r3, r5, r3, sl
 8007970:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007974:	b29b      	uxth	r3, r3
 8007976:	ebab 0303 	sub.w	r3, fp, r3
 800797a:	0c12      	lsrs	r2, r2, #16
 800797c:	f8de b000 	ldr.w	fp, [lr]
 8007980:	fb05 a202 	mla	r2, r5, r2, sl
 8007984:	fa13 f38b 	uxtah	r3, r3, fp
 8007988:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800798c:	fa1f fb82 	uxth.w	fp, r2
 8007990:	f8de 2000 	ldr.w	r2, [lr]
 8007994:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007998:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800799c:	b29b      	uxth	r3, r3
 800799e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80079a2:	4581      	cmp	r9, r0
 80079a4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80079a8:	f84e 3b04 	str.w	r3, [lr], #4
 80079ac:	d2db      	bcs.n	8007966 <quorem+0x42>
 80079ae:	f856 300c 	ldr.w	r3, [r6, ip]
 80079b2:	b933      	cbnz	r3, 80079c2 <quorem+0x9e>
 80079b4:	9b01      	ldr	r3, [sp, #4]
 80079b6:	3b04      	subs	r3, #4
 80079b8:	429e      	cmp	r6, r3
 80079ba:	461a      	mov	r2, r3
 80079bc:	d330      	bcc.n	8007a20 <quorem+0xfc>
 80079be:	f8c8 4010 	str.w	r4, [r8, #16]
 80079c2:	4640      	mov	r0, r8
 80079c4:	f001 fa08 	bl	8008dd8 <__mcmp>
 80079c8:	2800      	cmp	r0, #0
 80079ca:	db25      	blt.n	8007a18 <quorem+0xf4>
 80079cc:	3501      	adds	r5, #1
 80079ce:	4630      	mov	r0, r6
 80079d0:	f04f 0c00 	mov.w	ip, #0
 80079d4:	f857 2b04 	ldr.w	r2, [r7], #4
 80079d8:	f8d0 e000 	ldr.w	lr, [r0]
 80079dc:	b293      	uxth	r3, r2
 80079de:	ebac 0303 	sub.w	r3, ip, r3
 80079e2:	0c12      	lsrs	r2, r2, #16
 80079e4:	fa13 f38e 	uxtah	r3, r3, lr
 80079e8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80079ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80079f0:	b29b      	uxth	r3, r3
 80079f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80079f6:	45b9      	cmp	r9, r7
 80079f8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80079fc:	f840 3b04 	str.w	r3, [r0], #4
 8007a00:	d2e8      	bcs.n	80079d4 <quorem+0xb0>
 8007a02:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007a06:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007a0a:	b92a      	cbnz	r2, 8007a18 <quorem+0xf4>
 8007a0c:	3b04      	subs	r3, #4
 8007a0e:	429e      	cmp	r6, r3
 8007a10:	461a      	mov	r2, r3
 8007a12:	d30b      	bcc.n	8007a2c <quorem+0x108>
 8007a14:	f8c8 4010 	str.w	r4, [r8, #16]
 8007a18:	4628      	mov	r0, r5
 8007a1a:	b003      	add	sp, #12
 8007a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a20:	6812      	ldr	r2, [r2, #0]
 8007a22:	3b04      	subs	r3, #4
 8007a24:	2a00      	cmp	r2, #0
 8007a26:	d1ca      	bne.n	80079be <quorem+0x9a>
 8007a28:	3c01      	subs	r4, #1
 8007a2a:	e7c5      	b.n	80079b8 <quorem+0x94>
 8007a2c:	6812      	ldr	r2, [r2, #0]
 8007a2e:	3b04      	subs	r3, #4
 8007a30:	2a00      	cmp	r2, #0
 8007a32:	d1ef      	bne.n	8007a14 <quorem+0xf0>
 8007a34:	3c01      	subs	r4, #1
 8007a36:	e7ea      	b.n	8007a0e <quorem+0xea>
 8007a38:	2000      	movs	r0, #0
 8007a3a:	e7ee      	b.n	8007a1a <quorem+0xf6>
 8007a3c:	0000      	movs	r0, r0
	...

08007a40 <_dtoa_r>:
 8007a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a44:	ec57 6b10 	vmov	r6, r7, d0
 8007a48:	b097      	sub	sp, #92	; 0x5c
 8007a4a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007a4c:	9106      	str	r1, [sp, #24]
 8007a4e:	4604      	mov	r4, r0
 8007a50:	920b      	str	r2, [sp, #44]	; 0x2c
 8007a52:	9312      	str	r3, [sp, #72]	; 0x48
 8007a54:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007a58:	e9cd 6700 	strd	r6, r7, [sp]
 8007a5c:	b93d      	cbnz	r5, 8007a6e <_dtoa_r+0x2e>
 8007a5e:	2010      	movs	r0, #16
 8007a60:	f000 ff92 	bl	8008988 <malloc>
 8007a64:	6260      	str	r0, [r4, #36]	; 0x24
 8007a66:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007a6a:	6005      	str	r5, [r0, #0]
 8007a6c:	60c5      	str	r5, [r0, #12]
 8007a6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a70:	6819      	ldr	r1, [r3, #0]
 8007a72:	b151      	cbz	r1, 8007a8a <_dtoa_r+0x4a>
 8007a74:	685a      	ldr	r2, [r3, #4]
 8007a76:	604a      	str	r2, [r1, #4]
 8007a78:	2301      	movs	r3, #1
 8007a7a:	4093      	lsls	r3, r2
 8007a7c:	608b      	str	r3, [r1, #8]
 8007a7e:	4620      	mov	r0, r4
 8007a80:	f000 ffc9 	bl	8008a16 <_Bfree>
 8007a84:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a86:	2200      	movs	r2, #0
 8007a88:	601a      	str	r2, [r3, #0]
 8007a8a:	1e3b      	subs	r3, r7, #0
 8007a8c:	bfbb      	ittet	lt
 8007a8e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007a92:	9301      	strlt	r3, [sp, #4]
 8007a94:	2300      	movge	r3, #0
 8007a96:	2201      	movlt	r2, #1
 8007a98:	bfac      	ite	ge
 8007a9a:	f8c8 3000 	strge.w	r3, [r8]
 8007a9e:	f8c8 2000 	strlt.w	r2, [r8]
 8007aa2:	4baf      	ldr	r3, [pc, #700]	; (8007d60 <_dtoa_r+0x320>)
 8007aa4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007aa8:	ea33 0308 	bics.w	r3, r3, r8
 8007aac:	d114      	bne.n	8007ad8 <_dtoa_r+0x98>
 8007aae:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007ab0:	f242 730f 	movw	r3, #9999	; 0x270f
 8007ab4:	6013      	str	r3, [r2, #0]
 8007ab6:	9b00      	ldr	r3, [sp, #0]
 8007ab8:	b923      	cbnz	r3, 8007ac4 <_dtoa_r+0x84>
 8007aba:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007abe:	2800      	cmp	r0, #0
 8007ac0:	f000 8542 	beq.w	8008548 <_dtoa_r+0xb08>
 8007ac4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ac6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8007d74 <_dtoa_r+0x334>
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	f000 8544 	beq.w	8008558 <_dtoa_r+0xb18>
 8007ad0:	f10b 0303 	add.w	r3, fp, #3
 8007ad4:	f000 bd3e 	b.w	8008554 <_dtoa_r+0xb14>
 8007ad8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007adc:	2200      	movs	r2, #0
 8007ade:	2300      	movs	r3, #0
 8007ae0:	4630      	mov	r0, r6
 8007ae2:	4639      	mov	r1, r7
 8007ae4:	f7f8 ff9c 	bl	8000a20 <__aeabi_dcmpeq>
 8007ae8:	4681      	mov	r9, r0
 8007aea:	b168      	cbz	r0, 8007b08 <_dtoa_r+0xc8>
 8007aec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007aee:	2301      	movs	r3, #1
 8007af0:	6013      	str	r3, [r2, #0]
 8007af2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	f000 8524 	beq.w	8008542 <_dtoa_r+0xb02>
 8007afa:	4b9a      	ldr	r3, [pc, #616]	; (8007d64 <_dtoa_r+0x324>)
 8007afc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007afe:	f103 3bff 	add.w	fp, r3, #4294967295
 8007b02:	6013      	str	r3, [r2, #0]
 8007b04:	f000 bd28 	b.w	8008558 <_dtoa_r+0xb18>
 8007b08:	aa14      	add	r2, sp, #80	; 0x50
 8007b0a:	a915      	add	r1, sp, #84	; 0x54
 8007b0c:	ec47 6b10 	vmov	d0, r6, r7
 8007b10:	4620      	mov	r0, r4
 8007b12:	f001 f9d8 	bl	8008ec6 <__d2b>
 8007b16:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007b1a:	9004      	str	r0, [sp, #16]
 8007b1c:	2d00      	cmp	r5, #0
 8007b1e:	d07c      	beq.n	8007c1a <_dtoa_r+0x1da>
 8007b20:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007b24:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8007b28:	46b2      	mov	sl, r6
 8007b2a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8007b2e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007b32:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8007b36:	2200      	movs	r2, #0
 8007b38:	4b8b      	ldr	r3, [pc, #556]	; (8007d68 <_dtoa_r+0x328>)
 8007b3a:	4650      	mov	r0, sl
 8007b3c:	4659      	mov	r1, fp
 8007b3e:	f7f8 fb4f 	bl	80001e0 <__aeabi_dsub>
 8007b42:	a381      	add	r3, pc, #516	; (adr r3, 8007d48 <_dtoa_r+0x308>)
 8007b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b48:	f7f8 fd02 	bl	8000550 <__aeabi_dmul>
 8007b4c:	a380      	add	r3, pc, #512	; (adr r3, 8007d50 <_dtoa_r+0x310>)
 8007b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b52:	f7f8 fb47 	bl	80001e4 <__adddf3>
 8007b56:	4606      	mov	r6, r0
 8007b58:	4628      	mov	r0, r5
 8007b5a:	460f      	mov	r7, r1
 8007b5c:	f7f8 fc8e 	bl	800047c <__aeabi_i2d>
 8007b60:	a37d      	add	r3, pc, #500	; (adr r3, 8007d58 <_dtoa_r+0x318>)
 8007b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b66:	f7f8 fcf3 	bl	8000550 <__aeabi_dmul>
 8007b6a:	4602      	mov	r2, r0
 8007b6c:	460b      	mov	r3, r1
 8007b6e:	4630      	mov	r0, r6
 8007b70:	4639      	mov	r1, r7
 8007b72:	f7f8 fb37 	bl	80001e4 <__adddf3>
 8007b76:	4606      	mov	r6, r0
 8007b78:	460f      	mov	r7, r1
 8007b7a:	f7f8 ff99 	bl	8000ab0 <__aeabi_d2iz>
 8007b7e:	2200      	movs	r2, #0
 8007b80:	4682      	mov	sl, r0
 8007b82:	2300      	movs	r3, #0
 8007b84:	4630      	mov	r0, r6
 8007b86:	4639      	mov	r1, r7
 8007b88:	f7f8 ff54 	bl	8000a34 <__aeabi_dcmplt>
 8007b8c:	b148      	cbz	r0, 8007ba2 <_dtoa_r+0x162>
 8007b8e:	4650      	mov	r0, sl
 8007b90:	f7f8 fc74 	bl	800047c <__aeabi_i2d>
 8007b94:	4632      	mov	r2, r6
 8007b96:	463b      	mov	r3, r7
 8007b98:	f7f8 ff42 	bl	8000a20 <__aeabi_dcmpeq>
 8007b9c:	b908      	cbnz	r0, 8007ba2 <_dtoa_r+0x162>
 8007b9e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007ba2:	f1ba 0f16 	cmp.w	sl, #22
 8007ba6:	d859      	bhi.n	8007c5c <_dtoa_r+0x21c>
 8007ba8:	4970      	ldr	r1, [pc, #448]	; (8007d6c <_dtoa_r+0x32c>)
 8007baa:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007bae:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007bb2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007bb6:	f7f8 ff5b 	bl	8000a70 <__aeabi_dcmpgt>
 8007bba:	2800      	cmp	r0, #0
 8007bbc:	d050      	beq.n	8007c60 <_dtoa_r+0x220>
 8007bbe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	930f      	str	r3, [sp, #60]	; 0x3c
 8007bc6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007bc8:	1b5d      	subs	r5, r3, r5
 8007bca:	f1b5 0801 	subs.w	r8, r5, #1
 8007bce:	bf49      	itett	mi
 8007bd0:	f1c5 0301 	rsbmi	r3, r5, #1
 8007bd4:	2300      	movpl	r3, #0
 8007bd6:	9305      	strmi	r3, [sp, #20]
 8007bd8:	f04f 0800 	movmi.w	r8, #0
 8007bdc:	bf58      	it	pl
 8007bde:	9305      	strpl	r3, [sp, #20]
 8007be0:	f1ba 0f00 	cmp.w	sl, #0
 8007be4:	db3e      	blt.n	8007c64 <_dtoa_r+0x224>
 8007be6:	2300      	movs	r3, #0
 8007be8:	44d0      	add	r8, sl
 8007bea:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007bee:	9307      	str	r3, [sp, #28]
 8007bf0:	9b06      	ldr	r3, [sp, #24]
 8007bf2:	2b09      	cmp	r3, #9
 8007bf4:	f200 8090 	bhi.w	8007d18 <_dtoa_r+0x2d8>
 8007bf8:	2b05      	cmp	r3, #5
 8007bfa:	bfc4      	itt	gt
 8007bfc:	3b04      	subgt	r3, #4
 8007bfe:	9306      	strgt	r3, [sp, #24]
 8007c00:	9b06      	ldr	r3, [sp, #24]
 8007c02:	f1a3 0302 	sub.w	r3, r3, #2
 8007c06:	bfcc      	ite	gt
 8007c08:	2500      	movgt	r5, #0
 8007c0a:	2501      	movle	r5, #1
 8007c0c:	2b03      	cmp	r3, #3
 8007c0e:	f200 808f 	bhi.w	8007d30 <_dtoa_r+0x2f0>
 8007c12:	e8df f003 	tbb	[pc, r3]
 8007c16:	7f7d      	.short	0x7f7d
 8007c18:	7131      	.short	0x7131
 8007c1a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8007c1e:	441d      	add	r5, r3
 8007c20:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8007c24:	2820      	cmp	r0, #32
 8007c26:	dd13      	ble.n	8007c50 <_dtoa_r+0x210>
 8007c28:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8007c2c:	9b00      	ldr	r3, [sp, #0]
 8007c2e:	fa08 f800 	lsl.w	r8, r8, r0
 8007c32:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8007c36:	fa23 f000 	lsr.w	r0, r3, r0
 8007c3a:	ea48 0000 	orr.w	r0, r8, r0
 8007c3e:	f7f8 fc0d 	bl	800045c <__aeabi_ui2d>
 8007c42:	2301      	movs	r3, #1
 8007c44:	4682      	mov	sl, r0
 8007c46:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8007c4a:	3d01      	subs	r5, #1
 8007c4c:	9313      	str	r3, [sp, #76]	; 0x4c
 8007c4e:	e772      	b.n	8007b36 <_dtoa_r+0xf6>
 8007c50:	9b00      	ldr	r3, [sp, #0]
 8007c52:	f1c0 0020 	rsb	r0, r0, #32
 8007c56:	fa03 f000 	lsl.w	r0, r3, r0
 8007c5a:	e7f0      	b.n	8007c3e <_dtoa_r+0x1fe>
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	e7b1      	b.n	8007bc4 <_dtoa_r+0x184>
 8007c60:	900f      	str	r0, [sp, #60]	; 0x3c
 8007c62:	e7b0      	b.n	8007bc6 <_dtoa_r+0x186>
 8007c64:	9b05      	ldr	r3, [sp, #20]
 8007c66:	eba3 030a 	sub.w	r3, r3, sl
 8007c6a:	9305      	str	r3, [sp, #20]
 8007c6c:	f1ca 0300 	rsb	r3, sl, #0
 8007c70:	9307      	str	r3, [sp, #28]
 8007c72:	2300      	movs	r3, #0
 8007c74:	930e      	str	r3, [sp, #56]	; 0x38
 8007c76:	e7bb      	b.n	8007bf0 <_dtoa_r+0x1b0>
 8007c78:	2301      	movs	r3, #1
 8007c7a:	930a      	str	r3, [sp, #40]	; 0x28
 8007c7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	dd59      	ble.n	8007d36 <_dtoa_r+0x2f6>
 8007c82:	9302      	str	r3, [sp, #8]
 8007c84:	4699      	mov	r9, r3
 8007c86:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007c88:	2200      	movs	r2, #0
 8007c8a:	6072      	str	r2, [r6, #4]
 8007c8c:	2204      	movs	r2, #4
 8007c8e:	f102 0014 	add.w	r0, r2, #20
 8007c92:	4298      	cmp	r0, r3
 8007c94:	6871      	ldr	r1, [r6, #4]
 8007c96:	d953      	bls.n	8007d40 <_dtoa_r+0x300>
 8007c98:	4620      	mov	r0, r4
 8007c9a:	f000 fe88 	bl	80089ae <_Balloc>
 8007c9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ca0:	6030      	str	r0, [r6, #0]
 8007ca2:	f1b9 0f0e 	cmp.w	r9, #14
 8007ca6:	f8d3 b000 	ldr.w	fp, [r3]
 8007caa:	f200 80e6 	bhi.w	8007e7a <_dtoa_r+0x43a>
 8007cae:	2d00      	cmp	r5, #0
 8007cb0:	f000 80e3 	beq.w	8007e7a <_dtoa_r+0x43a>
 8007cb4:	ed9d 7b00 	vldr	d7, [sp]
 8007cb8:	f1ba 0f00 	cmp.w	sl, #0
 8007cbc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8007cc0:	dd74      	ble.n	8007dac <_dtoa_r+0x36c>
 8007cc2:	4a2a      	ldr	r2, [pc, #168]	; (8007d6c <_dtoa_r+0x32c>)
 8007cc4:	f00a 030f 	and.w	r3, sl, #15
 8007cc8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007ccc:	ed93 7b00 	vldr	d7, [r3]
 8007cd0:	ea4f 162a 	mov.w	r6, sl, asr #4
 8007cd4:	06f0      	lsls	r0, r6, #27
 8007cd6:	ed8d 7b08 	vstr	d7, [sp, #32]
 8007cda:	d565      	bpl.n	8007da8 <_dtoa_r+0x368>
 8007cdc:	4b24      	ldr	r3, [pc, #144]	; (8007d70 <_dtoa_r+0x330>)
 8007cde:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007ce2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007ce6:	f7f8 fd5d 	bl	80007a4 <__aeabi_ddiv>
 8007cea:	e9cd 0100 	strd	r0, r1, [sp]
 8007cee:	f006 060f 	and.w	r6, r6, #15
 8007cf2:	2503      	movs	r5, #3
 8007cf4:	4f1e      	ldr	r7, [pc, #120]	; (8007d70 <_dtoa_r+0x330>)
 8007cf6:	e04c      	b.n	8007d92 <_dtoa_r+0x352>
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	930a      	str	r3, [sp, #40]	; 0x28
 8007cfc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007cfe:	4453      	add	r3, sl
 8007d00:	f103 0901 	add.w	r9, r3, #1
 8007d04:	9302      	str	r3, [sp, #8]
 8007d06:	464b      	mov	r3, r9
 8007d08:	2b01      	cmp	r3, #1
 8007d0a:	bfb8      	it	lt
 8007d0c:	2301      	movlt	r3, #1
 8007d0e:	e7ba      	b.n	8007c86 <_dtoa_r+0x246>
 8007d10:	2300      	movs	r3, #0
 8007d12:	e7b2      	b.n	8007c7a <_dtoa_r+0x23a>
 8007d14:	2300      	movs	r3, #0
 8007d16:	e7f0      	b.n	8007cfa <_dtoa_r+0x2ba>
 8007d18:	2501      	movs	r5, #1
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	9306      	str	r3, [sp, #24]
 8007d1e:	950a      	str	r5, [sp, #40]	; 0x28
 8007d20:	f04f 33ff 	mov.w	r3, #4294967295
 8007d24:	9302      	str	r3, [sp, #8]
 8007d26:	4699      	mov	r9, r3
 8007d28:	2200      	movs	r2, #0
 8007d2a:	2312      	movs	r3, #18
 8007d2c:	920b      	str	r2, [sp, #44]	; 0x2c
 8007d2e:	e7aa      	b.n	8007c86 <_dtoa_r+0x246>
 8007d30:	2301      	movs	r3, #1
 8007d32:	930a      	str	r3, [sp, #40]	; 0x28
 8007d34:	e7f4      	b.n	8007d20 <_dtoa_r+0x2e0>
 8007d36:	2301      	movs	r3, #1
 8007d38:	9302      	str	r3, [sp, #8]
 8007d3a:	4699      	mov	r9, r3
 8007d3c:	461a      	mov	r2, r3
 8007d3e:	e7f5      	b.n	8007d2c <_dtoa_r+0x2ec>
 8007d40:	3101      	adds	r1, #1
 8007d42:	6071      	str	r1, [r6, #4]
 8007d44:	0052      	lsls	r2, r2, #1
 8007d46:	e7a2      	b.n	8007c8e <_dtoa_r+0x24e>
 8007d48:	636f4361 	.word	0x636f4361
 8007d4c:	3fd287a7 	.word	0x3fd287a7
 8007d50:	8b60c8b3 	.word	0x8b60c8b3
 8007d54:	3fc68a28 	.word	0x3fc68a28
 8007d58:	509f79fb 	.word	0x509f79fb
 8007d5c:	3fd34413 	.word	0x3fd34413
 8007d60:	7ff00000 	.word	0x7ff00000
 8007d64:	080094bd 	.word	0x080094bd
 8007d68:	3ff80000 	.word	0x3ff80000
 8007d6c:	08009558 	.word	0x08009558
 8007d70:	08009530 	.word	0x08009530
 8007d74:	080094c7 	.word	0x080094c7
 8007d78:	07f1      	lsls	r1, r6, #31
 8007d7a:	d508      	bpl.n	8007d8e <_dtoa_r+0x34e>
 8007d7c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007d80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d84:	f7f8 fbe4 	bl	8000550 <__aeabi_dmul>
 8007d88:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007d8c:	3501      	adds	r5, #1
 8007d8e:	1076      	asrs	r6, r6, #1
 8007d90:	3708      	adds	r7, #8
 8007d92:	2e00      	cmp	r6, #0
 8007d94:	d1f0      	bne.n	8007d78 <_dtoa_r+0x338>
 8007d96:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007d9a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007d9e:	f7f8 fd01 	bl	80007a4 <__aeabi_ddiv>
 8007da2:	e9cd 0100 	strd	r0, r1, [sp]
 8007da6:	e01a      	b.n	8007dde <_dtoa_r+0x39e>
 8007da8:	2502      	movs	r5, #2
 8007daa:	e7a3      	b.n	8007cf4 <_dtoa_r+0x2b4>
 8007dac:	f000 80a0 	beq.w	8007ef0 <_dtoa_r+0x4b0>
 8007db0:	f1ca 0600 	rsb	r6, sl, #0
 8007db4:	4b9f      	ldr	r3, [pc, #636]	; (8008034 <_dtoa_r+0x5f4>)
 8007db6:	4fa0      	ldr	r7, [pc, #640]	; (8008038 <_dtoa_r+0x5f8>)
 8007db8:	f006 020f 	and.w	r2, r6, #15
 8007dbc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007dc8:	f7f8 fbc2 	bl	8000550 <__aeabi_dmul>
 8007dcc:	e9cd 0100 	strd	r0, r1, [sp]
 8007dd0:	1136      	asrs	r6, r6, #4
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	2502      	movs	r5, #2
 8007dd6:	2e00      	cmp	r6, #0
 8007dd8:	d17f      	bne.n	8007eda <_dtoa_r+0x49a>
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d1e1      	bne.n	8007da2 <_dtoa_r+0x362>
 8007dde:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	f000 8087 	beq.w	8007ef4 <_dtoa_r+0x4b4>
 8007de6:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007dea:	2200      	movs	r2, #0
 8007dec:	4b93      	ldr	r3, [pc, #588]	; (800803c <_dtoa_r+0x5fc>)
 8007dee:	4630      	mov	r0, r6
 8007df0:	4639      	mov	r1, r7
 8007df2:	f7f8 fe1f 	bl	8000a34 <__aeabi_dcmplt>
 8007df6:	2800      	cmp	r0, #0
 8007df8:	d07c      	beq.n	8007ef4 <_dtoa_r+0x4b4>
 8007dfa:	f1b9 0f00 	cmp.w	r9, #0
 8007dfe:	d079      	beq.n	8007ef4 <_dtoa_r+0x4b4>
 8007e00:	9b02      	ldr	r3, [sp, #8]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	dd35      	ble.n	8007e72 <_dtoa_r+0x432>
 8007e06:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007e0a:	9308      	str	r3, [sp, #32]
 8007e0c:	4639      	mov	r1, r7
 8007e0e:	2200      	movs	r2, #0
 8007e10:	4b8b      	ldr	r3, [pc, #556]	; (8008040 <_dtoa_r+0x600>)
 8007e12:	4630      	mov	r0, r6
 8007e14:	f7f8 fb9c 	bl	8000550 <__aeabi_dmul>
 8007e18:	e9cd 0100 	strd	r0, r1, [sp]
 8007e1c:	9f02      	ldr	r7, [sp, #8]
 8007e1e:	3501      	adds	r5, #1
 8007e20:	4628      	mov	r0, r5
 8007e22:	f7f8 fb2b 	bl	800047c <__aeabi_i2d>
 8007e26:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e2a:	f7f8 fb91 	bl	8000550 <__aeabi_dmul>
 8007e2e:	2200      	movs	r2, #0
 8007e30:	4b84      	ldr	r3, [pc, #528]	; (8008044 <_dtoa_r+0x604>)
 8007e32:	f7f8 f9d7 	bl	80001e4 <__adddf3>
 8007e36:	4605      	mov	r5, r0
 8007e38:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007e3c:	2f00      	cmp	r7, #0
 8007e3e:	d15d      	bne.n	8007efc <_dtoa_r+0x4bc>
 8007e40:	2200      	movs	r2, #0
 8007e42:	4b81      	ldr	r3, [pc, #516]	; (8008048 <_dtoa_r+0x608>)
 8007e44:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007e48:	f7f8 f9ca 	bl	80001e0 <__aeabi_dsub>
 8007e4c:	462a      	mov	r2, r5
 8007e4e:	4633      	mov	r3, r6
 8007e50:	e9cd 0100 	strd	r0, r1, [sp]
 8007e54:	f7f8 fe0c 	bl	8000a70 <__aeabi_dcmpgt>
 8007e58:	2800      	cmp	r0, #0
 8007e5a:	f040 8288 	bne.w	800836e <_dtoa_r+0x92e>
 8007e5e:	462a      	mov	r2, r5
 8007e60:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007e64:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007e68:	f7f8 fde4 	bl	8000a34 <__aeabi_dcmplt>
 8007e6c:	2800      	cmp	r0, #0
 8007e6e:	f040 827c 	bne.w	800836a <_dtoa_r+0x92a>
 8007e72:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007e76:	e9cd 2300 	strd	r2, r3, [sp]
 8007e7a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	f2c0 8150 	blt.w	8008122 <_dtoa_r+0x6e2>
 8007e82:	f1ba 0f0e 	cmp.w	sl, #14
 8007e86:	f300 814c 	bgt.w	8008122 <_dtoa_r+0x6e2>
 8007e8a:	4b6a      	ldr	r3, [pc, #424]	; (8008034 <_dtoa_r+0x5f4>)
 8007e8c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007e90:	ed93 7b00 	vldr	d7, [r3]
 8007e94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007e9c:	f280 80d8 	bge.w	8008050 <_dtoa_r+0x610>
 8007ea0:	f1b9 0f00 	cmp.w	r9, #0
 8007ea4:	f300 80d4 	bgt.w	8008050 <_dtoa_r+0x610>
 8007ea8:	f040 825e 	bne.w	8008368 <_dtoa_r+0x928>
 8007eac:	2200      	movs	r2, #0
 8007eae:	4b66      	ldr	r3, [pc, #408]	; (8008048 <_dtoa_r+0x608>)
 8007eb0:	ec51 0b17 	vmov	r0, r1, d7
 8007eb4:	f7f8 fb4c 	bl	8000550 <__aeabi_dmul>
 8007eb8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007ebc:	f7f8 fdce 	bl	8000a5c <__aeabi_dcmpge>
 8007ec0:	464f      	mov	r7, r9
 8007ec2:	464e      	mov	r6, r9
 8007ec4:	2800      	cmp	r0, #0
 8007ec6:	f040 8234 	bne.w	8008332 <_dtoa_r+0x8f2>
 8007eca:	2331      	movs	r3, #49	; 0x31
 8007ecc:	f10b 0501 	add.w	r5, fp, #1
 8007ed0:	f88b 3000 	strb.w	r3, [fp]
 8007ed4:	f10a 0a01 	add.w	sl, sl, #1
 8007ed8:	e22f      	b.n	800833a <_dtoa_r+0x8fa>
 8007eda:	07f2      	lsls	r2, r6, #31
 8007edc:	d505      	bpl.n	8007eea <_dtoa_r+0x4aa>
 8007ede:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ee2:	f7f8 fb35 	bl	8000550 <__aeabi_dmul>
 8007ee6:	3501      	adds	r5, #1
 8007ee8:	2301      	movs	r3, #1
 8007eea:	1076      	asrs	r6, r6, #1
 8007eec:	3708      	adds	r7, #8
 8007eee:	e772      	b.n	8007dd6 <_dtoa_r+0x396>
 8007ef0:	2502      	movs	r5, #2
 8007ef2:	e774      	b.n	8007dde <_dtoa_r+0x39e>
 8007ef4:	f8cd a020 	str.w	sl, [sp, #32]
 8007ef8:	464f      	mov	r7, r9
 8007efa:	e791      	b.n	8007e20 <_dtoa_r+0x3e0>
 8007efc:	4b4d      	ldr	r3, [pc, #308]	; (8008034 <_dtoa_r+0x5f4>)
 8007efe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007f02:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8007f06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d047      	beq.n	8007f9c <_dtoa_r+0x55c>
 8007f0c:	4602      	mov	r2, r0
 8007f0e:	460b      	mov	r3, r1
 8007f10:	2000      	movs	r0, #0
 8007f12:	494e      	ldr	r1, [pc, #312]	; (800804c <_dtoa_r+0x60c>)
 8007f14:	f7f8 fc46 	bl	80007a4 <__aeabi_ddiv>
 8007f18:	462a      	mov	r2, r5
 8007f1a:	4633      	mov	r3, r6
 8007f1c:	f7f8 f960 	bl	80001e0 <__aeabi_dsub>
 8007f20:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007f24:	465d      	mov	r5, fp
 8007f26:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007f2a:	f7f8 fdc1 	bl	8000ab0 <__aeabi_d2iz>
 8007f2e:	4606      	mov	r6, r0
 8007f30:	f7f8 faa4 	bl	800047c <__aeabi_i2d>
 8007f34:	4602      	mov	r2, r0
 8007f36:	460b      	mov	r3, r1
 8007f38:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007f3c:	f7f8 f950 	bl	80001e0 <__aeabi_dsub>
 8007f40:	3630      	adds	r6, #48	; 0x30
 8007f42:	f805 6b01 	strb.w	r6, [r5], #1
 8007f46:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007f4a:	e9cd 0100 	strd	r0, r1, [sp]
 8007f4e:	f7f8 fd71 	bl	8000a34 <__aeabi_dcmplt>
 8007f52:	2800      	cmp	r0, #0
 8007f54:	d163      	bne.n	800801e <_dtoa_r+0x5de>
 8007f56:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f5a:	2000      	movs	r0, #0
 8007f5c:	4937      	ldr	r1, [pc, #220]	; (800803c <_dtoa_r+0x5fc>)
 8007f5e:	f7f8 f93f 	bl	80001e0 <__aeabi_dsub>
 8007f62:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007f66:	f7f8 fd65 	bl	8000a34 <__aeabi_dcmplt>
 8007f6a:	2800      	cmp	r0, #0
 8007f6c:	f040 80b7 	bne.w	80080de <_dtoa_r+0x69e>
 8007f70:	eba5 030b 	sub.w	r3, r5, fp
 8007f74:	429f      	cmp	r7, r3
 8007f76:	f77f af7c 	ble.w	8007e72 <_dtoa_r+0x432>
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	4b30      	ldr	r3, [pc, #192]	; (8008040 <_dtoa_r+0x600>)
 8007f7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007f82:	f7f8 fae5 	bl	8000550 <__aeabi_dmul>
 8007f86:	2200      	movs	r2, #0
 8007f88:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007f8c:	4b2c      	ldr	r3, [pc, #176]	; (8008040 <_dtoa_r+0x600>)
 8007f8e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007f92:	f7f8 fadd 	bl	8000550 <__aeabi_dmul>
 8007f96:	e9cd 0100 	strd	r0, r1, [sp]
 8007f9a:	e7c4      	b.n	8007f26 <_dtoa_r+0x4e6>
 8007f9c:	462a      	mov	r2, r5
 8007f9e:	4633      	mov	r3, r6
 8007fa0:	f7f8 fad6 	bl	8000550 <__aeabi_dmul>
 8007fa4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007fa8:	eb0b 0507 	add.w	r5, fp, r7
 8007fac:	465e      	mov	r6, fp
 8007fae:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007fb2:	f7f8 fd7d 	bl	8000ab0 <__aeabi_d2iz>
 8007fb6:	4607      	mov	r7, r0
 8007fb8:	f7f8 fa60 	bl	800047c <__aeabi_i2d>
 8007fbc:	3730      	adds	r7, #48	; 0x30
 8007fbe:	4602      	mov	r2, r0
 8007fc0:	460b      	mov	r3, r1
 8007fc2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007fc6:	f7f8 f90b 	bl	80001e0 <__aeabi_dsub>
 8007fca:	f806 7b01 	strb.w	r7, [r6], #1
 8007fce:	42ae      	cmp	r6, r5
 8007fd0:	e9cd 0100 	strd	r0, r1, [sp]
 8007fd4:	f04f 0200 	mov.w	r2, #0
 8007fd8:	d126      	bne.n	8008028 <_dtoa_r+0x5e8>
 8007fda:	4b1c      	ldr	r3, [pc, #112]	; (800804c <_dtoa_r+0x60c>)
 8007fdc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007fe0:	f7f8 f900 	bl	80001e4 <__adddf3>
 8007fe4:	4602      	mov	r2, r0
 8007fe6:	460b      	mov	r3, r1
 8007fe8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007fec:	f7f8 fd40 	bl	8000a70 <__aeabi_dcmpgt>
 8007ff0:	2800      	cmp	r0, #0
 8007ff2:	d174      	bne.n	80080de <_dtoa_r+0x69e>
 8007ff4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007ff8:	2000      	movs	r0, #0
 8007ffa:	4914      	ldr	r1, [pc, #80]	; (800804c <_dtoa_r+0x60c>)
 8007ffc:	f7f8 f8f0 	bl	80001e0 <__aeabi_dsub>
 8008000:	4602      	mov	r2, r0
 8008002:	460b      	mov	r3, r1
 8008004:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008008:	f7f8 fd14 	bl	8000a34 <__aeabi_dcmplt>
 800800c:	2800      	cmp	r0, #0
 800800e:	f43f af30 	beq.w	8007e72 <_dtoa_r+0x432>
 8008012:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008016:	2b30      	cmp	r3, #48	; 0x30
 8008018:	f105 32ff 	add.w	r2, r5, #4294967295
 800801c:	d002      	beq.n	8008024 <_dtoa_r+0x5e4>
 800801e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008022:	e04a      	b.n	80080ba <_dtoa_r+0x67a>
 8008024:	4615      	mov	r5, r2
 8008026:	e7f4      	b.n	8008012 <_dtoa_r+0x5d2>
 8008028:	4b05      	ldr	r3, [pc, #20]	; (8008040 <_dtoa_r+0x600>)
 800802a:	f7f8 fa91 	bl	8000550 <__aeabi_dmul>
 800802e:	e9cd 0100 	strd	r0, r1, [sp]
 8008032:	e7bc      	b.n	8007fae <_dtoa_r+0x56e>
 8008034:	08009558 	.word	0x08009558
 8008038:	08009530 	.word	0x08009530
 800803c:	3ff00000 	.word	0x3ff00000
 8008040:	40240000 	.word	0x40240000
 8008044:	401c0000 	.word	0x401c0000
 8008048:	40140000 	.word	0x40140000
 800804c:	3fe00000 	.word	0x3fe00000
 8008050:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008054:	465d      	mov	r5, fp
 8008056:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800805a:	4630      	mov	r0, r6
 800805c:	4639      	mov	r1, r7
 800805e:	f7f8 fba1 	bl	80007a4 <__aeabi_ddiv>
 8008062:	f7f8 fd25 	bl	8000ab0 <__aeabi_d2iz>
 8008066:	4680      	mov	r8, r0
 8008068:	f7f8 fa08 	bl	800047c <__aeabi_i2d>
 800806c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008070:	f7f8 fa6e 	bl	8000550 <__aeabi_dmul>
 8008074:	4602      	mov	r2, r0
 8008076:	460b      	mov	r3, r1
 8008078:	4630      	mov	r0, r6
 800807a:	4639      	mov	r1, r7
 800807c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8008080:	f7f8 f8ae 	bl	80001e0 <__aeabi_dsub>
 8008084:	f805 6b01 	strb.w	r6, [r5], #1
 8008088:	eba5 060b 	sub.w	r6, r5, fp
 800808c:	45b1      	cmp	r9, r6
 800808e:	4602      	mov	r2, r0
 8008090:	460b      	mov	r3, r1
 8008092:	d139      	bne.n	8008108 <_dtoa_r+0x6c8>
 8008094:	f7f8 f8a6 	bl	80001e4 <__adddf3>
 8008098:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800809c:	4606      	mov	r6, r0
 800809e:	460f      	mov	r7, r1
 80080a0:	f7f8 fce6 	bl	8000a70 <__aeabi_dcmpgt>
 80080a4:	b9c8      	cbnz	r0, 80080da <_dtoa_r+0x69a>
 80080a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80080aa:	4630      	mov	r0, r6
 80080ac:	4639      	mov	r1, r7
 80080ae:	f7f8 fcb7 	bl	8000a20 <__aeabi_dcmpeq>
 80080b2:	b110      	cbz	r0, 80080ba <_dtoa_r+0x67a>
 80080b4:	f018 0f01 	tst.w	r8, #1
 80080b8:	d10f      	bne.n	80080da <_dtoa_r+0x69a>
 80080ba:	9904      	ldr	r1, [sp, #16]
 80080bc:	4620      	mov	r0, r4
 80080be:	f000 fcaa 	bl	8008a16 <_Bfree>
 80080c2:	2300      	movs	r3, #0
 80080c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80080c6:	702b      	strb	r3, [r5, #0]
 80080c8:	f10a 0301 	add.w	r3, sl, #1
 80080cc:	6013      	str	r3, [r2, #0]
 80080ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	f000 8241 	beq.w	8008558 <_dtoa_r+0xb18>
 80080d6:	601d      	str	r5, [r3, #0]
 80080d8:	e23e      	b.n	8008558 <_dtoa_r+0xb18>
 80080da:	f8cd a020 	str.w	sl, [sp, #32]
 80080de:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80080e2:	2a39      	cmp	r2, #57	; 0x39
 80080e4:	f105 33ff 	add.w	r3, r5, #4294967295
 80080e8:	d108      	bne.n	80080fc <_dtoa_r+0x6bc>
 80080ea:	459b      	cmp	fp, r3
 80080ec:	d10a      	bne.n	8008104 <_dtoa_r+0x6c4>
 80080ee:	9b08      	ldr	r3, [sp, #32]
 80080f0:	3301      	adds	r3, #1
 80080f2:	9308      	str	r3, [sp, #32]
 80080f4:	2330      	movs	r3, #48	; 0x30
 80080f6:	f88b 3000 	strb.w	r3, [fp]
 80080fa:	465b      	mov	r3, fp
 80080fc:	781a      	ldrb	r2, [r3, #0]
 80080fe:	3201      	adds	r2, #1
 8008100:	701a      	strb	r2, [r3, #0]
 8008102:	e78c      	b.n	800801e <_dtoa_r+0x5de>
 8008104:	461d      	mov	r5, r3
 8008106:	e7ea      	b.n	80080de <_dtoa_r+0x69e>
 8008108:	2200      	movs	r2, #0
 800810a:	4b9b      	ldr	r3, [pc, #620]	; (8008378 <_dtoa_r+0x938>)
 800810c:	f7f8 fa20 	bl	8000550 <__aeabi_dmul>
 8008110:	2200      	movs	r2, #0
 8008112:	2300      	movs	r3, #0
 8008114:	4606      	mov	r6, r0
 8008116:	460f      	mov	r7, r1
 8008118:	f7f8 fc82 	bl	8000a20 <__aeabi_dcmpeq>
 800811c:	2800      	cmp	r0, #0
 800811e:	d09a      	beq.n	8008056 <_dtoa_r+0x616>
 8008120:	e7cb      	b.n	80080ba <_dtoa_r+0x67a>
 8008122:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008124:	2a00      	cmp	r2, #0
 8008126:	f000 808b 	beq.w	8008240 <_dtoa_r+0x800>
 800812a:	9a06      	ldr	r2, [sp, #24]
 800812c:	2a01      	cmp	r2, #1
 800812e:	dc6e      	bgt.n	800820e <_dtoa_r+0x7ce>
 8008130:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008132:	2a00      	cmp	r2, #0
 8008134:	d067      	beq.n	8008206 <_dtoa_r+0x7c6>
 8008136:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800813a:	9f07      	ldr	r7, [sp, #28]
 800813c:	9d05      	ldr	r5, [sp, #20]
 800813e:	9a05      	ldr	r2, [sp, #20]
 8008140:	2101      	movs	r1, #1
 8008142:	441a      	add	r2, r3
 8008144:	4620      	mov	r0, r4
 8008146:	9205      	str	r2, [sp, #20]
 8008148:	4498      	add	r8, r3
 800814a:	f000 fd04 	bl	8008b56 <__i2b>
 800814e:	4606      	mov	r6, r0
 8008150:	2d00      	cmp	r5, #0
 8008152:	dd0c      	ble.n	800816e <_dtoa_r+0x72e>
 8008154:	f1b8 0f00 	cmp.w	r8, #0
 8008158:	dd09      	ble.n	800816e <_dtoa_r+0x72e>
 800815a:	4545      	cmp	r5, r8
 800815c:	9a05      	ldr	r2, [sp, #20]
 800815e:	462b      	mov	r3, r5
 8008160:	bfa8      	it	ge
 8008162:	4643      	movge	r3, r8
 8008164:	1ad2      	subs	r2, r2, r3
 8008166:	9205      	str	r2, [sp, #20]
 8008168:	1aed      	subs	r5, r5, r3
 800816a:	eba8 0803 	sub.w	r8, r8, r3
 800816e:	9b07      	ldr	r3, [sp, #28]
 8008170:	b1eb      	cbz	r3, 80081ae <_dtoa_r+0x76e>
 8008172:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008174:	2b00      	cmp	r3, #0
 8008176:	d067      	beq.n	8008248 <_dtoa_r+0x808>
 8008178:	b18f      	cbz	r7, 800819e <_dtoa_r+0x75e>
 800817a:	4631      	mov	r1, r6
 800817c:	463a      	mov	r2, r7
 800817e:	4620      	mov	r0, r4
 8008180:	f000 fd88 	bl	8008c94 <__pow5mult>
 8008184:	9a04      	ldr	r2, [sp, #16]
 8008186:	4601      	mov	r1, r0
 8008188:	4606      	mov	r6, r0
 800818a:	4620      	mov	r0, r4
 800818c:	f000 fcec 	bl	8008b68 <__multiply>
 8008190:	9904      	ldr	r1, [sp, #16]
 8008192:	9008      	str	r0, [sp, #32]
 8008194:	4620      	mov	r0, r4
 8008196:	f000 fc3e 	bl	8008a16 <_Bfree>
 800819a:	9b08      	ldr	r3, [sp, #32]
 800819c:	9304      	str	r3, [sp, #16]
 800819e:	9b07      	ldr	r3, [sp, #28]
 80081a0:	1bda      	subs	r2, r3, r7
 80081a2:	d004      	beq.n	80081ae <_dtoa_r+0x76e>
 80081a4:	9904      	ldr	r1, [sp, #16]
 80081a6:	4620      	mov	r0, r4
 80081a8:	f000 fd74 	bl	8008c94 <__pow5mult>
 80081ac:	9004      	str	r0, [sp, #16]
 80081ae:	2101      	movs	r1, #1
 80081b0:	4620      	mov	r0, r4
 80081b2:	f000 fcd0 	bl	8008b56 <__i2b>
 80081b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80081b8:	4607      	mov	r7, r0
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	f000 81d0 	beq.w	8008560 <_dtoa_r+0xb20>
 80081c0:	461a      	mov	r2, r3
 80081c2:	4601      	mov	r1, r0
 80081c4:	4620      	mov	r0, r4
 80081c6:	f000 fd65 	bl	8008c94 <__pow5mult>
 80081ca:	9b06      	ldr	r3, [sp, #24]
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	4607      	mov	r7, r0
 80081d0:	dc40      	bgt.n	8008254 <_dtoa_r+0x814>
 80081d2:	9b00      	ldr	r3, [sp, #0]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d139      	bne.n	800824c <_dtoa_r+0x80c>
 80081d8:	9b01      	ldr	r3, [sp, #4]
 80081da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d136      	bne.n	8008250 <_dtoa_r+0x810>
 80081e2:	9b01      	ldr	r3, [sp, #4]
 80081e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80081e8:	0d1b      	lsrs	r3, r3, #20
 80081ea:	051b      	lsls	r3, r3, #20
 80081ec:	b12b      	cbz	r3, 80081fa <_dtoa_r+0x7ba>
 80081ee:	9b05      	ldr	r3, [sp, #20]
 80081f0:	3301      	adds	r3, #1
 80081f2:	9305      	str	r3, [sp, #20]
 80081f4:	f108 0801 	add.w	r8, r8, #1
 80081f8:	2301      	movs	r3, #1
 80081fa:	9307      	str	r3, [sp, #28]
 80081fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d12a      	bne.n	8008258 <_dtoa_r+0x818>
 8008202:	2001      	movs	r0, #1
 8008204:	e030      	b.n	8008268 <_dtoa_r+0x828>
 8008206:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008208:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800820c:	e795      	b.n	800813a <_dtoa_r+0x6fa>
 800820e:	9b07      	ldr	r3, [sp, #28]
 8008210:	f109 37ff 	add.w	r7, r9, #4294967295
 8008214:	42bb      	cmp	r3, r7
 8008216:	bfbf      	itttt	lt
 8008218:	9b07      	ldrlt	r3, [sp, #28]
 800821a:	9707      	strlt	r7, [sp, #28]
 800821c:	1afa      	sublt	r2, r7, r3
 800821e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008220:	bfbb      	ittet	lt
 8008222:	189b      	addlt	r3, r3, r2
 8008224:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008226:	1bdf      	subge	r7, r3, r7
 8008228:	2700      	movlt	r7, #0
 800822a:	f1b9 0f00 	cmp.w	r9, #0
 800822e:	bfb5      	itete	lt
 8008230:	9b05      	ldrlt	r3, [sp, #20]
 8008232:	9d05      	ldrge	r5, [sp, #20]
 8008234:	eba3 0509 	sublt.w	r5, r3, r9
 8008238:	464b      	movge	r3, r9
 800823a:	bfb8      	it	lt
 800823c:	2300      	movlt	r3, #0
 800823e:	e77e      	b.n	800813e <_dtoa_r+0x6fe>
 8008240:	9f07      	ldr	r7, [sp, #28]
 8008242:	9d05      	ldr	r5, [sp, #20]
 8008244:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8008246:	e783      	b.n	8008150 <_dtoa_r+0x710>
 8008248:	9a07      	ldr	r2, [sp, #28]
 800824a:	e7ab      	b.n	80081a4 <_dtoa_r+0x764>
 800824c:	2300      	movs	r3, #0
 800824e:	e7d4      	b.n	80081fa <_dtoa_r+0x7ba>
 8008250:	9b00      	ldr	r3, [sp, #0]
 8008252:	e7d2      	b.n	80081fa <_dtoa_r+0x7ba>
 8008254:	2300      	movs	r3, #0
 8008256:	9307      	str	r3, [sp, #28]
 8008258:	693b      	ldr	r3, [r7, #16]
 800825a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800825e:	6918      	ldr	r0, [r3, #16]
 8008260:	f000 fc2b 	bl	8008aba <__hi0bits>
 8008264:	f1c0 0020 	rsb	r0, r0, #32
 8008268:	4440      	add	r0, r8
 800826a:	f010 001f 	ands.w	r0, r0, #31
 800826e:	d047      	beq.n	8008300 <_dtoa_r+0x8c0>
 8008270:	f1c0 0320 	rsb	r3, r0, #32
 8008274:	2b04      	cmp	r3, #4
 8008276:	dd3b      	ble.n	80082f0 <_dtoa_r+0x8b0>
 8008278:	9b05      	ldr	r3, [sp, #20]
 800827a:	f1c0 001c 	rsb	r0, r0, #28
 800827e:	4403      	add	r3, r0
 8008280:	9305      	str	r3, [sp, #20]
 8008282:	4405      	add	r5, r0
 8008284:	4480      	add	r8, r0
 8008286:	9b05      	ldr	r3, [sp, #20]
 8008288:	2b00      	cmp	r3, #0
 800828a:	dd05      	ble.n	8008298 <_dtoa_r+0x858>
 800828c:	461a      	mov	r2, r3
 800828e:	9904      	ldr	r1, [sp, #16]
 8008290:	4620      	mov	r0, r4
 8008292:	f000 fd4d 	bl	8008d30 <__lshift>
 8008296:	9004      	str	r0, [sp, #16]
 8008298:	f1b8 0f00 	cmp.w	r8, #0
 800829c:	dd05      	ble.n	80082aa <_dtoa_r+0x86a>
 800829e:	4639      	mov	r1, r7
 80082a0:	4642      	mov	r2, r8
 80082a2:	4620      	mov	r0, r4
 80082a4:	f000 fd44 	bl	8008d30 <__lshift>
 80082a8:	4607      	mov	r7, r0
 80082aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80082ac:	b353      	cbz	r3, 8008304 <_dtoa_r+0x8c4>
 80082ae:	4639      	mov	r1, r7
 80082b0:	9804      	ldr	r0, [sp, #16]
 80082b2:	f000 fd91 	bl	8008dd8 <__mcmp>
 80082b6:	2800      	cmp	r0, #0
 80082b8:	da24      	bge.n	8008304 <_dtoa_r+0x8c4>
 80082ba:	2300      	movs	r3, #0
 80082bc:	220a      	movs	r2, #10
 80082be:	9904      	ldr	r1, [sp, #16]
 80082c0:	4620      	mov	r0, r4
 80082c2:	f000 fbbf 	bl	8008a44 <__multadd>
 80082c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082c8:	9004      	str	r0, [sp, #16]
 80082ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	f000 814d 	beq.w	800856e <_dtoa_r+0xb2e>
 80082d4:	2300      	movs	r3, #0
 80082d6:	4631      	mov	r1, r6
 80082d8:	220a      	movs	r2, #10
 80082da:	4620      	mov	r0, r4
 80082dc:	f000 fbb2 	bl	8008a44 <__multadd>
 80082e0:	9b02      	ldr	r3, [sp, #8]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	4606      	mov	r6, r0
 80082e6:	dc4f      	bgt.n	8008388 <_dtoa_r+0x948>
 80082e8:	9b06      	ldr	r3, [sp, #24]
 80082ea:	2b02      	cmp	r3, #2
 80082ec:	dd4c      	ble.n	8008388 <_dtoa_r+0x948>
 80082ee:	e011      	b.n	8008314 <_dtoa_r+0x8d4>
 80082f0:	d0c9      	beq.n	8008286 <_dtoa_r+0x846>
 80082f2:	9a05      	ldr	r2, [sp, #20]
 80082f4:	331c      	adds	r3, #28
 80082f6:	441a      	add	r2, r3
 80082f8:	9205      	str	r2, [sp, #20]
 80082fa:	441d      	add	r5, r3
 80082fc:	4498      	add	r8, r3
 80082fe:	e7c2      	b.n	8008286 <_dtoa_r+0x846>
 8008300:	4603      	mov	r3, r0
 8008302:	e7f6      	b.n	80082f2 <_dtoa_r+0x8b2>
 8008304:	f1b9 0f00 	cmp.w	r9, #0
 8008308:	dc38      	bgt.n	800837c <_dtoa_r+0x93c>
 800830a:	9b06      	ldr	r3, [sp, #24]
 800830c:	2b02      	cmp	r3, #2
 800830e:	dd35      	ble.n	800837c <_dtoa_r+0x93c>
 8008310:	f8cd 9008 	str.w	r9, [sp, #8]
 8008314:	9b02      	ldr	r3, [sp, #8]
 8008316:	b963      	cbnz	r3, 8008332 <_dtoa_r+0x8f2>
 8008318:	4639      	mov	r1, r7
 800831a:	2205      	movs	r2, #5
 800831c:	4620      	mov	r0, r4
 800831e:	f000 fb91 	bl	8008a44 <__multadd>
 8008322:	4601      	mov	r1, r0
 8008324:	4607      	mov	r7, r0
 8008326:	9804      	ldr	r0, [sp, #16]
 8008328:	f000 fd56 	bl	8008dd8 <__mcmp>
 800832c:	2800      	cmp	r0, #0
 800832e:	f73f adcc 	bgt.w	8007eca <_dtoa_r+0x48a>
 8008332:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008334:	465d      	mov	r5, fp
 8008336:	ea6f 0a03 	mvn.w	sl, r3
 800833a:	f04f 0900 	mov.w	r9, #0
 800833e:	4639      	mov	r1, r7
 8008340:	4620      	mov	r0, r4
 8008342:	f000 fb68 	bl	8008a16 <_Bfree>
 8008346:	2e00      	cmp	r6, #0
 8008348:	f43f aeb7 	beq.w	80080ba <_dtoa_r+0x67a>
 800834c:	f1b9 0f00 	cmp.w	r9, #0
 8008350:	d005      	beq.n	800835e <_dtoa_r+0x91e>
 8008352:	45b1      	cmp	r9, r6
 8008354:	d003      	beq.n	800835e <_dtoa_r+0x91e>
 8008356:	4649      	mov	r1, r9
 8008358:	4620      	mov	r0, r4
 800835a:	f000 fb5c 	bl	8008a16 <_Bfree>
 800835e:	4631      	mov	r1, r6
 8008360:	4620      	mov	r0, r4
 8008362:	f000 fb58 	bl	8008a16 <_Bfree>
 8008366:	e6a8      	b.n	80080ba <_dtoa_r+0x67a>
 8008368:	2700      	movs	r7, #0
 800836a:	463e      	mov	r6, r7
 800836c:	e7e1      	b.n	8008332 <_dtoa_r+0x8f2>
 800836e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008372:	463e      	mov	r6, r7
 8008374:	e5a9      	b.n	8007eca <_dtoa_r+0x48a>
 8008376:	bf00      	nop
 8008378:	40240000 	.word	0x40240000
 800837c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800837e:	f8cd 9008 	str.w	r9, [sp, #8]
 8008382:	2b00      	cmp	r3, #0
 8008384:	f000 80fa 	beq.w	800857c <_dtoa_r+0xb3c>
 8008388:	2d00      	cmp	r5, #0
 800838a:	dd05      	ble.n	8008398 <_dtoa_r+0x958>
 800838c:	4631      	mov	r1, r6
 800838e:	462a      	mov	r2, r5
 8008390:	4620      	mov	r0, r4
 8008392:	f000 fccd 	bl	8008d30 <__lshift>
 8008396:	4606      	mov	r6, r0
 8008398:	9b07      	ldr	r3, [sp, #28]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d04c      	beq.n	8008438 <_dtoa_r+0x9f8>
 800839e:	6871      	ldr	r1, [r6, #4]
 80083a0:	4620      	mov	r0, r4
 80083a2:	f000 fb04 	bl	80089ae <_Balloc>
 80083a6:	6932      	ldr	r2, [r6, #16]
 80083a8:	3202      	adds	r2, #2
 80083aa:	4605      	mov	r5, r0
 80083ac:	0092      	lsls	r2, r2, #2
 80083ae:	f106 010c 	add.w	r1, r6, #12
 80083b2:	300c      	adds	r0, #12
 80083b4:	f000 faf0 	bl	8008998 <memcpy>
 80083b8:	2201      	movs	r2, #1
 80083ba:	4629      	mov	r1, r5
 80083bc:	4620      	mov	r0, r4
 80083be:	f000 fcb7 	bl	8008d30 <__lshift>
 80083c2:	9b00      	ldr	r3, [sp, #0]
 80083c4:	f8cd b014 	str.w	fp, [sp, #20]
 80083c8:	f003 0301 	and.w	r3, r3, #1
 80083cc:	46b1      	mov	r9, r6
 80083ce:	9307      	str	r3, [sp, #28]
 80083d0:	4606      	mov	r6, r0
 80083d2:	4639      	mov	r1, r7
 80083d4:	9804      	ldr	r0, [sp, #16]
 80083d6:	f7ff faa5 	bl	8007924 <quorem>
 80083da:	4649      	mov	r1, r9
 80083dc:	4605      	mov	r5, r0
 80083de:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80083e2:	9804      	ldr	r0, [sp, #16]
 80083e4:	f000 fcf8 	bl	8008dd8 <__mcmp>
 80083e8:	4632      	mov	r2, r6
 80083ea:	9000      	str	r0, [sp, #0]
 80083ec:	4639      	mov	r1, r7
 80083ee:	4620      	mov	r0, r4
 80083f0:	f000 fd0c 	bl	8008e0c <__mdiff>
 80083f4:	68c3      	ldr	r3, [r0, #12]
 80083f6:	4602      	mov	r2, r0
 80083f8:	bb03      	cbnz	r3, 800843c <_dtoa_r+0x9fc>
 80083fa:	4601      	mov	r1, r0
 80083fc:	9008      	str	r0, [sp, #32]
 80083fe:	9804      	ldr	r0, [sp, #16]
 8008400:	f000 fcea 	bl	8008dd8 <__mcmp>
 8008404:	9a08      	ldr	r2, [sp, #32]
 8008406:	4603      	mov	r3, r0
 8008408:	4611      	mov	r1, r2
 800840a:	4620      	mov	r0, r4
 800840c:	9308      	str	r3, [sp, #32]
 800840e:	f000 fb02 	bl	8008a16 <_Bfree>
 8008412:	9b08      	ldr	r3, [sp, #32]
 8008414:	b9a3      	cbnz	r3, 8008440 <_dtoa_r+0xa00>
 8008416:	9a06      	ldr	r2, [sp, #24]
 8008418:	b992      	cbnz	r2, 8008440 <_dtoa_r+0xa00>
 800841a:	9a07      	ldr	r2, [sp, #28]
 800841c:	b982      	cbnz	r2, 8008440 <_dtoa_r+0xa00>
 800841e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008422:	d029      	beq.n	8008478 <_dtoa_r+0xa38>
 8008424:	9b00      	ldr	r3, [sp, #0]
 8008426:	2b00      	cmp	r3, #0
 8008428:	dd01      	ble.n	800842e <_dtoa_r+0x9ee>
 800842a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800842e:	9b05      	ldr	r3, [sp, #20]
 8008430:	1c5d      	adds	r5, r3, #1
 8008432:	f883 8000 	strb.w	r8, [r3]
 8008436:	e782      	b.n	800833e <_dtoa_r+0x8fe>
 8008438:	4630      	mov	r0, r6
 800843a:	e7c2      	b.n	80083c2 <_dtoa_r+0x982>
 800843c:	2301      	movs	r3, #1
 800843e:	e7e3      	b.n	8008408 <_dtoa_r+0x9c8>
 8008440:	9a00      	ldr	r2, [sp, #0]
 8008442:	2a00      	cmp	r2, #0
 8008444:	db04      	blt.n	8008450 <_dtoa_r+0xa10>
 8008446:	d125      	bne.n	8008494 <_dtoa_r+0xa54>
 8008448:	9a06      	ldr	r2, [sp, #24]
 800844a:	bb1a      	cbnz	r2, 8008494 <_dtoa_r+0xa54>
 800844c:	9a07      	ldr	r2, [sp, #28]
 800844e:	bb0a      	cbnz	r2, 8008494 <_dtoa_r+0xa54>
 8008450:	2b00      	cmp	r3, #0
 8008452:	ddec      	ble.n	800842e <_dtoa_r+0x9ee>
 8008454:	2201      	movs	r2, #1
 8008456:	9904      	ldr	r1, [sp, #16]
 8008458:	4620      	mov	r0, r4
 800845a:	f000 fc69 	bl	8008d30 <__lshift>
 800845e:	4639      	mov	r1, r7
 8008460:	9004      	str	r0, [sp, #16]
 8008462:	f000 fcb9 	bl	8008dd8 <__mcmp>
 8008466:	2800      	cmp	r0, #0
 8008468:	dc03      	bgt.n	8008472 <_dtoa_r+0xa32>
 800846a:	d1e0      	bne.n	800842e <_dtoa_r+0x9ee>
 800846c:	f018 0f01 	tst.w	r8, #1
 8008470:	d0dd      	beq.n	800842e <_dtoa_r+0x9ee>
 8008472:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008476:	d1d8      	bne.n	800842a <_dtoa_r+0x9ea>
 8008478:	9b05      	ldr	r3, [sp, #20]
 800847a:	9a05      	ldr	r2, [sp, #20]
 800847c:	1c5d      	adds	r5, r3, #1
 800847e:	2339      	movs	r3, #57	; 0x39
 8008480:	7013      	strb	r3, [r2, #0]
 8008482:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008486:	2b39      	cmp	r3, #57	; 0x39
 8008488:	f105 32ff 	add.w	r2, r5, #4294967295
 800848c:	d04f      	beq.n	800852e <_dtoa_r+0xaee>
 800848e:	3301      	adds	r3, #1
 8008490:	7013      	strb	r3, [r2, #0]
 8008492:	e754      	b.n	800833e <_dtoa_r+0x8fe>
 8008494:	9a05      	ldr	r2, [sp, #20]
 8008496:	2b00      	cmp	r3, #0
 8008498:	f102 0501 	add.w	r5, r2, #1
 800849c:	dd06      	ble.n	80084ac <_dtoa_r+0xa6c>
 800849e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80084a2:	d0e9      	beq.n	8008478 <_dtoa_r+0xa38>
 80084a4:	f108 0801 	add.w	r8, r8, #1
 80084a8:	9b05      	ldr	r3, [sp, #20]
 80084aa:	e7c2      	b.n	8008432 <_dtoa_r+0x9f2>
 80084ac:	9a02      	ldr	r2, [sp, #8]
 80084ae:	f805 8c01 	strb.w	r8, [r5, #-1]
 80084b2:	eba5 030b 	sub.w	r3, r5, fp
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d021      	beq.n	80084fe <_dtoa_r+0xabe>
 80084ba:	2300      	movs	r3, #0
 80084bc:	220a      	movs	r2, #10
 80084be:	9904      	ldr	r1, [sp, #16]
 80084c0:	4620      	mov	r0, r4
 80084c2:	f000 fabf 	bl	8008a44 <__multadd>
 80084c6:	45b1      	cmp	r9, r6
 80084c8:	9004      	str	r0, [sp, #16]
 80084ca:	f04f 0300 	mov.w	r3, #0
 80084ce:	f04f 020a 	mov.w	r2, #10
 80084d2:	4649      	mov	r1, r9
 80084d4:	4620      	mov	r0, r4
 80084d6:	d105      	bne.n	80084e4 <_dtoa_r+0xaa4>
 80084d8:	f000 fab4 	bl	8008a44 <__multadd>
 80084dc:	4681      	mov	r9, r0
 80084de:	4606      	mov	r6, r0
 80084e0:	9505      	str	r5, [sp, #20]
 80084e2:	e776      	b.n	80083d2 <_dtoa_r+0x992>
 80084e4:	f000 faae 	bl	8008a44 <__multadd>
 80084e8:	4631      	mov	r1, r6
 80084ea:	4681      	mov	r9, r0
 80084ec:	2300      	movs	r3, #0
 80084ee:	220a      	movs	r2, #10
 80084f0:	4620      	mov	r0, r4
 80084f2:	f000 faa7 	bl	8008a44 <__multadd>
 80084f6:	4606      	mov	r6, r0
 80084f8:	e7f2      	b.n	80084e0 <_dtoa_r+0xaa0>
 80084fa:	f04f 0900 	mov.w	r9, #0
 80084fe:	2201      	movs	r2, #1
 8008500:	9904      	ldr	r1, [sp, #16]
 8008502:	4620      	mov	r0, r4
 8008504:	f000 fc14 	bl	8008d30 <__lshift>
 8008508:	4639      	mov	r1, r7
 800850a:	9004      	str	r0, [sp, #16]
 800850c:	f000 fc64 	bl	8008dd8 <__mcmp>
 8008510:	2800      	cmp	r0, #0
 8008512:	dcb6      	bgt.n	8008482 <_dtoa_r+0xa42>
 8008514:	d102      	bne.n	800851c <_dtoa_r+0xadc>
 8008516:	f018 0f01 	tst.w	r8, #1
 800851a:	d1b2      	bne.n	8008482 <_dtoa_r+0xa42>
 800851c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008520:	2b30      	cmp	r3, #48	; 0x30
 8008522:	f105 32ff 	add.w	r2, r5, #4294967295
 8008526:	f47f af0a 	bne.w	800833e <_dtoa_r+0x8fe>
 800852a:	4615      	mov	r5, r2
 800852c:	e7f6      	b.n	800851c <_dtoa_r+0xadc>
 800852e:	4593      	cmp	fp, r2
 8008530:	d105      	bne.n	800853e <_dtoa_r+0xafe>
 8008532:	2331      	movs	r3, #49	; 0x31
 8008534:	f10a 0a01 	add.w	sl, sl, #1
 8008538:	f88b 3000 	strb.w	r3, [fp]
 800853c:	e6ff      	b.n	800833e <_dtoa_r+0x8fe>
 800853e:	4615      	mov	r5, r2
 8008540:	e79f      	b.n	8008482 <_dtoa_r+0xa42>
 8008542:	f8df b064 	ldr.w	fp, [pc, #100]	; 80085a8 <_dtoa_r+0xb68>
 8008546:	e007      	b.n	8008558 <_dtoa_r+0xb18>
 8008548:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800854a:	f8df b060 	ldr.w	fp, [pc, #96]	; 80085ac <_dtoa_r+0xb6c>
 800854e:	b11b      	cbz	r3, 8008558 <_dtoa_r+0xb18>
 8008550:	f10b 0308 	add.w	r3, fp, #8
 8008554:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008556:	6013      	str	r3, [r2, #0]
 8008558:	4658      	mov	r0, fp
 800855a:	b017      	add	sp, #92	; 0x5c
 800855c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008560:	9b06      	ldr	r3, [sp, #24]
 8008562:	2b01      	cmp	r3, #1
 8008564:	f77f ae35 	ble.w	80081d2 <_dtoa_r+0x792>
 8008568:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800856a:	9307      	str	r3, [sp, #28]
 800856c:	e649      	b.n	8008202 <_dtoa_r+0x7c2>
 800856e:	9b02      	ldr	r3, [sp, #8]
 8008570:	2b00      	cmp	r3, #0
 8008572:	dc03      	bgt.n	800857c <_dtoa_r+0xb3c>
 8008574:	9b06      	ldr	r3, [sp, #24]
 8008576:	2b02      	cmp	r3, #2
 8008578:	f73f aecc 	bgt.w	8008314 <_dtoa_r+0x8d4>
 800857c:	465d      	mov	r5, fp
 800857e:	4639      	mov	r1, r7
 8008580:	9804      	ldr	r0, [sp, #16]
 8008582:	f7ff f9cf 	bl	8007924 <quorem>
 8008586:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800858a:	f805 8b01 	strb.w	r8, [r5], #1
 800858e:	9a02      	ldr	r2, [sp, #8]
 8008590:	eba5 030b 	sub.w	r3, r5, fp
 8008594:	429a      	cmp	r2, r3
 8008596:	ddb0      	ble.n	80084fa <_dtoa_r+0xaba>
 8008598:	2300      	movs	r3, #0
 800859a:	220a      	movs	r2, #10
 800859c:	9904      	ldr	r1, [sp, #16]
 800859e:	4620      	mov	r0, r4
 80085a0:	f000 fa50 	bl	8008a44 <__multadd>
 80085a4:	9004      	str	r0, [sp, #16]
 80085a6:	e7ea      	b.n	800857e <_dtoa_r+0xb3e>
 80085a8:	080094bc 	.word	0x080094bc
 80085ac:	080094be 	.word	0x080094be

080085b0 <__sflush_r>:
 80085b0:	898a      	ldrh	r2, [r1, #12]
 80085b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085b6:	4605      	mov	r5, r0
 80085b8:	0710      	lsls	r0, r2, #28
 80085ba:	460c      	mov	r4, r1
 80085bc:	d458      	bmi.n	8008670 <__sflush_r+0xc0>
 80085be:	684b      	ldr	r3, [r1, #4]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	dc05      	bgt.n	80085d0 <__sflush_r+0x20>
 80085c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	dc02      	bgt.n	80085d0 <__sflush_r+0x20>
 80085ca:	2000      	movs	r0, #0
 80085cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80085d2:	2e00      	cmp	r6, #0
 80085d4:	d0f9      	beq.n	80085ca <__sflush_r+0x1a>
 80085d6:	2300      	movs	r3, #0
 80085d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80085dc:	682f      	ldr	r7, [r5, #0]
 80085de:	6a21      	ldr	r1, [r4, #32]
 80085e0:	602b      	str	r3, [r5, #0]
 80085e2:	d032      	beq.n	800864a <__sflush_r+0x9a>
 80085e4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80085e6:	89a3      	ldrh	r3, [r4, #12]
 80085e8:	075a      	lsls	r2, r3, #29
 80085ea:	d505      	bpl.n	80085f8 <__sflush_r+0x48>
 80085ec:	6863      	ldr	r3, [r4, #4]
 80085ee:	1ac0      	subs	r0, r0, r3
 80085f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80085f2:	b10b      	cbz	r3, 80085f8 <__sflush_r+0x48>
 80085f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80085f6:	1ac0      	subs	r0, r0, r3
 80085f8:	2300      	movs	r3, #0
 80085fa:	4602      	mov	r2, r0
 80085fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80085fe:	6a21      	ldr	r1, [r4, #32]
 8008600:	4628      	mov	r0, r5
 8008602:	47b0      	blx	r6
 8008604:	1c43      	adds	r3, r0, #1
 8008606:	89a3      	ldrh	r3, [r4, #12]
 8008608:	d106      	bne.n	8008618 <__sflush_r+0x68>
 800860a:	6829      	ldr	r1, [r5, #0]
 800860c:	291d      	cmp	r1, #29
 800860e:	d848      	bhi.n	80086a2 <__sflush_r+0xf2>
 8008610:	4a29      	ldr	r2, [pc, #164]	; (80086b8 <__sflush_r+0x108>)
 8008612:	40ca      	lsrs	r2, r1
 8008614:	07d6      	lsls	r6, r2, #31
 8008616:	d544      	bpl.n	80086a2 <__sflush_r+0xf2>
 8008618:	2200      	movs	r2, #0
 800861a:	6062      	str	r2, [r4, #4]
 800861c:	04d9      	lsls	r1, r3, #19
 800861e:	6922      	ldr	r2, [r4, #16]
 8008620:	6022      	str	r2, [r4, #0]
 8008622:	d504      	bpl.n	800862e <__sflush_r+0x7e>
 8008624:	1c42      	adds	r2, r0, #1
 8008626:	d101      	bne.n	800862c <__sflush_r+0x7c>
 8008628:	682b      	ldr	r3, [r5, #0]
 800862a:	b903      	cbnz	r3, 800862e <__sflush_r+0x7e>
 800862c:	6560      	str	r0, [r4, #84]	; 0x54
 800862e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008630:	602f      	str	r7, [r5, #0]
 8008632:	2900      	cmp	r1, #0
 8008634:	d0c9      	beq.n	80085ca <__sflush_r+0x1a>
 8008636:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800863a:	4299      	cmp	r1, r3
 800863c:	d002      	beq.n	8008644 <__sflush_r+0x94>
 800863e:	4628      	mov	r0, r5
 8008640:	f000 fc9e 	bl	8008f80 <_free_r>
 8008644:	2000      	movs	r0, #0
 8008646:	6360      	str	r0, [r4, #52]	; 0x34
 8008648:	e7c0      	b.n	80085cc <__sflush_r+0x1c>
 800864a:	2301      	movs	r3, #1
 800864c:	4628      	mov	r0, r5
 800864e:	47b0      	blx	r6
 8008650:	1c41      	adds	r1, r0, #1
 8008652:	d1c8      	bne.n	80085e6 <__sflush_r+0x36>
 8008654:	682b      	ldr	r3, [r5, #0]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d0c5      	beq.n	80085e6 <__sflush_r+0x36>
 800865a:	2b1d      	cmp	r3, #29
 800865c:	d001      	beq.n	8008662 <__sflush_r+0xb2>
 800865e:	2b16      	cmp	r3, #22
 8008660:	d101      	bne.n	8008666 <__sflush_r+0xb6>
 8008662:	602f      	str	r7, [r5, #0]
 8008664:	e7b1      	b.n	80085ca <__sflush_r+0x1a>
 8008666:	89a3      	ldrh	r3, [r4, #12]
 8008668:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800866c:	81a3      	strh	r3, [r4, #12]
 800866e:	e7ad      	b.n	80085cc <__sflush_r+0x1c>
 8008670:	690f      	ldr	r7, [r1, #16]
 8008672:	2f00      	cmp	r7, #0
 8008674:	d0a9      	beq.n	80085ca <__sflush_r+0x1a>
 8008676:	0793      	lsls	r3, r2, #30
 8008678:	680e      	ldr	r6, [r1, #0]
 800867a:	bf08      	it	eq
 800867c:	694b      	ldreq	r3, [r1, #20]
 800867e:	600f      	str	r7, [r1, #0]
 8008680:	bf18      	it	ne
 8008682:	2300      	movne	r3, #0
 8008684:	eba6 0807 	sub.w	r8, r6, r7
 8008688:	608b      	str	r3, [r1, #8]
 800868a:	f1b8 0f00 	cmp.w	r8, #0
 800868e:	dd9c      	ble.n	80085ca <__sflush_r+0x1a>
 8008690:	4643      	mov	r3, r8
 8008692:	463a      	mov	r2, r7
 8008694:	6a21      	ldr	r1, [r4, #32]
 8008696:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008698:	4628      	mov	r0, r5
 800869a:	47b0      	blx	r6
 800869c:	2800      	cmp	r0, #0
 800869e:	dc06      	bgt.n	80086ae <__sflush_r+0xfe>
 80086a0:	89a3      	ldrh	r3, [r4, #12]
 80086a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086a6:	81a3      	strh	r3, [r4, #12]
 80086a8:	f04f 30ff 	mov.w	r0, #4294967295
 80086ac:	e78e      	b.n	80085cc <__sflush_r+0x1c>
 80086ae:	4407      	add	r7, r0
 80086b0:	eba8 0800 	sub.w	r8, r8, r0
 80086b4:	e7e9      	b.n	800868a <__sflush_r+0xda>
 80086b6:	bf00      	nop
 80086b8:	20400001 	.word	0x20400001

080086bc <_fflush_r>:
 80086bc:	b538      	push	{r3, r4, r5, lr}
 80086be:	690b      	ldr	r3, [r1, #16]
 80086c0:	4605      	mov	r5, r0
 80086c2:	460c      	mov	r4, r1
 80086c4:	b1db      	cbz	r3, 80086fe <_fflush_r+0x42>
 80086c6:	b118      	cbz	r0, 80086d0 <_fflush_r+0x14>
 80086c8:	6983      	ldr	r3, [r0, #24]
 80086ca:	b90b      	cbnz	r3, 80086d0 <_fflush_r+0x14>
 80086cc:	f000 f860 	bl	8008790 <__sinit>
 80086d0:	4b0c      	ldr	r3, [pc, #48]	; (8008704 <_fflush_r+0x48>)
 80086d2:	429c      	cmp	r4, r3
 80086d4:	d109      	bne.n	80086ea <_fflush_r+0x2e>
 80086d6:	686c      	ldr	r4, [r5, #4]
 80086d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086dc:	b17b      	cbz	r3, 80086fe <_fflush_r+0x42>
 80086de:	4621      	mov	r1, r4
 80086e0:	4628      	mov	r0, r5
 80086e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80086e6:	f7ff bf63 	b.w	80085b0 <__sflush_r>
 80086ea:	4b07      	ldr	r3, [pc, #28]	; (8008708 <_fflush_r+0x4c>)
 80086ec:	429c      	cmp	r4, r3
 80086ee:	d101      	bne.n	80086f4 <_fflush_r+0x38>
 80086f0:	68ac      	ldr	r4, [r5, #8]
 80086f2:	e7f1      	b.n	80086d8 <_fflush_r+0x1c>
 80086f4:	4b05      	ldr	r3, [pc, #20]	; (800870c <_fflush_r+0x50>)
 80086f6:	429c      	cmp	r4, r3
 80086f8:	bf08      	it	eq
 80086fa:	68ec      	ldreq	r4, [r5, #12]
 80086fc:	e7ec      	b.n	80086d8 <_fflush_r+0x1c>
 80086fe:	2000      	movs	r0, #0
 8008700:	bd38      	pop	{r3, r4, r5, pc}
 8008702:	bf00      	nop
 8008704:	080094ec 	.word	0x080094ec
 8008708:	0800950c 	.word	0x0800950c
 800870c:	080094cc 	.word	0x080094cc

08008710 <std>:
 8008710:	2300      	movs	r3, #0
 8008712:	b510      	push	{r4, lr}
 8008714:	4604      	mov	r4, r0
 8008716:	e9c0 3300 	strd	r3, r3, [r0]
 800871a:	6083      	str	r3, [r0, #8]
 800871c:	8181      	strh	r1, [r0, #12]
 800871e:	6643      	str	r3, [r0, #100]	; 0x64
 8008720:	81c2      	strh	r2, [r0, #14]
 8008722:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008726:	6183      	str	r3, [r0, #24]
 8008728:	4619      	mov	r1, r3
 800872a:	2208      	movs	r2, #8
 800872c:	305c      	adds	r0, #92	; 0x5c
 800872e:	f7fe fbcd 	bl	8006ecc <memset>
 8008732:	4b05      	ldr	r3, [pc, #20]	; (8008748 <std+0x38>)
 8008734:	6263      	str	r3, [r4, #36]	; 0x24
 8008736:	4b05      	ldr	r3, [pc, #20]	; (800874c <std+0x3c>)
 8008738:	62a3      	str	r3, [r4, #40]	; 0x28
 800873a:	4b05      	ldr	r3, [pc, #20]	; (8008750 <std+0x40>)
 800873c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800873e:	4b05      	ldr	r3, [pc, #20]	; (8008754 <std+0x44>)
 8008740:	6224      	str	r4, [r4, #32]
 8008742:	6323      	str	r3, [r4, #48]	; 0x30
 8008744:	bd10      	pop	{r4, pc}
 8008746:	bf00      	nop
 8008748:	080090f1 	.word	0x080090f1
 800874c:	08009113 	.word	0x08009113
 8008750:	0800914b 	.word	0x0800914b
 8008754:	0800916f 	.word	0x0800916f

08008758 <_cleanup_r>:
 8008758:	4901      	ldr	r1, [pc, #4]	; (8008760 <_cleanup_r+0x8>)
 800875a:	f000 b885 	b.w	8008868 <_fwalk_reent>
 800875e:	bf00      	nop
 8008760:	080086bd 	.word	0x080086bd

08008764 <__sfmoreglue>:
 8008764:	b570      	push	{r4, r5, r6, lr}
 8008766:	1e4a      	subs	r2, r1, #1
 8008768:	2568      	movs	r5, #104	; 0x68
 800876a:	4355      	muls	r5, r2
 800876c:	460e      	mov	r6, r1
 800876e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008772:	f000 fc53 	bl	800901c <_malloc_r>
 8008776:	4604      	mov	r4, r0
 8008778:	b140      	cbz	r0, 800878c <__sfmoreglue+0x28>
 800877a:	2100      	movs	r1, #0
 800877c:	e9c0 1600 	strd	r1, r6, [r0]
 8008780:	300c      	adds	r0, #12
 8008782:	60a0      	str	r0, [r4, #8]
 8008784:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008788:	f7fe fba0 	bl	8006ecc <memset>
 800878c:	4620      	mov	r0, r4
 800878e:	bd70      	pop	{r4, r5, r6, pc}

08008790 <__sinit>:
 8008790:	6983      	ldr	r3, [r0, #24]
 8008792:	b510      	push	{r4, lr}
 8008794:	4604      	mov	r4, r0
 8008796:	bb33      	cbnz	r3, 80087e6 <__sinit+0x56>
 8008798:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800879c:	6503      	str	r3, [r0, #80]	; 0x50
 800879e:	4b12      	ldr	r3, [pc, #72]	; (80087e8 <__sinit+0x58>)
 80087a0:	4a12      	ldr	r2, [pc, #72]	; (80087ec <__sinit+0x5c>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	6282      	str	r2, [r0, #40]	; 0x28
 80087a6:	4298      	cmp	r0, r3
 80087a8:	bf04      	itt	eq
 80087aa:	2301      	moveq	r3, #1
 80087ac:	6183      	streq	r3, [r0, #24]
 80087ae:	f000 f81f 	bl	80087f0 <__sfp>
 80087b2:	6060      	str	r0, [r4, #4]
 80087b4:	4620      	mov	r0, r4
 80087b6:	f000 f81b 	bl	80087f0 <__sfp>
 80087ba:	60a0      	str	r0, [r4, #8]
 80087bc:	4620      	mov	r0, r4
 80087be:	f000 f817 	bl	80087f0 <__sfp>
 80087c2:	2200      	movs	r2, #0
 80087c4:	60e0      	str	r0, [r4, #12]
 80087c6:	2104      	movs	r1, #4
 80087c8:	6860      	ldr	r0, [r4, #4]
 80087ca:	f7ff ffa1 	bl	8008710 <std>
 80087ce:	2201      	movs	r2, #1
 80087d0:	2109      	movs	r1, #9
 80087d2:	68a0      	ldr	r0, [r4, #8]
 80087d4:	f7ff ff9c 	bl	8008710 <std>
 80087d8:	2202      	movs	r2, #2
 80087da:	2112      	movs	r1, #18
 80087dc:	68e0      	ldr	r0, [r4, #12]
 80087de:	f7ff ff97 	bl	8008710 <std>
 80087e2:	2301      	movs	r3, #1
 80087e4:	61a3      	str	r3, [r4, #24]
 80087e6:	bd10      	pop	{r4, pc}
 80087e8:	080094a8 	.word	0x080094a8
 80087ec:	08008759 	.word	0x08008759

080087f0 <__sfp>:
 80087f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087f2:	4b1b      	ldr	r3, [pc, #108]	; (8008860 <__sfp+0x70>)
 80087f4:	681e      	ldr	r6, [r3, #0]
 80087f6:	69b3      	ldr	r3, [r6, #24]
 80087f8:	4607      	mov	r7, r0
 80087fa:	b913      	cbnz	r3, 8008802 <__sfp+0x12>
 80087fc:	4630      	mov	r0, r6
 80087fe:	f7ff ffc7 	bl	8008790 <__sinit>
 8008802:	3648      	adds	r6, #72	; 0x48
 8008804:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008808:	3b01      	subs	r3, #1
 800880a:	d503      	bpl.n	8008814 <__sfp+0x24>
 800880c:	6833      	ldr	r3, [r6, #0]
 800880e:	b133      	cbz	r3, 800881e <__sfp+0x2e>
 8008810:	6836      	ldr	r6, [r6, #0]
 8008812:	e7f7      	b.n	8008804 <__sfp+0x14>
 8008814:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008818:	b16d      	cbz	r5, 8008836 <__sfp+0x46>
 800881a:	3468      	adds	r4, #104	; 0x68
 800881c:	e7f4      	b.n	8008808 <__sfp+0x18>
 800881e:	2104      	movs	r1, #4
 8008820:	4638      	mov	r0, r7
 8008822:	f7ff ff9f 	bl	8008764 <__sfmoreglue>
 8008826:	6030      	str	r0, [r6, #0]
 8008828:	2800      	cmp	r0, #0
 800882a:	d1f1      	bne.n	8008810 <__sfp+0x20>
 800882c:	230c      	movs	r3, #12
 800882e:	603b      	str	r3, [r7, #0]
 8008830:	4604      	mov	r4, r0
 8008832:	4620      	mov	r0, r4
 8008834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008836:	4b0b      	ldr	r3, [pc, #44]	; (8008864 <__sfp+0x74>)
 8008838:	6665      	str	r5, [r4, #100]	; 0x64
 800883a:	e9c4 5500 	strd	r5, r5, [r4]
 800883e:	60a5      	str	r5, [r4, #8]
 8008840:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8008844:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8008848:	2208      	movs	r2, #8
 800884a:	4629      	mov	r1, r5
 800884c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008850:	f7fe fb3c 	bl	8006ecc <memset>
 8008854:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008858:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800885c:	e7e9      	b.n	8008832 <__sfp+0x42>
 800885e:	bf00      	nop
 8008860:	080094a8 	.word	0x080094a8
 8008864:	ffff0001 	.word	0xffff0001

08008868 <_fwalk_reent>:
 8008868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800886c:	4680      	mov	r8, r0
 800886e:	4689      	mov	r9, r1
 8008870:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008874:	2600      	movs	r6, #0
 8008876:	b914      	cbnz	r4, 800887e <_fwalk_reent+0x16>
 8008878:	4630      	mov	r0, r6
 800887a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800887e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8008882:	3f01      	subs	r7, #1
 8008884:	d501      	bpl.n	800888a <_fwalk_reent+0x22>
 8008886:	6824      	ldr	r4, [r4, #0]
 8008888:	e7f5      	b.n	8008876 <_fwalk_reent+0xe>
 800888a:	89ab      	ldrh	r3, [r5, #12]
 800888c:	2b01      	cmp	r3, #1
 800888e:	d907      	bls.n	80088a0 <_fwalk_reent+0x38>
 8008890:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008894:	3301      	adds	r3, #1
 8008896:	d003      	beq.n	80088a0 <_fwalk_reent+0x38>
 8008898:	4629      	mov	r1, r5
 800889a:	4640      	mov	r0, r8
 800889c:	47c8      	blx	r9
 800889e:	4306      	orrs	r6, r0
 80088a0:	3568      	adds	r5, #104	; 0x68
 80088a2:	e7ee      	b.n	8008882 <_fwalk_reent+0x1a>

080088a4 <_localeconv_r>:
 80088a4:	4b04      	ldr	r3, [pc, #16]	; (80088b8 <_localeconv_r+0x14>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	6a18      	ldr	r0, [r3, #32]
 80088aa:	4b04      	ldr	r3, [pc, #16]	; (80088bc <_localeconv_r+0x18>)
 80088ac:	2800      	cmp	r0, #0
 80088ae:	bf08      	it	eq
 80088b0:	4618      	moveq	r0, r3
 80088b2:	30f0      	adds	r0, #240	; 0xf0
 80088b4:	4770      	bx	lr
 80088b6:	bf00      	nop
 80088b8:	20000018 	.word	0x20000018
 80088bc:	2000007c 	.word	0x2000007c

080088c0 <__swhatbuf_r>:
 80088c0:	b570      	push	{r4, r5, r6, lr}
 80088c2:	460e      	mov	r6, r1
 80088c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088c8:	2900      	cmp	r1, #0
 80088ca:	b096      	sub	sp, #88	; 0x58
 80088cc:	4614      	mov	r4, r2
 80088ce:	461d      	mov	r5, r3
 80088d0:	da07      	bge.n	80088e2 <__swhatbuf_r+0x22>
 80088d2:	2300      	movs	r3, #0
 80088d4:	602b      	str	r3, [r5, #0]
 80088d6:	89b3      	ldrh	r3, [r6, #12]
 80088d8:	061a      	lsls	r2, r3, #24
 80088da:	d410      	bmi.n	80088fe <__swhatbuf_r+0x3e>
 80088dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80088e0:	e00e      	b.n	8008900 <__swhatbuf_r+0x40>
 80088e2:	466a      	mov	r2, sp
 80088e4:	f000 fc6a 	bl	80091bc <_fstat_r>
 80088e8:	2800      	cmp	r0, #0
 80088ea:	dbf2      	blt.n	80088d2 <__swhatbuf_r+0x12>
 80088ec:	9a01      	ldr	r2, [sp, #4]
 80088ee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80088f2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80088f6:	425a      	negs	r2, r3
 80088f8:	415a      	adcs	r2, r3
 80088fa:	602a      	str	r2, [r5, #0]
 80088fc:	e7ee      	b.n	80088dc <__swhatbuf_r+0x1c>
 80088fe:	2340      	movs	r3, #64	; 0x40
 8008900:	2000      	movs	r0, #0
 8008902:	6023      	str	r3, [r4, #0]
 8008904:	b016      	add	sp, #88	; 0x58
 8008906:	bd70      	pop	{r4, r5, r6, pc}

08008908 <__smakebuf_r>:
 8008908:	898b      	ldrh	r3, [r1, #12]
 800890a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800890c:	079d      	lsls	r5, r3, #30
 800890e:	4606      	mov	r6, r0
 8008910:	460c      	mov	r4, r1
 8008912:	d507      	bpl.n	8008924 <__smakebuf_r+0x1c>
 8008914:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008918:	6023      	str	r3, [r4, #0]
 800891a:	6123      	str	r3, [r4, #16]
 800891c:	2301      	movs	r3, #1
 800891e:	6163      	str	r3, [r4, #20]
 8008920:	b002      	add	sp, #8
 8008922:	bd70      	pop	{r4, r5, r6, pc}
 8008924:	ab01      	add	r3, sp, #4
 8008926:	466a      	mov	r2, sp
 8008928:	f7ff ffca 	bl	80088c0 <__swhatbuf_r>
 800892c:	9900      	ldr	r1, [sp, #0]
 800892e:	4605      	mov	r5, r0
 8008930:	4630      	mov	r0, r6
 8008932:	f000 fb73 	bl	800901c <_malloc_r>
 8008936:	b948      	cbnz	r0, 800894c <__smakebuf_r+0x44>
 8008938:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800893c:	059a      	lsls	r2, r3, #22
 800893e:	d4ef      	bmi.n	8008920 <__smakebuf_r+0x18>
 8008940:	f023 0303 	bic.w	r3, r3, #3
 8008944:	f043 0302 	orr.w	r3, r3, #2
 8008948:	81a3      	strh	r3, [r4, #12]
 800894a:	e7e3      	b.n	8008914 <__smakebuf_r+0xc>
 800894c:	4b0d      	ldr	r3, [pc, #52]	; (8008984 <__smakebuf_r+0x7c>)
 800894e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008950:	89a3      	ldrh	r3, [r4, #12]
 8008952:	6020      	str	r0, [r4, #0]
 8008954:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008958:	81a3      	strh	r3, [r4, #12]
 800895a:	9b00      	ldr	r3, [sp, #0]
 800895c:	6163      	str	r3, [r4, #20]
 800895e:	9b01      	ldr	r3, [sp, #4]
 8008960:	6120      	str	r0, [r4, #16]
 8008962:	b15b      	cbz	r3, 800897c <__smakebuf_r+0x74>
 8008964:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008968:	4630      	mov	r0, r6
 800896a:	f000 fc39 	bl	80091e0 <_isatty_r>
 800896e:	b128      	cbz	r0, 800897c <__smakebuf_r+0x74>
 8008970:	89a3      	ldrh	r3, [r4, #12]
 8008972:	f023 0303 	bic.w	r3, r3, #3
 8008976:	f043 0301 	orr.w	r3, r3, #1
 800897a:	81a3      	strh	r3, [r4, #12]
 800897c:	89a3      	ldrh	r3, [r4, #12]
 800897e:	431d      	orrs	r5, r3
 8008980:	81a5      	strh	r5, [r4, #12]
 8008982:	e7cd      	b.n	8008920 <__smakebuf_r+0x18>
 8008984:	08008759 	.word	0x08008759

08008988 <malloc>:
 8008988:	4b02      	ldr	r3, [pc, #8]	; (8008994 <malloc+0xc>)
 800898a:	4601      	mov	r1, r0
 800898c:	6818      	ldr	r0, [r3, #0]
 800898e:	f000 bb45 	b.w	800901c <_malloc_r>
 8008992:	bf00      	nop
 8008994:	20000018 	.word	0x20000018

08008998 <memcpy>:
 8008998:	b510      	push	{r4, lr}
 800899a:	1e43      	subs	r3, r0, #1
 800899c:	440a      	add	r2, r1
 800899e:	4291      	cmp	r1, r2
 80089a0:	d100      	bne.n	80089a4 <memcpy+0xc>
 80089a2:	bd10      	pop	{r4, pc}
 80089a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80089ac:	e7f7      	b.n	800899e <memcpy+0x6>

080089ae <_Balloc>:
 80089ae:	b570      	push	{r4, r5, r6, lr}
 80089b0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80089b2:	4604      	mov	r4, r0
 80089b4:	460e      	mov	r6, r1
 80089b6:	b93d      	cbnz	r5, 80089c8 <_Balloc+0x1a>
 80089b8:	2010      	movs	r0, #16
 80089ba:	f7ff ffe5 	bl	8008988 <malloc>
 80089be:	6260      	str	r0, [r4, #36]	; 0x24
 80089c0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80089c4:	6005      	str	r5, [r0, #0]
 80089c6:	60c5      	str	r5, [r0, #12]
 80089c8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80089ca:	68eb      	ldr	r3, [r5, #12]
 80089cc:	b183      	cbz	r3, 80089f0 <_Balloc+0x42>
 80089ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089d0:	68db      	ldr	r3, [r3, #12]
 80089d2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80089d6:	b9b8      	cbnz	r0, 8008a08 <_Balloc+0x5a>
 80089d8:	2101      	movs	r1, #1
 80089da:	fa01 f506 	lsl.w	r5, r1, r6
 80089de:	1d6a      	adds	r2, r5, #5
 80089e0:	0092      	lsls	r2, r2, #2
 80089e2:	4620      	mov	r0, r4
 80089e4:	f000 fabe 	bl	8008f64 <_calloc_r>
 80089e8:	b160      	cbz	r0, 8008a04 <_Balloc+0x56>
 80089ea:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80089ee:	e00e      	b.n	8008a0e <_Balloc+0x60>
 80089f0:	2221      	movs	r2, #33	; 0x21
 80089f2:	2104      	movs	r1, #4
 80089f4:	4620      	mov	r0, r4
 80089f6:	f000 fab5 	bl	8008f64 <_calloc_r>
 80089fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089fc:	60e8      	str	r0, [r5, #12]
 80089fe:	68db      	ldr	r3, [r3, #12]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d1e4      	bne.n	80089ce <_Balloc+0x20>
 8008a04:	2000      	movs	r0, #0
 8008a06:	bd70      	pop	{r4, r5, r6, pc}
 8008a08:	6802      	ldr	r2, [r0, #0]
 8008a0a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8008a0e:	2300      	movs	r3, #0
 8008a10:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008a14:	e7f7      	b.n	8008a06 <_Balloc+0x58>

08008a16 <_Bfree>:
 8008a16:	b570      	push	{r4, r5, r6, lr}
 8008a18:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008a1a:	4606      	mov	r6, r0
 8008a1c:	460d      	mov	r5, r1
 8008a1e:	b93c      	cbnz	r4, 8008a30 <_Bfree+0x1a>
 8008a20:	2010      	movs	r0, #16
 8008a22:	f7ff ffb1 	bl	8008988 <malloc>
 8008a26:	6270      	str	r0, [r6, #36]	; 0x24
 8008a28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008a2c:	6004      	str	r4, [r0, #0]
 8008a2e:	60c4      	str	r4, [r0, #12]
 8008a30:	b13d      	cbz	r5, 8008a42 <_Bfree+0x2c>
 8008a32:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008a34:	686a      	ldr	r2, [r5, #4]
 8008a36:	68db      	ldr	r3, [r3, #12]
 8008a38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008a3c:	6029      	str	r1, [r5, #0]
 8008a3e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008a42:	bd70      	pop	{r4, r5, r6, pc}

08008a44 <__multadd>:
 8008a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a48:	690d      	ldr	r5, [r1, #16]
 8008a4a:	461f      	mov	r7, r3
 8008a4c:	4606      	mov	r6, r0
 8008a4e:	460c      	mov	r4, r1
 8008a50:	f101 0c14 	add.w	ip, r1, #20
 8008a54:	2300      	movs	r3, #0
 8008a56:	f8dc 0000 	ldr.w	r0, [ip]
 8008a5a:	b281      	uxth	r1, r0
 8008a5c:	fb02 7101 	mla	r1, r2, r1, r7
 8008a60:	0c0f      	lsrs	r7, r1, #16
 8008a62:	0c00      	lsrs	r0, r0, #16
 8008a64:	fb02 7000 	mla	r0, r2, r0, r7
 8008a68:	b289      	uxth	r1, r1
 8008a6a:	3301      	adds	r3, #1
 8008a6c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008a70:	429d      	cmp	r5, r3
 8008a72:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008a76:	f84c 1b04 	str.w	r1, [ip], #4
 8008a7a:	dcec      	bgt.n	8008a56 <__multadd+0x12>
 8008a7c:	b1d7      	cbz	r7, 8008ab4 <__multadd+0x70>
 8008a7e:	68a3      	ldr	r3, [r4, #8]
 8008a80:	42ab      	cmp	r3, r5
 8008a82:	dc12      	bgt.n	8008aaa <__multadd+0x66>
 8008a84:	6861      	ldr	r1, [r4, #4]
 8008a86:	4630      	mov	r0, r6
 8008a88:	3101      	adds	r1, #1
 8008a8a:	f7ff ff90 	bl	80089ae <_Balloc>
 8008a8e:	6922      	ldr	r2, [r4, #16]
 8008a90:	3202      	adds	r2, #2
 8008a92:	f104 010c 	add.w	r1, r4, #12
 8008a96:	4680      	mov	r8, r0
 8008a98:	0092      	lsls	r2, r2, #2
 8008a9a:	300c      	adds	r0, #12
 8008a9c:	f7ff ff7c 	bl	8008998 <memcpy>
 8008aa0:	4621      	mov	r1, r4
 8008aa2:	4630      	mov	r0, r6
 8008aa4:	f7ff ffb7 	bl	8008a16 <_Bfree>
 8008aa8:	4644      	mov	r4, r8
 8008aaa:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008aae:	3501      	adds	r5, #1
 8008ab0:	615f      	str	r7, [r3, #20]
 8008ab2:	6125      	str	r5, [r4, #16]
 8008ab4:	4620      	mov	r0, r4
 8008ab6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008aba <__hi0bits>:
 8008aba:	0c02      	lsrs	r2, r0, #16
 8008abc:	0412      	lsls	r2, r2, #16
 8008abe:	4603      	mov	r3, r0
 8008ac0:	b9b2      	cbnz	r2, 8008af0 <__hi0bits+0x36>
 8008ac2:	0403      	lsls	r3, r0, #16
 8008ac4:	2010      	movs	r0, #16
 8008ac6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008aca:	bf04      	itt	eq
 8008acc:	021b      	lsleq	r3, r3, #8
 8008ace:	3008      	addeq	r0, #8
 8008ad0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008ad4:	bf04      	itt	eq
 8008ad6:	011b      	lsleq	r3, r3, #4
 8008ad8:	3004      	addeq	r0, #4
 8008ada:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008ade:	bf04      	itt	eq
 8008ae0:	009b      	lsleq	r3, r3, #2
 8008ae2:	3002      	addeq	r0, #2
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	db06      	blt.n	8008af6 <__hi0bits+0x3c>
 8008ae8:	005b      	lsls	r3, r3, #1
 8008aea:	d503      	bpl.n	8008af4 <__hi0bits+0x3a>
 8008aec:	3001      	adds	r0, #1
 8008aee:	4770      	bx	lr
 8008af0:	2000      	movs	r0, #0
 8008af2:	e7e8      	b.n	8008ac6 <__hi0bits+0xc>
 8008af4:	2020      	movs	r0, #32
 8008af6:	4770      	bx	lr

08008af8 <__lo0bits>:
 8008af8:	6803      	ldr	r3, [r0, #0]
 8008afa:	f013 0207 	ands.w	r2, r3, #7
 8008afe:	4601      	mov	r1, r0
 8008b00:	d00b      	beq.n	8008b1a <__lo0bits+0x22>
 8008b02:	07da      	lsls	r2, r3, #31
 8008b04:	d423      	bmi.n	8008b4e <__lo0bits+0x56>
 8008b06:	0798      	lsls	r0, r3, #30
 8008b08:	bf49      	itett	mi
 8008b0a:	085b      	lsrmi	r3, r3, #1
 8008b0c:	089b      	lsrpl	r3, r3, #2
 8008b0e:	2001      	movmi	r0, #1
 8008b10:	600b      	strmi	r3, [r1, #0]
 8008b12:	bf5c      	itt	pl
 8008b14:	600b      	strpl	r3, [r1, #0]
 8008b16:	2002      	movpl	r0, #2
 8008b18:	4770      	bx	lr
 8008b1a:	b298      	uxth	r0, r3
 8008b1c:	b9a8      	cbnz	r0, 8008b4a <__lo0bits+0x52>
 8008b1e:	0c1b      	lsrs	r3, r3, #16
 8008b20:	2010      	movs	r0, #16
 8008b22:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008b26:	bf04      	itt	eq
 8008b28:	0a1b      	lsreq	r3, r3, #8
 8008b2a:	3008      	addeq	r0, #8
 8008b2c:	071a      	lsls	r2, r3, #28
 8008b2e:	bf04      	itt	eq
 8008b30:	091b      	lsreq	r3, r3, #4
 8008b32:	3004      	addeq	r0, #4
 8008b34:	079a      	lsls	r2, r3, #30
 8008b36:	bf04      	itt	eq
 8008b38:	089b      	lsreq	r3, r3, #2
 8008b3a:	3002      	addeq	r0, #2
 8008b3c:	07da      	lsls	r2, r3, #31
 8008b3e:	d402      	bmi.n	8008b46 <__lo0bits+0x4e>
 8008b40:	085b      	lsrs	r3, r3, #1
 8008b42:	d006      	beq.n	8008b52 <__lo0bits+0x5a>
 8008b44:	3001      	adds	r0, #1
 8008b46:	600b      	str	r3, [r1, #0]
 8008b48:	4770      	bx	lr
 8008b4a:	4610      	mov	r0, r2
 8008b4c:	e7e9      	b.n	8008b22 <__lo0bits+0x2a>
 8008b4e:	2000      	movs	r0, #0
 8008b50:	4770      	bx	lr
 8008b52:	2020      	movs	r0, #32
 8008b54:	4770      	bx	lr

08008b56 <__i2b>:
 8008b56:	b510      	push	{r4, lr}
 8008b58:	460c      	mov	r4, r1
 8008b5a:	2101      	movs	r1, #1
 8008b5c:	f7ff ff27 	bl	80089ae <_Balloc>
 8008b60:	2201      	movs	r2, #1
 8008b62:	6144      	str	r4, [r0, #20]
 8008b64:	6102      	str	r2, [r0, #16]
 8008b66:	bd10      	pop	{r4, pc}

08008b68 <__multiply>:
 8008b68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b6c:	4614      	mov	r4, r2
 8008b6e:	690a      	ldr	r2, [r1, #16]
 8008b70:	6923      	ldr	r3, [r4, #16]
 8008b72:	429a      	cmp	r2, r3
 8008b74:	bfb8      	it	lt
 8008b76:	460b      	movlt	r3, r1
 8008b78:	4688      	mov	r8, r1
 8008b7a:	bfbc      	itt	lt
 8008b7c:	46a0      	movlt	r8, r4
 8008b7e:	461c      	movlt	r4, r3
 8008b80:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008b84:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008b88:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008b8c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008b90:	eb07 0609 	add.w	r6, r7, r9
 8008b94:	42b3      	cmp	r3, r6
 8008b96:	bfb8      	it	lt
 8008b98:	3101      	addlt	r1, #1
 8008b9a:	f7ff ff08 	bl	80089ae <_Balloc>
 8008b9e:	f100 0514 	add.w	r5, r0, #20
 8008ba2:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8008ba6:	462b      	mov	r3, r5
 8008ba8:	2200      	movs	r2, #0
 8008baa:	4573      	cmp	r3, lr
 8008bac:	d316      	bcc.n	8008bdc <__multiply+0x74>
 8008bae:	f104 0214 	add.w	r2, r4, #20
 8008bb2:	f108 0114 	add.w	r1, r8, #20
 8008bb6:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8008bba:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8008bbe:	9300      	str	r3, [sp, #0]
 8008bc0:	9b00      	ldr	r3, [sp, #0]
 8008bc2:	9201      	str	r2, [sp, #4]
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	d80c      	bhi.n	8008be2 <__multiply+0x7a>
 8008bc8:	2e00      	cmp	r6, #0
 8008bca:	dd03      	ble.n	8008bd4 <__multiply+0x6c>
 8008bcc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d05d      	beq.n	8008c90 <__multiply+0x128>
 8008bd4:	6106      	str	r6, [r0, #16]
 8008bd6:	b003      	add	sp, #12
 8008bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bdc:	f843 2b04 	str.w	r2, [r3], #4
 8008be0:	e7e3      	b.n	8008baa <__multiply+0x42>
 8008be2:	f8b2 b000 	ldrh.w	fp, [r2]
 8008be6:	f1bb 0f00 	cmp.w	fp, #0
 8008bea:	d023      	beq.n	8008c34 <__multiply+0xcc>
 8008bec:	4689      	mov	r9, r1
 8008bee:	46ac      	mov	ip, r5
 8008bf0:	f04f 0800 	mov.w	r8, #0
 8008bf4:	f859 4b04 	ldr.w	r4, [r9], #4
 8008bf8:	f8dc a000 	ldr.w	sl, [ip]
 8008bfc:	b2a3      	uxth	r3, r4
 8008bfe:	fa1f fa8a 	uxth.w	sl, sl
 8008c02:	fb0b a303 	mla	r3, fp, r3, sl
 8008c06:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008c0a:	f8dc 4000 	ldr.w	r4, [ip]
 8008c0e:	4443      	add	r3, r8
 8008c10:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008c14:	fb0b 840a 	mla	r4, fp, sl, r8
 8008c18:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8008c1c:	46e2      	mov	sl, ip
 8008c1e:	b29b      	uxth	r3, r3
 8008c20:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008c24:	454f      	cmp	r7, r9
 8008c26:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008c2a:	f84a 3b04 	str.w	r3, [sl], #4
 8008c2e:	d82b      	bhi.n	8008c88 <__multiply+0x120>
 8008c30:	f8cc 8004 	str.w	r8, [ip, #4]
 8008c34:	9b01      	ldr	r3, [sp, #4]
 8008c36:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8008c3a:	3204      	adds	r2, #4
 8008c3c:	f1ba 0f00 	cmp.w	sl, #0
 8008c40:	d020      	beq.n	8008c84 <__multiply+0x11c>
 8008c42:	682b      	ldr	r3, [r5, #0]
 8008c44:	4689      	mov	r9, r1
 8008c46:	46a8      	mov	r8, r5
 8008c48:	f04f 0b00 	mov.w	fp, #0
 8008c4c:	f8b9 c000 	ldrh.w	ip, [r9]
 8008c50:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008c54:	fb0a 440c 	mla	r4, sl, ip, r4
 8008c58:	445c      	add	r4, fp
 8008c5a:	46c4      	mov	ip, r8
 8008c5c:	b29b      	uxth	r3, r3
 8008c5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008c62:	f84c 3b04 	str.w	r3, [ip], #4
 8008c66:	f859 3b04 	ldr.w	r3, [r9], #4
 8008c6a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8008c6e:	0c1b      	lsrs	r3, r3, #16
 8008c70:	fb0a b303 	mla	r3, sl, r3, fp
 8008c74:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008c78:	454f      	cmp	r7, r9
 8008c7a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8008c7e:	d805      	bhi.n	8008c8c <__multiply+0x124>
 8008c80:	f8c8 3004 	str.w	r3, [r8, #4]
 8008c84:	3504      	adds	r5, #4
 8008c86:	e79b      	b.n	8008bc0 <__multiply+0x58>
 8008c88:	46d4      	mov	ip, sl
 8008c8a:	e7b3      	b.n	8008bf4 <__multiply+0x8c>
 8008c8c:	46e0      	mov	r8, ip
 8008c8e:	e7dd      	b.n	8008c4c <__multiply+0xe4>
 8008c90:	3e01      	subs	r6, #1
 8008c92:	e799      	b.n	8008bc8 <__multiply+0x60>

08008c94 <__pow5mult>:
 8008c94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c98:	4615      	mov	r5, r2
 8008c9a:	f012 0203 	ands.w	r2, r2, #3
 8008c9e:	4606      	mov	r6, r0
 8008ca0:	460f      	mov	r7, r1
 8008ca2:	d007      	beq.n	8008cb4 <__pow5mult+0x20>
 8008ca4:	3a01      	subs	r2, #1
 8008ca6:	4c21      	ldr	r4, [pc, #132]	; (8008d2c <__pow5mult+0x98>)
 8008ca8:	2300      	movs	r3, #0
 8008caa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008cae:	f7ff fec9 	bl	8008a44 <__multadd>
 8008cb2:	4607      	mov	r7, r0
 8008cb4:	10ad      	asrs	r5, r5, #2
 8008cb6:	d035      	beq.n	8008d24 <__pow5mult+0x90>
 8008cb8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008cba:	b93c      	cbnz	r4, 8008ccc <__pow5mult+0x38>
 8008cbc:	2010      	movs	r0, #16
 8008cbe:	f7ff fe63 	bl	8008988 <malloc>
 8008cc2:	6270      	str	r0, [r6, #36]	; 0x24
 8008cc4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008cc8:	6004      	str	r4, [r0, #0]
 8008cca:	60c4      	str	r4, [r0, #12]
 8008ccc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008cd0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008cd4:	b94c      	cbnz	r4, 8008cea <__pow5mult+0x56>
 8008cd6:	f240 2171 	movw	r1, #625	; 0x271
 8008cda:	4630      	mov	r0, r6
 8008cdc:	f7ff ff3b 	bl	8008b56 <__i2b>
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	f8c8 0008 	str.w	r0, [r8, #8]
 8008ce6:	4604      	mov	r4, r0
 8008ce8:	6003      	str	r3, [r0, #0]
 8008cea:	f04f 0800 	mov.w	r8, #0
 8008cee:	07eb      	lsls	r3, r5, #31
 8008cf0:	d50a      	bpl.n	8008d08 <__pow5mult+0x74>
 8008cf2:	4639      	mov	r1, r7
 8008cf4:	4622      	mov	r2, r4
 8008cf6:	4630      	mov	r0, r6
 8008cf8:	f7ff ff36 	bl	8008b68 <__multiply>
 8008cfc:	4639      	mov	r1, r7
 8008cfe:	4681      	mov	r9, r0
 8008d00:	4630      	mov	r0, r6
 8008d02:	f7ff fe88 	bl	8008a16 <_Bfree>
 8008d06:	464f      	mov	r7, r9
 8008d08:	106d      	asrs	r5, r5, #1
 8008d0a:	d00b      	beq.n	8008d24 <__pow5mult+0x90>
 8008d0c:	6820      	ldr	r0, [r4, #0]
 8008d0e:	b938      	cbnz	r0, 8008d20 <__pow5mult+0x8c>
 8008d10:	4622      	mov	r2, r4
 8008d12:	4621      	mov	r1, r4
 8008d14:	4630      	mov	r0, r6
 8008d16:	f7ff ff27 	bl	8008b68 <__multiply>
 8008d1a:	6020      	str	r0, [r4, #0]
 8008d1c:	f8c0 8000 	str.w	r8, [r0]
 8008d20:	4604      	mov	r4, r0
 8008d22:	e7e4      	b.n	8008cee <__pow5mult+0x5a>
 8008d24:	4638      	mov	r0, r7
 8008d26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d2a:	bf00      	nop
 8008d2c:	08009620 	.word	0x08009620

08008d30 <__lshift>:
 8008d30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d34:	460c      	mov	r4, r1
 8008d36:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008d3a:	6923      	ldr	r3, [r4, #16]
 8008d3c:	6849      	ldr	r1, [r1, #4]
 8008d3e:	eb0a 0903 	add.w	r9, sl, r3
 8008d42:	68a3      	ldr	r3, [r4, #8]
 8008d44:	4607      	mov	r7, r0
 8008d46:	4616      	mov	r6, r2
 8008d48:	f109 0501 	add.w	r5, r9, #1
 8008d4c:	42ab      	cmp	r3, r5
 8008d4e:	db32      	blt.n	8008db6 <__lshift+0x86>
 8008d50:	4638      	mov	r0, r7
 8008d52:	f7ff fe2c 	bl	80089ae <_Balloc>
 8008d56:	2300      	movs	r3, #0
 8008d58:	4680      	mov	r8, r0
 8008d5a:	f100 0114 	add.w	r1, r0, #20
 8008d5e:	461a      	mov	r2, r3
 8008d60:	4553      	cmp	r3, sl
 8008d62:	db2b      	blt.n	8008dbc <__lshift+0x8c>
 8008d64:	6920      	ldr	r0, [r4, #16]
 8008d66:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008d6a:	f104 0314 	add.w	r3, r4, #20
 8008d6e:	f016 021f 	ands.w	r2, r6, #31
 8008d72:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008d76:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008d7a:	d025      	beq.n	8008dc8 <__lshift+0x98>
 8008d7c:	f1c2 0e20 	rsb	lr, r2, #32
 8008d80:	2000      	movs	r0, #0
 8008d82:	681e      	ldr	r6, [r3, #0]
 8008d84:	468a      	mov	sl, r1
 8008d86:	4096      	lsls	r6, r2
 8008d88:	4330      	orrs	r0, r6
 8008d8a:	f84a 0b04 	str.w	r0, [sl], #4
 8008d8e:	f853 0b04 	ldr.w	r0, [r3], #4
 8008d92:	459c      	cmp	ip, r3
 8008d94:	fa20 f00e 	lsr.w	r0, r0, lr
 8008d98:	d814      	bhi.n	8008dc4 <__lshift+0x94>
 8008d9a:	6048      	str	r0, [r1, #4]
 8008d9c:	b108      	cbz	r0, 8008da2 <__lshift+0x72>
 8008d9e:	f109 0502 	add.w	r5, r9, #2
 8008da2:	3d01      	subs	r5, #1
 8008da4:	4638      	mov	r0, r7
 8008da6:	f8c8 5010 	str.w	r5, [r8, #16]
 8008daa:	4621      	mov	r1, r4
 8008dac:	f7ff fe33 	bl	8008a16 <_Bfree>
 8008db0:	4640      	mov	r0, r8
 8008db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008db6:	3101      	adds	r1, #1
 8008db8:	005b      	lsls	r3, r3, #1
 8008dba:	e7c7      	b.n	8008d4c <__lshift+0x1c>
 8008dbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008dc0:	3301      	adds	r3, #1
 8008dc2:	e7cd      	b.n	8008d60 <__lshift+0x30>
 8008dc4:	4651      	mov	r1, sl
 8008dc6:	e7dc      	b.n	8008d82 <__lshift+0x52>
 8008dc8:	3904      	subs	r1, #4
 8008dca:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dce:	f841 2f04 	str.w	r2, [r1, #4]!
 8008dd2:	459c      	cmp	ip, r3
 8008dd4:	d8f9      	bhi.n	8008dca <__lshift+0x9a>
 8008dd6:	e7e4      	b.n	8008da2 <__lshift+0x72>

08008dd8 <__mcmp>:
 8008dd8:	6903      	ldr	r3, [r0, #16]
 8008dda:	690a      	ldr	r2, [r1, #16]
 8008ddc:	1a9b      	subs	r3, r3, r2
 8008dde:	b530      	push	{r4, r5, lr}
 8008de0:	d10c      	bne.n	8008dfc <__mcmp+0x24>
 8008de2:	0092      	lsls	r2, r2, #2
 8008de4:	3014      	adds	r0, #20
 8008de6:	3114      	adds	r1, #20
 8008de8:	1884      	adds	r4, r0, r2
 8008dea:	4411      	add	r1, r2
 8008dec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008df0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008df4:	4295      	cmp	r5, r2
 8008df6:	d003      	beq.n	8008e00 <__mcmp+0x28>
 8008df8:	d305      	bcc.n	8008e06 <__mcmp+0x2e>
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	bd30      	pop	{r4, r5, pc}
 8008e00:	42a0      	cmp	r0, r4
 8008e02:	d3f3      	bcc.n	8008dec <__mcmp+0x14>
 8008e04:	e7fa      	b.n	8008dfc <__mcmp+0x24>
 8008e06:	f04f 33ff 	mov.w	r3, #4294967295
 8008e0a:	e7f7      	b.n	8008dfc <__mcmp+0x24>

08008e0c <__mdiff>:
 8008e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e10:	460d      	mov	r5, r1
 8008e12:	4607      	mov	r7, r0
 8008e14:	4611      	mov	r1, r2
 8008e16:	4628      	mov	r0, r5
 8008e18:	4614      	mov	r4, r2
 8008e1a:	f7ff ffdd 	bl	8008dd8 <__mcmp>
 8008e1e:	1e06      	subs	r6, r0, #0
 8008e20:	d108      	bne.n	8008e34 <__mdiff+0x28>
 8008e22:	4631      	mov	r1, r6
 8008e24:	4638      	mov	r0, r7
 8008e26:	f7ff fdc2 	bl	80089ae <_Balloc>
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008e30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e34:	bfa4      	itt	ge
 8008e36:	4623      	movge	r3, r4
 8008e38:	462c      	movge	r4, r5
 8008e3a:	4638      	mov	r0, r7
 8008e3c:	6861      	ldr	r1, [r4, #4]
 8008e3e:	bfa6      	itte	ge
 8008e40:	461d      	movge	r5, r3
 8008e42:	2600      	movge	r6, #0
 8008e44:	2601      	movlt	r6, #1
 8008e46:	f7ff fdb2 	bl	80089ae <_Balloc>
 8008e4a:	692b      	ldr	r3, [r5, #16]
 8008e4c:	60c6      	str	r6, [r0, #12]
 8008e4e:	6926      	ldr	r6, [r4, #16]
 8008e50:	f105 0914 	add.w	r9, r5, #20
 8008e54:	f104 0214 	add.w	r2, r4, #20
 8008e58:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008e5c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008e60:	f100 0514 	add.w	r5, r0, #20
 8008e64:	f04f 0e00 	mov.w	lr, #0
 8008e68:	f852 ab04 	ldr.w	sl, [r2], #4
 8008e6c:	f859 4b04 	ldr.w	r4, [r9], #4
 8008e70:	fa1e f18a 	uxtah	r1, lr, sl
 8008e74:	b2a3      	uxth	r3, r4
 8008e76:	1ac9      	subs	r1, r1, r3
 8008e78:	0c23      	lsrs	r3, r4, #16
 8008e7a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8008e7e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008e82:	b289      	uxth	r1, r1
 8008e84:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8008e88:	45c8      	cmp	r8, r9
 8008e8a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008e8e:	4694      	mov	ip, r2
 8008e90:	f845 3b04 	str.w	r3, [r5], #4
 8008e94:	d8e8      	bhi.n	8008e68 <__mdiff+0x5c>
 8008e96:	45bc      	cmp	ip, r7
 8008e98:	d304      	bcc.n	8008ea4 <__mdiff+0x98>
 8008e9a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8008e9e:	b183      	cbz	r3, 8008ec2 <__mdiff+0xb6>
 8008ea0:	6106      	str	r6, [r0, #16]
 8008ea2:	e7c5      	b.n	8008e30 <__mdiff+0x24>
 8008ea4:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008ea8:	fa1e f381 	uxtah	r3, lr, r1
 8008eac:	141a      	asrs	r2, r3, #16
 8008eae:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008eb2:	b29b      	uxth	r3, r3
 8008eb4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008eb8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8008ebc:	f845 3b04 	str.w	r3, [r5], #4
 8008ec0:	e7e9      	b.n	8008e96 <__mdiff+0x8a>
 8008ec2:	3e01      	subs	r6, #1
 8008ec4:	e7e9      	b.n	8008e9a <__mdiff+0x8e>

08008ec6 <__d2b>:
 8008ec6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008eca:	460e      	mov	r6, r1
 8008ecc:	2101      	movs	r1, #1
 8008ece:	ec59 8b10 	vmov	r8, r9, d0
 8008ed2:	4615      	mov	r5, r2
 8008ed4:	f7ff fd6b 	bl	80089ae <_Balloc>
 8008ed8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008edc:	4607      	mov	r7, r0
 8008ede:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008ee2:	bb34      	cbnz	r4, 8008f32 <__d2b+0x6c>
 8008ee4:	9301      	str	r3, [sp, #4]
 8008ee6:	f1b8 0300 	subs.w	r3, r8, #0
 8008eea:	d027      	beq.n	8008f3c <__d2b+0x76>
 8008eec:	a802      	add	r0, sp, #8
 8008eee:	f840 3d08 	str.w	r3, [r0, #-8]!
 8008ef2:	f7ff fe01 	bl	8008af8 <__lo0bits>
 8008ef6:	9900      	ldr	r1, [sp, #0]
 8008ef8:	b1f0      	cbz	r0, 8008f38 <__d2b+0x72>
 8008efa:	9a01      	ldr	r2, [sp, #4]
 8008efc:	f1c0 0320 	rsb	r3, r0, #32
 8008f00:	fa02 f303 	lsl.w	r3, r2, r3
 8008f04:	430b      	orrs	r3, r1
 8008f06:	40c2      	lsrs	r2, r0
 8008f08:	617b      	str	r3, [r7, #20]
 8008f0a:	9201      	str	r2, [sp, #4]
 8008f0c:	9b01      	ldr	r3, [sp, #4]
 8008f0e:	61bb      	str	r3, [r7, #24]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	bf14      	ite	ne
 8008f14:	2102      	movne	r1, #2
 8008f16:	2101      	moveq	r1, #1
 8008f18:	6139      	str	r1, [r7, #16]
 8008f1a:	b1c4      	cbz	r4, 8008f4e <__d2b+0x88>
 8008f1c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008f20:	4404      	add	r4, r0
 8008f22:	6034      	str	r4, [r6, #0]
 8008f24:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008f28:	6028      	str	r0, [r5, #0]
 8008f2a:	4638      	mov	r0, r7
 8008f2c:	b003      	add	sp, #12
 8008f2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008f36:	e7d5      	b.n	8008ee4 <__d2b+0x1e>
 8008f38:	6179      	str	r1, [r7, #20]
 8008f3a:	e7e7      	b.n	8008f0c <__d2b+0x46>
 8008f3c:	a801      	add	r0, sp, #4
 8008f3e:	f7ff fddb 	bl	8008af8 <__lo0bits>
 8008f42:	9b01      	ldr	r3, [sp, #4]
 8008f44:	617b      	str	r3, [r7, #20]
 8008f46:	2101      	movs	r1, #1
 8008f48:	6139      	str	r1, [r7, #16]
 8008f4a:	3020      	adds	r0, #32
 8008f4c:	e7e5      	b.n	8008f1a <__d2b+0x54>
 8008f4e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8008f52:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008f56:	6030      	str	r0, [r6, #0]
 8008f58:	6918      	ldr	r0, [r3, #16]
 8008f5a:	f7ff fdae 	bl	8008aba <__hi0bits>
 8008f5e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008f62:	e7e1      	b.n	8008f28 <__d2b+0x62>

08008f64 <_calloc_r>:
 8008f64:	b538      	push	{r3, r4, r5, lr}
 8008f66:	fb02 f401 	mul.w	r4, r2, r1
 8008f6a:	4621      	mov	r1, r4
 8008f6c:	f000 f856 	bl	800901c <_malloc_r>
 8008f70:	4605      	mov	r5, r0
 8008f72:	b118      	cbz	r0, 8008f7c <_calloc_r+0x18>
 8008f74:	4622      	mov	r2, r4
 8008f76:	2100      	movs	r1, #0
 8008f78:	f7fd ffa8 	bl	8006ecc <memset>
 8008f7c:	4628      	mov	r0, r5
 8008f7e:	bd38      	pop	{r3, r4, r5, pc}

08008f80 <_free_r>:
 8008f80:	b538      	push	{r3, r4, r5, lr}
 8008f82:	4605      	mov	r5, r0
 8008f84:	2900      	cmp	r1, #0
 8008f86:	d045      	beq.n	8009014 <_free_r+0x94>
 8008f88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f8c:	1f0c      	subs	r4, r1, #4
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	bfb8      	it	lt
 8008f92:	18e4      	addlt	r4, r4, r3
 8008f94:	f000 f958 	bl	8009248 <__malloc_lock>
 8008f98:	4a1f      	ldr	r2, [pc, #124]	; (8009018 <_free_r+0x98>)
 8008f9a:	6813      	ldr	r3, [r2, #0]
 8008f9c:	4610      	mov	r0, r2
 8008f9e:	b933      	cbnz	r3, 8008fae <_free_r+0x2e>
 8008fa0:	6063      	str	r3, [r4, #4]
 8008fa2:	6014      	str	r4, [r2, #0]
 8008fa4:	4628      	mov	r0, r5
 8008fa6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008faa:	f000 b94e 	b.w	800924a <__malloc_unlock>
 8008fae:	42a3      	cmp	r3, r4
 8008fb0:	d90c      	bls.n	8008fcc <_free_r+0x4c>
 8008fb2:	6821      	ldr	r1, [r4, #0]
 8008fb4:	1862      	adds	r2, r4, r1
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	bf04      	itt	eq
 8008fba:	681a      	ldreq	r2, [r3, #0]
 8008fbc:	685b      	ldreq	r3, [r3, #4]
 8008fbe:	6063      	str	r3, [r4, #4]
 8008fc0:	bf04      	itt	eq
 8008fc2:	1852      	addeq	r2, r2, r1
 8008fc4:	6022      	streq	r2, [r4, #0]
 8008fc6:	6004      	str	r4, [r0, #0]
 8008fc8:	e7ec      	b.n	8008fa4 <_free_r+0x24>
 8008fca:	4613      	mov	r3, r2
 8008fcc:	685a      	ldr	r2, [r3, #4]
 8008fce:	b10a      	cbz	r2, 8008fd4 <_free_r+0x54>
 8008fd0:	42a2      	cmp	r2, r4
 8008fd2:	d9fa      	bls.n	8008fca <_free_r+0x4a>
 8008fd4:	6819      	ldr	r1, [r3, #0]
 8008fd6:	1858      	adds	r0, r3, r1
 8008fd8:	42a0      	cmp	r0, r4
 8008fda:	d10b      	bne.n	8008ff4 <_free_r+0x74>
 8008fdc:	6820      	ldr	r0, [r4, #0]
 8008fde:	4401      	add	r1, r0
 8008fe0:	1858      	adds	r0, r3, r1
 8008fe2:	4282      	cmp	r2, r0
 8008fe4:	6019      	str	r1, [r3, #0]
 8008fe6:	d1dd      	bne.n	8008fa4 <_free_r+0x24>
 8008fe8:	6810      	ldr	r0, [r2, #0]
 8008fea:	6852      	ldr	r2, [r2, #4]
 8008fec:	605a      	str	r2, [r3, #4]
 8008fee:	4401      	add	r1, r0
 8008ff0:	6019      	str	r1, [r3, #0]
 8008ff2:	e7d7      	b.n	8008fa4 <_free_r+0x24>
 8008ff4:	d902      	bls.n	8008ffc <_free_r+0x7c>
 8008ff6:	230c      	movs	r3, #12
 8008ff8:	602b      	str	r3, [r5, #0]
 8008ffa:	e7d3      	b.n	8008fa4 <_free_r+0x24>
 8008ffc:	6820      	ldr	r0, [r4, #0]
 8008ffe:	1821      	adds	r1, r4, r0
 8009000:	428a      	cmp	r2, r1
 8009002:	bf04      	itt	eq
 8009004:	6811      	ldreq	r1, [r2, #0]
 8009006:	6852      	ldreq	r2, [r2, #4]
 8009008:	6062      	str	r2, [r4, #4]
 800900a:	bf04      	itt	eq
 800900c:	1809      	addeq	r1, r1, r0
 800900e:	6021      	streq	r1, [r4, #0]
 8009010:	605c      	str	r4, [r3, #4]
 8009012:	e7c7      	b.n	8008fa4 <_free_r+0x24>
 8009014:	bd38      	pop	{r3, r4, r5, pc}
 8009016:	bf00      	nop
 8009018:	20000228 	.word	0x20000228

0800901c <_malloc_r>:
 800901c:	b570      	push	{r4, r5, r6, lr}
 800901e:	1ccd      	adds	r5, r1, #3
 8009020:	f025 0503 	bic.w	r5, r5, #3
 8009024:	3508      	adds	r5, #8
 8009026:	2d0c      	cmp	r5, #12
 8009028:	bf38      	it	cc
 800902a:	250c      	movcc	r5, #12
 800902c:	2d00      	cmp	r5, #0
 800902e:	4606      	mov	r6, r0
 8009030:	db01      	blt.n	8009036 <_malloc_r+0x1a>
 8009032:	42a9      	cmp	r1, r5
 8009034:	d903      	bls.n	800903e <_malloc_r+0x22>
 8009036:	230c      	movs	r3, #12
 8009038:	6033      	str	r3, [r6, #0]
 800903a:	2000      	movs	r0, #0
 800903c:	bd70      	pop	{r4, r5, r6, pc}
 800903e:	f000 f903 	bl	8009248 <__malloc_lock>
 8009042:	4a21      	ldr	r2, [pc, #132]	; (80090c8 <_malloc_r+0xac>)
 8009044:	6814      	ldr	r4, [r2, #0]
 8009046:	4621      	mov	r1, r4
 8009048:	b991      	cbnz	r1, 8009070 <_malloc_r+0x54>
 800904a:	4c20      	ldr	r4, [pc, #128]	; (80090cc <_malloc_r+0xb0>)
 800904c:	6823      	ldr	r3, [r4, #0]
 800904e:	b91b      	cbnz	r3, 8009058 <_malloc_r+0x3c>
 8009050:	4630      	mov	r0, r6
 8009052:	f000 f83d 	bl	80090d0 <_sbrk_r>
 8009056:	6020      	str	r0, [r4, #0]
 8009058:	4629      	mov	r1, r5
 800905a:	4630      	mov	r0, r6
 800905c:	f000 f838 	bl	80090d0 <_sbrk_r>
 8009060:	1c43      	adds	r3, r0, #1
 8009062:	d124      	bne.n	80090ae <_malloc_r+0x92>
 8009064:	230c      	movs	r3, #12
 8009066:	6033      	str	r3, [r6, #0]
 8009068:	4630      	mov	r0, r6
 800906a:	f000 f8ee 	bl	800924a <__malloc_unlock>
 800906e:	e7e4      	b.n	800903a <_malloc_r+0x1e>
 8009070:	680b      	ldr	r3, [r1, #0]
 8009072:	1b5b      	subs	r3, r3, r5
 8009074:	d418      	bmi.n	80090a8 <_malloc_r+0x8c>
 8009076:	2b0b      	cmp	r3, #11
 8009078:	d90f      	bls.n	800909a <_malloc_r+0x7e>
 800907a:	600b      	str	r3, [r1, #0]
 800907c:	50cd      	str	r5, [r1, r3]
 800907e:	18cc      	adds	r4, r1, r3
 8009080:	4630      	mov	r0, r6
 8009082:	f000 f8e2 	bl	800924a <__malloc_unlock>
 8009086:	f104 000b 	add.w	r0, r4, #11
 800908a:	1d23      	adds	r3, r4, #4
 800908c:	f020 0007 	bic.w	r0, r0, #7
 8009090:	1ac3      	subs	r3, r0, r3
 8009092:	d0d3      	beq.n	800903c <_malloc_r+0x20>
 8009094:	425a      	negs	r2, r3
 8009096:	50e2      	str	r2, [r4, r3]
 8009098:	e7d0      	b.n	800903c <_malloc_r+0x20>
 800909a:	428c      	cmp	r4, r1
 800909c:	684b      	ldr	r3, [r1, #4]
 800909e:	bf16      	itet	ne
 80090a0:	6063      	strne	r3, [r4, #4]
 80090a2:	6013      	streq	r3, [r2, #0]
 80090a4:	460c      	movne	r4, r1
 80090a6:	e7eb      	b.n	8009080 <_malloc_r+0x64>
 80090a8:	460c      	mov	r4, r1
 80090aa:	6849      	ldr	r1, [r1, #4]
 80090ac:	e7cc      	b.n	8009048 <_malloc_r+0x2c>
 80090ae:	1cc4      	adds	r4, r0, #3
 80090b0:	f024 0403 	bic.w	r4, r4, #3
 80090b4:	42a0      	cmp	r0, r4
 80090b6:	d005      	beq.n	80090c4 <_malloc_r+0xa8>
 80090b8:	1a21      	subs	r1, r4, r0
 80090ba:	4630      	mov	r0, r6
 80090bc:	f000 f808 	bl	80090d0 <_sbrk_r>
 80090c0:	3001      	adds	r0, #1
 80090c2:	d0cf      	beq.n	8009064 <_malloc_r+0x48>
 80090c4:	6025      	str	r5, [r4, #0]
 80090c6:	e7db      	b.n	8009080 <_malloc_r+0x64>
 80090c8:	20000228 	.word	0x20000228
 80090cc:	2000022c 	.word	0x2000022c

080090d0 <_sbrk_r>:
 80090d0:	b538      	push	{r3, r4, r5, lr}
 80090d2:	4c06      	ldr	r4, [pc, #24]	; (80090ec <_sbrk_r+0x1c>)
 80090d4:	2300      	movs	r3, #0
 80090d6:	4605      	mov	r5, r0
 80090d8:	4608      	mov	r0, r1
 80090da:	6023      	str	r3, [r4, #0]
 80090dc:	f7f9 f8da 	bl	8002294 <_sbrk>
 80090e0:	1c43      	adds	r3, r0, #1
 80090e2:	d102      	bne.n	80090ea <_sbrk_r+0x1a>
 80090e4:	6823      	ldr	r3, [r4, #0]
 80090e6:	b103      	cbz	r3, 80090ea <_sbrk_r+0x1a>
 80090e8:	602b      	str	r3, [r5, #0]
 80090ea:	bd38      	pop	{r3, r4, r5, pc}
 80090ec:	20000acc 	.word	0x20000acc

080090f0 <__sread>:
 80090f0:	b510      	push	{r4, lr}
 80090f2:	460c      	mov	r4, r1
 80090f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090f8:	f000 f8a8 	bl	800924c <_read_r>
 80090fc:	2800      	cmp	r0, #0
 80090fe:	bfab      	itete	ge
 8009100:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009102:	89a3      	ldrhlt	r3, [r4, #12]
 8009104:	181b      	addge	r3, r3, r0
 8009106:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800910a:	bfac      	ite	ge
 800910c:	6563      	strge	r3, [r4, #84]	; 0x54
 800910e:	81a3      	strhlt	r3, [r4, #12]
 8009110:	bd10      	pop	{r4, pc}

08009112 <__swrite>:
 8009112:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009116:	461f      	mov	r7, r3
 8009118:	898b      	ldrh	r3, [r1, #12]
 800911a:	05db      	lsls	r3, r3, #23
 800911c:	4605      	mov	r5, r0
 800911e:	460c      	mov	r4, r1
 8009120:	4616      	mov	r6, r2
 8009122:	d505      	bpl.n	8009130 <__swrite+0x1e>
 8009124:	2302      	movs	r3, #2
 8009126:	2200      	movs	r2, #0
 8009128:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800912c:	f000 f868 	bl	8009200 <_lseek_r>
 8009130:	89a3      	ldrh	r3, [r4, #12]
 8009132:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009136:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800913a:	81a3      	strh	r3, [r4, #12]
 800913c:	4632      	mov	r2, r6
 800913e:	463b      	mov	r3, r7
 8009140:	4628      	mov	r0, r5
 8009142:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009146:	f000 b817 	b.w	8009178 <_write_r>

0800914a <__sseek>:
 800914a:	b510      	push	{r4, lr}
 800914c:	460c      	mov	r4, r1
 800914e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009152:	f000 f855 	bl	8009200 <_lseek_r>
 8009156:	1c43      	adds	r3, r0, #1
 8009158:	89a3      	ldrh	r3, [r4, #12]
 800915a:	bf15      	itete	ne
 800915c:	6560      	strne	r0, [r4, #84]	; 0x54
 800915e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009162:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009166:	81a3      	strheq	r3, [r4, #12]
 8009168:	bf18      	it	ne
 800916a:	81a3      	strhne	r3, [r4, #12]
 800916c:	bd10      	pop	{r4, pc}

0800916e <__sclose>:
 800916e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009172:	f000 b813 	b.w	800919c <_close_r>
	...

08009178 <_write_r>:
 8009178:	b538      	push	{r3, r4, r5, lr}
 800917a:	4c07      	ldr	r4, [pc, #28]	; (8009198 <_write_r+0x20>)
 800917c:	4605      	mov	r5, r0
 800917e:	4608      	mov	r0, r1
 8009180:	4611      	mov	r1, r2
 8009182:	2200      	movs	r2, #0
 8009184:	6022      	str	r2, [r4, #0]
 8009186:	461a      	mov	r2, r3
 8009188:	f7f9 f833 	bl	80021f2 <_write>
 800918c:	1c43      	adds	r3, r0, #1
 800918e:	d102      	bne.n	8009196 <_write_r+0x1e>
 8009190:	6823      	ldr	r3, [r4, #0]
 8009192:	b103      	cbz	r3, 8009196 <_write_r+0x1e>
 8009194:	602b      	str	r3, [r5, #0]
 8009196:	bd38      	pop	{r3, r4, r5, pc}
 8009198:	20000acc 	.word	0x20000acc

0800919c <_close_r>:
 800919c:	b538      	push	{r3, r4, r5, lr}
 800919e:	4c06      	ldr	r4, [pc, #24]	; (80091b8 <_close_r+0x1c>)
 80091a0:	2300      	movs	r3, #0
 80091a2:	4605      	mov	r5, r0
 80091a4:	4608      	mov	r0, r1
 80091a6:	6023      	str	r3, [r4, #0]
 80091a8:	f7f9 f83f 	bl	800222a <_close>
 80091ac:	1c43      	adds	r3, r0, #1
 80091ae:	d102      	bne.n	80091b6 <_close_r+0x1a>
 80091b0:	6823      	ldr	r3, [r4, #0]
 80091b2:	b103      	cbz	r3, 80091b6 <_close_r+0x1a>
 80091b4:	602b      	str	r3, [r5, #0]
 80091b6:	bd38      	pop	{r3, r4, r5, pc}
 80091b8:	20000acc 	.word	0x20000acc

080091bc <_fstat_r>:
 80091bc:	b538      	push	{r3, r4, r5, lr}
 80091be:	4c07      	ldr	r4, [pc, #28]	; (80091dc <_fstat_r+0x20>)
 80091c0:	2300      	movs	r3, #0
 80091c2:	4605      	mov	r5, r0
 80091c4:	4608      	mov	r0, r1
 80091c6:	4611      	mov	r1, r2
 80091c8:	6023      	str	r3, [r4, #0]
 80091ca:	f7f9 f83a 	bl	8002242 <_fstat>
 80091ce:	1c43      	adds	r3, r0, #1
 80091d0:	d102      	bne.n	80091d8 <_fstat_r+0x1c>
 80091d2:	6823      	ldr	r3, [r4, #0]
 80091d4:	b103      	cbz	r3, 80091d8 <_fstat_r+0x1c>
 80091d6:	602b      	str	r3, [r5, #0]
 80091d8:	bd38      	pop	{r3, r4, r5, pc}
 80091da:	bf00      	nop
 80091dc:	20000acc 	.word	0x20000acc

080091e0 <_isatty_r>:
 80091e0:	b538      	push	{r3, r4, r5, lr}
 80091e2:	4c06      	ldr	r4, [pc, #24]	; (80091fc <_isatty_r+0x1c>)
 80091e4:	2300      	movs	r3, #0
 80091e6:	4605      	mov	r5, r0
 80091e8:	4608      	mov	r0, r1
 80091ea:	6023      	str	r3, [r4, #0]
 80091ec:	f7f9 f839 	bl	8002262 <_isatty>
 80091f0:	1c43      	adds	r3, r0, #1
 80091f2:	d102      	bne.n	80091fa <_isatty_r+0x1a>
 80091f4:	6823      	ldr	r3, [r4, #0]
 80091f6:	b103      	cbz	r3, 80091fa <_isatty_r+0x1a>
 80091f8:	602b      	str	r3, [r5, #0]
 80091fa:	bd38      	pop	{r3, r4, r5, pc}
 80091fc:	20000acc 	.word	0x20000acc

08009200 <_lseek_r>:
 8009200:	b538      	push	{r3, r4, r5, lr}
 8009202:	4c07      	ldr	r4, [pc, #28]	; (8009220 <_lseek_r+0x20>)
 8009204:	4605      	mov	r5, r0
 8009206:	4608      	mov	r0, r1
 8009208:	4611      	mov	r1, r2
 800920a:	2200      	movs	r2, #0
 800920c:	6022      	str	r2, [r4, #0]
 800920e:	461a      	mov	r2, r3
 8009210:	f7f9 f832 	bl	8002278 <_lseek>
 8009214:	1c43      	adds	r3, r0, #1
 8009216:	d102      	bne.n	800921e <_lseek_r+0x1e>
 8009218:	6823      	ldr	r3, [r4, #0]
 800921a:	b103      	cbz	r3, 800921e <_lseek_r+0x1e>
 800921c:	602b      	str	r3, [r5, #0]
 800921e:	bd38      	pop	{r3, r4, r5, pc}
 8009220:	20000acc 	.word	0x20000acc

08009224 <__ascii_mbtowc>:
 8009224:	b082      	sub	sp, #8
 8009226:	b901      	cbnz	r1, 800922a <__ascii_mbtowc+0x6>
 8009228:	a901      	add	r1, sp, #4
 800922a:	b142      	cbz	r2, 800923e <__ascii_mbtowc+0x1a>
 800922c:	b14b      	cbz	r3, 8009242 <__ascii_mbtowc+0x1e>
 800922e:	7813      	ldrb	r3, [r2, #0]
 8009230:	600b      	str	r3, [r1, #0]
 8009232:	7812      	ldrb	r2, [r2, #0]
 8009234:	1c10      	adds	r0, r2, #0
 8009236:	bf18      	it	ne
 8009238:	2001      	movne	r0, #1
 800923a:	b002      	add	sp, #8
 800923c:	4770      	bx	lr
 800923e:	4610      	mov	r0, r2
 8009240:	e7fb      	b.n	800923a <__ascii_mbtowc+0x16>
 8009242:	f06f 0001 	mvn.w	r0, #1
 8009246:	e7f8      	b.n	800923a <__ascii_mbtowc+0x16>

08009248 <__malloc_lock>:
 8009248:	4770      	bx	lr

0800924a <__malloc_unlock>:
 800924a:	4770      	bx	lr

0800924c <_read_r>:
 800924c:	b538      	push	{r3, r4, r5, lr}
 800924e:	4c07      	ldr	r4, [pc, #28]	; (800926c <_read_r+0x20>)
 8009250:	4605      	mov	r5, r0
 8009252:	4608      	mov	r0, r1
 8009254:	4611      	mov	r1, r2
 8009256:	2200      	movs	r2, #0
 8009258:	6022      	str	r2, [r4, #0]
 800925a:	461a      	mov	r2, r3
 800925c:	f7f8 ffac 	bl	80021b8 <_read>
 8009260:	1c43      	adds	r3, r0, #1
 8009262:	d102      	bne.n	800926a <_read_r+0x1e>
 8009264:	6823      	ldr	r3, [r4, #0]
 8009266:	b103      	cbz	r3, 800926a <_read_r+0x1e>
 8009268:	602b      	str	r3, [r5, #0]
 800926a:	bd38      	pop	{r3, r4, r5, pc}
 800926c:	20000acc 	.word	0x20000acc

08009270 <__ascii_wctomb>:
 8009270:	b149      	cbz	r1, 8009286 <__ascii_wctomb+0x16>
 8009272:	2aff      	cmp	r2, #255	; 0xff
 8009274:	bf85      	ittet	hi
 8009276:	238a      	movhi	r3, #138	; 0x8a
 8009278:	6003      	strhi	r3, [r0, #0]
 800927a:	700a      	strbls	r2, [r1, #0]
 800927c:	f04f 30ff 	movhi.w	r0, #4294967295
 8009280:	bf98      	it	ls
 8009282:	2001      	movls	r0, #1
 8009284:	4770      	bx	lr
 8009286:	4608      	mov	r0, r1
 8009288:	4770      	bx	lr
	...

0800928c <fmodf>:
 800928c:	b5d0      	push	{r4, r6, r7, lr}
 800928e:	ed2d 8b02 	vpush	{d8}
 8009292:	b08a      	sub	sp, #40	; 0x28
 8009294:	eef0 8a40 	vmov.f32	s17, s0
 8009298:	eeb0 8a60 	vmov.f32	s16, s1
 800929c:	f000 f852 	bl	8009344 <__ieee754_fmodf>
 80092a0:	4b26      	ldr	r3, [pc, #152]	; (800933c <fmodf+0xb0>)
 80092a2:	f993 4000 	ldrsb.w	r4, [r3]
 80092a6:	1c63      	adds	r3, r4, #1
 80092a8:	d035      	beq.n	8009316 <fmodf+0x8a>
 80092aa:	eeb4 8a48 	vcmp.f32	s16, s16
 80092ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092b2:	d630      	bvs.n	8009316 <fmodf+0x8a>
 80092b4:	eef4 8a68 	vcmp.f32	s17, s17
 80092b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092bc:	d62b      	bvs.n	8009316 <fmodf+0x8a>
 80092be:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80092c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092c6:	d126      	bne.n	8009316 <fmodf+0x8a>
 80092c8:	2301      	movs	r3, #1
 80092ca:	9300      	str	r3, [sp, #0]
 80092cc:	4b1c      	ldr	r3, [pc, #112]	; (8009340 <fmodf+0xb4>)
 80092ce:	9301      	str	r3, [sp, #4]
 80092d0:	ee18 0a90 	vmov	r0, s17
 80092d4:	2300      	movs	r3, #0
 80092d6:	9308      	str	r3, [sp, #32]
 80092d8:	f7f7 f8e2 	bl	80004a0 <__aeabi_f2d>
 80092dc:	4606      	mov	r6, r0
 80092de:	460f      	mov	r7, r1
 80092e0:	ee18 0a10 	vmov	r0, s16
 80092e4:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80092e8:	f7f7 f8da 	bl	80004a0 <__aeabi_f2d>
 80092ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80092f0:	b9ac      	cbnz	r4, 800931e <fmodf+0x92>
 80092f2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80092f6:	4668      	mov	r0, sp
 80092f8:	f000 f8ac 	bl	8009454 <matherr>
 80092fc:	b1c8      	cbz	r0, 8009332 <fmodf+0xa6>
 80092fe:	9b08      	ldr	r3, [sp, #32]
 8009300:	b11b      	cbz	r3, 800930a <fmodf+0x7e>
 8009302:	f7fd fdb9 	bl	8006e78 <__errno>
 8009306:	9b08      	ldr	r3, [sp, #32]
 8009308:	6003      	str	r3, [r0, #0]
 800930a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800930e:	f7f7 fbf7 	bl	8000b00 <__aeabi_d2f>
 8009312:	ee00 0a10 	vmov	s0, r0
 8009316:	b00a      	add	sp, #40	; 0x28
 8009318:	ecbd 8b02 	vpop	{d8}
 800931c:	bdd0      	pop	{r4, r6, r7, pc}
 800931e:	2200      	movs	r2, #0
 8009320:	2300      	movs	r3, #0
 8009322:	4610      	mov	r0, r2
 8009324:	4619      	mov	r1, r3
 8009326:	f7f7 fa3d 	bl	80007a4 <__aeabi_ddiv>
 800932a:	2c02      	cmp	r4, #2
 800932c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009330:	d1e1      	bne.n	80092f6 <fmodf+0x6a>
 8009332:	f7fd fda1 	bl	8006e78 <__errno>
 8009336:	2321      	movs	r3, #33	; 0x21
 8009338:	6003      	str	r3, [r0, #0]
 800933a:	e7e0      	b.n	80092fe <fmodf+0x72>
 800933c:	200001e8 	.word	0x200001e8
 8009340:	08009737 	.word	0x08009737

08009344 <__ieee754_fmodf>:
 8009344:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009346:	ee10 6a90 	vmov	r6, s1
 800934a:	f036 4500 	bics.w	r5, r6, #2147483648	; 0x80000000
 800934e:	ee10 3a10 	vmov	r3, s0
 8009352:	d009      	beq.n	8009368 <__ieee754_fmodf+0x24>
 8009354:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009358:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800935c:	ee10 7a10 	vmov	r7, s0
 8009360:	da02      	bge.n	8009368 <__ieee754_fmodf+0x24>
 8009362:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8009366:	dd0a      	ble.n	800937e <__ieee754_fmodf+0x3a>
 8009368:	ee07 3a90 	vmov	s15, r3
 800936c:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8009370:	eec0 7aa0 	vdiv.f32	s15, s1, s1
 8009374:	ee17 3a90 	vmov	r3, s15
 8009378:	ee00 3a10 	vmov	s0, r3
 800937c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800937e:	42a9      	cmp	r1, r5
 8009380:	dbfa      	blt.n	8009378 <__ieee754_fmodf+0x34>
 8009382:	f003 4400 	and.w	r4, r3, #2147483648	; 0x80000000
 8009386:	d105      	bne.n	8009394 <__ieee754_fmodf+0x50>
 8009388:	4a30      	ldr	r2, [pc, #192]	; (800944c <__ieee754_fmodf+0x108>)
 800938a:	0fe3      	lsrs	r3, r4, #31
 800938c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	e7f1      	b.n	8009378 <__ieee754_fmodf+0x34>
 8009394:	4b2e      	ldr	r3, [pc, #184]	; (8009450 <__ieee754_fmodf+0x10c>)
 8009396:	4299      	cmp	r1, r3
 8009398:	dc3e      	bgt.n	8009418 <__ieee754_fmodf+0xd4>
 800939a:	020a      	lsls	r2, r1, #8
 800939c:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 80093a0:	2a00      	cmp	r2, #0
 80093a2:	dc36      	bgt.n	8009412 <__ieee754_fmodf+0xce>
 80093a4:	429d      	cmp	r5, r3
 80093a6:	dc3a      	bgt.n	800941e <__ieee754_fmodf+0xda>
 80093a8:	022b      	lsls	r3, r5, #8
 80093aa:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 80093ae:	005b      	lsls	r3, r3, #1
 80093b0:	f102 32ff 	add.w	r2, r2, #4294967295
 80093b4:	d5fb      	bpl.n	80093ae <__ieee754_fmodf+0x6a>
 80093b6:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 80093ba:	bfbb      	ittet	lt
 80093bc:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 80093c0:	1a1b      	sublt	r3, r3, r0
 80093c2:	f3c7 0116 	ubfxge	r1, r7, #0, #23
 80093c6:	4099      	lsllt	r1, r3
 80093c8:	bfa8      	it	ge
 80093ca:	f441 0100 	orrge.w	r1, r1, #8388608	; 0x800000
 80093ce:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 80093d2:	bfb5      	itete	lt
 80093d4:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 80093d8:	f3c6 0516 	ubfxge	r5, r6, #0, #23
 80093dc:	1a9b      	sublt	r3, r3, r2
 80093de:	f445 0500 	orrge.w	r5, r5, #8388608	; 0x800000
 80093e2:	bfb8      	it	lt
 80093e4:	409d      	lsllt	r5, r3
 80093e6:	1a80      	subs	r0, r0, r2
 80093e8:	1b4b      	subs	r3, r1, r5
 80093ea:	b9d8      	cbnz	r0, 8009424 <__ieee754_fmodf+0xe0>
 80093ec:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 80093f0:	bf28      	it	cs
 80093f2:	460b      	movcs	r3, r1
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d0c7      	beq.n	8009388 <__ieee754_fmodf+0x44>
 80093f8:	4915      	ldr	r1, [pc, #84]	; (8009450 <__ieee754_fmodf+0x10c>)
 80093fa:	428b      	cmp	r3, r1
 80093fc:	dd1a      	ble.n	8009434 <__ieee754_fmodf+0xf0>
 80093fe:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 8009402:	db1a      	blt.n	800943a <__ieee754_fmodf+0xf6>
 8009404:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8009408:	4323      	orrs	r3, r4
 800940a:	327f      	adds	r2, #127	; 0x7f
 800940c:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8009410:	e7b2      	b.n	8009378 <__ieee754_fmodf+0x34>
 8009412:	3801      	subs	r0, #1
 8009414:	0052      	lsls	r2, r2, #1
 8009416:	e7c3      	b.n	80093a0 <__ieee754_fmodf+0x5c>
 8009418:	15c8      	asrs	r0, r1, #23
 800941a:	387f      	subs	r0, #127	; 0x7f
 800941c:	e7c2      	b.n	80093a4 <__ieee754_fmodf+0x60>
 800941e:	15ea      	asrs	r2, r5, #23
 8009420:	3a7f      	subs	r2, #127	; 0x7f
 8009422:	e7c8      	b.n	80093b6 <__ieee754_fmodf+0x72>
 8009424:	2b00      	cmp	r3, #0
 8009426:	da02      	bge.n	800942e <__ieee754_fmodf+0xea>
 8009428:	0049      	lsls	r1, r1, #1
 800942a:	3801      	subs	r0, #1
 800942c:	e7dc      	b.n	80093e8 <__ieee754_fmodf+0xa4>
 800942e:	d0ab      	beq.n	8009388 <__ieee754_fmodf+0x44>
 8009430:	0059      	lsls	r1, r3, #1
 8009432:	e7fa      	b.n	800942a <__ieee754_fmodf+0xe6>
 8009434:	005b      	lsls	r3, r3, #1
 8009436:	3a01      	subs	r2, #1
 8009438:	e7df      	b.n	80093fa <__ieee754_fmodf+0xb6>
 800943a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800943e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009442:	3282      	adds	r2, #130	; 0x82
 8009444:	4113      	asrs	r3, r2
 8009446:	4323      	orrs	r3, r4
 8009448:	e796      	b.n	8009378 <__ieee754_fmodf+0x34>
 800944a:	bf00      	nop
 800944c:	08009740 	.word	0x08009740
 8009450:	007fffff 	.word	0x007fffff

08009454 <matherr>:
 8009454:	2000      	movs	r0, #0
 8009456:	4770      	bx	lr

08009458 <_init>:
 8009458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800945a:	bf00      	nop
 800945c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800945e:	bc08      	pop	{r3}
 8009460:	469e      	mov	lr, r3
 8009462:	4770      	bx	lr

08009464 <_fini>:
 8009464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009466:	bf00      	nop
 8009468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800946a:	bc08      	pop	{r3}
 800946c:	469e      	mov	lr, r3
 800946e:	4770      	bx	lr
