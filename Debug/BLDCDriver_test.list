
BLDCDriver_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000975c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000308  080098f0  080098f0  000198f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009bf8  08009bf8  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08009bf8  08009bf8  00019bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009c00  08009c00  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c00  08009c00  00019c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009c04  08009c04  00019c04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08009c08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000880  200001e4  08009dec  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a64  08009dec  00020a64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a5ab  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003c98  00000000  00000000  0003a7bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001318  00000000  00000000  0003e458  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001138  00000000  00000000  0003f770  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023d07  00000000  00000000  000408a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001307c  00000000  00000000  000645af  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c7a03  00000000  00000000  0007762b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013f02e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ad4  00000000  00000000  0013f0ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080098d4 	.word	0x080098d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	080098d4 	.word	0x080098d4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b972 	b.w	8000ea4 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	4688      	mov	r8, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14b      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4615      	mov	r5, r2
 8000bea:	d967      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0720 	rsb	r7, r2, #32
 8000bf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000bfe:	4095      	lsls	r5, r2
 8000c00:	ea47 0803 	orr.w	r8, r7, r3
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c10:	fa1f fc85 	uxth.w	ip, r5
 8000c14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18eb      	adds	r3, r5, r3
 8000c26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c2a:	f080 811b 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8118 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c34:	3f02      	subs	r7, #2
 8000c36:	442b      	add	r3, r5
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4c:	45a4      	cmp	ip, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	192c      	adds	r4, r5, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8107 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c5a:	45a4      	cmp	ip, r4
 8000c5c:	f240 8104 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c60:	3802      	subs	r0, #2
 8000c62:	442c      	add	r4, r5
 8000c64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c68:	eba4 040c 	sub.w	r4, r4, ip
 8000c6c:	2700      	movs	r7, #0
 8000c6e:	b11e      	cbz	r6, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c6 4300 	strd	r4, r3, [r6]
 8000c78:	4639      	mov	r1, r7
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d909      	bls.n	8000c96 <__udivmoddi4+0xbe>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80eb 	beq.w	8000e5e <__udivmoddi4+0x286>
 8000c88:	2700      	movs	r7, #0
 8000c8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c8e:	4638      	mov	r0, r7
 8000c90:	4639      	mov	r1, r7
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	fab3 f783 	clz	r7, r3
 8000c9a:	2f00      	cmp	r7, #0
 8000c9c:	d147      	bne.n	8000d2e <__udivmoddi4+0x156>
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d302      	bcc.n	8000ca8 <__udivmoddi4+0xd0>
 8000ca2:	4282      	cmp	r2, r0
 8000ca4:	f200 80fa 	bhi.w	8000e9c <__udivmoddi4+0x2c4>
 8000ca8:	1a84      	subs	r4, r0, r2
 8000caa:	eb61 0303 	sbc.w	r3, r1, r3
 8000cae:	2001      	movs	r0, #1
 8000cb0:	4698      	mov	r8, r3
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	d0e0      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000cb6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cba:	e7dd      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000cbc:	b902      	cbnz	r2, 8000cc0 <__udivmoddi4+0xe8>
 8000cbe:	deff      	udf	#255	; 0xff
 8000cc0:	fab2 f282 	clz	r2, r2
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f040 808f 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cca:	1b49      	subs	r1, r1, r5
 8000ccc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cd0:	fa1f f885 	uxth.w	r8, r5
 8000cd4:	2701      	movs	r7, #1
 8000cd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ce0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce4:	fb08 f10c 	mul.w	r1, r8, ip
 8000ce8:	4299      	cmp	r1, r3
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cec:	18eb      	adds	r3, r5, r3
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4299      	cmp	r1, r3
 8000cf6:	f200 80cd 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1a59      	subs	r1, r3, r1
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x14c>
 8000d14:	192c      	adds	r4, r5, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x14a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80b6 	bhi.w	8000e8e <__udivmoddi4+0x2b6>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e79f      	b.n	8000c6e <__udivmoddi4+0x96>
 8000d2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d32:	40bb      	lsls	r3, r7
 8000d34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d4c:	4325      	orrs	r5, r4
 8000d4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d52:	0c2c      	lsrs	r4, r5, #16
 8000d54:	fb08 3319 	mls	r3, r8, r9, r3
 8000d58:	fa1f fa8e 	uxth.w	sl, lr
 8000d5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d60:	fb09 f40a 	mul.w	r4, r9, sl
 8000d64:	429c      	cmp	r4, r3
 8000d66:	fa02 f207 	lsl.w	r2, r2, r7
 8000d6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1e 0303 	adds.w	r3, lr, r3
 8000d74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d78:	f080 8087 	bcs.w	8000e8a <__udivmoddi4+0x2b2>
 8000d7c:	429c      	cmp	r4, r3
 8000d7e:	f240 8084 	bls.w	8000e8a <__udivmoddi4+0x2b2>
 8000d82:	f1a9 0902 	sub.w	r9, r9, #2
 8000d86:	4473      	add	r3, lr
 8000d88:	1b1b      	subs	r3, r3, r4
 8000d8a:	b2ad      	uxth	r5, r5
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d9c:	45a2      	cmp	sl, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1e 0404 	adds.w	r4, lr, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	d26b      	bcs.n	8000e82 <__udivmoddi4+0x2aa>
 8000daa:	45a2      	cmp	sl, r4
 8000dac:	d969      	bls.n	8000e82 <__udivmoddi4+0x2aa>
 8000dae:	3802      	subs	r0, #2
 8000db0:	4474      	add	r4, lr
 8000db2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000db6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dba:	eba4 040a 	sub.w	r4, r4, sl
 8000dbe:	454c      	cmp	r4, r9
 8000dc0:	46c2      	mov	sl, r8
 8000dc2:	464b      	mov	r3, r9
 8000dc4:	d354      	bcc.n	8000e70 <__udivmoddi4+0x298>
 8000dc6:	d051      	beq.n	8000e6c <__udivmoddi4+0x294>
 8000dc8:	2e00      	cmp	r6, #0
 8000dca:	d069      	beq.n	8000ea0 <__udivmoddi4+0x2c8>
 8000dcc:	ebb1 050a 	subs.w	r5, r1, sl
 8000dd0:	eb64 0403 	sbc.w	r4, r4, r3
 8000dd4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dd8:	40fd      	lsrs	r5, r7
 8000dda:	40fc      	lsrs	r4, r7
 8000ddc:	ea4c 0505 	orr.w	r5, ip, r5
 8000de0:	e9c6 5400 	strd	r5, r4, [r6]
 8000de4:	2700      	movs	r7, #0
 8000de6:	e747      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000de8:	f1c2 0320 	rsb	r3, r2, #32
 8000dec:	fa20 f703 	lsr.w	r7, r0, r3
 8000df0:	4095      	lsls	r5, r2
 8000df2:	fa01 f002 	lsl.w	r0, r1, r2
 8000df6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dfa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dfe:	4338      	orrs	r0, r7
 8000e00:	0c01      	lsrs	r1, r0, #16
 8000e02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e06:	fa1f f885 	uxth.w	r8, r5
 8000e0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e12:	fb07 f308 	mul.w	r3, r7, r8
 8000e16:	428b      	cmp	r3, r1
 8000e18:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1c:	d907      	bls.n	8000e2e <__udivmoddi4+0x256>
 8000e1e:	1869      	adds	r1, r5, r1
 8000e20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e24:	d22f      	bcs.n	8000e86 <__udivmoddi4+0x2ae>
 8000e26:	428b      	cmp	r3, r1
 8000e28:	d92d      	bls.n	8000e86 <__udivmoddi4+0x2ae>
 8000e2a:	3f02      	subs	r7, #2
 8000e2c:	4429      	add	r1, r5
 8000e2e:	1acb      	subs	r3, r1, r3
 8000e30:	b281      	uxth	r1, r0
 8000e32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e3e:	fb00 f308 	mul.w	r3, r0, r8
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x27e>
 8000e46:	1869      	adds	r1, r5, r1
 8000e48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e4c:	d217      	bcs.n	8000e7e <__udivmoddi4+0x2a6>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d915      	bls.n	8000e7e <__udivmoddi4+0x2a6>
 8000e52:	3802      	subs	r0, #2
 8000e54:	4429      	add	r1, r5
 8000e56:	1ac9      	subs	r1, r1, r3
 8000e58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e5c:	e73b      	b.n	8000cd6 <__udivmoddi4+0xfe>
 8000e5e:	4637      	mov	r7, r6
 8000e60:	4630      	mov	r0, r6
 8000e62:	e709      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e64:	4607      	mov	r7, r0
 8000e66:	e6e7      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e68:	4618      	mov	r0, r3
 8000e6a:	e6fb      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e6c:	4541      	cmp	r1, r8
 8000e6e:	d2ab      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e74:	eb69 020e 	sbc.w	r2, r9, lr
 8000e78:	3801      	subs	r0, #1
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	e7a4      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e7e:	4660      	mov	r0, ip
 8000e80:	e7e9      	b.n	8000e56 <__udivmoddi4+0x27e>
 8000e82:	4618      	mov	r0, r3
 8000e84:	e795      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e86:	4667      	mov	r7, ip
 8000e88:	e7d1      	b.n	8000e2e <__udivmoddi4+0x256>
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	e77c      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	442c      	add	r4, r5
 8000e92:	e747      	b.n	8000d24 <__udivmoddi4+0x14c>
 8000e94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e98:	442b      	add	r3, r5
 8000e9a:	e72f      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	e708      	b.n	8000cb2 <__udivmoddi4+0xda>
 8000ea0:	4637      	mov	r7, r6
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0xa0>

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000eae:	463b      	mov	r3, r7
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000eba:	4b21      	ldr	r3, [pc, #132]	; (8000f40 <MX_ADC1_Init+0x98>)
 8000ebc:	4a21      	ldr	r2, [pc, #132]	; (8000f44 <MX_ADC1_Init+0x9c>)
 8000ebe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ec0:	4b1f      	ldr	r3, [pc, #124]	; (8000f40 <MX_ADC1_Init+0x98>)
 8000ec2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ec6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ec8:	4b1d      	ldr	r3, [pc, #116]	; (8000f40 <MX_ADC1_Init+0x98>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000ece:	4b1c      	ldr	r3, [pc, #112]	; (8000f40 <MX_ADC1_Init+0x98>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ed4:	4b1a      	ldr	r3, [pc, #104]	; (8000f40 <MX_ADC1_Init+0x98>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000eda:	4b19      	ldr	r3, [pc, #100]	; (8000f40 <MX_ADC1_Init+0x98>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ee2:	4b17      	ldr	r3, [pc, #92]	; (8000f40 <MX_ADC1_Init+0x98>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ee8:	4b15      	ldr	r3, [pc, #84]	; (8000f40 <MX_ADC1_Init+0x98>)
 8000eea:	4a17      	ldr	r2, [pc, #92]	; (8000f48 <MX_ADC1_Init+0xa0>)
 8000eec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000eee:	4b14      	ldr	r3, [pc, #80]	; (8000f40 <MX_ADC1_Init+0x98>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000ef4:	4b12      	ldr	r3, [pc, #72]	; (8000f40 <MX_ADC1_Init+0x98>)
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000efa:	4b11      	ldr	r3, [pc, #68]	; (8000f40 <MX_ADC1_Init+0x98>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000f02:	4b0f      	ldr	r3, [pc, #60]	; (8000f40 <MX_ADC1_Init+0x98>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f08:	480d      	ldr	r0, [pc, #52]	; (8000f40 <MX_ADC1_Init+0x98>)
 8000f0a:	f001 fdb3 	bl	8002a74 <HAL_ADC_Init>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000f14:	f000 ff0a 	bl	8001d2c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000f18:	230b      	movs	r3, #11
 8000f1a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f20:	2300      	movs	r3, #0
 8000f22:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f24:	463b      	mov	r3, r7
 8000f26:	4619      	mov	r1, r3
 8000f28:	4805      	ldr	r0, [pc, #20]	; (8000f40 <MX_ADC1_Init+0x98>)
 8000f2a:	f002 f991 	bl	8003250 <HAL_ADC_ConfigChannel>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f34:	f000 fefa 	bl	8001d2c <Error_Handler>
  }

}
 8000f38:	bf00      	nop
 8000f3a:	3710      	adds	r7, #16
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	2000026c 	.word	0x2000026c
 8000f44:	40012000 	.word	0x40012000
 8000f48:	0f000001 	.word	0x0f000001

08000f4c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f52:	463b      	mov	r3, r7
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc2.Instance = ADC2;
 8000f5e:	4b21      	ldr	r3, [pc, #132]	; (8000fe4 <MX_ADC2_Init+0x98>)
 8000f60:	4a21      	ldr	r2, [pc, #132]	; (8000fe8 <MX_ADC2_Init+0x9c>)
 8000f62:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f64:	4b1f      	ldr	r3, [pc, #124]	; (8000fe4 <MX_ADC2_Init+0x98>)
 8000f66:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f6a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000f6c:	4b1d      	ldr	r3, [pc, #116]	; (8000fe4 <MX_ADC2_Init+0x98>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000f72:	4b1c      	ldr	r3, [pc, #112]	; (8000fe4 <MX_ADC2_Init+0x98>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000f78:	4b1a      	ldr	r3, [pc, #104]	; (8000fe4 <MX_ADC2_Init+0x98>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000f7e:	4b19      	ldr	r3, [pc, #100]	; (8000fe4 <MX_ADC2_Init+0x98>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f86:	4b17      	ldr	r3, [pc, #92]	; (8000fe4 <MX_ADC2_Init+0x98>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f8c:	4b15      	ldr	r3, [pc, #84]	; (8000fe4 <MX_ADC2_Init+0x98>)
 8000f8e:	4a17      	ldr	r2, [pc, #92]	; (8000fec <MX_ADC2_Init+0xa0>)
 8000f90:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f92:	4b14      	ldr	r3, [pc, #80]	; (8000fe4 <MX_ADC2_Init+0x98>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000f98:	4b12      	ldr	r3, [pc, #72]	; (8000fe4 <MX_ADC2_Init+0x98>)
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000f9e:	4b11      	ldr	r3, [pc, #68]	; (8000fe4 <MX_ADC2_Init+0x98>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fa6:	4b0f      	ldr	r3, [pc, #60]	; (8000fe4 <MX_ADC2_Init+0x98>)
 8000fa8:	2201      	movs	r2, #1
 8000faa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000fac:	480d      	ldr	r0, [pc, #52]	; (8000fe4 <MX_ADC2_Init+0x98>)
 8000fae:	f001 fd61 	bl	8002a74 <HAL_ADC_Init>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000fb8:	f000 feb8 	bl	8001d2c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000fc8:	463b      	mov	r3, r7
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4805      	ldr	r0, [pc, #20]	; (8000fe4 <MX_ADC2_Init+0x98>)
 8000fce:	f002 f93f 	bl	8003250 <HAL_ADC_ConfigChannel>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000fd8:	f000 fea8 	bl	8001d2c <Error_Handler>
  }

}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20000224 	.word	0x20000224
 8000fe8:	40012100 	.word	0x40012100
 8000fec:	0f000001 	.word	0x0f000001

08000ff0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08c      	sub	sp, #48	; 0x30
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff8:	f107 031c 	add.w	r3, r7, #28
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	60da      	str	r2, [r3, #12]
 8001006:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a43      	ldr	r2, [pc, #268]	; (800111c <HAL_ADC_MspInit+0x12c>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d14a      	bne.n	80010a8 <HAL_ADC_MspInit+0xb8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	61bb      	str	r3, [r7, #24]
 8001016:	4b42      	ldr	r3, [pc, #264]	; (8001120 <HAL_ADC_MspInit+0x130>)
 8001018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101a:	4a41      	ldr	r2, [pc, #260]	; (8001120 <HAL_ADC_MspInit+0x130>)
 800101c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001020:	6453      	str	r3, [r2, #68]	; 0x44
 8001022:	4b3f      	ldr	r3, [pc, #252]	; (8001120 <HAL_ADC_MspInit+0x130>)
 8001024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800102a:	61bb      	str	r3, [r7, #24]
 800102c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	617b      	str	r3, [r7, #20]
 8001032:	4b3b      	ldr	r3, [pc, #236]	; (8001120 <HAL_ADC_MspInit+0x130>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	4a3a      	ldr	r2, [pc, #232]	; (8001120 <HAL_ADC_MspInit+0x130>)
 8001038:	f043 0304 	orr.w	r3, r3, #4
 800103c:	6313      	str	r3, [r2, #48]	; 0x30
 800103e:	4b38      	ldr	r3, [pc, #224]	; (8001120 <HAL_ADC_MspInit+0x130>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	f003 0304 	and.w	r3, r3, #4
 8001046:	617b      	str	r3, [r7, #20]
 8001048:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	613b      	str	r3, [r7, #16]
 800104e:	4b34      	ldr	r3, [pc, #208]	; (8001120 <HAL_ADC_MspInit+0x130>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	4a33      	ldr	r2, [pc, #204]	; (8001120 <HAL_ADC_MspInit+0x130>)
 8001054:	f043 0301 	orr.w	r3, r3, #1
 8001058:	6313      	str	r3, [r2, #48]	; 0x30
 800105a:	4b31      	ldr	r3, [pc, #196]	; (8001120 <HAL_ADC_MspInit+0x130>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	613b      	str	r3, [r7, #16]
 8001064:	693b      	ldr	r3, [r7, #16]
    PC3     ------> ADC1_IN13
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001066:	230f      	movs	r3, #15
 8001068:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800106a:	2303      	movs	r3, #3
 800106c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001072:	f107 031c 	add.w	r3, r7, #28
 8001076:	4619      	mov	r1, r3
 8001078:	482a      	ldr	r0, [pc, #168]	; (8001124 <HAL_ADC_MspInit+0x134>)
 800107a:	f003 f835 	bl	80040e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800107e:	2307      	movs	r3, #7
 8001080:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001082:	2303      	movs	r3, #3
 8001084:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001086:	2300      	movs	r3, #0
 8001088:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108a:	f107 031c 	add.w	r3, r7, #28
 800108e:	4619      	mov	r1, r3
 8001090:	4825      	ldr	r0, [pc, #148]	; (8001128 <HAL_ADC_MspInit+0x138>)
 8001092:	f003 f829 	bl	80040e8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001096:	2200      	movs	r2, #0
 8001098:	2100      	movs	r1, #0
 800109a:	2012      	movs	r0, #18
 800109c:	f002 fc5d 	bl	800395a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80010a0:	2012      	movs	r0, #18
 80010a2:	f002 fc76 	bl	8003992 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80010a6:	e034      	b.n	8001112 <HAL_ADC_MspInit+0x122>
  else if(adcHandle->Instance==ADC2)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a1f      	ldr	r2, [pc, #124]	; (800112c <HAL_ADC_MspInit+0x13c>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d12f      	bne.n	8001112 <HAL_ADC_MspInit+0x122>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	60fb      	str	r3, [r7, #12]
 80010b6:	4b1a      	ldr	r3, [pc, #104]	; (8001120 <HAL_ADC_MspInit+0x130>)
 80010b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ba:	4a19      	ldr	r2, [pc, #100]	; (8001120 <HAL_ADC_MspInit+0x130>)
 80010bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010c0:	6453      	str	r3, [r2, #68]	; 0x44
 80010c2:	4b17      	ldr	r3, [pc, #92]	; (8001120 <HAL_ADC_MspInit+0x130>)
 80010c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010ca:	60fb      	str	r3, [r7, #12]
 80010cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	60bb      	str	r3, [r7, #8]
 80010d2:	4b13      	ldr	r3, [pc, #76]	; (8001120 <HAL_ADC_MspInit+0x130>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	4a12      	ldr	r2, [pc, #72]	; (8001120 <HAL_ADC_MspInit+0x130>)
 80010d8:	f043 0301 	orr.w	r3, r3, #1
 80010dc:	6313      	str	r3, [r2, #48]	; 0x30
 80010de:	4b10      	ldr	r3, [pc, #64]	; (8001120 <HAL_ADC_MspInit+0x130>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	60bb      	str	r3, [r7, #8]
 80010e8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010ea:	2304      	movs	r3, #4
 80010ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010ee:	2303      	movs	r3, #3
 80010f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f6:	f107 031c 	add.w	r3, r7, #28
 80010fa:	4619      	mov	r1, r3
 80010fc:	480a      	ldr	r0, [pc, #40]	; (8001128 <HAL_ADC_MspInit+0x138>)
 80010fe:	f002 fff3 	bl	80040e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001102:	2200      	movs	r2, #0
 8001104:	2100      	movs	r1, #0
 8001106:	2012      	movs	r0, #18
 8001108:	f002 fc27 	bl	800395a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800110c:	2012      	movs	r0, #18
 800110e:	f002 fc40 	bl	8003992 <HAL_NVIC_EnableIRQ>
}
 8001112:	bf00      	nop
 8001114:	3730      	adds	r7, #48	; 0x30
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40012000 	.word	0x40012000
 8001120:	40023800 	.word	0x40023800
 8001124:	40020800 	.word	0x40020800
 8001128:	40020000 	.word	0x40020000
 800112c:	40012100 	.word	0x40012100

08001130 <AS5147Read>:
/*
 * Read Register
 * @param	address : AS5147 regigster address
 * @return	16 bit data
 */
uint16_t AS5147Read(uint16_t address) {
 8001130:	b580      	push	{r7, lr}
 8001132:	b086      	sub	sp, #24
 8001134:	af02      	add	r7, sp, #8
 8001136:	4603      	mov	r3, r0
 8001138:	80fb      	strh	r3, [r7, #6]
	uint8_t txdata[2] = {((AS5147AddParityBit(address | 0x4000) & 0xFF00) >> 8), (AS5147AddParityBit(address | 0x4000) & 0x00FF)};
 800113a:	88fb      	ldrh	r3, [r7, #6]
 800113c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001140:	b29b      	uxth	r3, r3
 8001142:	4618      	mov	r0, r3
 8001144:	f000 f844 	bl	80011d0 <AS5147AddParityBit>
 8001148:	4603      	mov	r3, r0
 800114a:	121b      	asrs	r3, r3, #8
 800114c:	b2db      	uxtb	r3, r3
 800114e:	733b      	strb	r3, [r7, #12]
 8001150:	88fb      	ldrh	r3, [r7, #6]
 8001152:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001156:	b29b      	uxth	r3, r3
 8001158:	4618      	mov	r0, r3
 800115a:	f000 f839 	bl	80011d0 <AS5147AddParityBit>
 800115e:	4603      	mov	r3, r0
 8001160:	b2db      	uxtb	r3, r3
 8001162:	737b      	strb	r3, [r7, #13]
	uint8_t rxdata[2] = {};
 8001164:	2300      	movs	r3, #0
 8001166:	813b      	strh	r3, [r7, #8]
	AS5147Select();
 8001168:	f000 f81a 	bl	80011a0 <AS5147Select>
	HAL_SPI_TransmitReceive(&AS5147_SPI_HANDLER, txdata, rxdata, 2, 1);
 800116c:	f107 0208 	add.w	r2, r7, #8
 8001170:	f107 010c 	add.w	r1, r7, #12
 8001174:	2301      	movs	r3, #1
 8001176:	9300      	str	r3, [sp, #0]
 8001178:	2302      	movs	r3, #2
 800117a:	4808      	ldr	r0, [pc, #32]	; (800119c <AS5147Read+0x6c>)
 800117c:	f003 fe3a 	bl	8004df4 <HAL_SPI_TransmitReceive>
	AS5147Deselect();
 8001180:	f000 f81a 	bl	80011b8 <AS5147Deselect>
	return ((rxdata[0] << 8) | rxdata[1]);
 8001184:	7a3b      	ldrb	r3, [r7, #8]
 8001186:	021b      	lsls	r3, r3, #8
 8001188:	b21a      	sxth	r2, r3
 800118a:	7a7b      	ldrb	r3, [r7, #9]
 800118c:	b21b      	sxth	r3, r3
 800118e:	4313      	orrs	r3, r2
 8001190:	b21b      	sxth	r3, r3
 8001192:	b29b      	uxth	r3, r3
}
 8001194:	4618      	mov	r0, r3
 8001196:	3710      	adds	r7, #16
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	20000720 	.word	0x20000720

080011a0 <AS5147Select>:
/*
 * Select
 * @param
 * @return
 */
static void AS5147Select(void) {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(AS5147_CS_PORT, AS5147_CS_PIN, GPIO_PIN_RESET);
 80011a4:	2200      	movs	r2, #0
 80011a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011aa:	4802      	ldr	r0, [pc, #8]	; (80011b4 <AS5147Select+0x14>)
 80011ac:	f003 f94e 	bl	800444c <HAL_GPIO_WritePin>
}
 80011b0:	bf00      	nop
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40020000 	.word	0x40020000

080011b8 <AS5147Deselect>:
/*
 * Deselect
 * @param
 * @return
 */
static void AS5147Deselect(void) {
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(AS5147_CS_PORT, AS5147_CS_PIN, GPIO_PIN_SET);
 80011bc:	2201      	movs	r2, #1
 80011be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011c2:	4802      	ldr	r0, [pc, #8]	; (80011cc <AS5147Deselect+0x14>)
 80011c4:	f003 f942 	bl	800444c <HAL_GPIO_WritePin>
}
 80011c8:	bf00      	nop
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40020000 	.word	0x40020000

080011d0 <AS5147AddParityBit>:
/*
 * Parity Calculation
 * @param	raw_data
 * @return	parity bit + raw_data
 */
static uint16_t AS5147AddParityBit(uint16_t raw_data) {
 80011d0:	b480      	push	{r7}
 80011d2:	b085      	sub	sp, #20
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	80fb      	strh	r3, [r7, #6]
	uint16_t parity = raw_data;
 80011da:	88fb      	ldrh	r3, [r7, #6]
 80011dc:	81fb      	strh	r3, [r7, #14]
	parity ^= parity >> 8;
 80011de:	89fb      	ldrh	r3, [r7, #14]
 80011e0:	0a1b      	lsrs	r3, r3, #8
 80011e2:	b29a      	uxth	r2, r3
 80011e4:	89fb      	ldrh	r3, [r7, #14]
 80011e6:	4053      	eors	r3, r2
 80011e8:	81fb      	strh	r3, [r7, #14]
	parity ^= parity >> 4;
 80011ea:	89fb      	ldrh	r3, [r7, #14]
 80011ec:	091b      	lsrs	r3, r3, #4
 80011ee:	b29a      	uxth	r2, r3
 80011f0:	89fb      	ldrh	r3, [r7, #14]
 80011f2:	4053      	eors	r3, r2
 80011f4:	81fb      	strh	r3, [r7, #14]
	parity ^= parity >> 2;
 80011f6:	89fb      	ldrh	r3, [r7, #14]
 80011f8:	089b      	lsrs	r3, r3, #2
 80011fa:	b29a      	uxth	r2, r3
 80011fc:	89fb      	ldrh	r3, [r7, #14]
 80011fe:	4053      	eors	r3, r2
 8001200:	81fb      	strh	r3, [r7, #14]
	parity ^= parity >> 1;
 8001202:	89fb      	ldrh	r3, [r7, #14]
 8001204:	085b      	lsrs	r3, r3, #1
 8001206:	b29a      	uxth	r2, r3
 8001208:	89fb      	ldrh	r3, [r7, #14]
 800120a:	4053      	eors	r3, r2
 800120c:	81fb      	strh	r3, [r7, #14]

	return (raw_data | ((parity & 0x0001) << 15));
 800120e:	89fb      	ldrh	r3, [r7, #14]
 8001210:	03db      	lsls	r3, r3, #15
 8001212:	b21a      	sxth	r2, r3
 8001214:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001218:	4313      	orrs	r3, r2
 800121a:	b21b      	sxth	r3, r3
 800121c:	b29b      	uxth	r3, r3
}
 800121e:	4618      	mov	r0, r3
 8001220:	3714      	adds	r7, #20
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
	...

0800122c <BLDC120DegConduction>:
			printf("%d %d %f\n", i, angle_data, elec_angle_deg);
		}
	}
}

void BLDC120DegConduction(bldc_conduction_phase phase, float pwm_duty) {
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	ed87 0a00 	vstr	s0, [r7]
 8001238:	71fb      	strb	r3, [r7, #7]
	switch(phase) {
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	2b05      	cmp	r3, #5
 800123e:	f200 810b 	bhi.w	8001458 <BLDC120DegConduction+0x22c>
 8001242:	a201      	add	r2, pc, #4	; (adr r2, 8001248 <BLDC120DegConduction+0x1c>)
 8001244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001248:	08001261 	.word	0x08001261
 800124c:	080012b5 	.word	0x080012b5
 8001250:	08001309 	.word	0x08001309
 8001254:	0800135d 	.word	0x0800135d
 8001258:	080013b1 	.word	0x080013b1
 800125c:	08001405 	.word	0x08001405
	case 0 :
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, __HAL_TIM_GET_AUTORELOAD(&htim8) * pwm_duty);
 8001260:	4b7f      	ldr	r3, [pc, #508]	; (8001460 <BLDC120DegConduction+0x234>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001266:	ee07 3a90 	vmov	s15, r3
 800126a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800126e:	edd7 7a00 	vldr	s15, [r7]
 8001272:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001276:	4b7a      	ldr	r3, [pc, #488]	; (8001460 <BLDC120DegConduction+0x234>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800127e:	ee17 2a90 	vmov	r2, s15
 8001282:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);
 8001284:	4b76      	ldr	r3, [pc, #472]	; (8001460 <BLDC120DegConduction+0x234>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2200      	movs	r2, #0
 800128a:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, 0);
 800128c:	4b74      	ldr	r3, [pc, #464]	; (8001460 <BLDC120DegConduction+0x234>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2200      	movs	r2, #0
 8001292:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8001294:	2200      	movs	r2, #0
 8001296:	2180      	movs	r1, #128	; 0x80
 8001298:	4872      	ldr	r0, [pc, #456]	; (8001464 <BLDC120DegConduction+0x238>)
 800129a:	f003 f8d7 	bl	800444c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800129e:	2201      	movs	r2, #1
 80012a0:	2101      	movs	r1, #1
 80012a2:	4871      	ldr	r0, [pc, #452]	; (8001468 <BLDC120DegConduction+0x23c>)
 80012a4:	f003 f8d2 	bl	800444c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80012a8:	2200      	movs	r2, #0
 80012aa:	2102      	movs	r1, #2
 80012ac:	486e      	ldr	r0, [pc, #440]	; (8001468 <BLDC120DegConduction+0x23c>)
 80012ae:	f003 f8cd 	bl	800444c <HAL_GPIO_WritePin>
		break;
 80012b2:	e0d1      	b.n	8001458 <BLDC120DegConduction+0x22c>
	case 1 :
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, __HAL_TIM_GET_AUTORELOAD(&htim8) * pwm_duty);
 80012b4:	4b6a      	ldr	r3, [pc, #424]	; (8001460 <BLDC120DegConduction+0x234>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ba:	ee07 3a90 	vmov	s15, r3
 80012be:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012c2:	edd7 7a00 	vldr	s15, [r7]
 80012c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012ca:	4b65      	ldr	r3, [pc, #404]	; (8001460 <BLDC120DegConduction+0x234>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012d2:	ee17 2a90 	vmov	r2, s15
 80012d6:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);
 80012d8:	4b61      	ldr	r3, [pc, #388]	; (8001460 <BLDC120DegConduction+0x234>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2200      	movs	r2, #0
 80012de:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, 0);
 80012e0:	4b5f      	ldr	r3, [pc, #380]	; (8001460 <BLDC120DegConduction+0x234>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2200      	movs	r2, #0
 80012e6:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80012e8:	2200      	movs	r2, #0
 80012ea:	2180      	movs	r1, #128	; 0x80
 80012ec:	485d      	ldr	r0, [pc, #372]	; (8001464 <BLDC120DegConduction+0x238>)
 80012ee:	f003 f8ad 	bl	800444c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80012f2:	2200      	movs	r2, #0
 80012f4:	2101      	movs	r1, #1
 80012f6:	485c      	ldr	r0, [pc, #368]	; (8001468 <BLDC120DegConduction+0x23c>)
 80012f8:	f003 f8a8 	bl	800444c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 80012fc:	2201      	movs	r2, #1
 80012fe:	2102      	movs	r1, #2
 8001300:	4859      	ldr	r0, [pc, #356]	; (8001468 <BLDC120DegConduction+0x23c>)
 8001302:	f003 f8a3 	bl	800444c <HAL_GPIO_WritePin>
		break;
 8001306:	e0a7      	b.n	8001458 <BLDC120DegConduction+0x22c>
	case 2 :
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);
 8001308:	4b55      	ldr	r3, [pc, #340]	; (8001460 <BLDC120DegConduction+0x234>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2200      	movs	r2, #0
 800130e:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, __HAL_TIM_GET_AUTORELOAD(&htim8) * pwm_duty);
 8001310:	4b53      	ldr	r3, [pc, #332]	; (8001460 <BLDC120DegConduction+0x234>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001316:	ee07 3a90 	vmov	s15, r3
 800131a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800131e:	edd7 7a00 	vldr	s15, [r7]
 8001322:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001326:	4b4e      	ldr	r3, [pc, #312]	; (8001460 <BLDC120DegConduction+0x234>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800132e:	ee17 2a90 	vmov	r2, s15
 8001332:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, 0);
 8001334:	4b4a      	ldr	r3, [pc, #296]	; (8001460 <BLDC120DegConduction+0x234>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2200      	movs	r2, #0
 800133a:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 800133c:	2200      	movs	r2, #0
 800133e:	2180      	movs	r1, #128	; 0x80
 8001340:	4848      	ldr	r0, [pc, #288]	; (8001464 <BLDC120DegConduction+0x238>)
 8001342:	f003 f883 	bl	800444c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001346:	2200      	movs	r2, #0
 8001348:	2101      	movs	r1, #1
 800134a:	4847      	ldr	r0, [pc, #284]	; (8001468 <BLDC120DegConduction+0x23c>)
 800134c:	f003 f87e 	bl	800444c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8001350:	2201      	movs	r2, #1
 8001352:	2102      	movs	r1, #2
 8001354:	4844      	ldr	r0, [pc, #272]	; (8001468 <BLDC120DegConduction+0x23c>)
 8001356:	f003 f879 	bl	800444c <HAL_GPIO_WritePin>
		break;
 800135a:	e07d      	b.n	8001458 <BLDC120DegConduction+0x22c>
	case 3 :
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);
 800135c:	4b40      	ldr	r3, [pc, #256]	; (8001460 <BLDC120DegConduction+0x234>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2200      	movs	r2, #0
 8001362:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, __HAL_TIM_GET_AUTORELOAD(&htim8) * pwm_duty);
 8001364:	4b3e      	ldr	r3, [pc, #248]	; (8001460 <BLDC120DegConduction+0x234>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800136a:	ee07 3a90 	vmov	s15, r3
 800136e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001372:	edd7 7a00 	vldr	s15, [r7]
 8001376:	ee67 7a27 	vmul.f32	s15, s14, s15
 800137a:	4b39      	ldr	r3, [pc, #228]	; (8001460 <BLDC120DegConduction+0x234>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001382:	ee17 2a90 	vmov	r2, s15
 8001386:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, 0);
 8001388:	4b35      	ldr	r3, [pc, #212]	; (8001460 <BLDC120DegConduction+0x234>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2200      	movs	r2, #0
 800138e:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8001390:	2201      	movs	r2, #1
 8001392:	2180      	movs	r1, #128	; 0x80
 8001394:	4833      	ldr	r0, [pc, #204]	; (8001464 <BLDC120DegConduction+0x238>)
 8001396:	f003 f859 	bl	800444c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800139a:	2200      	movs	r2, #0
 800139c:	2101      	movs	r1, #1
 800139e:	4832      	ldr	r0, [pc, #200]	; (8001468 <BLDC120DegConduction+0x23c>)
 80013a0:	f003 f854 	bl	800444c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80013a4:	2200      	movs	r2, #0
 80013a6:	2102      	movs	r1, #2
 80013a8:	482f      	ldr	r0, [pc, #188]	; (8001468 <BLDC120DegConduction+0x23c>)
 80013aa:	f003 f84f 	bl	800444c <HAL_GPIO_WritePin>
		break;
 80013ae:	e053      	b.n	8001458 <BLDC120DegConduction+0x22c>
	case 4 :
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);
 80013b0:	4b2b      	ldr	r3, [pc, #172]	; (8001460 <BLDC120DegConduction+0x234>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2200      	movs	r2, #0
 80013b6:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);
 80013b8:	4b29      	ldr	r3, [pc, #164]	; (8001460 <BLDC120DegConduction+0x234>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2200      	movs	r2, #0
 80013be:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, __HAL_TIM_GET_AUTORELOAD(&htim8) * pwm_duty);
 80013c0:	4b27      	ldr	r3, [pc, #156]	; (8001460 <BLDC120DegConduction+0x234>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013c6:	ee07 3a90 	vmov	s15, r3
 80013ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013ce:	edd7 7a00 	vldr	s15, [r7]
 80013d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013d6:	4b22      	ldr	r3, [pc, #136]	; (8001460 <BLDC120DegConduction+0x234>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013de:	ee17 2a90 	vmov	r2, s15
 80013e2:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 80013e4:	2201      	movs	r2, #1
 80013e6:	2180      	movs	r1, #128	; 0x80
 80013e8:	481e      	ldr	r0, [pc, #120]	; (8001464 <BLDC120DegConduction+0x238>)
 80013ea:	f003 f82f 	bl	800444c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80013ee:	2200      	movs	r2, #0
 80013f0:	2101      	movs	r1, #1
 80013f2:	481d      	ldr	r0, [pc, #116]	; (8001468 <BLDC120DegConduction+0x23c>)
 80013f4:	f003 f82a 	bl	800444c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80013f8:	2200      	movs	r2, #0
 80013fa:	2102      	movs	r1, #2
 80013fc:	481a      	ldr	r0, [pc, #104]	; (8001468 <BLDC120DegConduction+0x23c>)
 80013fe:	f003 f825 	bl	800444c <HAL_GPIO_WritePin>
		break;
 8001402:	e029      	b.n	8001458 <BLDC120DegConduction+0x22c>
	case 5 :
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);
 8001404:	4b16      	ldr	r3, [pc, #88]	; (8001460 <BLDC120DegConduction+0x234>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2200      	movs	r2, #0
 800140a:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);
 800140c:	4b14      	ldr	r3, [pc, #80]	; (8001460 <BLDC120DegConduction+0x234>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2200      	movs	r2, #0
 8001412:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, __HAL_TIM_GET_AUTORELOAD(&htim8) * pwm_duty);
 8001414:	4b12      	ldr	r3, [pc, #72]	; (8001460 <BLDC120DegConduction+0x234>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800141a:	ee07 3a90 	vmov	s15, r3
 800141e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001422:	edd7 7a00 	vldr	s15, [r7]
 8001426:	ee67 7a27 	vmul.f32	s15, s14, s15
 800142a:	4b0d      	ldr	r3, [pc, #52]	; (8001460 <BLDC120DegConduction+0x234>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001432:	ee17 2a90 	vmov	r2, s15
 8001436:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8001438:	2200      	movs	r2, #0
 800143a:	2180      	movs	r1, #128	; 0x80
 800143c:	4809      	ldr	r0, [pc, #36]	; (8001464 <BLDC120DegConduction+0x238>)
 800143e:	f003 f805 	bl	800444c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8001442:	2201      	movs	r2, #1
 8001444:	2101      	movs	r1, #1
 8001446:	4808      	ldr	r0, [pc, #32]	; (8001468 <BLDC120DegConduction+0x23c>)
 8001448:	f003 f800 	bl	800444c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 800144c:	2200      	movs	r2, #0
 800144e:	2102      	movs	r1, #2
 8001450:	4805      	ldr	r0, [pc, #20]	; (8001468 <BLDC120DegConduction+0x23c>)
 8001452:	f002 fffb 	bl	800444c <HAL_GPIO_WritePin>
		break;
 8001456:	bf00      	nop
	}
}
 8001458:	bf00      	nop
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	20000778 	.word	0x20000778
 8001464:	40020000 	.word	0x40020000
 8001468:	40020400 	.word	0x40020400

0800146c <BLDCStartCurrentSense>:
 * @param
 * @return
 * @note	Triggered by tim8(at the center of center aligned PWM.
 * 			Data will be automatically transfered to the variable by DMA
 */
void BLDCStartCurrentSense(void) {
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)curt_sense_data, ADC_CURT_SENSE_BUFFER_SIZE);
 8001470:	2203      	movs	r2, #3
 8001472:	4903      	ldr	r1, [pc, #12]	; (8001480 <BLDCStartCurrentSense+0x14>)
 8001474:	4803      	ldr	r0, [pc, #12]	; (8001484 <BLDCStartCurrentSense+0x18>)
 8001476:	f001 fdcd 	bl	8003014 <HAL_ADC_Start_DMA>
}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	20000200 	.word	0x20000200
 8001484:	2000026c 	.word	0x2000026c

08001488 <HAL_ADC_ConvCpltCallback>:
 * ADC Conversion Complete Callback(unique function of HAL)
 * @param
 * @return
 * @note	for debugging
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
	printf("%d %d %d\n", curt_sense_data[0], curt_sense_data[1], curt_sense_data[2]);
 8001490:	4b07      	ldr	r3, [pc, #28]	; (80014b0 <HAL_ADC_ConvCpltCallback+0x28>)
 8001492:	881b      	ldrh	r3, [r3, #0]
 8001494:	4619      	mov	r1, r3
 8001496:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <HAL_ADC_ConvCpltCallback+0x28>)
 8001498:	885b      	ldrh	r3, [r3, #2]
 800149a:	461a      	mov	r2, r3
 800149c:	4b04      	ldr	r3, [pc, #16]	; (80014b0 <HAL_ADC_ConvCpltCallback+0x28>)
 800149e:	889b      	ldrh	r3, [r3, #4]
 80014a0:	4804      	ldr	r0, [pc, #16]	; (80014b4 <HAL_ADC_ConvCpltCallback+0x2c>)
 80014a2:	f006 fa31 	bl	8007908 <iprintf>
}
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	20000200 	.word	0x20000200
 80014b4:	080098f0 	.word	0x080098f0

080014b8 <BLDCEnable>:
/*
 * Enable BLDC Motor(Enable Gate Driver & Start TIM8 PWM Generation)
 * @param
 * @return
 */
void BLDCEnable(void) {
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);		//EN_GATE = HIGH
 80014bc:	2201      	movs	r2, #1
 80014be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014c2:	4814      	ldr	r0, [pc, #80]	; (8001514 <BLDCEnable+0x5c>)
 80014c4:	f002 ffc2 	bl	800444c <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);
 80014c8:	4b13      	ldr	r3, [pc, #76]	; (8001518 <BLDCEnable+0x60>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2200      	movs	r2, #0
 80014ce:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);
 80014d0:	4b11      	ldr	r3, [pc, #68]	; (8001518 <BLDCEnable+0x60>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2200      	movs	r2, #0
 80014d6:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, 0);
 80014d8:	4b0f      	ldr	r3, [pc, #60]	; (8001518 <BLDCEnable+0x60>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2200      	movs	r2, #0
 80014de:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, __HAL_TIM_GET_AUTORELOAD(&htim8) - 1);
 80014e0:	4b0d      	ldr	r3, [pc, #52]	; (8001518 <BLDCEnable+0x60>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014e6:	4b0c      	ldr	r3, [pc, #48]	; (8001518 <BLDCEnable+0x60>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	3a01      	subs	r2, #1
 80014ec:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80014ee:	2100      	movs	r1, #0
 80014f0:	4809      	ldr	r0, [pc, #36]	; (8001518 <BLDCEnable+0x60>)
 80014f2:	f003 ff47 	bl	8005384 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 80014f6:	2104      	movs	r1, #4
 80014f8:	4807      	ldr	r0, [pc, #28]	; (8001518 <BLDCEnable+0x60>)
 80014fa:	f003 ff43 	bl	8005384 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 80014fe:	2108      	movs	r1, #8
 8001500:	4805      	ldr	r0, [pc, #20]	; (8001518 <BLDCEnable+0x60>)
 8001502:	f003 ff3f 	bl	8005384 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8001506:	210c      	movs	r1, #12
 8001508:	4803      	ldr	r0, [pc, #12]	; (8001518 <BLDCEnable+0x60>)
 800150a:	f003 ff3b 	bl	8005384 <HAL_TIM_PWM_Start>
}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40020000 	.word	0x40020000
 8001518:	20000778 	.word	0x20000778

0800151c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	607b      	str	r3, [r7, #4]
 8001526:	4b10      	ldr	r3, [pc, #64]	; (8001568 <MX_DMA_Init+0x4c>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	4a0f      	ldr	r2, [pc, #60]	; (8001568 <MX_DMA_Init+0x4c>)
 800152c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001530:	6313      	str	r3, [r2, #48]	; 0x30
 8001532:	4b0d      	ldr	r3, [pc, #52]	; (8001568 <MX_DMA_Init+0x4c>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800153a:	607b      	str	r3, [r7, #4]
 800153c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800153e:	2200      	movs	r2, #0
 8001540:	2100      	movs	r1, #0
 8001542:	203a      	movs	r0, #58	; 0x3a
 8001544:	f002 fa09 	bl	800395a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001548:	203a      	movs	r0, #58	; 0x3a
 800154a:	f002 fa22 	bl	8003992 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800154e:	2200      	movs	r2, #0
 8001550:	2100      	movs	r1, #0
 8001552:	2046      	movs	r0, #70	; 0x46
 8001554:	f002 fa01 	bl	800395a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001558:	2046      	movs	r0, #70	; 0x46
 800155a:	f002 fa1a 	bl	8003992 <HAL_NVIC_EnableIRQ>

}
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40023800 	.word	0x40023800

0800156c <dma_printf_init>:
#include "dma_ring.h"
#include <stdbool.h>

struct dma_printf_info dmi;

void dma_printf_init(UART_HandleTypeDef *printf_huart){
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
    dmi.huart = printf_huart;
 8001574:	4a09      	ldr	r2, [pc, #36]	; (800159c <dma_printf_init+0x30>)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
    dma_ring_init(&dmi.tx_ring);
 800157c:	4807      	ldr	r0, [pc, #28]	; (800159c <dma_printf_init+0x30>)
 800157e:	f000 f87d 	bl	800167c <dma_ring_init>
    dmi.sending = false;
 8001582:	4b06      	ldr	r3, [pc, #24]	; (800159c <dma_printf_init+0x30>)
 8001584:	2200      	movs	r2, #0
 8001586:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    dmi.previous_send_len = 0;
 800158a:	4b04      	ldr	r3, [pc, #16]	; (800159c <dma_printf_init+0x30>)
 800158c:	2200      	movs	r2, #0
 800158e:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
}
 8001592:	bf00      	nop
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	200002b4 	.word	0x200002b4

080015a0 <dma_printf_putc>:

void dma_printf_putc(uint8_t c){
 80015a0:	b590      	push	{r4, r7, lr}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	71fb      	strb	r3, [r7, #7]
    dma_ring_putc(&dmi.tx_ring, c);
 80015aa:	79fb      	ldrb	r3, [r7, #7]
 80015ac:	4619      	mov	r1, r3
 80015ae:	4814      	ldr	r0, [pc, #80]	; (8001600 <dma_printf_putc+0x60>)
 80015b0:	f000 f87f 	bl	80016b2 <dma_ring_putc>
    if(!dmi.sending){
 80015b4:	4b12      	ldr	r3, [pc, #72]	; (8001600 <dma_printf_putc+0x60>)
 80015b6:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d11b      	bne.n	80015f6 <dma_printf_putc+0x56>
        uint16_t len = (uint16_t)dma_ring_available_linear(&dmi.tx_ring);
 80015be:	4810      	ldr	r0, [pc, #64]	; (8001600 <dma_printf_putc+0x60>)
 80015c0:	f000 f8ac 	bl	800171c <dma_ring_available_linear>
 80015c4:	4603      	mov	r3, r0
 80015c6:	81fb      	strh	r3, [r7, #14]
        dmi.previous_send_len = len;
 80015c8:	89fb      	ldrh	r3, [r7, #14]
 80015ca:	4a0d      	ldr	r2, [pc, #52]	; (8001600 <dma_printf_putc+0x60>)
 80015cc:	f8c2 3410 	str.w	r3, [r2, #1040]	; 0x410
        dmi.sending = true;
 80015d0:	4b0b      	ldr	r3, [pc, #44]	; (8001600 <dma_printf_putc+0x60>)
 80015d2:	2201      	movs	r2, #1
 80015d4:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        HAL_UART_Transmit_DMA(dmi.huart, dmi.tx_ring.buf+dma_ring_get_r_ptr(&dmi.tx_ring), len);
 80015d8:	4b09      	ldr	r3, [pc, #36]	; (8001600 <dma_printf_putc+0x60>)
 80015da:	f8d3 440c 	ldr.w	r4, [r3, #1036]	; 0x40c
 80015de:	4808      	ldr	r0, [pc, #32]	; (8001600 <dma_printf_putc+0x60>)
 80015e0:	f000 f8bf 	bl	8001762 <dma_ring_get_r_ptr>
 80015e4:	4603      	mov	r3, r0
 80015e6:	461a      	mov	r2, r3
 80015e8:	4b05      	ldr	r3, [pc, #20]	; (8001600 <dma_printf_putc+0x60>)
 80015ea:	4413      	add	r3, r2
 80015ec:	89fa      	ldrh	r2, [r7, #14]
 80015ee:	4619      	mov	r1, r3
 80015f0:	4620      	mov	r0, r4
 80015f2:	f004 fe47 	bl	8006284 <HAL_UART_Transmit_DMA>
    }
}
 80015f6:	bf00      	nop
 80015f8:	3714      	adds	r7, #20
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd90      	pop	{r4, r7, pc}
 80015fe:	bf00      	nop
 8001600:	200002b4 	.word	0x200002b4

08001604 <dma_printf_send_it>:

void dma_printf_send_it(UART_HandleTypeDef *printf_huart) {
 8001604:	b590      	push	{r4, r7, lr}
 8001606:	b085      	sub	sp, #20
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
    if(dmi.huart != printf_huart) return;
 800160c:	4b1a      	ldr	r3, [pc, #104]	; (8001678 <dma_printf_send_it+0x74>)
 800160e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	429a      	cmp	r2, r3
 8001616:	d12b      	bne.n	8001670 <dma_printf_send_it+0x6c>

    dma_ring_forward_r_ptr(&dmi.tx_ring, dmi.previous_send_len);
 8001618:	4b17      	ldr	r3, [pc, #92]	; (8001678 <dma_printf_send_it+0x74>)
 800161a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800161e:	4619      	mov	r1, r3
 8001620:	4815      	ldr	r0, [pc, #84]	; (8001678 <dma_printf_send_it+0x74>)
 8001622:	f000 f8ab 	bl	800177c <dma_ring_forward_r_ptr>
    uint16_t len = (uint16_t)dma_ring_available_linear(&dmi.tx_ring);
 8001626:	4814      	ldr	r0, [pc, #80]	; (8001678 <dma_printf_send_it+0x74>)
 8001628:	f000 f878 	bl	800171c <dma_ring_available_linear>
 800162c:	4603      	mov	r3, r0
 800162e:	81fb      	strh	r3, [r7, #14]
    if (len > 0 ) {
 8001630:	89fb      	ldrh	r3, [r7, #14]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d017      	beq.n	8001666 <dma_printf_send_it+0x62>
        dmi.previous_send_len = len;
 8001636:	89fb      	ldrh	r3, [r7, #14]
 8001638:	4a0f      	ldr	r2, [pc, #60]	; (8001678 <dma_printf_send_it+0x74>)
 800163a:	f8c2 3410 	str.w	r3, [r2, #1040]	; 0x410
        dmi.sending = true;
 800163e:	4b0e      	ldr	r3, [pc, #56]	; (8001678 <dma_printf_send_it+0x74>)
 8001640:	2201      	movs	r2, #1
 8001642:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        HAL_UART_Transmit_DMA(dmi.huart, dmi.tx_ring.buf+dma_ring_get_r_ptr(&dmi.tx_ring), len);
 8001646:	4b0c      	ldr	r3, [pc, #48]	; (8001678 <dma_printf_send_it+0x74>)
 8001648:	f8d3 440c 	ldr.w	r4, [r3, #1036]	; 0x40c
 800164c:	480a      	ldr	r0, [pc, #40]	; (8001678 <dma_printf_send_it+0x74>)
 800164e:	f000 f888 	bl	8001762 <dma_ring_get_r_ptr>
 8001652:	4603      	mov	r3, r0
 8001654:	461a      	mov	r2, r3
 8001656:	4b08      	ldr	r3, [pc, #32]	; (8001678 <dma_printf_send_it+0x74>)
 8001658:	4413      	add	r3, r2
 800165a:	89fa      	ldrh	r2, [r7, #14]
 800165c:	4619      	mov	r1, r3
 800165e:	4620      	mov	r0, r4
 8001660:	f004 fe10 	bl	8006284 <HAL_UART_Transmit_DMA>
 8001664:	e005      	b.n	8001672 <dma_printf_send_it+0x6e>
    }else{
        dmi.sending = false;
 8001666:	4b04      	ldr	r3, [pc, #16]	; (8001678 <dma_printf_send_it+0x74>)
 8001668:	2200      	movs	r2, #0
 800166a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 800166e:	e000      	b.n	8001672 <dma_printf_send_it+0x6e>
    if(dmi.huart != printf_huart) return;
 8001670:	bf00      	nop
    }
}
 8001672:	3714      	adds	r7, #20
 8001674:	46bd      	mov	sp, r7
 8001676:	bd90      	pop	{r4, r7, pc}
 8001678:	200002b4 	.word	0x200002b4

0800167c <dma_ring_init>:
#include "dma_ring.h"
#include "main.h"
#include <stdio.h>

void dma_ring_init(struct dma_ring_buf *ring){
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  ring->buf_size = RING_BUF_SIZE;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800168a:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
  ring->w_ptr = 0;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
  ring->r_ptr = 0;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2200      	movs	r2, #0
 800169a:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
  ring->overwrite_cnt = 0;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2200      	movs	r2, #0
 80016a2:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
}
 80016a6:	bf00      	nop
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr

080016b2 <dma_ring_putc>:
  *c = ring->buf[ring->r_ptr];
  ring->r_ptr = next_ptr;
  return RING_SUCCESS;
}

int dma_ring_putc(struct dma_ring_buf *ring, uint8_t c){
 80016b2:	b480      	push	{r7}
 80016b4:	b085      	sub	sp, #20
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
 80016ba:	460b      	mov	r3, r1
 80016bc:	70fb      	strb	r3, [r7, #3]
  uint16_t next_ptr = ring->w_ptr+1;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 80016c4:	3301      	adds	r3, #1
 80016c6:	81fb      	strh	r3, [r7, #14]
  if(next_ptr >= ring->buf_size) next_ptr = 0;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 80016ce:	89fa      	ldrh	r2, [r7, #14]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d301      	bcc.n	80016d8 <dma_ring_putc+0x26>
 80016d4:	2300      	movs	r3, #0
 80016d6:	81fb      	strh	r3, [r7, #14]

  if(next_ptr == ring->r_ptr){
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 80016de:	89fa      	ldrh	r2, [r7, #14]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d109      	bne.n	80016f8 <dma_ring_putc+0x46>
    ring->overwrite_cnt++;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 80016ea:	3301      	adds	r3, #1
 80016ec:	b29a      	uxth	r2, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
    return RING_FAIL;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e00b      	b.n	8001710 <dma_ring_putc+0x5e>
  }
  ring->buf[ring->w_ptr] = c;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 80016fe:	4619      	mov	r1, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	78fa      	ldrb	r2, [r7, #3]
 8001704:	545a      	strb	r2, [r3, r1]
  ring->w_ptr = next_ptr;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	89fa      	ldrh	r2, [r7, #14]
 800170a:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
  return RING_SUCCESS;
 800170e:	2300      	movs	r3, #0
}
 8001710:	4618      	mov	r0, r3
 8001712:	3714      	adds	r7, #20
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <dma_ring_available_linear>:
    return ring->w_ptr - ring->r_ptr;
  }else{
    return ring->buf_size + ring->w_ptr - ring->r_ptr;
  }
}
int dma_ring_available_linear(struct dma_ring_buf *ring){
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  if(ring->w_ptr >= ring->r_ptr){
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8001730:	429a      	cmp	r2, r3
 8001732:	d308      	bcc.n	8001746 <dma_ring_available_linear+0x2a>
    return ring->w_ptr - ring->r_ptr;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 800173a:	461a      	mov	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	e007      	b.n	8001756 <dma_ring_available_linear+0x3a>
  }else{
    return ring->buf_size - ring->r_ptr;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 800174c:	461a      	mov	r2, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8001754:	1ad3      	subs	r3, r2, r3
  }
}
 8001756:	4618      	mov	r0, r3
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr

08001762 <dma_ring_get_r_ptr>:

uint16_t dma_ring_get_w_ptr(struct dma_ring_buf *ring){
  return ring->w_ptr;
}

uint16_t dma_ring_get_r_ptr(struct dma_ring_buf *ring){
 8001762:	b480      	push	{r7}
 8001764:	b083      	sub	sp, #12
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
  return ring->r_ptr;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
}
 8001770:	4618      	mov	r0, r3
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <dma_ring_forward_r_ptr>:

void dma_ring_forward_r_ptr(struct dma_ring_buf *ring, int len){
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
  while(len > 0){
 8001786:	e018      	b.n	80017ba <dma_ring_forward_r_ptr+0x3e>
    if(ring->r_ptr+1 >= ring->buf_size){
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 800178e:	3301      	adds	r3, #1
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	f8b2 2400 	ldrh.w	r2, [r2, #1024]	; 0x400
 8001796:	4293      	cmp	r3, r2
 8001798:	db04      	blt.n	80017a4 <dma_ring_forward_r_ptr+0x28>
      ring->r_ptr = 0;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2200      	movs	r2, #0
 800179e:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 80017a2:	e007      	b.n	80017b4 <dma_ring_forward_r_ptr+0x38>
    }else{
      ring->r_ptr += 1;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 80017aa:	3301      	adds	r3, #1
 80017ac:	b29a      	uxth	r2, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
    }
    len--;
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	3b01      	subs	r3, #1
 80017b8:	603b      	str	r3, [r7, #0]
  while(len > 0){
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	dce3      	bgt.n	8001788 <dma_ring_forward_r_ptr+0xc>
  }
}
 80017c0:	bf00      	nop
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <DRV8305Init>:
/*
 * Initialize DRV8305
 * @param
 * @return
 */
void DRV8305Init(void) {
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
	DRV8305Write(DRV8305_GATE_DRIVER_CONTROL, 0x0296);	//6 PWM mode -> 3 PWM mode
	DRV8305Write(DRV8305_SHUNT_AMP_CONTROL, 0x0715);	//Current Amp : x10 -> x20, current sense calibration on
	BLDCGetCurrentSenseOffset();						//get current sense offset(calibration)
	DRV8305Write(DRV8305_SHUNT_AMP_CONTROL, 0x0015);	//Current Amp : x10 -> x20, current sense calibration off
	*/
	DRV8305Write(DRV8305_GATE_DRIVER_CONTROL, 0x0216);	//6 PWM mode
 80017d0:	f240 2116 	movw	r1, #534	; 0x216
 80017d4:	2007      	movs	r0, #7
 80017d6:	f000 f807 	bl	80017e8 <DRV8305Write>
	DRV8305Write(DRV8305_SHUNT_AMP_CONTROL, 0x002A);	//Current Amp : x10 -> x20, current sense calibration off
 80017da:	212a      	movs	r1, #42	; 0x2a
 80017dc:	200a      	movs	r0, #10
 80017de:	f000 f803 	bl	80017e8 <DRV8305Write>
}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
	...

080017e8 <DRV8305Write>:
 * Write Register
 * @param	address : DRV8305 regigster address(8bit)
 * 			data : data to write(11bit)
 * @return
 */
uint16_t DRV8305Write(uint8_t address, uint16_t data) {
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b086      	sub	sp, #24
 80017ec:	af02      	add	r7, sp, #8
 80017ee:	4603      	mov	r3, r0
 80017f0:	460a      	mov	r2, r1
 80017f2:	71fb      	strb	r3, [r7, #7]
 80017f4:	4613      	mov	r3, r2
 80017f6:	80bb      	strh	r3, [r7, #4]
	uint16_t adr_data = (address << 11) | (data & 0x07FF);		//0(1bit) + address(4bit) + data(11bit) = 16bit
 80017f8:	79fb      	ldrb	r3, [r7, #7]
 80017fa:	02db      	lsls	r3, r3, #11
 80017fc:	b21a      	sxth	r2, r3
 80017fe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001802:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001806:	b21b      	sxth	r3, r3
 8001808:	4313      	orrs	r3, r2
 800180a:	b21b      	sxth	r3, r3
 800180c:	81fb      	strh	r3, [r7, #14]
	uint8_t txdata[2] = {adr_data >> 8, adr_data & 0xFF};		//{msb8bit, lsb8bit}
 800180e:	89fb      	ldrh	r3, [r7, #14]
 8001810:	0a1b      	lsrs	r3, r3, #8
 8001812:	b29b      	uxth	r3, r3
 8001814:	b2db      	uxtb	r3, r3
 8001816:	733b      	strb	r3, [r7, #12]
 8001818:	89fb      	ldrh	r3, [r7, #14]
 800181a:	b2db      	uxtb	r3, r3
 800181c:	737b      	strb	r3, [r7, #13]
	uint8_t rxdata[2] = {};
 800181e:	2300      	movs	r3, #0
 8001820:	813b      	strh	r3, [r7, #8]
	DRV8305Select();
 8001822:	f000 f84d 	bl	80018c0 <DRV8305Select>
	HAL_SPI_TransmitReceive(&DRV8305_SPI_HANDLER, txdata, rxdata, 2, 1);
 8001826:	f107 0208 	add.w	r2, r7, #8
 800182a:	f107 010c 	add.w	r1, r7, #12
 800182e:	2301      	movs	r3, #1
 8001830:	9300      	str	r3, [sp, #0]
 8001832:	2302      	movs	r3, #2
 8001834:	4809      	ldr	r0, [pc, #36]	; (800185c <DRV8305Write+0x74>)
 8001836:	f003 fadd 	bl	8004df4 <HAL_SPI_TransmitReceive>
	DRV8305Deselect();
 800183a:	f000 f84d 	bl	80018d8 <DRV8305Deselect>
	return (((rxdata[0] & 0x07) << 8) | rxdata[1]);
 800183e:	7a3b      	ldrb	r3, [r7, #8]
 8001840:	021b      	lsls	r3, r3, #8
 8001842:	b21b      	sxth	r3, r3
 8001844:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001848:	b21a      	sxth	r2, r3
 800184a:	7a7b      	ldrb	r3, [r7, #9]
 800184c:	b21b      	sxth	r3, r3
 800184e:	4313      	orrs	r3, r2
 8001850:	b21b      	sxth	r3, r3
 8001852:	b29b      	uxth	r3, r3
}
 8001854:	4618      	mov	r0, r3
 8001856:	3710      	adds	r7, #16
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	200006c8 	.word	0x200006c8

08001860 <DRV8305Read>:
/*
 * Read Register
 * @param	address : DRV8305 regigster address(8bit)
 * @return	data in the designated address(11bit)
 */
uint16_t DRV8305Read(uint8_t address) {
 8001860:	b580      	push	{r7, lr}
 8001862:	b086      	sub	sp, #24
 8001864:	af02      	add	r7, sp, #8
 8001866:	4603      	mov	r3, r0
 8001868:	71fb      	strb	r3, [r7, #7]
	uint8_t txdata[2] = {(address << 3) | 0x80, 0x00};
 800186a:	79fb      	ldrb	r3, [r7, #7]
 800186c:	00db      	lsls	r3, r3, #3
 800186e:	b25b      	sxtb	r3, r3
 8001870:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001874:	b25b      	sxtb	r3, r3
 8001876:	b2db      	uxtb	r3, r3
 8001878:	733b      	strb	r3, [r7, #12]
 800187a:	2300      	movs	r3, #0
 800187c:	737b      	strb	r3, [r7, #13]
	uint8_t rxdata[2] = {};
 800187e:	2300      	movs	r3, #0
 8001880:	813b      	strh	r3, [r7, #8]
	DRV8305Select();
 8001882:	f000 f81d 	bl	80018c0 <DRV8305Select>
	HAL_SPI_TransmitReceive(&DRV8305_SPI_HANDLER, txdata, rxdata, 2, 1);
 8001886:	f107 0208 	add.w	r2, r7, #8
 800188a:	f107 010c 	add.w	r1, r7, #12
 800188e:	2301      	movs	r3, #1
 8001890:	9300      	str	r3, [sp, #0]
 8001892:	2302      	movs	r3, #2
 8001894:	4809      	ldr	r0, [pc, #36]	; (80018bc <DRV8305Read+0x5c>)
 8001896:	f003 faad 	bl	8004df4 <HAL_SPI_TransmitReceive>
	DRV8305Deselect();
 800189a:	f000 f81d 	bl	80018d8 <DRV8305Deselect>
	return (((rxdata[0] & 0x07) << 8) | rxdata[1]);
 800189e:	7a3b      	ldrb	r3, [r7, #8]
 80018a0:	021b      	lsls	r3, r3, #8
 80018a2:	b21b      	sxth	r3, r3
 80018a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80018a8:	b21a      	sxth	r2, r3
 80018aa:	7a7b      	ldrb	r3, [r7, #9]
 80018ac:	b21b      	sxth	r3, r3
 80018ae:	4313      	orrs	r3, r2
 80018b0:	b21b      	sxth	r3, r3
 80018b2:	b29b      	uxth	r3, r3
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3710      	adds	r7, #16
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	200006c8 	.word	0x200006c8

080018c0 <DRV8305Select>:
/*
 * Select
 * @param
 * @return
 */
static void DRV8305Select(void) {
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DRV8305_CS_PORT, DRV8305_CS_PIN, GPIO_PIN_RESET);
 80018c4:	2200      	movs	r2, #0
 80018c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018ca:	4802      	ldr	r0, [pc, #8]	; (80018d4 <DRV8305Select+0x14>)
 80018cc:	f002 fdbe 	bl	800444c <HAL_GPIO_WritePin>
}
 80018d0:	bf00      	nop
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40020400 	.word	0x40020400

080018d8 <DRV8305Deselect>:
/*
 * Deselect
 * @param
 * @return
 */
static void DRV8305Deselect(void) {
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DRV8305_CS_PORT, DRV8305_CS_PIN, GPIO_PIN_SET);
 80018dc:	2201      	movs	r2, #1
 80018de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018e2:	4802      	ldr	r0, [pc, #8]	; (80018ec <DRV8305Deselect+0x14>)
 80018e4:	f002 fdb2 	bl	800444c <HAL_GPIO_WritePin>
}
 80018e8:	bf00      	nop
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40020400 	.word	0x40020400

080018f0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b088      	sub	sp, #32
 80018f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f6:	f107 030c 	add.w	r3, r7, #12
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	605a      	str	r2, [r3, #4]
 8001900:	609a      	str	r2, [r3, #8]
 8001902:	60da      	str	r2, [r3, #12]
 8001904:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	60bb      	str	r3, [r7, #8]
 800190a:	4b45      	ldr	r3, [pc, #276]	; (8001a20 <MX_GPIO_Init+0x130>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	4a44      	ldr	r2, [pc, #272]	; (8001a20 <MX_GPIO_Init+0x130>)
 8001910:	f043 0304 	orr.w	r3, r3, #4
 8001914:	6313      	str	r3, [r2, #48]	; 0x30
 8001916:	4b42      	ldr	r3, [pc, #264]	; (8001a20 <MX_GPIO_Init+0x130>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	f003 0304 	and.w	r3, r3, #4
 800191e:	60bb      	str	r3, [r7, #8]
 8001920:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	607b      	str	r3, [r7, #4]
 8001926:	4b3e      	ldr	r3, [pc, #248]	; (8001a20 <MX_GPIO_Init+0x130>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	4a3d      	ldr	r2, [pc, #244]	; (8001a20 <MX_GPIO_Init+0x130>)
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	6313      	str	r3, [r2, #48]	; 0x30
 8001932:	4b3b      	ldr	r3, [pc, #236]	; (8001a20 <MX_GPIO_Init+0x130>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	607b      	str	r3, [r7, #4]
 800193c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	603b      	str	r3, [r7, #0]
 8001942:	4b37      	ldr	r3, [pc, #220]	; (8001a20 <MX_GPIO_Init+0x130>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	4a36      	ldr	r2, [pc, #216]	; (8001a20 <MX_GPIO_Init+0x130>)
 8001948:	f043 0302 	orr.w	r3, r3, #2
 800194c:	6313      	str	r3, [r2, #48]	; 0x30
 800194e:	4b34      	ldr	r3, [pc, #208]	; (8001a20 <MX_GPIO_Init+0x130>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	603b      	str	r3, [r7, #0]
 8001958:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
 800195a:	2200      	movs	r2, #0
 800195c:	f248 11d0 	movw	r1, #33232	; 0x81d0
 8001960:	4830      	ldr	r0, [pc, #192]	; (8001a24 <MX_GPIO_Init+0x134>)
 8001962:	f002 fd73 	bl	800444c <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12, GPIO_PIN_RESET);
 8001966:	2200      	movs	r2, #0
 8001968:	f241 0103 	movw	r1, #4099	; 0x1003
 800196c:	482e      	ldr	r0, [pc, #184]	; (8001a28 <MX_GPIO_Init+0x138>)
 800196e:	f002 fd6d 	bl	800444c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA6 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_8;
 8001972:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001976:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001978:	2301      	movs	r3, #1
 800197a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197c:	2300      	movs	r3, #0
 800197e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001980:	2300      	movs	r3, #0
 8001982:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001984:	f107 030c 	add.w	r3, r7, #12
 8001988:	4619      	mov	r1, r3
 800198a:	4826      	ldr	r0, [pc, #152]	; (8001a24 <MX_GPIO_Init+0x134>)
 800198c:	f002 fbac 	bl	80040e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA7 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_15;
 8001990:	f248 0380 	movw	r3, #32896	; 0x8080
 8001994:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001996:	2301      	movs	r3, #1
 8001998:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199a:	2300      	movs	r3, #0
 800199c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800199e:	2303      	movs	r3, #3
 80019a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a2:	f107 030c 	add.w	r3, r7, #12
 80019a6:	4619      	mov	r1, r3
 80019a8:	481e      	ldr	r0, [pc, #120]	; (8001a24 <MX_GPIO_Init+0x134>)
 80019aa:	f002 fb9d 	bl	80040e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12;
 80019ae:	f241 0303 	movw	r3, #4099	; 0x1003
 80019b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019b4:	2301      	movs	r3, #1
 80019b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b8:	2300      	movs	r3, #0
 80019ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019bc:	2303      	movs	r3, #3
 80019be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c0:	f107 030c 	add.w	r3, r7, #12
 80019c4:	4619      	mov	r1, r3
 80019c6:	4818      	ldr	r0, [pc, #96]	; (8001a28 <MX_GPIO_Init+0x138>)
 80019c8:	f002 fb8e 	bl	80040e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80019cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80019d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019d2:	2300      	movs	r3, #0
 80019d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019d6:	2301      	movs	r3, #1
 80019d8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019da:	f107 030c 	add.w	r3, r7, #12
 80019de:	4619      	mov	r1, r3
 80019e0:	4811      	ldr	r0, [pc, #68]	; (8001a28 <MX_GPIO_Init+0x138>)
 80019e2:	f002 fb81 	bl	80040e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80019e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019ec:	2300      	movs	r3, #0
 80019ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019f0:	2301      	movs	r3, #1
 80019f2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019f4:	f107 030c 	add.w	r3, r7, #12
 80019f8:	4619      	mov	r1, r3
 80019fa:	480c      	ldr	r0, [pc, #48]	; (8001a2c <MX_GPIO_Init+0x13c>)
 80019fc:	f002 fb74 	bl	80040e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001a00:	2380      	movs	r3, #128	; 0x80
 8001a02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a04:	2300      	movs	r3, #0
 8001a06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a0c:	f107 030c 	add.w	r3, r7, #12
 8001a10:	4619      	mov	r1, r3
 8001a12:	4805      	ldr	r0, [pc, #20]	; (8001a28 <MX_GPIO_Init+0x138>)
 8001a14:	f002 fb68 	bl	80040e8 <HAL_GPIO_Init>

}
 8001a18:	bf00      	nop
 8001a1a:	3720      	adds	r7, #32
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	40023800 	.word	0x40023800
 8001a24:	40020000 	.word	0x40020000
 8001a28:	40020400 	.word	0x40020400
 8001a2c:	40020800 	.word	0x40020800

08001a30 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6) {
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a27      	ldr	r2, [pc, #156]	; (8001adc <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d148      	bne.n	8001ad4 <HAL_TIM_PeriodElapsedCallback+0xa4>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);

		}
		*/

		if (t >= 100) {
 8001a42:	4b27      	ldr	r3, [pc, #156]	; (8001ae0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2b63      	cmp	r3, #99	; 0x63
 8001a48:	dd3f      	ble.n	8001aca <HAL_TIM_PeriodElapsedCallback+0x9a>
			HAL_ADC_Start(&hadc1);
 8001a4a:	4826      	ldr	r0, [pc, #152]	; (8001ae4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001a4c:	f001 f856 	bl	8002afc <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1, 10);
 8001a50:	210a      	movs	r1, #10
 8001a52:	4824      	ldr	r0, [pc, #144]	; (8001ae4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001a54:	f001 f918 	bl	8002c88 <HAL_ADC_PollForConversion>
			adc_data1 = HAL_ADC_GetValue(&hadc1);
 8001a58:	4822      	ldr	r0, [pc, #136]	; (8001ae4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001a5a:	f001 fbcd 	bl	80031f8 <HAL_ADC_GetValue>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	b21a      	sxth	r2, r3
 8001a62:	4b21      	ldr	r3, [pc, #132]	; (8001ae8 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001a64:	801a      	strh	r2, [r3, #0]

			HAL_ADC_Start(&hadc2);
 8001a66:	4821      	ldr	r0, [pc, #132]	; (8001aec <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001a68:	f001 f848 	bl	8002afc <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc2, 10);
 8001a6c:	210a      	movs	r1, #10
 8001a6e:	481f      	ldr	r0, [pc, #124]	; (8001aec <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001a70:	f001 f90a 	bl	8002c88 <HAL_ADC_PollForConversion>
			adc_data2 = HAL_ADC_GetValue(&hadc2);
 8001a74:	481d      	ldr	r0, [pc, #116]	; (8001aec <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001a76:	f001 fbbf 	bl	80031f8 <HAL_ADC_GetValue>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	b21a      	sxth	r2, r3
 8001a7e:	4b1c      	ldr	r3, [pc, #112]	; (8001af0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001a80:	801a      	strh	r2, [r3, #0]
			float vbatt = adc_data2 * 3.3f / 4096 * (36.3f / 3.3f);
 8001a82:	4b1b      	ldr	r3, [pc, #108]	; (8001af0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001a84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a88:	ee07 3a90 	vmov	s15, r3
 8001a8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a90:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001af4 <HAL_TIM_PeriodElapsedCallback+0xc4>
 8001a94:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001a98:	eddf 6a17 	vldr	s13, [pc, #92]	; 8001af8 <HAL_TIM_PeriodElapsedCallback+0xc8>
 8001a9c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001aa0:	eeb2 7a06 	vmov.f32	s14, #38	; 0x41300000  11.0
 8001aa4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001aa8:	edc7 7a03 	vstr	s15, [r7, #12]

//			printf("%f %f\n", (float)(adc_data1 - 2048) * 3.3f * 50.0f / 4096.0f, vbatt);
			printf("%d\n", (int)adc_data1);
 8001aac:	4b0e      	ldr	r3, [pc, #56]	; (8001ae8 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001aae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4811      	ldr	r0, [pc, #68]	; (8001afc <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001ab6:	f005 ff27 	bl	8007908 <iprintf>

			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8001aba:	2140      	movs	r1, #64	; 0x40
 8001abc:	4810      	ldr	r0, [pc, #64]	; (8001b00 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001abe:	f002 fcde 	bl	800447e <HAL_GPIO_TogglePin>
			t = 0;
 8001ac2:	4b07      	ldr	r3, [pc, #28]	; (8001ae0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
		} else {
			t++;
		}
	}
}
 8001ac8:	e004      	b.n	8001ad4 <HAL_TIM_PeriodElapsedCallback+0xa4>
			t++;
 8001aca:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	3301      	adds	r3, #1
 8001ad0:	4a03      	ldr	r2, [pc, #12]	; (8001ae0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001ad2:	6013      	str	r3, [r2, #0]
}
 8001ad4:	bf00      	nop
 8001ad6:	3710      	adds	r7, #16
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	40001000 	.word	0x40001000
 8001ae0:	20000208 	.word	0x20000208
 8001ae4:	2000026c 	.word	0x2000026c
 8001ae8:	2000020c 	.word	0x2000020c
 8001aec:	20000224 	.word	0x20000224
 8001af0:	2000020e 	.word	0x2000020e
 8001af4:	40533333 	.word	0x40533333
 8001af8:	45800000 	.word	0x45800000
 8001afc:	080098fc 	.word	0x080098fc
 8001b00:	40020000 	.word	0x40020000

08001b04 <__io_putchar>:
#ifdef __GNUC__
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
void __io_putchar(uint8_t ch) {
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	71fb      	strb	r3, [r7, #7]
	dma_printf_putc(ch);
 8001b0e:	79fb      	ldrb	r3, [r7, #7]
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff fd45 	bl	80015a0 <dma_printf_putc>
}
 8001b16:	bf00      	nop
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
	...

08001b20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b24:	f000 ff12 	bl	800294c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b28:	f000 f872 	bl	8001c10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b2c:	f7ff fee0 	bl	80018f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001b30:	f7ff fcf4 	bl	800151c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001b34:	f000 fe00 	bl	8002738 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8001b38:	f000 f900 	bl	8001d3c <MX_SPI2_Init>
  MX_TIM8_Init();
 8001b3c:	f000 fbe0 	bl	8002300 <MX_TIM8_Init>
  MX_SPI3_Init();
 8001b40:	f000 f932 	bl	8001da8 <MX_SPI3_Init>
  MX_TIM6_Init();
 8001b44:	f000 fba6 	bl	8002294 <MX_TIM6_Init>
  MX_ADC1_Init();
 8001b48:	f7ff f9ae 	bl	8000ea8 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001b4c:	f000 fb1e 	bl	800218c <MX_TIM2_Init>
  MX_ADC2_Init();
 8001b50:	f7ff f9fc 	bl	8000f4c <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  //wait after power on
  HAL_Delay(10);
 8001b54:	200a      	movs	r0, #10
 8001b56:	f000 ff6b 	bl	8002a30 <HAL_Delay>

  //printf settings
  dma_printf_init(&huart1);
 8001b5a:	4825      	ldr	r0, [pc, #148]	; (8001bf0 <main+0xd0>)
 8001b5c:	f7ff fd06 	bl	800156c <dma_printf_init>
  setbuf(stdin, NULL);
 8001b60:	4b24      	ldr	r3, [pc, #144]	; (8001bf4 <main+0xd4>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	2100      	movs	r1, #0
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f005 ff49 	bl	8007a00 <setbuf>
  setbuf(stdout, NULL);
 8001b6e:	4b21      	ldr	r3, [pc, #132]	; (8001bf4 <main+0xd4>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	2100      	movs	r1, #0
 8001b76:	4618      	mov	r0, r3
 8001b78:	f005 ff42 	bl	8007a00 <setbuf>
  setbuf(stderr, NULL);
 8001b7c:	4b1d      	ldr	r3, [pc, #116]	; (8001bf4 <main+0xd4>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	2100      	movs	r1, #0
 8001b84:	4618      	mov	r0, r3
 8001b86:	f005 ff3b 	bl	8007a00 <setbuf>
  printf("Hello BLDCDriver_v1!\n");
 8001b8a:	481b      	ldr	r0, [pc, #108]	; (8001bf8 <main+0xd8>)
 8001b8c:	f005 ff30 	bl	80079f0 <puts>

  //dummy spi com(to avoid error at the first com)
  AS5147Read(AS5147_ANGLECOM);
 8001b90:	f643 70ff 	movw	r0, #16383	; 0x3fff
 8001b94:	f7ff facc 	bl	8001130 <AS5147Read>
  DRV8305Read(DRV8305_WARNING_WATCHDOG_RESET);
 8001b98:	2001      	movs	r0, #1
 8001b9a:	f7ff fe61 	bl	8001860 <DRV8305Read>

  //current sense
  BLDCStartCurrentSense();
 8001b9e:	f7ff fc65 	bl	800146c <BLDCStartCurrentSense>

  //Enable BLDC and initialize gate-driver
  BLDCEnable();		//must be run before DRV8305Init()
 8001ba2:	f7ff fc89 	bl	80014b8 <BLDCEnable>
  DRV8305Init();
 8001ba6:	f7ff fe11 	bl	80017cc <DRV8305Init>

  while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_RESET);
 8001baa:	bf00      	nop
 8001bac:	2180      	movs	r1, #128	; 0x80
 8001bae:	4813      	ldr	r0, [pc, #76]	; (8001bfc <main+0xdc>)
 8001bb0:	f002 fc34 	bl	800441c <HAL_GPIO_ReadPin>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d0f8      	beq.n	8001bac <main+0x8c>
//  BLDCCalibZeroPos();

  //start timer interrupt
  HAL_TIM_Base_Start_IT(&htim6);
 8001bba:	4811      	ldr	r0, [pc, #68]	; (8001c00 <main+0xe0>)
 8001bbc:	f003 fb93 	bl	80052e6 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	BLDC120DegConduction(BLDC_UtoV, 0.10f);
 8001bc0:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8001c04 <main+0xe4>
 8001bc4:	2000      	movs	r0, #0
 8001bc6:	f7ff fb31 	bl	800122c <BLDC120DegConduction>
	HAL_Delay(2000);
 8001bca:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001bce:	f000 ff2f 	bl	8002a30 <HAL_Delay>
	BLDC120DegConduction(BLDC_UtoV, 0.01f);
 8001bd2:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8001c08 <main+0xe8>
 8001bd6:	2000      	movs	r0, #0
 8001bd8:	f7ff fb28 	bl	800122c <BLDC120DegConduction>
	HAL_Delay(2000);
 8001bdc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001be0:	f000 ff26 	bl	8002a30 <HAL_Delay>
	  //LED
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8001be4:	2110      	movs	r1, #16
 8001be6:	4809      	ldr	r0, [pc, #36]	; (8001c0c <main+0xec>)
 8001be8:	f002 fc49 	bl	800447e <HAL_GPIO_TogglePin>
	BLDC120DegConduction(BLDC_UtoV, 0.10f);
 8001bec:	e7e8      	b.n	8001bc0 <main+0xa0>
 8001bee:	bf00      	nop
 8001bf0:	20000a1c 	.word	0x20000a1c
 8001bf4:	20000014 	.word	0x20000014
 8001bf8:	08009900 	.word	0x08009900
 8001bfc:	40020400 	.word	0x40020400
 8001c00:	200007b8 	.word	0x200007b8
 8001c04:	3dcccccd 	.word	0x3dcccccd
 8001c08:	3c23d70a 	.word	0x3c23d70a
 8001c0c:	40020000 	.word	0x40020000

08001c10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b094      	sub	sp, #80	; 0x50
 8001c14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c16:	f107 0320 	add.w	r3, r7, #32
 8001c1a:	2230      	movs	r2, #48	; 0x30
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f005 fa0e 	bl	8007040 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c24:	f107 030c 	add.w	r3, r7, #12
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	605a      	str	r2, [r3, #4]
 8001c2e:	609a      	str	r2, [r3, #8]
 8001c30:	60da      	str	r2, [r3, #12]
 8001c32:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c34:	2300      	movs	r3, #0
 8001c36:	60bb      	str	r3, [r7, #8]
 8001c38:	4b28      	ldr	r3, [pc, #160]	; (8001cdc <SystemClock_Config+0xcc>)
 8001c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3c:	4a27      	ldr	r2, [pc, #156]	; (8001cdc <SystemClock_Config+0xcc>)
 8001c3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c42:	6413      	str	r3, [r2, #64]	; 0x40
 8001c44:	4b25      	ldr	r3, [pc, #148]	; (8001cdc <SystemClock_Config+0xcc>)
 8001c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c4c:	60bb      	str	r3, [r7, #8]
 8001c4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c50:	2300      	movs	r3, #0
 8001c52:	607b      	str	r3, [r7, #4]
 8001c54:	4b22      	ldr	r3, [pc, #136]	; (8001ce0 <SystemClock_Config+0xd0>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a21      	ldr	r2, [pc, #132]	; (8001ce0 <SystemClock_Config+0xd0>)
 8001c5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c5e:	6013      	str	r3, [r2, #0]
 8001c60:	4b1f      	ldr	r3, [pc, #124]	; (8001ce0 <SystemClock_Config+0xd0>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c68:	607b      	str	r3, [r7, #4]
 8001c6a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c70:	2301      	movs	r3, #1
 8001c72:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c74:	2310      	movs	r3, #16
 8001c76:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c78:	2302      	movs	r3, #2
 8001c7a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001c80:	2308      	movs	r3, #8
 8001c82:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001c84:	23a8      	movs	r3, #168	; 0xa8
 8001c86:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c88:	2302      	movs	r3, #2
 8001c8a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c8c:	2304      	movs	r3, #4
 8001c8e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c90:	f107 0320 	add.w	r3, r7, #32
 8001c94:	4618      	mov	r0, r3
 8001c96:	f002 fc0d 	bl	80044b4 <HAL_RCC_OscConfig>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001ca0:	f000 f844 	bl	8001d2c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ca4:	230f      	movs	r3, #15
 8001ca6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ca8:	2302      	movs	r3, #2
 8001caa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cac:	2300      	movs	r3, #0
 8001cae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001cb0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001cb4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001cb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001cbc:	f107 030c 	add.w	r3, r7, #12
 8001cc0:	2105      	movs	r1, #5
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f002 fe66 	bl	8004994 <HAL_RCC_ClockConfig>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001cce:	f000 f82d 	bl	8001d2c <Error_Handler>
  }
}
 8001cd2:	bf00      	nop
 8001cd4:	3750      	adds	r7, #80	; 0x50
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	40023800 	.word	0x40023800
 8001ce0:	40007000 	.word	0x40007000

08001ce4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
//UART Callback for printf(...)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle) {
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
	uart_flag=1;
 8001cec:	4b05      	ldr	r3, [pc, #20]	; (8001d04 <HAL_UART_RxCpltCallback+0x20>)
 8001cee:	2201      	movs	r2, #1
 8001cf0:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart1, uart_buf, 4);
 8001cf2:	2204      	movs	r2, #4
 8001cf4:	4904      	ldr	r1, [pc, #16]	; (8001d08 <HAL_UART_RxCpltCallback+0x24>)
 8001cf6:	4805      	ldr	r0, [pc, #20]	; (8001d0c <HAL_UART_RxCpltCallback+0x28>)
 8001cf8:	f004 fa6f 	bl	80061da <HAL_UART_Receive_IT>
}
 8001cfc:	bf00      	nop
 8001cfe:	3708      	adds	r7, #8
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	20000206 	.word	0x20000206
 8001d08:	20000000 	.word	0x20000000
 8001d0c:	20000a1c 	.word	0x20000a1c

08001d10 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
    uart_com_send_it(huart);
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f000 fc57 	bl	80025cc <uart_com_send_it>
    dma_printf_send_it(huart);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f7ff fc70 	bl	8001604 <dma_printf_send_it>
}
 8001d24:	bf00      	nop
 8001d26:	3708      	adds	r7, #8
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001d30:	bf00      	nop
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
	...

08001d3c <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8001d40:	4b17      	ldr	r3, [pc, #92]	; (8001da0 <MX_SPI2_Init+0x64>)
 8001d42:	4a18      	ldr	r2, [pc, #96]	; (8001da4 <MX_SPI2_Init+0x68>)
 8001d44:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001d46:	4b16      	ldr	r3, [pc, #88]	; (8001da0 <MX_SPI2_Init+0x64>)
 8001d48:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d4c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001d4e:	4b14      	ldr	r3, [pc, #80]	; (8001da0 <MX_SPI2_Init+0x64>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d54:	4b12      	ldr	r3, [pc, #72]	; (8001da0 <MX_SPI2_Init+0x64>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d5a:	4b11      	ldr	r3, [pc, #68]	; (8001da0 <MX_SPI2_Init+0x64>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001d60:	4b0f      	ldr	r3, [pc, #60]	; (8001da0 <MX_SPI2_Init+0x64>)
 8001d62:	2201      	movs	r2, #1
 8001d64:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001d66:	4b0e      	ldr	r3, [pc, #56]	; (8001da0 <MX_SPI2_Init+0x64>)
 8001d68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d6c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001d6e:	4b0c      	ldr	r3, [pc, #48]	; (8001da0 <MX_SPI2_Init+0x64>)
 8001d70:	2218      	movs	r2, #24
 8001d72:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d74:	4b0a      	ldr	r3, [pc, #40]	; (8001da0 <MX_SPI2_Init+0x64>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d7a:	4b09      	ldr	r3, [pc, #36]	; (8001da0 <MX_SPI2_Init+0x64>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d80:	4b07      	ldr	r3, [pc, #28]	; (8001da0 <MX_SPI2_Init+0x64>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001d86:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <MX_SPI2_Init+0x64>)
 8001d88:	220a      	movs	r2, #10
 8001d8a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001d8c:	4804      	ldr	r0, [pc, #16]	; (8001da0 <MX_SPI2_Init+0x64>)
 8001d8e:	f002 ffcd 	bl	8004d2c <HAL_SPI_Init>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001d98:	f7ff ffc8 	bl	8001d2c <Error_Handler>
  }

}
 8001d9c:	bf00      	nop
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	200006c8 	.word	0x200006c8
 8001da4:	40003800 	.word	0x40003800

08001da8 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8001dac:	4b17      	ldr	r3, [pc, #92]	; (8001e0c <MX_SPI3_Init+0x64>)
 8001dae:	4a18      	ldr	r2, [pc, #96]	; (8001e10 <MX_SPI3_Init+0x68>)
 8001db0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001db2:	4b16      	ldr	r3, [pc, #88]	; (8001e0c <MX_SPI3_Init+0x64>)
 8001db4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001db8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001dba:	4b14      	ldr	r3, [pc, #80]	; (8001e0c <MX_SPI3_Init+0x64>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001dc0:	4b12      	ldr	r3, [pc, #72]	; (8001e0c <MX_SPI3_Init+0x64>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001dc6:	4b11      	ldr	r3, [pc, #68]	; (8001e0c <MX_SPI3_Init+0x64>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001dcc:	4b0f      	ldr	r3, [pc, #60]	; (8001e0c <MX_SPI3_Init+0x64>)
 8001dce:	2201      	movs	r2, #1
 8001dd0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001dd2:	4b0e      	ldr	r3, [pc, #56]	; (8001e0c <MX_SPI3_Init+0x64>)
 8001dd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dd8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001dda:	4b0c      	ldr	r3, [pc, #48]	; (8001e0c <MX_SPI3_Init+0x64>)
 8001ddc:	2208      	movs	r2, #8
 8001dde:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001de0:	4b0a      	ldr	r3, [pc, #40]	; (8001e0c <MX_SPI3_Init+0x64>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001de6:	4b09      	ldr	r3, [pc, #36]	; (8001e0c <MX_SPI3_Init+0x64>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dec:	4b07      	ldr	r3, [pc, #28]	; (8001e0c <MX_SPI3_Init+0x64>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001df2:	4b06      	ldr	r3, [pc, #24]	; (8001e0c <MX_SPI3_Init+0x64>)
 8001df4:	220a      	movs	r2, #10
 8001df6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001df8:	4804      	ldr	r0, [pc, #16]	; (8001e0c <MX_SPI3_Init+0x64>)
 8001dfa:	f002 ff97 	bl	8004d2c <HAL_SPI_Init>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001e04:	f7ff ff92 	bl	8001d2c <Error_Handler>
  }

}
 8001e08:	bf00      	nop
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	20000720 	.word	0x20000720
 8001e10:	40003c00 	.word	0x40003c00

08001e14 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b08c      	sub	sp, #48	; 0x30
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e1c:	f107 031c 	add.w	r3, r7, #28
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	605a      	str	r2, [r3, #4]
 8001e26:	609a      	str	r2, [r3, #8]
 8001e28:	60da      	str	r2, [r3, #12]
 8001e2a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a33      	ldr	r2, [pc, #204]	; (8001f00 <HAL_SPI_MspInit+0xec>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d12d      	bne.n	8001e92 <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	61bb      	str	r3, [r7, #24]
 8001e3a:	4b32      	ldr	r3, [pc, #200]	; (8001f04 <HAL_SPI_MspInit+0xf0>)
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3e:	4a31      	ldr	r2, [pc, #196]	; (8001f04 <HAL_SPI_MspInit+0xf0>)
 8001e40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e44:	6413      	str	r3, [r2, #64]	; 0x40
 8001e46:	4b2f      	ldr	r3, [pc, #188]	; (8001f04 <HAL_SPI_MspInit+0xf0>)
 8001e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e4e:	61bb      	str	r3, [r7, #24]
 8001e50:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	617b      	str	r3, [r7, #20]
 8001e56:	4b2b      	ldr	r3, [pc, #172]	; (8001f04 <HAL_SPI_MspInit+0xf0>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5a:	4a2a      	ldr	r2, [pc, #168]	; (8001f04 <HAL_SPI_MspInit+0xf0>)
 8001e5c:	f043 0302 	orr.w	r3, r3, #2
 8001e60:	6313      	str	r3, [r2, #48]	; 0x30
 8001e62:	4b28      	ldr	r3, [pc, #160]	; (8001f04 <HAL_SPI_MspInit+0xf0>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	617b      	str	r3, [r7, #20]
 8001e6c:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001e6e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001e72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e74:	2302      	movs	r3, #2
 8001e76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e80:	2305      	movs	r3, #5
 8001e82:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e84:	f107 031c 	add.w	r3, r7, #28
 8001e88:	4619      	mov	r1, r3
 8001e8a:	481f      	ldr	r0, [pc, #124]	; (8001f08 <HAL_SPI_MspInit+0xf4>)
 8001e8c:	f002 f92c 	bl	80040e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001e90:	e031      	b.n	8001ef6 <HAL_SPI_MspInit+0xe2>
  else if(spiHandle->Instance==SPI3)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a1d      	ldr	r2, [pc, #116]	; (8001f0c <HAL_SPI_MspInit+0xf8>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d12c      	bne.n	8001ef6 <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	613b      	str	r3, [r7, #16]
 8001ea0:	4b18      	ldr	r3, [pc, #96]	; (8001f04 <HAL_SPI_MspInit+0xf0>)
 8001ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea4:	4a17      	ldr	r2, [pc, #92]	; (8001f04 <HAL_SPI_MspInit+0xf0>)
 8001ea6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001eaa:	6413      	str	r3, [r2, #64]	; 0x40
 8001eac:	4b15      	ldr	r3, [pc, #84]	; (8001f04 <HAL_SPI_MspInit+0xf0>)
 8001eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001eb4:	613b      	str	r3, [r7, #16]
 8001eb6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eb8:	2300      	movs	r3, #0
 8001eba:	60fb      	str	r3, [r7, #12]
 8001ebc:	4b11      	ldr	r3, [pc, #68]	; (8001f04 <HAL_SPI_MspInit+0xf0>)
 8001ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec0:	4a10      	ldr	r2, [pc, #64]	; (8001f04 <HAL_SPI_MspInit+0xf0>)
 8001ec2:	f043 0304 	orr.w	r3, r3, #4
 8001ec6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ec8:	4b0e      	ldr	r3, [pc, #56]	; (8001f04 <HAL_SPI_MspInit+0xf0>)
 8001eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ecc:	f003 0304 	and.w	r3, r3, #4
 8001ed0:	60fb      	str	r3, [r7, #12]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001ed4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001ed8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eda:	2302      	movs	r3, #2
 8001edc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001ee6:	2306      	movs	r3, #6
 8001ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eea:	f107 031c 	add.w	r3, r7, #28
 8001eee:	4619      	mov	r1, r3
 8001ef0:	4807      	ldr	r0, [pc, #28]	; (8001f10 <HAL_SPI_MspInit+0xfc>)
 8001ef2:	f002 f8f9 	bl	80040e8 <HAL_GPIO_Init>
}
 8001ef6:	bf00      	nop
 8001ef8:	3730      	adds	r7, #48	; 0x30
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	40003800 	.word	0x40003800
 8001f04:	40023800 	.word	0x40023800
 8001f08:	40020400 	.word	0x40020400
 8001f0c:	40003c00 	.word	0x40003c00
 8001f10:	40020800 	.word	0x40020800

08001f14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	607b      	str	r3, [r7, #4]
 8001f1e:	4b10      	ldr	r3, [pc, #64]	; (8001f60 <HAL_MspInit+0x4c>)
 8001f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f22:	4a0f      	ldr	r2, [pc, #60]	; (8001f60 <HAL_MspInit+0x4c>)
 8001f24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f28:	6453      	str	r3, [r2, #68]	; 0x44
 8001f2a:	4b0d      	ldr	r3, [pc, #52]	; (8001f60 <HAL_MspInit+0x4c>)
 8001f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f32:	607b      	str	r3, [r7, #4]
 8001f34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f36:	2300      	movs	r3, #0
 8001f38:	603b      	str	r3, [r7, #0]
 8001f3a:	4b09      	ldr	r3, [pc, #36]	; (8001f60 <HAL_MspInit+0x4c>)
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3e:	4a08      	ldr	r2, [pc, #32]	; (8001f60 <HAL_MspInit+0x4c>)
 8001f40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f44:	6413      	str	r3, [r2, #64]	; 0x40
 8001f46:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <HAL_MspInit+0x4c>)
 8001f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f4e:	603b      	str	r3, [r7, #0]
 8001f50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f52:	bf00      	nop
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	40023800 	.word	0x40023800

08001f64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001f68:	bf00      	nop
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr

08001f72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f72:	b480      	push	{r7}
 8001f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f76:	e7fe      	b.n	8001f76 <HardFault_Handler+0x4>

08001f78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f7c:	e7fe      	b.n	8001f7c <MemManage_Handler+0x4>

08001f7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f82:	e7fe      	b.n	8001f82 <BusFault_Handler+0x4>

08001f84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f88:	e7fe      	b.n	8001f88 <UsageFault_Handler+0x4>

08001f8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f8e:	bf00      	nop
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f9c:	bf00      	nop
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr

08001fa6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001faa:	bf00      	nop
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fb8:	f000 fd1a 	bl	80029f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fbc:	bf00      	nop
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001fc4:	4803      	ldr	r0, [pc, #12]	; (8001fd4 <ADC_IRQHandler+0x14>)
 8001fc6:	f000 fee3 	bl	8002d90 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001fca:	4803      	ldr	r0, [pc, #12]	; (8001fd8 <ADC_IRQHandler+0x18>)
 8001fcc:	f000 fee0 	bl	8002d90 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001fd0:	bf00      	nop
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	2000026c 	.word	0x2000026c
 8001fd8:	20000224 	.word	0x20000224

08001fdc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001fe0:	4802      	ldr	r0, [pc, #8]	; (8001fec <USART1_IRQHandler+0x10>)
 8001fe2:	f004 f9bb 	bl	800635c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001fe6:	bf00      	nop
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	20000a1c 	.word	0x20000a1c

08001ff0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001ff4:	4802      	ldr	r0, [pc, #8]	; (8002000 <TIM6_DAC_IRQHandler+0x10>)
 8001ff6:	f003 fa03 	bl	8005400 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001ffa:	bf00      	nop
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	200007b8 	.word	0x200007b8

08002004 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002008:	4802      	ldr	r0, [pc, #8]	; (8002014 <DMA2_Stream2_IRQHandler+0x10>)
 800200a:	f001 fe05 	bl	8003c18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800200e:	bf00      	nop
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	200009bc 	.word	0x200009bc

08002018 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800201c:	4802      	ldr	r0, [pc, #8]	; (8002028 <DMA2_Stream7_IRQHandler+0x10>)
 800201e:	f001 fdfb 	bl	8003c18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002022:	bf00      	nop
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	2000095c 	.word	0x2000095c

0800202c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002038:	2300      	movs	r3, #0
 800203a:	617b      	str	r3, [r7, #20]
 800203c:	e00a      	b.n	8002054 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800203e:	f3af 8000 	nop.w
 8002042:	4601      	mov	r1, r0
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	1c5a      	adds	r2, r3, #1
 8002048:	60ba      	str	r2, [r7, #8]
 800204a:	b2ca      	uxtb	r2, r1
 800204c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	3301      	adds	r3, #1
 8002052:	617b      	str	r3, [r7, #20]
 8002054:	697a      	ldr	r2, [r7, #20]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	429a      	cmp	r2, r3
 800205a:	dbf0      	blt.n	800203e <_read+0x12>
	}

return len;
 800205c:	687b      	ldr	r3, [r7, #4]
}
 800205e:	4618      	mov	r0, r3
 8002060:	3718      	adds	r7, #24
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	b086      	sub	sp, #24
 800206a:	af00      	add	r7, sp, #0
 800206c:	60f8      	str	r0, [r7, #12]
 800206e:	60b9      	str	r1, [r7, #8]
 8002070:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002072:	2300      	movs	r3, #0
 8002074:	617b      	str	r3, [r7, #20]
 8002076:	e009      	b.n	800208c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	1c5a      	adds	r2, r3, #1
 800207c:	60ba      	str	r2, [r7, #8]
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	4618      	mov	r0, r3
 8002082:	f7ff fd3f 	bl	8001b04 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	3301      	adds	r3, #1
 800208a:	617b      	str	r3, [r7, #20]
 800208c:	697a      	ldr	r2, [r7, #20]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	429a      	cmp	r2, r3
 8002092:	dbf1      	blt.n	8002078 <_write+0x12>
	}
	return len;
 8002094:	687b      	ldr	r3, [r7, #4]
}
 8002096:	4618      	mov	r0, r3
 8002098:	3718      	adds	r7, #24
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <_close>:

int _close(int file)
{
 800209e:	b480      	push	{r7}
 80020a0:	b083      	sub	sp, #12
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
	return -1;
 80020a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr

080020b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020b6:	b480      	push	{r7}
 80020b8:	b083      	sub	sp, #12
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
 80020be:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020c6:	605a      	str	r2, [r3, #4]
	return 0;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <_isatty>:

int _isatty(int file)
{
 80020d6:	b480      	push	{r7}
 80020d8:	b083      	sub	sp, #12
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
	return 1;
 80020de:	2301      	movs	r3, #1
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	607a      	str	r2, [r7, #4]
	return 0;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3714      	adds	r7, #20
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
	...

08002108 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002110:	4b11      	ldr	r3, [pc, #68]	; (8002158 <_sbrk+0x50>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d102      	bne.n	800211e <_sbrk+0x16>
		heap_end = &end;
 8002118:	4b0f      	ldr	r3, [pc, #60]	; (8002158 <_sbrk+0x50>)
 800211a:	4a10      	ldr	r2, [pc, #64]	; (800215c <_sbrk+0x54>)
 800211c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800211e:	4b0e      	ldr	r3, [pc, #56]	; (8002158 <_sbrk+0x50>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002124:	4b0c      	ldr	r3, [pc, #48]	; (8002158 <_sbrk+0x50>)
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4413      	add	r3, r2
 800212c:	466a      	mov	r2, sp
 800212e:	4293      	cmp	r3, r2
 8002130:	d907      	bls.n	8002142 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002132:	f004 ff5b 	bl	8006fec <__errno>
 8002136:	4602      	mov	r2, r0
 8002138:	230c      	movs	r3, #12
 800213a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800213c:	f04f 33ff 	mov.w	r3, #4294967295
 8002140:	e006      	b.n	8002150 <_sbrk+0x48>
	}

	heap_end += incr;
 8002142:	4b05      	ldr	r3, [pc, #20]	; (8002158 <_sbrk+0x50>)
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4413      	add	r3, r2
 800214a:	4a03      	ldr	r2, [pc, #12]	; (8002158 <_sbrk+0x50>)
 800214c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800214e:	68fb      	ldr	r3, [r7, #12]
}
 8002150:	4618      	mov	r0, r3
 8002152:	3710      	adds	r7, #16
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	20000210 	.word	0x20000210
 800215c:	20000a68 	.word	0x20000a68

08002160 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002164:	4b08      	ldr	r3, [pc, #32]	; (8002188 <SystemInit+0x28>)
 8002166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800216a:	4a07      	ldr	r2, [pc, #28]	; (8002188 <SystemInit+0x28>)
 800216c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002170:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002174:	4b04      	ldr	r3, [pc, #16]	; (8002188 <SystemInit+0x28>)
 8002176:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800217a:	609a      	str	r2, [r3, #8]
#endif
}
 800217c:	bf00      	nop
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	e000ed00 	.word	0xe000ed00

0800218c <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b08e      	sub	sp, #56	; 0x38
 8002190:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002192:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002196:	2200      	movs	r2, #0
 8002198:	601a      	str	r2, [r3, #0]
 800219a:	605a      	str	r2, [r3, #4]
 800219c:	609a      	str	r2, [r3, #8]
 800219e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021a0:	f107 0320 	add.w	r3, r7, #32
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]
 80021a8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021aa:	1d3b      	adds	r3, r7, #4
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	605a      	str	r2, [r3, #4]
 80021b2:	609a      	str	r2, [r3, #8]
 80021b4:	60da      	str	r2, [r3, #12]
 80021b6:	611a      	str	r2, [r3, #16]
 80021b8:	615a      	str	r2, [r3, #20]
 80021ba:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 80021bc:	4b34      	ldr	r3, [pc, #208]	; (8002290 <MX_TIM2_Init+0x104>)
 80021be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4200-1;
 80021c4:	4b32      	ldr	r3, [pc, #200]	; (8002290 <MX_TIM2_Init+0x104>)
 80021c6:	f241 0267 	movw	r2, #4199	; 0x1067
 80021ca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80021cc:	4b30      	ldr	r3, [pc, #192]	; (8002290 <MX_TIM2_Init+0x104>)
 80021ce:	2220      	movs	r2, #32
 80021d0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80021d2:	4b2f      	ldr	r3, [pc, #188]	; (8002290 <MX_TIM2_Init+0x104>)
 80021d4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80021d8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021da:	4b2d      	ldr	r3, [pc, #180]	; (8002290 <MX_TIM2_Init+0x104>)
 80021dc:	2200      	movs	r2, #0
 80021de:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80021e0:	4b2b      	ldr	r3, [pc, #172]	; (8002290 <MX_TIM2_Init+0x104>)
 80021e2:	2280      	movs	r2, #128	; 0x80
 80021e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80021e6:	482a      	ldr	r0, [pc, #168]	; (8002290 <MX_TIM2_Init+0x104>)
 80021e8:	f003 f852 	bl	8005290 <HAL_TIM_Base_Init>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80021f2:	f7ff fd9b 	bl	8001d2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021fa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80021fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002200:	4619      	mov	r1, r3
 8002202:	4823      	ldr	r0, [pc, #140]	; (8002290 <MX_TIM2_Init+0x104>)
 8002204:	f003 faca 	bl	800579c <HAL_TIM_ConfigClockSource>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800220e:	f7ff fd8d 	bl	8001d2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002212:	481f      	ldr	r0, [pc, #124]	; (8002290 <MX_TIM2_Init+0x104>)
 8002214:	f003 f88b 	bl	800532e <HAL_TIM_PWM_Init>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800221e:	f7ff fd85 	bl	8001d2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8002222:	2350      	movs	r3, #80	; 0x50
 8002224:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002226:	2300      	movs	r3, #0
 8002228:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800222a:	f107 0320 	add.w	r3, r7, #32
 800222e:	4619      	mov	r1, r3
 8002230:	4817      	ldr	r0, [pc, #92]	; (8002290 <MX_TIM2_Init+0x104>)
 8002232:	f003 fea3 	bl	8005f7c <HAL_TIMEx_MasterConfigSynchronization>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800223c:	f7ff fd76 	bl	8001d2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002240:	2360      	movs	r3, #96	; 0x60
 8002242:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002244:	2300      	movs	r3, #0
 8002246:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002248:	2300      	movs	r3, #0
 800224a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800224c:	2300      	movs	r3, #0
 800224e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002250:	1d3b      	adds	r3, r7, #4
 8002252:	2200      	movs	r2, #0
 8002254:	4619      	mov	r1, r3
 8002256:	480e      	ldr	r0, [pc, #56]	; (8002290 <MX_TIM2_Init+0x104>)
 8002258:	f003 f9da 	bl	8005610 <HAL_TIM_PWM_ConfigChannel>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002262:	f7ff fd63 	bl	8001d2c <Error_Handler>
  }
  sConfigOC.Pulse = 998;
 8002266:	f240 33e6 	movw	r3, #998	; 0x3e6
 800226a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800226c:	1d3b      	adds	r3, r7, #4
 800226e:	2204      	movs	r2, #4
 8002270:	4619      	mov	r1, r3
 8002272:	4807      	ldr	r0, [pc, #28]	; (8002290 <MX_TIM2_Init+0x104>)
 8002274:	f003 f9cc 	bl	8005610 <HAL_TIM_PWM_ConfigChannel>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <MX_TIM2_Init+0xf6>
  {
    Error_Handler();
 800227e:	f7ff fd55 	bl	8001d2c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8002282:	4803      	ldr	r0, [pc, #12]	; (8002290 <MX_TIM2_Init+0x104>)
 8002284:	f000 f942 	bl	800250c <HAL_TIM_MspPostInit>

}
 8002288:	bf00      	nop
 800228a:	3738      	adds	r7, #56	; 0x38
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	200007f8 	.word	0x200007f8

08002294 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800229a:	463b      	mov	r3, r7
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	605a      	str	r2, [r3, #4]

  htim6.Instance = TIM6;
 80022a2:	4b15      	ldr	r3, [pc, #84]	; (80022f8 <MX_TIM6_Init+0x64>)
 80022a4:	4a15      	ldr	r2, [pc, #84]	; (80022fc <MX_TIM6_Init+0x68>)
 80022a6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80022a8:	4b13      	ldr	r3, [pc, #76]	; (80022f8 <MX_TIM6_Init+0x64>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022ae:	4b12      	ldr	r3, [pc, #72]	; (80022f8 <MX_TIM6_Init+0x64>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 8400;
 80022b4:	4b10      	ldr	r3, [pc, #64]	; (80022f8 <MX_TIM6_Init+0x64>)
 80022b6:	f242 02d0 	movw	r2, #8400	; 0x20d0
 80022ba:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022bc:	4b0e      	ldr	r3, [pc, #56]	; (80022f8 <MX_TIM6_Init+0x64>)
 80022be:	2200      	movs	r2, #0
 80022c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80022c2:	480d      	ldr	r0, [pc, #52]	; (80022f8 <MX_TIM6_Init+0x64>)
 80022c4:	f002 ffe4 	bl	8005290 <HAL_TIM_Base_Init>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80022ce:	f7ff fd2d 	bl	8001d2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022d2:	2300      	movs	r3, #0
 80022d4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022d6:	2300      	movs	r3, #0
 80022d8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80022da:	463b      	mov	r3, r7
 80022dc:	4619      	mov	r1, r3
 80022de:	4806      	ldr	r0, [pc, #24]	; (80022f8 <MX_TIM6_Init+0x64>)
 80022e0:	f003 fe4c 	bl	8005f7c <HAL_TIMEx_MasterConfigSynchronization>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80022ea:	f7ff fd1f 	bl	8001d2c <Error_Handler>
  }

}
 80022ee:	bf00      	nop
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	200007b8 	.word	0x200007b8
 80022fc:	40001000 	.word	0x40001000

08002300 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b092      	sub	sp, #72	; 0x48
 8002304:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002306:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800230a:	2200      	movs	r2, #0
 800230c:	601a      	str	r2, [r3, #0]
 800230e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002310:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	605a      	str	r2, [r3, #4]
 800231a:	609a      	str	r2, [r3, #8]
 800231c:	60da      	str	r2, [r3, #12]
 800231e:	611a      	str	r2, [r3, #16]
 8002320:	615a      	str	r2, [r3, #20]
 8002322:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002324:	1d3b      	adds	r3, r7, #4
 8002326:	2220      	movs	r2, #32
 8002328:	2100      	movs	r1, #0
 800232a:	4618      	mov	r0, r3
 800232c:	f004 fe88 	bl	8007040 <memset>

  htim8.Instance = TIM8;
 8002330:	4b45      	ldr	r3, [pc, #276]	; (8002448 <MX_TIM8_Init+0x148>)
 8002332:	4a46      	ldr	r2, [pc, #280]	; (800244c <MX_TIM8_Init+0x14c>)
 8002334:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002336:	4b44      	ldr	r3, [pc, #272]	; (8002448 <MX_TIM8_Init+0x148>)
 8002338:	2200      	movs	r2, #0
 800233a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800233c:	4b42      	ldr	r3, [pc, #264]	; (8002448 <MX_TIM8_Init+0x148>)
 800233e:	2220      	movs	r2, #32
 8002340:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1680-1;
 8002342:	4b41      	ldr	r3, [pc, #260]	; (8002448 <MX_TIM8_Init+0x148>)
 8002344:	f240 628f 	movw	r2, #1679	; 0x68f
 8002348:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800234a:	4b3f      	ldr	r3, [pc, #252]	; (8002448 <MX_TIM8_Init+0x148>)
 800234c:	2200      	movs	r2, #0
 800234e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002350:	4b3d      	ldr	r3, [pc, #244]	; (8002448 <MX_TIM8_Init+0x148>)
 8002352:	2200      	movs	r2, #0
 8002354:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002356:	4b3c      	ldr	r3, [pc, #240]	; (8002448 <MX_TIM8_Init+0x148>)
 8002358:	2200      	movs	r2, #0
 800235a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800235c:	483a      	ldr	r0, [pc, #232]	; (8002448 <MX_TIM8_Init+0x148>)
 800235e:	f002 ffe6 	bl	800532e <HAL_TIM_PWM_Init>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8002368:	f7ff fce0 	bl	8001d2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 800236c:	2370      	movs	r3, #112	; 0x70
 800236e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002370:	2300      	movs	r3, #0
 8002372:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002374:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002378:	4619      	mov	r1, r3
 800237a:	4833      	ldr	r0, [pc, #204]	; (8002448 <MX_TIM8_Init+0x148>)
 800237c:	f003 fdfe 	bl	8005f7c <HAL_TIMEx_MasterConfigSynchronization>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8002386:	f7ff fcd1 	bl	8001d2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800238a:	2360      	movs	r3, #96	; 0x60
 800238c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800238e:	2300      	movs	r3, #0
 8002390:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002392:	2300      	movs	r3, #0
 8002394:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002396:	2300      	movs	r3, #0
 8002398:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800239a:	2300      	movs	r3, #0
 800239c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800239e:	2300      	movs	r3, #0
 80023a0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80023a2:	2300      	movs	r3, #0
 80023a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023aa:	2200      	movs	r2, #0
 80023ac:	4619      	mov	r1, r3
 80023ae:	4826      	ldr	r0, [pc, #152]	; (8002448 <MX_TIM8_Init+0x148>)
 80023b0:	f003 f92e 	bl	8005610 <HAL_TIM_PWM_ConfigChannel>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 80023ba:	f7ff fcb7 	bl	8001d2c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80023be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023c2:	2204      	movs	r2, #4
 80023c4:	4619      	mov	r1, r3
 80023c6:	4820      	ldr	r0, [pc, #128]	; (8002448 <MX_TIM8_Init+0x148>)
 80023c8:	f003 f922 	bl	8005610 <HAL_TIM_PWM_ConfigChannel>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 80023d2:	f7ff fcab 	bl	8001d2c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80023d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023da:	2208      	movs	r2, #8
 80023dc:	4619      	mov	r1, r3
 80023de:	481a      	ldr	r0, [pc, #104]	; (8002448 <MX_TIM8_Init+0x148>)
 80023e0:	f003 f916 	bl	8005610 <HAL_TIM_PWM_ConfigChannel>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <MX_TIM8_Init+0xee>
  {
    Error_Handler();
 80023ea:	f7ff fc9f 	bl	8001d2c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80023ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023f2:	220c      	movs	r2, #12
 80023f4:	4619      	mov	r1, r3
 80023f6:	4814      	ldr	r0, [pc, #80]	; (8002448 <MX_TIM8_Init+0x148>)
 80023f8:	f003 f90a 	bl	8005610 <HAL_TIM_PWM_ConfigChannel>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <MX_TIM8_Init+0x106>
  {
    Error_Handler();
 8002402:	f7ff fc93 	bl	8001d2c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002406:	2300      	movs	r3, #0
 8002408:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800240a:	2300      	movs	r3, #0
 800240c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800240e:	2300      	movs	r3, #0
 8002410:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002412:	2300      	movs	r3, #0
 8002414:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002416:	2300      	movs	r3, #0
 8002418:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800241a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800241e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002420:	2300      	movs	r3, #0
 8002422:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002424:	1d3b      	adds	r3, r7, #4
 8002426:	4619      	mov	r1, r3
 8002428:	4807      	ldr	r0, [pc, #28]	; (8002448 <MX_TIM8_Init+0x148>)
 800242a:	f003 fe23 	bl	8006074 <HAL_TIMEx_ConfigBreakDeadTime>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <MX_TIM8_Init+0x138>
  {
    Error_Handler();
 8002434:	f7ff fc7a 	bl	8001d2c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 8002438:	4803      	ldr	r0, [pc, #12]	; (8002448 <MX_TIM8_Init+0x148>)
 800243a:	f000 f867 	bl	800250c <HAL_TIM_MspPostInit>

}
 800243e:	bf00      	nop
 8002440:	3748      	adds	r7, #72	; 0x48
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	20000778 	.word	0x20000778
 800244c:	40010400 	.word	0x40010400

08002450 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002460:	d10e      	bne.n	8002480 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002462:	2300      	movs	r3, #0
 8002464:	60fb      	str	r3, [r7, #12]
 8002466:	4b16      	ldr	r3, [pc, #88]	; (80024c0 <HAL_TIM_Base_MspInit+0x70>)
 8002468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246a:	4a15      	ldr	r2, [pc, #84]	; (80024c0 <HAL_TIM_Base_MspInit+0x70>)
 800246c:	f043 0301 	orr.w	r3, r3, #1
 8002470:	6413      	str	r3, [r2, #64]	; 0x40
 8002472:	4b13      	ldr	r3, [pc, #76]	; (80024c0 <HAL_TIM_Base_MspInit+0x70>)
 8002474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	60fb      	str	r3, [r7, #12]
 800247c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800247e:	e01a      	b.n	80024b6 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM6)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a0f      	ldr	r2, [pc, #60]	; (80024c4 <HAL_TIM_Base_MspInit+0x74>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d115      	bne.n	80024b6 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800248a:	2300      	movs	r3, #0
 800248c:	60bb      	str	r3, [r7, #8]
 800248e:	4b0c      	ldr	r3, [pc, #48]	; (80024c0 <HAL_TIM_Base_MspInit+0x70>)
 8002490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002492:	4a0b      	ldr	r2, [pc, #44]	; (80024c0 <HAL_TIM_Base_MspInit+0x70>)
 8002494:	f043 0310 	orr.w	r3, r3, #16
 8002498:	6413      	str	r3, [r2, #64]	; 0x40
 800249a:	4b09      	ldr	r3, [pc, #36]	; (80024c0 <HAL_TIM_Base_MspInit+0x70>)
 800249c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249e:	f003 0310 	and.w	r3, r3, #16
 80024a2:	60bb      	str	r3, [r7, #8]
 80024a4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80024a6:	2200      	movs	r2, #0
 80024a8:	2100      	movs	r1, #0
 80024aa:	2036      	movs	r0, #54	; 0x36
 80024ac:	f001 fa55 	bl	800395a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80024b0:	2036      	movs	r0, #54	; 0x36
 80024b2:	f001 fa6e 	bl	8003992 <HAL_NVIC_EnableIRQ>
}
 80024b6:	bf00      	nop
 80024b8:	3710      	adds	r7, #16
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	40023800 	.word	0x40023800
 80024c4:	40001000 	.word	0x40001000

080024c8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM8)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a0b      	ldr	r2, [pc, #44]	; (8002504 <HAL_TIM_PWM_MspInit+0x3c>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d10d      	bne.n	80024f6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80024da:	2300      	movs	r3, #0
 80024dc:	60fb      	str	r3, [r7, #12]
 80024de:	4b0a      	ldr	r3, [pc, #40]	; (8002508 <HAL_TIM_PWM_MspInit+0x40>)
 80024e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e2:	4a09      	ldr	r2, [pc, #36]	; (8002508 <HAL_TIM_PWM_MspInit+0x40>)
 80024e4:	f043 0302 	orr.w	r3, r3, #2
 80024e8:	6453      	str	r3, [r2, #68]	; 0x44
 80024ea:	4b07      	ldr	r3, [pc, #28]	; (8002508 <HAL_TIM_PWM_MspInit+0x40>)
 80024ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	60fb      	str	r3, [r7, #12]
 80024f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80024f6:	bf00      	nop
 80024f8:	3714      	adds	r7, #20
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	40010400 	.word	0x40010400
 8002508:	40023800 	.word	0x40023800

0800250c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b08a      	sub	sp, #40	; 0x28
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002514:	f107 0314 	add.w	r3, r7, #20
 8002518:	2200      	movs	r2, #0
 800251a:	601a      	str	r2, [r3, #0]
 800251c:	605a      	str	r2, [r3, #4]
 800251e:	609a      	str	r2, [r3, #8]
 8002520:	60da      	str	r2, [r3, #12]
 8002522:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800252c:	d11e      	bne.n	800256c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800252e:	2300      	movs	r3, #0
 8002530:	613b      	str	r3, [r7, #16]
 8002532:	4b22      	ldr	r3, [pc, #136]	; (80025bc <HAL_TIM_MspPostInit+0xb0>)
 8002534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002536:	4a21      	ldr	r2, [pc, #132]	; (80025bc <HAL_TIM_MspPostInit+0xb0>)
 8002538:	f043 0301 	orr.w	r3, r3, #1
 800253c:	6313      	str	r3, [r2, #48]	; 0x30
 800253e:	4b1f      	ldr	r3, [pc, #124]	; (80025bc <HAL_TIM_MspPostInit+0xb0>)
 8002540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002542:	f003 0301 	and.w	r3, r3, #1
 8002546:	613b      	str	r3, [r7, #16]
 8002548:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA5     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800254a:	2320      	movs	r3, #32
 800254c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800254e:	2302      	movs	r3, #2
 8002550:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002552:	2300      	movs	r3, #0
 8002554:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002556:	2300      	movs	r3, #0
 8002558:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800255a:	2301      	movs	r3, #1
 800255c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800255e:	f107 0314 	add.w	r3, r7, #20
 8002562:	4619      	mov	r1, r3
 8002564:	4816      	ldr	r0, [pc, #88]	; (80025c0 <HAL_TIM_MspPostInit+0xb4>)
 8002566:	f001 fdbf 	bl	80040e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800256a:	e023      	b.n	80025b4 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM8)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a14      	ldr	r2, [pc, #80]	; (80025c4 <HAL_TIM_MspPostInit+0xb8>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d11e      	bne.n	80025b4 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002576:	2300      	movs	r3, #0
 8002578:	60fb      	str	r3, [r7, #12]
 800257a:	4b10      	ldr	r3, [pc, #64]	; (80025bc <HAL_TIM_MspPostInit+0xb0>)
 800257c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257e:	4a0f      	ldr	r2, [pc, #60]	; (80025bc <HAL_TIM_MspPostInit+0xb0>)
 8002580:	f043 0304 	orr.w	r3, r3, #4
 8002584:	6313      	str	r3, [r2, #48]	; 0x30
 8002586:	4b0d      	ldr	r3, [pc, #52]	; (80025bc <HAL_TIM_MspPostInit+0xb0>)
 8002588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258a:	f003 0304 	and.w	r3, r3, #4
 800258e:	60fb      	str	r3, [r7, #12]
 8002590:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8002592:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002596:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002598:	2302      	movs	r3, #2
 800259a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259c:	2300      	movs	r3, #0
 800259e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025a0:	2303      	movs	r3, #3
 80025a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80025a4:	2303      	movs	r3, #3
 80025a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025a8:	f107 0314 	add.w	r3, r7, #20
 80025ac:	4619      	mov	r1, r3
 80025ae:	4806      	ldr	r0, [pc, #24]	; (80025c8 <HAL_TIM_MspPostInit+0xbc>)
 80025b0:	f001 fd9a 	bl	80040e8 <HAL_GPIO_Init>
}
 80025b4:	bf00      	nop
 80025b6:	3728      	adds	r7, #40	; 0x28
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	40023800 	.word	0x40023800
 80025c0:	40020000 	.word	0x40020000
 80025c4:	40010400 	.word	0x40010400
 80025c8:	40020800 	.word	0x40020800

080025cc <uart_com_send_it>:
    uart_com_putc(value.u32_val&0xFF);
    uart_com_putc(UART_COM_END_0);
    uart_com_putc(UART_COM_END_1);
}

void uart_com_send_it(UART_HandleTypeDef *huart) {
 80025cc:	b590      	push	{r4, r7, lr}
 80025ce:	b085      	sub	sp, #20
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
    if(uart_com_ring_tx.huart != huart) return;
 80025d4:	4b18      	ldr	r3, [pc, #96]	; (8002638 <uart_com_send_it+0x6c>)
 80025d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d127      	bne.n	8002630 <uart_com_send_it+0x64>

    uart_com_ring_forward_r_ptr(&uart_com_ring_tx, previous_send_len);
 80025e0:	4b16      	ldr	r3, [pc, #88]	; (800263c <uart_com_send_it+0x70>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4619      	mov	r1, r3
 80025e6:	4814      	ldr	r0, [pc, #80]	; (8002638 <uart_com_send_it+0x6c>)
 80025e8:	f000 f87c 	bl	80026e4 <uart_com_ring_forward_r_ptr>
    uint16_t len = (uint16_t)uart_com_ring_available_linear(&uart_com_ring_tx);
 80025ec:	4812      	ldr	r0, [pc, #72]	; (8002638 <uart_com_send_it+0x6c>)
 80025ee:	f000 f847 	bl	8002680 <uart_com_ring_available_linear>
 80025f2:	4603      	mov	r3, r0
 80025f4:	81fb      	strh	r3, [r7, #14]
    if (len > 0 ) {
 80025f6:	89fb      	ldrh	r3, [r7, #14]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d015      	beq.n	8002628 <uart_com_send_it+0x5c>
        previous_send_len = len;
 80025fc:	89fb      	ldrh	r3, [r7, #14]
 80025fe:	4a0f      	ldr	r2, [pc, #60]	; (800263c <uart_com_send_it+0x70>)
 8002600:	6013      	str	r3, [r2, #0]
        send_lock = 1;
 8002602:	4b0f      	ldr	r3, [pc, #60]	; (8002640 <uart_com_send_it+0x74>)
 8002604:	2201      	movs	r2, #1
 8002606:	601a      	str	r2, [r3, #0]
        HAL_UART_Transmit_DMA(uart_com_ring_tx.huart, uart_com_ring_tx.buf+uart_com_ring_get_r_ptr(&uart_com_ring_tx), len);
 8002608:	4b0b      	ldr	r3, [pc, #44]	; (8002638 <uart_com_send_it+0x6c>)
 800260a:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 800260e:	480a      	ldr	r0, [pc, #40]	; (8002638 <uart_com_send_it+0x6c>)
 8002610:	f000 f85a 	bl	80026c8 <uart_com_ring_get_r_ptr>
 8002614:	4603      	mov	r3, r0
 8002616:	461a      	mov	r2, r3
 8002618:	4b07      	ldr	r3, [pc, #28]	; (8002638 <uart_com_send_it+0x6c>)
 800261a:	4413      	add	r3, r2
 800261c:	89fa      	ldrh	r2, [r7, #14]
 800261e:	4619      	mov	r1, r3
 8002620:	4620      	mov	r0, r4
 8002622:	f003 fe2f 	bl	8006284 <HAL_UART_Transmit_DMA>
 8002626:	e004      	b.n	8002632 <uart_com_send_it+0x66>
    }else{
        send_lock = 0;
 8002628:	4b05      	ldr	r3, [pc, #20]	; (8002640 <uart_com_send_it+0x74>)
 800262a:	2200      	movs	r2, #0
 800262c:	601a      	str	r2, [r3, #0]
 800262e:	e000      	b.n	8002632 <uart_com_send_it+0x66>
    if(uart_com_ring_tx.huart != huart) return;
 8002630:	bf00      	nop
    }
}
 8002632:	3714      	adds	r7, #20
 8002634:	46bd      	mov	sp, r7
 8002636:	bd90      	pop	{r4, r7, pc}
 8002638:	2000083c 	.word	0x2000083c
 800263c:	20000218 	.word	0x20000218
 8002640:	20000214 	.word	0x20000214

08002644 <update_w_ptr>:
#include "main.h"
#include <stdio.h>

static void update_w_ptr(struct ring_buf *ring){
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
    if(ring->type == RING_TYPE_RX_CIRCULAR){
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002652:	2b01      	cmp	r3, #1
 8002654:	d10e      	bne.n	8002674 <update_w_ptr+0x30>
        ring->w_ptr = (uint16_t) ((ring->buf_size - ring->huart->hdmarx->Instance->W_PTR) & 0xFFFF);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f8b3 2080 	ldrh.w	r2, [r3, #128]	; 0x80
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	b29b      	uxth	r3, r3
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	b29a      	uxth	r2, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
    }
}
 8002674:	bf00      	nop
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <uart_com_ring_available_linear>:
    }else{
        return ring->buf_size + ring->w_ptr - ring->r_ptr;
    }
}

int uart_com_ring_available_linear(struct ring_buf *ring){
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
    update_w_ptr(ring);
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f7ff ffdb 	bl	8002644 <update_w_ptr>

    if(ring->w_ptr >= ring->r_ptr){
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800269a:	429a      	cmp	r2, r3
 800269c:	d308      	bcc.n	80026b0 <uart_com_ring_available_linear+0x30>
        return ring->w_ptr - ring->r_ptr;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 80026a4:	461a      	mov	r2, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	e007      	b.n	80026c0 <uart_com_ring_available_linear+0x40>
    }else{
        return ring->buf_size - ring->r_ptr;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 80026b6:	461a      	mov	r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80026be:	1ad3      	subs	r3, r2, r3
    }
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3708      	adds	r7, #8
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <uart_com_ring_get_r_ptr>:
    update_w_ptr(ring);

    return ring->w_ptr;
}

uint16_t uart_com_ring_get_r_ptr(struct ring_buf *ring){
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
    update_w_ptr(ring);
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f7ff ffb7 	bl	8002644 <update_w_ptr>

    return ring->r_ptr;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3708      	adds	r7, #8
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <uart_com_ring_forward_r_ptr>:

void uart_com_ring_forward_r_ptr(struct ring_buf *ring, int len){
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
    update_w_ptr(ring);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f7ff ffa8 	bl	8002644 <update_w_ptr>

    while(len > 0){
 80026f4:	e018      	b.n	8002728 <uart_com_ring_forward_r_ptr+0x44>
        if(ring->r_ptr+1 >= ring->buf_size){
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80026fc:	3301      	adds	r3, #1
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	f8b2 2080 	ldrh.w	r2, [r2, #128]	; 0x80
 8002704:	4293      	cmp	r3, r2
 8002706:	db04      	blt.n	8002712 <uart_com_ring_forward_r_ptr+0x2e>
            ring->r_ptr = 0;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 8002710:	e007      	b.n	8002722 <uart_com_ring_forward_r_ptr+0x3e>
        }else{
            ring->r_ptr += 1;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8002718:	3301      	adds	r3, #1
 800271a:	b29a      	uxth	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
        }
        len--;
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	3b01      	subs	r3, #1
 8002726:	603b      	str	r3, [r7, #0]
    while(len > 0){
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	2b00      	cmp	r3, #0
 800272c:	dce3      	bgt.n	80026f6 <uart_com_ring_forward_r_ptr+0x12>
    }
}
 800272e:	bf00      	nop
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
	...

08002738 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800273c:	4b11      	ldr	r3, [pc, #68]	; (8002784 <MX_USART1_UART_Init+0x4c>)
 800273e:	4a12      	ldr	r2, [pc, #72]	; (8002788 <MX_USART1_UART_Init+0x50>)
 8002740:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002742:	4b10      	ldr	r3, [pc, #64]	; (8002784 <MX_USART1_UART_Init+0x4c>)
 8002744:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002748:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800274a:	4b0e      	ldr	r3, [pc, #56]	; (8002784 <MX_USART1_UART_Init+0x4c>)
 800274c:	2200      	movs	r2, #0
 800274e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002750:	4b0c      	ldr	r3, [pc, #48]	; (8002784 <MX_USART1_UART_Init+0x4c>)
 8002752:	2200      	movs	r2, #0
 8002754:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002756:	4b0b      	ldr	r3, [pc, #44]	; (8002784 <MX_USART1_UART_Init+0x4c>)
 8002758:	2200      	movs	r2, #0
 800275a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800275c:	4b09      	ldr	r3, [pc, #36]	; (8002784 <MX_USART1_UART_Init+0x4c>)
 800275e:	220c      	movs	r2, #12
 8002760:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002762:	4b08      	ldr	r3, [pc, #32]	; (8002784 <MX_USART1_UART_Init+0x4c>)
 8002764:	2200      	movs	r2, #0
 8002766:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002768:	4b06      	ldr	r3, [pc, #24]	; (8002784 <MX_USART1_UART_Init+0x4c>)
 800276a:	2200      	movs	r2, #0
 800276c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800276e:	4805      	ldr	r0, [pc, #20]	; (8002784 <MX_USART1_UART_Init+0x4c>)
 8002770:	f003 fce6 	bl	8006140 <HAL_UART_Init>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800277a:	f7ff fad7 	bl	8001d2c <Error_Handler>
  }

}
 800277e:	bf00      	nop
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	20000a1c 	.word	0x20000a1c
 8002788:	40011000 	.word	0x40011000

0800278c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b08a      	sub	sp, #40	; 0x28
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002794:	f107 0314 	add.w	r3, r7, #20
 8002798:	2200      	movs	r2, #0
 800279a:	601a      	str	r2, [r3, #0]
 800279c:	605a      	str	r2, [r3, #4]
 800279e:	609a      	str	r2, [r3, #8]
 80027a0:	60da      	str	r2, [r3, #12]
 80027a2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a4c      	ldr	r2, [pc, #304]	; (80028dc <HAL_UART_MspInit+0x150>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	f040 8092 	bne.w	80028d4 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80027b0:	2300      	movs	r3, #0
 80027b2:	613b      	str	r3, [r7, #16]
 80027b4:	4b4a      	ldr	r3, [pc, #296]	; (80028e0 <HAL_UART_MspInit+0x154>)
 80027b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b8:	4a49      	ldr	r2, [pc, #292]	; (80028e0 <HAL_UART_MspInit+0x154>)
 80027ba:	f043 0310 	orr.w	r3, r3, #16
 80027be:	6453      	str	r3, [r2, #68]	; 0x44
 80027c0:	4b47      	ldr	r3, [pc, #284]	; (80028e0 <HAL_UART_MspInit+0x154>)
 80027c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c4:	f003 0310 	and.w	r3, r3, #16
 80027c8:	613b      	str	r3, [r7, #16]
 80027ca:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027cc:	2300      	movs	r3, #0
 80027ce:	60fb      	str	r3, [r7, #12]
 80027d0:	4b43      	ldr	r3, [pc, #268]	; (80028e0 <HAL_UART_MspInit+0x154>)
 80027d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d4:	4a42      	ldr	r2, [pc, #264]	; (80028e0 <HAL_UART_MspInit+0x154>)
 80027d6:	f043 0301 	orr.w	r3, r3, #1
 80027da:	6313      	str	r3, [r2, #48]	; 0x30
 80027dc:	4b40      	ldr	r3, [pc, #256]	; (80028e0 <HAL_UART_MspInit+0x154>)
 80027de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e0:	f003 0301 	and.w	r3, r3, #1
 80027e4:	60fb      	str	r3, [r7, #12]
 80027e6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80027e8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80027ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ee:	2302      	movs	r3, #2
 80027f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f2:	2300      	movs	r3, #0
 80027f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027f6:	2303      	movs	r3, #3
 80027f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80027fa:	2307      	movs	r3, #7
 80027fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027fe:	f107 0314 	add.w	r3, r7, #20
 8002802:	4619      	mov	r1, r3
 8002804:	4837      	ldr	r0, [pc, #220]	; (80028e4 <HAL_UART_MspInit+0x158>)
 8002806:	f001 fc6f 	bl	80040e8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800280a:	4b37      	ldr	r3, [pc, #220]	; (80028e8 <HAL_UART_MspInit+0x15c>)
 800280c:	4a37      	ldr	r2, [pc, #220]	; (80028ec <HAL_UART_MspInit+0x160>)
 800280e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002810:	4b35      	ldr	r3, [pc, #212]	; (80028e8 <HAL_UART_MspInit+0x15c>)
 8002812:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002816:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002818:	4b33      	ldr	r3, [pc, #204]	; (80028e8 <HAL_UART_MspInit+0x15c>)
 800281a:	2200      	movs	r2, #0
 800281c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800281e:	4b32      	ldr	r3, [pc, #200]	; (80028e8 <HAL_UART_MspInit+0x15c>)
 8002820:	2200      	movs	r2, #0
 8002822:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002824:	4b30      	ldr	r3, [pc, #192]	; (80028e8 <HAL_UART_MspInit+0x15c>)
 8002826:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800282a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800282c:	4b2e      	ldr	r3, [pc, #184]	; (80028e8 <HAL_UART_MspInit+0x15c>)
 800282e:	2200      	movs	r2, #0
 8002830:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002832:	4b2d      	ldr	r3, [pc, #180]	; (80028e8 <HAL_UART_MspInit+0x15c>)
 8002834:	2200      	movs	r2, #0
 8002836:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002838:	4b2b      	ldr	r3, [pc, #172]	; (80028e8 <HAL_UART_MspInit+0x15c>)
 800283a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800283e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002840:	4b29      	ldr	r3, [pc, #164]	; (80028e8 <HAL_UART_MspInit+0x15c>)
 8002842:	2200      	movs	r2, #0
 8002844:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002846:	4b28      	ldr	r3, [pc, #160]	; (80028e8 <HAL_UART_MspInit+0x15c>)
 8002848:	2200      	movs	r2, #0
 800284a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800284c:	4826      	ldr	r0, [pc, #152]	; (80028e8 <HAL_UART_MspInit+0x15c>)
 800284e:	f001 f8bb 	bl	80039c8 <HAL_DMA_Init>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8002858:	f7ff fa68 	bl	8001d2c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	4a22      	ldr	r2, [pc, #136]	; (80028e8 <HAL_UART_MspInit+0x15c>)
 8002860:	635a      	str	r2, [r3, #52]	; 0x34
 8002862:	4a21      	ldr	r2, [pc, #132]	; (80028e8 <HAL_UART_MspInit+0x15c>)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002868:	4b21      	ldr	r3, [pc, #132]	; (80028f0 <HAL_UART_MspInit+0x164>)
 800286a:	4a22      	ldr	r2, [pc, #136]	; (80028f4 <HAL_UART_MspInit+0x168>)
 800286c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800286e:	4b20      	ldr	r3, [pc, #128]	; (80028f0 <HAL_UART_MspInit+0x164>)
 8002870:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002874:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002876:	4b1e      	ldr	r3, [pc, #120]	; (80028f0 <HAL_UART_MspInit+0x164>)
 8002878:	2240      	movs	r2, #64	; 0x40
 800287a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800287c:	4b1c      	ldr	r3, [pc, #112]	; (80028f0 <HAL_UART_MspInit+0x164>)
 800287e:	2200      	movs	r2, #0
 8002880:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002882:	4b1b      	ldr	r3, [pc, #108]	; (80028f0 <HAL_UART_MspInit+0x164>)
 8002884:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002888:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800288a:	4b19      	ldr	r3, [pc, #100]	; (80028f0 <HAL_UART_MspInit+0x164>)
 800288c:	2200      	movs	r2, #0
 800288e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002890:	4b17      	ldr	r3, [pc, #92]	; (80028f0 <HAL_UART_MspInit+0x164>)
 8002892:	2200      	movs	r2, #0
 8002894:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002896:	4b16      	ldr	r3, [pc, #88]	; (80028f0 <HAL_UART_MspInit+0x164>)
 8002898:	2200      	movs	r2, #0
 800289a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800289c:	4b14      	ldr	r3, [pc, #80]	; (80028f0 <HAL_UART_MspInit+0x164>)
 800289e:	2200      	movs	r2, #0
 80028a0:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028a2:	4b13      	ldr	r3, [pc, #76]	; (80028f0 <HAL_UART_MspInit+0x164>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80028a8:	4811      	ldr	r0, [pc, #68]	; (80028f0 <HAL_UART_MspInit+0x164>)
 80028aa:	f001 f88d 	bl	80039c8 <HAL_DMA_Init>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d001      	beq.n	80028b8 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 80028b4:	f7ff fa3a 	bl	8001d2c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	4a0d      	ldr	r2, [pc, #52]	; (80028f0 <HAL_UART_MspInit+0x164>)
 80028bc:	631a      	str	r2, [r3, #48]	; 0x30
 80028be:	4a0c      	ldr	r2, [pc, #48]	; (80028f0 <HAL_UART_MspInit+0x164>)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80028c4:	2200      	movs	r2, #0
 80028c6:	2100      	movs	r1, #0
 80028c8:	2025      	movs	r0, #37	; 0x25
 80028ca:	f001 f846 	bl	800395a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80028ce:	2025      	movs	r0, #37	; 0x25
 80028d0:	f001 f85f 	bl	8003992 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80028d4:	bf00      	nop
 80028d6:	3728      	adds	r7, #40	; 0x28
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	40011000 	.word	0x40011000
 80028e0:	40023800 	.word	0x40023800
 80028e4:	40020000 	.word	0x40020000
 80028e8:	200009bc 	.word	0x200009bc
 80028ec:	40026440 	.word	0x40026440
 80028f0:	2000095c 	.word	0x2000095c
 80028f4:	400264b8 	.word	0x400264b8

080028f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80028f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002930 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80028fc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80028fe:	e003      	b.n	8002908 <LoopCopyDataInit>

08002900 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002900:	4b0c      	ldr	r3, [pc, #48]	; (8002934 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002902:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002904:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002906:	3104      	adds	r1, #4

08002908 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002908:	480b      	ldr	r0, [pc, #44]	; (8002938 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800290a:	4b0c      	ldr	r3, [pc, #48]	; (800293c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800290c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800290e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002910:	d3f6      	bcc.n	8002900 <CopyDataInit>
  ldr  r2, =_sbss
 8002912:	4a0b      	ldr	r2, [pc, #44]	; (8002940 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002914:	e002      	b.n	800291c <LoopFillZerobss>

08002916 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002916:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002918:	f842 3b04 	str.w	r3, [r2], #4

0800291c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800291c:	4b09      	ldr	r3, [pc, #36]	; (8002944 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800291e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002920:	d3f9      	bcc.n	8002916 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002922:	f7ff fc1d 	bl	8002160 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002926:	f004 fb67 	bl	8006ff8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800292a:	f7ff f8f9 	bl	8001b20 <main>
  bx  lr    
 800292e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002930:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002934:	08009c08 	.word	0x08009c08
  ldr  r0, =_sdata
 8002938:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800293c:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8002940:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8002944:	20000a64 	.word	0x20000a64

08002948 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002948:	e7fe      	b.n	8002948 <CAN1_RX0_IRQHandler>
	...

0800294c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002950:	4b0e      	ldr	r3, [pc, #56]	; (800298c <HAL_Init+0x40>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a0d      	ldr	r2, [pc, #52]	; (800298c <HAL_Init+0x40>)
 8002956:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800295a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800295c:	4b0b      	ldr	r3, [pc, #44]	; (800298c <HAL_Init+0x40>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a0a      	ldr	r2, [pc, #40]	; (800298c <HAL_Init+0x40>)
 8002962:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002966:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002968:	4b08      	ldr	r3, [pc, #32]	; (800298c <HAL_Init+0x40>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a07      	ldr	r2, [pc, #28]	; (800298c <HAL_Init+0x40>)
 800296e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002972:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002974:	2003      	movs	r0, #3
 8002976:	f000 ffe5 	bl	8003944 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800297a:	2000      	movs	r0, #0
 800297c:	f000 f808 	bl	8002990 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002980:	f7ff fac8 	bl	8001f14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	40023c00 	.word	0x40023c00

08002990 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002998:	4b12      	ldr	r3, [pc, #72]	; (80029e4 <HAL_InitTick+0x54>)
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	4b12      	ldr	r3, [pc, #72]	; (80029e8 <HAL_InitTick+0x58>)
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	4619      	mov	r1, r3
 80029a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80029aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ae:	4618      	mov	r0, r3
 80029b0:	f000 fffd 	bl	80039ae <HAL_SYSTICK_Config>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e00e      	b.n	80029dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2b0f      	cmp	r3, #15
 80029c2:	d80a      	bhi.n	80029da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029c4:	2200      	movs	r2, #0
 80029c6:	6879      	ldr	r1, [r7, #4]
 80029c8:	f04f 30ff 	mov.w	r0, #4294967295
 80029cc:	f000 ffc5 	bl	800395a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029d0:	4a06      	ldr	r2, [pc, #24]	; (80029ec <HAL_InitTick+0x5c>)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029d6:	2300      	movs	r3, #0
 80029d8:	e000      	b.n	80029dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3708      	adds	r7, #8
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	20000008 	.word	0x20000008
 80029e8:	20000010 	.word	0x20000010
 80029ec:	2000000c 	.word	0x2000000c

080029f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029f4:	4b06      	ldr	r3, [pc, #24]	; (8002a10 <HAL_IncTick+0x20>)
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	461a      	mov	r2, r3
 80029fa:	4b06      	ldr	r3, [pc, #24]	; (8002a14 <HAL_IncTick+0x24>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4413      	add	r3, r2
 8002a00:	4a04      	ldr	r2, [pc, #16]	; (8002a14 <HAL_IncTick+0x24>)
 8002a02:	6013      	str	r3, [r2, #0]
}
 8002a04:	bf00      	nop
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	20000010 	.word	0x20000010
 8002a14:	20000a5c 	.word	0x20000a5c

08002a18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a1c:	4b03      	ldr	r3, [pc, #12]	; (8002a2c <HAL_GetTick+0x14>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	20000a5c 	.word	0x20000a5c

08002a30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a38:	f7ff ffee 	bl	8002a18 <HAL_GetTick>
 8002a3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a48:	d005      	beq.n	8002a56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a4a:	4b09      	ldr	r3, [pc, #36]	; (8002a70 <HAL_Delay+0x40>)
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	461a      	mov	r2, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	4413      	add	r3, r2
 8002a54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a56:	bf00      	nop
 8002a58:	f7ff ffde 	bl	8002a18 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	68fa      	ldr	r2, [r7, #12]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d8f7      	bhi.n	8002a58 <HAL_Delay+0x28>
  {
  }
}
 8002a68:	bf00      	nop
 8002a6a:	3710      	adds	r7, #16
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	20000010 	.word	0x20000010

08002a74 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d101      	bne.n	8002a8a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e033      	b.n	8002af2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d109      	bne.n	8002aa6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f7fe faac 	bl	8000ff0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aaa:	f003 0310 	and.w	r3, r3, #16
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d118      	bne.n	8002ae4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002aba:	f023 0302 	bic.w	r3, r3, #2
 8002abe:	f043 0202 	orr.w	r2, r3, #2
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f000 fce4 	bl	8003494 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad6:	f023 0303 	bic.w	r3, r3, #3
 8002ada:	f043 0201 	orr.w	r2, r3, #1
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	641a      	str	r2, [r3, #64]	; 0x40
 8002ae2:	e001      	b.n	8002ae8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3710      	adds	r7, #16
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
	...

08002afc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002b04:	2300      	movs	r3, #0
 8002b06:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d101      	bne.n	8002b16 <HAL_ADC_Start+0x1a>
 8002b12:	2302      	movs	r3, #2
 8002b14:	e0a5      	b.n	8002c62 <HAL_ADC_Start+0x166>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2201      	movs	r2, #1
 8002b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f003 0301 	and.w	r3, r3, #1
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d018      	beq.n	8002b5e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	689a      	ldr	r2, [r3, #8]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f042 0201 	orr.w	r2, r2, #1
 8002b3a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002b3c:	4b4c      	ldr	r3, [pc, #304]	; (8002c70 <HAL_ADC_Start+0x174>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a4c      	ldr	r2, [pc, #304]	; (8002c74 <HAL_ADC_Start+0x178>)
 8002b42:	fba2 2303 	umull	r2, r3, r2, r3
 8002b46:	0c9a      	lsrs	r2, r3, #18
 8002b48:	4613      	mov	r3, r2
 8002b4a:	005b      	lsls	r3, r3, #1
 8002b4c:	4413      	add	r3, r2
 8002b4e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002b50:	e002      	b.n	8002b58 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	3b01      	subs	r3, #1
 8002b56:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d1f9      	bne.n	8002b52 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f003 0301 	and.w	r3, r3, #1
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d179      	bne.n	8002c60 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b70:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002b74:	f023 0301 	bic.w	r3, r3, #1
 8002b78:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d007      	beq.n	8002b9e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b92:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002b96:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ba6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002baa:	d106      	bne.n	8002bba <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb0:	f023 0206 	bic.w	r2, r3, #6
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	645a      	str	r2, [r3, #68]	; 0x44
 8002bb8:	e002      	b.n	8002bc0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002bc8:	4b2b      	ldr	r3, [pc, #172]	; (8002c78 <HAL_ADC_Start+0x17c>)
 8002bca:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002bd4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f003 031f 	and.w	r3, r3, #31
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d12a      	bne.n	8002c38 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a25      	ldr	r2, [pc, #148]	; (8002c7c <HAL_ADC_Start+0x180>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d015      	beq.n	8002c18 <HAL_ADC_Start+0x11c>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a23      	ldr	r2, [pc, #140]	; (8002c80 <HAL_ADC_Start+0x184>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d105      	bne.n	8002c02 <HAL_ADC_Start+0x106>
 8002bf6:	4b20      	ldr	r3, [pc, #128]	; (8002c78 <HAL_ADC_Start+0x17c>)
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f003 031f 	and.w	r3, r3, #31
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d00a      	beq.n	8002c18 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a1f      	ldr	r2, [pc, #124]	; (8002c84 <HAL_ADC_Start+0x188>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d129      	bne.n	8002c60 <HAL_ADC_Start+0x164>
 8002c0c:	4b1a      	ldr	r3, [pc, #104]	; (8002c78 <HAL_ADC_Start+0x17c>)
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f003 031f 	and.w	r3, r3, #31
 8002c14:	2b0f      	cmp	r3, #15
 8002c16:	d823      	bhi.n	8002c60 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d11c      	bne.n	8002c60 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	689a      	ldr	r2, [r3, #8]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002c34:	609a      	str	r2, [r3, #8]
 8002c36:	e013      	b.n	8002c60 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a0f      	ldr	r2, [pc, #60]	; (8002c7c <HAL_ADC_Start+0x180>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d10e      	bne.n	8002c60 <HAL_ADC_Start+0x164>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d107      	bne.n	8002c60 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	689a      	ldr	r2, [r3, #8]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002c5e:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3714      	adds	r7, #20
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	20000008 	.word	0x20000008
 8002c74:	431bde83 	.word	0x431bde83
 8002c78:	40012300 	.word	0x40012300
 8002c7c:	40012000 	.word	0x40012000
 8002c80:	40012100 	.word	0x40012100
 8002c84:	40012200 	.word	0x40012200

08002c88 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002c92:	2300      	movs	r3, #0
 8002c94:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ca0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ca4:	d113      	bne.n	8002cce <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002cb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cb4:	d10b      	bne.n	8002cce <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cba:	f043 0220 	orr.w	r2, r3, #32
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e05c      	b.n	8002d88 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002cce:	f7ff fea3 	bl	8002a18 <HAL_GetTick>
 8002cd2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002cd4:	e01a      	b.n	8002d0c <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cdc:	d016      	beq.n	8002d0c <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d007      	beq.n	8002cf4 <HAL_ADC_PollForConversion+0x6c>
 8002ce4:	f7ff fe98 	bl	8002a18 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	683a      	ldr	r2, [r7, #0]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d20b      	bcs.n	8002d0c <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf8:	f043 0204 	orr.w	r2, r3, #4
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e03d      	b.n	8002d88 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0302 	and.w	r3, r3, #2
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d1dd      	bne.n	8002cd6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f06f 0212 	mvn.w	r2, #18
 8002d22:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d28:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d123      	bne.n	8002d86 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d11f      	bne.n	8002d86 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d4c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d006      	beq.n	8002d62 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d111      	bne.n	8002d86 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d105      	bne.n	8002d86 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7e:	f043 0201 	orr.w	r2, r3, #1
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002d86:	2300      	movs	r3, #0
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3710      	adds	r7, #16
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	60fb      	str	r3, [r7, #12]
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	bf0c      	ite	eq
 8002dae:	2301      	moveq	r3, #1
 8002db0:	2300      	movne	r3, #0
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f003 0320 	and.w	r3, r3, #32
 8002dc0:	2b20      	cmp	r3, #32
 8002dc2:	bf0c      	ite	eq
 8002dc4:	2301      	moveq	r3, #1
 8002dc6:	2300      	movne	r3, #0
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d049      	beq.n	8002e66 <HAL_ADC_IRQHandler+0xd6>
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d046      	beq.n	8002e66 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ddc:	f003 0310 	and.w	r3, r3, #16
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d105      	bne.n	8002df0 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d12b      	bne.n	8002e56 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d127      	bne.n	8002e56 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e0c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d006      	beq.n	8002e22 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d119      	bne.n	8002e56 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	685a      	ldr	r2, [r3, #4]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f022 0220 	bic.w	r2, r2, #32
 8002e30:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d105      	bne.n	8002e56 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4e:	f043 0201 	orr.w	r2, r3, #1
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f7fe fb16 	bl	8001488 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f06f 0212 	mvn.w	r2, #18
 8002e64:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0304 	and.w	r3, r3, #4
 8002e70:	2b04      	cmp	r3, #4
 8002e72:	bf0c      	ite	eq
 8002e74:	2301      	moveq	r3, #1
 8002e76:	2300      	movne	r3, #0
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e86:	2b80      	cmp	r3, #128	; 0x80
 8002e88:	bf0c      	ite	eq
 8002e8a:	2301      	moveq	r3, #1
 8002e8c:	2300      	movne	r3, #0
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d057      	beq.n	8002f48 <HAL_ADC_IRQHandler+0x1b8>
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d054      	beq.n	8002f48 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea2:	f003 0310 	and.w	r3, r3, #16
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d105      	bne.n	8002eb6 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eae:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d139      	bne.n	8002f38 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eca:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d006      	beq.n	8002ee0 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d12b      	bne.n	8002f38 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d124      	bne.n	8002f38 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d11d      	bne.n	8002f38 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d119      	bne.n	8002f38 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	685a      	ldr	r2, [r3, #4]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f12:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f18:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d105      	bne.n	8002f38 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f30:	f043 0201 	orr.w	r2, r3, #1
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f000 fc29 	bl	8003790 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f06f 020c 	mvn.w	r2, #12
 8002f46:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0301 	and.w	r3, r3, #1
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	bf0c      	ite	eq
 8002f56:	2301      	moveq	r3, #1
 8002f58:	2300      	movne	r3, #0
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f68:	2b40      	cmp	r3, #64	; 0x40
 8002f6a:	bf0c      	ite	eq
 8002f6c:	2301      	moveq	r3, #1
 8002f6e:	2300      	movne	r3, #0
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d017      	beq.n	8002faa <HAL_ADC_IRQHandler+0x21a>
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d014      	beq.n	8002faa <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d10d      	bne.n	8002faa <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f92:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 f943 	bl	8003226 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f06f 0201 	mvn.w	r2, #1
 8002fa8:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0320 	and.w	r3, r3, #32
 8002fb4:	2b20      	cmp	r3, #32
 8002fb6:	bf0c      	ite	eq
 8002fb8:	2301      	moveq	r3, #1
 8002fba:	2300      	movne	r3, #0
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002fca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fce:	bf0c      	ite	eq
 8002fd0:	2301      	moveq	r3, #1
 8002fd2:	2300      	movne	r3, #0
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d015      	beq.n	800300a <HAL_ADC_IRQHandler+0x27a>
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d012      	beq.n	800300a <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe8:	f043 0202 	orr.w	r2, r3, #2
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f06f 0220 	mvn.w	r2, #32
 8002ff8:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 f91d 	bl	800323a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f06f 0220 	mvn.w	r2, #32
 8003008:	601a      	str	r2, [r3, #0]
  }
}
 800300a:	bf00      	nop
 800300c:	3710      	adds	r7, #16
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
	...

08003014 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b086      	sub	sp, #24
 8003018:	af00      	add	r7, sp, #0
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	60b9      	str	r1, [r7, #8]
 800301e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003020:	2300      	movs	r3, #0
 8003022:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800302a:	2b01      	cmp	r3, #1
 800302c:	d101      	bne.n	8003032 <HAL_ADC_Start_DMA+0x1e>
 800302e:	2302      	movs	r3, #2
 8003030:	e0cc      	b.n	80031cc <HAL_ADC_Start_DMA+0x1b8>
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2201      	movs	r2, #1
 8003036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f003 0301 	and.w	r3, r3, #1
 8003044:	2b01      	cmp	r3, #1
 8003046:	d018      	beq.n	800307a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	689a      	ldr	r2, [r3, #8]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f042 0201 	orr.w	r2, r2, #1
 8003056:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003058:	4b5e      	ldr	r3, [pc, #376]	; (80031d4 <HAL_ADC_Start_DMA+0x1c0>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a5e      	ldr	r2, [pc, #376]	; (80031d8 <HAL_ADC_Start_DMA+0x1c4>)
 800305e:	fba2 2303 	umull	r2, r3, r2, r3
 8003062:	0c9a      	lsrs	r2, r3, #18
 8003064:	4613      	mov	r3, r2
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	4413      	add	r3, r2
 800306a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800306c:	e002      	b.n	8003074 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	3b01      	subs	r3, #1
 8003072:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1f9      	bne.n	800306e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f003 0301 	and.w	r3, r3, #1
 8003084:	2b01      	cmp	r3, #1
 8003086:	f040 80a0 	bne.w	80031ca <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003092:	f023 0301 	bic.w	r3, r3, #1
 8003096:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d007      	beq.n	80030bc <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80030b4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030c8:	d106      	bne.n	80030d8 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ce:	f023 0206 	bic.w	r2, r3, #6
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	645a      	str	r2, [r3, #68]	; 0x44
 80030d6:	e002      	b.n	80030de <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2200      	movs	r2, #0
 80030dc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030e6:	4b3d      	ldr	r3, [pc, #244]	; (80031dc <HAL_ADC_Start_DMA+0x1c8>)
 80030e8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ee:	4a3c      	ldr	r2, [pc, #240]	; (80031e0 <HAL_ADC_Start_DMA+0x1cc>)
 80030f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f6:	4a3b      	ldr	r2, [pc, #236]	; (80031e4 <HAL_ADC_Start_DMA+0x1d0>)
 80030f8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030fe:	4a3a      	ldr	r2, [pc, #232]	; (80031e8 <HAL_ADC_Start_DMA+0x1d4>)
 8003100:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800310a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	685a      	ldr	r2, [r3, #4]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800311a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	689a      	ldr	r2, [r3, #8]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800312a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	334c      	adds	r3, #76	; 0x4c
 8003136:	4619      	mov	r1, r3
 8003138:	68ba      	ldr	r2, [r7, #8]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f000 fcf2 	bl	8003b24 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f003 031f 	and.w	r3, r3, #31
 8003148:	2b00      	cmp	r3, #0
 800314a:	d12a      	bne.n	80031a2 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a26      	ldr	r2, [pc, #152]	; (80031ec <HAL_ADC_Start_DMA+0x1d8>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d015      	beq.n	8003182 <HAL_ADC_Start_DMA+0x16e>
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a25      	ldr	r2, [pc, #148]	; (80031f0 <HAL_ADC_Start_DMA+0x1dc>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d105      	bne.n	800316c <HAL_ADC_Start_DMA+0x158>
 8003160:	4b1e      	ldr	r3, [pc, #120]	; (80031dc <HAL_ADC_Start_DMA+0x1c8>)
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f003 031f 	and.w	r3, r3, #31
 8003168:	2b00      	cmp	r3, #0
 800316a:	d00a      	beq.n	8003182 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a20      	ldr	r2, [pc, #128]	; (80031f4 <HAL_ADC_Start_DMA+0x1e0>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d129      	bne.n	80031ca <HAL_ADC_Start_DMA+0x1b6>
 8003176:	4b19      	ldr	r3, [pc, #100]	; (80031dc <HAL_ADC_Start_DMA+0x1c8>)
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f003 031f 	and.w	r3, r3, #31
 800317e:	2b0f      	cmp	r3, #15
 8003180:	d823      	bhi.n	80031ca <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d11c      	bne.n	80031ca <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	689a      	ldr	r2, [r3, #8]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800319e:	609a      	str	r2, [r3, #8]
 80031a0:	e013      	b.n	80031ca <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a11      	ldr	r2, [pc, #68]	; (80031ec <HAL_ADC_Start_DMA+0x1d8>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d10e      	bne.n	80031ca <HAL_ADC_Start_DMA+0x1b6>
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d107      	bne.n	80031ca <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	689a      	ldr	r2, [r3, #8]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80031c8:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80031ca:	2300      	movs	r3, #0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3718      	adds	r7, #24
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	20000008 	.word	0x20000008
 80031d8:	431bde83 	.word	0x431bde83
 80031dc:	40012300 	.word	0x40012300
 80031e0:	0800368d 	.word	0x0800368d
 80031e4:	08003747 	.word	0x08003747
 80031e8:	08003763 	.word	0x08003763
 80031ec:	40012000 	.word	0x40012000
 80031f0:	40012100 	.word	0x40012100
 80031f4:	40012200 	.word	0x40012200

080031f8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003206:	4618      	mov	r0, r3
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr

08003212 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003212:	b480      	push	{r7}
 8003214:	b083      	sub	sp, #12
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800321a:	bf00      	nop
 800321c:	370c      	adds	r7, #12
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr

08003226 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003226:	b480      	push	{r7}
 8003228:	b083      	sub	sp, #12
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800322e:	bf00      	nop
 8003230:	370c      	adds	r7, #12
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr

0800323a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800323a:	b480      	push	{r7}
 800323c:	b083      	sub	sp, #12
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003242:	bf00      	nop
 8003244:	370c      	adds	r7, #12
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
	...

08003250 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003250:	b480      	push	{r7}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800325a:	2300      	movs	r3, #0
 800325c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003264:	2b01      	cmp	r3, #1
 8003266:	d101      	bne.n	800326c <HAL_ADC_ConfigChannel+0x1c>
 8003268:	2302      	movs	r3, #2
 800326a:	e105      	b.n	8003478 <HAL_ADC_ConfigChannel+0x228>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2b09      	cmp	r3, #9
 800327a:	d925      	bls.n	80032c8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	68d9      	ldr	r1, [r3, #12]
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	b29b      	uxth	r3, r3
 8003288:	461a      	mov	r2, r3
 800328a:	4613      	mov	r3, r2
 800328c:	005b      	lsls	r3, r3, #1
 800328e:	4413      	add	r3, r2
 8003290:	3b1e      	subs	r3, #30
 8003292:	2207      	movs	r2, #7
 8003294:	fa02 f303 	lsl.w	r3, r2, r3
 8003298:	43da      	mvns	r2, r3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	400a      	ands	r2, r1
 80032a0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68d9      	ldr	r1, [r3, #12]
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	689a      	ldr	r2, [r3, #8]
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	4618      	mov	r0, r3
 80032b4:	4603      	mov	r3, r0
 80032b6:	005b      	lsls	r3, r3, #1
 80032b8:	4403      	add	r3, r0
 80032ba:	3b1e      	subs	r3, #30
 80032bc:	409a      	lsls	r2, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	430a      	orrs	r2, r1
 80032c4:	60da      	str	r2, [r3, #12]
 80032c6:	e022      	b.n	800330e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	6919      	ldr	r1, [r3, #16]
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	461a      	mov	r2, r3
 80032d6:	4613      	mov	r3, r2
 80032d8:	005b      	lsls	r3, r3, #1
 80032da:	4413      	add	r3, r2
 80032dc:	2207      	movs	r2, #7
 80032de:	fa02 f303 	lsl.w	r3, r2, r3
 80032e2:	43da      	mvns	r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	400a      	ands	r2, r1
 80032ea:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	6919      	ldr	r1, [r3, #16]
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	689a      	ldr	r2, [r3, #8]
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	4618      	mov	r0, r3
 80032fe:	4603      	mov	r3, r0
 8003300:	005b      	lsls	r3, r3, #1
 8003302:	4403      	add	r3, r0
 8003304:	409a      	lsls	r2, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	430a      	orrs	r2, r1
 800330c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	2b06      	cmp	r3, #6
 8003314:	d824      	bhi.n	8003360 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	685a      	ldr	r2, [r3, #4]
 8003320:	4613      	mov	r3, r2
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	4413      	add	r3, r2
 8003326:	3b05      	subs	r3, #5
 8003328:	221f      	movs	r2, #31
 800332a:	fa02 f303 	lsl.w	r3, r2, r3
 800332e:	43da      	mvns	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	400a      	ands	r2, r1
 8003336:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	b29b      	uxth	r3, r3
 8003344:	4618      	mov	r0, r3
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	685a      	ldr	r2, [r3, #4]
 800334a:	4613      	mov	r3, r2
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	4413      	add	r3, r2
 8003350:	3b05      	subs	r3, #5
 8003352:	fa00 f203 	lsl.w	r2, r0, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	430a      	orrs	r2, r1
 800335c:	635a      	str	r2, [r3, #52]	; 0x34
 800335e:	e04c      	b.n	80033fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	2b0c      	cmp	r3, #12
 8003366:	d824      	bhi.n	80033b2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	685a      	ldr	r2, [r3, #4]
 8003372:	4613      	mov	r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	4413      	add	r3, r2
 8003378:	3b23      	subs	r3, #35	; 0x23
 800337a:	221f      	movs	r2, #31
 800337c:	fa02 f303 	lsl.w	r3, r2, r3
 8003380:	43da      	mvns	r2, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	400a      	ands	r2, r1
 8003388:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	b29b      	uxth	r3, r3
 8003396:	4618      	mov	r0, r3
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	685a      	ldr	r2, [r3, #4]
 800339c:	4613      	mov	r3, r2
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	4413      	add	r3, r2
 80033a2:	3b23      	subs	r3, #35	; 0x23
 80033a4:	fa00 f203 	lsl.w	r2, r0, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	430a      	orrs	r2, r1
 80033ae:	631a      	str	r2, [r3, #48]	; 0x30
 80033b0:	e023      	b.n	80033fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685a      	ldr	r2, [r3, #4]
 80033bc:	4613      	mov	r3, r2
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	4413      	add	r3, r2
 80033c2:	3b41      	subs	r3, #65	; 0x41
 80033c4:	221f      	movs	r2, #31
 80033c6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ca:	43da      	mvns	r2, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	400a      	ands	r2, r1
 80033d2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	b29b      	uxth	r3, r3
 80033e0:	4618      	mov	r0, r3
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	685a      	ldr	r2, [r3, #4]
 80033e6:	4613      	mov	r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	4413      	add	r3, r2
 80033ec:	3b41      	subs	r3, #65	; 0x41
 80033ee:	fa00 f203 	lsl.w	r2, r0, r3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	430a      	orrs	r2, r1
 80033f8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80033fa:	4b22      	ldr	r3, [pc, #136]	; (8003484 <HAL_ADC_ConfigChannel+0x234>)
 80033fc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a21      	ldr	r2, [pc, #132]	; (8003488 <HAL_ADC_ConfigChannel+0x238>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d109      	bne.n	800341c <HAL_ADC_ConfigChannel+0x1cc>
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2b12      	cmp	r3, #18
 800340e:	d105      	bne.n	800341c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a19      	ldr	r2, [pc, #100]	; (8003488 <HAL_ADC_ConfigChannel+0x238>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d123      	bne.n	800346e <HAL_ADC_ConfigChannel+0x21e>
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2b10      	cmp	r3, #16
 800342c:	d003      	beq.n	8003436 <HAL_ADC_ConfigChannel+0x1e6>
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2b11      	cmp	r3, #17
 8003434:	d11b      	bne.n	800346e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	2b10      	cmp	r3, #16
 8003448:	d111      	bne.n	800346e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800344a:	4b10      	ldr	r3, [pc, #64]	; (800348c <HAL_ADC_ConfigChannel+0x23c>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a10      	ldr	r2, [pc, #64]	; (8003490 <HAL_ADC_ConfigChannel+0x240>)
 8003450:	fba2 2303 	umull	r2, r3, r2, r3
 8003454:	0c9a      	lsrs	r2, r3, #18
 8003456:	4613      	mov	r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	4413      	add	r3, r2
 800345c:	005b      	lsls	r3, r3, #1
 800345e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003460:	e002      	b.n	8003468 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	3b01      	subs	r3, #1
 8003466:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1f9      	bne.n	8003462 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003476:	2300      	movs	r3, #0
}
 8003478:	4618      	mov	r0, r3
 800347a:	3714      	adds	r7, #20
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr
 8003484:	40012300 	.word	0x40012300
 8003488:	40012000 	.word	0x40012000
 800348c:	20000008 	.word	0x20000008
 8003490:	431bde83 	.word	0x431bde83

08003494 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003494:	b480      	push	{r7}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800349c:	4b79      	ldr	r3, [pc, #484]	; (8003684 <ADC_Init+0x1f0>)
 800349e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	685a      	ldr	r2, [r3, #4]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	431a      	orrs	r2, r3
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	685a      	ldr	r2, [r3, #4]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	6859      	ldr	r1, [r3, #4]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	691b      	ldr	r3, [r3, #16]
 80034d4:	021a      	lsls	r2, r3, #8
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	430a      	orrs	r2, r1
 80034dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	685a      	ldr	r2, [r3, #4]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80034ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	6859      	ldr	r1, [r3, #4]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	689a      	ldr	r2, [r3, #8]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	430a      	orrs	r2, r1
 80034fe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	689a      	ldr	r2, [r3, #8]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800350e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	6899      	ldr	r1, [r3, #8]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	68da      	ldr	r2, [r3, #12]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	430a      	orrs	r2, r1
 8003520:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003526:	4a58      	ldr	r2, [pc, #352]	; (8003688 <ADC_Init+0x1f4>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d022      	beq.n	8003572 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	689a      	ldr	r2, [r3, #8]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800353a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	6899      	ldr	r1, [r3, #8]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	430a      	orrs	r2, r1
 800354c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	689a      	ldr	r2, [r3, #8]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800355c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	6899      	ldr	r1, [r3, #8]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	430a      	orrs	r2, r1
 800356e:	609a      	str	r2, [r3, #8]
 8003570:	e00f      	b.n	8003592 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	689a      	ldr	r2, [r3, #8]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003580:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	689a      	ldr	r2, [r3, #8]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003590:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	689a      	ldr	r2, [r3, #8]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f022 0202 	bic.w	r2, r2, #2
 80035a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	6899      	ldr	r1, [r3, #8]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	7e1b      	ldrb	r3, [r3, #24]
 80035ac:	005a      	lsls	r2, r3, #1
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	430a      	orrs	r2, r1
 80035b4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d01b      	beq.n	80035f8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	685a      	ldr	r2, [r3, #4]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035ce:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	685a      	ldr	r2, [r3, #4]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80035de:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	6859      	ldr	r1, [r3, #4]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ea:	3b01      	subs	r3, #1
 80035ec:	035a      	lsls	r2, r3, #13
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	430a      	orrs	r2, r1
 80035f4:	605a      	str	r2, [r3, #4]
 80035f6:	e007      	b.n	8003608 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	685a      	ldr	r2, [r3, #4]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003606:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003616:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	69db      	ldr	r3, [r3, #28]
 8003622:	3b01      	subs	r3, #1
 8003624:	051a      	lsls	r2, r3, #20
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	430a      	orrs	r2, r1
 800362c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	689a      	ldr	r2, [r3, #8]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800363c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	6899      	ldr	r1, [r3, #8]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800364a:	025a      	lsls	r2, r3, #9
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	430a      	orrs	r2, r1
 8003652:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	689a      	ldr	r2, [r3, #8]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003662:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	6899      	ldr	r1, [r3, #8]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	695b      	ldr	r3, [r3, #20]
 800366e:	029a      	lsls	r2, r3, #10
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	430a      	orrs	r2, r1
 8003676:	609a      	str	r2, [r3, #8]
}
 8003678:	bf00      	nop
 800367a:	3714      	adds	r7, #20
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr
 8003684:	40012300 	.word	0x40012300
 8003688:	0f000001 	.word	0x0f000001

0800368c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003698:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d13c      	bne.n	8003720 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036aa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d12b      	bne.n	8003718 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d127      	bne.n	8003718 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ce:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d006      	beq.n	80036e4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d119      	bne.n	8003718 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	685a      	ldr	r2, [r3, #4]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f022 0220 	bic.w	r2, r2, #32
 80036f2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003704:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d105      	bne.n	8003718 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003710:	f043 0201 	orr.w	r2, r3, #1
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003718:	68f8      	ldr	r0, [r7, #12]
 800371a:	f7fd feb5 	bl	8001488 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800371e:	e00e      	b.n	800373e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003724:	f003 0310 	and.w	r3, r3, #16
 8003728:	2b00      	cmp	r3, #0
 800372a:	d003      	beq.n	8003734 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800372c:	68f8      	ldr	r0, [r7, #12]
 800372e:	f7ff fd84 	bl	800323a <HAL_ADC_ErrorCallback>
}
 8003732:	e004      	b.n	800373e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	4798      	blx	r3
}
 800373e:	bf00      	nop
 8003740:	3710      	adds	r7, #16
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}

08003746 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003746:	b580      	push	{r7, lr}
 8003748:	b084      	sub	sp, #16
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003752:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003754:	68f8      	ldr	r0, [r7, #12]
 8003756:	f7ff fd5c 	bl	8003212 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800375a:	bf00      	nop
 800375c:	3710      	adds	r7, #16
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}

08003762 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003762:	b580      	push	{r7, lr}
 8003764:	b084      	sub	sp, #16
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800376e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2240      	movs	r2, #64	; 0x40
 8003774:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800377a:	f043 0204 	orr.w	r2, r3, #4
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003782:	68f8      	ldr	r0, [r7, #12]
 8003784:	f7ff fd59 	bl	800323a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003788:	bf00      	nop
 800378a:	3710      	adds	r7, #16
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003798:	bf00      	nop
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b085      	sub	sp, #20
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f003 0307 	and.w	r3, r3, #7
 80037b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037b4:	4b0c      	ldr	r3, [pc, #48]	; (80037e8 <__NVIC_SetPriorityGrouping+0x44>)
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037ba:	68ba      	ldr	r2, [r7, #8]
 80037bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037c0:	4013      	ands	r3, r2
 80037c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037d6:	4a04      	ldr	r2, [pc, #16]	; (80037e8 <__NVIC_SetPriorityGrouping+0x44>)
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	60d3      	str	r3, [r2, #12]
}
 80037dc:	bf00      	nop
 80037de:	3714      	adds	r7, #20
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr
 80037e8:	e000ed00 	.word	0xe000ed00

080037ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037ec:	b480      	push	{r7}
 80037ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037f0:	4b04      	ldr	r3, [pc, #16]	; (8003804 <__NVIC_GetPriorityGrouping+0x18>)
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	0a1b      	lsrs	r3, r3, #8
 80037f6:	f003 0307 	and.w	r3, r3, #7
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr
 8003804:	e000ed00 	.word	0xe000ed00

08003808 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	4603      	mov	r3, r0
 8003810:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003816:	2b00      	cmp	r3, #0
 8003818:	db0b      	blt.n	8003832 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800381a:	79fb      	ldrb	r3, [r7, #7]
 800381c:	f003 021f 	and.w	r2, r3, #31
 8003820:	4907      	ldr	r1, [pc, #28]	; (8003840 <__NVIC_EnableIRQ+0x38>)
 8003822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003826:	095b      	lsrs	r3, r3, #5
 8003828:	2001      	movs	r0, #1
 800382a:	fa00 f202 	lsl.w	r2, r0, r2
 800382e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003832:	bf00      	nop
 8003834:	370c      	adds	r7, #12
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	e000e100 	.word	0xe000e100

08003844 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	4603      	mov	r3, r0
 800384c:	6039      	str	r1, [r7, #0]
 800384e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003854:	2b00      	cmp	r3, #0
 8003856:	db0a      	blt.n	800386e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	b2da      	uxtb	r2, r3
 800385c:	490c      	ldr	r1, [pc, #48]	; (8003890 <__NVIC_SetPriority+0x4c>)
 800385e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003862:	0112      	lsls	r2, r2, #4
 8003864:	b2d2      	uxtb	r2, r2
 8003866:	440b      	add	r3, r1
 8003868:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800386c:	e00a      	b.n	8003884 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	b2da      	uxtb	r2, r3
 8003872:	4908      	ldr	r1, [pc, #32]	; (8003894 <__NVIC_SetPriority+0x50>)
 8003874:	79fb      	ldrb	r3, [r7, #7]
 8003876:	f003 030f 	and.w	r3, r3, #15
 800387a:	3b04      	subs	r3, #4
 800387c:	0112      	lsls	r2, r2, #4
 800387e:	b2d2      	uxtb	r2, r2
 8003880:	440b      	add	r3, r1
 8003882:	761a      	strb	r2, [r3, #24]
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr
 8003890:	e000e100 	.word	0xe000e100
 8003894:	e000ed00 	.word	0xe000ed00

08003898 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003898:	b480      	push	{r7}
 800389a:	b089      	sub	sp, #36	; 0x24
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f003 0307 	and.w	r3, r3, #7
 80038aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	f1c3 0307 	rsb	r3, r3, #7
 80038b2:	2b04      	cmp	r3, #4
 80038b4:	bf28      	it	cs
 80038b6:	2304      	movcs	r3, #4
 80038b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	3304      	adds	r3, #4
 80038be:	2b06      	cmp	r3, #6
 80038c0:	d902      	bls.n	80038c8 <NVIC_EncodePriority+0x30>
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	3b03      	subs	r3, #3
 80038c6:	e000      	b.n	80038ca <NVIC_EncodePriority+0x32>
 80038c8:	2300      	movs	r3, #0
 80038ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038cc:	f04f 32ff 	mov.w	r2, #4294967295
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	fa02 f303 	lsl.w	r3, r2, r3
 80038d6:	43da      	mvns	r2, r3
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	401a      	ands	r2, r3
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038e0:	f04f 31ff 	mov.w	r1, #4294967295
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	fa01 f303 	lsl.w	r3, r1, r3
 80038ea:	43d9      	mvns	r1, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038f0:	4313      	orrs	r3, r2
         );
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3724      	adds	r7, #36	; 0x24
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
	...

08003900 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	3b01      	subs	r3, #1
 800390c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003910:	d301      	bcc.n	8003916 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003912:	2301      	movs	r3, #1
 8003914:	e00f      	b.n	8003936 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003916:	4a0a      	ldr	r2, [pc, #40]	; (8003940 <SysTick_Config+0x40>)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	3b01      	subs	r3, #1
 800391c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800391e:	210f      	movs	r1, #15
 8003920:	f04f 30ff 	mov.w	r0, #4294967295
 8003924:	f7ff ff8e 	bl	8003844 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003928:	4b05      	ldr	r3, [pc, #20]	; (8003940 <SysTick_Config+0x40>)
 800392a:	2200      	movs	r2, #0
 800392c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800392e:	4b04      	ldr	r3, [pc, #16]	; (8003940 <SysTick_Config+0x40>)
 8003930:	2207      	movs	r2, #7
 8003932:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	3708      	adds	r7, #8
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	e000e010 	.word	0xe000e010

08003944 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f7ff ff29 	bl	80037a4 <__NVIC_SetPriorityGrouping>
}
 8003952:	bf00      	nop
 8003954:	3708      	adds	r7, #8
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}

0800395a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800395a:	b580      	push	{r7, lr}
 800395c:	b086      	sub	sp, #24
 800395e:	af00      	add	r7, sp, #0
 8003960:	4603      	mov	r3, r0
 8003962:	60b9      	str	r1, [r7, #8]
 8003964:	607a      	str	r2, [r7, #4]
 8003966:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003968:	2300      	movs	r3, #0
 800396a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800396c:	f7ff ff3e 	bl	80037ec <__NVIC_GetPriorityGrouping>
 8003970:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	68b9      	ldr	r1, [r7, #8]
 8003976:	6978      	ldr	r0, [r7, #20]
 8003978:	f7ff ff8e 	bl	8003898 <NVIC_EncodePriority>
 800397c:	4602      	mov	r2, r0
 800397e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003982:	4611      	mov	r1, r2
 8003984:	4618      	mov	r0, r3
 8003986:	f7ff ff5d 	bl	8003844 <__NVIC_SetPriority>
}
 800398a:	bf00      	nop
 800398c:	3718      	adds	r7, #24
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}

08003992 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003992:	b580      	push	{r7, lr}
 8003994:	b082      	sub	sp, #8
 8003996:	af00      	add	r7, sp, #0
 8003998:	4603      	mov	r3, r0
 800399a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800399c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039a0:	4618      	mov	r0, r3
 80039a2:	f7ff ff31 	bl	8003808 <__NVIC_EnableIRQ>
}
 80039a6:	bf00      	nop
 80039a8:	3708      	adds	r7, #8
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}

080039ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039ae:	b580      	push	{r7, lr}
 80039b0:	b082      	sub	sp, #8
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f7ff ffa2 	bl	8003900 <SysTick_Config>
 80039bc:	4603      	mov	r3, r0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3708      	adds	r7, #8
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
	...

080039c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b086      	sub	sp, #24
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80039d0:	2300      	movs	r3, #0
 80039d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80039d4:	f7ff f820 	bl	8002a18 <HAL_GetTick>
 80039d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d101      	bne.n	80039e4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e099      	b.n	8003b18 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2202      	movs	r2, #2
 80039f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f022 0201 	bic.w	r2, r2, #1
 8003a02:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a04:	e00f      	b.n	8003a26 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a06:	f7ff f807 	bl	8002a18 <HAL_GetTick>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	2b05      	cmp	r3, #5
 8003a12:	d908      	bls.n	8003a26 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2220      	movs	r2, #32
 8003a18:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2203      	movs	r2, #3
 8003a1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e078      	b.n	8003b18 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0301 	and.w	r3, r3, #1
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d1e8      	bne.n	8003a06 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003a3c:	697a      	ldr	r2, [r7, #20]
 8003a3e:	4b38      	ldr	r3, [pc, #224]	; (8003b20 <HAL_DMA_Init+0x158>)
 8003a40:	4013      	ands	r3, r2
 8003a42:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685a      	ldr	r2, [r3, #4]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a52:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	691b      	ldr	r3, [r3, #16]
 8003a58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	699b      	ldr	r3, [r3, #24]
 8003a64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a1b      	ldr	r3, [r3, #32]
 8003a70:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a72:	697a      	ldr	r2, [r7, #20]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7c:	2b04      	cmp	r3, #4
 8003a7e:	d107      	bne.n	8003a90 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	697a      	ldr	r2, [r7, #20]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	697a      	ldr	r2, [r7, #20]
 8003a96:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	695b      	ldr	r3, [r3, #20]
 8003a9e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	f023 0307 	bic.w	r3, r3, #7
 8003aa6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aac:	697a      	ldr	r2, [r7, #20]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab6:	2b04      	cmp	r3, #4
 8003ab8:	d117      	bne.n	8003aea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003abe:	697a      	ldr	r2, [r7, #20]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d00e      	beq.n	8003aea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f000 fa91 	bl	8003ff4 <DMA_CheckFifoParam>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d008      	beq.n	8003aea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2240      	movs	r2, #64	; 0x40
 8003adc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e016      	b.n	8003b18 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	697a      	ldr	r2, [r7, #20]
 8003af0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 fa48 	bl	8003f88 <DMA_CalcBaseAndBitshift>
 8003af8:	4603      	mov	r3, r0
 8003afa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b00:	223f      	movs	r2, #63	; 0x3f
 8003b02:	409a      	lsls	r2, r3
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2201      	movs	r2, #1
 8003b12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003b16:	2300      	movs	r3, #0
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3718      	adds	r7, #24
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	f010803f 	.word	0xf010803f

08003b24 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b086      	sub	sp, #24
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	607a      	str	r2, [r7, #4]
 8003b30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b32:	2300      	movs	r3, #0
 8003b34:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b3a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d101      	bne.n	8003b4a <HAL_DMA_Start_IT+0x26>
 8003b46:	2302      	movs	r3, #2
 8003b48:	e040      	b.n	8003bcc <HAL_DMA_Start_IT+0xa8>
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d12f      	bne.n	8003bbe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2202      	movs	r2, #2
 8003b62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	68b9      	ldr	r1, [r7, #8]
 8003b72:	68f8      	ldr	r0, [r7, #12]
 8003b74:	f000 f9da 	bl	8003f2c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b7c:	223f      	movs	r2, #63	; 0x3f
 8003b7e:	409a      	lsls	r2, r3
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f042 0216 	orr.w	r2, r2, #22
 8003b92:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d007      	beq.n	8003bac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f042 0208 	orr.w	r2, r2, #8
 8003baa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f042 0201 	orr.w	r2, r2, #1
 8003bba:	601a      	str	r2, [r3, #0]
 8003bbc:	e005      	b.n	8003bca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003bc6:	2302      	movs	r3, #2
 8003bc8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003bca:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3718      	adds	r7, #24
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d004      	beq.n	8003bf2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2280      	movs	r2, #128	; 0x80
 8003bec:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e00c      	b.n	8003c0c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2205      	movs	r2, #5
 8003bf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f022 0201 	bic.w	r2, r2, #1
 8003c08:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	370c      	adds	r7, #12
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b086      	sub	sp, #24
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003c20:	2300      	movs	r3, #0
 8003c22:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003c24:	4b92      	ldr	r3, [pc, #584]	; (8003e70 <HAL_DMA_IRQHandler+0x258>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a92      	ldr	r2, [pc, #584]	; (8003e74 <HAL_DMA_IRQHandler+0x25c>)
 8003c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c2e:	0a9b      	lsrs	r3, r3, #10
 8003c30:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c36:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c42:	2208      	movs	r2, #8
 8003c44:	409a      	lsls	r2, r3
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	4013      	ands	r3, r2
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d01a      	beq.n	8003c84 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0304 	and.w	r3, r3, #4
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d013      	beq.n	8003c84 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f022 0204 	bic.w	r2, r2, #4
 8003c6a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c70:	2208      	movs	r2, #8
 8003c72:	409a      	lsls	r2, r3
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c7c:	f043 0201 	orr.w	r2, r3, #1
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c88:	2201      	movs	r2, #1
 8003c8a:	409a      	lsls	r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	4013      	ands	r3, r2
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d012      	beq.n	8003cba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	695b      	ldr	r3, [r3, #20]
 8003c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00b      	beq.n	8003cba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	409a      	lsls	r2, r3
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cb2:	f043 0202 	orr.w	r2, r3, #2
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cbe:	2204      	movs	r2, #4
 8003cc0:	409a      	lsls	r2, r3
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d012      	beq.n	8003cf0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0302 	and.w	r3, r3, #2
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d00b      	beq.n	8003cf0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cdc:	2204      	movs	r2, #4
 8003cde:	409a      	lsls	r2, r3
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ce8:	f043 0204 	orr.w	r2, r3, #4
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cf4:	2210      	movs	r2, #16
 8003cf6:	409a      	lsls	r2, r3
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d043      	beq.n	8003d88 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0308 	and.w	r3, r3, #8
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d03c      	beq.n	8003d88 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d12:	2210      	movs	r2, #16
 8003d14:	409a      	lsls	r2, r3
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d018      	beq.n	8003d5a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d108      	bne.n	8003d48 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d024      	beq.n	8003d88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	4798      	blx	r3
 8003d46:	e01f      	b.n	8003d88 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d01b      	beq.n	8003d88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	4798      	blx	r3
 8003d58:	e016      	b.n	8003d88 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d107      	bne.n	8003d78 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f022 0208 	bic.w	r2, r2, #8
 8003d76:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d003      	beq.n	8003d88 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d8c:	2220      	movs	r2, #32
 8003d8e:	409a      	lsls	r2, r3
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	4013      	ands	r3, r2
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	f000 808e 	beq.w	8003eb6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0310 	and.w	r3, r3, #16
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	f000 8086 	beq.w	8003eb6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dae:	2220      	movs	r2, #32
 8003db0:	409a      	lsls	r2, r3
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	2b05      	cmp	r3, #5
 8003dc0:	d136      	bne.n	8003e30 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f022 0216 	bic.w	r2, r2, #22
 8003dd0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	695a      	ldr	r2, [r3, #20]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003de0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d103      	bne.n	8003df2 <HAL_DMA_IRQHandler+0x1da>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d007      	beq.n	8003e02 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f022 0208 	bic.w	r2, r2, #8
 8003e00:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e06:	223f      	movs	r2, #63	; 0x3f
 8003e08:	409a      	lsls	r2, r3
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d07d      	beq.n	8003f22 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	4798      	blx	r3
        }
        return;
 8003e2e:	e078      	b.n	8003f22 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d01c      	beq.n	8003e78 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d108      	bne.n	8003e5e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d030      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	4798      	blx	r3
 8003e5c:	e02b      	b.n	8003eb6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d027      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	4798      	blx	r3
 8003e6e:	e022      	b.n	8003eb6 <HAL_DMA_IRQHandler+0x29e>
 8003e70:	20000008 	.word	0x20000008
 8003e74:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d10f      	bne.n	8003ea6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f022 0210 	bic.w	r2, r2, #16
 8003e94:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d003      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d032      	beq.n	8003f24 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ec2:	f003 0301 	and.w	r3, r3, #1
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d022      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2205      	movs	r2, #5
 8003ece:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f022 0201 	bic.w	r2, r2, #1
 8003ee0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	3301      	adds	r3, #1
 8003ee6:	60bb      	str	r3, [r7, #8]
 8003ee8:	697a      	ldr	r2, [r7, #20]
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d307      	bcc.n	8003efe <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0301 	and.w	r3, r3, #1
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d1f2      	bne.n	8003ee2 <HAL_DMA_IRQHandler+0x2ca>
 8003efc:	e000      	b.n	8003f00 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003efe:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d005      	beq.n	8003f24 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	4798      	blx	r3
 8003f20:	e000      	b.n	8003f24 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003f22:	bf00      	nop
    }
  }
}
 8003f24:	3718      	adds	r7, #24
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop

08003f2c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b085      	sub	sp, #20
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	607a      	str	r2, [r7, #4]
 8003f38:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003f48:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	683a      	ldr	r2, [r7, #0]
 8003f50:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	2b40      	cmp	r3, #64	; 0x40
 8003f58:	d108      	bne.n	8003f6c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68ba      	ldr	r2, [r7, #8]
 8003f68:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003f6a:	e007      	b.n	8003f7c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	68ba      	ldr	r2, [r7, #8]
 8003f72:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	60da      	str	r2, [r3, #12]
}
 8003f7c:	bf00      	nop
 8003f7e:	3714      	adds	r7, #20
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b085      	sub	sp, #20
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	3b10      	subs	r3, #16
 8003f98:	4a14      	ldr	r2, [pc, #80]	; (8003fec <DMA_CalcBaseAndBitshift+0x64>)
 8003f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f9e:	091b      	lsrs	r3, r3, #4
 8003fa0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003fa2:	4a13      	ldr	r2, [pc, #76]	; (8003ff0 <DMA_CalcBaseAndBitshift+0x68>)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	4413      	add	r3, r2
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	461a      	mov	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2b03      	cmp	r3, #3
 8003fb4:	d909      	bls.n	8003fca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003fbe:	f023 0303 	bic.w	r3, r3, #3
 8003fc2:	1d1a      	adds	r2, r3, #4
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	659a      	str	r2, [r3, #88]	; 0x58
 8003fc8:	e007      	b.n	8003fda <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003fd2:	f023 0303 	bic.w	r3, r3, #3
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3714      	adds	r7, #20
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	aaaaaaab 	.word	0xaaaaaaab
 8003ff0:	08009930 	.word	0x08009930

08003ff4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b085      	sub	sp, #20
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004004:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d11f      	bne.n	800404e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	2b03      	cmp	r3, #3
 8004012:	d855      	bhi.n	80040c0 <DMA_CheckFifoParam+0xcc>
 8004014:	a201      	add	r2, pc, #4	; (adr r2, 800401c <DMA_CheckFifoParam+0x28>)
 8004016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800401a:	bf00      	nop
 800401c:	0800402d 	.word	0x0800402d
 8004020:	0800403f 	.word	0x0800403f
 8004024:	0800402d 	.word	0x0800402d
 8004028:	080040c1 	.word	0x080040c1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004030:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d045      	beq.n	80040c4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800403c:	e042      	b.n	80040c4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004042:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004046:	d13f      	bne.n	80040c8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800404c:	e03c      	b.n	80040c8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004056:	d121      	bne.n	800409c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	2b03      	cmp	r3, #3
 800405c:	d836      	bhi.n	80040cc <DMA_CheckFifoParam+0xd8>
 800405e:	a201      	add	r2, pc, #4	; (adr r2, 8004064 <DMA_CheckFifoParam+0x70>)
 8004060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004064:	08004075 	.word	0x08004075
 8004068:	0800407b 	.word	0x0800407b
 800406c:	08004075 	.word	0x08004075
 8004070:	0800408d 	.word	0x0800408d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	73fb      	strb	r3, [r7, #15]
      break;
 8004078:	e02f      	b.n	80040da <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800407e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d024      	beq.n	80040d0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800408a:	e021      	b.n	80040d0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004090:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004094:	d11e      	bne.n	80040d4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800409a:	e01b      	b.n	80040d4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d902      	bls.n	80040a8 <DMA_CheckFifoParam+0xb4>
 80040a2:	2b03      	cmp	r3, #3
 80040a4:	d003      	beq.n	80040ae <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80040a6:	e018      	b.n	80040da <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	73fb      	strb	r3, [r7, #15]
      break;
 80040ac:	e015      	b.n	80040da <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00e      	beq.n	80040d8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	73fb      	strb	r3, [r7, #15]
      break;
 80040be:	e00b      	b.n	80040d8 <DMA_CheckFifoParam+0xe4>
      break;
 80040c0:	bf00      	nop
 80040c2:	e00a      	b.n	80040da <DMA_CheckFifoParam+0xe6>
      break;
 80040c4:	bf00      	nop
 80040c6:	e008      	b.n	80040da <DMA_CheckFifoParam+0xe6>
      break;
 80040c8:	bf00      	nop
 80040ca:	e006      	b.n	80040da <DMA_CheckFifoParam+0xe6>
      break;
 80040cc:	bf00      	nop
 80040ce:	e004      	b.n	80040da <DMA_CheckFifoParam+0xe6>
      break;
 80040d0:	bf00      	nop
 80040d2:	e002      	b.n	80040da <DMA_CheckFifoParam+0xe6>
      break;   
 80040d4:	bf00      	nop
 80040d6:	e000      	b.n	80040da <DMA_CheckFifoParam+0xe6>
      break;
 80040d8:	bf00      	nop
    }
  } 
  
  return status; 
 80040da:	7bfb      	ldrb	r3, [r7, #15]
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3714      	adds	r7, #20
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr

080040e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b089      	sub	sp, #36	; 0x24
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80040f2:	2300      	movs	r3, #0
 80040f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80040f6:	2300      	movs	r3, #0
 80040f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80040fa:	2300      	movs	r3, #0
 80040fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040fe:	2300      	movs	r3, #0
 8004100:	61fb      	str	r3, [r7, #28]
 8004102:	e16b      	b.n	80043dc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004104:	2201      	movs	r2, #1
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	fa02 f303 	lsl.w	r3, r2, r3
 800410c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	697a      	ldr	r2, [r7, #20]
 8004114:	4013      	ands	r3, r2
 8004116:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004118:	693a      	ldr	r2, [r7, #16]
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	429a      	cmp	r2, r3
 800411e:	f040 815a 	bne.w	80043d6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	2b01      	cmp	r3, #1
 8004128:	d00b      	beq.n	8004142 <HAL_GPIO_Init+0x5a>
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	2b02      	cmp	r3, #2
 8004130:	d007      	beq.n	8004142 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004136:	2b11      	cmp	r3, #17
 8004138:	d003      	beq.n	8004142 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	2b12      	cmp	r3, #18
 8004140:	d130      	bne.n	80041a4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004148:	69fb      	ldr	r3, [r7, #28]
 800414a:	005b      	lsls	r3, r3, #1
 800414c:	2203      	movs	r2, #3
 800414e:	fa02 f303 	lsl.w	r3, r2, r3
 8004152:	43db      	mvns	r3, r3
 8004154:	69ba      	ldr	r2, [r7, #24]
 8004156:	4013      	ands	r3, r2
 8004158:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	68da      	ldr	r2, [r3, #12]
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	005b      	lsls	r3, r3, #1
 8004162:	fa02 f303 	lsl.w	r3, r2, r3
 8004166:	69ba      	ldr	r2, [r7, #24]
 8004168:	4313      	orrs	r3, r2
 800416a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	69ba      	ldr	r2, [r7, #24]
 8004170:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004178:	2201      	movs	r2, #1
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	fa02 f303 	lsl.w	r3, r2, r3
 8004180:	43db      	mvns	r3, r3
 8004182:	69ba      	ldr	r2, [r7, #24]
 8004184:	4013      	ands	r3, r2
 8004186:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	091b      	lsrs	r3, r3, #4
 800418e:	f003 0201 	and.w	r2, r3, #1
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	fa02 f303 	lsl.w	r3, r2, r3
 8004198:	69ba      	ldr	r2, [r7, #24]
 800419a:	4313      	orrs	r3, r2
 800419c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	69ba      	ldr	r2, [r7, #24]
 80041a2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	005b      	lsls	r3, r3, #1
 80041ae:	2203      	movs	r2, #3
 80041b0:	fa02 f303 	lsl.w	r3, r2, r3
 80041b4:	43db      	mvns	r3, r3
 80041b6:	69ba      	ldr	r2, [r7, #24]
 80041b8:	4013      	ands	r3, r2
 80041ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	689a      	ldr	r2, [r3, #8]
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	005b      	lsls	r3, r3, #1
 80041c4:	fa02 f303 	lsl.w	r3, r2, r3
 80041c8:	69ba      	ldr	r2, [r7, #24]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	69ba      	ldr	r2, [r7, #24]
 80041d2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	2b02      	cmp	r3, #2
 80041da:	d003      	beq.n	80041e4 <HAL_GPIO_Init+0xfc>
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	2b12      	cmp	r3, #18
 80041e2:	d123      	bne.n	800422c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	08da      	lsrs	r2, r3, #3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	3208      	adds	r2, #8
 80041ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	f003 0307 	and.w	r3, r3, #7
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	220f      	movs	r2, #15
 80041fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004200:	43db      	mvns	r3, r3
 8004202:	69ba      	ldr	r2, [r7, #24]
 8004204:	4013      	ands	r3, r2
 8004206:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	691a      	ldr	r2, [r3, #16]
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	f003 0307 	and.w	r3, r3, #7
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	fa02 f303 	lsl.w	r3, r2, r3
 8004218:	69ba      	ldr	r2, [r7, #24]
 800421a:	4313      	orrs	r3, r2
 800421c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	08da      	lsrs	r2, r3, #3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	3208      	adds	r2, #8
 8004226:	69b9      	ldr	r1, [r7, #24]
 8004228:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	005b      	lsls	r3, r3, #1
 8004236:	2203      	movs	r2, #3
 8004238:	fa02 f303 	lsl.w	r3, r2, r3
 800423c:	43db      	mvns	r3, r3
 800423e:	69ba      	ldr	r2, [r7, #24]
 8004240:	4013      	ands	r3, r2
 8004242:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f003 0203 	and.w	r2, r3, #3
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	005b      	lsls	r3, r3, #1
 8004250:	fa02 f303 	lsl.w	r3, r2, r3
 8004254:	69ba      	ldr	r2, [r7, #24]
 8004256:	4313      	orrs	r3, r2
 8004258:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	69ba      	ldr	r2, [r7, #24]
 800425e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004268:	2b00      	cmp	r3, #0
 800426a:	f000 80b4 	beq.w	80043d6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800426e:	2300      	movs	r3, #0
 8004270:	60fb      	str	r3, [r7, #12]
 8004272:	4b5f      	ldr	r3, [pc, #380]	; (80043f0 <HAL_GPIO_Init+0x308>)
 8004274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004276:	4a5e      	ldr	r2, [pc, #376]	; (80043f0 <HAL_GPIO_Init+0x308>)
 8004278:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800427c:	6453      	str	r3, [r2, #68]	; 0x44
 800427e:	4b5c      	ldr	r3, [pc, #368]	; (80043f0 <HAL_GPIO_Init+0x308>)
 8004280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004282:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004286:	60fb      	str	r3, [r7, #12]
 8004288:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800428a:	4a5a      	ldr	r2, [pc, #360]	; (80043f4 <HAL_GPIO_Init+0x30c>)
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	089b      	lsrs	r3, r3, #2
 8004290:	3302      	adds	r3, #2
 8004292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004296:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	f003 0303 	and.w	r3, r3, #3
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	220f      	movs	r2, #15
 80042a2:	fa02 f303 	lsl.w	r3, r2, r3
 80042a6:	43db      	mvns	r3, r3
 80042a8:	69ba      	ldr	r2, [r7, #24]
 80042aa:	4013      	ands	r3, r2
 80042ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a51      	ldr	r2, [pc, #324]	; (80043f8 <HAL_GPIO_Init+0x310>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d02b      	beq.n	800430e <HAL_GPIO_Init+0x226>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a50      	ldr	r2, [pc, #320]	; (80043fc <HAL_GPIO_Init+0x314>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d025      	beq.n	800430a <HAL_GPIO_Init+0x222>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a4f      	ldr	r2, [pc, #316]	; (8004400 <HAL_GPIO_Init+0x318>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d01f      	beq.n	8004306 <HAL_GPIO_Init+0x21e>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a4e      	ldr	r2, [pc, #312]	; (8004404 <HAL_GPIO_Init+0x31c>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d019      	beq.n	8004302 <HAL_GPIO_Init+0x21a>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a4d      	ldr	r2, [pc, #308]	; (8004408 <HAL_GPIO_Init+0x320>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d013      	beq.n	80042fe <HAL_GPIO_Init+0x216>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a4c      	ldr	r2, [pc, #304]	; (800440c <HAL_GPIO_Init+0x324>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d00d      	beq.n	80042fa <HAL_GPIO_Init+0x212>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a4b      	ldr	r2, [pc, #300]	; (8004410 <HAL_GPIO_Init+0x328>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d007      	beq.n	80042f6 <HAL_GPIO_Init+0x20e>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a4a      	ldr	r2, [pc, #296]	; (8004414 <HAL_GPIO_Init+0x32c>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d101      	bne.n	80042f2 <HAL_GPIO_Init+0x20a>
 80042ee:	2307      	movs	r3, #7
 80042f0:	e00e      	b.n	8004310 <HAL_GPIO_Init+0x228>
 80042f2:	2308      	movs	r3, #8
 80042f4:	e00c      	b.n	8004310 <HAL_GPIO_Init+0x228>
 80042f6:	2306      	movs	r3, #6
 80042f8:	e00a      	b.n	8004310 <HAL_GPIO_Init+0x228>
 80042fa:	2305      	movs	r3, #5
 80042fc:	e008      	b.n	8004310 <HAL_GPIO_Init+0x228>
 80042fe:	2304      	movs	r3, #4
 8004300:	e006      	b.n	8004310 <HAL_GPIO_Init+0x228>
 8004302:	2303      	movs	r3, #3
 8004304:	e004      	b.n	8004310 <HAL_GPIO_Init+0x228>
 8004306:	2302      	movs	r3, #2
 8004308:	e002      	b.n	8004310 <HAL_GPIO_Init+0x228>
 800430a:	2301      	movs	r3, #1
 800430c:	e000      	b.n	8004310 <HAL_GPIO_Init+0x228>
 800430e:	2300      	movs	r3, #0
 8004310:	69fa      	ldr	r2, [r7, #28]
 8004312:	f002 0203 	and.w	r2, r2, #3
 8004316:	0092      	lsls	r2, r2, #2
 8004318:	4093      	lsls	r3, r2
 800431a:	69ba      	ldr	r2, [r7, #24]
 800431c:	4313      	orrs	r3, r2
 800431e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004320:	4934      	ldr	r1, [pc, #208]	; (80043f4 <HAL_GPIO_Init+0x30c>)
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	089b      	lsrs	r3, r3, #2
 8004326:	3302      	adds	r3, #2
 8004328:	69ba      	ldr	r2, [r7, #24]
 800432a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800432e:	4b3a      	ldr	r3, [pc, #232]	; (8004418 <HAL_GPIO_Init+0x330>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	43db      	mvns	r3, r3
 8004338:	69ba      	ldr	r2, [r7, #24]
 800433a:	4013      	ands	r3, r2
 800433c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d003      	beq.n	8004352 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800434a:	69ba      	ldr	r2, [r7, #24]
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	4313      	orrs	r3, r2
 8004350:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004352:	4a31      	ldr	r2, [pc, #196]	; (8004418 <HAL_GPIO_Init+0x330>)
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004358:	4b2f      	ldr	r3, [pc, #188]	; (8004418 <HAL_GPIO_Init+0x330>)
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	43db      	mvns	r3, r3
 8004362:	69ba      	ldr	r2, [r7, #24]
 8004364:	4013      	ands	r3, r2
 8004366:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004370:	2b00      	cmp	r3, #0
 8004372:	d003      	beq.n	800437c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004374:	69ba      	ldr	r2, [r7, #24]
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	4313      	orrs	r3, r2
 800437a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800437c:	4a26      	ldr	r2, [pc, #152]	; (8004418 <HAL_GPIO_Init+0x330>)
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004382:	4b25      	ldr	r3, [pc, #148]	; (8004418 <HAL_GPIO_Init+0x330>)
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	43db      	mvns	r3, r3
 800438c:	69ba      	ldr	r2, [r7, #24]
 800438e:	4013      	ands	r3, r2
 8004390:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d003      	beq.n	80043a6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800439e:	69ba      	ldr	r2, [r7, #24]
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80043a6:	4a1c      	ldr	r2, [pc, #112]	; (8004418 <HAL_GPIO_Init+0x330>)
 80043a8:	69bb      	ldr	r3, [r7, #24]
 80043aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80043ac:	4b1a      	ldr	r3, [pc, #104]	; (8004418 <HAL_GPIO_Init+0x330>)
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	43db      	mvns	r3, r3
 80043b6:	69ba      	ldr	r2, [r7, #24]
 80043b8:	4013      	ands	r3, r2
 80043ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d003      	beq.n	80043d0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80043c8:	69ba      	ldr	r2, [r7, #24]
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80043d0:	4a11      	ldr	r2, [pc, #68]	; (8004418 <HAL_GPIO_Init+0x330>)
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	3301      	adds	r3, #1
 80043da:	61fb      	str	r3, [r7, #28]
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	2b0f      	cmp	r3, #15
 80043e0:	f67f ae90 	bls.w	8004104 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80043e4:	bf00      	nop
 80043e6:	3724      	adds	r7, #36	; 0x24
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr
 80043f0:	40023800 	.word	0x40023800
 80043f4:	40013800 	.word	0x40013800
 80043f8:	40020000 	.word	0x40020000
 80043fc:	40020400 	.word	0x40020400
 8004400:	40020800 	.word	0x40020800
 8004404:	40020c00 	.word	0x40020c00
 8004408:	40021000 	.word	0x40021000
 800440c:	40021400 	.word	0x40021400
 8004410:	40021800 	.word	0x40021800
 8004414:	40021c00 	.word	0x40021c00
 8004418:	40013c00 	.word	0x40013c00

0800441c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800441c:	b480      	push	{r7}
 800441e:	b085      	sub	sp, #20
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	460b      	mov	r3, r1
 8004426:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	691a      	ldr	r2, [r3, #16]
 800442c:	887b      	ldrh	r3, [r7, #2]
 800442e:	4013      	ands	r3, r2
 8004430:	2b00      	cmp	r3, #0
 8004432:	d002      	beq.n	800443a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004434:	2301      	movs	r3, #1
 8004436:	73fb      	strb	r3, [r7, #15]
 8004438:	e001      	b.n	800443e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800443a:	2300      	movs	r3, #0
 800443c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800443e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004440:	4618      	mov	r0, r3
 8004442:	3714      	adds	r7, #20
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr

0800444c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	460b      	mov	r3, r1
 8004456:	807b      	strh	r3, [r7, #2]
 8004458:	4613      	mov	r3, r2
 800445a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800445c:	787b      	ldrb	r3, [r7, #1]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d003      	beq.n	800446a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004462:	887a      	ldrh	r2, [r7, #2]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004468:	e003      	b.n	8004472 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800446a:	887b      	ldrh	r3, [r7, #2]
 800446c:	041a      	lsls	r2, r3, #16
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	619a      	str	r2, [r3, #24]
}
 8004472:	bf00      	nop
 8004474:	370c      	adds	r7, #12
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr

0800447e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800447e:	b480      	push	{r7}
 8004480:	b083      	sub	sp, #12
 8004482:	af00      	add	r7, sp, #0
 8004484:	6078      	str	r0, [r7, #4]
 8004486:	460b      	mov	r3, r1
 8004488:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	695a      	ldr	r2, [r3, #20]
 800448e:	887b      	ldrh	r3, [r7, #2]
 8004490:	401a      	ands	r2, r3
 8004492:	887b      	ldrh	r3, [r7, #2]
 8004494:	429a      	cmp	r2, r3
 8004496:	d104      	bne.n	80044a2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004498:	887b      	ldrh	r3, [r7, #2]
 800449a:	041a      	lsls	r2, r3, #16
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80044a0:	e002      	b.n	80044a8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80044a2:	887a      	ldrh	r2, [r7, #2]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	619a      	str	r2, [r3, #24]
}
 80044a8:	bf00      	nop
 80044aa:	370c      	adds	r7, #12
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr

080044b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b086      	sub	sp, #24
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d101      	bne.n	80044c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e25b      	b.n	800497e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0301 	and.w	r3, r3, #1
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d075      	beq.n	80045be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80044d2:	4ba3      	ldr	r3, [pc, #652]	; (8004760 <HAL_RCC_OscConfig+0x2ac>)
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	f003 030c 	and.w	r3, r3, #12
 80044da:	2b04      	cmp	r3, #4
 80044dc:	d00c      	beq.n	80044f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044de:	4ba0      	ldr	r3, [pc, #640]	; (8004760 <HAL_RCC_OscConfig+0x2ac>)
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80044e6:	2b08      	cmp	r3, #8
 80044e8:	d112      	bne.n	8004510 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044ea:	4b9d      	ldr	r3, [pc, #628]	; (8004760 <HAL_RCC_OscConfig+0x2ac>)
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044f6:	d10b      	bne.n	8004510 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044f8:	4b99      	ldr	r3, [pc, #612]	; (8004760 <HAL_RCC_OscConfig+0x2ac>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004500:	2b00      	cmp	r3, #0
 8004502:	d05b      	beq.n	80045bc <HAL_RCC_OscConfig+0x108>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d157      	bne.n	80045bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e236      	b.n	800497e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004518:	d106      	bne.n	8004528 <HAL_RCC_OscConfig+0x74>
 800451a:	4b91      	ldr	r3, [pc, #580]	; (8004760 <HAL_RCC_OscConfig+0x2ac>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a90      	ldr	r2, [pc, #576]	; (8004760 <HAL_RCC_OscConfig+0x2ac>)
 8004520:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004524:	6013      	str	r3, [r2, #0]
 8004526:	e01d      	b.n	8004564 <HAL_RCC_OscConfig+0xb0>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004530:	d10c      	bne.n	800454c <HAL_RCC_OscConfig+0x98>
 8004532:	4b8b      	ldr	r3, [pc, #556]	; (8004760 <HAL_RCC_OscConfig+0x2ac>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a8a      	ldr	r2, [pc, #552]	; (8004760 <HAL_RCC_OscConfig+0x2ac>)
 8004538:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800453c:	6013      	str	r3, [r2, #0]
 800453e:	4b88      	ldr	r3, [pc, #544]	; (8004760 <HAL_RCC_OscConfig+0x2ac>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a87      	ldr	r2, [pc, #540]	; (8004760 <HAL_RCC_OscConfig+0x2ac>)
 8004544:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004548:	6013      	str	r3, [r2, #0]
 800454a:	e00b      	b.n	8004564 <HAL_RCC_OscConfig+0xb0>
 800454c:	4b84      	ldr	r3, [pc, #528]	; (8004760 <HAL_RCC_OscConfig+0x2ac>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a83      	ldr	r2, [pc, #524]	; (8004760 <HAL_RCC_OscConfig+0x2ac>)
 8004552:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004556:	6013      	str	r3, [r2, #0]
 8004558:	4b81      	ldr	r3, [pc, #516]	; (8004760 <HAL_RCC_OscConfig+0x2ac>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a80      	ldr	r2, [pc, #512]	; (8004760 <HAL_RCC_OscConfig+0x2ac>)
 800455e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004562:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d013      	beq.n	8004594 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800456c:	f7fe fa54 	bl	8002a18 <HAL_GetTick>
 8004570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004572:	e008      	b.n	8004586 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004574:	f7fe fa50 	bl	8002a18 <HAL_GetTick>
 8004578:	4602      	mov	r2, r0
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	2b64      	cmp	r3, #100	; 0x64
 8004580:	d901      	bls.n	8004586 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e1fb      	b.n	800497e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004586:	4b76      	ldr	r3, [pc, #472]	; (8004760 <HAL_RCC_OscConfig+0x2ac>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d0f0      	beq.n	8004574 <HAL_RCC_OscConfig+0xc0>
 8004592:	e014      	b.n	80045be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004594:	f7fe fa40 	bl	8002a18 <HAL_GetTick>
 8004598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800459a:	e008      	b.n	80045ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800459c:	f7fe fa3c 	bl	8002a18 <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	2b64      	cmp	r3, #100	; 0x64
 80045a8:	d901      	bls.n	80045ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e1e7      	b.n	800497e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045ae:	4b6c      	ldr	r3, [pc, #432]	; (8004760 <HAL_RCC_OscConfig+0x2ac>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d1f0      	bne.n	800459c <HAL_RCC_OscConfig+0xe8>
 80045ba:	e000      	b.n	80045be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0302 	and.w	r3, r3, #2
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d063      	beq.n	8004692 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80045ca:	4b65      	ldr	r3, [pc, #404]	; (8004760 <HAL_RCC_OscConfig+0x2ac>)
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	f003 030c 	and.w	r3, r3, #12
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00b      	beq.n	80045ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045d6:	4b62      	ldr	r3, [pc, #392]	; (8004760 <HAL_RCC_OscConfig+0x2ac>)
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80045de:	2b08      	cmp	r3, #8
 80045e0:	d11c      	bne.n	800461c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045e2:	4b5f      	ldr	r3, [pc, #380]	; (8004760 <HAL_RCC_OscConfig+0x2ac>)
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d116      	bne.n	800461c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045ee:	4b5c      	ldr	r3, [pc, #368]	; (8004760 <HAL_RCC_OscConfig+0x2ac>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0302 	and.w	r3, r3, #2
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d005      	beq.n	8004606 <HAL_RCC_OscConfig+0x152>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d001      	beq.n	8004606 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e1bb      	b.n	800497e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004606:	4b56      	ldr	r3, [pc, #344]	; (8004760 <HAL_RCC_OscConfig+0x2ac>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	00db      	lsls	r3, r3, #3
 8004614:	4952      	ldr	r1, [pc, #328]	; (8004760 <HAL_RCC_OscConfig+0x2ac>)
 8004616:	4313      	orrs	r3, r2
 8004618:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800461a:	e03a      	b.n	8004692 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d020      	beq.n	8004666 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004624:	4b4f      	ldr	r3, [pc, #316]	; (8004764 <HAL_RCC_OscConfig+0x2b0>)
 8004626:	2201      	movs	r2, #1
 8004628:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800462a:	f7fe f9f5 	bl	8002a18 <HAL_GetTick>
 800462e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004630:	e008      	b.n	8004644 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004632:	f7fe f9f1 	bl	8002a18 <HAL_GetTick>
 8004636:	4602      	mov	r2, r0
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	2b02      	cmp	r3, #2
 800463e:	d901      	bls.n	8004644 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004640:	2303      	movs	r3, #3
 8004642:	e19c      	b.n	800497e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004644:	4b46      	ldr	r3, [pc, #280]	; (8004760 <HAL_RCC_OscConfig+0x2ac>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0302 	and.w	r3, r3, #2
 800464c:	2b00      	cmp	r3, #0
 800464e:	d0f0      	beq.n	8004632 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004650:	4b43      	ldr	r3, [pc, #268]	; (8004760 <HAL_RCC_OscConfig+0x2ac>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	00db      	lsls	r3, r3, #3
 800465e:	4940      	ldr	r1, [pc, #256]	; (8004760 <HAL_RCC_OscConfig+0x2ac>)
 8004660:	4313      	orrs	r3, r2
 8004662:	600b      	str	r3, [r1, #0]
 8004664:	e015      	b.n	8004692 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004666:	4b3f      	ldr	r3, [pc, #252]	; (8004764 <HAL_RCC_OscConfig+0x2b0>)
 8004668:	2200      	movs	r2, #0
 800466a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800466c:	f7fe f9d4 	bl	8002a18 <HAL_GetTick>
 8004670:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004672:	e008      	b.n	8004686 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004674:	f7fe f9d0 	bl	8002a18 <HAL_GetTick>
 8004678:	4602      	mov	r2, r0
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	2b02      	cmp	r3, #2
 8004680:	d901      	bls.n	8004686 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e17b      	b.n	800497e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004686:	4b36      	ldr	r3, [pc, #216]	; (8004760 <HAL_RCC_OscConfig+0x2ac>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 0302 	and.w	r3, r3, #2
 800468e:	2b00      	cmp	r3, #0
 8004690:	d1f0      	bne.n	8004674 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0308 	and.w	r3, r3, #8
 800469a:	2b00      	cmp	r3, #0
 800469c:	d030      	beq.n	8004700 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d016      	beq.n	80046d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046a6:	4b30      	ldr	r3, [pc, #192]	; (8004768 <HAL_RCC_OscConfig+0x2b4>)
 80046a8:	2201      	movs	r2, #1
 80046aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046ac:	f7fe f9b4 	bl	8002a18 <HAL_GetTick>
 80046b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046b2:	e008      	b.n	80046c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046b4:	f7fe f9b0 	bl	8002a18 <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d901      	bls.n	80046c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	e15b      	b.n	800497e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046c6:	4b26      	ldr	r3, [pc, #152]	; (8004760 <HAL_RCC_OscConfig+0x2ac>)
 80046c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046ca:	f003 0302 	and.w	r3, r3, #2
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d0f0      	beq.n	80046b4 <HAL_RCC_OscConfig+0x200>
 80046d2:	e015      	b.n	8004700 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046d4:	4b24      	ldr	r3, [pc, #144]	; (8004768 <HAL_RCC_OscConfig+0x2b4>)
 80046d6:	2200      	movs	r2, #0
 80046d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046da:	f7fe f99d 	bl	8002a18 <HAL_GetTick>
 80046de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046e0:	e008      	b.n	80046f4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046e2:	f7fe f999 	bl	8002a18 <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d901      	bls.n	80046f4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e144      	b.n	800497e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046f4:	4b1a      	ldr	r3, [pc, #104]	; (8004760 <HAL_RCC_OscConfig+0x2ac>)
 80046f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046f8:	f003 0302 	and.w	r3, r3, #2
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d1f0      	bne.n	80046e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 0304 	and.w	r3, r3, #4
 8004708:	2b00      	cmp	r3, #0
 800470a:	f000 80a0 	beq.w	800484e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800470e:	2300      	movs	r3, #0
 8004710:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004712:	4b13      	ldr	r3, [pc, #76]	; (8004760 <HAL_RCC_OscConfig+0x2ac>)
 8004714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d10f      	bne.n	800473e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800471e:	2300      	movs	r3, #0
 8004720:	60bb      	str	r3, [r7, #8]
 8004722:	4b0f      	ldr	r3, [pc, #60]	; (8004760 <HAL_RCC_OscConfig+0x2ac>)
 8004724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004726:	4a0e      	ldr	r2, [pc, #56]	; (8004760 <HAL_RCC_OscConfig+0x2ac>)
 8004728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800472c:	6413      	str	r3, [r2, #64]	; 0x40
 800472e:	4b0c      	ldr	r3, [pc, #48]	; (8004760 <HAL_RCC_OscConfig+0x2ac>)
 8004730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004736:	60bb      	str	r3, [r7, #8]
 8004738:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800473a:	2301      	movs	r3, #1
 800473c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800473e:	4b0b      	ldr	r3, [pc, #44]	; (800476c <HAL_RCC_OscConfig+0x2b8>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004746:	2b00      	cmp	r3, #0
 8004748:	d121      	bne.n	800478e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800474a:	4b08      	ldr	r3, [pc, #32]	; (800476c <HAL_RCC_OscConfig+0x2b8>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a07      	ldr	r2, [pc, #28]	; (800476c <HAL_RCC_OscConfig+0x2b8>)
 8004750:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004754:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004756:	f7fe f95f 	bl	8002a18 <HAL_GetTick>
 800475a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800475c:	e011      	b.n	8004782 <HAL_RCC_OscConfig+0x2ce>
 800475e:	bf00      	nop
 8004760:	40023800 	.word	0x40023800
 8004764:	42470000 	.word	0x42470000
 8004768:	42470e80 	.word	0x42470e80
 800476c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004770:	f7fe f952 	bl	8002a18 <HAL_GetTick>
 8004774:	4602      	mov	r2, r0
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	2b02      	cmp	r3, #2
 800477c:	d901      	bls.n	8004782 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	e0fd      	b.n	800497e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004782:	4b81      	ldr	r3, [pc, #516]	; (8004988 <HAL_RCC_OscConfig+0x4d4>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800478a:	2b00      	cmp	r3, #0
 800478c:	d0f0      	beq.n	8004770 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	2b01      	cmp	r3, #1
 8004794:	d106      	bne.n	80047a4 <HAL_RCC_OscConfig+0x2f0>
 8004796:	4b7d      	ldr	r3, [pc, #500]	; (800498c <HAL_RCC_OscConfig+0x4d8>)
 8004798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800479a:	4a7c      	ldr	r2, [pc, #496]	; (800498c <HAL_RCC_OscConfig+0x4d8>)
 800479c:	f043 0301 	orr.w	r3, r3, #1
 80047a0:	6713      	str	r3, [r2, #112]	; 0x70
 80047a2:	e01c      	b.n	80047de <HAL_RCC_OscConfig+0x32a>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	2b05      	cmp	r3, #5
 80047aa:	d10c      	bne.n	80047c6 <HAL_RCC_OscConfig+0x312>
 80047ac:	4b77      	ldr	r3, [pc, #476]	; (800498c <HAL_RCC_OscConfig+0x4d8>)
 80047ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047b0:	4a76      	ldr	r2, [pc, #472]	; (800498c <HAL_RCC_OscConfig+0x4d8>)
 80047b2:	f043 0304 	orr.w	r3, r3, #4
 80047b6:	6713      	str	r3, [r2, #112]	; 0x70
 80047b8:	4b74      	ldr	r3, [pc, #464]	; (800498c <HAL_RCC_OscConfig+0x4d8>)
 80047ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047bc:	4a73      	ldr	r2, [pc, #460]	; (800498c <HAL_RCC_OscConfig+0x4d8>)
 80047be:	f043 0301 	orr.w	r3, r3, #1
 80047c2:	6713      	str	r3, [r2, #112]	; 0x70
 80047c4:	e00b      	b.n	80047de <HAL_RCC_OscConfig+0x32a>
 80047c6:	4b71      	ldr	r3, [pc, #452]	; (800498c <HAL_RCC_OscConfig+0x4d8>)
 80047c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ca:	4a70      	ldr	r2, [pc, #448]	; (800498c <HAL_RCC_OscConfig+0x4d8>)
 80047cc:	f023 0301 	bic.w	r3, r3, #1
 80047d0:	6713      	str	r3, [r2, #112]	; 0x70
 80047d2:	4b6e      	ldr	r3, [pc, #440]	; (800498c <HAL_RCC_OscConfig+0x4d8>)
 80047d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047d6:	4a6d      	ldr	r2, [pc, #436]	; (800498c <HAL_RCC_OscConfig+0x4d8>)
 80047d8:	f023 0304 	bic.w	r3, r3, #4
 80047dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d015      	beq.n	8004812 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047e6:	f7fe f917 	bl	8002a18 <HAL_GetTick>
 80047ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047ec:	e00a      	b.n	8004804 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047ee:	f7fe f913 	bl	8002a18 <HAL_GetTick>
 80047f2:	4602      	mov	r2, r0
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d901      	bls.n	8004804 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004800:	2303      	movs	r3, #3
 8004802:	e0bc      	b.n	800497e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004804:	4b61      	ldr	r3, [pc, #388]	; (800498c <HAL_RCC_OscConfig+0x4d8>)
 8004806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004808:	f003 0302 	and.w	r3, r3, #2
 800480c:	2b00      	cmp	r3, #0
 800480e:	d0ee      	beq.n	80047ee <HAL_RCC_OscConfig+0x33a>
 8004810:	e014      	b.n	800483c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004812:	f7fe f901 	bl	8002a18 <HAL_GetTick>
 8004816:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004818:	e00a      	b.n	8004830 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800481a:	f7fe f8fd 	bl	8002a18 <HAL_GetTick>
 800481e:	4602      	mov	r2, r0
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	f241 3288 	movw	r2, #5000	; 0x1388
 8004828:	4293      	cmp	r3, r2
 800482a:	d901      	bls.n	8004830 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800482c:	2303      	movs	r3, #3
 800482e:	e0a6      	b.n	800497e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004830:	4b56      	ldr	r3, [pc, #344]	; (800498c <HAL_RCC_OscConfig+0x4d8>)
 8004832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004834:	f003 0302 	and.w	r3, r3, #2
 8004838:	2b00      	cmp	r3, #0
 800483a:	d1ee      	bne.n	800481a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800483c:	7dfb      	ldrb	r3, [r7, #23]
 800483e:	2b01      	cmp	r3, #1
 8004840:	d105      	bne.n	800484e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004842:	4b52      	ldr	r3, [pc, #328]	; (800498c <HAL_RCC_OscConfig+0x4d8>)
 8004844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004846:	4a51      	ldr	r2, [pc, #324]	; (800498c <HAL_RCC_OscConfig+0x4d8>)
 8004848:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800484c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	699b      	ldr	r3, [r3, #24]
 8004852:	2b00      	cmp	r3, #0
 8004854:	f000 8092 	beq.w	800497c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004858:	4b4c      	ldr	r3, [pc, #304]	; (800498c <HAL_RCC_OscConfig+0x4d8>)
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	f003 030c 	and.w	r3, r3, #12
 8004860:	2b08      	cmp	r3, #8
 8004862:	d05c      	beq.n	800491e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	699b      	ldr	r3, [r3, #24]
 8004868:	2b02      	cmp	r3, #2
 800486a:	d141      	bne.n	80048f0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800486c:	4b48      	ldr	r3, [pc, #288]	; (8004990 <HAL_RCC_OscConfig+0x4dc>)
 800486e:	2200      	movs	r2, #0
 8004870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004872:	f7fe f8d1 	bl	8002a18 <HAL_GetTick>
 8004876:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004878:	e008      	b.n	800488c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800487a:	f7fe f8cd 	bl	8002a18 <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	2b02      	cmp	r3, #2
 8004886:	d901      	bls.n	800488c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	e078      	b.n	800497e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800488c:	4b3f      	ldr	r3, [pc, #252]	; (800498c <HAL_RCC_OscConfig+0x4d8>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d1f0      	bne.n	800487a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	69da      	ldr	r2, [r3, #28]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6a1b      	ldr	r3, [r3, #32]
 80048a0:	431a      	orrs	r2, r3
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a6:	019b      	lsls	r3, r3, #6
 80048a8:	431a      	orrs	r2, r3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ae:	085b      	lsrs	r3, r3, #1
 80048b0:	3b01      	subs	r3, #1
 80048b2:	041b      	lsls	r3, r3, #16
 80048b4:	431a      	orrs	r2, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ba:	061b      	lsls	r3, r3, #24
 80048bc:	4933      	ldr	r1, [pc, #204]	; (800498c <HAL_RCC_OscConfig+0x4d8>)
 80048be:	4313      	orrs	r3, r2
 80048c0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048c2:	4b33      	ldr	r3, [pc, #204]	; (8004990 <HAL_RCC_OscConfig+0x4dc>)
 80048c4:	2201      	movs	r2, #1
 80048c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048c8:	f7fe f8a6 	bl	8002a18 <HAL_GetTick>
 80048cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048ce:	e008      	b.n	80048e2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048d0:	f7fe f8a2 	bl	8002a18 <HAL_GetTick>
 80048d4:	4602      	mov	r2, r0
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	2b02      	cmp	r3, #2
 80048dc:	d901      	bls.n	80048e2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	e04d      	b.n	800497e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048e2:	4b2a      	ldr	r3, [pc, #168]	; (800498c <HAL_RCC_OscConfig+0x4d8>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d0f0      	beq.n	80048d0 <HAL_RCC_OscConfig+0x41c>
 80048ee:	e045      	b.n	800497c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048f0:	4b27      	ldr	r3, [pc, #156]	; (8004990 <HAL_RCC_OscConfig+0x4dc>)
 80048f2:	2200      	movs	r2, #0
 80048f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048f6:	f7fe f88f 	bl	8002a18 <HAL_GetTick>
 80048fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048fc:	e008      	b.n	8004910 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048fe:	f7fe f88b 	bl	8002a18 <HAL_GetTick>
 8004902:	4602      	mov	r2, r0
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	2b02      	cmp	r3, #2
 800490a:	d901      	bls.n	8004910 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	e036      	b.n	800497e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004910:	4b1e      	ldr	r3, [pc, #120]	; (800498c <HAL_RCC_OscConfig+0x4d8>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004918:	2b00      	cmp	r3, #0
 800491a:	d1f0      	bne.n	80048fe <HAL_RCC_OscConfig+0x44a>
 800491c:	e02e      	b.n	800497c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	699b      	ldr	r3, [r3, #24]
 8004922:	2b01      	cmp	r3, #1
 8004924:	d101      	bne.n	800492a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e029      	b.n	800497e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800492a:	4b18      	ldr	r3, [pc, #96]	; (800498c <HAL_RCC_OscConfig+0x4d8>)
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	69db      	ldr	r3, [r3, #28]
 800493a:	429a      	cmp	r2, r3
 800493c:	d11c      	bne.n	8004978 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004948:	429a      	cmp	r2, r3
 800494a:	d115      	bne.n	8004978 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800494c:	68fa      	ldr	r2, [r7, #12]
 800494e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004952:	4013      	ands	r3, r2
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004958:	4293      	cmp	r3, r2
 800495a:	d10d      	bne.n	8004978 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004966:	429a      	cmp	r2, r3
 8004968:	d106      	bne.n	8004978 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004974:	429a      	cmp	r2, r3
 8004976:	d001      	beq.n	800497c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e000      	b.n	800497e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800497c:	2300      	movs	r3, #0
}
 800497e:	4618      	mov	r0, r3
 8004980:	3718      	adds	r7, #24
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	40007000 	.word	0x40007000
 800498c:	40023800 	.word	0x40023800
 8004990:	42470060 	.word	0x42470060

08004994 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d101      	bne.n	80049a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e0cc      	b.n	8004b42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80049a8:	4b68      	ldr	r3, [pc, #416]	; (8004b4c <HAL_RCC_ClockConfig+0x1b8>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 030f 	and.w	r3, r3, #15
 80049b0:	683a      	ldr	r2, [r7, #0]
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d90c      	bls.n	80049d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049b6:	4b65      	ldr	r3, [pc, #404]	; (8004b4c <HAL_RCC_ClockConfig+0x1b8>)
 80049b8:	683a      	ldr	r2, [r7, #0]
 80049ba:	b2d2      	uxtb	r2, r2
 80049bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049be:	4b63      	ldr	r3, [pc, #396]	; (8004b4c <HAL_RCC_ClockConfig+0x1b8>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 030f 	and.w	r3, r3, #15
 80049c6:	683a      	ldr	r2, [r7, #0]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d001      	beq.n	80049d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e0b8      	b.n	8004b42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0302 	and.w	r3, r3, #2
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d020      	beq.n	8004a1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0304 	and.w	r3, r3, #4
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d005      	beq.n	80049f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049e8:	4b59      	ldr	r3, [pc, #356]	; (8004b50 <HAL_RCC_ClockConfig+0x1bc>)
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	4a58      	ldr	r2, [pc, #352]	; (8004b50 <HAL_RCC_ClockConfig+0x1bc>)
 80049ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80049f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0308 	and.w	r3, r3, #8
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d005      	beq.n	8004a0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a00:	4b53      	ldr	r3, [pc, #332]	; (8004b50 <HAL_RCC_ClockConfig+0x1bc>)
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	4a52      	ldr	r2, [pc, #328]	; (8004b50 <HAL_RCC_ClockConfig+0x1bc>)
 8004a06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a0c:	4b50      	ldr	r3, [pc, #320]	; (8004b50 <HAL_RCC_ClockConfig+0x1bc>)
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	494d      	ldr	r1, [pc, #308]	; (8004b50 <HAL_RCC_ClockConfig+0x1bc>)
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0301 	and.w	r3, r3, #1
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d044      	beq.n	8004ab4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d107      	bne.n	8004a42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a32:	4b47      	ldr	r3, [pc, #284]	; (8004b50 <HAL_RCC_ClockConfig+0x1bc>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d119      	bne.n	8004a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e07f      	b.n	8004b42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d003      	beq.n	8004a52 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a4e:	2b03      	cmp	r3, #3
 8004a50:	d107      	bne.n	8004a62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a52:	4b3f      	ldr	r3, [pc, #252]	; (8004b50 <HAL_RCC_ClockConfig+0x1bc>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d109      	bne.n	8004a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e06f      	b.n	8004b42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a62:	4b3b      	ldr	r3, [pc, #236]	; (8004b50 <HAL_RCC_ClockConfig+0x1bc>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 0302 	and.w	r3, r3, #2
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d101      	bne.n	8004a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e067      	b.n	8004b42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a72:	4b37      	ldr	r3, [pc, #220]	; (8004b50 <HAL_RCC_ClockConfig+0x1bc>)
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	f023 0203 	bic.w	r2, r3, #3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	4934      	ldr	r1, [pc, #208]	; (8004b50 <HAL_RCC_ClockConfig+0x1bc>)
 8004a80:	4313      	orrs	r3, r2
 8004a82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a84:	f7fd ffc8 	bl	8002a18 <HAL_GetTick>
 8004a88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a8a:	e00a      	b.n	8004aa2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a8c:	f7fd ffc4 	bl	8002a18 <HAL_GetTick>
 8004a90:	4602      	mov	r2, r0
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d901      	bls.n	8004aa2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e04f      	b.n	8004b42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aa2:	4b2b      	ldr	r3, [pc, #172]	; (8004b50 <HAL_RCC_ClockConfig+0x1bc>)
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	f003 020c 	and.w	r2, r3, #12
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d1eb      	bne.n	8004a8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ab4:	4b25      	ldr	r3, [pc, #148]	; (8004b4c <HAL_RCC_ClockConfig+0x1b8>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 030f 	and.w	r3, r3, #15
 8004abc:	683a      	ldr	r2, [r7, #0]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d20c      	bcs.n	8004adc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ac2:	4b22      	ldr	r3, [pc, #136]	; (8004b4c <HAL_RCC_ClockConfig+0x1b8>)
 8004ac4:	683a      	ldr	r2, [r7, #0]
 8004ac6:	b2d2      	uxtb	r2, r2
 8004ac8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aca:	4b20      	ldr	r3, [pc, #128]	; (8004b4c <HAL_RCC_ClockConfig+0x1b8>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 030f 	and.w	r3, r3, #15
 8004ad2:	683a      	ldr	r2, [r7, #0]
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d001      	beq.n	8004adc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e032      	b.n	8004b42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0304 	and.w	r3, r3, #4
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d008      	beq.n	8004afa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ae8:	4b19      	ldr	r3, [pc, #100]	; (8004b50 <HAL_RCC_ClockConfig+0x1bc>)
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	4916      	ldr	r1, [pc, #88]	; (8004b50 <HAL_RCC_ClockConfig+0x1bc>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 0308 	and.w	r3, r3, #8
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d009      	beq.n	8004b1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b06:	4b12      	ldr	r3, [pc, #72]	; (8004b50 <HAL_RCC_ClockConfig+0x1bc>)
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	00db      	lsls	r3, r3, #3
 8004b14:	490e      	ldr	r1, [pc, #56]	; (8004b50 <HAL_RCC_ClockConfig+0x1bc>)
 8004b16:	4313      	orrs	r3, r2
 8004b18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b1a:	f000 f821 	bl	8004b60 <HAL_RCC_GetSysClockFreq>
 8004b1e:	4601      	mov	r1, r0
 8004b20:	4b0b      	ldr	r3, [pc, #44]	; (8004b50 <HAL_RCC_ClockConfig+0x1bc>)
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	091b      	lsrs	r3, r3, #4
 8004b26:	f003 030f 	and.w	r3, r3, #15
 8004b2a:	4a0a      	ldr	r2, [pc, #40]	; (8004b54 <HAL_RCC_ClockConfig+0x1c0>)
 8004b2c:	5cd3      	ldrb	r3, [r2, r3]
 8004b2e:	fa21 f303 	lsr.w	r3, r1, r3
 8004b32:	4a09      	ldr	r2, [pc, #36]	; (8004b58 <HAL_RCC_ClockConfig+0x1c4>)
 8004b34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004b36:	4b09      	ldr	r3, [pc, #36]	; (8004b5c <HAL_RCC_ClockConfig+0x1c8>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f7fd ff28 	bl	8002990 <HAL_InitTick>

  return HAL_OK;
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3710      	adds	r7, #16
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	40023c00 	.word	0x40023c00
 8004b50:	40023800 	.word	0x40023800
 8004b54:	08009918 	.word	0x08009918
 8004b58:	20000008 	.word	0x20000008
 8004b5c:	2000000c 	.word	0x2000000c

08004b60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b62:	b085      	sub	sp, #20
 8004b64:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004b66:	2300      	movs	r3, #0
 8004b68:	607b      	str	r3, [r7, #4]
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	60fb      	str	r3, [r7, #12]
 8004b6e:	2300      	movs	r3, #0
 8004b70:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004b72:	2300      	movs	r3, #0
 8004b74:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b76:	4b50      	ldr	r3, [pc, #320]	; (8004cb8 <HAL_RCC_GetSysClockFreq+0x158>)
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	f003 030c 	and.w	r3, r3, #12
 8004b7e:	2b04      	cmp	r3, #4
 8004b80:	d007      	beq.n	8004b92 <HAL_RCC_GetSysClockFreq+0x32>
 8004b82:	2b08      	cmp	r3, #8
 8004b84:	d008      	beq.n	8004b98 <HAL_RCC_GetSysClockFreq+0x38>
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	f040 808d 	bne.w	8004ca6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b8c:	4b4b      	ldr	r3, [pc, #300]	; (8004cbc <HAL_RCC_GetSysClockFreq+0x15c>)
 8004b8e:	60bb      	str	r3, [r7, #8]
       break;
 8004b90:	e08c      	b.n	8004cac <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b92:	4b4b      	ldr	r3, [pc, #300]	; (8004cc0 <HAL_RCC_GetSysClockFreq+0x160>)
 8004b94:	60bb      	str	r3, [r7, #8]
      break;
 8004b96:	e089      	b.n	8004cac <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b98:	4b47      	ldr	r3, [pc, #284]	; (8004cb8 <HAL_RCC_GetSysClockFreq+0x158>)
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ba0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ba2:	4b45      	ldr	r3, [pc, #276]	; (8004cb8 <HAL_RCC_GetSysClockFreq+0x158>)
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d023      	beq.n	8004bf6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bae:	4b42      	ldr	r3, [pc, #264]	; (8004cb8 <HAL_RCC_GetSysClockFreq+0x158>)
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	099b      	lsrs	r3, r3, #6
 8004bb4:	f04f 0400 	mov.w	r4, #0
 8004bb8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004bbc:	f04f 0200 	mov.w	r2, #0
 8004bc0:	ea03 0501 	and.w	r5, r3, r1
 8004bc4:	ea04 0602 	and.w	r6, r4, r2
 8004bc8:	4a3d      	ldr	r2, [pc, #244]	; (8004cc0 <HAL_RCC_GetSysClockFreq+0x160>)
 8004bca:	fb02 f106 	mul.w	r1, r2, r6
 8004bce:	2200      	movs	r2, #0
 8004bd0:	fb02 f205 	mul.w	r2, r2, r5
 8004bd4:	440a      	add	r2, r1
 8004bd6:	493a      	ldr	r1, [pc, #232]	; (8004cc0 <HAL_RCC_GetSysClockFreq+0x160>)
 8004bd8:	fba5 0101 	umull	r0, r1, r5, r1
 8004bdc:	1853      	adds	r3, r2, r1
 8004bde:	4619      	mov	r1, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f04f 0400 	mov.w	r4, #0
 8004be6:	461a      	mov	r2, r3
 8004be8:	4623      	mov	r3, r4
 8004bea:	f7fb ffdd 	bl	8000ba8 <__aeabi_uldivmod>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	460c      	mov	r4, r1
 8004bf2:	60fb      	str	r3, [r7, #12]
 8004bf4:	e049      	b.n	8004c8a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bf6:	4b30      	ldr	r3, [pc, #192]	; (8004cb8 <HAL_RCC_GetSysClockFreq+0x158>)
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	099b      	lsrs	r3, r3, #6
 8004bfc:	f04f 0400 	mov.w	r4, #0
 8004c00:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004c04:	f04f 0200 	mov.w	r2, #0
 8004c08:	ea03 0501 	and.w	r5, r3, r1
 8004c0c:	ea04 0602 	and.w	r6, r4, r2
 8004c10:	4629      	mov	r1, r5
 8004c12:	4632      	mov	r2, r6
 8004c14:	f04f 0300 	mov.w	r3, #0
 8004c18:	f04f 0400 	mov.w	r4, #0
 8004c1c:	0154      	lsls	r4, r2, #5
 8004c1e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004c22:	014b      	lsls	r3, r1, #5
 8004c24:	4619      	mov	r1, r3
 8004c26:	4622      	mov	r2, r4
 8004c28:	1b49      	subs	r1, r1, r5
 8004c2a:	eb62 0206 	sbc.w	r2, r2, r6
 8004c2e:	f04f 0300 	mov.w	r3, #0
 8004c32:	f04f 0400 	mov.w	r4, #0
 8004c36:	0194      	lsls	r4, r2, #6
 8004c38:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004c3c:	018b      	lsls	r3, r1, #6
 8004c3e:	1a5b      	subs	r3, r3, r1
 8004c40:	eb64 0402 	sbc.w	r4, r4, r2
 8004c44:	f04f 0100 	mov.w	r1, #0
 8004c48:	f04f 0200 	mov.w	r2, #0
 8004c4c:	00e2      	lsls	r2, r4, #3
 8004c4e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004c52:	00d9      	lsls	r1, r3, #3
 8004c54:	460b      	mov	r3, r1
 8004c56:	4614      	mov	r4, r2
 8004c58:	195b      	adds	r3, r3, r5
 8004c5a:	eb44 0406 	adc.w	r4, r4, r6
 8004c5e:	f04f 0100 	mov.w	r1, #0
 8004c62:	f04f 0200 	mov.w	r2, #0
 8004c66:	02a2      	lsls	r2, r4, #10
 8004c68:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004c6c:	0299      	lsls	r1, r3, #10
 8004c6e:	460b      	mov	r3, r1
 8004c70:	4614      	mov	r4, r2
 8004c72:	4618      	mov	r0, r3
 8004c74:	4621      	mov	r1, r4
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f04f 0400 	mov.w	r4, #0
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	4623      	mov	r3, r4
 8004c80:	f7fb ff92 	bl	8000ba8 <__aeabi_uldivmod>
 8004c84:	4603      	mov	r3, r0
 8004c86:	460c      	mov	r4, r1
 8004c88:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c8a:	4b0b      	ldr	r3, [pc, #44]	; (8004cb8 <HAL_RCC_GetSysClockFreq+0x158>)
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	0c1b      	lsrs	r3, r3, #16
 8004c90:	f003 0303 	and.w	r3, r3, #3
 8004c94:	3301      	adds	r3, #1
 8004c96:	005b      	lsls	r3, r3, #1
 8004c98:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004c9a:	68fa      	ldr	r2, [r7, #12]
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ca2:	60bb      	str	r3, [r7, #8]
      break;
 8004ca4:	e002      	b.n	8004cac <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ca6:	4b05      	ldr	r3, [pc, #20]	; (8004cbc <HAL_RCC_GetSysClockFreq+0x15c>)
 8004ca8:	60bb      	str	r3, [r7, #8]
      break;
 8004caa:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004cac:	68bb      	ldr	r3, [r7, #8]
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3714      	adds	r7, #20
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	40023800 	.word	0x40023800
 8004cbc:	00f42400 	.word	0x00f42400
 8004cc0:	017d7840 	.word	0x017d7840

08004cc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cc8:	4b03      	ldr	r3, [pc, #12]	; (8004cd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004cca:	681b      	ldr	r3, [r3, #0]
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr
 8004cd6:	bf00      	nop
 8004cd8:	20000008 	.word	0x20000008

08004cdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ce0:	f7ff fff0 	bl	8004cc4 <HAL_RCC_GetHCLKFreq>
 8004ce4:	4601      	mov	r1, r0
 8004ce6:	4b05      	ldr	r3, [pc, #20]	; (8004cfc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	0a9b      	lsrs	r3, r3, #10
 8004cec:	f003 0307 	and.w	r3, r3, #7
 8004cf0:	4a03      	ldr	r2, [pc, #12]	; (8004d00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cf2:	5cd3      	ldrb	r3, [r2, r3]
 8004cf4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	bd80      	pop	{r7, pc}
 8004cfc:	40023800 	.word	0x40023800
 8004d00:	08009928 	.word	0x08009928

08004d04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004d08:	f7ff ffdc 	bl	8004cc4 <HAL_RCC_GetHCLKFreq>
 8004d0c:	4601      	mov	r1, r0
 8004d0e:	4b05      	ldr	r3, [pc, #20]	; (8004d24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	0b5b      	lsrs	r3, r3, #13
 8004d14:	f003 0307 	and.w	r3, r3, #7
 8004d18:	4a03      	ldr	r2, [pc, #12]	; (8004d28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d1a:	5cd3      	ldrb	r3, [r2, r3]
 8004d1c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	40023800 	.word	0x40023800
 8004d28:	08009928 	.word	0x08009928

08004d2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d101      	bne.n	8004d3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e056      	b.n	8004dec <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d106      	bne.n	8004d5e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f7fd f85b 	bl	8001e14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2202      	movs	r2, #2
 8004d62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d74:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	685a      	ldr	r2, [r3, #4]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	431a      	orrs	r2, r3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	431a      	orrs	r2, r3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	431a      	orrs	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	695b      	ldr	r3, [r3, #20]
 8004d90:	431a      	orrs	r2, r3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d9a:	431a      	orrs	r2, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	69db      	ldr	r3, [r3, #28]
 8004da0:	431a      	orrs	r2, r3
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a1b      	ldr	r3, [r3, #32]
 8004da6:	ea42 0103 	orr.w	r1, r2, r3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	430a      	orrs	r2, r1
 8004db4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	699b      	ldr	r3, [r3, #24]
 8004dba:	0c1b      	lsrs	r3, r3, #16
 8004dbc:	f003 0104 	and.w	r1, r3, #4
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	430a      	orrs	r2, r1
 8004dca:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	69da      	ldr	r2, [r3, #28]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004dda:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2201      	movs	r2, #1
 8004de6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004dea:	2300      	movs	r3, #0
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3708      	adds	r7, #8
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b08c      	sub	sp, #48	; 0x30
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	60b9      	str	r1, [r7, #8]
 8004dfe:	607a      	str	r2, [r7, #4]
 8004e00:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004e02:	2301      	movs	r3, #1
 8004e04:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004e06:	2300      	movs	r3, #0
 8004e08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d101      	bne.n	8004e1a <HAL_SPI_TransmitReceive+0x26>
 8004e16:	2302      	movs	r3, #2
 8004e18:	e18a      	b.n	8005130 <HAL_SPI_TransmitReceive+0x33c>
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e22:	f7fd fdf9 	bl	8002a18 <HAL_GetTick>
 8004e26:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004e38:	887b      	ldrh	r3, [r7, #2]
 8004e3a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004e3c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d00f      	beq.n	8004e64 <HAL_SPI_TransmitReceive+0x70>
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e4a:	d107      	bne.n	8004e5c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d103      	bne.n	8004e5c <HAL_SPI_TransmitReceive+0x68>
 8004e54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e58:	2b04      	cmp	r3, #4
 8004e5a:	d003      	beq.n	8004e64 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004e5c:	2302      	movs	r3, #2
 8004e5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004e62:	e15b      	b.n	800511c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d005      	beq.n	8004e76 <HAL_SPI_TransmitReceive+0x82>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d002      	beq.n	8004e76 <HAL_SPI_TransmitReceive+0x82>
 8004e70:	887b      	ldrh	r3, [r7, #2]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d103      	bne.n	8004e7e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004e7c:	e14e      	b.n	800511c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	2b04      	cmp	r3, #4
 8004e88:	d003      	beq.n	8004e92 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2205      	movs	r2, #5
 8004e8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2200      	movs	r2, #0
 8004e96:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	887a      	ldrh	r2, [r7, #2]
 8004ea2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	887a      	ldrh	r2, [r7, #2]
 8004ea8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	68ba      	ldr	r2, [r7, #8]
 8004eae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	887a      	ldrh	r2, [r7, #2]
 8004eb4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	887a      	ldrh	r2, [r7, #2]
 8004eba:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ed2:	2b40      	cmp	r3, #64	; 0x40
 8004ed4:	d007      	beq.n	8004ee6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ee4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004eee:	d178      	bne.n	8004fe2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d002      	beq.n	8004efe <HAL_SPI_TransmitReceive+0x10a>
 8004ef8:	8b7b      	ldrh	r3, [r7, #26]
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d166      	bne.n	8004fcc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f02:	881a      	ldrh	r2, [r3, #0]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f0e:	1c9a      	adds	r2, r3, #2
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	3b01      	subs	r3, #1
 8004f1c:	b29a      	uxth	r2, r3
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f22:	e053      	b.n	8004fcc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	f003 0302 	and.w	r3, r3, #2
 8004f2e:	2b02      	cmp	r3, #2
 8004f30:	d11b      	bne.n	8004f6a <HAL_SPI_TransmitReceive+0x176>
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d016      	beq.n	8004f6a <HAL_SPI_TransmitReceive+0x176>
 8004f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d113      	bne.n	8004f6a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f46:	881a      	ldrh	r2, [r3, #0]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f52:	1c9a      	adds	r2, r3, #2
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	3b01      	subs	r3, #1
 8004f60:	b29a      	uxth	r2, r3
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f66:	2300      	movs	r3, #0
 8004f68:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	f003 0301 	and.w	r3, r3, #1
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d119      	bne.n	8004fac <HAL_SPI_TransmitReceive+0x1b8>
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d014      	beq.n	8004fac <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	68da      	ldr	r2, [r3, #12]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f8c:	b292      	uxth	r2, r2
 8004f8e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f94:	1c9a      	adds	r2, r3, #2
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	3b01      	subs	r3, #1
 8004fa2:	b29a      	uxth	r2, r3
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004fac:	f7fd fd34 	bl	8002a18 <HAL_GetTick>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d807      	bhi.n	8004fcc <HAL_SPI_TransmitReceive+0x1d8>
 8004fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fc2:	d003      	beq.n	8004fcc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004fca:	e0a7      	b.n	800511c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d1a6      	bne.n	8004f24 <HAL_SPI_TransmitReceive+0x130>
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d1a1      	bne.n	8004f24 <HAL_SPI_TransmitReceive+0x130>
 8004fe0:	e07c      	b.n	80050dc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d002      	beq.n	8004ff0 <HAL_SPI_TransmitReceive+0x1fc>
 8004fea:	8b7b      	ldrh	r3, [r7, #26]
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d16b      	bne.n	80050c8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	330c      	adds	r3, #12
 8004ffa:	7812      	ldrb	r2, [r2, #0]
 8004ffc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005002:	1c5a      	adds	r2, r3, #1
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800500c:	b29b      	uxth	r3, r3
 800500e:	3b01      	subs	r3, #1
 8005010:	b29a      	uxth	r2, r3
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005016:	e057      	b.n	80050c8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	f003 0302 	and.w	r3, r3, #2
 8005022:	2b02      	cmp	r3, #2
 8005024:	d11c      	bne.n	8005060 <HAL_SPI_TransmitReceive+0x26c>
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800502a:	b29b      	uxth	r3, r3
 800502c:	2b00      	cmp	r3, #0
 800502e:	d017      	beq.n	8005060 <HAL_SPI_TransmitReceive+0x26c>
 8005030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005032:	2b01      	cmp	r3, #1
 8005034:	d114      	bne.n	8005060 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	330c      	adds	r3, #12
 8005040:	7812      	ldrb	r2, [r2, #0]
 8005042:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005048:	1c5a      	adds	r2, r3, #1
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005052:	b29b      	uxth	r3, r3
 8005054:	3b01      	subs	r3, #1
 8005056:	b29a      	uxth	r2, r3
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800505c:	2300      	movs	r3, #0
 800505e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	f003 0301 	and.w	r3, r3, #1
 800506a:	2b01      	cmp	r3, #1
 800506c:	d119      	bne.n	80050a2 <HAL_SPI_TransmitReceive+0x2ae>
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005072:	b29b      	uxth	r3, r3
 8005074:	2b00      	cmp	r3, #0
 8005076:	d014      	beq.n	80050a2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	68da      	ldr	r2, [r3, #12]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005082:	b2d2      	uxtb	r2, r2
 8005084:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800508a:	1c5a      	adds	r2, r3, #1
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005094:	b29b      	uxth	r3, r3
 8005096:	3b01      	subs	r3, #1
 8005098:	b29a      	uxth	r2, r3
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800509e:	2301      	movs	r3, #1
 80050a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80050a2:	f7fd fcb9 	bl	8002a18 <HAL_GetTick>
 80050a6:	4602      	mov	r2, r0
 80050a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050aa:	1ad3      	subs	r3, r2, r3
 80050ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d803      	bhi.n	80050ba <HAL_SPI_TransmitReceive+0x2c6>
 80050b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050b8:	d102      	bne.n	80050c0 <HAL_SPI_TransmitReceive+0x2cc>
 80050ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d103      	bne.n	80050c8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80050c0:	2303      	movs	r3, #3
 80050c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80050c6:	e029      	b.n	800511c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d1a2      	bne.n	8005018 <HAL_SPI_TransmitReceive+0x224>
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d19d      	bne.n	8005018 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80050dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80050e0:	68f8      	ldr	r0, [r7, #12]
 80050e2:	f000 f893 	bl	800520c <SPI_EndRxTxTransaction>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d006      	beq.n	80050fa <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2220      	movs	r2, #32
 80050f6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80050f8:	e010      	b.n	800511c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d10b      	bne.n	800511a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005102:	2300      	movs	r3, #0
 8005104:	617b      	str	r3, [r7, #20]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	617b      	str	r3, [r7, #20]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	617b      	str	r3, [r7, #20]
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	e000      	b.n	800511c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800511a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2200      	movs	r2, #0
 8005128:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800512c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005130:	4618      	mov	r0, r3
 8005132:	3730      	adds	r7, #48	; 0x30
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}

08005138 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0
 800513e:	60f8      	str	r0, [r7, #12]
 8005140:	60b9      	str	r1, [r7, #8]
 8005142:	603b      	str	r3, [r7, #0]
 8005144:	4613      	mov	r3, r2
 8005146:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005148:	e04c      	b.n	80051e4 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005150:	d048      	beq.n	80051e4 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005152:	f7fd fc61 	bl	8002a18 <HAL_GetTick>
 8005156:	4602      	mov	r2, r0
 8005158:	69bb      	ldr	r3, [r7, #24]
 800515a:	1ad3      	subs	r3, r2, r3
 800515c:	683a      	ldr	r2, [r7, #0]
 800515e:	429a      	cmp	r2, r3
 8005160:	d902      	bls.n	8005168 <SPI_WaitFlagStateUntilTimeout+0x30>
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d13d      	bne.n	80051e4 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	685a      	ldr	r2, [r3, #4]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005176:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005180:	d111      	bne.n	80051a6 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800518a:	d004      	beq.n	8005196 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005194:	d107      	bne.n	80051a6 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051a4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051ae:	d10f      	bne.n	80051d0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051be:	601a      	str	r2, [r3, #0]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80051ce:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2200      	movs	r2, #0
 80051dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80051e0:	2303      	movs	r3, #3
 80051e2:	e00f      	b.n	8005204 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	689a      	ldr	r2, [r3, #8]
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	4013      	ands	r3, r2
 80051ee:	68ba      	ldr	r2, [r7, #8]
 80051f0:	429a      	cmp	r2, r3
 80051f2:	bf0c      	ite	eq
 80051f4:	2301      	moveq	r3, #1
 80051f6:	2300      	movne	r3, #0
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	461a      	mov	r2, r3
 80051fc:	79fb      	ldrb	r3, [r7, #7]
 80051fe:	429a      	cmp	r2, r3
 8005200:	d1a3      	bne.n	800514a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005202:	2300      	movs	r3, #0
}
 8005204:	4618      	mov	r0, r3
 8005206:	3710      	adds	r7, #16
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b088      	sub	sp, #32
 8005210:	af02      	add	r7, sp, #8
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005218:	4b1b      	ldr	r3, [pc, #108]	; (8005288 <SPI_EndRxTxTransaction+0x7c>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a1b      	ldr	r2, [pc, #108]	; (800528c <SPI_EndRxTxTransaction+0x80>)
 800521e:	fba2 2303 	umull	r2, r3, r2, r3
 8005222:	0d5b      	lsrs	r3, r3, #21
 8005224:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005228:	fb02 f303 	mul.w	r3, r2, r3
 800522c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005236:	d112      	bne.n	800525e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	9300      	str	r3, [sp, #0]
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	2200      	movs	r2, #0
 8005240:	2180      	movs	r1, #128	; 0x80
 8005242:	68f8      	ldr	r0, [r7, #12]
 8005244:	f7ff ff78 	bl	8005138 <SPI_WaitFlagStateUntilTimeout>
 8005248:	4603      	mov	r3, r0
 800524a:	2b00      	cmp	r3, #0
 800524c:	d016      	beq.n	800527c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005252:	f043 0220 	orr.w	r2, r3, #32
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800525a:	2303      	movs	r3, #3
 800525c:	e00f      	b.n	800527e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d00a      	beq.n	800527a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	3b01      	subs	r3, #1
 8005268:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005274:	2b80      	cmp	r3, #128	; 0x80
 8005276:	d0f2      	beq.n	800525e <SPI_EndRxTxTransaction+0x52>
 8005278:	e000      	b.n	800527c <SPI_EndRxTxTransaction+0x70>
        break;
 800527a:	bf00      	nop
  }

  return HAL_OK;
 800527c:	2300      	movs	r3, #0
}
 800527e:	4618      	mov	r0, r3
 8005280:	3718      	adds	r7, #24
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
 8005286:	bf00      	nop
 8005288:	20000008 	.word	0x20000008
 800528c:	165e9f81 	.word	0x165e9f81

08005290 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b082      	sub	sp, #8
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d101      	bne.n	80052a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	e01d      	b.n	80052de <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d106      	bne.n	80052bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f7fd f8ca 	bl	8002450 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2202      	movs	r2, #2
 80052c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	3304      	adds	r3, #4
 80052cc:	4619      	mov	r1, r3
 80052ce:	4610      	mov	r0, r2
 80052d0:	f000 fb44 	bl	800595c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052dc:	2300      	movs	r3, #0
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3708      	adds	r7, #8
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}

080052e6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80052e6:	b480      	push	{r7}
 80052e8:	b085      	sub	sp, #20
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	68da      	ldr	r2, [r3, #12]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f042 0201 	orr.w	r2, r2, #1
 80052fc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	f003 0307 	and.w	r3, r3, #7
 8005308:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2b06      	cmp	r3, #6
 800530e:	d007      	beq.n	8005320 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f042 0201 	orr.w	r2, r2, #1
 800531e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	3714      	adds	r7, #20
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr

0800532e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800532e:	b580      	push	{r7, lr}
 8005330:	b082      	sub	sp, #8
 8005332:	af00      	add	r7, sp, #0
 8005334:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d101      	bne.n	8005340 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	e01d      	b.n	800537c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005346:	b2db      	uxtb	r3, r3
 8005348:	2b00      	cmp	r3, #0
 800534a:	d106      	bne.n	800535a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2200      	movs	r2, #0
 8005350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f7fd f8b7 	bl	80024c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2202      	movs	r2, #2
 800535e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	3304      	adds	r3, #4
 800536a:	4619      	mov	r1, r3
 800536c:	4610      	mov	r0, r2
 800536e:	f000 faf5 	bl	800595c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2201      	movs	r2, #1
 8005376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800537a:	2300      	movs	r3, #0
}
 800537c:	4618      	mov	r0, r3
 800537e:	3708      	adds	r7, #8
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}

08005384 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b084      	sub	sp, #16
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2201      	movs	r2, #1
 8005394:	6839      	ldr	r1, [r7, #0]
 8005396:	4618      	mov	r0, r3
 8005398:	f000 fdca 	bl	8005f30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a15      	ldr	r2, [pc, #84]	; (80053f8 <HAL_TIM_PWM_Start+0x74>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d004      	beq.n	80053b0 <HAL_TIM_PWM_Start+0x2c>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a14      	ldr	r2, [pc, #80]	; (80053fc <HAL_TIM_PWM_Start+0x78>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d101      	bne.n	80053b4 <HAL_TIM_PWM_Start+0x30>
 80053b0:	2301      	movs	r3, #1
 80053b2:	e000      	b.n	80053b6 <HAL_TIM_PWM_Start+0x32>
 80053b4:	2300      	movs	r3, #0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d007      	beq.n	80053ca <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80053c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	f003 0307 	and.w	r3, r3, #7
 80053d4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2b06      	cmp	r3, #6
 80053da:	d007      	beq.n	80053ec <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f042 0201 	orr.w	r2, r2, #1
 80053ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053ec:	2300      	movs	r3, #0
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3710      	adds	r7, #16
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}
 80053f6:	bf00      	nop
 80053f8:	40010000 	.word	0x40010000
 80053fc:	40010400 	.word	0x40010400

08005400 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b082      	sub	sp, #8
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	f003 0302 	and.w	r3, r3, #2
 8005412:	2b02      	cmp	r3, #2
 8005414:	d122      	bne.n	800545c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	f003 0302 	and.w	r3, r3, #2
 8005420:	2b02      	cmp	r3, #2
 8005422:	d11b      	bne.n	800545c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f06f 0202 	mvn.w	r2, #2
 800542c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2201      	movs	r2, #1
 8005432:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	699b      	ldr	r3, [r3, #24]
 800543a:	f003 0303 	and.w	r3, r3, #3
 800543e:	2b00      	cmp	r3, #0
 8005440:	d003      	beq.n	800544a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 fa6b 	bl	800591e <HAL_TIM_IC_CaptureCallback>
 8005448:	e005      	b.n	8005456 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 fa5d 	bl	800590a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f000 fa6e 	bl	8005932 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	691b      	ldr	r3, [r3, #16]
 8005462:	f003 0304 	and.w	r3, r3, #4
 8005466:	2b04      	cmp	r3, #4
 8005468:	d122      	bne.n	80054b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	f003 0304 	and.w	r3, r3, #4
 8005474:	2b04      	cmp	r3, #4
 8005476:	d11b      	bne.n	80054b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f06f 0204 	mvn.w	r2, #4
 8005480:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2202      	movs	r2, #2
 8005486:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	699b      	ldr	r3, [r3, #24]
 800548e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005492:	2b00      	cmp	r3, #0
 8005494:	d003      	beq.n	800549e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f000 fa41 	bl	800591e <HAL_TIM_IC_CaptureCallback>
 800549c:	e005      	b.n	80054aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 fa33 	bl	800590a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f000 fa44 	bl	8005932 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	f003 0308 	and.w	r3, r3, #8
 80054ba:	2b08      	cmp	r3, #8
 80054bc:	d122      	bne.n	8005504 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	f003 0308 	and.w	r3, r3, #8
 80054c8:	2b08      	cmp	r3, #8
 80054ca:	d11b      	bne.n	8005504 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f06f 0208 	mvn.w	r2, #8
 80054d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2204      	movs	r2, #4
 80054da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	69db      	ldr	r3, [r3, #28]
 80054e2:	f003 0303 	and.w	r3, r3, #3
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d003      	beq.n	80054f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f000 fa17 	bl	800591e <HAL_TIM_IC_CaptureCallback>
 80054f0:	e005      	b.n	80054fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 fa09 	bl	800590a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f000 fa1a 	bl	8005932 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	691b      	ldr	r3, [r3, #16]
 800550a:	f003 0310 	and.w	r3, r3, #16
 800550e:	2b10      	cmp	r3, #16
 8005510:	d122      	bne.n	8005558 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	f003 0310 	and.w	r3, r3, #16
 800551c:	2b10      	cmp	r3, #16
 800551e:	d11b      	bne.n	8005558 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f06f 0210 	mvn.w	r2, #16
 8005528:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2208      	movs	r2, #8
 800552e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	69db      	ldr	r3, [r3, #28]
 8005536:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800553a:	2b00      	cmp	r3, #0
 800553c:	d003      	beq.n	8005546 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 f9ed 	bl	800591e <HAL_TIM_IC_CaptureCallback>
 8005544:	e005      	b.n	8005552 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 f9df 	bl	800590a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f000 f9f0 	bl	8005932 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	691b      	ldr	r3, [r3, #16]
 800555e:	f003 0301 	and.w	r3, r3, #1
 8005562:	2b01      	cmp	r3, #1
 8005564:	d10e      	bne.n	8005584 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	f003 0301 	and.w	r3, r3, #1
 8005570:	2b01      	cmp	r3, #1
 8005572:	d107      	bne.n	8005584 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f06f 0201 	mvn.w	r2, #1
 800557c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f7fc fa56 	bl	8001a30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800558e:	2b80      	cmp	r3, #128	; 0x80
 8005590:	d10e      	bne.n	80055b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800559c:	2b80      	cmp	r3, #128	; 0x80
 800559e:	d107      	bne.n	80055b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80055a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f000 fdbe 	bl	800612c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ba:	2b40      	cmp	r3, #64	; 0x40
 80055bc:	d10e      	bne.n	80055dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055c8:	2b40      	cmp	r3, #64	; 0x40
 80055ca:	d107      	bne.n	80055dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80055d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 f9b5 	bl	8005946 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	f003 0320 	and.w	r3, r3, #32
 80055e6:	2b20      	cmp	r3, #32
 80055e8:	d10e      	bne.n	8005608 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	f003 0320 	and.w	r3, r3, #32
 80055f4:	2b20      	cmp	r3, #32
 80055f6:	d107      	bne.n	8005608 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f06f 0220 	mvn.w	r2, #32
 8005600:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 fd88 	bl	8006118 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005608:	bf00      	nop
 800560a:	3708      	adds	r7, #8
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}

08005610 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005622:	2b01      	cmp	r3, #1
 8005624:	d101      	bne.n	800562a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005626:	2302      	movs	r3, #2
 8005628:	e0b4      	b.n	8005794 <HAL_TIM_PWM_ConfigChannel+0x184>
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2201      	movs	r2, #1
 800562e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2202      	movs	r2, #2
 8005636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2b0c      	cmp	r3, #12
 800563e:	f200 809f 	bhi.w	8005780 <HAL_TIM_PWM_ConfigChannel+0x170>
 8005642:	a201      	add	r2, pc, #4	; (adr r2, 8005648 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005648:	0800567d 	.word	0x0800567d
 800564c:	08005781 	.word	0x08005781
 8005650:	08005781 	.word	0x08005781
 8005654:	08005781 	.word	0x08005781
 8005658:	080056bd 	.word	0x080056bd
 800565c:	08005781 	.word	0x08005781
 8005660:	08005781 	.word	0x08005781
 8005664:	08005781 	.word	0x08005781
 8005668:	080056ff 	.word	0x080056ff
 800566c:	08005781 	.word	0x08005781
 8005670:	08005781 	.word	0x08005781
 8005674:	08005781 	.word	0x08005781
 8005678:	0800573f 	.word	0x0800573f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	68b9      	ldr	r1, [r7, #8]
 8005682:	4618      	mov	r0, r3
 8005684:	f000 fa0a 	bl	8005a9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	699a      	ldr	r2, [r3, #24]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f042 0208 	orr.w	r2, r2, #8
 8005696:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	699a      	ldr	r2, [r3, #24]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f022 0204 	bic.w	r2, r2, #4
 80056a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	6999      	ldr	r1, [r3, #24]
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	691a      	ldr	r2, [r3, #16]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	430a      	orrs	r2, r1
 80056b8:	619a      	str	r2, [r3, #24]
      break;
 80056ba:	e062      	b.n	8005782 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	68b9      	ldr	r1, [r7, #8]
 80056c2:	4618      	mov	r0, r3
 80056c4:	f000 fa5a 	bl	8005b7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	699a      	ldr	r2, [r3, #24]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	699a      	ldr	r2, [r3, #24]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	6999      	ldr	r1, [r3, #24]
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	021a      	lsls	r2, r3, #8
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	430a      	orrs	r2, r1
 80056fa:	619a      	str	r2, [r3, #24]
      break;
 80056fc:	e041      	b.n	8005782 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	68b9      	ldr	r1, [r7, #8]
 8005704:	4618      	mov	r0, r3
 8005706:	f000 faaf 	bl	8005c68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	69da      	ldr	r2, [r3, #28]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f042 0208 	orr.w	r2, r2, #8
 8005718:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	69da      	ldr	r2, [r3, #28]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f022 0204 	bic.w	r2, r2, #4
 8005728:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	69d9      	ldr	r1, [r3, #28]
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	691a      	ldr	r2, [r3, #16]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	430a      	orrs	r2, r1
 800573a:	61da      	str	r2, [r3, #28]
      break;
 800573c:	e021      	b.n	8005782 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68b9      	ldr	r1, [r7, #8]
 8005744:	4618      	mov	r0, r3
 8005746:	f000 fb03 	bl	8005d50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	69da      	ldr	r2, [r3, #28]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005758:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	69da      	ldr	r2, [r3, #28]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005768:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	69d9      	ldr	r1, [r3, #28]
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	691b      	ldr	r3, [r3, #16]
 8005774:	021a      	lsls	r2, r3, #8
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	430a      	orrs	r2, r1
 800577c:	61da      	str	r2, [r3, #28]
      break;
 800577e:	e000      	b.n	8005782 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005780:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2201      	movs	r2, #1
 8005786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2200      	movs	r2, #0
 800578e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005792:	2300      	movs	r3, #0
}
 8005794:	4618      	mov	r0, r3
 8005796:	3710      	adds	r7, #16
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b084      	sub	sp, #16
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d101      	bne.n	80057b4 <HAL_TIM_ConfigClockSource+0x18>
 80057b0:	2302      	movs	r3, #2
 80057b2:	e0a6      	b.n	8005902 <HAL_TIM_ConfigClockSource+0x166>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2202      	movs	r2, #2
 80057c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80057d2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057da:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	68fa      	ldr	r2, [r7, #12]
 80057e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2b40      	cmp	r3, #64	; 0x40
 80057ea:	d067      	beq.n	80058bc <HAL_TIM_ConfigClockSource+0x120>
 80057ec:	2b40      	cmp	r3, #64	; 0x40
 80057ee:	d80b      	bhi.n	8005808 <HAL_TIM_ConfigClockSource+0x6c>
 80057f0:	2b10      	cmp	r3, #16
 80057f2:	d073      	beq.n	80058dc <HAL_TIM_ConfigClockSource+0x140>
 80057f4:	2b10      	cmp	r3, #16
 80057f6:	d802      	bhi.n	80057fe <HAL_TIM_ConfigClockSource+0x62>
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d06f      	beq.n	80058dc <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80057fc:	e078      	b.n	80058f0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80057fe:	2b20      	cmp	r3, #32
 8005800:	d06c      	beq.n	80058dc <HAL_TIM_ConfigClockSource+0x140>
 8005802:	2b30      	cmp	r3, #48	; 0x30
 8005804:	d06a      	beq.n	80058dc <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005806:	e073      	b.n	80058f0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005808:	2b70      	cmp	r3, #112	; 0x70
 800580a:	d00d      	beq.n	8005828 <HAL_TIM_ConfigClockSource+0x8c>
 800580c:	2b70      	cmp	r3, #112	; 0x70
 800580e:	d804      	bhi.n	800581a <HAL_TIM_ConfigClockSource+0x7e>
 8005810:	2b50      	cmp	r3, #80	; 0x50
 8005812:	d033      	beq.n	800587c <HAL_TIM_ConfigClockSource+0xe0>
 8005814:	2b60      	cmp	r3, #96	; 0x60
 8005816:	d041      	beq.n	800589c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005818:	e06a      	b.n	80058f0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800581a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800581e:	d066      	beq.n	80058ee <HAL_TIM_ConfigClockSource+0x152>
 8005820:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005824:	d017      	beq.n	8005856 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005826:	e063      	b.n	80058f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6818      	ldr	r0, [r3, #0]
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	6899      	ldr	r1, [r3, #8]
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	685a      	ldr	r2, [r3, #4]
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	f000 fb5a 	bl	8005ef0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800584a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	68fa      	ldr	r2, [r7, #12]
 8005852:	609a      	str	r2, [r3, #8]
      break;
 8005854:	e04c      	b.n	80058f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6818      	ldr	r0, [r3, #0]
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	6899      	ldr	r1, [r3, #8]
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	685a      	ldr	r2, [r3, #4]
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	f000 fb43 	bl	8005ef0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	689a      	ldr	r2, [r3, #8]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005878:	609a      	str	r2, [r3, #8]
      break;
 800587a:	e039      	b.n	80058f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6818      	ldr	r0, [r3, #0]
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	6859      	ldr	r1, [r3, #4]
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	461a      	mov	r2, r3
 800588a:	f000 fab7 	bl	8005dfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	2150      	movs	r1, #80	; 0x50
 8005894:	4618      	mov	r0, r3
 8005896:	f000 fb10 	bl	8005eba <TIM_ITRx_SetConfig>
      break;
 800589a:	e029      	b.n	80058f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6818      	ldr	r0, [r3, #0]
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	6859      	ldr	r1, [r3, #4]
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	461a      	mov	r2, r3
 80058aa:	f000 fad6 	bl	8005e5a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	2160      	movs	r1, #96	; 0x60
 80058b4:	4618      	mov	r0, r3
 80058b6:	f000 fb00 	bl	8005eba <TIM_ITRx_SetConfig>
      break;
 80058ba:	e019      	b.n	80058f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6818      	ldr	r0, [r3, #0]
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	6859      	ldr	r1, [r3, #4]
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	461a      	mov	r2, r3
 80058ca:	f000 fa97 	bl	8005dfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	2140      	movs	r1, #64	; 0x40
 80058d4:	4618      	mov	r0, r3
 80058d6:	f000 faf0 	bl	8005eba <TIM_ITRx_SetConfig>
      break;
 80058da:	e009      	b.n	80058f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4619      	mov	r1, r3
 80058e6:	4610      	mov	r0, r2
 80058e8:	f000 fae7 	bl	8005eba <TIM_ITRx_SetConfig>
      break;
 80058ec:	e000      	b.n	80058f0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80058ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3710      	adds	r7, #16
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}

0800590a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800590a:	b480      	push	{r7}
 800590c:	b083      	sub	sp, #12
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005912:	bf00      	nop
 8005914:	370c      	adds	r7, #12
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr

0800591e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800591e:	b480      	push	{r7}
 8005920:	b083      	sub	sp, #12
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005926:	bf00      	nop
 8005928:	370c      	adds	r7, #12
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr

08005932 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005932:	b480      	push	{r7}
 8005934:	b083      	sub	sp, #12
 8005936:	af00      	add	r7, sp, #0
 8005938:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800593a:	bf00      	nop
 800593c:	370c      	adds	r7, #12
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr

08005946 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005946:	b480      	push	{r7}
 8005948:	b083      	sub	sp, #12
 800594a:	af00      	add	r7, sp, #0
 800594c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800594e:	bf00      	nop
 8005950:	370c      	adds	r7, #12
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr
	...

0800595c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800595c:	b480      	push	{r7}
 800595e:	b085      	sub	sp, #20
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4a40      	ldr	r2, [pc, #256]	; (8005a70 <TIM_Base_SetConfig+0x114>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d013      	beq.n	800599c <TIM_Base_SetConfig+0x40>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800597a:	d00f      	beq.n	800599c <TIM_Base_SetConfig+0x40>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4a3d      	ldr	r2, [pc, #244]	; (8005a74 <TIM_Base_SetConfig+0x118>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d00b      	beq.n	800599c <TIM_Base_SetConfig+0x40>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4a3c      	ldr	r2, [pc, #240]	; (8005a78 <TIM_Base_SetConfig+0x11c>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d007      	beq.n	800599c <TIM_Base_SetConfig+0x40>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	4a3b      	ldr	r2, [pc, #236]	; (8005a7c <TIM_Base_SetConfig+0x120>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d003      	beq.n	800599c <TIM_Base_SetConfig+0x40>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	4a3a      	ldr	r2, [pc, #232]	; (8005a80 <TIM_Base_SetConfig+0x124>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d108      	bne.n	80059ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	68fa      	ldr	r2, [r7, #12]
 80059aa:	4313      	orrs	r3, r2
 80059ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a2f      	ldr	r2, [pc, #188]	; (8005a70 <TIM_Base_SetConfig+0x114>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d02b      	beq.n	8005a0e <TIM_Base_SetConfig+0xb2>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059bc:	d027      	beq.n	8005a0e <TIM_Base_SetConfig+0xb2>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a2c      	ldr	r2, [pc, #176]	; (8005a74 <TIM_Base_SetConfig+0x118>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d023      	beq.n	8005a0e <TIM_Base_SetConfig+0xb2>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a2b      	ldr	r2, [pc, #172]	; (8005a78 <TIM_Base_SetConfig+0x11c>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d01f      	beq.n	8005a0e <TIM_Base_SetConfig+0xb2>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a2a      	ldr	r2, [pc, #168]	; (8005a7c <TIM_Base_SetConfig+0x120>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d01b      	beq.n	8005a0e <TIM_Base_SetConfig+0xb2>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4a29      	ldr	r2, [pc, #164]	; (8005a80 <TIM_Base_SetConfig+0x124>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d017      	beq.n	8005a0e <TIM_Base_SetConfig+0xb2>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a28      	ldr	r2, [pc, #160]	; (8005a84 <TIM_Base_SetConfig+0x128>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d013      	beq.n	8005a0e <TIM_Base_SetConfig+0xb2>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a27      	ldr	r2, [pc, #156]	; (8005a88 <TIM_Base_SetConfig+0x12c>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d00f      	beq.n	8005a0e <TIM_Base_SetConfig+0xb2>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4a26      	ldr	r2, [pc, #152]	; (8005a8c <TIM_Base_SetConfig+0x130>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d00b      	beq.n	8005a0e <TIM_Base_SetConfig+0xb2>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4a25      	ldr	r2, [pc, #148]	; (8005a90 <TIM_Base_SetConfig+0x134>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d007      	beq.n	8005a0e <TIM_Base_SetConfig+0xb2>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4a24      	ldr	r2, [pc, #144]	; (8005a94 <TIM_Base_SetConfig+0x138>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d003      	beq.n	8005a0e <TIM_Base_SetConfig+0xb2>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4a23      	ldr	r2, [pc, #140]	; (8005a98 <TIM_Base_SetConfig+0x13c>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d108      	bne.n	8005a20 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	68fa      	ldr	r2, [r7, #12]
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	695b      	ldr	r3, [r3, #20]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	68fa      	ldr	r2, [r7, #12]
 8005a32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	689a      	ldr	r2, [r3, #8]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	4a0a      	ldr	r2, [pc, #40]	; (8005a70 <TIM_Base_SetConfig+0x114>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d003      	beq.n	8005a54 <TIM_Base_SetConfig+0xf8>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4a0c      	ldr	r2, [pc, #48]	; (8005a80 <TIM_Base_SetConfig+0x124>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d103      	bne.n	8005a5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	691a      	ldr	r2, [r3, #16]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	615a      	str	r2, [r3, #20]
}
 8005a62:	bf00      	nop
 8005a64:	3714      	adds	r7, #20
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr
 8005a6e:	bf00      	nop
 8005a70:	40010000 	.word	0x40010000
 8005a74:	40000400 	.word	0x40000400
 8005a78:	40000800 	.word	0x40000800
 8005a7c:	40000c00 	.word	0x40000c00
 8005a80:	40010400 	.word	0x40010400
 8005a84:	40014000 	.word	0x40014000
 8005a88:	40014400 	.word	0x40014400
 8005a8c:	40014800 	.word	0x40014800
 8005a90:	40001800 	.word	0x40001800
 8005a94:	40001c00 	.word	0x40001c00
 8005a98:	40002000 	.word	0x40002000

08005a9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b087      	sub	sp, #28
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6a1b      	ldr	r3, [r3, #32]
 8005aaa:	f023 0201 	bic.w	r2, r3, #1
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a1b      	ldr	r3, [r3, #32]
 8005ab6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	699b      	ldr	r3, [r3, #24]
 8005ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f023 0303 	bic.w	r3, r3, #3
 8005ad2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	68fa      	ldr	r2, [r7, #12]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	f023 0302 	bic.w	r3, r3, #2
 8005ae4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	697a      	ldr	r2, [r7, #20]
 8005aec:	4313      	orrs	r3, r2
 8005aee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	4a20      	ldr	r2, [pc, #128]	; (8005b74 <TIM_OC1_SetConfig+0xd8>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d003      	beq.n	8005b00 <TIM_OC1_SetConfig+0x64>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	4a1f      	ldr	r2, [pc, #124]	; (8005b78 <TIM_OC1_SetConfig+0xdc>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d10c      	bne.n	8005b1a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	f023 0308 	bic.w	r3, r3, #8
 8005b06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	697a      	ldr	r2, [r7, #20]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	f023 0304 	bic.w	r3, r3, #4
 8005b18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a15      	ldr	r2, [pc, #84]	; (8005b74 <TIM_OC1_SetConfig+0xd8>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d003      	beq.n	8005b2a <TIM_OC1_SetConfig+0x8e>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a14      	ldr	r2, [pc, #80]	; (8005b78 <TIM_OC1_SetConfig+0xdc>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d111      	bne.n	8005b4e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	695b      	ldr	r3, [r3, #20]
 8005b3e:	693a      	ldr	r2, [r7, #16]
 8005b40:	4313      	orrs	r3, r2
 8005b42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	699b      	ldr	r3, [r3, #24]
 8005b48:	693a      	ldr	r2, [r7, #16]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	693a      	ldr	r2, [r7, #16]
 8005b52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	68fa      	ldr	r2, [r7, #12]
 8005b58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	685a      	ldr	r2, [r3, #4]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	697a      	ldr	r2, [r7, #20]
 8005b66:	621a      	str	r2, [r3, #32]
}
 8005b68:	bf00      	nop
 8005b6a:	371c      	adds	r7, #28
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr
 8005b74:	40010000 	.word	0x40010000
 8005b78:	40010400 	.word	0x40010400

08005b7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b087      	sub	sp, #28
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6a1b      	ldr	r3, [r3, #32]
 8005b8a:	f023 0210 	bic.w	r2, r3, #16
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6a1b      	ldr	r3, [r3, #32]
 8005b96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	699b      	ldr	r3, [r3, #24]
 8005ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005baa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	021b      	lsls	r3, r3, #8
 8005bba:	68fa      	ldr	r2, [r7, #12]
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	f023 0320 	bic.w	r3, r3, #32
 8005bc6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	011b      	lsls	r3, r3, #4
 8005bce:	697a      	ldr	r2, [r7, #20]
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	4a22      	ldr	r2, [pc, #136]	; (8005c60 <TIM_OC2_SetConfig+0xe4>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d003      	beq.n	8005be4 <TIM_OC2_SetConfig+0x68>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	4a21      	ldr	r2, [pc, #132]	; (8005c64 <TIM_OC2_SetConfig+0xe8>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d10d      	bne.n	8005c00 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	011b      	lsls	r3, r3, #4
 8005bf2:	697a      	ldr	r2, [r7, #20]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bfe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4a17      	ldr	r2, [pc, #92]	; (8005c60 <TIM_OC2_SetConfig+0xe4>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d003      	beq.n	8005c10 <TIM_OC2_SetConfig+0x94>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	4a16      	ldr	r2, [pc, #88]	; (8005c64 <TIM_OC2_SetConfig+0xe8>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d113      	bne.n	8005c38 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c16:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c1e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	695b      	ldr	r3, [r3, #20]
 8005c24:	009b      	lsls	r3, r3, #2
 8005c26:	693a      	ldr	r2, [r7, #16]
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	699b      	ldr	r3, [r3, #24]
 8005c30:	009b      	lsls	r3, r3, #2
 8005c32:	693a      	ldr	r2, [r7, #16]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	693a      	ldr	r2, [r7, #16]
 8005c3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	68fa      	ldr	r2, [r7, #12]
 8005c42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	685a      	ldr	r2, [r3, #4]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	697a      	ldr	r2, [r7, #20]
 8005c50:	621a      	str	r2, [r3, #32]
}
 8005c52:	bf00      	nop
 8005c54:	371c      	adds	r7, #28
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr
 8005c5e:	bf00      	nop
 8005c60:	40010000 	.word	0x40010000
 8005c64:	40010400 	.word	0x40010400

08005c68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b087      	sub	sp, #28
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6a1b      	ldr	r3, [r3, #32]
 8005c76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a1b      	ldr	r3, [r3, #32]
 8005c82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	69db      	ldr	r3, [r3, #28]
 8005c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f023 0303 	bic.w	r3, r3, #3
 8005c9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	68fa      	ldr	r2, [r7, #12]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005cb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	021b      	lsls	r3, r3, #8
 8005cb8:	697a      	ldr	r2, [r7, #20]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4a21      	ldr	r2, [pc, #132]	; (8005d48 <TIM_OC3_SetConfig+0xe0>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d003      	beq.n	8005cce <TIM_OC3_SetConfig+0x66>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4a20      	ldr	r2, [pc, #128]	; (8005d4c <TIM_OC3_SetConfig+0xe4>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d10d      	bne.n	8005cea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005cd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	68db      	ldr	r3, [r3, #12]
 8005cda:	021b      	lsls	r3, r3, #8
 8005cdc:	697a      	ldr	r2, [r7, #20]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ce8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4a16      	ldr	r2, [pc, #88]	; (8005d48 <TIM_OC3_SetConfig+0xe0>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d003      	beq.n	8005cfa <TIM_OC3_SetConfig+0x92>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	4a15      	ldr	r2, [pc, #84]	; (8005d4c <TIM_OC3_SetConfig+0xe4>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d113      	bne.n	8005d22 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	695b      	ldr	r3, [r3, #20]
 8005d0e:	011b      	lsls	r3, r3, #4
 8005d10:	693a      	ldr	r2, [r7, #16]
 8005d12:	4313      	orrs	r3, r2
 8005d14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	699b      	ldr	r3, [r3, #24]
 8005d1a:	011b      	lsls	r3, r3, #4
 8005d1c:	693a      	ldr	r2, [r7, #16]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	693a      	ldr	r2, [r7, #16]
 8005d26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	68fa      	ldr	r2, [r7, #12]
 8005d2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	685a      	ldr	r2, [r3, #4]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	697a      	ldr	r2, [r7, #20]
 8005d3a:	621a      	str	r2, [r3, #32]
}
 8005d3c:	bf00      	nop
 8005d3e:	371c      	adds	r7, #28
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr
 8005d48:	40010000 	.word	0x40010000
 8005d4c:	40010400 	.word	0x40010400

08005d50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b087      	sub	sp, #28
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6a1b      	ldr	r3, [r3, #32]
 8005d5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6a1b      	ldr	r3, [r3, #32]
 8005d6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	69db      	ldr	r3, [r3, #28]
 8005d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	021b      	lsls	r3, r3, #8
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	4313      	orrs	r3, r2
 8005d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	031b      	lsls	r3, r3, #12
 8005da2:	693a      	ldr	r2, [r7, #16]
 8005da4:	4313      	orrs	r3, r2
 8005da6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	4a12      	ldr	r2, [pc, #72]	; (8005df4 <TIM_OC4_SetConfig+0xa4>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d003      	beq.n	8005db8 <TIM_OC4_SetConfig+0x68>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	4a11      	ldr	r2, [pc, #68]	; (8005df8 <TIM_OC4_SetConfig+0xa8>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d109      	bne.n	8005dcc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005dbe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	695b      	ldr	r3, [r3, #20]
 8005dc4:	019b      	lsls	r3, r3, #6
 8005dc6:	697a      	ldr	r2, [r7, #20]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	697a      	ldr	r2, [r7, #20]
 8005dd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	68fa      	ldr	r2, [r7, #12]
 8005dd6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	685a      	ldr	r2, [r3, #4]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	693a      	ldr	r2, [r7, #16]
 8005de4:	621a      	str	r2, [r3, #32]
}
 8005de6:	bf00      	nop
 8005de8:	371c      	adds	r7, #28
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr
 8005df2:	bf00      	nop
 8005df4:	40010000 	.word	0x40010000
 8005df8:	40010400 	.word	0x40010400

08005dfc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b087      	sub	sp, #28
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	60b9      	str	r1, [r7, #8]
 8005e06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	6a1b      	ldr	r3, [r3, #32]
 8005e0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	6a1b      	ldr	r3, [r3, #32]
 8005e12:	f023 0201 	bic.w	r2, r3, #1
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	699b      	ldr	r3, [r3, #24]
 8005e1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	011b      	lsls	r3, r3, #4
 8005e2c:	693a      	ldr	r2, [r7, #16]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	f023 030a 	bic.w	r3, r3, #10
 8005e38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e3a:	697a      	ldr	r2, [r7, #20]
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	693a      	ldr	r2, [r7, #16]
 8005e46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	697a      	ldr	r2, [r7, #20]
 8005e4c:	621a      	str	r2, [r3, #32]
}
 8005e4e:	bf00      	nop
 8005e50:	371c      	adds	r7, #28
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr

08005e5a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e5a:	b480      	push	{r7}
 8005e5c:	b087      	sub	sp, #28
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	60f8      	str	r0, [r7, #12]
 8005e62:	60b9      	str	r1, [r7, #8]
 8005e64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	6a1b      	ldr	r3, [r3, #32]
 8005e6a:	f023 0210 	bic.w	r2, r3, #16
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	699b      	ldr	r3, [r3, #24]
 8005e76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6a1b      	ldr	r3, [r3, #32]
 8005e7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	031b      	lsls	r3, r3, #12
 8005e8a:	697a      	ldr	r2, [r7, #20]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e96:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	011b      	lsls	r3, r3, #4
 8005e9c:	693a      	ldr	r2, [r7, #16]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	697a      	ldr	r2, [r7, #20]
 8005ea6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	693a      	ldr	r2, [r7, #16]
 8005eac:	621a      	str	r2, [r3, #32]
}
 8005eae:	bf00      	nop
 8005eb0:	371c      	adds	r7, #28
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr

08005eba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005eba:	b480      	push	{r7}
 8005ebc:	b085      	sub	sp, #20
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	6078      	str	r0, [r7, #4]
 8005ec2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ed0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ed2:	683a      	ldr	r2, [r7, #0]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	f043 0307 	orr.w	r3, r3, #7
 8005edc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	68fa      	ldr	r2, [r7, #12]
 8005ee2:	609a      	str	r2, [r3, #8]
}
 8005ee4:	bf00      	nop
 8005ee6:	3714      	adds	r7, #20
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b087      	sub	sp, #28
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	60b9      	str	r1, [r7, #8]
 8005efa:	607a      	str	r2, [r7, #4]
 8005efc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	021a      	lsls	r2, r3, #8
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	431a      	orrs	r2, r3
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	4313      	orrs	r3, r2
 8005f18:	697a      	ldr	r2, [r7, #20]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	697a      	ldr	r2, [r7, #20]
 8005f22:	609a      	str	r2, [r3, #8]
}
 8005f24:	bf00      	nop
 8005f26:	371c      	adds	r7, #28
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b087      	sub	sp, #28
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	60f8      	str	r0, [r7, #12]
 8005f38:	60b9      	str	r1, [r7, #8]
 8005f3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	f003 031f 	and.w	r3, r3, #31
 8005f42:	2201      	movs	r2, #1
 8005f44:	fa02 f303 	lsl.w	r3, r2, r3
 8005f48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	6a1a      	ldr	r2, [r3, #32]
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	43db      	mvns	r3, r3
 8005f52:	401a      	ands	r2, r3
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6a1a      	ldr	r2, [r3, #32]
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	f003 031f 	and.w	r3, r3, #31
 8005f62:	6879      	ldr	r1, [r7, #4]
 8005f64:	fa01 f303 	lsl.w	r3, r1, r3
 8005f68:	431a      	orrs	r2, r3
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	621a      	str	r2, [r3, #32]
}
 8005f6e:	bf00      	nop
 8005f70:	371c      	adds	r7, #28
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr
	...

08005f7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b085      	sub	sp, #20
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d101      	bne.n	8005f94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f90:	2302      	movs	r3, #2
 8005f92:	e05a      	b.n	800604a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2202      	movs	r2, #2
 8005fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	68fa      	ldr	r2, [r7, #12]
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	68fa      	ldr	r2, [r7, #12]
 8005fcc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a21      	ldr	r2, [pc, #132]	; (8006058 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d022      	beq.n	800601e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fe0:	d01d      	beq.n	800601e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a1d      	ldr	r2, [pc, #116]	; (800605c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d018      	beq.n	800601e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a1b      	ldr	r2, [pc, #108]	; (8006060 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d013      	beq.n	800601e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a1a      	ldr	r2, [pc, #104]	; (8006064 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d00e      	beq.n	800601e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a18      	ldr	r2, [pc, #96]	; (8006068 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d009      	beq.n	800601e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a17      	ldr	r2, [pc, #92]	; (800606c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d004      	beq.n	800601e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a15      	ldr	r2, [pc, #84]	; (8006070 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d10c      	bne.n	8006038 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006024:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	68ba      	ldr	r2, [r7, #8]
 800602c:	4313      	orrs	r3, r2
 800602e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	68ba      	ldr	r2, [r7, #8]
 8006036:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2201      	movs	r2, #1
 800603c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2200      	movs	r2, #0
 8006044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006048:	2300      	movs	r3, #0
}
 800604a:	4618      	mov	r0, r3
 800604c:	3714      	adds	r7, #20
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr
 8006056:	bf00      	nop
 8006058:	40010000 	.word	0x40010000
 800605c:	40000400 	.word	0x40000400
 8006060:	40000800 	.word	0x40000800
 8006064:	40000c00 	.word	0x40000c00
 8006068:	40010400 	.word	0x40010400
 800606c:	40014000 	.word	0x40014000
 8006070:	40001800 	.word	0x40001800

08006074 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006074:	b480      	push	{r7}
 8006076:	b085      	sub	sp, #20
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800607e:	2300      	movs	r3, #0
 8006080:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006088:	2b01      	cmp	r3, #1
 800608a:	d101      	bne.n	8006090 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800608c:	2302      	movs	r3, #2
 800608e:	e03d      	b.n	800610c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2201      	movs	r2, #1
 8006094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	68db      	ldr	r3, [r3, #12]
 80060a2:	4313      	orrs	r3, r2
 80060a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	4313      	orrs	r3, r2
 80060b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	4313      	orrs	r3, r2
 80060c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4313      	orrs	r3, r2
 80060ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	691b      	ldr	r3, [r3, #16]
 80060da:	4313      	orrs	r3, r2
 80060dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	695b      	ldr	r3, [r3, #20]
 80060e8:	4313      	orrs	r3, r2
 80060ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	69db      	ldr	r3, [r3, #28]
 80060f6:	4313      	orrs	r3, r2
 80060f8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	68fa      	ldr	r2, [r7, #12]
 8006100:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2200      	movs	r2, #0
 8006106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800610a:	2300      	movs	r3, #0
}
 800610c:	4618      	mov	r0, r3
 800610e:	3714      	adds	r7, #20
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr

08006118 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006118:	b480      	push	{r7}
 800611a:	b083      	sub	sp, #12
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006120:	bf00      	nop
 8006122:	370c      	adds	r7, #12
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr

0800612c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800612c:	b480      	push	{r7}
 800612e:	b083      	sub	sp, #12
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006134:	bf00      	nop
 8006136:	370c      	adds	r7, #12
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr

08006140 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b082      	sub	sp, #8
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d101      	bne.n	8006152 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	e03f      	b.n	80061d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006158:	b2db      	uxtb	r3, r3
 800615a:	2b00      	cmp	r3, #0
 800615c:	d106      	bne.n	800616c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2200      	movs	r2, #0
 8006162:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f7fc fb10 	bl	800278c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2224      	movs	r2, #36	; 0x24
 8006170:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	68da      	ldr	r2, [r3, #12]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006182:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f000 fbb5 	bl	80068f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	691a      	ldr	r2, [r3, #16]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006198:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	695a      	ldr	r2, [r3, #20]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80061a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	68da      	ldr	r2, [r3, #12]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80061b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2220      	movs	r2, #32
 80061c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2220      	movs	r2, #32
 80061cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80061d0:	2300      	movs	r3, #0
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3708      	adds	r7, #8
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}

080061da <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061da:	b480      	push	{r7}
 80061dc:	b085      	sub	sp, #20
 80061de:	af00      	add	r7, sp, #0
 80061e0:	60f8      	str	r0, [r7, #12]
 80061e2:	60b9      	str	r1, [r7, #8]
 80061e4:	4613      	mov	r3, r2
 80061e6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	2b20      	cmp	r3, #32
 80061f2:	d140      	bne.n	8006276 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d002      	beq.n	8006200 <HAL_UART_Receive_IT+0x26>
 80061fa:	88fb      	ldrh	r3, [r7, #6]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d101      	bne.n	8006204 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	e039      	b.n	8006278 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800620a:	2b01      	cmp	r3, #1
 800620c:	d101      	bne.n	8006212 <HAL_UART_Receive_IT+0x38>
 800620e:	2302      	movs	r3, #2
 8006210:	e032      	b.n	8006278 <HAL_UART_Receive_IT+0x9e>
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2201      	movs	r2, #1
 8006216:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	68ba      	ldr	r2, [r7, #8]
 800621e:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	88fa      	ldrh	r2, [r7, #6]
 8006224:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	88fa      	ldrh	r2, [r7, #6]
 800622a:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2200      	movs	r2, #0
 8006230:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2222      	movs	r2, #34	; 0x22
 8006236:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2200      	movs	r2, #0
 800623e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	68da      	ldr	r2, [r3, #12]
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006250:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	695a      	ldr	r2, [r3, #20]
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f042 0201 	orr.w	r2, r2, #1
 8006260:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	68da      	ldr	r2, [r3, #12]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f042 0220 	orr.w	r2, r2, #32
 8006270:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006272:	2300      	movs	r3, #0
 8006274:	e000      	b.n	8006278 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8006276:	2302      	movs	r3, #2
  }
}
 8006278:	4618      	mov	r0, r3
 800627a:	3714      	adds	r7, #20
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr

08006284 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b086      	sub	sp, #24
 8006288:	af00      	add	r7, sp, #0
 800628a:	60f8      	str	r0, [r7, #12]
 800628c:	60b9      	str	r1, [r7, #8]
 800628e:	4613      	mov	r3, r2
 8006290:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006298:	b2db      	uxtb	r3, r3
 800629a:	2b20      	cmp	r3, #32
 800629c:	d153      	bne.n	8006346 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d002      	beq.n	80062aa <HAL_UART_Transmit_DMA+0x26>
 80062a4:	88fb      	ldrh	r3, [r7, #6]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d101      	bne.n	80062ae <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	e04c      	b.n	8006348 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d101      	bne.n	80062bc <HAL_UART_Transmit_DMA+0x38>
 80062b8:	2302      	movs	r3, #2
 80062ba:	e045      	b.n	8006348 <HAL_UART_Transmit_DMA+0xc4>
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2201      	movs	r2, #1
 80062c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80062c4:	68ba      	ldr	r2, [r7, #8]
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	88fa      	ldrh	r2, [r7, #6]
 80062ce:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	88fa      	ldrh	r2, [r7, #6]
 80062d4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2200      	movs	r2, #0
 80062da:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2221      	movs	r2, #33	; 0x21
 80062e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062e8:	4a19      	ldr	r2, [pc, #100]	; (8006350 <HAL_UART_Transmit_DMA+0xcc>)
 80062ea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f0:	4a18      	ldr	r2, [pc, #96]	; (8006354 <HAL_UART_Transmit_DMA+0xd0>)
 80062f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f8:	4a17      	ldr	r2, [pc, #92]	; (8006358 <HAL_UART_Transmit_DMA+0xd4>)
 80062fa:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006300:	2200      	movs	r2, #0
 8006302:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8006304:	f107 0308 	add.w	r3, r7, #8
 8006308:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	6819      	ldr	r1, [r3, #0]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	3304      	adds	r3, #4
 8006318:	461a      	mov	r2, r3
 800631a:	88fb      	ldrh	r3, [r7, #6]
 800631c:	f7fd fc02 	bl	8003b24 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006328:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2200      	movs	r2, #0
 800632e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	695a      	ldr	r2, [r3, #20]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006340:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8006342:	2300      	movs	r3, #0
 8006344:	e000      	b.n	8006348 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8006346:	2302      	movs	r3, #2
  }
}
 8006348:	4618      	mov	r0, r3
 800634a:	3718      	adds	r7, #24
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}
 8006350:	08006585 	.word	0x08006585
 8006354:	080065d7 	.word	0x080065d7
 8006358:	080065f3 	.word	0x080065f3

0800635c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b088      	sub	sp, #32
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	68db      	ldr	r3, [r3, #12]
 8006372:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	695b      	ldr	r3, [r3, #20]
 800637a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800637c:	2300      	movs	r3, #0
 800637e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006380:	2300      	movs	r3, #0
 8006382:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006384:	69fb      	ldr	r3, [r7, #28]
 8006386:	f003 030f 	and.w	r3, r3, #15
 800638a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d10d      	bne.n	80063ae <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006392:	69fb      	ldr	r3, [r7, #28]
 8006394:	f003 0320 	and.w	r3, r3, #32
 8006398:	2b00      	cmp	r3, #0
 800639a:	d008      	beq.n	80063ae <HAL_UART_IRQHandler+0x52>
 800639c:	69bb      	ldr	r3, [r7, #24]
 800639e:	f003 0320 	and.w	r3, r3, #32
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d003      	beq.n	80063ae <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 fa23 	bl	80067f2 <UART_Receive_IT>
      return;
 80063ac:	e0d1      	b.n	8006552 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	f000 80b0 	beq.w	8006516 <HAL_UART_IRQHandler+0x1ba>
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	f003 0301 	and.w	r3, r3, #1
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d105      	bne.n	80063cc <HAL_UART_IRQHandler+0x70>
 80063c0:	69bb      	ldr	r3, [r7, #24]
 80063c2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	f000 80a5 	beq.w	8006516 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80063cc:	69fb      	ldr	r3, [r7, #28]
 80063ce:	f003 0301 	and.w	r3, r3, #1
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d00a      	beq.n	80063ec <HAL_UART_IRQHandler+0x90>
 80063d6:	69bb      	ldr	r3, [r7, #24]
 80063d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d005      	beq.n	80063ec <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063e4:	f043 0201 	orr.w	r2, r3, #1
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80063ec:	69fb      	ldr	r3, [r7, #28]
 80063ee:	f003 0304 	and.w	r3, r3, #4
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d00a      	beq.n	800640c <HAL_UART_IRQHandler+0xb0>
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	f003 0301 	and.w	r3, r3, #1
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d005      	beq.n	800640c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006404:	f043 0202 	orr.w	r2, r3, #2
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	f003 0302 	and.w	r3, r3, #2
 8006412:	2b00      	cmp	r3, #0
 8006414:	d00a      	beq.n	800642c <HAL_UART_IRQHandler+0xd0>
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	f003 0301 	and.w	r3, r3, #1
 800641c:	2b00      	cmp	r3, #0
 800641e:	d005      	beq.n	800642c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006424:	f043 0204 	orr.w	r2, r3, #4
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800642c:	69fb      	ldr	r3, [r7, #28]
 800642e:	f003 0308 	and.w	r3, r3, #8
 8006432:	2b00      	cmp	r3, #0
 8006434:	d00f      	beq.n	8006456 <HAL_UART_IRQHandler+0xfa>
 8006436:	69bb      	ldr	r3, [r7, #24]
 8006438:	f003 0320 	and.w	r3, r3, #32
 800643c:	2b00      	cmp	r3, #0
 800643e:	d104      	bne.n	800644a <HAL_UART_IRQHandler+0xee>
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	f003 0301 	and.w	r3, r3, #1
 8006446:	2b00      	cmp	r3, #0
 8006448:	d005      	beq.n	8006456 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800644e:	f043 0208 	orr.w	r2, r3, #8
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800645a:	2b00      	cmp	r3, #0
 800645c:	d078      	beq.n	8006550 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800645e:	69fb      	ldr	r3, [r7, #28]
 8006460:	f003 0320 	and.w	r3, r3, #32
 8006464:	2b00      	cmp	r3, #0
 8006466:	d007      	beq.n	8006478 <HAL_UART_IRQHandler+0x11c>
 8006468:	69bb      	ldr	r3, [r7, #24]
 800646a:	f003 0320 	and.w	r3, r3, #32
 800646e:	2b00      	cmp	r3, #0
 8006470:	d002      	beq.n	8006478 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 f9bd 	bl	80067f2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	695b      	ldr	r3, [r3, #20]
 800647e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006482:	2b40      	cmp	r3, #64	; 0x40
 8006484:	bf0c      	ite	eq
 8006486:	2301      	moveq	r3, #1
 8006488:	2300      	movne	r3, #0
 800648a:	b2db      	uxtb	r3, r3
 800648c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006492:	f003 0308 	and.w	r3, r3, #8
 8006496:	2b00      	cmp	r3, #0
 8006498:	d102      	bne.n	80064a0 <HAL_UART_IRQHandler+0x144>
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d031      	beq.n	8006504 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f000 f906 	bl	80066b2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	695b      	ldr	r3, [r3, #20]
 80064ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064b0:	2b40      	cmp	r3, #64	; 0x40
 80064b2:	d123      	bne.n	80064fc <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	695a      	ldr	r2, [r3, #20]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064c2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d013      	beq.n	80064f4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064d0:	4a21      	ldr	r2, [pc, #132]	; (8006558 <HAL_UART_IRQHandler+0x1fc>)
 80064d2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064d8:	4618      	mov	r0, r3
 80064da:	f7fd fb7b 	bl	8003bd4 <HAL_DMA_Abort_IT>
 80064de:	4603      	mov	r3, r0
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d016      	beq.n	8006512 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064ea:	687a      	ldr	r2, [r7, #4]
 80064ec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80064ee:	4610      	mov	r0, r2
 80064f0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064f2:	e00e      	b.n	8006512 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f000 f83b 	bl	8006570 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064fa:	e00a      	b.n	8006512 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f000 f837 	bl	8006570 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006502:	e006      	b.n	8006512 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f000 f833 	bl	8006570 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2200      	movs	r2, #0
 800650e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006510:	e01e      	b.n	8006550 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006512:	bf00      	nop
    return;
 8006514:	e01c      	b.n	8006550 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006516:	69fb      	ldr	r3, [r7, #28]
 8006518:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800651c:	2b00      	cmp	r3, #0
 800651e:	d008      	beq.n	8006532 <HAL_UART_IRQHandler+0x1d6>
 8006520:	69bb      	ldr	r3, [r7, #24]
 8006522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006526:	2b00      	cmp	r3, #0
 8006528:	d003      	beq.n	8006532 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 f8f3 	bl	8006716 <UART_Transmit_IT>
    return;
 8006530:	e00f      	b.n	8006552 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006532:	69fb      	ldr	r3, [r7, #28]
 8006534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006538:	2b00      	cmp	r3, #0
 800653a:	d00a      	beq.n	8006552 <HAL_UART_IRQHandler+0x1f6>
 800653c:	69bb      	ldr	r3, [r7, #24]
 800653e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006542:	2b00      	cmp	r3, #0
 8006544:	d005      	beq.n	8006552 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f000 f93b 	bl	80067c2 <UART_EndTransmit_IT>
    return;
 800654c:	bf00      	nop
 800654e:	e000      	b.n	8006552 <HAL_UART_IRQHandler+0x1f6>
    return;
 8006550:	bf00      	nop
  }
}
 8006552:	3720      	adds	r7, #32
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}
 8006558:	080066ef 	.word	0x080066ef

0800655c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800655c:	b480      	push	{r7}
 800655e:	b083      	sub	sp, #12
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006564:	bf00      	nop
 8006566:	370c      	adds	r7, #12
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr

08006570 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006570:	b480      	push	{r7}
 8006572:	b083      	sub	sp, #12
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006578:	bf00      	nop
 800657a:	370c      	adds	r7, #12
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr

08006584 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b084      	sub	sp, #16
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006590:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800659c:	2b00      	cmp	r3, #0
 800659e:	d113      	bne.n	80065c8 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2200      	movs	r2, #0
 80065a4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	695a      	ldr	r2, [r3, #20]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80065b4:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	68da      	ldr	r2, [r3, #12]
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065c4:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80065c6:	e002      	b.n	80065ce <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 80065c8:	68f8      	ldr	r0, [r7, #12]
 80065ca:	f7fb fba1 	bl	8001d10 <HAL_UART_TxCpltCallback>
}
 80065ce:	bf00      	nop
 80065d0:	3710      	adds	r7, #16
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}

080065d6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80065d6:	b580      	push	{r7, lr}
 80065d8:	b084      	sub	sp, #16
 80065da:	af00      	add	r7, sp, #0
 80065dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065e2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80065e4:	68f8      	ldr	r0, [r7, #12]
 80065e6:	f7ff ffb9 	bl	800655c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065ea:	bf00      	nop
 80065ec:	3710      	adds	r7, #16
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}

080065f2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80065f2:	b580      	push	{r7, lr}
 80065f4:	b084      	sub	sp, #16
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80065fa:	2300      	movs	r3, #0
 80065fc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006602:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	695b      	ldr	r3, [r3, #20]
 800660a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800660e:	2b80      	cmp	r3, #128	; 0x80
 8006610:	bf0c      	ite	eq
 8006612:	2301      	moveq	r3, #1
 8006614:	2300      	movne	r3, #0
 8006616:	b2db      	uxtb	r3, r3
 8006618:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006620:	b2db      	uxtb	r3, r3
 8006622:	2b21      	cmp	r3, #33	; 0x21
 8006624:	d108      	bne.n	8006638 <UART_DMAError+0x46>
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d005      	beq.n	8006638 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	2200      	movs	r2, #0
 8006630:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006632:	68b8      	ldr	r0, [r7, #8]
 8006634:	f000 f827 	bl	8006686 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	695b      	ldr	r3, [r3, #20]
 800663e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006642:	2b40      	cmp	r3, #64	; 0x40
 8006644:	bf0c      	ite	eq
 8006646:	2301      	moveq	r3, #1
 8006648:	2300      	movne	r3, #0
 800664a:	b2db      	uxtb	r3, r3
 800664c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006654:	b2db      	uxtb	r3, r3
 8006656:	2b22      	cmp	r3, #34	; 0x22
 8006658:	d108      	bne.n	800666c <UART_DMAError+0x7a>
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d005      	beq.n	800666c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	2200      	movs	r2, #0
 8006664:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006666:	68b8      	ldr	r0, [r7, #8]
 8006668:	f000 f823 	bl	80066b2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006670:	f043 0210 	orr.w	r2, r3, #16
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006678:	68b8      	ldr	r0, [r7, #8]
 800667a:	f7ff ff79 	bl	8006570 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800667e:	bf00      	nop
 8006680:	3710      	adds	r7, #16
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}

08006686 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006686:	b480      	push	{r7}
 8006688:	b083      	sub	sp, #12
 800668a:	af00      	add	r7, sp, #0
 800668c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	68da      	ldr	r2, [r3, #12]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800669c:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2220      	movs	r2, #32
 80066a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80066a6:	bf00      	nop
 80066a8:	370c      	adds	r7, #12
 80066aa:	46bd      	mov	sp, r7
 80066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b0:	4770      	bx	lr

080066b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80066b2:	b480      	push	{r7}
 80066b4:	b083      	sub	sp, #12
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	68da      	ldr	r2, [r3, #12]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80066c8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	695a      	ldr	r2, [r3, #20]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f022 0201 	bic.w	r2, r2, #1
 80066d8:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2220      	movs	r2, #32
 80066de:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80066e2:	bf00      	nop
 80066e4:	370c      	adds	r7, #12
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr

080066ee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80066ee:	b580      	push	{r7, lr}
 80066f0:	b084      	sub	sp, #16
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2200      	movs	r2, #0
 8006700:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2200      	movs	r2, #0
 8006706:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006708:	68f8      	ldr	r0, [r7, #12]
 800670a:	f7ff ff31 	bl	8006570 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800670e:	bf00      	nop
 8006710:	3710      	adds	r7, #16
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}

08006716 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006716:	b480      	push	{r7}
 8006718:	b085      	sub	sp, #20
 800671a:	af00      	add	r7, sp, #0
 800671c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006724:	b2db      	uxtb	r3, r3
 8006726:	2b21      	cmp	r3, #33	; 0x21
 8006728:	d144      	bne.n	80067b4 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006732:	d11a      	bne.n	800676a <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6a1b      	ldr	r3, [r3, #32]
 8006738:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	881b      	ldrh	r3, [r3, #0]
 800673e:	461a      	mov	r2, r3
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006748:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	691b      	ldr	r3, [r3, #16]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d105      	bne.n	800675e <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6a1b      	ldr	r3, [r3, #32]
 8006756:	1c9a      	adds	r2, r3, #2
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	621a      	str	r2, [r3, #32]
 800675c:	e00e      	b.n	800677c <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6a1b      	ldr	r3, [r3, #32]
 8006762:	1c5a      	adds	r2, r3, #1
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	621a      	str	r2, [r3, #32]
 8006768:	e008      	b.n	800677c <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6a1b      	ldr	r3, [r3, #32]
 800676e:	1c59      	adds	r1, r3, #1
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	6211      	str	r1, [r2, #32]
 8006774:	781a      	ldrb	r2, [r3, #0]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006780:	b29b      	uxth	r3, r3
 8006782:	3b01      	subs	r3, #1
 8006784:	b29b      	uxth	r3, r3
 8006786:	687a      	ldr	r2, [r7, #4]
 8006788:	4619      	mov	r1, r3
 800678a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800678c:	2b00      	cmp	r3, #0
 800678e:	d10f      	bne.n	80067b0 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	68da      	ldr	r2, [r3, #12]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800679e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	68da      	ldr	r2, [r3, #12]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067ae:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80067b0:	2300      	movs	r3, #0
 80067b2:	e000      	b.n	80067b6 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80067b4:	2302      	movs	r3, #2
  }
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3714      	adds	r7, #20
 80067ba:	46bd      	mov	sp, r7
 80067bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c0:	4770      	bx	lr

080067c2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80067c2:	b580      	push	{r7, lr}
 80067c4:	b082      	sub	sp, #8
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	68da      	ldr	r2, [r3, #12]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067d8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2220      	movs	r2, #32
 80067de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f7fb fa94 	bl	8001d10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80067e8:	2300      	movs	r3, #0
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3708      	adds	r7, #8
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}

080067f2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80067f2:	b580      	push	{r7, lr}
 80067f4:	b084      	sub	sp, #16
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006800:	b2db      	uxtb	r3, r3
 8006802:	2b22      	cmp	r3, #34	; 0x22
 8006804:	d171      	bne.n	80068ea <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800680e:	d123      	bne.n	8006858 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006814:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	691b      	ldr	r3, [r3, #16]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d10e      	bne.n	800683c <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	b29b      	uxth	r3, r3
 8006826:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800682a:	b29a      	uxth	r2, r3
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006834:	1c9a      	adds	r2, r3, #2
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	629a      	str	r2, [r3, #40]	; 0x28
 800683a:	e029      	b.n	8006890 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	b29b      	uxth	r3, r3
 8006844:	b2db      	uxtb	r3, r3
 8006846:	b29a      	uxth	r2, r3
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006850:	1c5a      	adds	r2, r3, #1
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	629a      	str	r2, [r3, #40]	; 0x28
 8006856:	e01b      	b.n	8006890 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	691b      	ldr	r3, [r3, #16]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d10a      	bne.n	8006876 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	6858      	ldr	r0, [r3, #4]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800686a:	1c59      	adds	r1, r3, #1
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	6291      	str	r1, [r2, #40]	; 0x28
 8006870:	b2c2      	uxtb	r2, r0
 8006872:	701a      	strb	r2, [r3, #0]
 8006874:	e00c      	b.n	8006890 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	b2da      	uxtb	r2, r3
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006882:	1c58      	adds	r0, r3, #1
 8006884:	6879      	ldr	r1, [r7, #4]
 8006886:	6288      	str	r0, [r1, #40]	; 0x28
 8006888:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800688c:	b2d2      	uxtb	r2, r2
 800688e:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006894:	b29b      	uxth	r3, r3
 8006896:	3b01      	subs	r3, #1
 8006898:	b29b      	uxth	r3, r3
 800689a:	687a      	ldr	r2, [r7, #4]
 800689c:	4619      	mov	r1, r3
 800689e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d120      	bne.n	80068e6 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	68da      	ldr	r2, [r3, #12]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f022 0220 	bic.w	r2, r2, #32
 80068b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	68da      	ldr	r2, [r3, #12]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80068c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	695a      	ldr	r2, [r3, #20]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f022 0201 	bic.w	r2, r2, #1
 80068d2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2220      	movs	r2, #32
 80068d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f7fb fa01 	bl	8001ce4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80068e2:	2300      	movs	r3, #0
 80068e4:	e002      	b.n	80068ec <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80068e6:	2300      	movs	r3, #0
 80068e8:	e000      	b.n	80068ec <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80068ea:	2302      	movs	r3, #2
  }
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3710      	adds	r7, #16
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}

080068f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068f8:	b085      	sub	sp, #20
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	691b      	ldr	r3, [r3, #16]
 8006904:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	68da      	ldr	r2, [r3, #12]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	430a      	orrs	r2, r1
 8006912:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	689a      	ldr	r2, [r3, #8]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	691b      	ldr	r3, [r3, #16]
 800691c:	431a      	orrs	r2, r3
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	695b      	ldr	r3, [r3, #20]
 8006922:	431a      	orrs	r2, r3
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	69db      	ldr	r3, [r3, #28]
 8006928:	4313      	orrs	r3, r2
 800692a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	68db      	ldr	r3, [r3, #12]
 8006932:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006936:	f023 030c 	bic.w	r3, r3, #12
 800693a:	687a      	ldr	r2, [r7, #4]
 800693c:	6812      	ldr	r2, [r2, #0]
 800693e:	68f9      	ldr	r1, [r7, #12]
 8006940:	430b      	orrs	r3, r1
 8006942:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	695b      	ldr	r3, [r3, #20]
 800694a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	699a      	ldr	r2, [r3, #24]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	430a      	orrs	r2, r1
 8006958:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	69db      	ldr	r3, [r3, #28]
 800695e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006962:	f040 818b 	bne.w	8006c7c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4ac1      	ldr	r2, [pc, #772]	; (8006c70 <UART_SetConfig+0x37c>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d005      	beq.n	800697c <UART_SetConfig+0x88>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4abf      	ldr	r2, [pc, #764]	; (8006c74 <UART_SetConfig+0x380>)
 8006976:	4293      	cmp	r3, r2
 8006978:	f040 80bd 	bne.w	8006af6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800697c:	f7fe f9c2 	bl	8004d04 <HAL_RCC_GetPCLK2Freq>
 8006980:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	461d      	mov	r5, r3
 8006986:	f04f 0600 	mov.w	r6, #0
 800698a:	46a8      	mov	r8, r5
 800698c:	46b1      	mov	r9, r6
 800698e:	eb18 0308 	adds.w	r3, r8, r8
 8006992:	eb49 0409 	adc.w	r4, r9, r9
 8006996:	4698      	mov	r8, r3
 8006998:	46a1      	mov	r9, r4
 800699a:	eb18 0805 	adds.w	r8, r8, r5
 800699e:	eb49 0906 	adc.w	r9, r9, r6
 80069a2:	f04f 0100 	mov.w	r1, #0
 80069a6:	f04f 0200 	mov.w	r2, #0
 80069aa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80069ae:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80069b2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80069b6:	4688      	mov	r8, r1
 80069b8:	4691      	mov	r9, r2
 80069ba:	eb18 0005 	adds.w	r0, r8, r5
 80069be:	eb49 0106 	adc.w	r1, r9, r6
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	461d      	mov	r5, r3
 80069c8:	f04f 0600 	mov.w	r6, #0
 80069cc:	196b      	adds	r3, r5, r5
 80069ce:	eb46 0406 	adc.w	r4, r6, r6
 80069d2:	461a      	mov	r2, r3
 80069d4:	4623      	mov	r3, r4
 80069d6:	f7fa f8e7 	bl	8000ba8 <__aeabi_uldivmod>
 80069da:	4603      	mov	r3, r0
 80069dc:	460c      	mov	r4, r1
 80069de:	461a      	mov	r2, r3
 80069e0:	4ba5      	ldr	r3, [pc, #660]	; (8006c78 <UART_SetConfig+0x384>)
 80069e2:	fba3 2302 	umull	r2, r3, r3, r2
 80069e6:	095b      	lsrs	r3, r3, #5
 80069e8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	461d      	mov	r5, r3
 80069f0:	f04f 0600 	mov.w	r6, #0
 80069f4:	46a9      	mov	r9, r5
 80069f6:	46b2      	mov	sl, r6
 80069f8:	eb19 0309 	adds.w	r3, r9, r9
 80069fc:	eb4a 040a 	adc.w	r4, sl, sl
 8006a00:	4699      	mov	r9, r3
 8006a02:	46a2      	mov	sl, r4
 8006a04:	eb19 0905 	adds.w	r9, r9, r5
 8006a08:	eb4a 0a06 	adc.w	sl, sl, r6
 8006a0c:	f04f 0100 	mov.w	r1, #0
 8006a10:	f04f 0200 	mov.w	r2, #0
 8006a14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a18:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006a1c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006a20:	4689      	mov	r9, r1
 8006a22:	4692      	mov	sl, r2
 8006a24:	eb19 0005 	adds.w	r0, r9, r5
 8006a28:	eb4a 0106 	adc.w	r1, sl, r6
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	461d      	mov	r5, r3
 8006a32:	f04f 0600 	mov.w	r6, #0
 8006a36:	196b      	adds	r3, r5, r5
 8006a38:	eb46 0406 	adc.w	r4, r6, r6
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	4623      	mov	r3, r4
 8006a40:	f7fa f8b2 	bl	8000ba8 <__aeabi_uldivmod>
 8006a44:	4603      	mov	r3, r0
 8006a46:	460c      	mov	r4, r1
 8006a48:	461a      	mov	r2, r3
 8006a4a:	4b8b      	ldr	r3, [pc, #556]	; (8006c78 <UART_SetConfig+0x384>)
 8006a4c:	fba3 1302 	umull	r1, r3, r3, r2
 8006a50:	095b      	lsrs	r3, r3, #5
 8006a52:	2164      	movs	r1, #100	; 0x64
 8006a54:	fb01 f303 	mul.w	r3, r1, r3
 8006a58:	1ad3      	subs	r3, r2, r3
 8006a5a:	00db      	lsls	r3, r3, #3
 8006a5c:	3332      	adds	r3, #50	; 0x32
 8006a5e:	4a86      	ldr	r2, [pc, #536]	; (8006c78 <UART_SetConfig+0x384>)
 8006a60:	fba2 2303 	umull	r2, r3, r2, r3
 8006a64:	095b      	lsrs	r3, r3, #5
 8006a66:	005b      	lsls	r3, r3, #1
 8006a68:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006a6c:	4498      	add	r8, r3
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	461d      	mov	r5, r3
 8006a72:	f04f 0600 	mov.w	r6, #0
 8006a76:	46a9      	mov	r9, r5
 8006a78:	46b2      	mov	sl, r6
 8006a7a:	eb19 0309 	adds.w	r3, r9, r9
 8006a7e:	eb4a 040a 	adc.w	r4, sl, sl
 8006a82:	4699      	mov	r9, r3
 8006a84:	46a2      	mov	sl, r4
 8006a86:	eb19 0905 	adds.w	r9, r9, r5
 8006a8a:	eb4a 0a06 	adc.w	sl, sl, r6
 8006a8e:	f04f 0100 	mov.w	r1, #0
 8006a92:	f04f 0200 	mov.w	r2, #0
 8006a96:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a9a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006a9e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006aa2:	4689      	mov	r9, r1
 8006aa4:	4692      	mov	sl, r2
 8006aa6:	eb19 0005 	adds.w	r0, r9, r5
 8006aaa:	eb4a 0106 	adc.w	r1, sl, r6
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	461d      	mov	r5, r3
 8006ab4:	f04f 0600 	mov.w	r6, #0
 8006ab8:	196b      	adds	r3, r5, r5
 8006aba:	eb46 0406 	adc.w	r4, r6, r6
 8006abe:	461a      	mov	r2, r3
 8006ac0:	4623      	mov	r3, r4
 8006ac2:	f7fa f871 	bl	8000ba8 <__aeabi_uldivmod>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	460c      	mov	r4, r1
 8006aca:	461a      	mov	r2, r3
 8006acc:	4b6a      	ldr	r3, [pc, #424]	; (8006c78 <UART_SetConfig+0x384>)
 8006ace:	fba3 1302 	umull	r1, r3, r3, r2
 8006ad2:	095b      	lsrs	r3, r3, #5
 8006ad4:	2164      	movs	r1, #100	; 0x64
 8006ad6:	fb01 f303 	mul.w	r3, r1, r3
 8006ada:	1ad3      	subs	r3, r2, r3
 8006adc:	00db      	lsls	r3, r3, #3
 8006ade:	3332      	adds	r3, #50	; 0x32
 8006ae0:	4a65      	ldr	r2, [pc, #404]	; (8006c78 <UART_SetConfig+0x384>)
 8006ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ae6:	095b      	lsrs	r3, r3, #5
 8006ae8:	f003 0207 	and.w	r2, r3, #7
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4442      	add	r2, r8
 8006af2:	609a      	str	r2, [r3, #8]
 8006af4:	e26f      	b.n	8006fd6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006af6:	f7fe f8f1 	bl	8004cdc <HAL_RCC_GetPCLK1Freq>
 8006afa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	461d      	mov	r5, r3
 8006b00:	f04f 0600 	mov.w	r6, #0
 8006b04:	46a8      	mov	r8, r5
 8006b06:	46b1      	mov	r9, r6
 8006b08:	eb18 0308 	adds.w	r3, r8, r8
 8006b0c:	eb49 0409 	adc.w	r4, r9, r9
 8006b10:	4698      	mov	r8, r3
 8006b12:	46a1      	mov	r9, r4
 8006b14:	eb18 0805 	adds.w	r8, r8, r5
 8006b18:	eb49 0906 	adc.w	r9, r9, r6
 8006b1c:	f04f 0100 	mov.w	r1, #0
 8006b20:	f04f 0200 	mov.w	r2, #0
 8006b24:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006b28:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006b2c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006b30:	4688      	mov	r8, r1
 8006b32:	4691      	mov	r9, r2
 8006b34:	eb18 0005 	adds.w	r0, r8, r5
 8006b38:	eb49 0106 	adc.w	r1, r9, r6
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	461d      	mov	r5, r3
 8006b42:	f04f 0600 	mov.w	r6, #0
 8006b46:	196b      	adds	r3, r5, r5
 8006b48:	eb46 0406 	adc.w	r4, r6, r6
 8006b4c:	461a      	mov	r2, r3
 8006b4e:	4623      	mov	r3, r4
 8006b50:	f7fa f82a 	bl	8000ba8 <__aeabi_uldivmod>
 8006b54:	4603      	mov	r3, r0
 8006b56:	460c      	mov	r4, r1
 8006b58:	461a      	mov	r2, r3
 8006b5a:	4b47      	ldr	r3, [pc, #284]	; (8006c78 <UART_SetConfig+0x384>)
 8006b5c:	fba3 2302 	umull	r2, r3, r3, r2
 8006b60:	095b      	lsrs	r3, r3, #5
 8006b62:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	461d      	mov	r5, r3
 8006b6a:	f04f 0600 	mov.w	r6, #0
 8006b6e:	46a9      	mov	r9, r5
 8006b70:	46b2      	mov	sl, r6
 8006b72:	eb19 0309 	adds.w	r3, r9, r9
 8006b76:	eb4a 040a 	adc.w	r4, sl, sl
 8006b7a:	4699      	mov	r9, r3
 8006b7c:	46a2      	mov	sl, r4
 8006b7e:	eb19 0905 	adds.w	r9, r9, r5
 8006b82:	eb4a 0a06 	adc.w	sl, sl, r6
 8006b86:	f04f 0100 	mov.w	r1, #0
 8006b8a:	f04f 0200 	mov.w	r2, #0
 8006b8e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b92:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006b96:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006b9a:	4689      	mov	r9, r1
 8006b9c:	4692      	mov	sl, r2
 8006b9e:	eb19 0005 	adds.w	r0, r9, r5
 8006ba2:	eb4a 0106 	adc.w	r1, sl, r6
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	461d      	mov	r5, r3
 8006bac:	f04f 0600 	mov.w	r6, #0
 8006bb0:	196b      	adds	r3, r5, r5
 8006bb2:	eb46 0406 	adc.w	r4, r6, r6
 8006bb6:	461a      	mov	r2, r3
 8006bb8:	4623      	mov	r3, r4
 8006bba:	f7f9 fff5 	bl	8000ba8 <__aeabi_uldivmod>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	460c      	mov	r4, r1
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	4b2c      	ldr	r3, [pc, #176]	; (8006c78 <UART_SetConfig+0x384>)
 8006bc6:	fba3 1302 	umull	r1, r3, r3, r2
 8006bca:	095b      	lsrs	r3, r3, #5
 8006bcc:	2164      	movs	r1, #100	; 0x64
 8006bce:	fb01 f303 	mul.w	r3, r1, r3
 8006bd2:	1ad3      	subs	r3, r2, r3
 8006bd4:	00db      	lsls	r3, r3, #3
 8006bd6:	3332      	adds	r3, #50	; 0x32
 8006bd8:	4a27      	ldr	r2, [pc, #156]	; (8006c78 <UART_SetConfig+0x384>)
 8006bda:	fba2 2303 	umull	r2, r3, r2, r3
 8006bde:	095b      	lsrs	r3, r3, #5
 8006be0:	005b      	lsls	r3, r3, #1
 8006be2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006be6:	4498      	add	r8, r3
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	461d      	mov	r5, r3
 8006bec:	f04f 0600 	mov.w	r6, #0
 8006bf0:	46a9      	mov	r9, r5
 8006bf2:	46b2      	mov	sl, r6
 8006bf4:	eb19 0309 	adds.w	r3, r9, r9
 8006bf8:	eb4a 040a 	adc.w	r4, sl, sl
 8006bfc:	4699      	mov	r9, r3
 8006bfe:	46a2      	mov	sl, r4
 8006c00:	eb19 0905 	adds.w	r9, r9, r5
 8006c04:	eb4a 0a06 	adc.w	sl, sl, r6
 8006c08:	f04f 0100 	mov.w	r1, #0
 8006c0c:	f04f 0200 	mov.w	r2, #0
 8006c10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c14:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006c18:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006c1c:	4689      	mov	r9, r1
 8006c1e:	4692      	mov	sl, r2
 8006c20:	eb19 0005 	adds.w	r0, r9, r5
 8006c24:	eb4a 0106 	adc.w	r1, sl, r6
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	461d      	mov	r5, r3
 8006c2e:	f04f 0600 	mov.w	r6, #0
 8006c32:	196b      	adds	r3, r5, r5
 8006c34:	eb46 0406 	adc.w	r4, r6, r6
 8006c38:	461a      	mov	r2, r3
 8006c3a:	4623      	mov	r3, r4
 8006c3c:	f7f9 ffb4 	bl	8000ba8 <__aeabi_uldivmod>
 8006c40:	4603      	mov	r3, r0
 8006c42:	460c      	mov	r4, r1
 8006c44:	461a      	mov	r2, r3
 8006c46:	4b0c      	ldr	r3, [pc, #48]	; (8006c78 <UART_SetConfig+0x384>)
 8006c48:	fba3 1302 	umull	r1, r3, r3, r2
 8006c4c:	095b      	lsrs	r3, r3, #5
 8006c4e:	2164      	movs	r1, #100	; 0x64
 8006c50:	fb01 f303 	mul.w	r3, r1, r3
 8006c54:	1ad3      	subs	r3, r2, r3
 8006c56:	00db      	lsls	r3, r3, #3
 8006c58:	3332      	adds	r3, #50	; 0x32
 8006c5a:	4a07      	ldr	r2, [pc, #28]	; (8006c78 <UART_SetConfig+0x384>)
 8006c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8006c60:	095b      	lsrs	r3, r3, #5
 8006c62:	f003 0207 	and.w	r2, r3, #7
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4442      	add	r2, r8
 8006c6c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006c6e:	e1b2      	b.n	8006fd6 <UART_SetConfig+0x6e2>
 8006c70:	40011000 	.word	0x40011000
 8006c74:	40011400 	.word	0x40011400
 8006c78:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4ad7      	ldr	r2, [pc, #860]	; (8006fe0 <UART_SetConfig+0x6ec>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d005      	beq.n	8006c92 <UART_SetConfig+0x39e>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4ad6      	ldr	r2, [pc, #856]	; (8006fe4 <UART_SetConfig+0x6f0>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	f040 80d1 	bne.w	8006e34 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006c92:	f7fe f837 	bl	8004d04 <HAL_RCC_GetPCLK2Freq>
 8006c96:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	469a      	mov	sl, r3
 8006c9c:	f04f 0b00 	mov.w	fp, #0
 8006ca0:	46d0      	mov	r8, sl
 8006ca2:	46d9      	mov	r9, fp
 8006ca4:	eb18 0308 	adds.w	r3, r8, r8
 8006ca8:	eb49 0409 	adc.w	r4, r9, r9
 8006cac:	4698      	mov	r8, r3
 8006cae:	46a1      	mov	r9, r4
 8006cb0:	eb18 080a 	adds.w	r8, r8, sl
 8006cb4:	eb49 090b 	adc.w	r9, r9, fp
 8006cb8:	f04f 0100 	mov.w	r1, #0
 8006cbc:	f04f 0200 	mov.w	r2, #0
 8006cc0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006cc4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006cc8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006ccc:	4688      	mov	r8, r1
 8006cce:	4691      	mov	r9, r2
 8006cd0:	eb1a 0508 	adds.w	r5, sl, r8
 8006cd4:	eb4b 0609 	adc.w	r6, fp, r9
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	4619      	mov	r1, r3
 8006cde:	f04f 0200 	mov.w	r2, #0
 8006ce2:	f04f 0300 	mov.w	r3, #0
 8006ce6:	f04f 0400 	mov.w	r4, #0
 8006cea:	0094      	lsls	r4, r2, #2
 8006cec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006cf0:	008b      	lsls	r3, r1, #2
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	4623      	mov	r3, r4
 8006cf6:	4628      	mov	r0, r5
 8006cf8:	4631      	mov	r1, r6
 8006cfa:	f7f9 ff55 	bl	8000ba8 <__aeabi_uldivmod>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	460c      	mov	r4, r1
 8006d02:	461a      	mov	r2, r3
 8006d04:	4bb8      	ldr	r3, [pc, #736]	; (8006fe8 <UART_SetConfig+0x6f4>)
 8006d06:	fba3 2302 	umull	r2, r3, r3, r2
 8006d0a:	095b      	lsrs	r3, r3, #5
 8006d0c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	469b      	mov	fp, r3
 8006d14:	f04f 0c00 	mov.w	ip, #0
 8006d18:	46d9      	mov	r9, fp
 8006d1a:	46e2      	mov	sl, ip
 8006d1c:	eb19 0309 	adds.w	r3, r9, r9
 8006d20:	eb4a 040a 	adc.w	r4, sl, sl
 8006d24:	4699      	mov	r9, r3
 8006d26:	46a2      	mov	sl, r4
 8006d28:	eb19 090b 	adds.w	r9, r9, fp
 8006d2c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006d30:	f04f 0100 	mov.w	r1, #0
 8006d34:	f04f 0200 	mov.w	r2, #0
 8006d38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d3c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006d40:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006d44:	4689      	mov	r9, r1
 8006d46:	4692      	mov	sl, r2
 8006d48:	eb1b 0509 	adds.w	r5, fp, r9
 8006d4c:	eb4c 060a 	adc.w	r6, ip, sl
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	4619      	mov	r1, r3
 8006d56:	f04f 0200 	mov.w	r2, #0
 8006d5a:	f04f 0300 	mov.w	r3, #0
 8006d5e:	f04f 0400 	mov.w	r4, #0
 8006d62:	0094      	lsls	r4, r2, #2
 8006d64:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006d68:	008b      	lsls	r3, r1, #2
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	4623      	mov	r3, r4
 8006d6e:	4628      	mov	r0, r5
 8006d70:	4631      	mov	r1, r6
 8006d72:	f7f9 ff19 	bl	8000ba8 <__aeabi_uldivmod>
 8006d76:	4603      	mov	r3, r0
 8006d78:	460c      	mov	r4, r1
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	4b9a      	ldr	r3, [pc, #616]	; (8006fe8 <UART_SetConfig+0x6f4>)
 8006d7e:	fba3 1302 	umull	r1, r3, r3, r2
 8006d82:	095b      	lsrs	r3, r3, #5
 8006d84:	2164      	movs	r1, #100	; 0x64
 8006d86:	fb01 f303 	mul.w	r3, r1, r3
 8006d8a:	1ad3      	subs	r3, r2, r3
 8006d8c:	011b      	lsls	r3, r3, #4
 8006d8e:	3332      	adds	r3, #50	; 0x32
 8006d90:	4a95      	ldr	r2, [pc, #596]	; (8006fe8 <UART_SetConfig+0x6f4>)
 8006d92:	fba2 2303 	umull	r2, r3, r2, r3
 8006d96:	095b      	lsrs	r3, r3, #5
 8006d98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d9c:	4498      	add	r8, r3
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	469b      	mov	fp, r3
 8006da2:	f04f 0c00 	mov.w	ip, #0
 8006da6:	46d9      	mov	r9, fp
 8006da8:	46e2      	mov	sl, ip
 8006daa:	eb19 0309 	adds.w	r3, r9, r9
 8006dae:	eb4a 040a 	adc.w	r4, sl, sl
 8006db2:	4699      	mov	r9, r3
 8006db4:	46a2      	mov	sl, r4
 8006db6:	eb19 090b 	adds.w	r9, r9, fp
 8006dba:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006dbe:	f04f 0100 	mov.w	r1, #0
 8006dc2:	f04f 0200 	mov.w	r2, #0
 8006dc6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006dca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006dce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006dd2:	4689      	mov	r9, r1
 8006dd4:	4692      	mov	sl, r2
 8006dd6:	eb1b 0509 	adds.w	r5, fp, r9
 8006dda:	eb4c 060a 	adc.w	r6, ip, sl
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	4619      	mov	r1, r3
 8006de4:	f04f 0200 	mov.w	r2, #0
 8006de8:	f04f 0300 	mov.w	r3, #0
 8006dec:	f04f 0400 	mov.w	r4, #0
 8006df0:	0094      	lsls	r4, r2, #2
 8006df2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006df6:	008b      	lsls	r3, r1, #2
 8006df8:	461a      	mov	r2, r3
 8006dfa:	4623      	mov	r3, r4
 8006dfc:	4628      	mov	r0, r5
 8006dfe:	4631      	mov	r1, r6
 8006e00:	f7f9 fed2 	bl	8000ba8 <__aeabi_uldivmod>
 8006e04:	4603      	mov	r3, r0
 8006e06:	460c      	mov	r4, r1
 8006e08:	461a      	mov	r2, r3
 8006e0a:	4b77      	ldr	r3, [pc, #476]	; (8006fe8 <UART_SetConfig+0x6f4>)
 8006e0c:	fba3 1302 	umull	r1, r3, r3, r2
 8006e10:	095b      	lsrs	r3, r3, #5
 8006e12:	2164      	movs	r1, #100	; 0x64
 8006e14:	fb01 f303 	mul.w	r3, r1, r3
 8006e18:	1ad3      	subs	r3, r2, r3
 8006e1a:	011b      	lsls	r3, r3, #4
 8006e1c:	3332      	adds	r3, #50	; 0x32
 8006e1e:	4a72      	ldr	r2, [pc, #456]	; (8006fe8 <UART_SetConfig+0x6f4>)
 8006e20:	fba2 2303 	umull	r2, r3, r2, r3
 8006e24:	095b      	lsrs	r3, r3, #5
 8006e26:	f003 020f 	and.w	r2, r3, #15
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4442      	add	r2, r8
 8006e30:	609a      	str	r2, [r3, #8]
 8006e32:	e0d0      	b.n	8006fd6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006e34:	f7fd ff52 	bl	8004cdc <HAL_RCC_GetPCLK1Freq>
 8006e38:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	469a      	mov	sl, r3
 8006e3e:	f04f 0b00 	mov.w	fp, #0
 8006e42:	46d0      	mov	r8, sl
 8006e44:	46d9      	mov	r9, fp
 8006e46:	eb18 0308 	adds.w	r3, r8, r8
 8006e4a:	eb49 0409 	adc.w	r4, r9, r9
 8006e4e:	4698      	mov	r8, r3
 8006e50:	46a1      	mov	r9, r4
 8006e52:	eb18 080a 	adds.w	r8, r8, sl
 8006e56:	eb49 090b 	adc.w	r9, r9, fp
 8006e5a:	f04f 0100 	mov.w	r1, #0
 8006e5e:	f04f 0200 	mov.w	r2, #0
 8006e62:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006e66:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006e6a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006e6e:	4688      	mov	r8, r1
 8006e70:	4691      	mov	r9, r2
 8006e72:	eb1a 0508 	adds.w	r5, sl, r8
 8006e76:	eb4b 0609 	adc.w	r6, fp, r9
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	4619      	mov	r1, r3
 8006e80:	f04f 0200 	mov.w	r2, #0
 8006e84:	f04f 0300 	mov.w	r3, #0
 8006e88:	f04f 0400 	mov.w	r4, #0
 8006e8c:	0094      	lsls	r4, r2, #2
 8006e8e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006e92:	008b      	lsls	r3, r1, #2
 8006e94:	461a      	mov	r2, r3
 8006e96:	4623      	mov	r3, r4
 8006e98:	4628      	mov	r0, r5
 8006e9a:	4631      	mov	r1, r6
 8006e9c:	f7f9 fe84 	bl	8000ba8 <__aeabi_uldivmod>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	460c      	mov	r4, r1
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	4b50      	ldr	r3, [pc, #320]	; (8006fe8 <UART_SetConfig+0x6f4>)
 8006ea8:	fba3 2302 	umull	r2, r3, r3, r2
 8006eac:	095b      	lsrs	r3, r3, #5
 8006eae:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	469b      	mov	fp, r3
 8006eb6:	f04f 0c00 	mov.w	ip, #0
 8006eba:	46d9      	mov	r9, fp
 8006ebc:	46e2      	mov	sl, ip
 8006ebe:	eb19 0309 	adds.w	r3, r9, r9
 8006ec2:	eb4a 040a 	adc.w	r4, sl, sl
 8006ec6:	4699      	mov	r9, r3
 8006ec8:	46a2      	mov	sl, r4
 8006eca:	eb19 090b 	adds.w	r9, r9, fp
 8006ece:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006ed2:	f04f 0100 	mov.w	r1, #0
 8006ed6:	f04f 0200 	mov.w	r2, #0
 8006eda:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ede:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006ee2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006ee6:	4689      	mov	r9, r1
 8006ee8:	4692      	mov	sl, r2
 8006eea:	eb1b 0509 	adds.w	r5, fp, r9
 8006eee:	eb4c 060a 	adc.w	r6, ip, sl
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	4619      	mov	r1, r3
 8006ef8:	f04f 0200 	mov.w	r2, #0
 8006efc:	f04f 0300 	mov.w	r3, #0
 8006f00:	f04f 0400 	mov.w	r4, #0
 8006f04:	0094      	lsls	r4, r2, #2
 8006f06:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006f0a:	008b      	lsls	r3, r1, #2
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	4623      	mov	r3, r4
 8006f10:	4628      	mov	r0, r5
 8006f12:	4631      	mov	r1, r6
 8006f14:	f7f9 fe48 	bl	8000ba8 <__aeabi_uldivmod>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	460c      	mov	r4, r1
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	4b32      	ldr	r3, [pc, #200]	; (8006fe8 <UART_SetConfig+0x6f4>)
 8006f20:	fba3 1302 	umull	r1, r3, r3, r2
 8006f24:	095b      	lsrs	r3, r3, #5
 8006f26:	2164      	movs	r1, #100	; 0x64
 8006f28:	fb01 f303 	mul.w	r3, r1, r3
 8006f2c:	1ad3      	subs	r3, r2, r3
 8006f2e:	011b      	lsls	r3, r3, #4
 8006f30:	3332      	adds	r3, #50	; 0x32
 8006f32:	4a2d      	ldr	r2, [pc, #180]	; (8006fe8 <UART_SetConfig+0x6f4>)
 8006f34:	fba2 2303 	umull	r2, r3, r2, r3
 8006f38:	095b      	lsrs	r3, r3, #5
 8006f3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f3e:	4498      	add	r8, r3
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	469b      	mov	fp, r3
 8006f44:	f04f 0c00 	mov.w	ip, #0
 8006f48:	46d9      	mov	r9, fp
 8006f4a:	46e2      	mov	sl, ip
 8006f4c:	eb19 0309 	adds.w	r3, r9, r9
 8006f50:	eb4a 040a 	adc.w	r4, sl, sl
 8006f54:	4699      	mov	r9, r3
 8006f56:	46a2      	mov	sl, r4
 8006f58:	eb19 090b 	adds.w	r9, r9, fp
 8006f5c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006f60:	f04f 0100 	mov.w	r1, #0
 8006f64:	f04f 0200 	mov.w	r2, #0
 8006f68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006f6c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006f70:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006f74:	4689      	mov	r9, r1
 8006f76:	4692      	mov	sl, r2
 8006f78:	eb1b 0509 	adds.w	r5, fp, r9
 8006f7c:	eb4c 060a 	adc.w	r6, ip, sl
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	4619      	mov	r1, r3
 8006f86:	f04f 0200 	mov.w	r2, #0
 8006f8a:	f04f 0300 	mov.w	r3, #0
 8006f8e:	f04f 0400 	mov.w	r4, #0
 8006f92:	0094      	lsls	r4, r2, #2
 8006f94:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006f98:	008b      	lsls	r3, r1, #2
 8006f9a:	461a      	mov	r2, r3
 8006f9c:	4623      	mov	r3, r4
 8006f9e:	4628      	mov	r0, r5
 8006fa0:	4631      	mov	r1, r6
 8006fa2:	f7f9 fe01 	bl	8000ba8 <__aeabi_uldivmod>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	460c      	mov	r4, r1
 8006faa:	461a      	mov	r2, r3
 8006fac:	4b0e      	ldr	r3, [pc, #56]	; (8006fe8 <UART_SetConfig+0x6f4>)
 8006fae:	fba3 1302 	umull	r1, r3, r3, r2
 8006fb2:	095b      	lsrs	r3, r3, #5
 8006fb4:	2164      	movs	r1, #100	; 0x64
 8006fb6:	fb01 f303 	mul.w	r3, r1, r3
 8006fba:	1ad3      	subs	r3, r2, r3
 8006fbc:	011b      	lsls	r3, r3, #4
 8006fbe:	3332      	adds	r3, #50	; 0x32
 8006fc0:	4a09      	ldr	r2, [pc, #36]	; (8006fe8 <UART_SetConfig+0x6f4>)
 8006fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8006fc6:	095b      	lsrs	r3, r3, #5
 8006fc8:	f003 020f 	and.w	r2, r3, #15
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4442      	add	r2, r8
 8006fd2:	609a      	str	r2, [r3, #8]
}
 8006fd4:	e7ff      	b.n	8006fd6 <UART_SetConfig+0x6e2>
 8006fd6:	bf00      	nop
 8006fd8:	3714      	adds	r7, #20
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fe0:	40011000 	.word	0x40011000
 8006fe4:	40011400 	.word	0x40011400
 8006fe8:	51eb851f 	.word	0x51eb851f

08006fec <__errno>:
 8006fec:	4b01      	ldr	r3, [pc, #4]	; (8006ff4 <__errno+0x8>)
 8006fee:	6818      	ldr	r0, [r3, #0]
 8006ff0:	4770      	bx	lr
 8006ff2:	bf00      	nop
 8006ff4:	20000014 	.word	0x20000014

08006ff8 <__libc_init_array>:
 8006ff8:	b570      	push	{r4, r5, r6, lr}
 8006ffa:	4e0d      	ldr	r6, [pc, #52]	; (8007030 <__libc_init_array+0x38>)
 8006ffc:	4c0d      	ldr	r4, [pc, #52]	; (8007034 <__libc_init_array+0x3c>)
 8006ffe:	1ba4      	subs	r4, r4, r6
 8007000:	10a4      	asrs	r4, r4, #2
 8007002:	2500      	movs	r5, #0
 8007004:	42a5      	cmp	r5, r4
 8007006:	d109      	bne.n	800701c <__libc_init_array+0x24>
 8007008:	4e0b      	ldr	r6, [pc, #44]	; (8007038 <__libc_init_array+0x40>)
 800700a:	4c0c      	ldr	r4, [pc, #48]	; (800703c <__libc_init_array+0x44>)
 800700c:	f002 fc62 	bl	80098d4 <_init>
 8007010:	1ba4      	subs	r4, r4, r6
 8007012:	10a4      	asrs	r4, r4, #2
 8007014:	2500      	movs	r5, #0
 8007016:	42a5      	cmp	r5, r4
 8007018:	d105      	bne.n	8007026 <__libc_init_array+0x2e>
 800701a:	bd70      	pop	{r4, r5, r6, pc}
 800701c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007020:	4798      	blx	r3
 8007022:	3501      	adds	r5, #1
 8007024:	e7ee      	b.n	8007004 <__libc_init_array+0xc>
 8007026:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800702a:	4798      	blx	r3
 800702c:	3501      	adds	r5, #1
 800702e:	e7f2      	b.n	8007016 <__libc_init_array+0x1e>
 8007030:	08009c00 	.word	0x08009c00
 8007034:	08009c00 	.word	0x08009c00
 8007038:	08009c00 	.word	0x08009c00
 800703c:	08009c04 	.word	0x08009c04

08007040 <memset>:
 8007040:	4402      	add	r2, r0
 8007042:	4603      	mov	r3, r0
 8007044:	4293      	cmp	r3, r2
 8007046:	d100      	bne.n	800704a <memset+0xa>
 8007048:	4770      	bx	lr
 800704a:	f803 1b01 	strb.w	r1, [r3], #1
 800704e:	e7f9      	b.n	8007044 <memset+0x4>

08007050 <__cvt>:
 8007050:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007054:	ec55 4b10 	vmov	r4, r5, d0
 8007058:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800705a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800705e:	2d00      	cmp	r5, #0
 8007060:	460e      	mov	r6, r1
 8007062:	4691      	mov	r9, r2
 8007064:	4619      	mov	r1, r3
 8007066:	bfb8      	it	lt
 8007068:	4622      	movlt	r2, r4
 800706a:	462b      	mov	r3, r5
 800706c:	f027 0720 	bic.w	r7, r7, #32
 8007070:	bfbb      	ittet	lt
 8007072:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007076:	461d      	movlt	r5, r3
 8007078:	2300      	movge	r3, #0
 800707a:	232d      	movlt	r3, #45	; 0x2d
 800707c:	bfb8      	it	lt
 800707e:	4614      	movlt	r4, r2
 8007080:	2f46      	cmp	r7, #70	; 0x46
 8007082:	700b      	strb	r3, [r1, #0]
 8007084:	d004      	beq.n	8007090 <__cvt+0x40>
 8007086:	2f45      	cmp	r7, #69	; 0x45
 8007088:	d100      	bne.n	800708c <__cvt+0x3c>
 800708a:	3601      	adds	r6, #1
 800708c:	2102      	movs	r1, #2
 800708e:	e000      	b.n	8007092 <__cvt+0x42>
 8007090:	2103      	movs	r1, #3
 8007092:	ab03      	add	r3, sp, #12
 8007094:	9301      	str	r3, [sp, #4]
 8007096:	ab02      	add	r3, sp, #8
 8007098:	9300      	str	r3, [sp, #0]
 800709a:	4632      	mov	r2, r6
 800709c:	4653      	mov	r3, sl
 800709e:	ec45 4b10 	vmov	d0, r4, r5
 80070a2:	f000 feb1 	bl	8007e08 <_dtoa_r>
 80070a6:	2f47      	cmp	r7, #71	; 0x47
 80070a8:	4680      	mov	r8, r0
 80070aa:	d102      	bne.n	80070b2 <__cvt+0x62>
 80070ac:	f019 0f01 	tst.w	r9, #1
 80070b0:	d026      	beq.n	8007100 <__cvt+0xb0>
 80070b2:	2f46      	cmp	r7, #70	; 0x46
 80070b4:	eb08 0906 	add.w	r9, r8, r6
 80070b8:	d111      	bne.n	80070de <__cvt+0x8e>
 80070ba:	f898 3000 	ldrb.w	r3, [r8]
 80070be:	2b30      	cmp	r3, #48	; 0x30
 80070c0:	d10a      	bne.n	80070d8 <__cvt+0x88>
 80070c2:	2200      	movs	r2, #0
 80070c4:	2300      	movs	r3, #0
 80070c6:	4620      	mov	r0, r4
 80070c8:	4629      	mov	r1, r5
 80070ca:	f7f9 fcfd 	bl	8000ac8 <__aeabi_dcmpeq>
 80070ce:	b918      	cbnz	r0, 80070d8 <__cvt+0x88>
 80070d0:	f1c6 0601 	rsb	r6, r6, #1
 80070d4:	f8ca 6000 	str.w	r6, [sl]
 80070d8:	f8da 3000 	ldr.w	r3, [sl]
 80070dc:	4499      	add	r9, r3
 80070de:	2200      	movs	r2, #0
 80070e0:	2300      	movs	r3, #0
 80070e2:	4620      	mov	r0, r4
 80070e4:	4629      	mov	r1, r5
 80070e6:	f7f9 fcef 	bl	8000ac8 <__aeabi_dcmpeq>
 80070ea:	b938      	cbnz	r0, 80070fc <__cvt+0xac>
 80070ec:	2230      	movs	r2, #48	; 0x30
 80070ee:	9b03      	ldr	r3, [sp, #12]
 80070f0:	454b      	cmp	r3, r9
 80070f2:	d205      	bcs.n	8007100 <__cvt+0xb0>
 80070f4:	1c59      	adds	r1, r3, #1
 80070f6:	9103      	str	r1, [sp, #12]
 80070f8:	701a      	strb	r2, [r3, #0]
 80070fa:	e7f8      	b.n	80070ee <__cvt+0x9e>
 80070fc:	f8cd 900c 	str.w	r9, [sp, #12]
 8007100:	9b03      	ldr	r3, [sp, #12]
 8007102:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007104:	eba3 0308 	sub.w	r3, r3, r8
 8007108:	4640      	mov	r0, r8
 800710a:	6013      	str	r3, [r2, #0]
 800710c:	b004      	add	sp, #16
 800710e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007112 <__exponent>:
 8007112:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007114:	2900      	cmp	r1, #0
 8007116:	4604      	mov	r4, r0
 8007118:	bfba      	itte	lt
 800711a:	4249      	neglt	r1, r1
 800711c:	232d      	movlt	r3, #45	; 0x2d
 800711e:	232b      	movge	r3, #43	; 0x2b
 8007120:	2909      	cmp	r1, #9
 8007122:	f804 2b02 	strb.w	r2, [r4], #2
 8007126:	7043      	strb	r3, [r0, #1]
 8007128:	dd20      	ble.n	800716c <__exponent+0x5a>
 800712a:	f10d 0307 	add.w	r3, sp, #7
 800712e:	461f      	mov	r7, r3
 8007130:	260a      	movs	r6, #10
 8007132:	fb91 f5f6 	sdiv	r5, r1, r6
 8007136:	fb06 1115 	mls	r1, r6, r5, r1
 800713a:	3130      	adds	r1, #48	; 0x30
 800713c:	2d09      	cmp	r5, #9
 800713e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007142:	f103 32ff 	add.w	r2, r3, #4294967295
 8007146:	4629      	mov	r1, r5
 8007148:	dc09      	bgt.n	800715e <__exponent+0x4c>
 800714a:	3130      	adds	r1, #48	; 0x30
 800714c:	3b02      	subs	r3, #2
 800714e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007152:	42bb      	cmp	r3, r7
 8007154:	4622      	mov	r2, r4
 8007156:	d304      	bcc.n	8007162 <__exponent+0x50>
 8007158:	1a10      	subs	r0, r2, r0
 800715a:	b003      	add	sp, #12
 800715c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800715e:	4613      	mov	r3, r2
 8007160:	e7e7      	b.n	8007132 <__exponent+0x20>
 8007162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007166:	f804 2b01 	strb.w	r2, [r4], #1
 800716a:	e7f2      	b.n	8007152 <__exponent+0x40>
 800716c:	2330      	movs	r3, #48	; 0x30
 800716e:	4419      	add	r1, r3
 8007170:	7083      	strb	r3, [r0, #2]
 8007172:	1d02      	adds	r2, r0, #4
 8007174:	70c1      	strb	r1, [r0, #3]
 8007176:	e7ef      	b.n	8007158 <__exponent+0x46>

08007178 <_printf_float>:
 8007178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800717c:	b08d      	sub	sp, #52	; 0x34
 800717e:	460c      	mov	r4, r1
 8007180:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8007184:	4616      	mov	r6, r2
 8007186:	461f      	mov	r7, r3
 8007188:	4605      	mov	r5, r0
 800718a:	f001 fd6f 	bl	8008c6c <_localeconv_r>
 800718e:	6803      	ldr	r3, [r0, #0]
 8007190:	9304      	str	r3, [sp, #16]
 8007192:	4618      	mov	r0, r3
 8007194:	f7f9 f81c 	bl	80001d0 <strlen>
 8007198:	2300      	movs	r3, #0
 800719a:	930a      	str	r3, [sp, #40]	; 0x28
 800719c:	f8d8 3000 	ldr.w	r3, [r8]
 80071a0:	9005      	str	r0, [sp, #20]
 80071a2:	3307      	adds	r3, #7
 80071a4:	f023 0307 	bic.w	r3, r3, #7
 80071a8:	f103 0208 	add.w	r2, r3, #8
 80071ac:	f894 a018 	ldrb.w	sl, [r4, #24]
 80071b0:	f8d4 b000 	ldr.w	fp, [r4]
 80071b4:	f8c8 2000 	str.w	r2, [r8]
 80071b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071bc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80071c0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80071c4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80071c8:	9307      	str	r3, [sp, #28]
 80071ca:	f8cd 8018 	str.w	r8, [sp, #24]
 80071ce:	f04f 32ff 	mov.w	r2, #4294967295
 80071d2:	4ba7      	ldr	r3, [pc, #668]	; (8007470 <_printf_float+0x2f8>)
 80071d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80071d8:	f7f9 fca8 	bl	8000b2c <__aeabi_dcmpun>
 80071dc:	bb70      	cbnz	r0, 800723c <_printf_float+0xc4>
 80071de:	f04f 32ff 	mov.w	r2, #4294967295
 80071e2:	4ba3      	ldr	r3, [pc, #652]	; (8007470 <_printf_float+0x2f8>)
 80071e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80071e8:	f7f9 fc82 	bl	8000af0 <__aeabi_dcmple>
 80071ec:	bb30      	cbnz	r0, 800723c <_printf_float+0xc4>
 80071ee:	2200      	movs	r2, #0
 80071f0:	2300      	movs	r3, #0
 80071f2:	4640      	mov	r0, r8
 80071f4:	4649      	mov	r1, r9
 80071f6:	f7f9 fc71 	bl	8000adc <__aeabi_dcmplt>
 80071fa:	b110      	cbz	r0, 8007202 <_printf_float+0x8a>
 80071fc:	232d      	movs	r3, #45	; 0x2d
 80071fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007202:	4a9c      	ldr	r2, [pc, #624]	; (8007474 <_printf_float+0x2fc>)
 8007204:	4b9c      	ldr	r3, [pc, #624]	; (8007478 <_printf_float+0x300>)
 8007206:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800720a:	bf8c      	ite	hi
 800720c:	4690      	movhi	r8, r2
 800720e:	4698      	movls	r8, r3
 8007210:	2303      	movs	r3, #3
 8007212:	f02b 0204 	bic.w	r2, fp, #4
 8007216:	6123      	str	r3, [r4, #16]
 8007218:	6022      	str	r2, [r4, #0]
 800721a:	f04f 0900 	mov.w	r9, #0
 800721e:	9700      	str	r7, [sp, #0]
 8007220:	4633      	mov	r3, r6
 8007222:	aa0b      	add	r2, sp, #44	; 0x2c
 8007224:	4621      	mov	r1, r4
 8007226:	4628      	mov	r0, r5
 8007228:	f000 f9e6 	bl	80075f8 <_printf_common>
 800722c:	3001      	adds	r0, #1
 800722e:	f040 808d 	bne.w	800734c <_printf_float+0x1d4>
 8007232:	f04f 30ff 	mov.w	r0, #4294967295
 8007236:	b00d      	add	sp, #52	; 0x34
 8007238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800723c:	4642      	mov	r2, r8
 800723e:	464b      	mov	r3, r9
 8007240:	4640      	mov	r0, r8
 8007242:	4649      	mov	r1, r9
 8007244:	f7f9 fc72 	bl	8000b2c <__aeabi_dcmpun>
 8007248:	b110      	cbz	r0, 8007250 <_printf_float+0xd8>
 800724a:	4a8c      	ldr	r2, [pc, #560]	; (800747c <_printf_float+0x304>)
 800724c:	4b8c      	ldr	r3, [pc, #560]	; (8007480 <_printf_float+0x308>)
 800724e:	e7da      	b.n	8007206 <_printf_float+0x8e>
 8007250:	6861      	ldr	r1, [r4, #4]
 8007252:	1c4b      	adds	r3, r1, #1
 8007254:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8007258:	a80a      	add	r0, sp, #40	; 0x28
 800725a:	d13e      	bne.n	80072da <_printf_float+0x162>
 800725c:	2306      	movs	r3, #6
 800725e:	6063      	str	r3, [r4, #4]
 8007260:	2300      	movs	r3, #0
 8007262:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007266:	ab09      	add	r3, sp, #36	; 0x24
 8007268:	9300      	str	r3, [sp, #0]
 800726a:	ec49 8b10 	vmov	d0, r8, r9
 800726e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007272:	6022      	str	r2, [r4, #0]
 8007274:	f8cd a004 	str.w	sl, [sp, #4]
 8007278:	6861      	ldr	r1, [r4, #4]
 800727a:	4628      	mov	r0, r5
 800727c:	f7ff fee8 	bl	8007050 <__cvt>
 8007280:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8007284:	2b47      	cmp	r3, #71	; 0x47
 8007286:	4680      	mov	r8, r0
 8007288:	d109      	bne.n	800729e <_printf_float+0x126>
 800728a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800728c:	1cd8      	adds	r0, r3, #3
 800728e:	db02      	blt.n	8007296 <_printf_float+0x11e>
 8007290:	6862      	ldr	r2, [r4, #4]
 8007292:	4293      	cmp	r3, r2
 8007294:	dd47      	ble.n	8007326 <_printf_float+0x1ae>
 8007296:	f1aa 0a02 	sub.w	sl, sl, #2
 800729a:	fa5f fa8a 	uxtb.w	sl, sl
 800729e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80072a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80072a4:	d824      	bhi.n	80072f0 <_printf_float+0x178>
 80072a6:	3901      	subs	r1, #1
 80072a8:	4652      	mov	r2, sl
 80072aa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80072ae:	9109      	str	r1, [sp, #36]	; 0x24
 80072b0:	f7ff ff2f 	bl	8007112 <__exponent>
 80072b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80072b6:	1813      	adds	r3, r2, r0
 80072b8:	2a01      	cmp	r2, #1
 80072ba:	4681      	mov	r9, r0
 80072bc:	6123      	str	r3, [r4, #16]
 80072be:	dc02      	bgt.n	80072c6 <_printf_float+0x14e>
 80072c0:	6822      	ldr	r2, [r4, #0]
 80072c2:	07d1      	lsls	r1, r2, #31
 80072c4:	d501      	bpl.n	80072ca <_printf_float+0x152>
 80072c6:	3301      	adds	r3, #1
 80072c8:	6123      	str	r3, [r4, #16]
 80072ca:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d0a5      	beq.n	800721e <_printf_float+0xa6>
 80072d2:	232d      	movs	r3, #45	; 0x2d
 80072d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072d8:	e7a1      	b.n	800721e <_printf_float+0xa6>
 80072da:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80072de:	f000 8177 	beq.w	80075d0 <_printf_float+0x458>
 80072e2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80072e6:	d1bb      	bne.n	8007260 <_printf_float+0xe8>
 80072e8:	2900      	cmp	r1, #0
 80072ea:	d1b9      	bne.n	8007260 <_printf_float+0xe8>
 80072ec:	2301      	movs	r3, #1
 80072ee:	e7b6      	b.n	800725e <_printf_float+0xe6>
 80072f0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80072f4:	d119      	bne.n	800732a <_printf_float+0x1b2>
 80072f6:	2900      	cmp	r1, #0
 80072f8:	6863      	ldr	r3, [r4, #4]
 80072fa:	dd0c      	ble.n	8007316 <_printf_float+0x19e>
 80072fc:	6121      	str	r1, [r4, #16]
 80072fe:	b913      	cbnz	r3, 8007306 <_printf_float+0x18e>
 8007300:	6822      	ldr	r2, [r4, #0]
 8007302:	07d2      	lsls	r2, r2, #31
 8007304:	d502      	bpl.n	800730c <_printf_float+0x194>
 8007306:	3301      	adds	r3, #1
 8007308:	440b      	add	r3, r1
 800730a:	6123      	str	r3, [r4, #16]
 800730c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800730e:	65a3      	str	r3, [r4, #88]	; 0x58
 8007310:	f04f 0900 	mov.w	r9, #0
 8007314:	e7d9      	b.n	80072ca <_printf_float+0x152>
 8007316:	b913      	cbnz	r3, 800731e <_printf_float+0x1a6>
 8007318:	6822      	ldr	r2, [r4, #0]
 800731a:	07d0      	lsls	r0, r2, #31
 800731c:	d501      	bpl.n	8007322 <_printf_float+0x1aa>
 800731e:	3302      	adds	r3, #2
 8007320:	e7f3      	b.n	800730a <_printf_float+0x192>
 8007322:	2301      	movs	r3, #1
 8007324:	e7f1      	b.n	800730a <_printf_float+0x192>
 8007326:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800732a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800732e:	4293      	cmp	r3, r2
 8007330:	db05      	blt.n	800733e <_printf_float+0x1c6>
 8007332:	6822      	ldr	r2, [r4, #0]
 8007334:	6123      	str	r3, [r4, #16]
 8007336:	07d1      	lsls	r1, r2, #31
 8007338:	d5e8      	bpl.n	800730c <_printf_float+0x194>
 800733a:	3301      	adds	r3, #1
 800733c:	e7e5      	b.n	800730a <_printf_float+0x192>
 800733e:	2b00      	cmp	r3, #0
 8007340:	bfd4      	ite	le
 8007342:	f1c3 0302 	rsble	r3, r3, #2
 8007346:	2301      	movgt	r3, #1
 8007348:	4413      	add	r3, r2
 800734a:	e7de      	b.n	800730a <_printf_float+0x192>
 800734c:	6823      	ldr	r3, [r4, #0]
 800734e:	055a      	lsls	r2, r3, #21
 8007350:	d407      	bmi.n	8007362 <_printf_float+0x1ea>
 8007352:	6923      	ldr	r3, [r4, #16]
 8007354:	4642      	mov	r2, r8
 8007356:	4631      	mov	r1, r6
 8007358:	4628      	mov	r0, r5
 800735a:	47b8      	blx	r7
 800735c:	3001      	adds	r0, #1
 800735e:	d12b      	bne.n	80073b8 <_printf_float+0x240>
 8007360:	e767      	b.n	8007232 <_printf_float+0xba>
 8007362:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007366:	f240 80dc 	bls.w	8007522 <_printf_float+0x3aa>
 800736a:	2200      	movs	r2, #0
 800736c:	2300      	movs	r3, #0
 800736e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007372:	f7f9 fba9 	bl	8000ac8 <__aeabi_dcmpeq>
 8007376:	2800      	cmp	r0, #0
 8007378:	d033      	beq.n	80073e2 <_printf_float+0x26a>
 800737a:	2301      	movs	r3, #1
 800737c:	4a41      	ldr	r2, [pc, #260]	; (8007484 <_printf_float+0x30c>)
 800737e:	4631      	mov	r1, r6
 8007380:	4628      	mov	r0, r5
 8007382:	47b8      	blx	r7
 8007384:	3001      	adds	r0, #1
 8007386:	f43f af54 	beq.w	8007232 <_printf_float+0xba>
 800738a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800738e:	429a      	cmp	r2, r3
 8007390:	db02      	blt.n	8007398 <_printf_float+0x220>
 8007392:	6823      	ldr	r3, [r4, #0]
 8007394:	07d8      	lsls	r0, r3, #31
 8007396:	d50f      	bpl.n	80073b8 <_printf_float+0x240>
 8007398:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800739c:	4631      	mov	r1, r6
 800739e:	4628      	mov	r0, r5
 80073a0:	47b8      	blx	r7
 80073a2:	3001      	adds	r0, #1
 80073a4:	f43f af45 	beq.w	8007232 <_printf_float+0xba>
 80073a8:	f04f 0800 	mov.w	r8, #0
 80073ac:	f104 091a 	add.w	r9, r4, #26
 80073b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073b2:	3b01      	subs	r3, #1
 80073b4:	4543      	cmp	r3, r8
 80073b6:	dc09      	bgt.n	80073cc <_printf_float+0x254>
 80073b8:	6823      	ldr	r3, [r4, #0]
 80073ba:	079b      	lsls	r3, r3, #30
 80073bc:	f100 8103 	bmi.w	80075c6 <_printf_float+0x44e>
 80073c0:	68e0      	ldr	r0, [r4, #12]
 80073c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073c4:	4298      	cmp	r0, r3
 80073c6:	bfb8      	it	lt
 80073c8:	4618      	movlt	r0, r3
 80073ca:	e734      	b.n	8007236 <_printf_float+0xbe>
 80073cc:	2301      	movs	r3, #1
 80073ce:	464a      	mov	r2, r9
 80073d0:	4631      	mov	r1, r6
 80073d2:	4628      	mov	r0, r5
 80073d4:	47b8      	blx	r7
 80073d6:	3001      	adds	r0, #1
 80073d8:	f43f af2b 	beq.w	8007232 <_printf_float+0xba>
 80073dc:	f108 0801 	add.w	r8, r8, #1
 80073e0:	e7e6      	b.n	80073b0 <_printf_float+0x238>
 80073e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	dc2b      	bgt.n	8007440 <_printf_float+0x2c8>
 80073e8:	2301      	movs	r3, #1
 80073ea:	4a26      	ldr	r2, [pc, #152]	; (8007484 <_printf_float+0x30c>)
 80073ec:	4631      	mov	r1, r6
 80073ee:	4628      	mov	r0, r5
 80073f0:	47b8      	blx	r7
 80073f2:	3001      	adds	r0, #1
 80073f4:	f43f af1d 	beq.w	8007232 <_printf_float+0xba>
 80073f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073fa:	b923      	cbnz	r3, 8007406 <_printf_float+0x28e>
 80073fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073fe:	b913      	cbnz	r3, 8007406 <_printf_float+0x28e>
 8007400:	6823      	ldr	r3, [r4, #0]
 8007402:	07d9      	lsls	r1, r3, #31
 8007404:	d5d8      	bpl.n	80073b8 <_printf_float+0x240>
 8007406:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800740a:	4631      	mov	r1, r6
 800740c:	4628      	mov	r0, r5
 800740e:	47b8      	blx	r7
 8007410:	3001      	adds	r0, #1
 8007412:	f43f af0e 	beq.w	8007232 <_printf_float+0xba>
 8007416:	f04f 0900 	mov.w	r9, #0
 800741a:	f104 0a1a 	add.w	sl, r4, #26
 800741e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007420:	425b      	negs	r3, r3
 8007422:	454b      	cmp	r3, r9
 8007424:	dc01      	bgt.n	800742a <_printf_float+0x2b2>
 8007426:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007428:	e794      	b.n	8007354 <_printf_float+0x1dc>
 800742a:	2301      	movs	r3, #1
 800742c:	4652      	mov	r2, sl
 800742e:	4631      	mov	r1, r6
 8007430:	4628      	mov	r0, r5
 8007432:	47b8      	blx	r7
 8007434:	3001      	adds	r0, #1
 8007436:	f43f aefc 	beq.w	8007232 <_printf_float+0xba>
 800743a:	f109 0901 	add.w	r9, r9, #1
 800743e:	e7ee      	b.n	800741e <_printf_float+0x2a6>
 8007440:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007442:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007444:	429a      	cmp	r2, r3
 8007446:	bfa8      	it	ge
 8007448:	461a      	movge	r2, r3
 800744a:	2a00      	cmp	r2, #0
 800744c:	4691      	mov	r9, r2
 800744e:	dd07      	ble.n	8007460 <_printf_float+0x2e8>
 8007450:	4613      	mov	r3, r2
 8007452:	4631      	mov	r1, r6
 8007454:	4642      	mov	r2, r8
 8007456:	4628      	mov	r0, r5
 8007458:	47b8      	blx	r7
 800745a:	3001      	adds	r0, #1
 800745c:	f43f aee9 	beq.w	8007232 <_printf_float+0xba>
 8007460:	f104 031a 	add.w	r3, r4, #26
 8007464:	f04f 0b00 	mov.w	fp, #0
 8007468:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800746c:	9306      	str	r3, [sp, #24]
 800746e:	e015      	b.n	800749c <_printf_float+0x324>
 8007470:	7fefffff 	.word	0x7fefffff
 8007474:	08009940 	.word	0x08009940
 8007478:	0800993c 	.word	0x0800993c
 800747c:	08009948 	.word	0x08009948
 8007480:	08009944 	.word	0x08009944
 8007484:	0800994c 	.word	0x0800994c
 8007488:	2301      	movs	r3, #1
 800748a:	9a06      	ldr	r2, [sp, #24]
 800748c:	4631      	mov	r1, r6
 800748e:	4628      	mov	r0, r5
 8007490:	47b8      	blx	r7
 8007492:	3001      	adds	r0, #1
 8007494:	f43f aecd 	beq.w	8007232 <_printf_float+0xba>
 8007498:	f10b 0b01 	add.w	fp, fp, #1
 800749c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80074a0:	ebaa 0309 	sub.w	r3, sl, r9
 80074a4:	455b      	cmp	r3, fp
 80074a6:	dcef      	bgt.n	8007488 <_printf_float+0x310>
 80074a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80074ac:	429a      	cmp	r2, r3
 80074ae:	44d0      	add	r8, sl
 80074b0:	db15      	blt.n	80074de <_printf_float+0x366>
 80074b2:	6823      	ldr	r3, [r4, #0]
 80074b4:	07da      	lsls	r2, r3, #31
 80074b6:	d412      	bmi.n	80074de <_printf_float+0x366>
 80074b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 80074bc:	eba3 020a 	sub.w	r2, r3, sl
 80074c0:	eba3 0a01 	sub.w	sl, r3, r1
 80074c4:	4592      	cmp	sl, r2
 80074c6:	bfa8      	it	ge
 80074c8:	4692      	movge	sl, r2
 80074ca:	f1ba 0f00 	cmp.w	sl, #0
 80074ce:	dc0e      	bgt.n	80074ee <_printf_float+0x376>
 80074d0:	f04f 0800 	mov.w	r8, #0
 80074d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80074d8:	f104 091a 	add.w	r9, r4, #26
 80074dc:	e019      	b.n	8007512 <_printf_float+0x39a>
 80074de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80074e2:	4631      	mov	r1, r6
 80074e4:	4628      	mov	r0, r5
 80074e6:	47b8      	blx	r7
 80074e8:	3001      	adds	r0, #1
 80074ea:	d1e5      	bne.n	80074b8 <_printf_float+0x340>
 80074ec:	e6a1      	b.n	8007232 <_printf_float+0xba>
 80074ee:	4653      	mov	r3, sl
 80074f0:	4642      	mov	r2, r8
 80074f2:	4631      	mov	r1, r6
 80074f4:	4628      	mov	r0, r5
 80074f6:	47b8      	blx	r7
 80074f8:	3001      	adds	r0, #1
 80074fa:	d1e9      	bne.n	80074d0 <_printf_float+0x358>
 80074fc:	e699      	b.n	8007232 <_printf_float+0xba>
 80074fe:	2301      	movs	r3, #1
 8007500:	464a      	mov	r2, r9
 8007502:	4631      	mov	r1, r6
 8007504:	4628      	mov	r0, r5
 8007506:	47b8      	blx	r7
 8007508:	3001      	adds	r0, #1
 800750a:	f43f ae92 	beq.w	8007232 <_printf_float+0xba>
 800750e:	f108 0801 	add.w	r8, r8, #1
 8007512:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007516:	1a9b      	subs	r3, r3, r2
 8007518:	eba3 030a 	sub.w	r3, r3, sl
 800751c:	4543      	cmp	r3, r8
 800751e:	dcee      	bgt.n	80074fe <_printf_float+0x386>
 8007520:	e74a      	b.n	80073b8 <_printf_float+0x240>
 8007522:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007524:	2a01      	cmp	r2, #1
 8007526:	dc01      	bgt.n	800752c <_printf_float+0x3b4>
 8007528:	07db      	lsls	r3, r3, #31
 800752a:	d53a      	bpl.n	80075a2 <_printf_float+0x42a>
 800752c:	2301      	movs	r3, #1
 800752e:	4642      	mov	r2, r8
 8007530:	4631      	mov	r1, r6
 8007532:	4628      	mov	r0, r5
 8007534:	47b8      	blx	r7
 8007536:	3001      	adds	r0, #1
 8007538:	f43f ae7b 	beq.w	8007232 <_printf_float+0xba>
 800753c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007540:	4631      	mov	r1, r6
 8007542:	4628      	mov	r0, r5
 8007544:	47b8      	blx	r7
 8007546:	3001      	adds	r0, #1
 8007548:	f108 0801 	add.w	r8, r8, #1
 800754c:	f43f ae71 	beq.w	8007232 <_printf_float+0xba>
 8007550:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007552:	2200      	movs	r2, #0
 8007554:	f103 3aff 	add.w	sl, r3, #4294967295
 8007558:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800755c:	2300      	movs	r3, #0
 800755e:	f7f9 fab3 	bl	8000ac8 <__aeabi_dcmpeq>
 8007562:	b9c8      	cbnz	r0, 8007598 <_printf_float+0x420>
 8007564:	4653      	mov	r3, sl
 8007566:	4642      	mov	r2, r8
 8007568:	4631      	mov	r1, r6
 800756a:	4628      	mov	r0, r5
 800756c:	47b8      	blx	r7
 800756e:	3001      	adds	r0, #1
 8007570:	d10e      	bne.n	8007590 <_printf_float+0x418>
 8007572:	e65e      	b.n	8007232 <_printf_float+0xba>
 8007574:	2301      	movs	r3, #1
 8007576:	4652      	mov	r2, sl
 8007578:	4631      	mov	r1, r6
 800757a:	4628      	mov	r0, r5
 800757c:	47b8      	blx	r7
 800757e:	3001      	adds	r0, #1
 8007580:	f43f ae57 	beq.w	8007232 <_printf_float+0xba>
 8007584:	f108 0801 	add.w	r8, r8, #1
 8007588:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800758a:	3b01      	subs	r3, #1
 800758c:	4543      	cmp	r3, r8
 800758e:	dcf1      	bgt.n	8007574 <_printf_float+0x3fc>
 8007590:	464b      	mov	r3, r9
 8007592:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007596:	e6de      	b.n	8007356 <_printf_float+0x1de>
 8007598:	f04f 0800 	mov.w	r8, #0
 800759c:	f104 0a1a 	add.w	sl, r4, #26
 80075a0:	e7f2      	b.n	8007588 <_printf_float+0x410>
 80075a2:	2301      	movs	r3, #1
 80075a4:	e7df      	b.n	8007566 <_printf_float+0x3ee>
 80075a6:	2301      	movs	r3, #1
 80075a8:	464a      	mov	r2, r9
 80075aa:	4631      	mov	r1, r6
 80075ac:	4628      	mov	r0, r5
 80075ae:	47b8      	blx	r7
 80075b0:	3001      	adds	r0, #1
 80075b2:	f43f ae3e 	beq.w	8007232 <_printf_float+0xba>
 80075b6:	f108 0801 	add.w	r8, r8, #1
 80075ba:	68e3      	ldr	r3, [r4, #12]
 80075bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80075be:	1a9b      	subs	r3, r3, r2
 80075c0:	4543      	cmp	r3, r8
 80075c2:	dcf0      	bgt.n	80075a6 <_printf_float+0x42e>
 80075c4:	e6fc      	b.n	80073c0 <_printf_float+0x248>
 80075c6:	f04f 0800 	mov.w	r8, #0
 80075ca:	f104 0919 	add.w	r9, r4, #25
 80075ce:	e7f4      	b.n	80075ba <_printf_float+0x442>
 80075d0:	2900      	cmp	r1, #0
 80075d2:	f43f ae8b 	beq.w	80072ec <_printf_float+0x174>
 80075d6:	2300      	movs	r3, #0
 80075d8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80075dc:	ab09      	add	r3, sp, #36	; 0x24
 80075de:	9300      	str	r3, [sp, #0]
 80075e0:	ec49 8b10 	vmov	d0, r8, r9
 80075e4:	6022      	str	r2, [r4, #0]
 80075e6:	f8cd a004 	str.w	sl, [sp, #4]
 80075ea:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80075ee:	4628      	mov	r0, r5
 80075f0:	f7ff fd2e 	bl	8007050 <__cvt>
 80075f4:	4680      	mov	r8, r0
 80075f6:	e648      	b.n	800728a <_printf_float+0x112>

080075f8 <_printf_common>:
 80075f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075fc:	4691      	mov	r9, r2
 80075fe:	461f      	mov	r7, r3
 8007600:	688a      	ldr	r2, [r1, #8]
 8007602:	690b      	ldr	r3, [r1, #16]
 8007604:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007608:	4293      	cmp	r3, r2
 800760a:	bfb8      	it	lt
 800760c:	4613      	movlt	r3, r2
 800760e:	f8c9 3000 	str.w	r3, [r9]
 8007612:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007616:	4606      	mov	r6, r0
 8007618:	460c      	mov	r4, r1
 800761a:	b112      	cbz	r2, 8007622 <_printf_common+0x2a>
 800761c:	3301      	adds	r3, #1
 800761e:	f8c9 3000 	str.w	r3, [r9]
 8007622:	6823      	ldr	r3, [r4, #0]
 8007624:	0699      	lsls	r1, r3, #26
 8007626:	bf42      	ittt	mi
 8007628:	f8d9 3000 	ldrmi.w	r3, [r9]
 800762c:	3302      	addmi	r3, #2
 800762e:	f8c9 3000 	strmi.w	r3, [r9]
 8007632:	6825      	ldr	r5, [r4, #0]
 8007634:	f015 0506 	ands.w	r5, r5, #6
 8007638:	d107      	bne.n	800764a <_printf_common+0x52>
 800763a:	f104 0a19 	add.w	sl, r4, #25
 800763e:	68e3      	ldr	r3, [r4, #12]
 8007640:	f8d9 2000 	ldr.w	r2, [r9]
 8007644:	1a9b      	subs	r3, r3, r2
 8007646:	42ab      	cmp	r3, r5
 8007648:	dc28      	bgt.n	800769c <_printf_common+0xa4>
 800764a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800764e:	6822      	ldr	r2, [r4, #0]
 8007650:	3300      	adds	r3, #0
 8007652:	bf18      	it	ne
 8007654:	2301      	movne	r3, #1
 8007656:	0692      	lsls	r2, r2, #26
 8007658:	d42d      	bmi.n	80076b6 <_printf_common+0xbe>
 800765a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800765e:	4639      	mov	r1, r7
 8007660:	4630      	mov	r0, r6
 8007662:	47c0      	blx	r8
 8007664:	3001      	adds	r0, #1
 8007666:	d020      	beq.n	80076aa <_printf_common+0xb2>
 8007668:	6823      	ldr	r3, [r4, #0]
 800766a:	68e5      	ldr	r5, [r4, #12]
 800766c:	f8d9 2000 	ldr.w	r2, [r9]
 8007670:	f003 0306 	and.w	r3, r3, #6
 8007674:	2b04      	cmp	r3, #4
 8007676:	bf08      	it	eq
 8007678:	1aad      	subeq	r5, r5, r2
 800767a:	68a3      	ldr	r3, [r4, #8]
 800767c:	6922      	ldr	r2, [r4, #16]
 800767e:	bf0c      	ite	eq
 8007680:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007684:	2500      	movne	r5, #0
 8007686:	4293      	cmp	r3, r2
 8007688:	bfc4      	itt	gt
 800768a:	1a9b      	subgt	r3, r3, r2
 800768c:	18ed      	addgt	r5, r5, r3
 800768e:	f04f 0900 	mov.w	r9, #0
 8007692:	341a      	adds	r4, #26
 8007694:	454d      	cmp	r5, r9
 8007696:	d11a      	bne.n	80076ce <_printf_common+0xd6>
 8007698:	2000      	movs	r0, #0
 800769a:	e008      	b.n	80076ae <_printf_common+0xb6>
 800769c:	2301      	movs	r3, #1
 800769e:	4652      	mov	r2, sl
 80076a0:	4639      	mov	r1, r7
 80076a2:	4630      	mov	r0, r6
 80076a4:	47c0      	blx	r8
 80076a6:	3001      	adds	r0, #1
 80076a8:	d103      	bne.n	80076b2 <_printf_common+0xba>
 80076aa:	f04f 30ff 	mov.w	r0, #4294967295
 80076ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076b2:	3501      	adds	r5, #1
 80076b4:	e7c3      	b.n	800763e <_printf_common+0x46>
 80076b6:	18e1      	adds	r1, r4, r3
 80076b8:	1c5a      	adds	r2, r3, #1
 80076ba:	2030      	movs	r0, #48	; 0x30
 80076bc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80076c0:	4422      	add	r2, r4
 80076c2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80076c6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80076ca:	3302      	adds	r3, #2
 80076cc:	e7c5      	b.n	800765a <_printf_common+0x62>
 80076ce:	2301      	movs	r3, #1
 80076d0:	4622      	mov	r2, r4
 80076d2:	4639      	mov	r1, r7
 80076d4:	4630      	mov	r0, r6
 80076d6:	47c0      	blx	r8
 80076d8:	3001      	adds	r0, #1
 80076da:	d0e6      	beq.n	80076aa <_printf_common+0xb2>
 80076dc:	f109 0901 	add.w	r9, r9, #1
 80076e0:	e7d8      	b.n	8007694 <_printf_common+0x9c>
	...

080076e4 <_printf_i>:
 80076e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80076e8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80076ec:	460c      	mov	r4, r1
 80076ee:	7e09      	ldrb	r1, [r1, #24]
 80076f0:	b085      	sub	sp, #20
 80076f2:	296e      	cmp	r1, #110	; 0x6e
 80076f4:	4617      	mov	r7, r2
 80076f6:	4606      	mov	r6, r0
 80076f8:	4698      	mov	r8, r3
 80076fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80076fc:	f000 80b3 	beq.w	8007866 <_printf_i+0x182>
 8007700:	d822      	bhi.n	8007748 <_printf_i+0x64>
 8007702:	2963      	cmp	r1, #99	; 0x63
 8007704:	d036      	beq.n	8007774 <_printf_i+0x90>
 8007706:	d80a      	bhi.n	800771e <_printf_i+0x3a>
 8007708:	2900      	cmp	r1, #0
 800770a:	f000 80b9 	beq.w	8007880 <_printf_i+0x19c>
 800770e:	2958      	cmp	r1, #88	; 0x58
 8007710:	f000 8083 	beq.w	800781a <_printf_i+0x136>
 8007714:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007718:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800771c:	e032      	b.n	8007784 <_printf_i+0xa0>
 800771e:	2964      	cmp	r1, #100	; 0x64
 8007720:	d001      	beq.n	8007726 <_printf_i+0x42>
 8007722:	2969      	cmp	r1, #105	; 0x69
 8007724:	d1f6      	bne.n	8007714 <_printf_i+0x30>
 8007726:	6820      	ldr	r0, [r4, #0]
 8007728:	6813      	ldr	r3, [r2, #0]
 800772a:	0605      	lsls	r5, r0, #24
 800772c:	f103 0104 	add.w	r1, r3, #4
 8007730:	d52a      	bpl.n	8007788 <_printf_i+0xa4>
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	6011      	str	r1, [r2, #0]
 8007736:	2b00      	cmp	r3, #0
 8007738:	da03      	bge.n	8007742 <_printf_i+0x5e>
 800773a:	222d      	movs	r2, #45	; 0x2d
 800773c:	425b      	negs	r3, r3
 800773e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007742:	486f      	ldr	r0, [pc, #444]	; (8007900 <_printf_i+0x21c>)
 8007744:	220a      	movs	r2, #10
 8007746:	e039      	b.n	80077bc <_printf_i+0xd8>
 8007748:	2973      	cmp	r1, #115	; 0x73
 800774a:	f000 809d 	beq.w	8007888 <_printf_i+0x1a4>
 800774e:	d808      	bhi.n	8007762 <_printf_i+0x7e>
 8007750:	296f      	cmp	r1, #111	; 0x6f
 8007752:	d020      	beq.n	8007796 <_printf_i+0xb2>
 8007754:	2970      	cmp	r1, #112	; 0x70
 8007756:	d1dd      	bne.n	8007714 <_printf_i+0x30>
 8007758:	6823      	ldr	r3, [r4, #0]
 800775a:	f043 0320 	orr.w	r3, r3, #32
 800775e:	6023      	str	r3, [r4, #0]
 8007760:	e003      	b.n	800776a <_printf_i+0x86>
 8007762:	2975      	cmp	r1, #117	; 0x75
 8007764:	d017      	beq.n	8007796 <_printf_i+0xb2>
 8007766:	2978      	cmp	r1, #120	; 0x78
 8007768:	d1d4      	bne.n	8007714 <_printf_i+0x30>
 800776a:	2378      	movs	r3, #120	; 0x78
 800776c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007770:	4864      	ldr	r0, [pc, #400]	; (8007904 <_printf_i+0x220>)
 8007772:	e055      	b.n	8007820 <_printf_i+0x13c>
 8007774:	6813      	ldr	r3, [r2, #0]
 8007776:	1d19      	adds	r1, r3, #4
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	6011      	str	r1, [r2, #0]
 800777c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007780:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007784:	2301      	movs	r3, #1
 8007786:	e08c      	b.n	80078a2 <_printf_i+0x1be>
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	6011      	str	r1, [r2, #0]
 800778c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007790:	bf18      	it	ne
 8007792:	b21b      	sxthne	r3, r3
 8007794:	e7cf      	b.n	8007736 <_printf_i+0x52>
 8007796:	6813      	ldr	r3, [r2, #0]
 8007798:	6825      	ldr	r5, [r4, #0]
 800779a:	1d18      	adds	r0, r3, #4
 800779c:	6010      	str	r0, [r2, #0]
 800779e:	0628      	lsls	r0, r5, #24
 80077a0:	d501      	bpl.n	80077a6 <_printf_i+0xc2>
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	e002      	b.n	80077ac <_printf_i+0xc8>
 80077a6:	0668      	lsls	r0, r5, #25
 80077a8:	d5fb      	bpl.n	80077a2 <_printf_i+0xbe>
 80077aa:	881b      	ldrh	r3, [r3, #0]
 80077ac:	4854      	ldr	r0, [pc, #336]	; (8007900 <_printf_i+0x21c>)
 80077ae:	296f      	cmp	r1, #111	; 0x6f
 80077b0:	bf14      	ite	ne
 80077b2:	220a      	movne	r2, #10
 80077b4:	2208      	moveq	r2, #8
 80077b6:	2100      	movs	r1, #0
 80077b8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80077bc:	6865      	ldr	r5, [r4, #4]
 80077be:	60a5      	str	r5, [r4, #8]
 80077c0:	2d00      	cmp	r5, #0
 80077c2:	f2c0 8095 	blt.w	80078f0 <_printf_i+0x20c>
 80077c6:	6821      	ldr	r1, [r4, #0]
 80077c8:	f021 0104 	bic.w	r1, r1, #4
 80077cc:	6021      	str	r1, [r4, #0]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d13d      	bne.n	800784e <_printf_i+0x16a>
 80077d2:	2d00      	cmp	r5, #0
 80077d4:	f040 808e 	bne.w	80078f4 <_printf_i+0x210>
 80077d8:	4665      	mov	r5, ip
 80077da:	2a08      	cmp	r2, #8
 80077dc:	d10b      	bne.n	80077f6 <_printf_i+0x112>
 80077de:	6823      	ldr	r3, [r4, #0]
 80077e0:	07db      	lsls	r3, r3, #31
 80077e2:	d508      	bpl.n	80077f6 <_printf_i+0x112>
 80077e4:	6923      	ldr	r3, [r4, #16]
 80077e6:	6862      	ldr	r2, [r4, #4]
 80077e8:	429a      	cmp	r2, r3
 80077ea:	bfde      	ittt	le
 80077ec:	2330      	movle	r3, #48	; 0x30
 80077ee:	f805 3c01 	strble.w	r3, [r5, #-1]
 80077f2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80077f6:	ebac 0305 	sub.w	r3, ip, r5
 80077fa:	6123      	str	r3, [r4, #16]
 80077fc:	f8cd 8000 	str.w	r8, [sp]
 8007800:	463b      	mov	r3, r7
 8007802:	aa03      	add	r2, sp, #12
 8007804:	4621      	mov	r1, r4
 8007806:	4630      	mov	r0, r6
 8007808:	f7ff fef6 	bl	80075f8 <_printf_common>
 800780c:	3001      	adds	r0, #1
 800780e:	d14d      	bne.n	80078ac <_printf_i+0x1c8>
 8007810:	f04f 30ff 	mov.w	r0, #4294967295
 8007814:	b005      	add	sp, #20
 8007816:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800781a:	4839      	ldr	r0, [pc, #228]	; (8007900 <_printf_i+0x21c>)
 800781c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007820:	6813      	ldr	r3, [r2, #0]
 8007822:	6821      	ldr	r1, [r4, #0]
 8007824:	1d1d      	adds	r5, r3, #4
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	6015      	str	r5, [r2, #0]
 800782a:	060a      	lsls	r2, r1, #24
 800782c:	d50b      	bpl.n	8007846 <_printf_i+0x162>
 800782e:	07ca      	lsls	r2, r1, #31
 8007830:	bf44      	itt	mi
 8007832:	f041 0120 	orrmi.w	r1, r1, #32
 8007836:	6021      	strmi	r1, [r4, #0]
 8007838:	b91b      	cbnz	r3, 8007842 <_printf_i+0x15e>
 800783a:	6822      	ldr	r2, [r4, #0]
 800783c:	f022 0220 	bic.w	r2, r2, #32
 8007840:	6022      	str	r2, [r4, #0]
 8007842:	2210      	movs	r2, #16
 8007844:	e7b7      	b.n	80077b6 <_printf_i+0xd2>
 8007846:	064d      	lsls	r5, r1, #25
 8007848:	bf48      	it	mi
 800784a:	b29b      	uxthmi	r3, r3
 800784c:	e7ef      	b.n	800782e <_printf_i+0x14a>
 800784e:	4665      	mov	r5, ip
 8007850:	fbb3 f1f2 	udiv	r1, r3, r2
 8007854:	fb02 3311 	mls	r3, r2, r1, r3
 8007858:	5cc3      	ldrb	r3, [r0, r3]
 800785a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800785e:	460b      	mov	r3, r1
 8007860:	2900      	cmp	r1, #0
 8007862:	d1f5      	bne.n	8007850 <_printf_i+0x16c>
 8007864:	e7b9      	b.n	80077da <_printf_i+0xf6>
 8007866:	6813      	ldr	r3, [r2, #0]
 8007868:	6825      	ldr	r5, [r4, #0]
 800786a:	6961      	ldr	r1, [r4, #20]
 800786c:	1d18      	adds	r0, r3, #4
 800786e:	6010      	str	r0, [r2, #0]
 8007870:	0628      	lsls	r0, r5, #24
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	d501      	bpl.n	800787a <_printf_i+0x196>
 8007876:	6019      	str	r1, [r3, #0]
 8007878:	e002      	b.n	8007880 <_printf_i+0x19c>
 800787a:	066a      	lsls	r2, r5, #25
 800787c:	d5fb      	bpl.n	8007876 <_printf_i+0x192>
 800787e:	8019      	strh	r1, [r3, #0]
 8007880:	2300      	movs	r3, #0
 8007882:	6123      	str	r3, [r4, #16]
 8007884:	4665      	mov	r5, ip
 8007886:	e7b9      	b.n	80077fc <_printf_i+0x118>
 8007888:	6813      	ldr	r3, [r2, #0]
 800788a:	1d19      	adds	r1, r3, #4
 800788c:	6011      	str	r1, [r2, #0]
 800788e:	681d      	ldr	r5, [r3, #0]
 8007890:	6862      	ldr	r2, [r4, #4]
 8007892:	2100      	movs	r1, #0
 8007894:	4628      	mov	r0, r5
 8007896:	f7f8 fca3 	bl	80001e0 <memchr>
 800789a:	b108      	cbz	r0, 80078a0 <_printf_i+0x1bc>
 800789c:	1b40      	subs	r0, r0, r5
 800789e:	6060      	str	r0, [r4, #4]
 80078a0:	6863      	ldr	r3, [r4, #4]
 80078a2:	6123      	str	r3, [r4, #16]
 80078a4:	2300      	movs	r3, #0
 80078a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078aa:	e7a7      	b.n	80077fc <_printf_i+0x118>
 80078ac:	6923      	ldr	r3, [r4, #16]
 80078ae:	462a      	mov	r2, r5
 80078b0:	4639      	mov	r1, r7
 80078b2:	4630      	mov	r0, r6
 80078b4:	47c0      	blx	r8
 80078b6:	3001      	adds	r0, #1
 80078b8:	d0aa      	beq.n	8007810 <_printf_i+0x12c>
 80078ba:	6823      	ldr	r3, [r4, #0]
 80078bc:	079b      	lsls	r3, r3, #30
 80078be:	d413      	bmi.n	80078e8 <_printf_i+0x204>
 80078c0:	68e0      	ldr	r0, [r4, #12]
 80078c2:	9b03      	ldr	r3, [sp, #12]
 80078c4:	4298      	cmp	r0, r3
 80078c6:	bfb8      	it	lt
 80078c8:	4618      	movlt	r0, r3
 80078ca:	e7a3      	b.n	8007814 <_printf_i+0x130>
 80078cc:	2301      	movs	r3, #1
 80078ce:	464a      	mov	r2, r9
 80078d0:	4639      	mov	r1, r7
 80078d2:	4630      	mov	r0, r6
 80078d4:	47c0      	blx	r8
 80078d6:	3001      	adds	r0, #1
 80078d8:	d09a      	beq.n	8007810 <_printf_i+0x12c>
 80078da:	3501      	adds	r5, #1
 80078dc:	68e3      	ldr	r3, [r4, #12]
 80078de:	9a03      	ldr	r2, [sp, #12]
 80078e0:	1a9b      	subs	r3, r3, r2
 80078e2:	42ab      	cmp	r3, r5
 80078e4:	dcf2      	bgt.n	80078cc <_printf_i+0x1e8>
 80078e6:	e7eb      	b.n	80078c0 <_printf_i+0x1dc>
 80078e8:	2500      	movs	r5, #0
 80078ea:	f104 0919 	add.w	r9, r4, #25
 80078ee:	e7f5      	b.n	80078dc <_printf_i+0x1f8>
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d1ac      	bne.n	800784e <_printf_i+0x16a>
 80078f4:	7803      	ldrb	r3, [r0, #0]
 80078f6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80078fa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80078fe:	e76c      	b.n	80077da <_printf_i+0xf6>
 8007900:	0800994e 	.word	0x0800994e
 8007904:	0800995f 	.word	0x0800995f

08007908 <iprintf>:
 8007908:	b40f      	push	{r0, r1, r2, r3}
 800790a:	4b0a      	ldr	r3, [pc, #40]	; (8007934 <iprintf+0x2c>)
 800790c:	b513      	push	{r0, r1, r4, lr}
 800790e:	681c      	ldr	r4, [r3, #0]
 8007910:	b124      	cbz	r4, 800791c <iprintf+0x14>
 8007912:	69a3      	ldr	r3, [r4, #24]
 8007914:	b913      	cbnz	r3, 800791c <iprintf+0x14>
 8007916:	4620      	mov	r0, r4
 8007918:	f001 f91e 	bl	8008b58 <__sinit>
 800791c:	ab05      	add	r3, sp, #20
 800791e:	9a04      	ldr	r2, [sp, #16]
 8007920:	68a1      	ldr	r1, [r4, #8]
 8007922:	9301      	str	r3, [sp, #4]
 8007924:	4620      	mov	r0, r4
 8007926:	f001 fde1 	bl	80094ec <_vfiprintf_r>
 800792a:	b002      	add	sp, #8
 800792c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007930:	b004      	add	sp, #16
 8007932:	4770      	bx	lr
 8007934:	20000014 	.word	0x20000014

08007938 <_puts_r>:
 8007938:	b570      	push	{r4, r5, r6, lr}
 800793a:	460e      	mov	r6, r1
 800793c:	4605      	mov	r5, r0
 800793e:	b118      	cbz	r0, 8007948 <_puts_r+0x10>
 8007940:	6983      	ldr	r3, [r0, #24]
 8007942:	b90b      	cbnz	r3, 8007948 <_puts_r+0x10>
 8007944:	f001 f908 	bl	8008b58 <__sinit>
 8007948:	69ab      	ldr	r3, [r5, #24]
 800794a:	68ac      	ldr	r4, [r5, #8]
 800794c:	b913      	cbnz	r3, 8007954 <_puts_r+0x1c>
 800794e:	4628      	mov	r0, r5
 8007950:	f001 f902 	bl	8008b58 <__sinit>
 8007954:	4b23      	ldr	r3, [pc, #140]	; (80079e4 <_puts_r+0xac>)
 8007956:	429c      	cmp	r4, r3
 8007958:	d117      	bne.n	800798a <_puts_r+0x52>
 800795a:	686c      	ldr	r4, [r5, #4]
 800795c:	89a3      	ldrh	r3, [r4, #12]
 800795e:	071b      	lsls	r3, r3, #28
 8007960:	d51d      	bpl.n	800799e <_puts_r+0x66>
 8007962:	6923      	ldr	r3, [r4, #16]
 8007964:	b1db      	cbz	r3, 800799e <_puts_r+0x66>
 8007966:	3e01      	subs	r6, #1
 8007968:	68a3      	ldr	r3, [r4, #8]
 800796a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800796e:	3b01      	subs	r3, #1
 8007970:	60a3      	str	r3, [r4, #8]
 8007972:	b9e9      	cbnz	r1, 80079b0 <_puts_r+0x78>
 8007974:	2b00      	cmp	r3, #0
 8007976:	da2e      	bge.n	80079d6 <_puts_r+0x9e>
 8007978:	4622      	mov	r2, r4
 800797a:	210a      	movs	r1, #10
 800797c:	4628      	mov	r0, r5
 800797e:	f000 f8f5 	bl	8007b6c <__swbuf_r>
 8007982:	3001      	adds	r0, #1
 8007984:	d011      	beq.n	80079aa <_puts_r+0x72>
 8007986:	200a      	movs	r0, #10
 8007988:	e011      	b.n	80079ae <_puts_r+0x76>
 800798a:	4b17      	ldr	r3, [pc, #92]	; (80079e8 <_puts_r+0xb0>)
 800798c:	429c      	cmp	r4, r3
 800798e:	d101      	bne.n	8007994 <_puts_r+0x5c>
 8007990:	68ac      	ldr	r4, [r5, #8]
 8007992:	e7e3      	b.n	800795c <_puts_r+0x24>
 8007994:	4b15      	ldr	r3, [pc, #84]	; (80079ec <_puts_r+0xb4>)
 8007996:	429c      	cmp	r4, r3
 8007998:	bf08      	it	eq
 800799a:	68ec      	ldreq	r4, [r5, #12]
 800799c:	e7de      	b.n	800795c <_puts_r+0x24>
 800799e:	4621      	mov	r1, r4
 80079a0:	4628      	mov	r0, r5
 80079a2:	f000 f935 	bl	8007c10 <__swsetup_r>
 80079a6:	2800      	cmp	r0, #0
 80079a8:	d0dd      	beq.n	8007966 <_puts_r+0x2e>
 80079aa:	f04f 30ff 	mov.w	r0, #4294967295
 80079ae:	bd70      	pop	{r4, r5, r6, pc}
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	da04      	bge.n	80079be <_puts_r+0x86>
 80079b4:	69a2      	ldr	r2, [r4, #24]
 80079b6:	429a      	cmp	r2, r3
 80079b8:	dc06      	bgt.n	80079c8 <_puts_r+0x90>
 80079ba:	290a      	cmp	r1, #10
 80079bc:	d004      	beq.n	80079c8 <_puts_r+0x90>
 80079be:	6823      	ldr	r3, [r4, #0]
 80079c0:	1c5a      	adds	r2, r3, #1
 80079c2:	6022      	str	r2, [r4, #0]
 80079c4:	7019      	strb	r1, [r3, #0]
 80079c6:	e7cf      	b.n	8007968 <_puts_r+0x30>
 80079c8:	4622      	mov	r2, r4
 80079ca:	4628      	mov	r0, r5
 80079cc:	f000 f8ce 	bl	8007b6c <__swbuf_r>
 80079d0:	3001      	adds	r0, #1
 80079d2:	d1c9      	bne.n	8007968 <_puts_r+0x30>
 80079d4:	e7e9      	b.n	80079aa <_puts_r+0x72>
 80079d6:	6823      	ldr	r3, [r4, #0]
 80079d8:	200a      	movs	r0, #10
 80079da:	1c5a      	adds	r2, r3, #1
 80079dc:	6022      	str	r2, [r4, #0]
 80079de:	7018      	strb	r0, [r3, #0]
 80079e0:	e7e5      	b.n	80079ae <_puts_r+0x76>
 80079e2:	bf00      	nop
 80079e4:	080099a0 	.word	0x080099a0
 80079e8:	080099c0 	.word	0x080099c0
 80079ec:	08009980 	.word	0x08009980

080079f0 <puts>:
 80079f0:	4b02      	ldr	r3, [pc, #8]	; (80079fc <puts+0xc>)
 80079f2:	4601      	mov	r1, r0
 80079f4:	6818      	ldr	r0, [r3, #0]
 80079f6:	f7ff bf9f 	b.w	8007938 <_puts_r>
 80079fa:	bf00      	nop
 80079fc:	20000014 	.word	0x20000014

08007a00 <setbuf>:
 8007a00:	2900      	cmp	r1, #0
 8007a02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a06:	bf0c      	ite	eq
 8007a08:	2202      	moveq	r2, #2
 8007a0a:	2200      	movne	r2, #0
 8007a0c:	f000 b800 	b.w	8007a10 <setvbuf>

08007a10 <setvbuf>:
 8007a10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007a14:	461d      	mov	r5, r3
 8007a16:	4b51      	ldr	r3, [pc, #324]	; (8007b5c <setvbuf+0x14c>)
 8007a18:	681e      	ldr	r6, [r3, #0]
 8007a1a:	4604      	mov	r4, r0
 8007a1c:	460f      	mov	r7, r1
 8007a1e:	4690      	mov	r8, r2
 8007a20:	b126      	cbz	r6, 8007a2c <setvbuf+0x1c>
 8007a22:	69b3      	ldr	r3, [r6, #24]
 8007a24:	b913      	cbnz	r3, 8007a2c <setvbuf+0x1c>
 8007a26:	4630      	mov	r0, r6
 8007a28:	f001 f896 	bl	8008b58 <__sinit>
 8007a2c:	4b4c      	ldr	r3, [pc, #304]	; (8007b60 <setvbuf+0x150>)
 8007a2e:	429c      	cmp	r4, r3
 8007a30:	d152      	bne.n	8007ad8 <setvbuf+0xc8>
 8007a32:	6874      	ldr	r4, [r6, #4]
 8007a34:	f1b8 0f02 	cmp.w	r8, #2
 8007a38:	d006      	beq.n	8007a48 <setvbuf+0x38>
 8007a3a:	f1b8 0f01 	cmp.w	r8, #1
 8007a3e:	f200 8089 	bhi.w	8007b54 <setvbuf+0x144>
 8007a42:	2d00      	cmp	r5, #0
 8007a44:	f2c0 8086 	blt.w	8007b54 <setvbuf+0x144>
 8007a48:	4621      	mov	r1, r4
 8007a4a:	4630      	mov	r0, r6
 8007a4c:	f001 f81a 	bl	8008a84 <_fflush_r>
 8007a50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a52:	b141      	cbz	r1, 8007a66 <setvbuf+0x56>
 8007a54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a58:	4299      	cmp	r1, r3
 8007a5a:	d002      	beq.n	8007a62 <setvbuf+0x52>
 8007a5c:	4630      	mov	r0, r6
 8007a5e:	f001 fc73 	bl	8009348 <_free_r>
 8007a62:	2300      	movs	r3, #0
 8007a64:	6363      	str	r3, [r4, #52]	; 0x34
 8007a66:	2300      	movs	r3, #0
 8007a68:	61a3      	str	r3, [r4, #24]
 8007a6a:	6063      	str	r3, [r4, #4]
 8007a6c:	89a3      	ldrh	r3, [r4, #12]
 8007a6e:	061b      	lsls	r3, r3, #24
 8007a70:	d503      	bpl.n	8007a7a <setvbuf+0x6a>
 8007a72:	6921      	ldr	r1, [r4, #16]
 8007a74:	4630      	mov	r0, r6
 8007a76:	f001 fc67 	bl	8009348 <_free_r>
 8007a7a:	89a3      	ldrh	r3, [r4, #12]
 8007a7c:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8007a80:	f023 0303 	bic.w	r3, r3, #3
 8007a84:	f1b8 0f02 	cmp.w	r8, #2
 8007a88:	81a3      	strh	r3, [r4, #12]
 8007a8a:	d05d      	beq.n	8007b48 <setvbuf+0x138>
 8007a8c:	ab01      	add	r3, sp, #4
 8007a8e:	466a      	mov	r2, sp
 8007a90:	4621      	mov	r1, r4
 8007a92:	4630      	mov	r0, r6
 8007a94:	f001 f8f8 	bl	8008c88 <__swhatbuf_r>
 8007a98:	89a3      	ldrh	r3, [r4, #12]
 8007a9a:	4318      	orrs	r0, r3
 8007a9c:	81a0      	strh	r0, [r4, #12]
 8007a9e:	bb2d      	cbnz	r5, 8007aec <setvbuf+0xdc>
 8007aa0:	9d00      	ldr	r5, [sp, #0]
 8007aa2:	4628      	mov	r0, r5
 8007aa4:	f001 f954 	bl	8008d50 <malloc>
 8007aa8:	4607      	mov	r7, r0
 8007aaa:	2800      	cmp	r0, #0
 8007aac:	d14e      	bne.n	8007b4c <setvbuf+0x13c>
 8007aae:	f8dd 9000 	ldr.w	r9, [sp]
 8007ab2:	45a9      	cmp	r9, r5
 8007ab4:	d13c      	bne.n	8007b30 <setvbuf+0x120>
 8007ab6:	f04f 30ff 	mov.w	r0, #4294967295
 8007aba:	89a3      	ldrh	r3, [r4, #12]
 8007abc:	f043 0302 	orr.w	r3, r3, #2
 8007ac0:	81a3      	strh	r3, [r4, #12]
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	60a3      	str	r3, [r4, #8]
 8007ac6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007aca:	6023      	str	r3, [r4, #0]
 8007acc:	6123      	str	r3, [r4, #16]
 8007ace:	2301      	movs	r3, #1
 8007ad0:	6163      	str	r3, [r4, #20]
 8007ad2:	b003      	add	sp, #12
 8007ad4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007ad8:	4b22      	ldr	r3, [pc, #136]	; (8007b64 <setvbuf+0x154>)
 8007ada:	429c      	cmp	r4, r3
 8007adc:	d101      	bne.n	8007ae2 <setvbuf+0xd2>
 8007ade:	68b4      	ldr	r4, [r6, #8]
 8007ae0:	e7a8      	b.n	8007a34 <setvbuf+0x24>
 8007ae2:	4b21      	ldr	r3, [pc, #132]	; (8007b68 <setvbuf+0x158>)
 8007ae4:	429c      	cmp	r4, r3
 8007ae6:	bf08      	it	eq
 8007ae8:	68f4      	ldreq	r4, [r6, #12]
 8007aea:	e7a3      	b.n	8007a34 <setvbuf+0x24>
 8007aec:	2f00      	cmp	r7, #0
 8007aee:	d0d8      	beq.n	8007aa2 <setvbuf+0x92>
 8007af0:	69b3      	ldr	r3, [r6, #24]
 8007af2:	b913      	cbnz	r3, 8007afa <setvbuf+0xea>
 8007af4:	4630      	mov	r0, r6
 8007af6:	f001 f82f 	bl	8008b58 <__sinit>
 8007afa:	f1b8 0f01 	cmp.w	r8, #1
 8007afe:	bf08      	it	eq
 8007b00:	89a3      	ldrheq	r3, [r4, #12]
 8007b02:	6027      	str	r7, [r4, #0]
 8007b04:	bf04      	itt	eq
 8007b06:	f043 0301 	orreq.w	r3, r3, #1
 8007b0a:	81a3      	strheq	r3, [r4, #12]
 8007b0c:	89a3      	ldrh	r3, [r4, #12]
 8007b0e:	f013 0008 	ands.w	r0, r3, #8
 8007b12:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8007b16:	d01b      	beq.n	8007b50 <setvbuf+0x140>
 8007b18:	f013 0001 	ands.w	r0, r3, #1
 8007b1c:	bf18      	it	ne
 8007b1e:	426d      	negne	r5, r5
 8007b20:	f04f 0300 	mov.w	r3, #0
 8007b24:	bf1d      	ittte	ne
 8007b26:	60a3      	strne	r3, [r4, #8]
 8007b28:	61a5      	strne	r5, [r4, #24]
 8007b2a:	4618      	movne	r0, r3
 8007b2c:	60a5      	streq	r5, [r4, #8]
 8007b2e:	e7d0      	b.n	8007ad2 <setvbuf+0xc2>
 8007b30:	4648      	mov	r0, r9
 8007b32:	f001 f90d 	bl	8008d50 <malloc>
 8007b36:	4607      	mov	r7, r0
 8007b38:	2800      	cmp	r0, #0
 8007b3a:	d0bc      	beq.n	8007ab6 <setvbuf+0xa6>
 8007b3c:	89a3      	ldrh	r3, [r4, #12]
 8007b3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b42:	81a3      	strh	r3, [r4, #12]
 8007b44:	464d      	mov	r5, r9
 8007b46:	e7d3      	b.n	8007af0 <setvbuf+0xe0>
 8007b48:	2000      	movs	r0, #0
 8007b4a:	e7b6      	b.n	8007aba <setvbuf+0xaa>
 8007b4c:	46a9      	mov	r9, r5
 8007b4e:	e7f5      	b.n	8007b3c <setvbuf+0x12c>
 8007b50:	60a0      	str	r0, [r4, #8]
 8007b52:	e7be      	b.n	8007ad2 <setvbuf+0xc2>
 8007b54:	f04f 30ff 	mov.w	r0, #4294967295
 8007b58:	e7bb      	b.n	8007ad2 <setvbuf+0xc2>
 8007b5a:	bf00      	nop
 8007b5c:	20000014 	.word	0x20000014
 8007b60:	080099a0 	.word	0x080099a0
 8007b64:	080099c0 	.word	0x080099c0
 8007b68:	08009980 	.word	0x08009980

08007b6c <__swbuf_r>:
 8007b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b6e:	460e      	mov	r6, r1
 8007b70:	4614      	mov	r4, r2
 8007b72:	4605      	mov	r5, r0
 8007b74:	b118      	cbz	r0, 8007b7e <__swbuf_r+0x12>
 8007b76:	6983      	ldr	r3, [r0, #24]
 8007b78:	b90b      	cbnz	r3, 8007b7e <__swbuf_r+0x12>
 8007b7a:	f000 ffed 	bl	8008b58 <__sinit>
 8007b7e:	4b21      	ldr	r3, [pc, #132]	; (8007c04 <__swbuf_r+0x98>)
 8007b80:	429c      	cmp	r4, r3
 8007b82:	d12a      	bne.n	8007bda <__swbuf_r+0x6e>
 8007b84:	686c      	ldr	r4, [r5, #4]
 8007b86:	69a3      	ldr	r3, [r4, #24]
 8007b88:	60a3      	str	r3, [r4, #8]
 8007b8a:	89a3      	ldrh	r3, [r4, #12]
 8007b8c:	071a      	lsls	r2, r3, #28
 8007b8e:	d52e      	bpl.n	8007bee <__swbuf_r+0x82>
 8007b90:	6923      	ldr	r3, [r4, #16]
 8007b92:	b363      	cbz	r3, 8007bee <__swbuf_r+0x82>
 8007b94:	6923      	ldr	r3, [r4, #16]
 8007b96:	6820      	ldr	r0, [r4, #0]
 8007b98:	1ac0      	subs	r0, r0, r3
 8007b9a:	6963      	ldr	r3, [r4, #20]
 8007b9c:	b2f6      	uxtb	r6, r6
 8007b9e:	4283      	cmp	r3, r0
 8007ba0:	4637      	mov	r7, r6
 8007ba2:	dc04      	bgt.n	8007bae <__swbuf_r+0x42>
 8007ba4:	4621      	mov	r1, r4
 8007ba6:	4628      	mov	r0, r5
 8007ba8:	f000 ff6c 	bl	8008a84 <_fflush_r>
 8007bac:	bb28      	cbnz	r0, 8007bfa <__swbuf_r+0x8e>
 8007bae:	68a3      	ldr	r3, [r4, #8]
 8007bb0:	3b01      	subs	r3, #1
 8007bb2:	60a3      	str	r3, [r4, #8]
 8007bb4:	6823      	ldr	r3, [r4, #0]
 8007bb6:	1c5a      	adds	r2, r3, #1
 8007bb8:	6022      	str	r2, [r4, #0]
 8007bba:	701e      	strb	r6, [r3, #0]
 8007bbc:	6963      	ldr	r3, [r4, #20]
 8007bbe:	3001      	adds	r0, #1
 8007bc0:	4283      	cmp	r3, r0
 8007bc2:	d004      	beq.n	8007bce <__swbuf_r+0x62>
 8007bc4:	89a3      	ldrh	r3, [r4, #12]
 8007bc6:	07db      	lsls	r3, r3, #31
 8007bc8:	d519      	bpl.n	8007bfe <__swbuf_r+0x92>
 8007bca:	2e0a      	cmp	r6, #10
 8007bcc:	d117      	bne.n	8007bfe <__swbuf_r+0x92>
 8007bce:	4621      	mov	r1, r4
 8007bd0:	4628      	mov	r0, r5
 8007bd2:	f000 ff57 	bl	8008a84 <_fflush_r>
 8007bd6:	b190      	cbz	r0, 8007bfe <__swbuf_r+0x92>
 8007bd8:	e00f      	b.n	8007bfa <__swbuf_r+0x8e>
 8007bda:	4b0b      	ldr	r3, [pc, #44]	; (8007c08 <__swbuf_r+0x9c>)
 8007bdc:	429c      	cmp	r4, r3
 8007bde:	d101      	bne.n	8007be4 <__swbuf_r+0x78>
 8007be0:	68ac      	ldr	r4, [r5, #8]
 8007be2:	e7d0      	b.n	8007b86 <__swbuf_r+0x1a>
 8007be4:	4b09      	ldr	r3, [pc, #36]	; (8007c0c <__swbuf_r+0xa0>)
 8007be6:	429c      	cmp	r4, r3
 8007be8:	bf08      	it	eq
 8007bea:	68ec      	ldreq	r4, [r5, #12]
 8007bec:	e7cb      	b.n	8007b86 <__swbuf_r+0x1a>
 8007bee:	4621      	mov	r1, r4
 8007bf0:	4628      	mov	r0, r5
 8007bf2:	f000 f80d 	bl	8007c10 <__swsetup_r>
 8007bf6:	2800      	cmp	r0, #0
 8007bf8:	d0cc      	beq.n	8007b94 <__swbuf_r+0x28>
 8007bfa:	f04f 37ff 	mov.w	r7, #4294967295
 8007bfe:	4638      	mov	r0, r7
 8007c00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c02:	bf00      	nop
 8007c04:	080099a0 	.word	0x080099a0
 8007c08:	080099c0 	.word	0x080099c0
 8007c0c:	08009980 	.word	0x08009980

08007c10 <__swsetup_r>:
 8007c10:	4b32      	ldr	r3, [pc, #200]	; (8007cdc <__swsetup_r+0xcc>)
 8007c12:	b570      	push	{r4, r5, r6, lr}
 8007c14:	681d      	ldr	r5, [r3, #0]
 8007c16:	4606      	mov	r6, r0
 8007c18:	460c      	mov	r4, r1
 8007c1a:	b125      	cbz	r5, 8007c26 <__swsetup_r+0x16>
 8007c1c:	69ab      	ldr	r3, [r5, #24]
 8007c1e:	b913      	cbnz	r3, 8007c26 <__swsetup_r+0x16>
 8007c20:	4628      	mov	r0, r5
 8007c22:	f000 ff99 	bl	8008b58 <__sinit>
 8007c26:	4b2e      	ldr	r3, [pc, #184]	; (8007ce0 <__swsetup_r+0xd0>)
 8007c28:	429c      	cmp	r4, r3
 8007c2a:	d10f      	bne.n	8007c4c <__swsetup_r+0x3c>
 8007c2c:	686c      	ldr	r4, [r5, #4]
 8007c2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c32:	b29a      	uxth	r2, r3
 8007c34:	0715      	lsls	r5, r2, #28
 8007c36:	d42c      	bmi.n	8007c92 <__swsetup_r+0x82>
 8007c38:	06d0      	lsls	r0, r2, #27
 8007c3a:	d411      	bmi.n	8007c60 <__swsetup_r+0x50>
 8007c3c:	2209      	movs	r2, #9
 8007c3e:	6032      	str	r2, [r6, #0]
 8007c40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c44:	81a3      	strh	r3, [r4, #12]
 8007c46:	f04f 30ff 	mov.w	r0, #4294967295
 8007c4a:	e03e      	b.n	8007cca <__swsetup_r+0xba>
 8007c4c:	4b25      	ldr	r3, [pc, #148]	; (8007ce4 <__swsetup_r+0xd4>)
 8007c4e:	429c      	cmp	r4, r3
 8007c50:	d101      	bne.n	8007c56 <__swsetup_r+0x46>
 8007c52:	68ac      	ldr	r4, [r5, #8]
 8007c54:	e7eb      	b.n	8007c2e <__swsetup_r+0x1e>
 8007c56:	4b24      	ldr	r3, [pc, #144]	; (8007ce8 <__swsetup_r+0xd8>)
 8007c58:	429c      	cmp	r4, r3
 8007c5a:	bf08      	it	eq
 8007c5c:	68ec      	ldreq	r4, [r5, #12]
 8007c5e:	e7e6      	b.n	8007c2e <__swsetup_r+0x1e>
 8007c60:	0751      	lsls	r1, r2, #29
 8007c62:	d512      	bpl.n	8007c8a <__swsetup_r+0x7a>
 8007c64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c66:	b141      	cbz	r1, 8007c7a <__swsetup_r+0x6a>
 8007c68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c6c:	4299      	cmp	r1, r3
 8007c6e:	d002      	beq.n	8007c76 <__swsetup_r+0x66>
 8007c70:	4630      	mov	r0, r6
 8007c72:	f001 fb69 	bl	8009348 <_free_r>
 8007c76:	2300      	movs	r3, #0
 8007c78:	6363      	str	r3, [r4, #52]	; 0x34
 8007c7a:	89a3      	ldrh	r3, [r4, #12]
 8007c7c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007c80:	81a3      	strh	r3, [r4, #12]
 8007c82:	2300      	movs	r3, #0
 8007c84:	6063      	str	r3, [r4, #4]
 8007c86:	6923      	ldr	r3, [r4, #16]
 8007c88:	6023      	str	r3, [r4, #0]
 8007c8a:	89a3      	ldrh	r3, [r4, #12]
 8007c8c:	f043 0308 	orr.w	r3, r3, #8
 8007c90:	81a3      	strh	r3, [r4, #12]
 8007c92:	6923      	ldr	r3, [r4, #16]
 8007c94:	b94b      	cbnz	r3, 8007caa <__swsetup_r+0x9a>
 8007c96:	89a3      	ldrh	r3, [r4, #12]
 8007c98:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007c9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ca0:	d003      	beq.n	8007caa <__swsetup_r+0x9a>
 8007ca2:	4621      	mov	r1, r4
 8007ca4:	4630      	mov	r0, r6
 8007ca6:	f001 f813 	bl	8008cd0 <__smakebuf_r>
 8007caa:	89a2      	ldrh	r2, [r4, #12]
 8007cac:	f012 0301 	ands.w	r3, r2, #1
 8007cb0:	d00c      	beq.n	8007ccc <__swsetup_r+0xbc>
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	60a3      	str	r3, [r4, #8]
 8007cb6:	6963      	ldr	r3, [r4, #20]
 8007cb8:	425b      	negs	r3, r3
 8007cba:	61a3      	str	r3, [r4, #24]
 8007cbc:	6923      	ldr	r3, [r4, #16]
 8007cbe:	b953      	cbnz	r3, 8007cd6 <__swsetup_r+0xc6>
 8007cc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cc4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007cc8:	d1ba      	bne.n	8007c40 <__swsetup_r+0x30>
 8007cca:	bd70      	pop	{r4, r5, r6, pc}
 8007ccc:	0792      	lsls	r2, r2, #30
 8007cce:	bf58      	it	pl
 8007cd0:	6963      	ldrpl	r3, [r4, #20]
 8007cd2:	60a3      	str	r3, [r4, #8]
 8007cd4:	e7f2      	b.n	8007cbc <__swsetup_r+0xac>
 8007cd6:	2000      	movs	r0, #0
 8007cd8:	e7f7      	b.n	8007cca <__swsetup_r+0xba>
 8007cda:	bf00      	nop
 8007cdc:	20000014 	.word	0x20000014
 8007ce0:	080099a0 	.word	0x080099a0
 8007ce4:	080099c0 	.word	0x080099c0
 8007ce8:	08009980 	.word	0x08009980

08007cec <quorem>:
 8007cec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cf0:	6903      	ldr	r3, [r0, #16]
 8007cf2:	690c      	ldr	r4, [r1, #16]
 8007cf4:	42a3      	cmp	r3, r4
 8007cf6:	4680      	mov	r8, r0
 8007cf8:	f2c0 8082 	blt.w	8007e00 <quorem+0x114>
 8007cfc:	3c01      	subs	r4, #1
 8007cfe:	f101 0714 	add.w	r7, r1, #20
 8007d02:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8007d06:	f100 0614 	add.w	r6, r0, #20
 8007d0a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8007d0e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8007d12:	eb06 030c 	add.w	r3, r6, ip
 8007d16:	3501      	adds	r5, #1
 8007d18:	eb07 090c 	add.w	r9, r7, ip
 8007d1c:	9301      	str	r3, [sp, #4]
 8007d1e:	fbb0 f5f5 	udiv	r5, r0, r5
 8007d22:	b395      	cbz	r5, 8007d8a <quorem+0x9e>
 8007d24:	f04f 0a00 	mov.w	sl, #0
 8007d28:	4638      	mov	r0, r7
 8007d2a:	46b6      	mov	lr, r6
 8007d2c:	46d3      	mov	fp, sl
 8007d2e:	f850 2b04 	ldr.w	r2, [r0], #4
 8007d32:	b293      	uxth	r3, r2
 8007d34:	fb05 a303 	mla	r3, r5, r3, sl
 8007d38:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007d3c:	b29b      	uxth	r3, r3
 8007d3e:	ebab 0303 	sub.w	r3, fp, r3
 8007d42:	0c12      	lsrs	r2, r2, #16
 8007d44:	f8de b000 	ldr.w	fp, [lr]
 8007d48:	fb05 a202 	mla	r2, r5, r2, sl
 8007d4c:	fa13 f38b 	uxtah	r3, r3, fp
 8007d50:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007d54:	fa1f fb82 	uxth.w	fp, r2
 8007d58:	f8de 2000 	ldr.w	r2, [lr]
 8007d5c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007d60:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007d64:	b29b      	uxth	r3, r3
 8007d66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d6a:	4581      	cmp	r9, r0
 8007d6c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007d70:	f84e 3b04 	str.w	r3, [lr], #4
 8007d74:	d2db      	bcs.n	8007d2e <quorem+0x42>
 8007d76:	f856 300c 	ldr.w	r3, [r6, ip]
 8007d7a:	b933      	cbnz	r3, 8007d8a <quorem+0x9e>
 8007d7c:	9b01      	ldr	r3, [sp, #4]
 8007d7e:	3b04      	subs	r3, #4
 8007d80:	429e      	cmp	r6, r3
 8007d82:	461a      	mov	r2, r3
 8007d84:	d330      	bcc.n	8007de8 <quorem+0xfc>
 8007d86:	f8c8 4010 	str.w	r4, [r8, #16]
 8007d8a:	4640      	mov	r0, r8
 8007d8c:	f001 fa08 	bl	80091a0 <__mcmp>
 8007d90:	2800      	cmp	r0, #0
 8007d92:	db25      	blt.n	8007de0 <quorem+0xf4>
 8007d94:	3501      	adds	r5, #1
 8007d96:	4630      	mov	r0, r6
 8007d98:	f04f 0c00 	mov.w	ip, #0
 8007d9c:	f857 2b04 	ldr.w	r2, [r7], #4
 8007da0:	f8d0 e000 	ldr.w	lr, [r0]
 8007da4:	b293      	uxth	r3, r2
 8007da6:	ebac 0303 	sub.w	r3, ip, r3
 8007daa:	0c12      	lsrs	r2, r2, #16
 8007dac:	fa13 f38e 	uxtah	r3, r3, lr
 8007db0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007db4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007db8:	b29b      	uxth	r3, r3
 8007dba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007dbe:	45b9      	cmp	r9, r7
 8007dc0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007dc4:	f840 3b04 	str.w	r3, [r0], #4
 8007dc8:	d2e8      	bcs.n	8007d9c <quorem+0xb0>
 8007dca:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007dce:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007dd2:	b92a      	cbnz	r2, 8007de0 <quorem+0xf4>
 8007dd4:	3b04      	subs	r3, #4
 8007dd6:	429e      	cmp	r6, r3
 8007dd8:	461a      	mov	r2, r3
 8007dda:	d30b      	bcc.n	8007df4 <quorem+0x108>
 8007ddc:	f8c8 4010 	str.w	r4, [r8, #16]
 8007de0:	4628      	mov	r0, r5
 8007de2:	b003      	add	sp, #12
 8007de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007de8:	6812      	ldr	r2, [r2, #0]
 8007dea:	3b04      	subs	r3, #4
 8007dec:	2a00      	cmp	r2, #0
 8007dee:	d1ca      	bne.n	8007d86 <quorem+0x9a>
 8007df0:	3c01      	subs	r4, #1
 8007df2:	e7c5      	b.n	8007d80 <quorem+0x94>
 8007df4:	6812      	ldr	r2, [r2, #0]
 8007df6:	3b04      	subs	r3, #4
 8007df8:	2a00      	cmp	r2, #0
 8007dfa:	d1ef      	bne.n	8007ddc <quorem+0xf0>
 8007dfc:	3c01      	subs	r4, #1
 8007dfe:	e7ea      	b.n	8007dd6 <quorem+0xea>
 8007e00:	2000      	movs	r0, #0
 8007e02:	e7ee      	b.n	8007de2 <quorem+0xf6>
 8007e04:	0000      	movs	r0, r0
	...

08007e08 <_dtoa_r>:
 8007e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e0c:	ec57 6b10 	vmov	r6, r7, d0
 8007e10:	b097      	sub	sp, #92	; 0x5c
 8007e12:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007e14:	9106      	str	r1, [sp, #24]
 8007e16:	4604      	mov	r4, r0
 8007e18:	920b      	str	r2, [sp, #44]	; 0x2c
 8007e1a:	9312      	str	r3, [sp, #72]	; 0x48
 8007e1c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007e20:	e9cd 6700 	strd	r6, r7, [sp]
 8007e24:	b93d      	cbnz	r5, 8007e36 <_dtoa_r+0x2e>
 8007e26:	2010      	movs	r0, #16
 8007e28:	f000 ff92 	bl	8008d50 <malloc>
 8007e2c:	6260      	str	r0, [r4, #36]	; 0x24
 8007e2e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007e32:	6005      	str	r5, [r0, #0]
 8007e34:	60c5      	str	r5, [r0, #12]
 8007e36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e38:	6819      	ldr	r1, [r3, #0]
 8007e3a:	b151      	cbz	r1, 8007e52 <_dtoa_r+0x4a>
 8007e3c:	685a      	ldr	r2, [r3, #4]
 8007e3e:	604a      	str	r2, [r1, #4]
 8007e40:	2301      	movs	r3, #1
 8007e42:	4093      	lsls	r3, r2
 8007e44:	608b      	str	r3, [r1, #8]
 8007e46:	4620      	mov	r0, r4
 8007e48:	f000 ffc9 	bl	8008dde <_Bfree>
 8007e4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e4e:	2200      	movs	r2, #0
 8007e50:	601a      	str	r2, [r3, #0]
 8007e52:	1e3b      	subs	r3, r7, #0
 8007e54:	bfbb      	ittet	lt
 8007e56:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007e5a:	9301      	strlt	r3, [sp, #4]
 8007e5c:	2300      	movge	r3, #0
 8007e5e:	2201      	movlt	r2, #1
 8007e60:	bfac      	ite	ge
 8007e62:	f8c8 3000 	strge.w	r3, [r8]
 8007e66:	f8c8 2000 	strlt.w	r2, [r8]
 8007e6a:	4baf      	ldr	r3, [pc, #700]	; (8008128 <_dtoa_r+0x320>)
 8007e6c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007e70:	ea33 0308 	bics.w	r3, r3, r8
 8007e74:	d114      	bne.n	8007ea0 <_dtoa_r+0x98>
 8007e76:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007e78:	f242 730f 	movw	r3, #9999	; 0x270f
 8007e7c:	6013      	str	r3, [r2, #0]
 8007e7e:	9b00      	ldr	r3, [sp, #0]
 8007e80:	b923      	cbnz	r3, 8007e8c <_dtoa_r+0x84>
 8007e82:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007e86:	2800      	cmp	r0, #0
 8007e88:	f000 8542 	beq.w	8008910 <_dtoa_r+0xb08>
 8007e8c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e8e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800813c <_dtoa_r+0x334>
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	f000 8544 	beq.w	8008920 <_dtoa_r+0xb18>
 8007e98:	f10b 0303 	add.w	r3, fp, #3
 8007e9c:	f000 bd3e 	b.w	800891c <_dtoa_r+0xb14>
 8007ea0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	4630      	mov	r0, r6
 8007eaa:	4639      	mov	r1, r7
 8007eac:	f7f8 fe0c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007eb0:	4681      	mov	r9, r0
 8007eb2:	b168      	cbz	r0, 8007ed0 <_dtoa_r+0xc8>
 8007eb4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	6013      	str	r3, [r2, #0]
 8007eba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	f000 8524 	beq.w	800890a <_dtoa_r+0xb02>
 8007ec2:	4b9a      	ldr	r3, [pc, #616]	; (800812c <_dtoa_r+0x324>)
 8007ec4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007ec6:	f103 3bff 	add.w	fp, r3, #4294967295
 8007eca:	6013      	str	r3, [r2, #0]
 8007ecc:	f000 bd28 	b.w	8008920 <_dtoa_r+0xb18>
 8007ed0:	aa14      	add	r2, sp, #80	; 0x50
 8007ed2:	a915      	add	r1, sp, #84	; 0x54
 8007ed4:	ec47 6b10 	vmov	d0, r6, r7
 8007ed8:	4620      	mov	r0, r4
 8007eda:	f001 f9d8 	bl	800928e <__d2b>
 8007ede:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007ee2:	9004      	str	r0, [sp, #16]
 8007ee4:	2d00      	cmp	r5, #0
 8007ee6:	d07c      	beq.n	8007fe2 <_dtoa_r+0x1da>
 8007ee8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007eec:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8007ef0:	46b2      	mov	sl, r6
 8007ef2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8007ef6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007efa:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8007efe:	2200      	movs	r2, #0
 8007f00:	4b8b      	ldr	r3, [pc, #556]	; (8008130 <_dtoa_r+0x328>)
 8007f02:	4650      	mov	r0, sl
 8007f04:	4659      	mov	r1, fp
 8007f06:	f7f8 f9bf 	bl	8000288 <__aeabi_dsub>
 8007f0a:	a381      	add	r3, pc, #516	; (adr r3, 8008110 <_dtoa_r+0x308>)
 8007f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f10:	f7f8 fb72 	bl	80005f8 <__aeabi_dmul>
 8007f14:	a380      	add	r3, pc, #512	; (adr r3, 8008118 <_dtoa_r+0x310>)
 8007f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f1a:	f7f8 f9b7 	bl	800028c <__adddf3>
 8007f1e:	4606      	mov	r6, r0
 8007f20:	4628      	mov	r0, r5
 8007f22:	460f      	mov	r7, r1
 8007f24:	f7f8 fafe 	bl	8000524 <__aeabi_i2d>
 8007f28:	a37d      	add	r3, pc, #500	; (adr r3, 8008120 <_dtoa_r+0x318>)
 8007f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f2e:	f7f8 fb63 	bl	80005f8 <__aeabi_dmul>
 8007f32:	4602      	mov	r2, r0
 8007f34:	460b      	mov	r3, r1
 8007f36:	4630      	mov	r0, r6
 8007f38:	4639      	mov	r1, r7
 8007f3a:	f7f8 f9a7 	bl	800028c <__adddf3>
 8007f3e:	4606      	mov	r6, r0
 8007f40:	460f      	mov	r7, r1
 8007f42:	f7f8 fe09 	bl	8000b58 <__aeabi_d2iz>
 8007f46:	2200      	movs	r2, #0
 8007f48:	4682      	mov	sl, r0
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	4630      	mov	r0, r6
 8007f4e:	4639      	mov	r1, r7
 8007f50:	f7f8 fdc4 	bl	8000adc <__aeabi_dcmplt>
 8007f54:	b148      	cbz	r0, 8007f6a <_dtoa_r+0x162>
 8007f56:	4650      	mov	r0, sl
 8007f58:	f7f8 fae4 	bl	8000524 <__aeabi_i2d>
 8007f5c:	4632      	mov	r2, r6
 8007f5e:	463b      	mov	r3, r7
 8007f60:	f7f8 fdb2 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f64:	b908      	cbnz	r0, 8007f6a <_dtoa_r+0x162>
 8007f66:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007f6a:	f1ba 0f16 	cmp.w	sl, #22
 8007f6e:	d859      	bhi.n	8008024 <_dtoa_r+0x21c>
 8007f70:	4970      	ldr	r1, [pc, #448]	; (8008134 <_dtoa_r+0x32c>)
 8007f72:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007f76:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f7e:	f7f8 fdcb 	bl	8000b18 <__aeabi_dcmpgt>
 8007f82:	2800      	cmp	r0, #0
 8007f84:	d050      	beq.n	8008028 <_dtoa_r+0x220>
 8007f86:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	930f      	str	r3, [sp, #60]	; 0x3c
 8007f8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007f90:	1b5d      	subs	r5, r3, r5
 8007f92:	f1b5 0801 	subs.w	r8, r5, #1
 8007f96:	bf49      	itett	mi
 8007f98:	f1c5 0301 	rsbmi	r3, r5, #1
 8007f9c:	2300      	movpl	r3, #0
 8007f9e:	9305      	strmi	r3, [sp, #20]
 8007fa0:	f04f 0800 	movmi.w	r8, #0
 8007fa4:	bf58      	it	pl
 8007fa6:	9305      	strpl	r3, [sp, #20]
 8007fa8:	f1ba 0f00 	cmp.w	sl, #0
 8007fac:	db3e      	blt.n	800802c <_dtoa_r+0x224>
 8007fae:	2300      	movs	r3, #0
 8007fb0:	44d0      	add	r8, sl
 8007fb2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007fb6:	9307      	str	r3, [sp, #28]
 8007fb8:	9b06      	ldr	r3, [sp, #24]
 8007fba:	2b09      	cmp	r3, #9
 8007fbc:	f200 8090 	bhi.w	80080e0 <_dtoa_r+0x2d8>
 8007fc0:	2b05      	cmp	r3, #5
 8007fc2:	bfc4      	itt	gt
 8007fc4:	3b04      	subgt	r3, #4
 8007fc6:	9306      	strgt	r3, [sp, #24]
 8007fc8:	9b06      	ldr	r3, [sp, #24]
 8007fca:	f1a3 0302 	sub.w	r3, r3, #2
 8007fce:	bfcc      	ite	gt
 8007fd0:	2500      	movgt	r5, #0
 8007fd2:	2501      	movle	r5, #1
 8007fd4:	2b03      	cmp	r3, #3
 8007fd6:	f200 808f 	bhi.w	80080f8 <_dtoa_r+0x2f0>
 8007fda:	e8df f003 	tbb	[pc, r3]
 8007fde:	7f7d      	.short	0x7f7d
 8007fe0:	7131      	.short	0x7131
 8007fe2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8007fe6:	441d      	add	r5, r3
 8007fe8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8007fec:	2820      	cmp	r0, #32
 8007fee:	dd13      	ble.n	8008018 <_dtoa_r+0x210>
 8007ff0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8007ff4:	9b00      	ldr	r3, [sp, #0]
 8007ff6:	fa08 f800 	lsl.w	r8, r8, r0
 8007ffa:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8007ffe:	fa23 f000 	lsr.w	r0, r3, r0
 8008002:	ea48 0000 	orr.w	r0, r8, r0
 8008006:	f7f8 fa7d 	bl	8000504 <__aeabi_ui2d>
 800800a:	2301      	movs	r3, #1
 800800c:	4682      	mov	sl, r0
 800800e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8008012:	3d01      	subs	r5, #1
 8008014:	9313      	str	r3, [sp, #76]	; 0x4c
 8008016:	e772      	b.n	8007efe <_dtoa_r+0xf6>
 8008018:	9b00      	ldr	r3, [sp, #0]
 800801a:	f1c0 0020 	rsb	r0, r0, #32
 800801e:	fa03 f000 	lsl.w	r0, r3, r0
 8008022:	e7f0      	b.n	8008006 <_dtoa_r+0x1fe>
 8008024:	2301      	movs	r3, #1
 8008026:	e7b1      	b.n	8007f8c <_dtoa_r+0x184>
 8008028:	900f      	str	r0, [sp, #60]	; 0x3c
 800802a:	e7b0      	b.n	8007f8e <_dtoa_r+0x186>
 800802c:	9b05      	ldr	r3, [sp, #20]
 800802e:	eba3 030a 	sub.w	r3, r3, sl
 8008032:	9305      	str	r3, [sp, #20]
 8008034:	f1ca 0300 	rsb	r3, sl, #0
 8008038:	9307      	str	r3, [sp, #28]
 800803a:	2300      	movs	r3, #0
 800803c:	930e      	str	r3, [sp, #56]	; 0x38
 800803e:	e7bb      	b.n	8007fb8 <_dtoa_r+0x1b0>
 8008040:	2301      	movs	r3, #1
 8008042:	930a      	str	r3, [sp, #40]	; 0x28
 8008044:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008046:	2b00      	cmp	r3, #0
 8008048:	dd59      	ble.n	80080fe <_dtoa_r+0x2f6>
 800804a:	9302      	str	r3, [sp, #8]
 800804c:	4699      	mov	r9, r3
 800804e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008050:	2200      	movs	r2, #0
 8008052:	6072      	str	r2, [r6, #4]
 8008054:	2204      	movs	r2, #4
 8008056:	f102 0014 	add.w	r0, r2, #20
 800805a:	4298      	cmp	r0, r3
 800805c:	6871      	ldr	r1, [r6, #4]
 800805e:	d953      	bls.n	8008108 <_dtoa_r+0x300>
 8008060:	4620      	mov	r0, r4
 8008062:	f000 fe88 	bl	8008d76 <_Balloc>
 8008066:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008068:	6030      	str	r0, [r6, #0]
 800806a:	f1b9 0f0e 	cmp.w	r9, #14
 800806e:	f8d3 b000 	ldr.w	fp, [r3]
 8008072:	f200 80e6 	bhi.w	8008242 <_dtoa_r+0x43a>
 8008076:	2d00      	cmp	r5, #0
 8008078:	f000 80e3 	beq.w	8008242 <_dtoa_r+0x43a>
 800807c:	ed9d 7b00 	vldr	d7, [sp]
 8008080:	f1ba 0f00 	cmp.w	sl, #0
 8008084:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8008088:	dd74      	ble.n	8008174 <_dtoa_r+0x36c>
 800808a:	4a2a      	ldr	r2, [pc, #168]	; (8008134 <_dtoa_r+0x32c>)
 800808c:	f00a 030f 	and.w	r3, sl, #15
 8008090:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008094:	ed93 7b00 	vldr	d7, [r3]
 8008098:	ea4f 162a 	mov.w	r6, sl, asr #4
 800809c:	06f0      	lsls	r0, r6, #27
 800809e:	ed8d 7b08 	vstr	d7, [sp, #32]
 80080a2:	d565      	bpl.n	8008170 <_dtoa_r+0x368>
 80080a4:	4b24      	ldr	r3, [pc, #144]	; (8008138 <_dtoa_r+0x330>)
 80080a6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80080aa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80080ae:	f7f8 fbcd 	bl	800084c <__aeabi_ddiv>
 80080b2:	e9cd 0100 	strd	r0, r1, [sp]
 80080b6:	f006 060f 	and.w	r6, r6, #15
 80080ba:	2503      	movs	r5, #3
 80080bc:	4f1e      	ldr	r7, [pc, #120]	; (8008138 <_dtoa_r+0x330>)
 80080be:	e04c      	b.n	800815a <_dtoa_r+0x352>
 80080c0:	2301      	movs	r3, #1
 80080c2:	930a      	str	r3, [sp, #40]	; 0x28
 80080c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080c6:	4453      	add	r3, sl
 80080c8:	f103 0901 	add.w	r9, r3, #1
 80080cc:	9302      	str	r3, [sp, #8]
 80080ce:	464b      	mov	r3, r9
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	bfb8      	it	lt
 80080d4:	2301      	movlt	r3, #1
 80080d6:	e7ba      	b.n	800804e <_dtoa_r+0x246>
 80080d8:	2300      	movs	r3, #0
 80080da:	e7b2      	b.n	8008042 <_dtoa_r+0x23a>
 80080dc:	2300      	movs	r3, #0
 80080de:	e7f0      	b.n	80080c2 <_dtoa_r+0x2ba>
 80080e0:	2501      	movs	r5, #1
 80080e2:	2300      	movs	r3, #0
 80080e4:	9306      	str	r3, [sp, #24]
 80080e6:	950a      	str	r5, [sp, #40]	; 0x28
 80080e8:	f04f 33ff 	mov.w	r3, #4294967295
 80080ec:	9302      	str	r3, [sp, #8]
 80080ee:	4699      	mov	r9, r3
 80080f0:	2200      	movs	r2, #0
 80080f2:	2312      	movs	r3, #18
 80080f4:	920b      	str	r2, [sp, #44]	; 0x2c
 80080f6:	e7aa      	b.n	800804e <_dtoa_r+0x246>
 80080f8:	2301      	movs	r3, #1
 80080fa:	930a      	str	r3, [sp, #40]	; 0x28
 80080fc:	e7f4      	b.n	80080e8 <_dtoa_r+0x2e0>
 80080fe:	2301      	movs	r3, #1
 8008100:	9302      	str	r3, [sp, #8]
 8008102:	4699      	mov	r9, r3
 8008104:	461a      	mov	r2, r3
 8008106:	e7f5      	b.n	80080f4 <_dtoa_r+0x2ec>
 8008108:	3101      	adds	r1, #1
 800810a:	6071      	str	r1, [r6, #4]
 800810c:	0052      	lsls	r2, r2, #1
 800810e:	e7a2      	b.n	8008056 <_dtoa_r+0x24e>
 8008110:	636f4361 	.word	0x636f4361
 8008114:	3fd287a7 	.word	0x3fd287a7
 8008118:	8b60c8b3 	.word	0x8b60c8b3
 800811c:	3fc68a28 	.word	0x3fc68a28
 8008120:	509f79fb 	.word	0x509f79fb
 8008124:	3fd34413 	.word	0x3fd34413
 8008128:	7ff00000 	.word	0x7ff00000
 800812c:	0800994d 	.word	0x0800994d
 8008130:	3ff80000 	.word	0x3ff80000
 8008134:	08009a08 	.word	0x08009a08
 8008138:	080099e0 	.word	0x080099e0
 800813c:	08009979 	.word	0x08009979
 8008140:	07f1      	lsls	r1, r6, #31
 8008142:	d508      	bpl.n	8008156 <_dtoa_r+0x34e>
 8008144:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008148:	e9d7 2300 	ldrd	r2, r3, [r7]
 800814c:	f7f8 fa54 	bl	80005f8 <__aeabi_dmul>
 8008150:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008154:	3501      	adds	r5, #1
 8008156:	1076      	asrs	r6, r6, #1
 8008158:	3708      	adds	r7, #8
 800815a:	2e00      	cmp	r6, #0
 800815c:	d1f0      	bne.n	8008140 <_dtoa_r+0x338>
 800815e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008162:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008166:	f7f8 fb71 	bl	800084c <__aeabi_ddiv>
 800816a:	e9cd 0100 	strd	r0, r1, [sp]
 800816e:	e01a      	b.n	80081a6 <_dtoa_r+0x39e>
 8008170:	2502      	movs	r5, #2
 8008172:	e7a3      	b.n	80080bc <_dtoa_r+0x2b4>
 8008174:	f000 80a0 	beq.w	80082b8 <_dtoa_r+0x4b0>
 8008178:	f1ca 0600 	rsb	r6, sl, #0
 800817c:	4b9f      	ldr	r3, [pc, #636]	; (80083fc <_dtoa_r+0x5f4>)
 800817e:	4fa0      	ldr	r7, [pc, #640]	; (8008400 <_dtoa_r+0x5f8>)
 8008180:	f006 020f 	and.w	r2, r6, #15
 8008184:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800818c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008190:	f7f8 fa32 	bl	80005f8 <__aeabi_dmul>
 8008194:	e9cd 0100 	strd	r0, r1, [sp]
 8008198:	1136      	asrs	r6, r6, #4
 800819a:	2300      	movs	r3, #0
 800819c:	2502      	movs	r5, #2
 800819e:	2e00      	cmp	r6, #0
 80081a0:	d17f      	bne.n	80082a2 <_dtoa_r+0x49a>
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d1e1      	bne.n	800816a <_dtoa_r+0x362>
 80081a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	f000 8087 	beq.w	80082bc <_dtoa_r+0x4b4>
 80081ae:	e9dd 6700 	ldrd	r6, r7, [sp]
 80081b2:	2200      	movs	r2, #0
 80081b4:	4b93      	ldr	r3, [pc, #588]	; (8008404 <_dtoa_r+0x5fc>)
 80081b6:	4630      	mov	r0, r6
 80081b8:	4639      	mov	r1, r7
 80081ba:	f7f8 fc8f 	bl	8000adc <__aeabi_dcmplt>
 80081be:	2800      	cmp	r0, #0
 80081c0:	d07c      	beq.n	80082bc <_dtoa_r+0x4b4>
 80081c2:	f1b9 0f00 	cmp.w	r9, #0
 80081c6:	d079      	beq.n	80082bc <_dtoa_r+0x4b4>
 80081c8:	9b02      	ldr	r3, [sp, #8]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	dd35      	ble.n	800823a <_dtoa_r+0x432>
 80081ce:	f10a 33ff 	add.w	r3, sl, #4294967295
 80081d2:	9308      	str	r3, [sp, #32]
 80081d4:	4639      	mov	r1, r7
 80081d6:	2200      	movs	r2, #0
 80081d8:	4b8b      	ldr	r3, [pc, #556]	; (8008408 <_dtoa_r+0x600>)
 80081da:	4630      	mov	r0, r6
 80081dc:	f7f8 fa0c 	bl	80005f8 <__aeabi_dmul>
 80081e0:	e9cd 0100 	strd	r0, r1, [sp]
 80081e4:	9f02      	ldr	r7, [sp, #8]
 80081e6:	3501      	adds	r5, #1
 80081e8:	4628      	mov	r0, r5
 80081ea:	f7f8 f99b 	bl	8000524 <__aeabi_i2d>
 80081ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80081f2:	f7f8 fa01 	bl	80005f8 <__aeabi_dmul>
 80081f6:	2200      	movs	r2, #0
 80081f8:	4b84      	ldr	r3, [pc, #528]	; (800840c <_dtoa_r+0x604>)
 80081fa:	f7f8 f847 	bl	800028c <__adddf3>
 80081fe:	4605      	mov	r5, r0
 8008200:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008204:	2f00      	cmp	r7, #0
 8008206:	d15d      	bne.n	80082c4 <_dtoa_r+0x4bc>
 8008208:	2200      	movs	r2, #0
 800820a:	4b81      	ldr	r3, [pc, #516]	; (8008410 <_dtoa_r+0x608>)
 800820c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008210:	f7f8 f83a 	bl	8000288 <__aeabi_dsub>
 8008214:	462a      	mov	r2, r5
 8008216:	4633      	mov	r3, r6
 8008218:	e9cd 0100 	strd	r0, r1, [sp]
 800821c:	f7f8 fc7c 	bl	8000b18 <__aeabi_dcmpgt>
 8008220:	2800      	cmp	r0, #0
 8008222:	f040 8288 	bne.w	8008736 <_dtoa_r+0x92e>
 8008226:	462a      	mov	r2, r5
 8008228:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800822c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008230:	f7f8 fc54 	bl	8000adc <__aeabi_dcmplt>
 8008234:	2800      	cmp	r0, #0
 8008236:	f040 827c 	bne.w	8008732 <_dtoa_r+0x92a>
 800823a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800823e:	e9cd 2300 	strd	r2, r3, [sp]
 8008242:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008244:	2b00      	cmp	r3, #0
 8008246:	f2c0 8150 	blt.w	80084ea <_dtoa_r+0x6e2>
 800824a:	f1ba 0f0e 	cmp.w	sl, #14
 800824e:	f300 814c 	bgt.w	80084ea <_dtoa_r+0x6e2>
 8008252:	4b6a      	ldr	r3, [pc, #424]	; (80083fc <_dtoa_r+0x5f4>)
 8008254:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008258:	ed93 7b00 	vldr	d7, [r3]
 800825c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800825e:	2b00      	cmp	r3, #0
 8008260:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008264:	f280 80d8 	bge.w	8008418 <_dtoa_r+0x610>
 8008268:	f1b9 0f00 	cmp.w	r9, #0
 800826c:	f300 80d4 	bgt.w	8008418 <_dtoa_r+0x610>
 8008270:	f040 825e 	bne.w	8008730 <_dtoa_r+0x928>
 8008274:	2200      	movs	r2, #0
 8008276:	4b66      	ldr	r3, [pc, #408]	; (8008410 <_dtoa_r+0x608>)
 8008278:	ec51 0b17 	vmov	r0, r1, d7
 800827c:	f7f8 f9bc 	bl	80005f8 <__aeabi_dmul>
 8008280:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008284:	f7f8 fc3e 	bl	8000b04 <__aeabi_dcmpge>
 8008288:	464f      	mov	r7, r9
 800828a:	464e      	mov	r6, r9
 800828c:	2800      	cmp	r0, #0
 800828e:	f040 8234 	bne.w	80086fa <_dtoa_r+0x8f2>
 8008292:	2331      	movs	r3, #49	; 0x31
 8008294:	f10b 0501 	add.w	r5, fp, #1
 8008298:	f88b 3000 	strb.w	r3, [fp]
 800829c:	f10a 0a01 	add.w	sl, sl, #1
 80082a0:	e22f      	b.n	8008702 <_dtoa_r+0x8fa>
 80082a2:	07f2      	lsls	r2, r6, #31
 80082a4:	d505      	bpl.n	80082b2 <_dtoa_r+0x4aa>
 80082a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082aa:	f7f8 f9a5 	bl	80005f8 <__aeabi_dmul>
 80082ae:	3501      	adds	r5, #1
 80082b0:	2301      	movs	r3, #1
 80082b2:	1076      	asrs	r6, r6, #1
 80082b4:	3708      	adds	r7, #8
 80082b6:	e772      	b.n	800819e <_dtoa_r+0x396>
 80082b8:	2502      	movs	r5, #2
 80082ba:	e774      	b.n	80081a6 <_dtoa_r+0x39e>
 80082bc:	f8cd a020 	str.w	sl, [sp, #32]
 80082c0:	464f      	mov	r7, r9
 80082c2:	e791      	b.n	80081e8 <_dtoa_r+0x3e0>
 80082c4:	4b4d      	ldr	r3, [pc, #308]	; (80083fc <_dtoa_r+0x5f4>)
 80082c6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80082ca:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80082ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d047      	beq.n	8008364 <_dtoa_r+0x55c>
 80082d4:	4602      	mov	r2, r0
 80082d6:	460b      	mov	r3, r1
 80082d8:	2000      	movs	r0, #0
 80082da:	494e      	ldr	r1, [pc, #312]	; (8008414 <_dtoa_r+0x60c>)
 80082dc:	f7f8 fab6 	bl	800084c <__aeabi_ddiv>
 80082e0:	462a      	mov	r2, r5
 80082e2:	4633      	mov	r3, r6
 80082e4:	f7f7 ffd0 	bl	8000288 <__aeabi_dsub>
 80082e8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80082ec:	465d      	mov	r5, fp
 80082ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 80082f2:	f7f8 fc31 	bl	8000b58 <__aeabi_d2iz>
 80082f6:	4606      	mov	r6, r0
 80082f8:	f7f8 f914 	bl	8000524 <__aeabi_i2d>
 80082fc:	4602      	mov	r2, r0
 80082fe:	460b      	mov	r3, r1
 8008300:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008304:	f7f7 ffc0 	bl	8000288 <__aeabi_dsub>
 8008308:	3630      	adds	r6, #48	; 0x30
 800830a:	f805 6b01 	strb.w	r6, [r5], #1
 800830e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008312:	e9cd 0100 	strd	r0, r1, [sp]
 8008316:	f7f8 fbe1 	bl	8000adc <__aeabi_dcmplt>
 800831a:	2800      	cmp	r0, #0
 800831c:	d163      	bne.n	80083e6 <_dtoa_r+0x5de>
 800831e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008322:	2000      	movs	r0, #0
 8008324:	4937      	ldr	r1, [pc, #220]	; (8008404 <_dtoa_r+0x5fc>)
 8008326:	f7f7 ffaf 	bl	8000288 <__aeabi_dsub>
 800832a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800832e:	f7f8 fbd5 	bl	8000adc <__aeabi_dcmplt>
 8008332:	2800      	cmp	r0, #0
 8008334:	f040 80b7 	bne.w	80084a6 <_dtoa_r+0x69e>
 8008338:	eba5 030b 	sub.w	r3, r5, fp
 800833c:	429f      	cmp	r7, r3
 800833e:	f77f af7c 	ble.w	800823a <_dtoa_r+0x432>
 8008342:	2200      	movs	r2, #0
 8008344:	4b30      	ldr	r3, [pc, #192]	; (8008408 <_dtoa_r+0x600>)
 8008346:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800834a:	f7f8 f955 	bl	80005f8 <__aeabi_dmul>
 800834e:	2200      	movs	r2, #0
 8008350:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008354:	4b2c      	ldr	r3, [pc, #176]	; (8008408 <_dtoa_r+0x600>)
 8008356:	e9dd 0100 	ldrd	r0, r1, [sp]
 800835a:	f7f8 f94d 	bl	80005f8 <__aeabi_dmul>
 800835e:	e9cd 0100 	strd	r0, r1, [sp]
 8008362:	e7c4      	b.n	80082ee <_dtoa_r+0x4e6>
 8008364:	462a      	mov	r2, r5
 8008366:	4633      	mov	r3, r6
 8008368:	f7f8 f946 	bl	80005f8 <__aeabi_dmul>
 800836c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008370:	eb0b 0507 	add.w	r5, fp, r7
 8008374:	465e      	mov	r6, fp
 8008376:	e9dd 0100 	ldrd	r0, r1, [sp]
 800837a:	f7f8 fbed 	bl	8000b58 <__aeabi_d2iz>
 800837e:	4607      	mov	r7, r0
 8008380:	f7f8 f8d0 	bl	8000524 <__aeabi_i2d>
 8008384:	3730      	adds	r7, #48	; 0x30
 8008386:	4602      	mov	r2, r0
 8008388:	460b      	mov	r3, r1
 800838a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800838e:	f7f7 ff7b 	bl	8000288 <__aeabi_dsub>
 8008392:	f806 7b01 	strb.w	r7, [r6], #1
 8008396:	42ae      	cmp	r6, r5
 8008398:	e9cd 0100 	strd	r0, r1, [sp]
 800839c:	f04f 0200 	mov.w	r2, #0
 80083a0:	d126      	bne.n	80083f0 <_dtoa_r+0x5e8>
 80083a2:	4b1c      	ldr	r3, [pc, #112]	; (8008414 <_dtoa_r+0x60c>)
 80083a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80083a8:	f7f7 ff70 	bl	800028c <__adddf3>
 80083ac:	4602      	mov	r2, r0
 80083ae:	460b      	mov	r3, r1
 80083b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80083b4:	f7f8 fbb0 	bl	8000b18 <__aeabi_dcmpgt>
 80083b8:	2800      	cmp	r0, #0
 80083ba:	d174      	bne.n	80084a6 <_dtoa_r+0x69e>
 80083bc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80083c0:	2000      	movs	r0, #0
 80083c2:	4914      	ldr	r1, [pc, #80]	; (8008414 <_dtoa_r+0x60c>)
 80083c4:	f7f7 ff60 	bl	8000288 <__aeabi_dsub>
 80083c8:	4602      	mov	r2, r0
 80083ca:	460b      	mov	r3, r1
 80083cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80083d0:	f7f8 fb84 	bl	8000adc <__aeabi_dcmplt>
 80083d4:	2800      	cmp	r0, #0
 80083d6:	f43f af30 	beq.w	800823a <_dtoa_r+0x432>
 80083da:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80083de:	2b30      	cmp	r3, #48	; 0x30
 80083e0:	f105 32ff 	add.w	r2, r5, #4294967295
 80083e4:	d002      	beq.n	80083ec <_dtoa_r+0x5e4>
 80083e6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80083ea:	e04a      	b.n	8008482 <_dtoa_r+0x67a>
 80083ec:	4615      	mov	r5, r2
 80083ee:	e7f4      	b.n	80083da <_dtoa_r+0x5d2>
 80083f0:	4b05      	ldr	r3, [pc, #20]	; (8008408 <_dtoa_r+0x600>)
 80083f2:	f7f8 f901 	bl	80005f8 <__aeabi_dmul>
 80083f6:	e9cd 0100 	strd	r0, r1, [sp]
 80083fa:	e7bc      	b.n	8008376 <_dtoa_r+0x56e>
 80083fc:	08009a08 	.word	0x08009a08
 8008400:	080099e0 	.word	0x080099e0
 8008404:	3ff00000 	.word	0x3ff00000
 8008408:	40240000 	.word	0x40240000
 800840c:	401c0000 	.word	0x401c0000
 8008410:	40140000 	.word	0x40140000
 8008414:	3fe00000 	.word	0x3fe00000
 8008418:	e9dd 6700 	ldrd	r6, r7, [sp]
 800841c:	465d      	mov	r5, fp
 800841e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008422:	4630      	mov	r0, r6
 8008424:	4639      	mov	r1, r7
 8008426:	f7f8 fa11 	bl	800084c <__aeabi_ddiv>
 800842a:	f7f8 fb95 	bl	8000b58 <__aeabi_d2iz>
 800842e:	4680      	mov	r8, r0
 8008430:	f7f8 f878 	bl	8000524 <__aeabi_i2d>
 8008434:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008438:	f7f8 f8de 	bl	80005f8 <__aeabi_dmul>
 800843c:	4602      	mov	r2, r0
 800843e:	460b      	mov	r3, r1
 8008440:	4630      	mov	r0, r6
 8008442:	4639      	mov	r1, r7
 8008444:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8008448:	f7f7 ff1e 	bl	8000288 <__aeabi_dsub>
 800844c:	f805 6b01 	strb.w	r6, [r5], #1
 8008450:	eba5 060b 	sub.w	r6, r5, fp
 8008454:	45b1      	cmp	r9, r6
 8008456:	4602      	mov	r2, r0
 8008458:	460b      	mov	r3, r1
 800845a:	d139      	bne.n	80084d0 <_dtoa_r+0x6c8>
 800845c:	f7f7 ff16 	bl	800028c <__adddf3>
 8008460:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008464:	4606      	mov	r6, r0
 8008466:	460f      	mov	r7, r1
 8008468:	f7f8 fb56 	bl	8000b18 <__aeabi_dcmpgt>
 800846c:	b9c8      	cbnz	r0, 80084a2 <_dtoa_r+0x69a>
 800846e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008472:	4630      	mov	r0, r6
 8008474:	4639      	mov	r1, r7
 8008476:	f7f8 fb27 	bl	8000ac8 <__aeabi_dcmpeq>
 800847a:	b110      	cbz	r0, 8008482 <_dtoa_r+0x67a>
 800847c:	f018 0f01 	tst.w	r8, #1
 8008480:	d10f      	bne.n	80084a2 <_dtoa_r+0x69a>
 8008482:	9904      	ldr	r1, [sp, #16]
 8008484:	4620      	mov	r0, r4
 8008486:	f000 fcaa 	bl	8008dde <_Bfree>
 800848a:	2300      	movs	r3, #0
 800848c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800848e:	702b      	strb	r3, [r5, #0]
 8008490:	f10a 0301 	add.w	r3, sl, #1
 8008494:	6013      	str	r3, [r2, #0]
 8008496:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008498:	2b00      	cmp	r3, #0
 800849a:	f000 8241 	beq.w	8008920 <_dtoa_r+0xb18>
 800849e:	601d      	str	r5, [r3, #0]
 80084a0:	e23e      	b.n	8008920 <_dtoa_r+0xb18>
 80084a2:	f8cd a020 	str.w	sl, [sp, #32]
 80084a6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80084aa:	2a39      	cmp	r2, #57	; 0x39
 80084ac:	f105 33ff 	add.w	r3, r5, #4294967295
 80084b0:	d108      	bne.n	80084c4 <_dtoa_r+0x6bc>
 80084b2:	459b      	cmp	fp, r3
 80084b4:	d10a      	bne.n	80084cc <_dtoa_r+0x6c4>
 80084b6:	9b08      	ldr	r3, [sp, #32]
 80084b8:	3301      	adds	r3, #1
 80084ba:	9308      	str	r3, [sp, #32]
 80084bc:	2330      	movs	r3, #48	; 0x30
 80084be:	f88b 3000 	strb.w	r3, [fp]
 80084c2:	465b      	mov	r3, fp
 80084c4:	781a      	ldrb	r2, [r3, #0]
 80084c6:	3201      	adds	r2, #1
 80084c8:	701a      	strb	r2, [r3, #0]
 80084ca:	e78c      	b.n	80083e6 <_dtoa_r+0x5de>
 80084cc:	461d      	mov	r5, r3
 80084ce:	e7ea      	b.n	80084a6 <_dtoa_r+0x69e>
 80084d0:	2200      	movs	r2, #0
 80084d2:	4b9b      	ldr	r3, [pc, #620]	; (8008740 <_dtoa_r+0x938>)
 80084d4:	f7f8 f890 	bl	80005f8 <__aeabi_dmul>
 80084d8:	2200      	movs	r2, #0
 80084da:	2300      	movs	r3, #0
 80084dc:	4606      	mov	r6, r0
 80084de:	460f      	mov	r7, r1
 80084e0:	f7f8 faf2 	bl	8000ac8 <__aeabi_dcmpeq>
 80084e4:	2800      	cmp	r0, #0
 80084e6:	d09a      	beq.n	800841e <_dtoa_r+0x616>
 80084e8:	e7cb      	b.n	8008482 <_dtoa_r+0x67a>
 80084ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80084ec:	2a00      	cmp	r2, #0
 80084ee:	f000 808b 	beq.w	8008608 <_dtoa_r+0x800>
 80084f2:	9a06      	ldr	r2, [sp, #24]
 80084f4:	2a01      	cmp	r2, #1
 80084f6:	dc6e      	bgt.n	80085d6 <_dtoa_r+0x7ce>
 80084f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80084fa:	2a00      	cmp	r2, #0
 80084fc:	d067      	beq.n	80085ce <_dtoa_r+0x7c6>
 80084fe:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008502:	9f07      	ldr	r7, [sp, #28]
 8008504:	9d05      	ldr	r5, [sp, #20]
 8008506:	9a05      	ldr	r2, [sp, #20]
 8008508:	2101      	movs	r1, #1
 800850a:	441a      	add	r2, r3
 800850c:	4620      	mov	r0, r4
 800850e:	9205      	str	r2, [sp, #20]
 8008510:	4498      	add	r8, r3
 8008512:	f000 fd04 	bl	8008f1e <__i2b>
 8008516:	4606      	mov	r6, r0
 8008518:	2d00      	cmp	r5, #0
 800851a:	dd0c      	ble.n	8008536 <_dtoa_r+0x72e>
 800851c:	f1b8 0f00 	cmp.w	r8, #0
 8008520:	dd09      	ble.n	8008536 <_dtoa_r+0x72e>
 8008522:	4545      	cmp	r5, r8
 8008524:	9a05      	ldr	r2, [sp, #20]
 8008526:	462b      	mov	r3, r5
 8008528:	bfa8      	it	ge
 800852a:	4643      	movge	r3, r8
 800852c:	1ad2      	subs	r2, r2, r3
 800852e:	9205      	str	r2, [sp, #20]
 8008530:	1aed      	subs	r5, r5, r3
 8008532:	eba8 0803 	sub.w	r8, r8, r3
 8008536:	9b07      	ldr	r3, [sp, #28]
 8008538:	b1eb      	cbz	r3, 8008576 <_dtoa_r+0x76e>
 800853a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800853c:	2b00      	cmp	r3, #0
 800853e:	d067      	beq.n	8008610 <_dtoa_r+0x808>
 8008540:	b18f      	cbz	r7, 8008566 <_dtoa_r+0x75e>
 8008542:	4631      	mov	r1, r6
 8008544:	463a      	mov	r2, r7
 8008546:	4620      	mov	r0, r4
 8008548:	f000 fd88 	bl	800905c <__pow5mult>
 800854c:	9a04      	ldr	r2, [sp, #16]
 800854e:	4601      	mov	r1, r0
 8008550:	4606      	mov	r6, r0
 8008552:	4620      	mov	r0, r4
 8008554:	f000 fcec 	bl	8008f30 <__multiply>
 8008558:	9904      	ldr	r1, [sp, #16]
 800855a:	9008      	str	r0, [sp, #32]
 800855c:	4620      	mov	r0, r4
 800855e:	f000 fc3e 	bl	8008dde <_Bfree>
 8008562:	9b08      	ldr	r3, [sp, #32]
 8008564:	9304      	str	r3, [sp, #16]
 8008566:	9b07      	ldr	r3, [sp, #28]
 8008568:	1bda      	subs	r2, r3, r7
 800856a:	d004      	beq.n	8008576 <_dtoa_r+0x76e>
 800856c:	9904      	ldr	r1, [sp, #16]
 800856e:	4620      	mov	r0, r4
 8008570:	f000 fd74 	bl	800905c <__pow5mult>
 8008574:	9004      	str	r0, [sp, #16]
 8008576:	2101      	movs	r1, #1
 8008578:	4620      	mov	r0, r4
 800857a:	f000 fcd0 	bl	8008f1e <__i2b>
 800857e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008580:	4607      	mov	r7, r0
 8008582:	2b00      	cmp	r3, #0
 8008584:	f000 81d0 	beq.w	8008928 <_dtoa_r+0xb20>
 8008588:	461a      	mov	r2, r3
 800858a:	4601      	mov	r1, r0
 800858c:	4620      	mov	r0, r4
 800858e:	f000 fd65 	bl	800905c <__pow5mult>
 8008592:	9b06      	ldr	r3, [sp, #24]
 8008594:	2b01      	cmp	r3, #1
 8008596:	4607      	mov	r7, r0
 8008598:	dc40      	bgt.n	800861c <_dtoa_r+0x814>
 800859a:	9b00      	ldr	r3, [sp, #0]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d139      	bne.n	8008614 <_dtoa_r+0x80c>
 80085a0:	9b01      	ldr	r3, [sp, #4]
 80085a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d136      	bne.n	8008618 <_dtoa_r+0x810>
 80085aa:	9b01      	ldr	r3, [sp, #4]
 80085ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80085b0:	0d1b      	lsrs	r3, r3, #20
 80085b2:	051b      	lsls	r3, r3, #20
 80085b4:	b12b      	cbz	r3, 80085c2 <_dtoa_r+0x7ba>
 80085b6:	9b05      	ldr	r3, [sp, #20]
 80085b8:	3301      	adds	r3, #1
 80085ba:	9305      	str	r3, [sp, #20]
 80085bc:	f108 0801 	add.w	r8, r8, #1
 80085c0:	2301      	movs	r3, #1
 80085c2:	9307      	str	r3, [sp, #28]
 80085c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d12a      	bne.n	8008620 <_dtoa_r+0x818>
 80085ca:	2001      	movs	r0, #1
 80085cc:	e030      	b.n	8008630 <_dtoa_r+0x828>
 80085ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80085d0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80085d4:	e795      	b.n	8008502 <_dtoa_r+0x6fa>
 80085d6:	9b07      	ldr	r3, [sp, #28]
 80085d8:	f109 37ff 	add.w	r7, r9, #4294967295
 80085dc:	42bb      	cmp	r3, r7
 80085de:	bfbf      	itttt	lt
 80085e0:	9b07      	ldrlt	r3, [sp, #28]
 80085e2:	9707      	strlt	r7, [sp, #28]
 80085e4:	1afa      	sublt	r2, r7, r3
 80085e6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80085e8:	bfbb      	ittet	lt
 80085ea:	189b      	addlt	r3, r3, r2
 80085ec:	930e      	strlt	r3, [sp, #56]	; 0x38
 80085ee:	1bdf      	subge	r7, r3, r7
 80085f0:	2700      	movlt	r7, #0
 80085f2:	f1b9 0f00 	cmp.w	r9, #0
 80085f6:	bfb5      	itete	lt
 80085f8:	9b05      	ldrlt	r3, [sp, #20]
 80085fa:	9d05      	ldrge	r5, [sp, #20]
 80085fc:	eba3 0509 	sublt.w	r5, r3, r9
 8008600:	464b      	movge	r3, r9
 8008602:	bfb8      	it	lt
 8008604:	2300      	movlt	r3, #0
 8008606:	e77e      	b.n	8008506 <_dtoa_r+0x6fe>
 8008608:	9f07      	ldr	r7, [sp, #28]
 800860a:	9d05      	ldr	r5, [sp, #20]
 800860c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800860e:	e783      	b.n	8008518 <_dtoa_r+0x710>
 8008610:	9a07      	ldr	r2, [sp, #28]
 8008612:	e7ab      	b.n	800856c <_dtoa_r+0x764>
 8008614:	2300      	movs	r3, #0
 8008616:	e7d4      	b.n	80085c2 <_dtoa_r+0x7ba>
 8008618:	9b00      	ldr	r3, [sp, #0]
 800861a:	e7d2      	b.n	80085c2 <_dtoa_r+0x7ba>
 800861c:	2300      	movs	r3, #0
 800861e:	9307      	str	r3, [sp, #28]
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8008626:	6918      	ldr	r0, [r3, #16]
 8008628:	f000 fc2b 	bl	8008e82 <__hi0bits>
 800862c:	f1c0 0020 	rsb	r0, r0, #32
 8008630:	4440      	add	r0, r8
 8008632:	f010 001f 	ands.w	r0, r0, #31
 8008636:	d047      	beq.n	80086c8 <_dtoa_r+0x8c0>
 8008638:	f1c0 0320 	rsb	r3, r0, #32
 800863c:	2b04      	cmp	r3, #4
 800863e:	dd3b      	ble.n	80086b8 <_dtoa_r+0x8b0>
 8008640:	9b05      	ldr	r3, [sp, #20]
 8008642:	f1c0 001c 	rsb	r0, r0, #28
 8008646:	4403      	add	r3, r0
 8008648:	9305      	str	r3, [sp, #20]
 800864a:	4405      	add	r5, r0
 800864c:	4480      	add	r8, r0
 800864e:	9b05      	ldr	r3, [sp, #20]
 8008650:	2b00      	cmp	r3, #0
 8008652:	dd05      	ble.n	8008660 <_dtoa_r+0x858>
 8008654:	461a      	mov	r2, r3
 8008656:	9904      	ldr	r1, [sp, #16]
 8008658:	4620      	mov	r0, r4
 800865a:	f000 fd4d 	bl	80090f8 <__lshift>
 800865e:	9004      	str	r0, [sp, #16]
 8008660:	f1b8 0f00 	cmp.w	r8, #0
 8008664:	dd05      	ble.n	8008672 <_dtoa_r+0x86a>
 8008666:	4639      	mov	r1, r7
 8008668:	4642      	mov	r2, r8
 800866a:	4620      	mov	r0, r4
 800866c:	f000 fd44 	bl	80090f8 <__lshift>
 8008670:	4607      	mov	r7, r0
 8008672:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008674:	b353      	cbz	r3, 80086cc <_dtoa_r+0x8c4>
 8008676:	4639      	mov	r1, r7
 8008678:	9804      	ldr	r0, [sp, #16]
 800867a:	f000 fd91 	bl	80091a0 <__mcmp>
 800867e:	2800      	cmp	r0, #0
 8008680:	da24      	bge.n	80086cc <_dtoa_r+0x8c4>
 8008682:	2300      	movs	r3, #0
 8008684:	220a      	movs	r2, #10
 8008686:	9904      	ldr	r1, [sp, #16]
 8008688:	4620      	mov	r0, r4
 800868a:	f000 fbbf 	bl	8008e0c <__multadd>
 800868e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008690:	9004      	str	r0, [sp, #16]
 8008692:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008696:	2b00      	cmp	r3, #0
 8008698:	f000 814d 	beq.w	8008936 <_dtoa_r+0xb2e>
 800869c:	2300      	movs	r3, #0
 800869e:	4631      	mov	r1, r6
 80086a0:	220a      	movs	r2, #10
 80086a2:	4620      	mov	r0, r4
 80086a4:	f000 fbb2 	bl	8008e0c <__multadd>
 80086a8:	9b02      	ldr	r3, [sp, #8]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	4606      	mov	r6, r0
 80086ae:	dc4f      	bgt.n	8008750 <_dtoa_r+0x948>
 80086b0:	9b06      	ldr	r3, [sp, #24]
 80086b2:	2b02      	cmp	r3, #2
 80086b4:	dd4c      	ble.n	8008750 <_dtoa_r+0x948>
 80086b6:	e011      	b.n	80086dc <_dtoa_r+0x8d4>
 80086b8:	d0c9      	beq.n	800864e <_dtoa_r+0x846>
 80086ba:	9a05      	ldr	r2, [sp, #20]
 80086bc:	331c      	adds	r3, #28
 80086be:	441a      	add	r2, r3
 80086c0:	9205      	str	r2, [sp, #20]
 80086c2:	441d      	add	r5, r3
 80086c4:	4498      	add	r8, r3
 80086c6:	e7c2      	b.n	800864e <_dtoa_r+0x846>
 80086c8:	4603      	mov	r3, r0
 80086ca:	e7f6      	b.n	80086ba <_dtoa_r+0x8b2>
 80086cc:	f1b9 0f00 	cmp.w	r9, #0
 80086d0:	dc38      	bgt.n	8008744 <_dtoa_r+0x93c>
 80086d2:	9b06      	ldr	r3, [sp, #24]
 80086d4:	2b02      	cmp	r3, #2
 80086d6:	dd35      	ble.n	8008744 <_dtoa_r+0x93c>
 80086d8:	f8cd 9008 	str.w	r9, [sp, #8]
 80086dc:	9b02      	ldr	r3, [sp, #8]
 80086de:	b963      	cbnz	r3, 80086fa <_dtoa_r+0x8f2>
 80086e0:	4639      	mov	r1, r7
 80086e2:	2205      	movs	r2, #5
 80086e4:	4620      	mov	r0, r4
 80086e6:	f000 fb91 	bl	8008e0c <__multadd>
 80086ea:	4601      	mov	r1, r0
 80086ec:	4607      	mov	r7, r0
 80086ee:	9804      	ldr	r0, [sp, #16]
 80086f0:	f000 fd56 	bl	80091a0 <__mcmp>
 80086f4:	2800      	cmp	r0, #0
 80086f6:	f73f adcc 	bgt.w	8008292 <_dtoa_r+0x48a>
 80086fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086fc:	465d      	mov	r5, fp
 80086fe:	ea6f 0a03 	mvn.w	sl, r3
 8008702:	f04f 0900 	mov.w	r9, #0
 8008706:	4639      	mov	r1, r7
 8008708:	4620      	mov	r0, r4
 800870a:	f000 fb68 	bl	8008dde <_Bfree>
 800870e:	2e00      	cmp	r6, #0
 8008710:	f43f aeb7 	beq.w	8008482 <_dtoa_r+0x67a>
 8008714:	f1b9 0f00 	cmp.w	r9, #0
 8008718:	d005      	beq.n	8008726 <_dtoa_r+0x91e>
 800871a:	45b1      	cmp	r9, r6
 800871c:	d003      	beq.n	8008726 <_dtoa_r+0x91e>
 800871e:	4649      	mov	r1, r9
 8008720:	4620      	mov	r0, r4
 8008722:	f000 fb5c 	bl	8008dde <_Bfree>
 8008726:	4631      	mov	r1, r6
 8008728:	4620      	mov	r0, r4
 800872a:	f000 fb58 	bl	8008dde <_Bfree>
 800872e:	e6a8      	b.n	8008482 <_dtoa_r+0x67a>
 8008730:	2700      	movs	r7, #0
 8008732:	463e      	mov	r6, r7
 8008734:	e7e1      	b.n	80086fa <_dtoa_r+0x8f2>
 8008736:	f8dd a020 	ldr.w	sl, [sp, #32]
 800873a:	463e      	mov	r6, r7
 800873c:	e5a9      	b.n	8008292 <_dtoa_r+0x48a>
 800873e:	bf00      	nop
 8008740:	40240000 	.word	0x40240000
 8008744:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008746:	f8cd 9008 	str.w	r9, [sp, #8]
 800874a:	2b00      	cmp	r3, #0
 800874c:	f000 80fa 	beq.w	8008944 <_dtoa_r+0xb3c>
 8008750:	2d00      	cmp	r5, #0
 8008752:	dd05      	ble.n	8008760 <_dtoa_r+0x958>
 8008754:	4631      	mov	r1, r6
 8008756:	462a      	mov	r2, r5
 8008758:	4620      	mov	r0, r4
 800875a:	f000 fccd 	bl	80090f8 <__lshift>
 800875e:	4606      	mov	r6, r0
 8008760:	9b07      	ldr	r3, [sp, #28]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d04c      	beq.n	8008800 <_dtoa_r+0x9f8>
 8008766:	6871      	ldr	r1, [r6, #4]
 8008768:	4620      	mov	r0, r4
 800876a:	f000 fb04 	bl	8008d76 <_Balloc>
 800876e:	6932      	ldr	r2, [r6, #16]
 8008770:	3202      	adds	r2, #2
 8008772:	4605      	mov	r5, r0
 8008774:	0092      	lsls	r2, r2, #2
 8008776:	f106 010c 	add.w	r1, r6, #12
 800877a:	300c      	adds	r0, #12
 800877c:	f000 faf0 	bl	8008d60 <memcpy>
 8008780:	2201      	movs	r2, #1
 8008782:	4629      	mov	r1, r5
 8008784:	4620      	mov	r0, r4
 8008786:	f000 fcb7 	bl	80090f8 <__lshift>
 800878a:	9b00      	ldr	r3, [sp, #0]
 800878c:	f8cd b014 	str.w	fp, [sp, #20]
 8008790:	f003 0301 	and.w	r3, r3, #1
 8008794:	46b1      	mov	r9, r6
 8008796:	9307      	str	r3, [sp, #28]
 8008798:	4606      	mov	r6, r0
 800879a:	4639      	mov	r1, r7
 800879c:	9804      	ldr	r0, [sp, #16]
 800879e:	f7ff faa5 	bl	8007cec <quorem>
 80087a2:	4649      	mov	r1, r9
 80087a4:	4605      	mov	r5, r0
 80087a6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80087aa:	9804      	ldr	r0, [sp, #16]
 80087ac:	f000 fcf8 	bl	80091a0 <__mcmp>
 80087b0:	4632      	mov	r2, r6
 80087b2:	9000      	str	r0, [sp, #0]
 80087b4:	4639      	mov	r1, r7
 80087b6:	4620      	mov	r0, r4
 80087b8:	f000 fd0c 	bl	80091d4 <__mdiff>
 80087bc:	68c3      	ldr	r3, [r0, #12]
 80087be:	4602      	mov	r2, r0
 80087c0:	bb03      	cbnz	r3, 8008804 <_dtoa_r+0x9fc>
 80087c2:	4601      	mov	r1, r0
 80087c4:	9008      	str	r0, [sp, #32]
 80087c6:	9804      	ldr	r0, [sp, #16]
 80087c8:	f000 fcea 	bl	80091a0 <__mcmp>
 80087cc:	9a08      	ldr	r2, [sp, #32]
 80087ce:	4603      	mov	r3, r0
 80087d0:	4611      	mov	r1, r2
 80087d2:	4620      	mov	r0, r4
 80087d4:	9308      	str	r3, [sp, #32]
 80087d6:	f000 fb02 	bl	8008dde <_Bfree>
 80087da:	9b08      	ldr	r3, [sp, #32]
 80087dc:	b9a3      	cbnz	r3, 8008808 <_dtoa_r+0xa00>
 80087de:	9a06      	ldr	r2, [sp, #24]
 80087e0:	b992      	cbnz	r2, 8008808 <_dtoa_r+0xa00>
 80087e2:	9a07      	ldr	r2, [sp, #28]
 80087e4:	b982      	cbnz	r2, 8008808 <_dtoa_r+0xa00>
 80087e6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80087ea:	d029      	beq.n	8008840 <_dtoa_r+0xa38>
 80087ec:	9b00      	ldr	r3, [sp, #0]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	dd01      	ble.n	80087f6 <_dtoa_r+0x9ee>
 80087f2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80087f6:	9b05      	ldr	r3, [sp, #20]
 80087f8:	1c5d      	adds	r5, r3, #1
 80087fa:	f883 8000 	strb.w	r8, [r3]
 80087fe:	e782      	b.n	8008706 <_dtoa_r+0x8fe>
 8008800:	4630      	mov	r0, r6
 8008802:	e7c2      	b.n	800878a <_dtoa_r+0x982>
 8008804:	2301      	movs	r3, #1
 8008806:	e7e3      	b.n	80087d0 <_dtoa_r+0x9c8>
 8008808:	9a00      	ldr	r2, [sp, #0]
 800880a:	2a00      	cmp	r2, #0
 800880c:	db04      	blt.n	8008818 <_dtoa_r+0xa10>
 800880e:	d125      	bne.n	800885c <_dtoa_r+0xa54>
 8008810:	9a06      	ldr	r2, [sp, #24]
 8008812:	bb1a      	cbnz	r2, 800885c <_dtoa_r+0xa54>
 8008814:	9a07      	ldr	r2, [sp, #28]
 8008816:	bb0a      	cbnz	r2, 800885c <_dtoa_r+0xa54>
 8008818:	2b00      	cmp	r3, #0
 800881a:	ddec      	ble.n	80087f6 <_dtoa_r+0x9ee>
 800881c:	2201      	movs	r2, #1
 800881e:	9904      	ldr	r1, [sp, #16]
 8008820:	4620      	mov	r0, r4
 8008822:	f000 fc69 	bl	80090f8 <__lshift>
 8008826:	4639      	mov	r1, r7
 8008828:	9004      	str	r0, [sp, #16]
 800882a:	f000 fcb9 	bl	80091a0 <__mcmp>
 800882e:	2800      	cmp	r0, #0
 8008830:	dc03      	bgt.n	800883a <_dtoa_r+0xa32>
 8008832:	d1e0      	bne.n	80087f6 <_dtoa_r+0x9ee>
 8008834:	f018 0f01 	tst.w	r8, #1
 8008838:	d0dd      	beq.n	80087f6 <_dtoa_r+0x9ee>
 800883a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800883e:	d1d8      	bne.n	80087f2 <_dtoa_r+0x9ea>
 8008840:	9b05      	ldr	r3, [sp, #20]
 8008842:	9a05      	ldr	r2, [sp, #20]
 8008844:	1c5d      	adds	r5, r3, #1
 8008846:	2339      	movs	r3, #57	; 0x39
 8008848:	7013      	strb	r3, [r2, #0]
 800884a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800884e:	2b39      	cmp	r3, #57	; 0x39
 8008850:	f105 32ff 	add.w	r2, r5, #4294967295
 8008854:	d04f      	beq.n	80088f6 <_dtoa_r+0xaee>
 8008856:	3301      	adds	r3, #1
 8008858:	7013      	strb	r3, [r2, #0]
 800885a:	e754      	b.n	8008706 <_dtoa_r+0x8fe>
 800885c:	9a05      	ldr	r2, [sp, #20]
 800885e:	2b00      	cmp	r3, #0
 8008860:	f102 0501 	add.w	r5, r2, #1
 8008864:	dd06      	ble.n	8008874 <_dtoa_r+0xa6c>
 8008866:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800886a:	d0e9      	beq.n	8008840 <_dtoa_r+0xa38>
 800886c:	f108 0801 	add.w	r8, r8, #1
 8008870:	9b05      	ldr	r3, [sp, #20]
 8008872:	e7c2      	b.n	80087fa <_dtoa_r+0x9f2>
 8008874:	9a02      	ldr	r2, [sp, #8]
 8008876:	f805 8c01 	strb.w	r8, [r5, #-1]
 800887a:	eba5 030b 	sub.w	r3, r5, fp
 800887e:	4293      	cmp	r3, r2
 8008880:	d021      	beq.n	80088c6 <_dtoa_r+0xabe>
 8008882:	2300      	movs	r3, #0
 8008884:	220a      	movs	r2, #10
 8008886:	9904      	ldr	r1, [sp, #16]
 8008888:	4620      	mov	r0, r4
 800888a:	f000 fabf 	bl	8008e0c <__multadd>
 800888e:	45b1      	cmp	r9, r6
 8008890:	9004      	str	r0, [sp, #16]
 8008892:	f04f 0300 	mov.w	r3, #0
 8008896:	f04f 020a 	mov.w	r2, #10
 800889a:	4649      	mov	r1, r9
 800889c:	4620      	mov	r0, r4
 800889e:	d105      	bne.n	80088ac <_dtoa_r+0xaa4>
 80088a0:	f000 fab4 	bl	8008e0c <__multadd>
 80088a4:	4681      	mov	r9, r0
 80088a6:	4606      	mov	r6, r0
 80088a8:	9505      	str	r5, [sp, #20]
 80088aa:	e776      	b.n	800879a <_dtoa_r+0x992>
 80088ac:	f000 faae 	bl	8008e0c <__multadd>
 80088b0:	4631      	mov	r1, r6
 80088b2:	4681      	mov	r9, r0
 80088b4:	2300      	movs	r3, #0
 80088b6:	220a      	movs	r2, #10
 80088b8:	4620      	mov	r0, r4
 80088ba:	f000 faa7 	bl	8008e0c <__multadd>
 80088be:	4606      	mov	r6, r0
 80088c0:	e7f2      	b.n	80088a8 <_dtoa_r+0xaa0>
 80088c2:	f04f 0900 	mov.w	r9, #0
 80088c6:	2201      	movs	r2, #1
 80088c8:	9904      	ldr	r1, [sp, #16]
 80088ca:	4620      	mov	r0, r4
 80088cc:	f000 fc14 	bl	80090f8 <__lshift>
 80088d0:	4639      	mov	r1, r7
 80088d2:	9004      	str	r0, [sp, #16]
 80088d4:	f000 fc64 	bl	80091a0 <__mcmp>
 80088d8:	2800      	cmp	r0, #0
 80088da:	dcb6      	bgt.n	800884a <_dtoa_r+0xa42>
 80088dc:	d102      	bne.n	80088e4 <_dtoa_r+0xadc>
 80088de:	f018 0f01 	tst.w	r8, #1
 80088e2:	d1b2      	bne.n	800884a <_dtoa_r+0xa42>
 80088e4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80088e8:	2b30      	cmp	r3, #48	; 0x30
 80088ea:	f105 32ff 	add.w	r2, r5, #4294967295
 80088ee:	f47f af0a 	bne.w	8008706 <_dtoa_r+0x8fe>
 80088f2:	4615      	mov	r5, r2
 80088f4:	e7f6      	b.n	80088e4 <_dtoa_r+0xadc>
 80088f6:	4593      	cmp	fp, r2
 80088f8:	d105      	bne.n	8008906 <_dtoa_r+0xafe>
 80088fa:	2331      	movs	r3, #49	; 0x31
 80088fc:	f10a 0a01 	add.w	sl, sl, #1
 8008900:	f88b 3000 	strb.w	r3, [fp]
 8008904:	e6ff      	b.n	8008706 <_dtoa_r+0x8fe>
 8008906:	4615      	mov	r5, r2
 8008908:	e79f      	b.n	800884a <_dtoa_r+0xa42>
 800890a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8008970 <_dtoa_r+0xb68>
 800890e:	e007      	b.n	8008920 <_dtoa_r+0xb18>
 8008910:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008912:	f8df b060 	ldr.w	fp, [pc, #96]	; 8008974 <_dtoa_r+0xb6c>
 8008916:	b11b      	cbz	r3, 8008920 <_dtoa_r+0xb18>
 8008918:	f10b 0308 	add.w	r3, fp, #8
 800891c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800891e:	6013      	str	r3, [r2, #0]
 8008920:	4658      	mov	r0, fp
 8008922:	b017      	add	sp, #92	; 0x5c
 8008924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008928:	9b06      	ldr	r3, [sp, #24]
 800892a:	2b01      	cmp	r3, #1
 800892c:	f77f ae35 	ble.w	800859a <_dtoa_r+0x792>
 8008930:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008932:	9307      	str	r3, [sp, #28]
 8008934:	e649      	b.n	80085ca <_dtoa_r+0x7c2>
 8008936:	9b02      	ldr	r3, [sp, #8]
 8008938:	2b00      	cmp	r3, #0
 800893a:	dc03      	bgt.n	8008944 <_dtoa_r+0xb3c>
 800893c:	9b06      	ldr	r3, [sp, #24]
 800893e:	2b02      	cmp	r3, #2
 8008940:	f73f aecc 	bgt.w	80086dc <_dtoa_r+0x8d4>
 8008944:	465d      	mov	r5, fp
 8008946:	4639      	mov	r1, r7
 8008948:	9804      	ldr	r0, [sp, #16]
 800894a:	f7ff f9cf 	bl	8007cec <quorem>
 800894e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008952:	f805 8b01 	strb.w	r8, [r5], #1
 8008956:	9a02      	ldr	r2, [sp, #8]
 8008958:	eba5 030b 	sub.w	r3, r5, fp
 800895c:	429a      	cmp	r2, r3
 800895e:	ddb0      	ble.n	80088c2 <_dtoa_r+0xaba>
 8008960:	2300      	movs	r3, #0
 8008962:	220a      	movs	r2, #10
 8008964:	9904      	ldr	r1, [sp, #16]
 8008966:	4620      	mov	r0, r4
 8008968:	f000 fa50 	bl	8008e0c <__multadd>
 800896c:	9004      	str	r0, [sp, #16]
 800896e:	e7ea      	b.n	8008946 <_dtoa_r+0xb3e>
 8008970:	0800994c 	.word	0x0800994c
 8008974:	08009970 	.word	0x08009970

08008978 <__sflush_r>:
 8008978:	898a      	ldrh	r2, [r1, #12]
 800897a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800897e:	4605      	mov	r5, r0
 8008980:	0710      	lsls	r0, r2, #28
 8008982:	460c      	mov	r4, r1
 8008984:	d458      	bmi.n	8008a38 <__sflush_r+0xc0>
 8008986:	684b      	ldr	r3, [r1, #4]
 8008988:	2b00      	cmp	r3, #0
 800898a:	dc05      	bgt.n	8008998 <__sflush_r+0x20>
 800898c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800898e:	2b00      	cmp	r3, #0
 8008990:	dc02      	bgt.n	8008998 <__sflush_r+0x20>
 8008992:	2000      	movs	r0, #0
 8008994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008998:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800899a:	2e00      	cmp	r6, #0
 800899c:	d0f9      	beq.n	8008992 <__sflush_r+0x1a>
 800899e:	2300      	movs	r3, #0
 80089a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80089a4:	682f      	ldr	r7, [r5, #0]
 80089a6:	6a21      	ldr	r1, [r4, #32]
 80089a8:	602b      	str	r3, [r5, #0]
 80089aa:	d032      	beq.n	8008a12 <__sflush_r+0x9a>
 80089ac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80089ae:	89a3      	ldrh	r3, [r4, #12]
 80089b0:	075a      	lsls	r2, r3, #29
 80089b2:	d505      	bpl.n	80089c0 <__sflush_r+0x48>
 80089b4:	6863      	ldr	r3, [r4, #4]
 80089b6:	1ac0      	subs	r0, r0, r3
 80089b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80089ba:	b10b      	cbz	r3, 80089c0 <__sflush_r+0x48>
 80089bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80089be:	1ac0      	subs	r0, r0, r3
 80089c0:	2300      	movs	r3, #0
 80089c2:	4602      	mov	r2, r0
 80089c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80089c6:	6a21      	ldr	r1, [r4, #32]
 80089c8:	4628      	mov	r0, r5
 80089ca:	47b0      	blx	r6
 80089cc:	1c43      	adds	r3, r0, #1
 80089ce:	89a3      	ldrh	r3, [r4, #12]
 80089d0:	d106      	bne.n	80089e0 <__sflush_r+0x68>
 80089d2:	6829      	ldr	r1, [r5, #0]
 80089d4:	291d      	cmp	r1, #29
 80089d6:	d848      	bhi.n	8008a6a <__sflush_r+0xf2>
 80089d8:	4a29      	ldr	r2, [pc, #164]	; (8008a80 <__sflush_r+0x108>)
 80089da:	40ca      	lsrs	r2, r1
 80089dc:	07d6      	lsls	r6, r2, #31
 80089de:	d544      	bpl.n	8008a6a <__sflush_r+0xf2>
 80089e0:	2200      	movs	r2, #0
 80089e2:	6062      	str	r2, [r4, #4]
 80089e4:	04d9      	lsls	r1, r3, #19
 80089e6:	6922      	ldr	r2, [r4, #16]
 80089e8:	6022      	str	r2, [r4, #0]
 80089ea:	d504      	bpl.n	80089f6 <__sflush_r+0x7e>
 80089ec:	1c42      	adds	r2, r0, #1
 80089ee:	d101      	bne.n	80089f4 <__sflush_r+0x7c>
 80089f0:	682b      	ldr	r3, [r5, #0]
 80089f2:	b903      	cbnz	r3, 80089f6 <__sflush_r+0x7e>
 80089f4:	6560      	str	r0, [r4, #84]	; 0x54
 80089f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80089f8:	602f      	str	r7, [r5, #0]
 80089fa:	2900      	cmp	r1, #0
 80089fc:	d0c9      	beq.n	8008992 <__sflush_r+0x1a>
 80089fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a02:	4299      	cmp	r1, r3
 8008a04:	d002      	beq.n	8008a0c <__sflush_r+0x94>
 8008a06:	4628      	mov	r0, r5
 8008a08:	f000 fc9e 	bl	8009348 <_free_r>
 8008a0c:	2000      	movs	r0, #0
 8008a0e:	6360      	str	r0, [r4, #52]	; 0x34
 8008a10:	e7c0      	b.n	8008994 <__sflush_r+0x1c>
 8008a12:	2301      	movs	r3, #1
 8008a14:	4628      	mov	r0, r5
 8008a16:	47b0      	blx	r6
 8008a18:	1c41      	adds	r1, r0, #1
 8008a1a:	d1c8      	bne.n	80089ae <__sflush_r+0x36>
 8008a1c:	682b      	ldr	r3, [r5, #0]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d0c5      	beq.n	80089ae <__sflush_r+0x36>
 8008a22:	2b1d      	cmp	r3, #29
 8008a24:	d001      	beq.n	8008a2a <__sflush_r+0xb2>
 8008a26:	2b16      	cmp	r3, #22
 8008a28:	d101      	bne.n	8008a2e <__sflush_r+0xb6>
 8008a2a:	602f      	str	r7, [r5, #0]
 8008a2c:	e7b1      	b.n	8008992 <__sflush_r+0x1a>
 8008a2e:	89a3      	ldrh	r3, [r4, #12]
 8008a30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a34:	81a3      	strh	r3, [r4, #12]
 8008a36:	e7ad      	b.n	8008994 <__sflush_r+0x1c>
 8008a38:	690f      	ldr	r7, [r1, #16]
 8008a3a:	2f00      	cmp	r7, #0
 8008a3c:	d0a9      	beq.n	8008992 <__sflush_r+0x1a>
 8008a3e:	0793      	lsls	r3, r2, #30
 8008a40:	680e      	ldr	r6, [r1, #0]
 8008a42:	bf08      	it	eq
 8008a44:	694b      	ldreq	r3, [r1, #20]
 8008a46:	600f      	str	r7, [r1, #0]
 8008a48:	bf18      	it	ne
 8008a4a:	2300      	movne	r3, #0
 8008a4c:	eba6 0807 	sub.w	r8, r6, r7
 8008a50:	608b      	str	r3, [r1, #8]
 8008a52:	f1b8 0f00 	cmp.w	r8, #0
 8008a56:	dd9c      	ble.n	8008992 <__sflush_r+0x1a>
 8008a58:	4643      	mov	r3, r8
 8008a5a:	463a      	mov	r2, r7
 8008a5c:	6a21      	ldr	r1, [r4, #32]
 8008a5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008a60:	4628      	mov	r0, r5
 8008a62:	47b0      	blx	r6
 8008a64:	2800      	cmp	r0, #0
 8008a66:	dc06      	bgt.n	8008a76 <__sflush_r+0xfe>
 8008a68:	89a3      	ldrh	r3, [r4, #12]
 8008a6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a6e:	81a3      	strh	r3, [r4, #12]
 8008a70:	f04f 30ff 	mov.w	r0, #4294967295
 8008a74:	e78e      	b.n	8008994 <__sflush_r+0x1c>
 8008a76:	4407      	add	r7, r0
 8008a78:	eba8 0800 	sub.w	r8, r8, r0
 8008a7c:	e7e9      	b.n	8008a52 <__sflush_r+0xda>
 8008a7e:	bf00      	nop
 8008a80:	20400001 	.word	0x20400001

08008a84 <_fflush_r>:
 8008a84:	b538      	push	{r3, r4, r5, lr}
 8008a86:	690b      	ldr	r3, [r1, #16]
 8008a88:	4605      	mov	r5, r0
 8008a8a:	460c      	mov	r4, r1
 8008a8c:	b1db      	cbz	r3, 8008ac6 <_fflush_r+0x42>
 8008a8e:	b118      	cbz	r0, 8008a98 <_fflush_r+0x14>
 8008a90:	6983      	ldr	r3, [r0, #24]
 8008a92:	b90b      	cbnz	r3, 8008a98 <_fflush_r+0x14>
 8008a94:	f000 f860 	bl	8008b58 <__sinit>
 8008a98:	4b0c      	ldr	r3, [pc, #48]	; (8008acc <_fflush_r+0x48>)
 8008a9a:	429c      	cmp	r4, r3
 8008a9c:	d109      	bne.n	8008ab2 <_fflush_r+0x2e>
 8008a9e:	686c      	ldr	r4, [r5, #4]
 8008aa0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008aa4:	b17b      	cbz	r3, 8008ac6 <_fflush_r+0x42>
 8008aa6:	4621      	mov	r1, r4
 8008aa8:	4628      	mov	r0, r5
 8008aaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008aae:	f7ff bf63 	b.w	8008978 <__sflush_r>
 8008ab2:	4b07      	ldr	r3, [pc, #28]	; (8008ad0 <_fflush_r+0x4c>)
 8008ab4:	429c      	cmp	r4, r3
 8008ab6:	d101      	bne.n	8008abc <_fflush_r+0x38>
 8008ab8:	68ac      	ldr	r4, [r5, #8]
 8008aba:	e7f1      	b.n	8008aa0 <_fflush_r+0x1c>
 8008abc:	4b05      	ldr	r3, [pc, #20]	; (8008ad4 <_fflush_r+0x50>)
 8008abe:	429c      	cmp	r4, r3
 8008ac0:	bf08      	it	eq
 8008ac2:	68ec      	ldreq	r4, [r5, #12]
 8008ac4:	e7ec      	b.n	8008aa0 <_fflush_r+0x1c>
 8008ac6:	2000      	movs	r0, #0
 8008ac8:	bd38      	pop	{r3, r4, r5, pc}
 8008aca:	bf00      	nop
 8008acc:	080099a0 	.word	0x080099a0
 8008ad0:	080099c0 	.word	0x080099c0
 8008ad4:	08009980 	.word	0x08009980

08008ad8 <std>:
 8008ad8:	2300      	movs	r3, #0
 8008ada:	b510      	push	{r4, lr}
 8008adc:	4604      	mov	r4, r0
 8008ade:	e9c0 3300 	strd	r3, r3, [r0]
 8008ae2:	6083      	str	r3, [r0, #8]
 8008ae4:	8181      	strh	r1, [r0, #12]
 8008ae6:	6643      	str	r3, [r0, #100]	; 0x64
 8008ae8:	81c2      	strh	r2, [r0, #14]
 8008aea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008aee:	6183      	str	r3, [r0, #24]
 8008af0:	4619      	mov	r1, r3
 8008af2:	2208      	movs	r2, #8
 8008af4:	305c      	adds	r0, #92	; 0x5c
 8008af6:	f7fe faa3 	bl	8007040 <memset>
 8008afa:	4b05      	ldr	r3, [pc, #20]	; (8008b10 <std+0x38>)
 8008afc:	6263      	str	r3, [r4, #36]	; 0x24
 8008afe:	4b05      	ldr	r3, [pc, #20]	; (8008b14 <std+0x3c>)
 8008b00:	62a3      	str	r3, [r4, #40]	; 0x28
 8008b02:	4b05      	ldr	r3, [pc, #20]	; (8008b18 <std+0x40>)
 8008b04:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008b06:	4b05      	ldr	r3, [pc, #20]	; (8008b1c <std+0x44>)
 8008b08:	6224      	str	r4, [r4, #32]
 8008b0a:	6323      	str	r3, [r4, #48]	; 0x30
 8008b0c:	bd10      	pop	{r4, pc}
 8008b0e:	bf00      	nop
 8008b10:	08009739 	.word	0x08009739
 8008b14:	0800975b 	.word	0x0800975b
 8008b18:	08009793 	.word	0x08009793
 8008b1c:	080097b7 	.word	0x080097b7

08008b20 <_cleanup_r>:
 8008b20:	4901      	ldr	r1, [pc, #4]	; (8008b28 <_cleanup_r+0x8>)
 8008b22:	f000 b885 	b.w	8008c30 <_fwalk_reent>
 8008b26:	bf00      	nop
 8008b28:	08008a85 	.word	0x08008a85

08008b2c <__sfmoreglue>:
 8008b2c:	b570      	push	{r4, r5, r6, lr}
 8008b2e:	1e4a      	subs	r2, r1, #1
 8008b30:	2568      	movs	r5, #104	; 0x68
 8008b32:	4355      	muls	r5, r2
 8008b34:	460e      	mov	r6, r1
 8008b36:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008b3a:	f000 fc53 	bl	80093e4 <_malloc_r>
 8008b3e:	4604      	mov	r4, r0
 8008b40:	b140      	cbz	r0, 8008b54 <__sfmoreglue+0x28>
 8008b42:	2100      	movs	r1, #0
 8008b44:	e9c0 1600 	strd	r1, r6, [r0]
 8008b48:	300c      	adds	r0, #12
 8008b4a:	60a0      	str	r0, [r4, #8]
 8008b4c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008b50:	f7fe fa76 	bl	8007040 <memset>
 8008b54:	4620      	mov	r0, r4
 8008b56:	bd70      	pop	{r4, r5, r6, pc}

08008b58 <__sinit>:
 8008b58:	6983      	ldr	r3, [r0, #24]
 8008b5a:	b510      	push	{r4, lr}
 8008b5c:	4604      	mov	r4, r0
 8008b5e:	bb33      	cbnz	r3, 8008bae <__sinit+0x56>
 8008b60:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8008b64:	6503      	str	r3, [r0, #80]	; 0x50
 8008b66:	4b12      	ldr	r3, [pc, #72]	; (8008bb0 <__sinit+0x58>)
 8008b68:	4a12      	ldr	r2, [pc, #72]	; (8008bb4 <__sinit+0x5c>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	6282      	str	r2, [r0, #40]	; 0x28
 8008b6e:	4298      	cmp	r0, r3
 8008b70:	bf04      	itt	eq
 8008b72:	2301      	moveq	r3, #1
 8008b74:	6183      	streq	r3, [r0, #24]
 8008b76:	f000 f81f 	bl	8008bb8 <__sfp>
 8008b7a:	6060      	str	r0, [r4, #4]
 8008b7c:	4620      	mov	r0, r4
 8008b7e:	f000 f81b 	bl	8008bb8 <__sfp>
 8008b82:	60a0      	str	r0, [r4, #8]
 8008b84:	4620      	mov	r0, r4
 8008b86:	f000 f817 	bl	8008bb8 <__sfp>
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	60e0      	str	r0, [r4, #12]
 8008b8e:	2104      	movs	r1, #4
 8008b90:	6860      	ldr	r0, [r4, #4]
 8008b92:	f7ff ffa1 	bl	8008ad8 <std>
 8008b96:	2201      	movs	r2, #1
 8008b98:	2109      	movs	r1, #9
 8008b9a:	68a0      	ldr	r0, [r4, #8]
 8008b9c:	f7ff ff9c 	bl	8008ad8 <std>
 8008ba0:	2202      	movs	r2, #2
 8008ba2:	2112      	movs	r1, #18
 8008ba4:	68e0      	ldr	r0, [r4, #12]
 8008ba6:	f7ff ff97 	bl	8008ad8 <std>
 8008baa:	2301      	movs	r3, #1
 8008bac:	61a3      	str	r3, [r4, #24]
 8008bae:	bd10      	pop	{r4, pc}
 8008bb0:	08009938 	.word	0x08009938
 8008bb4:	08008b21 	.word	0x08008b21

08008bb8 <__sfp>:
 8008bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bba:	4b1b      	ldr	r3, [pc, #108]	; (8008c28 <__sfp+0x70>)
 8008bbc:	681e      	ldr	r6, [r3, #0]
 8008bbe:	69b3      	ldr	r3, [r6, #24]
 8008bc0:	4607      	mov	r7, r0
 8008bc2:	b913      	cbnz	r3, 8008bca <__sfp+0x12>
 8008bc4:	4630      	mov	r0, r6
 8008bc6:	f7ff ffc7 	bl	8008b58 <__sinit>
 8008bca:	3648      	adds	r6, #72	; 0x48
 8008bcc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008bd0:	3b01      	subs	r3, #1
 8008bd2:	d503      	bpl.n	8008bdc <__sfp+0x24>
 8008bd4:	6833      	ldr	r3, [r6, #0]
 8008bd6:	b133      	cbz	r3, 8008be6 <__sfp+0x2e>
 8008bd8:	6836      	ldr	r6, [r6, #0]
 8008bda:	e7f7      	b.n	8008bcc <__sfp+0x14>
 8008bdc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008be0:	b16d      	cbz	r5, 8008bfe <__sfp+0x46>
 8008be2:	3468      	adds	r4, #104	; 0x68
 8008be4:	e7f4      	b.n	8008bd0 <__sfp+0x18>
 8008be6:	2104      	movs	r1, #4
 8008be8:	4638      	mov	r0, r7
 8008bea:	f7ff ff9f 	bl	8008b2c <__sfmoreglue>
 8008bee:	6030      	str	r0, [r6, #0]
 8008bf0:	2800      	cmp	r0, #0
 8008bf2:	d1f1      	bne.n	8008bd8 <__sfp+0x20>
 8008bf4:	230c      	movs	r3, #12
 8008bf6:	603b      	str	r3, [r7, #0]
 8008bf8:	4604      	mov	r4, r0
 8008bfa:	4620      	mov	r0, r4
 8008bfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bfe:	4b0b      	ldr	r3, [pc, #44]	; (8008c2c <__sfp+0x74>)
 8008c00:	6665      	str	r5, [r4, #100]	; 0x64
 8008c02:	e9c4 5500 	strd	r5, r5, [r4]
 8008c06:	60a5      	str	r5, [r4, #8]
 8008c08:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8008c0c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8008c10:	2208      	movs	r2, #8
 8008c12:	4629      	mov	r1, r5
 8008c14:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008c18:	f7fe fa12 	bl	8007040 <memset>
 8008c1c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008c20:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008c24:	e7e9      	b.n	8008bfa <__sfp+0x42>
 8008c26:	bf00      	nop
 8008c28:	08009938 	.word	0x08009938
 8008c2c:	ffff0001 	.word	0xffff0001

08008c30 <_fwalk_reent>:
 8008c30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c34:	4680      	mov	r8, r0
 8008c36:	4689      	mov	r9, r1
 8008c38:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008c3c:	2600      	movs	r6, #0
 8008c3e:	b914      	cbnz	r4, 8008c46 <_fwalk_reent+0x16>
 8008c40:	4630      	mov	r0, r6
 8008c42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c46:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8008c4a:	3f01      	subs	r7, #1
 8008c4c:	d501      	bpl.n	8008c52 <_fwalk_reent+0x22>
 8008c4e:	6824      	ldr	r4, [r4, #0]
 8008c50:	e7f5      	b.n	8008c3e <_fwalk_reent+0xe>
 8008c52:	89ab      	ldrh	r3, [r5, #12]
 8008c54:	2b01      	cmp	r3, #1
 8008c56:	d907      	bls.n	8008c68 <_fwalk_reent+0x38>
 8008c58:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008c5c:	3301      	adds	r3, #1
 8008c5e:	d003      	beq.n	8008c68 <_fwalk_reent+0x38>
 8008c60:	4629      	mov	r1, r5
 8008c62:	4640      	mov	r0, r8
 8008c64:	47c8      	blx	r9
 8008c66:	4306      	orrs	r6, r0
 8008c68:	3568      	adds	r5, #104	; 0x68
 8008c6a:	e7ee      	b.n	8008c4a <_fwalk_reent+0x1a>

08008c6c <_localeconv_r>:
 8008c6c:	4b04      	ldr	r3, [pc, #16]	; (8008c80 <_localeconv_r+0x14>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	6a18      	ldr	r0, [r3, #32]
 8008c72:	4b04      	ldr	r3, [pc, #16]	; (8008c84 <_localeconv_r+0x18>)
 8008c74:	2800      	cmp	r0, #0
 8008c76:	bf08      	it	eq
 8008c78:	4618      	moveq	r0, r3
 8008c7a:	30f0      	adds	r0, #240	; 0xf0
 8008c7c:	4770      	bx	lr
 8008c7e:	bf00      	nop
 8008c80:	20000014 	.word	0x20000014
 8008c84:	20000078 	.word	0x20000078

08008c88 <__swhatbuf_r>:
 8008c88:	b570      	push	{r4, r5, r6, lr}
 8008c8a:	460e      	mov	r6, r1
 8008c8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c90:	2900      	cmp	r1, #0
 8008c92:	b096      	sub	sp, #88	; 0x58
 8008c94:	4614      	mov	r4, r2
 8008c96:	461d      	mov	r5, r3
 8008c98:	da07      	bge.n	8008caa <__swhatbuf_r+0x22>
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	602b      	str	r3, [r5, #0]
 8008c9e:	89b3      	ldrh	r3, [r6, #12]
 8008ca0:	061a      	lsls	r2, r3, #24
 8008ca2:	d410      	bmi.n	8008cc6 <__swhatbuf_r+0x3e>
 8008ca4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ca8:	e00e      	b.n	8008cc8 <__swhatbuf_r+0x40>
 8008caa:	466a      	mov	r2, sp
 8008cac:	f000 fdaa 	bl	8009804 <_fstat_r>
 8008cb0:	2800      	cmp	r0, #0
 8008cb2:	dbf2      	blt.n	8008c9a <__swhatbuf_r+0x12>
 8008cb4:	9a01      	ldr	r2, [sp, #4]
 8008cb6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008cba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008cbe:	425a      	negs	r2, r3
 8008cc0:	415a      	adcs	r2, r3
 8008cc2:	602a      	str	r2, [r5, #0]
 8008cc4:	e7ee      	b.n	8008ca4 <__swhatbuf_r+0x1c>
 8008cc6:	2340      	movs	r3, #64	; 0x40
 8008cc8:	2000      	movs	r0, #0
 8008cca:	6023      	str	r3, [r4, #0]
 8008ccc:	b016      	add	sp, #88	; 0x58
 8008cce:	bd70      	pop	{r4, r5, r6, pc}

08008cd0 <__smakebuf_r>:
 8008cd0:	898b      	ldrh	r3, [r1, #12]
 8008cd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008cd4:	079d      	lsls	r5, r3, #30
 8008cd6:	4606      	mov	r6, r0
 8008cd8:	460c      	mov	r4, r1
 8008cda:	d507      	bpl.n	8008cec <__smakebuf_r+0x1c>
 8008cdc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008ce0:	6023      	str	r3, [r4, #0]
 8008ce2:	6123      	str	r3, [r4, #16]
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	6163      	str	r3, [r4, #20]
 8008ce8:	b002      	add	sp, #8
 8008cea:	bd70      	pop	{r4, r5, r6, pc}
 8008cec:	ab01      	add	r3, sp, #4
 8008cee:	466a      	mov	r2, sp
 8008cf0:	f7ff ffca 	bl	8008c88 <__swhatbuf_r>
 8008cf4:	9900      	ldr	r1, [sp, #0]
 8008cf6:	4605      	mov	r5, r0
 8008cf8:	4630      	mov	r0, r6
 8008cfa:	f000 fb73 	bl	80093e4 <_malloc_r>
 8008cfe:	b948      	cbnz	r0, 8008d14 <__smakebuf_r+0x44>
 8008d00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d04:	059a      	lsls	r2, r3, #22
 8008d06:	d4ef      	bmi.n	8008ce8 <__smakebuf_r+0x18>
 8008d08:	f023 0303 	bic.w	r3, r3, #3
 8008d0c:	f043 0302 	orr.w	r3, r3, #2
 8008d10:	81a3      	strh	r3, [r4, #12]
 8008d12:	e7e3      	b.n	8008cdc <__smakebuf_r+0xc>
 8008d14:	4b0d      	ldr	r3, [pc, #52]	; (8008d4c <__smakebuf_r+0x7c>)
 8008d16:	62b3      	str	r3, [r6, #40]	; 0x28
 8008d18:	89a3      	ldrh	r3, [r4, #12]
 8008d1a:	6020      	str	r0, [r4, #0]
 8008d1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d20:	81a3      	strh	r3, [r4, #12]
 8008d22:	9b00      	ldr	r3, [sp, #0]
 8008d24:	6163      	str	r3, [r4, #20]
 8008d26:	9b01      	ldr	r3, [sp, #4]
 8008d28:	6120      	str	r0, [r4, #16]
 8008d2a:	b15b      	cbz	r3, 8008d44 <__smakebuf_r+0x74>
 8008d2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d30:	4630      	mov	r0, r6
 8008d32:	f000 fd79 	bl	8009828 <_isatty_r>
 8008d36:	b128      	cbz	r0, 8008d44 <__smakebuf_r+0x74>
 8008d38:	89a3      	ldrh	r3, [r4, #12]
 8008d3a:	f023 0303 	bic.w	r3, r3, #3
 8008d3e:	f043 0301 	orr.w	r3, r3, #1
 8008d42:	81a3      	strh	r3, [r4, #12]
 8008d44:	89a3      	ldrh	r3, [r4, #12]
 8008d46:	431d      	orrs	r5, r3
 8008d48:	81a5      	strh	r5, [r4, #12]
 8008d4a:	e7cd      	b.n	8008ce8 <__smakebuf_r+0x18>
 8008d4c:	08008b21 	.word	0x08008b21

08008d50 <malloc>:
 8008d50:	4b02      	ldr	r3, [pc, #8]	; (8008d5c <malloc+0xc>)
 8008d52:	4601      	mov	r1, r0
 8008d54:	6818      	ldr	r0, [r3, #0]
 8008d56:	f000 bb45 	b.w	80093e4 <_malloc_r>
 8008d5a:	bf00      	nop
 8008d5c:	20000014 	.word	0x20000014

08008d60 <memcpy>:
 8008d60:	b510      	push	{r4, lr}
 8008d62:	1e43      	subs	r3, r0, #1
 8008d64:	440a      	add	r2, r1
 8008d66:	4291      	cmp	r1, r2
 8008d68:	d100      	bne.n	8008d6c <memcpy+0xc>
 8008d6a:	bd10      	pop	{r4, pc}
 8008d6c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d70:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d74:	e7f7      	b.n	8008d66 <memcpy+0x6>

08008d76 <_Balloc>:
 8008d76:	b570      	push	{r4, r5, r6, lr}
 8008d78:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008d7a:	4604      	mov	r4, r0
 8008d7c:	460e      	mov	r6, r1
 8008d7e:	b93d      	cbnz	r5, 8008d90 <_Balloc+0x1a>
 8008d80:	2010      	movs	r0, #16
 8008d82:	f7ff ffe5 	bl	8008d50 <malloc>
 8008d86:	6260      	str	r0, [r4, #36]	; 0x24
 8008d88:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008d8c:	6005      	str	r5, [r0, #0]
 8008d8e:	60c5      	str	r5, [r0, #12]
 8008d90:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008d92:	68eb      	ldr	r3, [r5, #12]
 8008d94:	b183      	cbz	r3, 8008db8 <_Balloc+0x42>
 8008d96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d98:	68db      	ldr	r3, [r3, #12]
 8008d9a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008d9e:	b9b8      	cbnz	r0, 8008dd0 <_Balloc+0x5a>
 8008da0:	2101      	movs	r1, #1
 8008da2:	fa01 f506 	lsl.w	r5, r1, r6
 8008da6:	1d6a      	adds	r2, r5, #5
 8008da8:	0092      	lsls	r2, r2, #2
 8008daa:	4620      	mov	r0, r4
 8008dac:	f000 fabe 	bl	800932c <_calloc_r>
 8008db0:	b160      	cbz	r0, 8008dcc <_Balloc+0x56>
 8008db2:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8008db6:	e00e      	b.n	8008dd6 <_Balloc+0x60>
 8008db8:	2221      	movs	r2, #33	; 0x21
 8008dba:	2104      	movs	r1, #4
 8008dbc:	4620      	mov	r0, r4
 8008dbe:	f000 fab5 	bl	800932c <_calloc_r>
 8008dc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008dc4:	60e8      	str	r0, [r5, #12]
 8008dc6:	68db      	ldr	r3, [r3, #12]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d1e4      	bne.n	8008d96 <_Balloc+0x20>
 8008dcc:	2000      	movs	r0, #0
 8008dce:	bd70      	pop	{r4, r5, r6, pc}
 8008dd0:	6802      	ldr	r2, [r0, #0]
 8008dd2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008ddc:	e7f7      	b.n	8008dce <_Balloc+0x58>

08008dde <_Bfree>:
 8008dde:	b570      	push	{r4, r5, r6, lr}
 8008de0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008de2:	4606      	mov	r6, r0
 8008de4:	460d      	mov	r5, r1
 8008de6:	b93c      	cbnz	r4, 8008df8 <_Bfree+0x1a>
 8008de8:	2010      	movs	r0, #16
 8008dea:	f7ff ffb1 	bl	8008d50 <malloc>
 8008dee:	6270      	str	r0, [r6, #36]	; 0x24
 8008df0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008df4:	6004      	str	r4, [r0, #0]
 8008df6:	60c4      	str	r4, [r0, #12]
 8008df8:	b13d      	cbz	r5, 8008e0a <_Bfree+0x2c>
 8008dfa:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008dfc:	686a      	ldr	r2, [r5, #4]
 8008dfe:	68db      	ldr	r3, [r3, #12]
 8008e00:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008e04:	6029      	str	r1, [r5, #0]
 8008e06:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008e0a:	bd70      	pop	{r4, r5, r6, pc}

08008e0c <__multadd>:
 8008e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e10:	690d      	ldr	r5, [r1, #16]
 8008e12:	461f      	mov	r7, r3
 8008e14:	4606      	mov	r6, r0
 8008e16:	460c      	mov	r4, r1
 8008e18:	f101 0c14 	add.w	ip, r1, #20
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	f8dc 0000 	ldr.w	r0, [ip]
 8008e22:	b281      	uxth	r1, r0
 8008e24:	fb02 7101 	mla	r1, r2, r1, r7
 8008e28:	0c0f      	lsrs	r7, r1, #16
 8008e2a:	0c00      	lsrs	r0, r0, #16
 8008e2c:	fb02 7000 	mla	r0, r2, r0, r7
 8008e30:	b289      	uxth	r1, r1
 8008e32:	3301      	adds	r3, #1
 8008e34:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008e38:	429d      	cmp	r5, r3
 8008e3a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008e3e:	f84c 1b04 	str.w	r1, [ip], #4
 8008e42:	dcec      	bgt.n	8008e1e <__multadd+0x12>
 8008e44:	b1d7      	cbz	r7, 8008e7c <__multadd+0x70>
 8008e46:	68a3      	ldr	r3, [r4, #8]
 8008e48:	42ab      	cmp	r3, r5
 8008e4a:	dc12      	bgt.n	8008e72 <__multadd+0x66>
 8008e4c:	6861      	ldr	r1, [r4, #4]
 8008e4e:	4630      	mov	r0, r6
 8008e50:	3101      	adds	r1, #1
 8008e52:	f7ff ff90 	bl	8008d76 <_Balloc>
 8008e56:	6922      	ldr	r2, [r4, #16]
 8008e58:	3202      	adds	r2, #2
 8008e5a:	f104 010c 	add.w	r1, r4, #12
 8008e5e:	4680      	mov	r8, r0
 8008e60:	0092      	lsls	r2, r2, #2
 8008e62:	300c      	adds	r0, #12
 8008e64:	f7ff ff7c 	bl	8008d60 <memcpy>
 8008e68:	4621      	mov	r1, r4
 8008e6a:	4630      	mov	r0, r6
 8008e6c:	f7ff ffb7 	bl	8008dde <_Bfree>
 8008e70:	4644      	mov	r4, r8
 8008e72:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008e76:	3501      	adds	r5, #1
 8008e78:	615f      	str	r7, [r3, #20]
 8008e7a:	6125      	str	r5, [r4, #16]
 8008e7c:	4620      	mov	r0, r4
 8008e7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008e82 <__hi0bits>:
 8008e82:	0c02      	lsrs	r2, r0, #16
 8008e84:	0412      	lsls	r2, r2, #16
 8008e86:	4603      	mov	r3, r0
 8008e88:	b9b2      	cbnz	r2, 8008eb8 <__hi0bits+0x36>
 8008e8a:	0403      	lsls	r3, r0, #16
 8008e8c:	2010      	movs	r0, #16
 8008e8e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008e92:	bf04      	itt	eq
 8008e94:	021b      	lsleq	r3, r3, #8
 8008e96:	3008      	addeq	r0, #8
 8008e98:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008e9c:	bf04      	itt	eq
 8008e9e:	011b      	lsleq	r3, r3, #4
 8008ea0:	3004      	addeq	r0, #4
 8008ea2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008ea6:	bf04      	itt	eq
 8008ea8:	009b      	lsleq	r3, r3, #2
 8008eaa:	3002      	addeq	r0, #2
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	db06      	blt.n	8008ebe <__hi0bits+0x3c>
 8008eb0:	005b      	lsls	r3, r3, #1
 8008eb2:	d503      	bpl.n	8008ebc <__hi0bits+0x3a>
 8008eb4:	3001      	adds	r0, #1
 8008eb6:	4770      	bx	lr
 8008eb8:	2000      	movs	r0, #0
 8008eba:	e7e8      	b.n	8008e8e <__hi0bits+0xc>
 8008ebc:	2020      	movs	r0, #32
 8008ebe:	4770      	bx	lr

08008ec0 <__lo0bits>:
 8008ec0:	6803      	ldr	r3, [r0, #0]
 8008ec2:	f013 0207 	ands.w	r2, r3, #7
 8008ec6:	4601      	mov	r1, r0
 8008ec8:	d00b      	beq.n	8008ee2 <__lo0bits+0x22>
 8008eca:	07da      	lsls	r2, r3, #31
 8008ecc:	d423      	bmi.n	8008f16 <__lo0bits+0x56>
 8008ece:	0798      	lsls	r0, r3, #30
 8008ed0:	bf49      	itett	mi
 8008ed2:	085b      	lsrmi	r3, r3, #1
 8008ed4:	089b      	lsrpl	r3, r3, #2
 8008ed6:	2001      	movmi	r0, #1
 8008ed8:	600b      	strmi	r3, [r1, #0]
 8008eda:	bf5c      	itt	pl
 8008edc:	600b      	strpl	r3, [r1, #0]
 8008ede:	2002      	movpl	r0, #2
 8008ee0:	4770      	bx	lr
 8008ee2:	b298      	uxth	r0, r3
 8008ee4:	b9a8      	cbnz	r0, 8008f12 <__lo0bits+0x52>
 8008ee6:	0c1b      	lsrs	r3, r3, #16
 8008ee8:	2010      	movs	r0, #16
 8008eea:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008eee:	bf04      	itt	eq
 8008ef0:	0a1b      	lsreq	r3, r3, #8
 8008ef2:	3008      	addeq	r0, #8
 8008ef4:	071a      	lsls	r2, r3, #28
 8008ef6:	bf04      	itt	eq
 8008ef8:	091b      	lsreq	r3, r3, #4
 8008efa:	3004      	addeq	r0, #4
 8008efc:	079a      	lsls	r2, r3, #30
 8008efe:	bf04      	itt	eq
 8008f00:	089b      	lsreq	r3, r3, #2
 8008f02:	3002      	addeq	r0, #2
 8008f04:	07da      	lsls	r2, r3, #31
 8008f06:	d402      	bmi.n	8008f0e <__lo0bits+0x4e>
 8008f08:	085b      	lsrs	r3, r3, #1
 8008f0a:	d006      	beq.n	8008f1a <__lo0bits+0x5a>
 8008f0c:	3001      	adds	r0, #1
 8008f0e:	600b      	str	r3, [r1, #0]
 8008f10:	4770      	bx	lr
 8008f12:	4610      	mov	r0, r2
 8008f14:	e7e9      	b.n	8008eea <__lo0bits+0x2a>
 8008f16:	2000      	movs	r0, #0
 8008f18:	4770      	bx	lr
 8008f1a:	2020      	movs	r0, #32
 8008f1c:	4770      	bx	lr

08008f1e <__i2b>:
 8008f1e:	b510      	push	{r4, lr}
 8008f20:	460c      	mov	r4, r1
 8008f22:	2101      	movs	r1, #1
 8008f24:	f7ff ff27 	bl	8008d76 <_Balloc>
 8008f28:	2201      	movs	r2, #1
 8008f2a:	6144      	str	r4, [r0, #20]
 8008f2c:	6102      	str	r2, [r0, #16]
 8008f2e:	bd10      	pop	{r4, pc}

08008f30 <__multiply>:
 8008f30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f34:	4614      	mov	r4, r2
 8008f36:	690a      	ldr	r2, [r1, #16]
 8008f38:	6923      	ldr	r3, [r4, #16]
 8008f3a:	429a      	cmp	r2, r3
 8008f3c:	bfb8      	it	lt
 8008f3e:	460b      	movlt	r3, r1
 8008f40:	4688      	mov	r8, r1
 8008f42:	bfbc      	itt	lt
 8008f44:	46a0      	movlt	r8, r4
 8008f46:	461c      	movlt	r4, r3
 8008f48:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008f4c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008f50:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008f54:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008f58:	eb07 0609 	add.w	r6, r7, r9
 8008f5c:	42b3      	cmp	r3, r6
 8008f5e:	bfb8      	it	lt
 8008f60:	3101      	addlt	r1, #1
 8008f62:	f7ff ff08 	bl	8008d76 <_Balloc>
 8008f66:	f100 0514 	add.w	r5, r0, #20
 8008f6a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8008f6e:	462b      	mov	r3, r5
 8008f70:	2200      	movs	r2, #0
 8008f72:	4573      	cmp	r3, lr
 8008f74:	d316      	bcc.n	8008fa4 <__multiply+0x74>
 8008f76:	f104 0214 	add.w	r2, r4, #20
 8008f7a:	f108 0114 	add.w	r1, r8, #20
 8008f7e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8008f82:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8008f86:	9300      	str	r3, [sp, #0]
 8008f88:	9b00      	ldr	r3, [sp, #0]
 8008f8a:	9201      	str	r2, [sp, #4]
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d80c      	bhi.n	8008faa <__multiply+0x7a>
 8008f90:	2e00      	cmp	r6, #0
 8008f92:	dd03      	ble.n	8008f9c <__multiply+0x6c>
 8008f94:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d05d      	beq.n	8009058 <__multiply+0x128>
 8008f9c:	6106      	str	r6, [r0, #16]
 8008f9e:	b003      	add	sp, #12
 8008fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fa4:	f843 2b04 	str.w	r2, [r3], #4
 8008fa8:	e7e3      	b.n	8008f72 <__multiply+0x42>
 8008faa:	f8b2 b000 	ldrh.w	fp, [r2]
 8008fae:	f1bb 0f00 	cmp.w	fp, #0
 8008fb2:	d023      	beq.n	8008ffc <__multiply+0xcc>
 8008fb4:	4689      	mov	r9, r1
 8008fb6:	46ac      	mov	ip, r5
 8008fb8:	f04f 0800 	mov.w	r8, #0
 8008fbc:	f859 4b04 	ldr.w	r4, [r9], #4
 8008fc0:	f8dc a000 	ldr.w	sl, [ip]
 8008fc4:	b2a3      	uxth	r3, r4
 8008fc6:	fa1f fa8a 	uxth.w	sl, sl
 8008fca:	fb0b a303 	mla	r3, fp, r3, sl
 8008fce:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008fd2:	f8dc 4000 	ldr.w	r4, [ip]
 8008fd6:	4443      	add	r3, r8
 8008fd8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008fdc:	fb0b 840a 	mla	r4, fp, sl, r8
 8008fe0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8008fe4:	46e2      	mov	sl, ip
 8008fe6:	b29b      	uxth	r3, r3
 8008fe8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008fec:	454f      	cmp	r7, r9
 8008fee:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008ff2:	f84a 3b04 	str.w	r3, [sl], #4
 8008ff6:	d82b      	bhi.n	8009050 <__multiply+0x120>
 8008ff8:	f8cc 8004 	str.w	r8, [ip, #4]
 8008ffc:	9b01      	ldr	r3, [sp, #4]
 8008ffe:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009002:	3204      	adds	r2, #4
 8009004:	f1ba 0f00 	cmp.w	sl, #0
 8009008:	d020      	beq.n	800904c <__multiply+0x11c>
 800900a:	682b      	ldr	r3, [r5, #0]
 800900c:	4689      	mov	r9, r1
 800900e:	46a8      	mov	r8, r5
 8009010:	f04f 0b00 	mov.w	fp, #0
 8009014:	f8b9 c000 	ldrh.w	ip, [r9]
 8009018:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800901c:	fb0a 440c 	mla	r4, sl, ip, r4
 8009020:	445c      	add	r4, fp
 8009022:	46c4      	mov	ip, r8
 8009024:	b29b      	uxth	r3, r3
 8009026:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800902a:	f84c 3b04 	str.w	r3, [ip], #4
 800902e:	f859 3b04 	ldr.w	r3, [r9], #4
 8009032:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8009036:	0c1b      	lsrs	r3, r3, #16
 8009038:	fb0a b303 	mla	r3, sl, r3, fp
 800903c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009040:	454f      	cmp	r7, r9
 8009042:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8009046:	d805      	bhi.n	8009054 <__multiply+0x124>
 8009048:	f8c8 3004 	str.w	r3, [r8, #4]
 800904c:	3504      	adds	r5, #4
 800904e:	e79b      	b.n	8008f88 <__multiply+0x58>
 8009050:	46d4      	mov	ip, sl
 8009052:	e7b3      	b.n	8008fbc <__multiply+0x8c>
 8009054:	46e0      	mov	r8, ip
 8009056:	e7dd      	b.n	8009014 <__multiply+0xe4>
 8009058:	3e01      	subs	r6, #1
 800905a:	e799      	b.n	8008f90 <__multiply+0x60>

0800905c <__pow5mult>:
 800905c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009060:	4615      	mov	r5, r2
 8009062:	f012 0203 	ands.w	r2, r2, #3
 8009066:	4606      	mov	r6, r0
 8009068:	460f      	mov	r7, r1
 800906a:	d007      	beq.n	800907c <__pow5mult+0x20>
 800906c:	3a01      	subs	r2, #1
 800906e:	4c21      	ldr	r4, [pc, #132]	; (80090f4 <__pow5mult+0x98>)
 8009070:	2300      	movs	r3, #0
 8009072:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009076:	f7ff fec9 	bl	8008e0c <__multadd>
 800907a:	4607      	mov	r7, r0
 800907c:	10ad      	asrs	r5, r5, #2
 800907e:	d035      	beq.n	80090ec <__pow5mult+0x90>
 8009080:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009082:	b93c      	cbnz	r4, 8009094 <__pow5mult+0x38>
 8009084:	2010      	movs	r0, #16
 8009086:	f7ff fe63 	bl	8008d50 <malloc>
 800908a:	6270      	str	r0, [r6, #36]	; 0x24
 800908c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009090:	6004      	str	r4, [r0, #0]
 8009092:	60c4      	str	r4, [r0, #12]
 8009094:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009098:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800909c:	b94c      	cbnz	r4, 80090b2 <__pow5mult+0x56>
 800909e:	f240 2171 	movw	r1, #625	; 0x271
 80090a2:	4630      	mov	r0, r6
 80090a4:	f7ff ff3b 	bl	8008f1e <__i2b>
 80090a8:	2300      	movs	r3, #0
 80090aa:	f8c8 0008 	str.w	r0, [r8, #8]
 80090ae:	4604      	mov	r4, r0
 80090b0:	6003      	str	r3, [r0, #0]
 80090b2:	f04f 0800 	mov.w	r8, #0
 80090b6:	07eb      	lsls	r3, r5, #31
 80090b8:	d50a      	bpl.n	80090d0 <__pow5mult+0x74>
 80090ba:	4639      	mov	r1, r7
 80090bc:	4622      	mov	r2, r4
 80090be:	4630      	mov	r0, r6
 80090c0:	f7ff ff36 	bl	8008f30 <__multiply>
 80090c4:	4639      	mov	r1, r7
 80090c6:	4681      	mov	r9, r0
 80090c8:	4630      	mov	r0, r6
 80090ca:	f7ff fe88 	bl	8008dde <_Bfree>
 80090ce:	464f      	mov	r7, r9
 80090d0:	106d      	asrs	r5, r5, #1
 80090d2:	d00b      	beq.n	80090ec <__pow5mult+0x90>
 80090d4:	6820      	ldr	r0, [r4, #0]
 80090d6:	b938      	cbnz	r0, 80090e8 <__pow5mult+0x8c>
 80090d8:	4622      	mov	r2, r4
 80090da:	4621      	mov	r1, r4
 80090dc:	4630      	mov	r0, r6
 80090de:	f7ff ff27 	bl	8008f30 <__multiply>
 80090e2:	6020      	str	r0, [r4, #0]
 80090e4:	f8c0 8000 	str.w	r8, [r0]
 80090e8:	4604      	mov	r4, r0
 80090ea:	e7e4      	b.n	80090b6 <__pow5mult+0x5a>
 80090ec:	4638      	mov	r0, r7
 80090ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090f2:	bf00      	nop
 80090f4:	08009ad0 	.word	0x08009ad0

080090f8 <__lshift>:
 80090f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090fc:	460c      	mov	r4, r1
 80090fe:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009102:	6923      	ldr	r3, [r4, #16]
 8009104:	6849      	ldr	r1, [r1, #4]
 8009106:	eb0a 0903 	add.w	r9, sl, r3
 800910a:	68a3      	ldr	r3, [r4, #8]
 800910c:	4607      	mov	r7, r0
 800910e:	4616      	mov	r6, r2
 8009110:	f109 0501 	add.w	r5, r9, #1
 8009114:	42ab      	cmp	r3, r5
 8009116:	db32      	blt.n	800917e <__lshift+0x86>
 8009118:	4638      	mov	r0, r7
 800911a:	f7ff fe2c 	bl	8008d76 <_Balloc>
 800911e:	2300      	movs	r3, #0
 8009120:	4680      	mov	r8, r0
 8009122:	f100 0114 	add.w	r1, r0, #20
 8009126:	461a      	mov	r2, r3
 8009128:	4553      	cmp	r3, sl
 800912a:	db2b      	blt.n	8009184 <__lshift+0x8c>
 800912c:	6920      	ldr	r0, [r4, #16]
 800912e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009132:	f104 0314 	add.w	r3, r4, #20
 8009136:	f016 021f 	ands.w	r2, r6, #31
 800913a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800913e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009142:	d025      	beq.n	8009190 <__lshift+0x98>
 8009144:	f1c2 0e20 	rsb	lr, r2, #32
 8009148:	2000      	movs	r0, #0
 800914a:	681e      	ldr	r6, [r3, #0]
 800914c:	468a      	mov	sl, r1
 800914e:	4096      	lsls	r6, r2
 8009150:	4330      	orrs	r0, r6
 8009152:	f84a 0b04 	str.w	r0, [sl], #4
 8009156:	f853 0b04 	ldr.w	r0, [r3], #4
 800915a:	459c      	cmp	ip, r3
 800915c:	fa20 f00e 	lsr.w	r0, r0, lr
 8009160:	d814      	bhi.n	800918c <__lshift+0x94>
 8009162:	6048      	str	r0, [r1, #4]
 8009164:	b108      	cbz	r0, 800916a <__lshift+0x72>
 8009166:	f109 0502 	add.w	r5, r9, #2
 800916a:	3d01      	subs	r5, #1
 800916c:	4638      	mov	r0, r7
 800916e:	f8c8 5010 	str.w	r5, [r8, #16]
 8009172:	4621      	mov	r1, r4
 8009174:	f7ff fe33 	bl	8008dde <_Bfree>
 8009178:	4640      	mov	r0, r8
 800917a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800917e:	3101      	adds	r1, #1
 8009180:	005b      	lsls	r3, r3, #1
 8009182:	e7c7      	b.n	8009114 <__lshift+0x1c>
 8009184:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009188:	3301      	adds	r3, #1
 800918a:	e7cd      	b.n	8009128 <__lshift+0x30>
 800918c:	4651      	mov	r1, sl
 800918e:	e7dc      	b.n	800914a <__lshift+0x52>
 8009190:	3904      	subs	r1, #4
 8009192:	f853 2b04 	ldr.w	r2, [r3], #4
 8009196:	f841 2f04 	str.w	r2, [r1, #4]!
 800919a:	459c      	cmp	ip, r3
 800919c:	d8f9      	bhi.n	8009192 <__lshift+0x9a>
 800919e:	e7e4      	b.n	800916a <__lshift+0x72>

080091a0 <__mcmp>:
 80091a0:	6903      	ldr	r3, [r0, #16]
 80091a2:	690a      	ldr	r2, [r1, #16]
 80091a4:	1a9b      	subs	r3, r3, r2
 80091a6:	b530      	push	{r4, r5, lr}
 80091a8:	d10c      	bne.n	80091c4 <__mcmp+0x24>
 80091aa:	0092      	lsls	r2, r2, #2
 80091ac:	3014      	adds	r0, #20
 80091ae:	3114      	adds	r1, #20
 80091b0:	1884      	adds	r4, r0, r2
 80091b2:	4411      	add	r1, r2
 80091b4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80091b8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80091bc:	4295      	cmp	r5, r2
 80091be:	d003      	beq.n	80091c8 <__mcmp+0x28>
 80091c0:	d305      	bcc.n	80091ce <__mcmp+0x2e>
 80091c2:	2301      	movs	r3, #1
 80091c4:	4618      	mov	r0, r3
 80091c6:	bd30      	pop	{r4, r5, pc}
 80091c8:	42a0      	cmp	r0, r4
 80091ca:	d3f3      	bcc.n	80091b4 <__mcmp+0x14>
 80091cc:	e7fa      	b.n	80091c4 <__mcmp+0x24>
 80091ce:	f04f 33ff 	mov.w	r3, #4294967295
 80091d2:	e7f7      	b.n	80091c4 <__mcmp+0x24>

080091d4 <__mdiff>:
 80091d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091d8:	460d      	mov	r5, r1
 80091da:	4607      	mov	r7, r0
 80091dc:	4611      	mov	r1, r2
 80091de:	4628      	mov	r0, r5
 80091e0:	4614      	mov	r4, r2
 80091e2:	f7ff ffdd 	bl	80091a0 <__mcmp>
 80091e6:	1e06      	subs	r6, r0, #0
 80091e8:	d108      	bne.n	80091fc <__mdiff+0x28>
 80091ea:	4631      	mov	r1, r6
 80091ec:	4638      	mov	r0, r7
 80091ee:	f7ff fdc2 	bl	8008d76 <_Balloc>
 80091f2:	2301      	movs	r3, #1
 80091f4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80091f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091fc:	bfa4      	itt	ge
 80091fe:	4623      	movge	r3, r4
 8009200:	462c      	movge	r4, r5
 8009202:	4638      	mov	r0, r7
 8009204:	6861      	ldr	r1, [r4, #4]
 8009206:	bfa6      	itte	ge
 8009208:	461d      	movge	r5, r3
 800920a:	2600      	movge	r6, #0
 800920c:	2601      	movlt	r6, #1
 800920e:	f7ff fdb2 	bl	8008d76 <_Balloc>
 8009212:	692b      	ldr	r3, [r5, #16]
 8009214:	60c6      	str	r6, [r0, #12]
 8009216:	6926      	ldr	r6, [r4, #16]
 8009218:	f105 0914 	add.w	r9, r5, #20
 800921c:	f104 0214 	add.w	r2, r4, #20
 8009220:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009224:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009228:	f100 0514 	add.w	r5, r0, #20
 800922c:	f04f 0e00 	mov.w	lr, #0
 8009230:	f852 ab04 	ldr.w	sl, [r2], #4
 8009234:	f859 4b04 	ldr.w	r4, [r9], #4
 8009238:	fa1e f18a 	uxtah	r1, lr, sl
 800923c:	b2a3      	uxth	r3, r4
 800923e:	1ac9      	subs	r1, r1, r3
 8009240:	0c23      	lsrs	r3, r4, #16
 8009242:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8009246:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800924a:	b289      	uxth	r1, r1
 800924c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009250:	45c8      	cmp	r8, r9
 8009252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009256:	4694      	mov	ip, r2
 8009258:	f845 3b04 	str.w	r3, [r5], #4
 800925c:	d8e8      	bhi.n	8009230 <__mdiff+0x5c>
 800925e:	45bc      	cmp	ip, r7
 8009260:	d304      	bcc.n	800926c <__mdiff+0x98>
 8009262:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8009266:	b183      	cbz	r3, 800928a <__mdiff+0xb6>
 8009268:	6106      	str	r6, [r0, #16]
 800926a:	e7c5      	b.n	80091f8 <__mdiff+0x24>
 800926c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009270:	fa1e f381 	uxtah	r3, lr, r1
 8009274:	141a      	asrs	r2, r3, #16
 8009276:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800927a:	b29b      	uxth	r3, r3
 800927c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009280:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8009284:	f845 3b04 	str.w	r3, [r5], #4
 8009288:	e7e9      	b.n	800925e <__mdiff+0x8a>
 800928a:	3e01      	subs	r6, #1
 800928c:	e7e9      	b.n	8009262 <__mdiff+0x8e>

0800928e <__d2b>:
 800928e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009292:	460e      	mov	r6, r1
 8009294:	2101      	movs	r1, #1
 8009296:	ec59 8b10 	vmov	r8, r9, d0
 800929a:	4615      	mov	r5, r2
 800929c:	f7ff fd6b 	bl	8008d76 <_Balloc>
 80092a0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80092a4:	4607      	mov	r7, r0
 80092a6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80092aa:	bb34      	cbnz	r4, 80092fa <__d2b+0x6c>
 80092ac:	9301      	str	r3, [sp, #4]
 80092ae:	f1b8 0300 	subs.w	r3, r8, #0
 80092b2:	d027      	beq.n	8009304 <__d2b+0x76>
 80092b4:	a802      	add	r0, sp, #8
 80092b6:	f840 3d08 	str.w	r3, [r0, #-8]!
 80092ba:	f7ff fe01 	bl	8008ec0 <__lo0bits>
 80092be:	9900      	ldr	r1, [sp, #0]
 80092c0:	b1f0      	cbz	r0, 8009300 <__d2b+0x72>
 80092c2:	9a01      	ldr	r2, [sp, #4]
 80092c4:	f1c0 0320 	rsb	r3, r0, #32
 80092c8:	fa02 f303 	lsl.w	r3, r2, r3
 80092cc:	430b      	orrs	r3, r1
 80092ce:	40c2      	lsrs	r2, r0
 80092d0:	617b      	str	r3, [r7, #20]
 80092d2:	9201      	str	r2, [sp, #4]
 80092d4:	9b01      	ldr	r3, [sp, #4]
 80092d6:	61bb      	str	r3, [r7, #24]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	bf14      	ite	ne
 80092dc:	2102      	movne	r1, #2
 80092de:	2101      	moveq	r1, #1
 80092e0:	6139      	str	r1, [r7, #16]
 80092e2:	b1c4      	cbz	r4, 8009316 <__d2b+0x88>
 80092e4:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80092e8:	4404      	add	r4, r0
 80092ea:	6034      	str	r4, [r6, #0]
 80092ec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80092f0:	6028      	str	r0, [r5, #0]
 80092f2:	4638      	mov	r0, r7
 80092f4:	b003      	add	sp, #12
 80092f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80092fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80092fe:	e7d5      	b.n	80092ac <__d2b+0x1e>
 8009300:	6179      	str	r1, [r7, #20]
 8009302:	e7e7      	b.n	80092d4 <__d2b+0x46>
 8009304:	a801      	add	r0, sp, #4
 8009306:	f7ff fddb 	bl	8008ec0 <__lo0bits>
 800930a:	9b01      	ldr	r3, [sp, #4]
 800930c:	617b      	str	r3, [r7, #20]
 800930e:	2101      	movs	r1, #1
 8009310:	6139      	str	r1, [r7, #16]
 8009312:	3020      	adds	r0, #32
 8009314:	e7e5      	b.n	80092e2 <__d2b+0x54>
 8009316:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800931a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800931e:	6030      	str	r0, [r6, #0]
 8009320:	6918      	ldr	r0, [r3, #16]
 8009322:	f7ff fdae 	bl	8008e82 <__hi0bits>
 8009326:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800932a:	e7e1      	b.n	80092f0 <__d2b+0x62>

0800932c <_calloc_r>:
 800932c:	b538      	push	{r3, r4, r5, lr}
 800932e:	fb02 f401 	mul.w	r4, r2, r1
 8009332:	4621      	mov	r1, r4
 8009334:	f000 f856 	bl	80093e4 <_malloc_r>
 8009338:	4605      	mov	r5, r0
 800933a:	b118      	cbz	r0, 8009344 <_calloc_r+0x18>
 800933c:	4622      	mov	r2, r4
 800933e:	2100      	movs	r1, #0
 8009340:	f7fd fe7e 	bl	8007040 <memset>
 8009344:	4628      	mov	r0, r5
 8009346:	bd38      	pop	{r3, r4, r5, pc}

08009348 <_free_r>:
 8009348:	b538      	push	{r3, r4, r5, lr}
 800934a:	4605      	mov	r5, r0
 800934c:	2900      	cmp	r1, #0
 800934e:	d045      	beq.n	80093dc <_free_r+0x94>
 8009350:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009354:	1f0c      	subs	r4, r1, #4
 8009356:	2b00      	cmp	r3, #0
 8009358:	bfb8      	it	lt
 800935a:	18e4      	addlt	r4, r4, r3
 800935c:	f000 fa98 	bl	8009890 <__malloc_lock>
 8009360:	4a1f      	ldr	r2, [pc, #124]	; (80093e0 <_free_r+0x98>)
 8009362:	6813      	ldr	r3, [r2, #0]
 8009364:	4610      	mov	r0, r2
 8009366:	b933      	cbnz	r3, 8009376 <_free_r+0x2e>
 8009368:	6063      	str	r3, [r4, #4]
 800936a:	6014      	str	r4, [r2, #0]
 800936c:	4628      	mov	r0, r5
 800936e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009372:	f000 ba8e 	b.w	8009892 <__malloc_unlock>
 8009376:	42a3      	cmp	r3, r4
 8009378:	d90c      	bls.n	8009394 <_free_r+0x4c>
 800937a:	6821      	ldr	r1, [r4, #0]
 800937c:	1862      	adds	r2, r4, r1
 800937e:	4293      	cmp	r3, r2
 8009380:	bf04      	itt	eq
 8009382:	681a      	ldreq	r2, [r3, #0]
 8009384:	685b      	ldreq	r3, [r3, #4]
 8009386:	6063      	str	r3, [r4, #4]
 8009388:	bf04      	itt	eq
 800938a:	1852      	addeq	r2, r2, r1
 800938c:	6022      	streq	r2, [r4, #0]
 800938e:	6004      	str	r4, [r0, #0]
 8009390:	e7ec      	b.n	800936c <_free_r+0x24>
 8009392:	4613      	mov	r3, r2
 8009394:	685a      	ldr	r2, [r3, #4]
 8009396:	b10a      	cbz	r2, 800939c <_free_r+0x54>
 8009398:	42a2      	cmp	r2, r4
 800939a:	d9fa      	bls.n	8009392 <_free_r+0x4a>
 800939c:	6819      	ldr	r1, [r3, #0]
 800939e:	1858      	adds	r0, r3, r1
 80093a0:	42a0      	cmp	r0, r4
 80093a2:	d10b      	bne.n	80093bc <_free_r+0x74>
 80093a4:	6820      	ldr	r0, [r4, #0]
 80093a6:	4401      	add	r1, r0
 80093a8:	1858      	adds	r0, r3, r1
 80093aa:	4282      	cmp	r2, r0
 80093ac:	6019      	str	r1, [r3, #0]
 80093ae:	d1dd      	bne.n	800936c <_free_r+0x24>
 80093b0:	6810      	ldr	r0, [r2, #0]
 80093b2:	6852      	ldr	r2, [r2, #4]
 80093b4:	605a      	str	r2, [r3, #4]
 80093b6:	4401      	add	r1, r0
 80093b8:	6019      	str	r1, [r3, #0]
 80093ba:	e7d7      	b.n	800936c <_free_r+0x24>
 80093bc:	d902      	bls.n	80093c4 <_free_r+0x7c>
 80093be:	230c      	movs	r3, #12
 80093c0:	602b      	str	r3, [r5, #0]
 80093c2:	e7d3      	b.n	800936c <_free_r+0x24>
 80093c4:	6820      	ldr	r0, [r4, #0]
 80093c6:	1821      	adds	r1, r4, r0
 80093c8:	428a      	cmp	r2, r1
 80093ca:	bf04      	itt	eq
 80093cc:	6811      	ldreq	r1, [r2, #0]
 80093ce:	6852      	ldreq	r2, [r2, #4]
 80093d0:	6062      	str	r2, [r4, #4]
 80093d2:	bf04      	itt	eq
 80093d4:	1809      	addeq	r1, r1, r0
 80093d6:	6021      	streq	r1, [r4, #0]
 80093d8:	605c      	str	r4, [r3, #4]
 80093da:	e7c7      	b.n	800936c <_free_r+0x24>
 80093dc:	bd38      	pop	{r3, r4, r5, pc}
 80093de:	bf00      	nop
 80093e0:	2000021c 	.word	0x2000021c

080093e4 <_malloc_r>:
 80093e4:	b570      	push	{r4, r5, r6, lr}
 80093e6:	1ccd      	adds	r5, r1, #3
 80093e8:	f025 0503 	bic.w	r5, r5, #3
 80093ec:	3508      	adds	r5, #8
 80093ee:	2d0c      	cmp	r5, #12
 80093f0:	bf38      	it	cc
 80093f2:	250c      	movcc	r5, #12
 80093f4:	2d00      	cmp	r5, #0
 80093f6:	4606      	mov	r6, r0
 80093f8:	db01      	blt.n	80093fe <_malloc_r+0x1a>
 80093fa:	42a9      	cmp	r1, r5
 80093fc:	d903      	bls.n	8009406 <_malloc_r+0x22>
 80093fe:	230c      	movs	r3, #12
 8009400:	6033      	str	r3, [r6, #0]
 8009402:	2000      	movs	r0, #0
 8009404:	bd70      	pop	{r4, r5, r6, pc}
 8009406:	f000 fa43 	bl	8009890 <__malloc_lock>
 800940a:	4a21      	ldr	r2, [pc, #132]	; (8009490 <_malloc_r+0xac>)
 800940c:	6814      	ldr	r4, [r2, #0]
 800940e:	4621      	mov	r1, r4
 8009410:	b991      	cbnz	r1, 8009438 <_malloc_r+0x54>
 8009412:	4c20      	ldr	r4, [pc, #128]	; (8009494 <_malloc_r+0xb0>)
 8009414:	6823      	ldr	r3, [r4, #0]
 8009416:	b91b      	cbnz	r3, 8009420 <_malloc_r+0x3c>
 8009418:	4630      	mov	r0, r6
 800941a:	f000 f97d 	bl	8009718 <_sbrk_r>
 800941e:	6020      	str	r0, [r4, #0]
 8009420:	4629      	mov	r1, r5
 8009422:	4630      	mov	r0, r6
 8009424:	f000 f978 	bl	8009718 <_sbrk_r>
 8009428:	1c43      	adds	r3, r0, #1
 800942a:	d124      	bne.n	8009476 <_malloc_r+0x92>
 800942c:	230c      	movs	r3, #12
 800942e:	6033      	str	r3, [r6, #0]
 8009430:	4630      	mov	r0, r6
 8009432:	f000 fa2e 	bl	8009892 <__malloc_unlock>
 8009436:	e7e4      	b.n	8009402 <_malloc_r+0x1e>
 8009438:	680b      	ldr	r3, [r1, #0]
 800943a:	1b5b      	subs	r3, r3, r5
 800943c:	d418      	bmi.n	8009470 <_malloc_r+0x8c>
 800943e:	2b0b      	cmp	r3, #11
 8009440:	d90f      	bls.n	8009462 <_malloc_r+0x7e>
 8009442:	600b      	str	r3, [r1, #0]
 8009444:	50cd      	str	r5, [r1, r3]
 8009446:	18cc      	adds	r4, r1, r3
 8009448:	4630      	mov	r0, r6
 800944a:	f000 fa22 	bl	8009892 <__malloc_unlock>
 800944e:	f104 000b 	add.w	r0, r4, #11
 8009452:	1d23      	adds	r3, r4, #4
 8009454:	f020 0007 	bic.w	r0, r0, #7
 8009458:	1ac3      	subs	r3, r0, r3
 800945a:	d0d3      	beq.n	8009404 <_malloc_r+0x20>
 800945c:	425a      	negs	r2, r3
 800945e:	50e2      	str	r2, [r4, r3]
 8009460:	e7d0      	b.n	8009404 <_malloc_r+0x20>
 8009462:	428c      	cmp	r4, r1
 8009464:	684b      	ldr	r3, [r1, #4]
 8009466:	bf16      	itet	ne
 8009468:	6063      	strne	r3, [r4, #4]
 800946a:	6013      	streq	r3, [r2, #0]
 800946c:	460c      	movne	r4, r1
 800946e:	e7eb      	b.n	8009448 <_malloc_r+0x64>
 8009470:	460c      	mov	r4, r1
 8009472:	6849      	ldr	r1, [r1, #4]
 8009474:	e7cc      	b.n	8009410 <_malloc_r+0x2c>
 8009476:	1cc4      	adds	r4, r0, #3
 8009478:	f024 0403 	bic.w	r4, r4, #3
 800947c:	42a0      	cmp	r0, r4
 800947e:	d005      	beq.n	800948c <_malloc_r+0xa8>
 8009480:	1a21      	subs	r1, r4, r0
 8009482:	4630      	mov	r0, r6
 8009484:	f000 f948 	bl	8009718 <_sbrk_r>
 8009488:	3001      	adds	r0, #1
 800948a:	d0cf      	beq.n	800942c <_malloc_r+0x48>
 800948c:	6025      	str	r5, [r4, #0]
 800948e:	e7db      	b.n	8009448 <_malloc_r+0x64>
 8009490:	2000021c 	.word	0x2000021c
 8009494:	20000220 	.word	0x20000220

08009498 <__sfputc_r>:
 8009498:	6893      	ldr	r3, [r2, #8]
 800949a:	3b01      	subs	r3, #1
 800949c:	2b00      	cmp	r3, #0
 800949e:	b410      	push	{r4}
 80094a0:	6093      	str	r3, [r2, #8]
 80094a2:	da08      	bge.n	80094b6 <__sfputc_r+0x1e>
 80094a4:	6994      	ldr	r4, [r2, #24]
 80094a6:	42a3      	cmp	r3, r4
 80094a8:	db01      	blt.n	80094ae <__sfputc_r+0x16>
 80094aa:	290a      	cmp	r1, #10
 80094ac:	d103      	bne.n	80094b6 <__sfputc_r+0x1e>
 80094ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80094b2:	f7fe bb5b 	b.w	8007b6c <__swbuf_r>
 80094b6:	6813      	ldr	r3, [r2, #0]
 80094b8:	1c58      	adds	r0, r3, #1
 80094ba:	6010      	str	r0, [r2, #0]
 80094bc:	7019      	strb	r1, [r3, #0]
 80094be:	4608      	mov	r0, r1
 80094c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80094c4:	4770      	bx	lr

080094c6 <__sfputs_r>:
 80094c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094c8:	4606      	mov	r6, r0
 80094ca:	460f      	mov	r7, r1
 80094cc:	4614      	mov	r4, r2
 80094ce:	18d5      	adds	r5, r2, r3
 80094d0:	42ac      	cmp	r4, r5
 80094d2:	d101      	bne.n	80094d8 <__sfputs_r+0x12>
 80094d4:	2000      	movs	r0, #0
 80094d6:	e007      	b.n	80094e8 <__sfputs_r+0x22>
 80094d8:	463a      	mov	r2, r7
 80094da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094de:	4630      	mov	r0, r6
 80094e0:	f7ff ffda 	bl	8009498 <__sfputc_r>
 80094e4:	1c43      	adds	r3, r0, #1
 80094e6:	d1f3      	bne.n	80094d0 <__sfputs_r+0xa>
 80094e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080094ec <_vfiprintf_r>:
 80094ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094f0:	460c      	mov	r4, r1
 80094f2:	b09d      	sub	sp, #116	; 0x74
 80094f4:	4617      	mov	r7, r2
 80094f6:	461d      	mov	r5, r3
 80094f8:	4606      	mov	r6, r0
 80094fa:	b118      	cbz	r0, 8009504 <_vfiprintf_r+0x18>
 80094fc:	6983      	ldr	r3, [r0, #24]
 80094fe:	b90b      	cbnz	r3, 8009504 <_vfiprintf_r+0x18>
 8009500:	f7ff fb2a 	bl	8008b58 <__sinit>
 8009504:	4b7c      	ldr	r3, [pc, #496]	; (80096f8 <_vfiprintf_r+0x20c>)
 8009506:	429c      	cmp	r4, r3
 8009508:	d158      	bne.n	80095bc <_vfiprintf_r+0xd0>
 800950a:	6874      	ldr	r4, [r6, #4]
 800950c:	89a3      	ldrh	r3, [r4, #12]
 800950e:	0718      	lsls	r0, r3, #28
 8009510:	d55e      	bpl.n	80095d0 <_vfiprintf_r+0xe4>
 8009512:	6923      	ldr	r3, [r4, #16]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d05b      	beq.n	80095d0 <_vfiprintf_r+0xe4>
 8009518:	2300      	movs	r3, #0
 800951a:	9309      	str	r3, [sp, #36]	; 0x24
 800951c:	2320      	movs	r3, #32
 800951e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009522:	2330      	movs	r3, #48	; 0x30
 8009524:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009528:	9503      	str	r5, [sp, #12]
 800952a:	f04f 0b01 	mov.w	fp, #1
 800952e:	46b8      	mov	r8, r7
 8009530:	4645      	mov	r5, r8
 8009532:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009536:	b10b      	cbz	r3, 800953c <_vfiprintf_r+0x50>
 8009538:	2b25      	cmp	r3, #37	; 0x25
 800953a:	d154      	bne.n	80095e6 <_vfiprintf_r+0xfa>
 800953c:	ebb8 0a07 	subs.w	sl, r8, r7
 8009540:	d00b      	beq.n	800955a <_vfiprintf_r+0x6e>
 8009542:	4653      	mov	r3, sl
 8009544:	463a      	mov	r2, r7
 8009546:	4621      	mov	r1, r4
 8009548:	4630      	mov	r0, r6
 800954a:	f7ff ffbc 	bl	80094c6 <__sfputs_r>
 800954e:	3001      	adds	r0, #1
 8009550:	f000 80c2 	beq.w	80096d8 <_vfiprintf_r+0x1ec>
 8009554:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009556:	4453      	add	r3, sl
 8009558:	9309      	str	r3, [sp, #36]	; 0x24
 800955a:	f898 3000 	ldrb.w	r3, [r8]
 800955e:	2b00      	cmp	r3, #0
 8009560:	f000 80ba 	beq.w	80096d8 <_vfiprintf_r+0x1ec>
 8009564:	2300      	movs	r3, #0
 8009566:	f04f 32ff 	mov.w	r2, #4294967295
 800956a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800956e:	9304      	str	r3, [sp, #16]
 8009570:	9307      	str	r3, [sp, #28]
 8009572:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009576:	931a      	str	r3, [sp, #104]	; 0x68
 8009578:	46a8      	mov	r8, r5
 800957a:	2205      	movs	r2, #5
 800957c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8009580:	485e      	ldr	r0, [pc, #376]	; (80096fc <_vfiprintf_r+0x210>)
 8009582:	f7f6 fe2d 	bl	80001e0 <memchr>
 8009586:	9b04      	ldr	r3, [sp, #16]
 8009588:	bb78      	cbnz	r0, 80095ea <_vfiprintf_r+0xfe>
 800958a:	06d9      	lsls	r1, r3, #27
 800958c:	bf44      	itt	mi
 800958e:	2220      	movmi	r2, #32
 8009590:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009594:	071a      	lsls	r2, r3, #28
 8009596:	bf44      	itt	mi
 8009598:	222b      	movmi	r2, #43	; 0x2b
 800959a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800959e:	782a      	ldrb	r2, [r5, #0]
 80095a0:	2a2a      	cmp	r2, #42	; 0x2a
 80095a2:	d02a      	beq.n	80095fa <_vfiprintf_r+0x10e>
 80095a4:	9a07      	ldr	r2, [sp, #28]
 80095a6:	46a8      	mov	r8, r5
 80095a8:	2000      	movs	r0, #0
 80095aa:	250a      	movs	r5, #10
 80095ac:	4641      	mov	r1, r8
 80095ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80095b2:	3b30      	subs	r3, #48	; 0x30
 80095b4:	2b09      	cmp	r3, #9
 80095b6:	d969      	bls.n	800968c <_vfiprintf_r+0x1a0>
 80095b8:	b360      	cbz	r0, 8009614 <_vfiprintf_r+0x128>
 80095ba:	e024      	b.n	8009606 <_vfiprintf_r+0x11a>
 80095bc:	4b50      	ldr	r3, [pc, #320]	; (8009700 <_vfiprintf_r+0x214>)
 80095be:	429c      	cmp	r4, r3
 80095c0:	d101      	bne.n	80095c6 <_vfiprintf_r+0xda>
 80095c2:	68b4      	ldr	r4, [r6, #8]
 80095c4:	e7a2      	b.n	800950c <_vfiprintf_r+0x20>
 80095c6:	4b4f      	ldr	r3, [pc, #316]	; (8009704 <_vfiprintf_r+0x218>)
 80095c8:	429c      	cmp	r4, r3
 80095ca:	bf08      	it	eq
 80095cc:	68f4      	ldreq	r4, [r6, #12]
 80095ce:	e79d      	b.n	800950c <_vfiprintf_r+0x20>
 80095d0:	4621      	mov	r1, r4
 80095d2:	4630      	mov	r0, r6
 80095d4:	f7fe fb1c 	bl	8007c10 <__swsetup_r>
 80095d8:	2800      	cmp	r0, #0
 80095da:	d09d      	beq.n	8009518 <_vfiprintf_r+0x2c>
 80095dc:	f04f 30ff 	mov.w	r0, #4294967295
 80095e0:	b01d      	add	sp, #116	; 0x74
 80095e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095e6:	46a8      	mov	r8, r5
 80095e8:	e7a2      	b.n	8009530 <_vfiprintf_r+0x44>
 80095ea:	4a44      	ldr	r2, [pc, #272]	; (80096fc <_vfiprintf_r+0x210>)
 80095ec:	1a80      	subs	r0, r0, r2
 80095ee:	fa0b f000 	lsl.w	r0, fp, r0
 80095f2:	4318      	orrs	r0, r3
 80095f4:	9004      	str	r0, [sp, #16]
 80095f6:	4645      	mov	r5, r8
 80095f8:	e7be      	b.n	8009578 <_vfiprintf_r+0x8c>
 80095fa:	9a03      	ldr	r2, [sp, #12]
 80095fc:	1d11      	adds	r1, r2, #4
 80095fe:	6812      	ldr	r2, [r2, #0]
 8009600:	9103      	str	r1, [sp, #12]
 8009602:	2a00      	cmp	r2, #0
 8009604:	db01      	blt.n	800960a <_vfiprintf_r+0x11e>
 8009606:	9207      	str	r2, [sp, #28]
 8009608:	e004      	b.n	8009614 <_vfiprintf_r+0x128>
 800960a:	4252      	negs	r2, r2
 800960c:	f043 0302 	orr.w	r3, r3, #2
 8009610:	9207      	str	r2, [sp, #28]
 8009612:	9304      	str	r3, [sp, #16]
 8009614:	f898 3000 	ldrb.w	r3, [r8]
 8009618:	2b2e      	cmp	r3, #46	; 0x2e
 800961a:	d10e      	bne.n	800963a <_vfiprintf_r+0x14e>
 800961c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009620:	2b2a      	cmp	r3, #42	; 0x2a
 8009622:	d138      	bne.n	8009696 <_vfiprintf_r+0x1aa>
 8009624:	9b03      	ldr	r3, [sp, #12]
 8009626:	1d1a      	adds	r2, r3, #4
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	9203      	str	r2, [sp, #12]
 800962c:	2b00      	cmp	r3, #0
 800962e:	bfb8      	it	lt
 8009630:	f04f 33ff 	movlt.w	r3, #4294967295
 8009634:	f108 0802 	add.w	r8, r8, #2
 8009638:	9305      	str	r3, [sp, #20]
 800963a:	4d33      	ldr	r5, [pc, #204]	; (8009708 <_vfiprintf_r+0x21c>)
 800963c:	f898 1000 	ldrb.w	r1, [r8]
 8009640:	2203      	movs	r2, #3
 8009642:	4628      	mov	r0, r5
 8009644:	f7f6 fdcc 	bl	80001e0 <memchr>
 8009648:	b140      	cbz	r0, 800965c <_vfiprintf_r+0x170>
 800964a:	2340      	movs	r3, #64	; 0x40
 800964c:	1b40      	subs	r0, r0, r5
 800964e:	fa03 f000 	lsl.w	r0, r3, r0
 8009652:	9b04      	ldr	r3, [sp, #16]
 8009654:	4303      	orrs	r3, r0
 8009656:	f108 0801 	add.w	r8, r8, #1
 800965a:	9304      	str	r3, [sp, #16]
 800965c:	f898 1000 	ldrb.w	r1, [r8]
 8009660:	482a      	ldr	r0, [pc, #168]	; (800970c <_vfiprintf_r+0x220>)
 8009662:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009666:	2206      	movs	r2, #6
 8009668:	f108 0701 	add.w	r7, r8, #1
 800966c:	f7f6 fdb8 	bl	80001e0 <memchr>
 8009670:	2800      	cmp	r0, #0
 8009672:	d037      	beq.n	80096e4 <_vfiprintf_r+0x1f8>
 8009674:	4b26      	ldr	r3, [pc, #152]	; (8009710 <_vfiprintf_r+0x224>)
 8009676:	bb1b      	cbnz	r3, 80096c0 <_vfiprintf_r+0x1d4>
 8009678:	9b03      	ldr	r3, [sp, #12]
 800967a:	3307      	adds	r3, #7
 800967c:	f023 0307 	bic.w	r3, r3, #7
 8009680:	3308      	adds	r3, #8
 8009682:	9303      	str	r3, [sp, #12]
 8009684:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009686:	444b      	add	r3, r9
 8009688:	9309      	str	r3, [sp, #36]	; 0x24
 800968a:	e750      	b.n	800952e <_vfiprintf_r+0x42>
 800968c:	fb05 3202 	mla	r2, r5, r2, r3
 8009690:	2001      	movs	r0, #1
 8009692:	4688      	mov	r8, r1
 8009694:	e78a      	b.n	80095ac <_vfiprintf_r+0xc0>
 8009696:	2300      	movs	r3, #0
 8009698:	f108 0801 	add.w	r8, r8, #1
 800969c:	9305      	str	r3, [sp, #20]
 800969e:	4619      	mov	r1, r3
 80096a0:	250a      	movs	r5, #10
 80096a2:	4640      	mov	r0, r8
 80096a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096a8:	3a30      	subs	r2, #48	; 0x30
 80096aa:	2a09      	cmp	r2, #9
 80096ac:	d903      	bls.n	80096b6 <_vfiprintf_r+0x1ca>
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d0c3      	beq.n	800963a <_vfiprintf_r+0x14e>
 80096b2:	9105      	str	r1, [sp, #20]
 80096b4:	e7c1      	b.n	800963a <_vfiprintf_r+0x14e>
 80096b6:	fb05 2101 	mla	r1, r5, r1, r2
 80096ba:	2301      	movs	r3, #1
 80096bc:	4680      	mov	r8, r0
 80096be:	e7f0      	b.n	80096a2 <_vfiprintf_r+0x1b6>
 80096c0:	ab03      	add	r3, sp, #12
 80096c2:	9300      	str	r3, [sp, #0]
 80096c4:	4622      	mov	r2, r4
 80096c6:	4b13      	ldr	r3, [pc, #76]	; (8009714 <_vfiprintf_r+0x228>)
 80096c8:	a904      	add	r1, sp, #16
 80096ca:	4630      	mov	r0, r6
 80096cc:	f7fd fd54 	bl	8007178 <_printf_float>
 80096d0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80096d4:	4681      	mov	r9, r0
 80096d6:	d1d5      	bne.n	8009684 <_vfiprintf_r+0x198>
 80096d8:	89a3      	ldrh	r3, [r4, #12]
 80096da:	065b      	lsls	r3, r3, #25
 80096dc:	f53f af7e 	bmi.w	80095dc <_vfiprintf_r+0xf0>
 80096e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80096e2:	e77d      	b.n	80095e0 <_vfiprintf_r+0xf4>
 80096e4:	ab03      	add	r3, sp, #12
 80096e6:	9300      	str	r3, [sp, #0]
 80096e8:	4622      	mov	r2, r4
 80096ea:	4b0a      	ldr	r3, [pc, #40]	; (8009714 <_vfiprintf_r+0x228>)
 80096ec:	a904      	add	r1, sp, #16
 80096ee:	4630      	mov	r0, r6
 80096f0:	f7fd fff8 	bl	80076e4 <_printf_i>
 80096f4:	e7ec      	b.n	80096d0 <_vfiprintf_r+0x1e4>
 80096f6:	bf00      	nop
 80096f8:	080099a0 	.word	0x080099a0
 80096fc:	08009adc 	.word	0x08009adc
 8009700:	080099c0 	.word	0x080099c0
 8009704:	08009980 	.word	0x08009980
 8009708:	08009ae2 	.word	0x08009ae2
 800970c:	08009ae6 	.word	0x08009ae6
 8009710:	08007179 	.word	0x08007179
 8009714:	080094c7 	.word	0x080094c7

08009718 <_sbrk_r>:
 8009718:	b538      	push	{r3, r4, r5, lr}
 800971a:	4c06      	ldr	r4, [pc, #24]	; (8009734 <_sbrk_r+0x1c>)
 800971c:	2300      	movs	r3, #0
 800971e:	4605      	mov	r5, r0
 8009720:	4608      	mov	r0, r1
 8009722:	6023      	str	r3, [r4, #0]
 8009724:	f7f8 fcf0 	bl	8002108 <_sbrk>
 8009728:	1c43      	adds	r3, r0, #1
 800972a:	d102      	bne.n	8009732 <_sbrk_r+0x1a>
 800972c:	6823      	ldr	r3, [r4, #0]
 800972e:	b103      	cbz	r3, 8009732 <_sbrk_r+0x1a>
 8009730:	602b      	str	r3, [r5, #0]
 8009732:	bd38      	pop	{r3, r4, r5, pc}
 8009734:	20000a60 	.word	0x20000a60

08009738 <__sread>:
 8009738:	b510      	push	{r4, lr}
 800973a:	460c      	mov	r4, r1
 800973c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009740:	f000 f8a8 	bl	8009894 <_read_r>
 8009744:	2800      	cmp	r0, #0
 8009746:	bfab      	itete	ge
 8009748:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800974a:	89a3      	ldrhlt	r3, [r4, #12]
 800974c:	181b      	addge	r3, r3, r0
 800974e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009752:	bfac      	ite	ge
 8009754:	6563      	strge	r3, [r4, #84]	; 0x54
 8009756:	81a3      	strhlt	r3, [r4, #12]
 8009758:	bd10      	pop	{r4, pc}

0800975a <__swrite>:
 800975a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800975e:	461f      	mov	r7, r3
 8009760:	898b      	ldrh	r3, [r1, #12]
 8009762:	05db      	lsls	r3, r3, #23
 8009764:	4605      	mov	r5, r0
 8009766:	460c      	mov	r4, r1
 8009768:	4616      	mov	r6, r2
 800976a:	d505      	bpl.n	8009778 <__swrite+0x1e>
 800976c:	2302      	movs	r3, #2
 800976e:	2200      	movs	r2, #0
 8009770:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009774:	f000 f868 	bl	8009848 <_lseek_r>
 8009778:	89a3      	ldrh	r3, [r4, #12]
 800977a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800977e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009782:	81a3      	strh	r3, [r4, #12]
 8009784:	4632      	mov	r2, r6
 8009786:	463b      	mov	r3, r7
 8009788:	4628      	mov	r0, r5
 800978a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800978e:	f000 b817 	b.w	80097c0 <_write_r>

08009792 <__sseek>:
 8009792:	b510      	push	{r4, lr}
 8009794:	460c      	mov	r4, r1
 8009796:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800979a:	f000 f855 	bl	8009848 <_lseek_r>
 800979e:	1c43      	adds	r3, r0, #1
 80097a0:	89a3      	ldrh	r3, [r4, #12]
 80097a2:	bf15      	itete	ne
 80097a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80097a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80097aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80097ae:	81a3      	strheq	r3, [r4, #12]
 80097b0:	bf18      	it	ne
 80097b2:	81a3      	strhne	r3, [r4, #12]
 80097b4:	bd10      	pop	{r4, pc}

080097b6 <__sclose>:
 80097b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097ba:	f000 b813 	b.w	80097e4 <_close_r>
	...

080097c0 <_write_r>:
 80097c0:	b538      	push	{r3, r4, r5, lr}
 80097c2:	4c07      	ldr	r4, [pc, #28]	; (80097e0 <_write_r+0x20>)
 80097c4:	4605      	mov	r5, r0
 80097c6:	4608      	mov	r0, r1
 80097c8:	4611      	mov	r1, r2
 80097ca:	2200      	movs	r2, #0
 80097cc:	6022      	str	r2, [r4, #0]
 80097ce:	461a      	mov	r2, r3
 80097d0:	f7f8 fc49 	bl	8002066 <_write>
 80097d4:	1c43      	adds	r3, r0, #1
 80097d6:	d102      	bne.n	80097de <_write_r+0x1e>
 80097d8:	6823      	ldr	r3, [r4, #0]
 80097da:	b103      	cbz	r3, 80097de <_write_r+0x1e>
 80097dc:	602b      	str	r3, [r5, #0]
 80097de:	bd38      	pop	{r3, r4, r5, pc}
 80097e0:	20000a60 	.word	0x20000a60

080097e4 <_close_r>:
 80097e4:	b538      	push	{r3, r4, r5, lr}
 80097e6:	4c06      	ldr	r4, [pc, #24]	; (8009800 <_close_r+0x1c>)
 80097e8:	2300      	movs	r3, #0
 80097ea:	4605      	mov	r5, r0
 80097ec:	4608      	mov	r0, r1
 80097ee:	6023      	str	r3, [r4, #0]
 80097f0:	f7f8 fc55 	bl	800209e <_close>
 80097f4:	1c43      	adds	r3, r0, #1
 80097f6:	d102      	bne.n	80097fe <_close_r+0x1a>
 80097f8:	6823      	ldr	r3, [r4, #0]
 80097fa:	b103      	cbz	r3, 80097fe <_close_r+0x1a>
 80097fc:	602b      	str	r3, [r5, #0]
 80097fe:	bd38      	pop	{r3, r4, r5, pc}
 8009800:	20000a60 	.word	0x20000a60

08009804 <_fstat_r>:
 8009804:	b538      	push	{r3, r4, r5, lr}
 8009806:	4c07      	ldr	r4, [pc, #28]	; (8009824 <_fstat_r+0x20>)
 8009808:	2300      	movs	r3, #0
 800980a:	4605      	mov	r5, r0
 800980c:	4608      	mov	r0, r1
 800980e:	4611      	mov	r1, r2
 8009810:	6023      	str	r3, [r4, #0]
 8009812:	f7f8 fc50 	bl	80020b6 <_fstat>
 8009816:	1c43      	adds	r3, r0, #1
 8009818:	d102      	bne.n	8009820 <_fstat_r+0x1c>
 800981a:	6823      	ldr	r3, [r4, #0]
 800981c:	b103      	cbz	r3, 8009820 <_fstat_r+0x1c>
 800981e:	602b      	str	r3, [r5, #0]
 8009820:	bd38      	pop	{r3, r4, r5, pc}
 8009822:	bf00      	nop
 8009824:	20000a60 	.word	0x20000a60

08009828 <_isatty_r>:
 8009828:	b538      	push	{r3, r4, r5, lr}
 800982a:	4c06      	ldr	r4, [pc, #24]	; (8009844 <_isatty_r+0x1c>)
 800982c:	2300      	movs	r3, #0
 800982e:	4605      	mov	r5, r0
 8009830:	4608      	mov	r0, r1
 8009832:	6023      	str	r3, [r4, #0]
 8009834:	f7f8 fc4f 	bl	80020d6 <_isatty>
 8009838:	1c43      	adds	r3, r0, #1
 800983a:	d102      	bne.n	8009842 <_isatty_r+0x1a>
 800983c:	6823      	ldr	r3, [r4, #0]
 800983e:	b103      	cbz	r3, 8009842 <_isatty_r+0x1a>
 8009840:	602b      	str	r3, [r5, #0]
 8009842:	bd38      	pop	{r3, r4, r5, pc}
 8009844:	20000a60 	.word	0x20000a60

08009848 <_lseek_r>:
 8009848:	b538      	push	{r3, r4, r5, lr}
 800984a:	4c07      	ldr	r4, [pc, #28]	; (8009868 <_lseek_r+0x20>)
 800984c:	4605      	mov	r5, r0
 800984e:	4608      	mov	r0, r1
 8009850:	4611      	mov	r1, r2
 8009852:	2200      	movs	r2, #0
 8009854:	6022      	str	r2, [r4, #0]
 8009856:	461a      	mov	r2, r3
 8009858:	f7f8 fc48 	bl	80020ec <_lseek>
 800985c:	1c43      	adds	r3, r0, #1
 800985e:	d102      	bne.n	8009866 <_lseek_r+0x1e>
 8009860:	6823      	ldr	r3, [r4, #0]
 8009862:	b103      	cbz	r3, 8009866 <_lseek_r+0x1e>
 8009864:	602b      	str	r3, [r5, #0]
 8009866:	bd38      	pop	{r3, r4, r5, pc}
 8009868:	20000a60 	.word	0x20000a60

0800986c <__ascii_mbtowc>:
 800986c:	b082      	sub	sp, #8
 800986e:	b901      	cbnz	r1, 8009872 <__ascii_mbtowc+0x6>
 8009870:	a901      	add	r1, sp, #4
 8009872:	b142      	cbz	r2, 8009886 <__ascii_mbtowc+0x1a>
 8009874:	b14b      	cbz	r3, 800988a <__ascii_mbtowc+0x1e>
 8009876:	7813      	ldrb	r3, [r2, #0]
 8009878:	600b      	str	r3, [r1, #0]
 800987a:	7812      	ldrb	r2, [r2, #0]
 800987c:	1c10      	adds	r0, r2, #0
 800987e:	bf18      	it	ne
 8009880:	2001      	movne	r0, #1
 8009882:	b002      	add	sp, #8
 8009884:	4770      	bx	lr
 8009886:	4610      	mov	r0, r2
 8009888:	e7fb      	b.n	8009882 <__ascii_mbtowc+0x16>
 800988a:	f06f 0001 	mvn.w	r0, #1
 800988e:	e7f8      	b.n	8009882 <__ascii_mbtowc+0x16>

08009890 <__malloc_lock>:
 8009890:	4770      	bx	lr

08009892 <__malloc_unlock>:
 8009892:	4770      	bx	lr

08009894 <_read_r>:
 8009894:	b538      	push	{r3, r4, r5, lr}
 8009896:	4c07      	ldr	r4, [pc, #28]	; (80098b4 <_read_r+0x20>)
 8009898:	4605      	mov	r5, r0
 800989a:	4608      	mov	r0, r1
 800989c:	4611      	mov	r1, r2
 800989e:	2200      	movs	r2, #0
 80098a0:	6022      	str	r2, [r4, #0]
 80098a2:	461a      	mov	r2, r3
 80098a4:	f7f8 fbc2 	bl	800202c <_read>
 80098a8:	1c43      	adds	r3, r0, #1
 80098aa:	d102      	bne.n	80098b2 <_read_r+0x1e>
 80098ac:	6823      	ldr	r3, [r4, #0]
 80098ae:	b103      	cbz	r3, 80098b2 <_read_r+0x1e>
 80098b0:	602b      	str	r3, [r5, #0]
 80098b2:	bd38      	pop	{r3, r4, r5, pc}
 80098b4:	20000a60 	.word	0x20000a60

080098b8 <__ascii_wctomb>:
 80098b8:	b149      	cbz	r1, 80098ce <__ascii_wctomb+0x16>
 80098ba:	2aff      	cmp	r2, #255	; 0xff
 80098bc:	bf85      	ittet	hi
 80098be:	238a      	movhi	r3, #138	; 0x8a
 80098c0:	6003      	strhi	r3, [r0, #0]
 80098c2:	700a      	strbls	r2, [r1, #0]
 80098c4:	f04f 30ff 	movhi.w	r0, #4294967295
 80098c8:	bf98      	it	ls
 80098ca:	2001      	movls	r0, #1
 80098cc:	4770      	bx	lr
 80098ce:	4608      	mov	r0, r1
 80098d0:	4770      	bx	lr
	...

080098d4 <_init>:
 80098d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098d6:	bf00      	nop
 80098d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098da:	bc08      	pop	{r3}
 80098dc:	469e      	mov	lr, r3
 80098de:	4770      	bx	lr

080098e0 <_fini>:
 80098e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098e2:	bf00      	nop
 80098e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098e6:	bc08      	pop	{r3}
 80098e8:	469e      	mov	lr, r3
 80098ea:	4770      	bx	lr
