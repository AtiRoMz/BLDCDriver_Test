
BLDCDriver_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a6bc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006e8  0800a850  0800a850  0001a850  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af38  0800af38  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800af38  0800af38  0001af38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800af40  0800af40  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af40  0800af40  0001af40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800af44  0800af44  0001af44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800af48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000037e4  200001e8  0800b130  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200039cc  0800b130  000239cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001927a  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003a8e  00000000  00000000  00039492  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012f0  00000000  00000000  0003cf20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001120  00000000  00000000  0003e210  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023962  00000000  00000000  0003f330  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000126f5  00000000  00000000  00062c92  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c7932  00000000  00000000  00075387  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013ccb9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d8c  00000000  00000000  0013cd34  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a834 	.word	0x0800a834

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800a834 	.word	0x0800a834

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b972 	b.w	8000f44 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	4688      	mov	r8, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14b      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4615      	mov	r5, r2
 8000c8a:	d967      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0720 	rsb	r7, r2, #32
 8000c96:	fa01 f302 	lsl.w	r3, r1, r2
 8000c9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c9e:	4095      	lsls	r5, r2
 8000ca0:	ea47 0803 	orr.w	r8, r7, r3
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cb0:	fa1f fc85 	uxth.w	ip, r5
 8000cb4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cb8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18eb      	adds	r3, r5, r3
 8000cc6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cca:	f080 811b 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8118 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000cd4:	3f02      	subs	r7, #2
 8000cd6:	442b      	add	r3, r5
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cec:	45a4      	cmp	ip, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	192c      	adds	r4, r5, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8107 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	f240 8104 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000d00:	3802      	subs	r0, #2
 8000d02:	442c      	add	r4, r5
 8000d04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d08:	eba4 040c 	sub.w	r4, r4, ip
 8000d0c:	2700      	movs	r7, #0
 8000d0e:	b11e      	cbz	r6, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c6 4300 	strd	r4, r3, [r6]
 8000d18:	4639      	mov	r1, r7
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0xbe>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80eb 	beq.w	8000efe <__udivmoddi4+0x286>
 8000d28:	2700      	movs	r7, #0
 8000d2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d2e:	4638      	mov	r0, r7
 8000d30:	4639      	mov	r1, r7
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f783 	clz	r7, r3
 8000d3a:	2f00      	cmp	r7, #0
 8000d3c:	d147      	bne.n	8000dce <__udivmoddi4+0x156>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0xd0>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80fa 	bhi.w	8000f3c <__udivmoddi4+0x2c4>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	4698      	mov	r8, r3
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d0e0      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000d56:	e9c6 4800 	strd	r4, r8, [r6]
 8000d5a:	e7dd      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000d5c:	b902      	cbnz	r2, 8000d60 <__udivmoddi4+0xe8>
 8000d5e:	deff      	udf	#255	; 0xff
 8000d60:	fab2 f282 	clz	r2, r2
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f040 808f 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d6a:	1b49      	subs	r1, r1, r5
 8000d6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d70:	fa1f f885 	uxth.w	r8, r5
 8000d74:	2701      	movs	r7, #1
 8000d76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d7a:	0c23      	lsrs	r3, r4, #16
 8000d7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb08 f10c 	mul.w	r1, r8, ip
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8c:	18eb      	adds	r3, r5, r3
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4299      	cmp	r1, r3
 8000d96:	f200 80cd 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1a59      	subs	r1, r3, r1
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000da8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x14c>
 8000db4:	192c      	adds	r4, r5, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x14a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80b6 	bhi.w	8000f2e <__udivmoddi4+0x2b6>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e79f      	b.n	8000d0e <__udivmoddi4+0x96>
 8000dce:	f1c7 0c20 	rsb	ip, r7, #32
 8000dd2:	40bb      	lsls	r3, r7
 8000dd4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dd8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ddc:	fa01 f407 	lsl.w	r4, r1, r7
 8000de0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000de4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000de8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dec:	4325      	orrs	r5, r4
 8000dee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000df2:	0c2c      	lsrs	r4, r5, #16
 8000df4:	fb08 3319 	mls	r3, r8, r9, r3
 8000df8:	fa1f fa8e 	uxth.w	sl, lr
 8000dfc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e00:	fb09 f40a 	mul.w	r4, r9, sl
 8000e04:	429c      	cmp	r4, r3
 8000e06:	fa02 f207 	lsl.w	r2, r2, r7
 8000e0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1e 0303 	adds.w	r3, lr, r3
 8000e14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e18:	f080 8087 	bcs.w	8000f2a <__udivmoddi4+0x2b2>
 8000e1c:	429c      	cmp	r4, r3
 8000e1e:	f240 8084 	bls.w	8000f2a <__udivmoddi4+0x2b2>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4473      	add	r3, lr
 8000e28:	1b1b      	subs	r3, r3, r4
 8000e2a:	b2ad      	uxth	r5, r5
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e3c:	45a2      	cmp	sl, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1e 0404 	adds.w	r4, lr, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e48:	d26b      	bcs.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4a:	45a2      	cmp	sl, r4
 8000e4c:	d969      	bls.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4474      	add	r4, lr
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5a:	eba4 040a 	sub.w	r4, r4, sl
 8000e5e:	454c      	cmp	r4, r9
 8000e60:	46c2      	mov	sl, r8
 8000e62:	464b      	mov	r3, r9
 8000e64:	d354      	bcc.n	8000f10 <__udivmoddi4+0x298>
 8000e66:	d051      	beq.n	8000f0c <__udivmoddi4+0x294>
 8000e68:	2e00      	cmp	r6, #0
 8000e6a:	d069      	beq.n	8000f40 <__udivmoddi4+0x2c8>
 8000e6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e70:	eb64 0403 	sbc.w	r4, r4, r3
 8000e74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	40fc      	lsrs	r4, r7
 8000e7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e80:	e9c6 5400 	strd	r5, r4, [r6]
 8000e84:	2700      	movs	r7, #0
 8000e86:	e747      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e90:	4095      	lsls	r5, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	fa21 f303 	lsr.w	r3, r1, r3
 8000e9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e9e:	4338      	orrs	r0, r7
 8000ea0:	0c01      	lsrs	r1, r0, #16
 8000ea2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ea6:	fa1f f885 	uxth.w	r8, r5
 8000eaa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb2:	fb07 f308 	mul.w	r3, r7, r8
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ebc:	d907      	bls.n	8000ece <__udivmoddi4+0x256>
 8000ebe:	1869      	adds	r1, r5, r1
 8000ec0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ec4:	d22f      	bcs.n	8000f26 <__udivmoddi4+0x2ae>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d92d      	bls.n	8000f26 <__udivmoddi4+0x2ae>
 8000eca:	3f02      	subs	r7, #2
 8000ecc:	4429      	add	r1, r5
 8000ece:	1acb      	subs	r3, r1, r3
 8000ed0:	b281      	uxth	r1, r0
 8000ed2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ede:	fb00 f308 	mul.w	r3, r0, r8
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x27e>
 8000ee6:	1869      	adds	r1, r5, r1
 8000ee8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eec:	d217      	bcs.n	8000f1e <__udivmoddi4+0x2a6>
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	d915      	bls.n	8000f1e <__udivmoddi4+0x2a6>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	4429      	add	r1, r5
 8000ef6:	1ac9      	subs	r1, r1, r3
 8000ef8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000efc:	e73b      	b.n	8000d76 <__udivmoddi4+0xfe>
 8000efe:	4637      	mov	r7, r6
 8000f00:	4630      	mov	r0, r6
 8000f02:	e709      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f04:	4607      	mov	r7, r0
 8000f06:	e6e7      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f08:	4618      	mov	r0, r3
 8000f0a:	e6fb      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f0c:	4541      	cmp	r1, r8
 8000f0e:	d2ab      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f10:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f14:	eb69 020e 	sbc.w	r2, r9, lr
 8000f18:	3801      	subs	r0, #1
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	e7a4      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f1e:	4660      	mov	r0, ip
 8000f20:	e7e9      	b.n	8000ef6 <__udivmoddi4+0x27e>
 8000f22:	4618      	mov	r0, r3
 8000f24:	e795      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f26:	4667      	mov	r7, ip
 8000f28:	e7d1      	b.n	8000ece <__udivmoddi4+0x256>
 8000f2a:	4681      	mov	r9, r0
 8000f2c:	e77c      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f2e:	3802      	subs	r0, #2
 8000f30:	442c      	add	r4, r5
 8000f32:	e747      	b.n	8000dc4 <__udivmoddi4+0x14c>
 8000f34:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f38:	442b      	add	r3, r5
 8000f3a:	e72f      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	e708      	b.n	8000d52 <__udivmoddi4+0xda>
 8000f40:	4637      	mov	r7, r6
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0xa0>

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f4e:	463b      	mov	r3, r7
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000f5a:	4b30      	ldr	r3, [pc, #192]	; (800101c <MX_ADC1_Init+0xd4>)
 8000f5c:	4a30      	ldr	r2, [pc, #192]	; (8001020 <MX_ADC1_Init+0xd8>)
 8000f5e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000f60:	4b2e      	ldr	r3, [pc, #184]	; (800101c <MX_ADC1_Init+0xd4>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f66:	4b2d      	ldr	r3, [pc, #180]	; (800101c <MX_ADC1_Init+0xd4>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000f6c:	4b2b      	ldr	r3, [pc, #172]	; (800101c <MX_ADC1_Init+0xd4>)
 8000f6e:	2201      	movs	r2, #1
 8000f70:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f72:	4b2a      	ldr	r3, [pc, #168]	; (800101c <MX_ADC1_Init+0xd4>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f78:	4b28      	ldr	r3, [pc, #160]	; (800101c <MX_ADC1_Init+0xd4>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000f80:	4b26      	ldr	r3, [pc, #152]	; (800101c <MX_ADC1_Init+0xd4>)
 8000f82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f86:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 8000f88:	4b24      	ldr	r3, [pc, #144]	; (800101c <MX_ADC1_Init+0xd4>)
 8000f8a:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8000f8e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f90:	4b22      	ldr	r3, [pc, #136]	; (800101c <MX_ADC1_Init+0xd4>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000f96:	4b21      	ldr	r3, [pc, #132]	; (800101c <MX_ADC1_Init+0xd4>)
 8000f98:	2203      	movs	r2, #3
 8000f9a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f9c:	4b1f      	ldr	r3, [pc, #124]	; (800101c <MX_ADC1_Init+0xd4>)
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000fa4:	4b1d      	ldr	r3, [pc, #116]	; (800101c <MX_ADC1_Init+0xd4>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000faa:	481c      	ldr	r0, [pc, #112]	; (800101c <MX_ADC1_Init+0xd4>)
 8000fac:	f001 ffaa 	bl	8002f04 <HAL_ADC_Init>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000fb6:	f001 f8f7 	bl	80021a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000fba:	230a      	movs	r3, #10
 8000fbc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fc6:	463b      	mov	r3, r7
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4814      	ldr	r0, [pc, #80]	; (800101c <MX_ADC1_Init+0xd4>)
 8000fcc:	f002 fa2e 	bl	800342c <HAL_ADC_ConfigChannel>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000fd6:	f001 f8e7 	bl	80021a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000fda:	230b      	movs	r3, #11
 8000fdc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fe2:	463b      	mov	r3, r7
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	480d      	ldr	r0, [pc, #52]	; (800101c <MX_ADC1_Init+0xd4>)
 8000fe8:	f002 fa20 	bl	800342c <HAL_ADC_ConfigChannel>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000ff2:	f001 f8d9 	bl	80021a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000ff6:	230c      	movs	r3, #12
 8000ff8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ffe:	463b      	mov	r3, r7
 8001000:	4619      	mov	r1, r3
 8001002:	4806      	ldr	r0, [pc, #24]	; (800101c <MX_ADC1_Init+0xd4>)
 8001004:	f002 fa12 	bl	800342c <HAL_ADC_ConfigChannel>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 800100e:	f001 f8cb 	bl	80021a8 <Error_Handler>
  }

}
 8001012:	bf00      	nop
 8001014:	3710      	adds	r7, #16
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20000294 	.word	0x20000294
 8001020:	40012000 	.word	0x40012000

08001024 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800102a:	463b      	mov	r3, r7
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc2.Instance = ADC2;
 8001036:	4b21      	ldr	r3, [pc, #132]	; (80010bc <MX_ADC2_Init+0x98>)
 8001038:	4a21      	ldr	r2, [pc, #132]	; (80010c0 <MX_ADC2_Init+0x9c>)
 800103a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800103c:	4b1f      	ldr	r3, [pc, #124]	; (80010bc <MX_ADC2_Init+0x98>)
 800103e:	2200      	movs	r2, #0
 8001040:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001042:	4b1e      	ldr	r3, [pc, #120]	; (80010bc <MX_ADC2_Init+0x98>)
 8001044:	2200      	movs	r2, #0
 8001046:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001048:	4b1c      	ldr	r3, [pc, #112]	; (80010bc <MX_ADC2_Init+0x98>)
 800104a:	2200      	movs	r2, #0
 800104c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800104e:	4b1b      	ldr	r3, [pc, #108]	; (80010bc <MX_ADC2_Init+0x98>)
 8001050:	2200      	movs	r2, #0
 8001052:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001054:	4b19      	ldr	r3, [pc, #100]	; (80010bc <MX_ADC2_Init+0x98>)
 8001056:	2200      	movs	r2, #0
 8001058:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800105c:	4b17      	ldr	r3, [pc, #92]	; (80010bc <MX_ADC2_Init+0x98>)
 800105e:	2200      	movs	r2, #0
 8001060:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001062:	4b16      	ldr	r3, [pc, #88]	; (80010bc <MX_ADC2_Init+0x98>)
 8001064:	4a17      	ldr	r2, [pc, #92]	; (80010c4 <MX_ADC2_Init+0xa0>)
 8001066:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001068:	4b14      	ldr	r3, [pc, #80]	; (80010bc <MX_ADC2_Init+0x98>)
 800106a:	2200      	movs	r2, #0
 800106c:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800106e:	4b13      	ldr	r3, [pc, #76]	; (80010bc <MX_ADC2_Init+0x98>)
 8001070:	2201      	movs	r2, #1
 8001072:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001074:	4b11      	ldr	r3, [pc, #68]	; (80010bc <MX_ADC2_Init+0x98>)
 8001076:	2200      	movs	r2, #0
 8001078:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800107c:	4b0f      	ldr	r3, [pc, #60]	; (80010bc <MX_ADC2_Init+0x98>)
 800107e:	2201      	movs	r2, #1
 8001080:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001082:	480e      	ldr	r0, [pc, #56]	; (80010bc <MX_ADC2_Init+0x98>)
 8001084:	f001 ff3e 	bl	8002f04 <HAL_ADC_Init>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 800108e:	f001 f88b 	bl	80021a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001092:	230d      	movs	r3, #13
 8001094:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001096:	2301      	movs	r3, #1
 8001098:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800109a:	2300      	movs	r3, #0
 800109c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800109e:	463b      	mov	r3, r7
 80010a0:	4619      	mov	r1, r3
 80010a2:	4806      	ldr	r0, [pc, #24]	; (80010bc <MX_ADC2_Init+0x98>)
 80010a4:	f002 f9c2 	bl	800342c <HAL_ADC_ConfigChannel>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80010ae:	f001 f87b 	bl	80021a8 <Error_Handler>
  }

}
 80010b2:	bf00      	nop
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	2000024c 	.word	0x2000024c
 80010c0:	40012100 	.word	0x40012100
 80010c4:	0f000001 	.word	0x0f000001

080010c8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08c      	sub	sp, #48	; 0x30
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d0:	f107 031c 	add.w	r3, r7, #28
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a5b      	ldr	r2, [pc, #364]	; (8001254 <HAL_ADC_MspInit+0x18c>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d160      	bne.n	80011ac <HAL_ADC_MspInit+0xe4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	61bb      	str	r3, [r7, #24]
 80010ee:	4b5a      	ldr	r3, [pc, #360]	; (8001258 <HAL_ADC_MspInit+0x190>)
 80010f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f2:	4a59      	ldr	r2, [pc, #356]	; (8001258 <HAL_ADC_MspInit+0x190>)
 80010f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010f8:	6453      	str	r3, [r2, #68]	; 0x44
 80010fa:	4b57      	ldr	r3, [pc, #348]	; (8001258 <HAL_ADC_MspInit+0x190>)
 80010fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001102:	61bb      	str	r3, [r7, #24]
 8001104:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	617b      	str	r3, [r7, #20]
 800110a:	4b53      	ldr	r3, [pc, #332]	; (8001258 <HAL_ADC_MspInit+0x190>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	4a52      	ldr	r2, [pc, #328]	; (8001258 <HAL_ADC_MspInit+0x190>)
 8001110:	f043 0304 	orr.w	r3, r3, #4
 8001114:	6313      	str	r3, [r2, #48]	; 0x30
 8001116:	4b50      	ldr	r3, [pc, #320]	; (8001258 <HAL_ADC_MspInit+0x190>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	f003 0304 	and.w	r3, r3, #4
 800111e:	617b      	str	r3, [r7, #20]
 8001120:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration    
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001122:	2307      	movs	r3, #7
 8001124:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001126:	2303      	movs	r3, #3
 8001128:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800112e:	f107 031c 	add.w	r3, r7, #28
 8001132:	4619      	mov	r1, r3
 8001134:	4849      	ldr	r0, [pc, #292]	; (800125c <HAL_ADC_MspInit+0x194>)
 8001136:	f003 f8c5 	bl	80042c4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800113a:	4b49      	ldr	r3, [pc, #292]	; (8001260 <HAL_ADC_MspInit+0x198>)
 800113c:	4a49      	ldr	r2, [pc, #292]	; (8001264 <HAL_ADC_MspInit+0x19c>)
 800113e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001140:	4b47      	ldr	r3, [pc, #284]	; (8001260 <HAL_ADC_MspInit+0x198>)
 8001142:	2200      	movs	r2, #0
 8001144:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001146:	4b46      	ldr	r3, [pc, #280]	; (8001260 <HAL_ADC_MspInit+0x198>)
 8001148:	2200      	movs	r2, #0
 800114a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800114c:	4b44      	ldr	r3, [pc, #272]	; (8001260 <HAL_ADC_MspInit+0x198>)
 800114e:	2200      	movs	r2, #0
 8001150:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001152:	4b43      	ldr	r3, [pc, #268]	; (8001260 <HAL_ADC_MspInit+0x198>)
 8001154:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001158:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800115a:	4b41      	ldr	r3, [pc, #260]	; (8001260 <HAL_ADC_MspInit+0x198>)
 800115c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001160:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001162:	4b3f      	ldr	r3, [pc, #252]	; (8001260 <HAL_ADC_MspInit+0x198>)
 8001164:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001168:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800116a:	4b3d      	ldr	r3, [pc, #244]	; (8001260 <HAL_ADC_MspInit+0x198>)
 800116c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001170:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001172:	4b3b      	ldr	r3, [pc, #236]	; (8001260 <HAL_ADC_MspInit+0x198>)
 8001174:	2200      	movs	r2, #0
 8001176:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001178:	4b39      	ldr	r3, [pc, #228]	; (8001260 <HAL_ADC_MspInit+0x198>)
 800117a:	2200      	movs	r2, #0
 800117c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800117e:	4838      	ldr	r0, [pc, #224]	; (8001260 <HAL_ADC_MspInit+0x198>)
 8001180:	f002 fd10 	bl	8003ba4 <HAL_DMA_Init>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800118a:	f001 f80d 	bl	80021a8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a33      	ldr	r2, [pc, #204]	; (8001260 <HAL_ADC_MspInit+0x198>)
 8001192:	639a      	str	r2, [r3, #56]	; 0x38
 8001194:	4a32      	ldr	r2, [pc, #200]	; (8001260 <HAL_ADC_MspInit+0x198>)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800119a:	2200      	movs	r2, #0
 800119c:	2100      	movs	r1, #0
 800119e:	2012      	movs	r0, #18
 80011a0:	f002 fcc9 	bl	8003b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80011a4:	2012      	movs	r0, #18
 80011a6:	f002 fce2 	bl	8003b6e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80011aa:	e04e      	b.n	800124a <HAL_ADC_MspInit+0x182>
  else if(adcHandle->Instance==ADC2)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a2d      	ldr	r2, [pc, #180]	; (8001268 <HAL_ADC_MspInit+0x1a0>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d149      	bne.n	800124a <HAL_ADC_MspInit+0x182>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	613b      	str	r3, [r7, #16]
 80011ba:	4b27      	ldr	r3, [pc, #156]	; (8001258 <HAL_ADC_MspInit+0x190>)
 80011bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011be:	4a26      	ldr	r2, [pc, #152]	; (8001258 <HAL_ADC_MspInit+0x190>)
 80011c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011c4:	6453      	str	r3, [r2, #68]	; 0x44
 80011c6:	4b24      	ldr	r3, [pc, #144]	; (8001258 <HAL_ADC_MspInit+0x190>)
 80011c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011ce:	613b      	str	r3, [r7, #16]
 80011d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	60fb      	str	r3, [r7, #12]
 80011d6:	4b20      	ldr	r3, [pc, #128]	; (8001258 <HAL_ADC_MspInit+0x190>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	4a1f      	ldr	r2, [pc, #124]	; (8001258 <HAL_ADC_MspInit+0x190>)
 80011dc:	f043 0304 	orr.w	r3, r3, #4
 80011e0:	6313      	str	r3, [r2, #48]	; 0x30
 80011e2:	4b1d      	ldr	r3, [pc, #116]	; (8001258 <HAL_ADC_MspInit+0x190>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	f003 0304 	and.w	r3, r3, #4
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	60bb      	str	r3, [r7, #8]
 80011f2:	4b19      	ldr	r3, [pc, #100]	; (8001258 <HAL_ADC_MspInit+0x190>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	4a18      	ldr	r2, [pc, #96]	; (8001258 <HAL_ADC_MspInit+0x190>)
 80011f8:	f043 0301 	orr.w	r3, r3, #1
 80011fc:	6313      	str	r3, [r2, #48]	; 0x30
 80011fe:	4b16      	ldr	r3, [pc, #88]	; (8001258 <HAL_ADC_MspInit+0x190>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	60bb      	str	r3, [r7, #8]
 8001208:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800120a:	2308      	movs	r3, #8
 800120c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800120e:	2303      	movs	r3, #3
 8001210:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001216:	f107 031c 	add.w	r3, r7, #28
 800121a:	4619      	mov	r1, r3
 800121c:	480f      	ldr	r0, [pc, #60]	; (800125c <HAL_ADC_MspInit+0x194>)
 800121e:	f003 f851 	bl	80042c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001222:	2307      	movs	r3, #7
 8001224:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001226:	2303      	movs	r3, #3
 8001228:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122e:	f107 031c 	add.w	r3, r7, #28
 8001232:	4619      	mov	r1, r3
 8001234:	480d      	ldr	r0, [pc, #52]	; (800126c <HAL_ADC_MspInit+0x1a4>)
 8001236:	f003 f845 	bl	80042c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800123a:	2200      	movs	r2, #0
 800123c:	2100      	movs	r1, #0
 800123e:	2012      	movs	r0, #18
 8001240:	f002 fc79 	bl	8003b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001244:	2012      	movs	r0, #18
 8001246:	f002 fc92 	bl	8003b6e <HAL_NVIC_EnableIRQ>
}
 800124a:	bf00      	nop
 800124c:	3730      	adds	r7, #48	; 0x30
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40012000 	.word	0x40012000
 8001258:	40023800 	.word	0x40023800
 800125c:	40020800 	.word	0x40020800
 8001260:	200002dc 	.word	0x200002dc
 8001264:	40026410 	.word	0x40026410
 8001268:	40012100 	.word	0x40012100
 800126c:	40020000 	.word	0x40020000

08001270 <AS5147Read>:
/*
 * Read Register
 * @param	address : AS5147 regigster address
 * @return	16 bit data
 */
uint16_t AS5147Read(uint16_t address) {
 8001270:	b580      	push	{r7, lr}
 8001272:	b086      	sub	sp, #24
 8001274:	af02      	add	r7, sp, #8
 8001276:	4603      	mov	r3, r0
 8001278:	80fb      	strh	r3, [r7, #6]
	uint8_t txdata[2] = {((AS5147AddParityBit(address | 0x4000) & 0xFF00) >> 8), (AS5147AddParityBit(address | 0x4000) & 0x00FF)};
 800127a:	88fb      	ldrh	r3, [r7, #6]
 800127c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001280:	b29b      	uxth	r3, r3
 8001282:	4618      	mov	r0, r3
 8001284:	f000 f844 	bl	8001310 <AS5147AddParityBit>
 8001288:	4603      	mov	r3, r0
 800128a:	121b      	asrs	r3, r3, #8
 800128c:	b2db      	uxtb	r3, r3
 800128e:	733b      	strb	r3, [r7, #12]
 8001290:	88fb      	ldrh	r3, [r7, #6]
 8001292:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001296:	b29b      	uxth	r3, r3
 8001298:	4618      	mov	r0, r3
 800129a:	f000 f839 	bl	8001310 <AS5147AddParityBit>
 800129e:	4603      	mov	r3, r0
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	737b      	strb	r3, [r7, #13]
	uint8_t rxdata[2] = {};
 80012a4:	2300      	movs	r3, #0
 80012a6:	813b      	strh	r3, [r7, #8]
	AS5147Select();
 80012a8:	f000 f81a 	bl	80012e0 <AS5147Select>
	HAL_SPI_TransmitReceive(&AS5147_SPI_HANDLER, txdata, rxdata, 2, 1);
 80012ac:	f107 0208 	add.w	r2, r7, #8
 80012b0:	f107 010c 	add.w	r1, r7, #12
 80012b4:	2301      	movs	r3, #1
 80012b6:	9300      	str	r3, [sp, #0]
 80012b8:	2302      	movs	r3, #2
 80012ba:	4808      	ldr	r0, [pc, #32]	; (80012dc <AS5147Read+0x6c>)
 80012bc:	f003 fe88 	bl	8004fd0 <HAL_SPI_TransmitReceive>
	AS5147Deselect();
 80012c0:	f000 f81a 	bl	80012f8 <AS5147Deselect>
	return ((rxdata[0] << 8) | rxdata[1]);
 80012c4:	7a3b      	ldrb	r3, [r7, #8]
 80012c6:	021b      	lsls	r3, r3, #8
 80012c8:	b21a      	sxth	r2, r3
 80012ca:	7a7b      	ldrb	r3, [r7, #9]
 80012cc:	b21b      	sxth	r3, r3
 80012ce:	4313      	orrs	r3, r2
 80012d0:	b21b      	sxth	r3, r3
 80012d2:	b29b      	uxth	r3, r3
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3710      	adds	r7, #16
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	20003688 	.word	0x20003688

080012e0 <AS5147Select>:
/*
 * Select
 * @param
 * @return
 */
static void AS5147Select(void) {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(AS5147_CS_PORT, AS5147_CS_PIN, GPIO_PIN_RESET);
 80012e4:	2200      	movs	r2, #0
 80012e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012ea:	4802      	ldr	r0, [pc, #8]	; (80012f4 <AS5147Select+0x14>)
 80012ec:	f003 f99c 	bl	8004628 <HAL_GPIO_WritePin>
}
 80012f0:	bf00      	nop
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	40020000 	.word	0x40020000

080012f8 <AS5147Deselect>:
/*
 * Deselect
 * @param
 * @return
 */
static void AS5147Deselect(void) {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(AS5147_CS_PORT, AS5147_CS_PIN, GPIO_PIN_SET);
 80012fc:	2201      	movs	r2, #1
 80012fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001302:	4802      	ldr	r0, [pc, #8]	; (800130c <AS5147Deselect+0x14>)
 8001304:	f003 f990 	bl	8004628 <HAL_GPIO_WritePin>
}
 8001308:	bf00      	nop
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40020000 	.word	0x40020000

08001310 <AS5147AddParityBit>:
/*
 * Parity Calculation
 * @param	raw_data
 * @return	parity bit + raw_data
 */
static uint16_t AS5147AddParityBit(uint16_t raw_data) {
 8001310:	b480      	push	{r7}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	80fb      	strh	r3, [r7, #6]
	uint16_t parity = raw_data;
 800131a:	88fb      	ldrh	r3, [r7, #6]
 800131c:	81fb      	strh	r3, [r7, #14]
	parity ^= parity >> 8;
 800131e:	89fb      	ldrh	r3, [r7, #14]
 8001320:	0a1b      	lsrs	r3, r3, #8
 8001322:	b29a      	uxth	r2, r3
 8001324:	89fb      	ldrh	r3, [r7, #14]
 8001326:	4053      	eors	r3, r2
 8001328:	81fb      	strh	r3, [r7, #14]
	parity ^= parity >> 4;
 800132a:	89fb      	ldrh	r3, [r7, #14]
 800132c:	091b      	lsrs	r3, r3, #4
 800132e:	b29a      	uxth	r2, r3
 8001330:	89fb      	ldrh	r3, [r7, #14]
 8001332:	4053      	eors	r3, r2
 8001334:	81fb      	strh	r3, [r7, #14]
	parity ^= parity >> 2;
 8001336:	89fb      	ldrh	r3, [r7, #14]
 8001338:	089b      	lsrs	r3, r3, #2
 800133a:	b29a      	uxth	r2, r3
 800133c:	89fb      	ldrh	r3, [r7, #14]
 800133e:	4053      	eors	r3, r2
 8001340:	81fb      	strh	r3, [r7, #14]
	parity ^= parity >> 1;
 8001342:	89fb      	ldrh	r3, [r7, #14]
 8001344:	085b      	lsrs	r3, r3, #1
 8001346:	b29a      	uxth	r2, r3
 8001348:	89fb      	ldrh	r3, [r7, #14]
 800134a:	4053      	eors	r3, r2
 800134c:	81fb      	strh	r3, [r7, #14]

	return (raw_data | ((parity & 0x0001) << 15));
 800134e:	89fb      	ldrh	r3, [r7, #14]
 8001350:	03db      	lsls	r3, r3, #15
 8001352:	b21a      	sxth	r2, r3
 8001354:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001358:	4313      	orrs	r3, r2
 800135a:	b21b      	sxth	r3, r3
 800135c:	b29b      	uxth	r3, r3
}
 800135e:	4618      	mov	r0, r3
 8001360:	3714      	adds	r7, #20
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	0000      	movs	r0, r0
 800136c:	0000      	movs	r0, r0
	...

08001370 <BLDCVqConstControl>:

//static variables
static uint16_t curt_sense_data[ADC_CURT_SENSE_BUFFER_SIZE] = {};
static uint32_t curt_sense_data_offset[ADC_CURT_SENSE_BUFFER_SIZE] = {};

void BLDCVqConstControl(float vol_d, float vol_q) {
 8001370:	b5b0      	push	{r4, r5, r7, lr}
 8001372:	b08e      	sub	sp, #56	; 0x38
 8001374:	af00      	add	r7, sp, #0
 8001376:	ed87 0a01 	vstr	s0, [r7, #4]
 800137a:	edc7 0a00 	vstr	s1, [r7]
	float curt_alpha, curt_beta; 	//I_alpha, I_beta current[A]
    float curt_d, curt_q;			//Id, Iq current[A]

    static volatile float vol_u, vol_v, vol_w, vol_max;
    static volatile float vol_alpha, vol_beta;
    const float pwm_max = __HAL_TIM_GET_AUTORELOAD(&htim8);
 800137e:	4be2      	ldr	r3, [pc, #904]	; (8001708 <BLDCVqConstControl+0x398>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001384:	ee07 3a90 	vmov	s15, r3
 8001388:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800138c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

    float theta, sinth, costh;
	uint16_t theta_data;

	theta_data = (AS5147Read(AS5147_ANGLECOM) & 0x3FFF);		//mask lower 14bit
 8001390:	f643 70ff 	movw	r0, #16383	; 0x3fff
 8001394:	f7ff ff6c 	bl	8001270 <AS5147Read>
 8001398:	4603      	mov	r3, r0
 800139a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800139e:	867b      	strh	r3, [r7, #50]	; 0x32
	theta = fmodf(((float)theta_data + ((float)0x3FFF / 12) - 361), ((float)0x3FFF / 12)) * ((float)(2 * M_PI * 12) / 0x3FFF);
 80013a0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80013a2:	ee07 3a90 	vmov	s15, r3
 80013a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013aa:	ed9f 7ad8 	vldr	s14, [pc, #864]	; 800170c <BLDCVqConstControl+0x39c>
 80013ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80013b2:	ed9f 7ad7 	vldr	s14, [pc, #860]	; 8001710 <BLDCVqConstControl+0x3a0>
 80013b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80013ba:	eddf 0ad4 	vldr	s1, [pc, #848]	; 800170c <BLDCVqConstControl+0x39c>
 80013be:	eeb0 0a67 	vmov.f32	s0, s15
 80013c2:	f008 fc47 	bl	8009c54 <fmodf>
 80013c6:	eeb0 7a40 	vmov.f32	s14, s0
 80013ca:	eddf 7ad2 	vldr	s15, [pc, #840]	; 8001714 <BLDCVqConstControl+0x3a4>
 80013ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013d2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	sinth = sinf(theta);
 80013d6:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 80013da:	f008 fbf9 	bl	8009bd0 <sinf>
 80013de:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
	costh = cosf(theta);
 80013e2:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 80013e6:	f008 fb61 	bl	8009aac <cosf>
 80013ea:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24

	//current control
	curt_u = (1.65f - ((float)curt_sense_data[0] - curt_sense_data_offset[0]) * 3.3f / 4096.0f) * 12.5f;
 80013ee:	4bca      	ldr	r3, [pc, #808]	; (8001718 <BLDCVqConstControl+0x3a8>)
 80013f0:	881b      	ldrh	r3, [r3, #0]
 80013f2:	ee07 3a90 	vmov	s15, r3
 80013f6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013fa:	4bc8      	ldr	r3, [pc, #800]	; (800171c <BLDCVqConstControl+0x3ac>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	ee07 3a90 	vmov	s15, r3
 8001402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001406:	ee77 7a67 	vsub.f32	s15, s14, s15
 800140a:	ed9f 7ac5 	vldr	s14, [pc, #788]	; 8001720 <BLDCVqConstControl+0x3b0>
 800140e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001412:	eddf 6ac4 	vldr	s13, [pc, #784]	; 8001724 <BLDCVqConstControl+0x3b4>
 8001416:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800141a:	ed9f 7ac3 	vldr	s14, [pc, #780]	; 8001728 <BLDCVqConstControl+0x3b8>
 800141e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001422:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8001426:	ee67 7a87 	vmul.f32	s15, s15, s14
 800142a:	edc7 7a08 	vstr	s15, [r7, #32]
	curt_v = (1.65f - ((float)curt_sense_data[1] - curt_sense_data_offset[1]) * 3.3f / 4096.0f) * 12.5f;
 800142e:	4bba      	ldr	r3, [pc, #744]	; (8001718 <BLDCVqConstControl+0x3a8>)
 8001430:	885b      	ldrh	r3, [r3, #2]
 8001432:	ee07 3a90 	vmov	s15, r3
 8001436:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800143a:	4bb8      	ldr	r3, [pc, #736]	; (800171c <BLDCVqConstControl+0x3ac>)
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	ee07 3a90 	vmov	s15, r3
 8001442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001446:	ee77 7a67 	vsub.f32	s15, s14, s15
 800144a:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8001720 <BLDCVqConstControl+0x3b0>
 800144e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001452:	eddf 6ab4 	vldr	s13, [pc, #720]	; 8001724 <BLDCVqConstControl+0x3b4>
 8001456:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800145a:	ed9f 7ab3 	vldr	s14, [pc, #716]	; 8001728 <BLDCVqConstControl+0x3b8>
 800145e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001462:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8001466:	ee67 7a87 	vmul.f32	s15, s15, s14
 800146a:	edc7 7a07 	vstr	s15, [r7, #28]
	curt_w = (1.65f - ((float)curt_sense_data[2] - curt_sense_data_offset[2]) * 3.3f / 4096.0f) * 12.5f;
 800146e:	4baa      	ldr	r3, [pc, #680]	; (8001718 <BLDCVqConstControl+0x3a8>)
 8001470:	889b      	ldrh	r3, [r3, #4]
 8001472:	ee07 3a90 	vmov	s15, r3
 8001476:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800147a:	4ba8      	ldr	r3, [pc, #672]	; (800171c <BLDCVqConstControl+0x3ac>)
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	ee07 3a90 	vmov	s15, r3
 8001482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001486:	ee77 7a67 	vsub.f32	s15, s14, s15
 800148a:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 8001720 <BLDCVqConstControl+0x3b0>
 800148e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001492:	eddf 6aa4 	vldr	s13, [pc, #656]	; 8001724 <BLDCVqConstControl+0x3b4>
 8001496:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800149a:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 8001728 <BLDCVqConstControl+0x3b8>
 800149e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014a2:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80014a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014aa:	edc7 7a06 	vstr	s15, [r7, #24]
	/*
	if 		(vol_u >= vol_v && vol_u >= vol_w) {curt_u = -curt_v - curt_w;}
	else if (vol_v >= vol_w && vol_v >= vol_u) {curt_v = -curt_w - curt_u;}
	else if (vol_w >= vol_u && vol_w >= vol_v) {curt_w = -curt_u - curt_v;}
	*/
	if (idx < 3000) {
 80014ae:	4b9f      	ldr	r3, [pc, #636]	; (800172c <BLDCVqConstControl+0x3bc>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80014b6:	4293      	cmp	r3, r2
 80014b8:	dc15      	bgt.n	80014e6 <BLDCVqConstControl+0x176>
		g_curt[idx] = curt_u + curt_v + curt_w;
 80014ba:	ed97 7a08 	vldr	s14, [r7, #32]
 80014be:	edd7 7a07 	vldr	s15, [r7, #28]
 80014c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014c6:	4b99      	ldr	r3, [pc, #612]	; (800172c <BLDCVqConstControl+0x3bc>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	edd7 7a06 	vldr	s15, [r7, #24]
 80014ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014d2:	4a97      	ldr	r2, [pc, #604]	; (8001730 <BLDCVqConstControl+0x3c0>)
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	4413      	add	r3, r2
 80014d8:	edc3 7a00 	vstr	s15, [r3]
		idx++;
 80014dc:	4b93      	ldr	r3, [pc, #588]	; (800172c <BLDCVqConstControl+0x3bc>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	3301      	adds	r3, #1
 80014e2:	4a92      	ldr	r2, [pc, #584]	; (800172c <BLDCVqConstControl+0x3bc>)
 80014e4:	6013      	str	r3, [r2, #0]
	}

	//current UVW -> alpha,beta
	curt_alpha = 0.8169496580928f * (curt_u - 0.5 * (curt_v + curt_w));
 80014e6:	6a38      	ldr	r0, [r7, #32]
 80014e8:	f7ff f82e 	bl	8000548 <__aeabi_f2d>
 80014ec:	4604      	mov	r4, r0
 80014ee:	460d      	mov	r5, r1
 80014f0:	ed97 7a07 	vldr	s14, [r7, #28]
 80014f4:	edd7 7a06 	vldr	s15, [r7, #24]
 80014f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014fc:	ee17 0a90 	vmov	r0, s15
 8001500:	f7ff f822 	bl	8000548 <__aeabi_f2d>
 8001504:	f04f 0200 	mov.w	r2, #0
 8001508:	4b8a      	ldr	r3, [pc, #552]	; (8001734 <BLDCVqConstControl+0x3c4>)
 800150a:	f7ff f875 	bl	80005f8 <__aeabi_dmul>
 800150e:	4602      	mov	r2, r0
 8001510:	460b      	mov	r3, r1
 8001512:	4620      	mov	r0, r4
 8001514:	4629      	mov	r1, r5
 8001516:	f7fe feb7 	bl	8000288 <__aeabi_dsub>
 800151a:	4603      	mov	r3, r0
 800151c:	460c      	mov	r4, r1
 800151e:	4618      	mov	r0, r3
 8001520:	4621      	mov	r1, r4
 8001522:	a375      	add	r3, pc, #468	; (adr r3, 80016f8 <BLDCVqConstControl+0x388>)
 8001524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001528:	f7ff f866 	bl	80005f8 <__aeabi_dmul>
 800152c:	4603      	mov	r3, r0
 800152e:	460c      	mov	r4, r1
 8001530:	4618      	mov	r0, r3
 8001532:	4621      	mov	r1, r4
 8001534:	f7ff fb38 	bl	8000ba8 <__aeabi_d2f>
 8001538:	4603      	mov	r3, r0
 800153a:	617b      	str	r3, [r7, #20]
	curt_beta  = 0.7071067811866f * (curt_v - curt_w);
 800153c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001540:	edd7 7a06 	vldr	s15, [r7, #24]
 8001544:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001548:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 8001738 <BLDCVqConstControl+0x3c8>
 800154c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001550:	edc7 7a04 	vstr	s15, [r7, #16]

	//current alpha,beta -> dq
	curt_d =  curt_alpha * costh + curt_beta * sinth;
 8001554:	ed97 7a05 	vldr	s14, [r7, #20]
 8001558:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800155c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001560:	edd7 6a04 	vldr	s13, [r7, #16]
 8001564:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001568:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800156c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001570:	edc7 7a03 	vstr	s15, [r7, #12]
	curt_q = -curt_alpha * sinth + curt_beta * costh;
 8001574:	edd7 7a05 	vldr	s15, [r7, #20]
 8001578:	eeb1 7a67 	vneg.f32	s14, s15
 800157c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001580:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001584:	edd7 6a04 	vldr	s13, [r7, #16]
 8001588:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800158c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001590:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001594:	edc7 7a02 	vstr	s15, [r7, #8]

	//Vd,Vq control
	//dq -> alpha,beta
	vol_alpha = vol_d * costh - vol_q * sinth;
 8001598:	ed97 7a01 	vldr	s14, [r7, #4]
 800159c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80015a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015a4:	edd7 6a00 	vldr	s13, [r7]
 80015a8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80015ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015b4:	4b61      	ldr	r3, [pc, #388]	; (800173c <BLDCVqConstControl+0x3cc>)
 80015b6:	edc3 7a00 	vstr	s15, [r3]
	vol_beta  = vol_d * sinth + vol_q * costh;
 80015ba:	ed97 7a01 	vldr	s14, [r7, #4]
 80015be:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80015c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015c6:	edd7 6a00 	vldr	s13, [r7]
 80015ca:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80015ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015d6:	4b5a      	ldr	r3, [pc, #360]	; (8001740 <BLDCVqConstControl+0x3d0>)
 80015d8:	edc3 7a00 	vstr	s15, [r3]

	//alpha,beta -> UVW
	vol_u =  0.81649658f * vol_alpha;
 80015dc:	4b57      	ldr	r3, [pc, #348]	; (800173c <BLDCVqConstControl+0x3cc>)
 80015de:	edd3 7a00 	vldr	s15, [r3]
 80015e2:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8001744 <BLDCVqConstControl+0x3d4>
 80015e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015ea:	4b57      	ldr	r3, [pc, #348]	; (8001748 <BLDCVqConstControl+0x3d8>)
 80015ec:	edc3 7a00 	vstr	s15, [r3]
    vol_v = -0.40824829f * vol_alpha + 0.707106781 * vol_beta;
 80015f0:	4b52      	ldr	r3, [pc, #328]	; (800173c <BLDCVqConstControl+0x3cc>)
 80015f2:	edd3 7a00 	vldr	s15, [r3]
 80015f6:	ed9f 7a55 	vldr	s14, [pc, #340]	; 800174c <BLDCVqConstControl+0x3dc>
 80015fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015fe:	ee17 0a90 	vmov	r0, s15
 8001602:	f7fe ffa1 	bl	8000548 <__aeabi_f2d>
 8001606:	4604      	mov	r4, r0
 8001608:	460d      	mov	r5, r1
 800160a:	4b4d      	ldr	r3, [pc, #308]	; (8001740 <BLDCVqConstControl+0x3d0>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4618      	mov	r0, r3
 8001610:	f7fe ff9a 	bl	8000548 <__aeabi_f2d>
 8001614:	a33a      	add	r3, pc, #232	; (adr r3, 8001700 <BLDCVqConstControl+0x390>)
 8001616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800161a:	f7fe ffed 	bl	80005f8 <__aeabi_dmul>
 800161e:	4602      	mov	r2, r0
 8001620:	460b      	mov	r3, r1
 8001622:	4620      	mov	r0, r4
 8001624:	4629      	mov	r1, r5
 8001626:	f7fe fe31 	bl	800028c <__adddf3>
 800162a:	4603      	mov	r3, r0
 800162c:	460c      	mov	r4, r1
 800162e:	4618      	mov	r0, r3
 8001630:	4621      	mov	r1, r4
 8001632:	f7ff fab9 	bl	8000ba8 <__aeabi_d2f>
 8001636:	4602      	mov	r2, r0
 8001638:	4b45      	ldr	r3, [pc, #276]	; (8001750 <BLDCVqConstControl+0x3e0>)
 800163a:	601a      	str	r2, [r3, #0]
    vol_w = -0.40824829f * vol_alpha - 0.707106781 * vol_beta;
 800163c:	4b3f      	ldr	r3, [pc, #252]	; (800173c <BLDCVqConstControl+0x3cc>)
 800163e:	edd3 7a00 	vldr	s15, [r3]
 8001642:	ed9f 7a42 	vldr	s14, [pc, #264]	; 800174c <BLDCVqConstControl+0x3dc>
 8001646:	ee67 7a87 	vmul.f32	s15, s15, s14
 800164a:	ee17 0a90 	vmov	r0, s15
 800164e:	f7fe ff7b 	bl	8000548 <__aeabi_f2d>
 8001652:	4604      	mov	r4, r0
 8001654:	460d      	mov	r5, r1
 8001656:	4b3a      	ldr	r3, [pc, #232]	; (8001740 <BLDCVqConstControl+0x3d0>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4618      	mov	r0, r3
 800165c:	f7fe ff74 	bl	8000548 <__aeabi_f2d>
 8001660:	a327      	add	r3, pc, #156	; (adr r3, 8001700 <BLDCVqConstControl+0x390>)
 8001662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001666:	f7fe ffc7 	bl	80005f8 <__aeabi_dmul>
 800166a:	4602      	mov	r2, r0
 800166c:	460b      	mov	r3, r1
 800166e:	4620      	mov	r0, r4
 8001670:	4629      	mov	r1, r5
 8001672:	f7fe fe09 	bl	8000288 <__aeabi_dsub>
 8001676:	4603      	mov	r3, r0
 8001678:	460c      	mov	r4, r1
 800167a:	4618      	mov	r0, r3
 800167c:	4621      	mov	r1, r4
 800167e:	f7ff fa93 	bl	8000ba8 <__aeabi_d2f>
 8001682:	4602      	mov	r2, r0
 8001684:	4b33      	ldr	r3, [pc, #204]	; (8001754 <BLDCVqConstControl+0x3e4>)
 8001686:	601a      	str	r2, [r3, #0]

    vol_u = fmaxf(fminf(pwm_max / 2.0f + vol_u * pwm_max / 12.0f, pwm_max), 0);
 8001688:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800168c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001690:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001694:	4b2c      	ldr	r3, [pc, #176]	; (8001748 <BLDCVqConstControl+0x3d8>)
 8001696:	edd3 6a00 	vldr	s13, [r3]
 800169a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800169e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80016a2:	eeb2 6a08 	vmov.f32	s12, #40	; 0x41400000  12.0
 80016a6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80016aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016ae:	edd7 0a0d 	vldr	s1, [r7, #52]	; 0x34
 80016b2:	eeb0 0a67 	vmov.f32	s0, s15
 80016b6:	f008 fa54 	bl	8009b62 <fminf>
 80016ba:	eef0 7a40 	vmov.f32	s15, s0
 80016be:	eddf 0a26 	vldr	s1, [pc, #152]	; 8001758 <BLDCVqConstControl+0x3e8>
 80016c2:	eeb0 0a67 	vmov.f32	s0, s15
 80016c6:	f008 fa31 	bl	8009b2c <fmaxf>
 80016ca:	eef0 7a40 	vmov.f32	s15, s0
 80016ce:	4b1e      	ldr	r3, [pc, #120]	; (8001748 <BLDCVqConstControl+0x3d8>)
 80016d0:	edc3 7a00 	vstr	s15, [r3]
    vol_v = fmaxf(fminf(pwm_max / 2.0f + vol_v * pwm_max / 12.0f, pwm_max), 0);
 80016d4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80016d8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80016dc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80016e0:	4b1b      	ldr	r3, [pc, #108]	; (8001750 <BLDCVqConstControl+0x3e0>)
 80016e2:	edd3 6a00 	vldr	s13, [r3]
 80016e6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80016ea:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80016ee:	eeb2 6a08 	vmov.f32	s12, #40	; 0x41400000  12.0
 80016f2:	e033      	b.n	800175c <BLDCVqConstControl+0x3ec>
 80016f4:	f3af 8000 	nop.w
 80016f8:	a0000000 	.word	0xa0000000
 80016fc:	3fea2473 	.word	0x3fea2473
 8001700:	6665983e 	.word	0x6665983e
 8001704:	3fe6a09e 	.word	0x3fe6a09e
 8001708:	200036e0 	.word	0x200036e0
 800170c:	44aaa800 	.word	0x44aaa800
 8001710:	43b48000 	.word	0x43b48000
 8001714:	3b96ce3f 	.word	0x3b96ce3f
 8001718:	20000208 	.word	0x20000208
 800171c:	20000210 	.word	0x20000210
 8001720:	40533333 	.word	0x40533333
 8001724:	45800000 	.word	0x45800000
 8001728:	3fd33333 	.word	0x3fd33333
 800172c:	20000204 	.word	0x20000204
 8001730:	2000033c 	.word	0x2000033c
 8001734:	3fe00000 	.word	0x3fe00000
 8001738:	3f3504f3 	.word	0x3f3504f3
 800173c:	2000021c 	.word	0x2000021c
 8001740:	20000220 	.word	0x20000220
 8001744:	3f5105eb 	.word	0x3f5105eb
 8001748:	20000224 	.word	0x20000224
 800174c:	bed105eb 	.word	0xbed105eb
 8001750:	20000228 	.word	0x20000228
 8001754:	2000022c 	.word	0x2000022c
 8001758:	00000000 	.word	0x00000000
 800175c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001760:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001764:	edd7 0a0d 	vldr	s1, [r7, #52]	; 0x34
 8001768:	eeb0 0a67 	vmov.f32	s0, s15
 800176c:	f008 f9f9 	bl	8009b62 <fminf>
 8001770:	eef0 7a40 	vmov.f32	s15, s0
 8001774:	ed5f 0a08 	vldr	s1, [pc, #-32]	; 8001758 <BLDCVqConstControl+0x3e8>
 8001778:	eeb0 0a67 	vmov.f32	s0, s15
 800177c:	f008 f9d6 	bl	8009b2c <fmaxf>
 8001780:	eef0 7a40 	vmov.f32	s15, s0
 8001784:	4b26      	ldr	r3, [pc, #152]	; (8001820 <BLDCVqConstControl+0x4b0>)
 8001786:	edc3 7a00 	vstr	s15, [r3]
    vol_w = fmaxf(fminf(pwm_max / 2.0f + vol_w * pwm_max / 12.0f, pwm_max), 0);
 800178a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800178e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001792:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001796:	4b23      	ldr	r3, [pc, #140]	; (8001824 <BLDCVqConstControl+0x4b4>)
 8001798:	edd3 6a00 	vldr	s13, [r3]
 800179c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80017a0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80017a4:	eeb2 6a08 	vmov.f32	s12, #40	; 0x41400000  12.0
 80017a8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80017ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017b0:	edd7 0a0d 	vldr	s1, [r7, #52]	; 0x34
 80017b4:	eeb0 0a67 	vmov.f32	s0, s15
 80017b8:	f008 f9d3 	bl	8009b62 <fminf>
 80017bc:	eef0 7a40 	vmov.f32	s15, s0
 80017c0:	eddf 0a19 	vldr	s1, [pc, #100]	; 8001828 <BLDCVqConstControl+0x4b8>
 80017c4:	eeb0 0a67 	vmov.f32	s0, s15
 80017c8:	f008 f9b0 	bl	8009b2c <fmaxf>
 80017cc:	eef0 7a40 	vmov.f32	s15, s0
 80017d0:	4b14      	ldr	r3, [pc, #80]	; (8001824 <BLDCVqConstControl+0x4b4>)
 80017d2:	edc3 7a00 	vstr	s15, [r3]

//    printf("%f %f %f %f\n", theta, vol_u, vol_v, vol_w);

    //output PWM
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, (uint16_t)vol_u);
 80017d6:	4b15      	ldr	r3, [pc, #84]	; (800182c <BLDCVqConstControl+0x4bc>)
 80017d8:	edd3 7a00 	vldr	s15, [r3]
 80017dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017e0:	ee17 3a90 	vmov	r3, s15
 80017e4:	b29a      	uxth	r2, r3
 80017e6:	4b12      	ldr	r3, [pc, #72]	; (8001830 <BLDCVqConstControl+0x4c0>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, (uint16_t)vol_v);
 80017ec:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <BLDCVqConstControl+0x4b0>)
 80017ee:	edd3 7a00 	vldr	s15, [r3]
 80017f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017f6:	ee17 3a90 	vmov	r3, s15
 80017fa:	b29a      	uxth	r2, r3
 80017fc:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <BLDCVqConstControl+0x4c0>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, (uint16_t)vol_w);
 8001802:	4b08      	ldr	r3, [pc, #32]	; (8001824 <BLDCVqConstControl+0x4b4>)
 8001804:	edd3 7a00 	vldr	s15, [r3]
 8001808:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800180c:	ee17 3a90 	vmov	r3, s15
 8001810:	b29a      	uxth	r2, r3
 8001812:	4b07      	ldr	r3, [pc, #28]	; (8001830 <BLDCVqConstControl+0x4c0>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001818:	bf00      	nop
 800181a:	3738      	adds	r7, #56	; 0x38
 800181c:	46bd      	mov	sp, r7
 800181e:	bdb0      	pop	{r4, r5, r7, pc}
 8001820:	20000228 	.word	0x20000228
 8001824:	2000022c 	.word	0x2000022c
 8001828:	00000000 	.word	0x00000000
 800182c:	20000224 	.word	0x20000224
 8001830:	200036e0 	.word	0x200036e0

08001834 <BLDCGetCurrentSenseOffset>:

void BLDCGetCurrentSenseOffset(void) {
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
	const int32_t num_offset = 10;
 800183a:	230a      	movs	r3, #10
 800183c:	603b      	str	r3, [r7, #0]

 	curt_sense_data_offset[0] = curt_sense_data_offset[1] = curt_sense_data_offset[2] = 0;
 800183e:	4b3a      	ldr	r3, [pc, #232]	; (8001928 <BLDCGetCurrentSenseOffset+0xf4>)
 8001840:	2200      	movs	r2, #0
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	4b38      	ldr	r3, [pc, #224]	; (8001928 <BLDCGetCurrentSenseOffset+0xf4>)
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	4a37      	ldr	r2, [pc, #220]	; (8001928 <BLDCGetCurrentSenseOffset+0xf4>)
 800184a:	6053      	str	r3, [r2, #4]
 800184c:	4b36      	ldr	r3, [pc, #216]	; (8001928 <BLDCGetCurrentSenseOffset+0xf4>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	4a35      	ldr	r2, [pc, #212]	; (8001928 <BLDCGetCurrentSenseOffset+0xf4>)
 8001852:	6013      	str	r3, [r2, #0]
 	for (int32_t i = 0; i < num_offset; i++) {
 8001854:	2300      	movs	r3, #0
 8001856:	607b      	str	r3, [r7, #4]
 8001858:	e01a      	b.n	8001890 <BLDCGetCurrentSenseOffset+0x5c>
 		curt_sense_data_offset[0] += curt_sense_data[0];
 800185a:	4b33      	ldr	r3, [pc, #204]	; (8001928 <BLDCGetCurrentSenseOffset+0xf4>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a33      	ldr	r2, [pc, #204]	; (800192c <BLDCGetCurrentSenseOffset+0xf8>)
 8001860:	8812      	ldrh	r2, [r2, #0]
 8001862:	4413      	add	r3, r2
 8001864:	4a30      	ldr	r2, [pc, #192]	; (8001928 <BLDCGetCurrentSenseOffset+0xf4>)
 8001866:	6013      	str	r3, [r2, #0]
 		curt_sense_data_offset[1] += curt_sense_data[1];
 8001868:	4b2f      	ldr	r3, [pc, #188]	; (8001928 <BLDCGetCurrentSenseOffset+0xf4>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	4a2f      	ldr	r2, [pc, #188]	; (800192c <BLDCGetCurrentSenseOffset+0xf8>)
 800186e:	8852      	ldrh	r2, [r2, #2]
 8001870:	4413      	add	r3, r2
 8001872:	4a2d      	ldr	r2, [pc, #180]	; (8001928 <BLDCGetCurrentSenseOffset+0xf4>)
 8001874:	6053      	str	r3, [r2, #4]
 		curt_sense_data_offset[2] += curt_sense_data[2];
 8001876:	4b2c      	ldr	r3, [pc, #176]	; (8001928 <BLDCGetCurrentSenseOffset+0xf4>)
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	4a2c      	ldr	r2, [pc, #176]	; (800192c <BLDCGetCurrentSenseOffset+0xf8>)
 800187c:	8892      	ldrh	r2, [r2, #4]
 800187e:	4413      	add	r3, r2
 8001880:	4a29      	ldr	r2, [pc, #164]	; (8001928 <BLDCGetCurrentSenseOffset+0xf4>)
 8001882:	6093      	str	r3, [r2, #8]
 		HAL_Delay(1);
 8001884:	2001      	movs	r0, #1
 8001886:	f001 fb1b 	bl	8002ec0 <HAL_Delay>
 	for (int32_t i = 0; i < num_offset; i++) {
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	3301      	adds	r3, #1
 800188e:	607b      	str	r3, [r7, #4]
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	429a      	cmp	r2, r3
 8001896:	dbe0      	blt.n	800185a <BLDCGetCurrentSenseOffset+0x26>
 	}
 	curt_sense_data_offset[0] = (int)(curt_sense_data_offset[0] / num_offset + 0.50f);	//ROUND(curt_sense_data_offset / num_offset)
 8001898:	4b23      	ldr	r3, [pc, #140]	; (8001928 <BLDCGetCurrentSenseOffset+0xf4>)
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	fbb2 f3f3 	udiv	r3, r2, r3
 80018a2:	ee07 3a90 	vmov	s15, r3
 80018a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018aa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80018ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80018b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018b6:	ee17 2a90 	vmov	r2, s15
 80018ba:	4b1b      	ldr	r3, [pc, #108]	; (8001928 <BLDCGetCurrentSenseOffset+0xf4>)
 80018bc:	601a      	str	r2, [r3, #0]
 	curt_sense_data_offset[1] = (int)(curt_sense_data_offset[1] / num_offset + 0.50f);
 80018be:	4b1a      	ldr	r3, [pc, #104]	; (8001928 <BLDCGetCurrentSenseOffset+0xf4>)
 80018c0:	685a      	ldr	r2, [r3, #4]
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80018c8:	ee07 3a90 	vmov	s15, r3
 80018cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018d0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80018d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80018d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018dc:	ee17 2a90 	vmov	r2, s15
 80018e0:	4b11      	ldr	r3, [pc, #68]	; (8001928 <BLDCGetCurrentSenseOffset+0xf4>)
 80018e2:	605a      	str	r2, [r3, #4]
 	curt_sense_data_offset[2] = (int)(curt_sense_data_offset[2] / num_offset + 0.50f);
 80018e4:	4b10      	ldr	r3, [pc, #64]	; (8001928 <BLDCGetCurrentSenseOffset+0xf4>)
 80018e6:	689a      	ldr	r2, [r3, #8]
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ee:	ee07 3a90 	vmov	s15, r3
 80018f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018f6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80018fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80018fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001902:	ee17 2a90 	vmov	r2, s15
 8001906:	4b08      	ldr	r3, [pc, #32]	; (8001928 <BLDCGetCurrentSenseOffset+0xf4>)
 8001908:	609a      	str	r2, [r3, #8]
 	printf("%d %d %d\n", (int)curt_sense_data_offset[0], (int)curt_sense_data_offset[1], (int)curt_sense_data_offset[2]);
 800190a:	4b07      	ldr	r3, [pc, #28]	; (8001928 <BLDCGetCurrentSenseOffset+0xf4>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4619      	mov	r1, r3
 8001910:	4b05      	ldr	r3, [pc, #20]	; (8001928 <BLDCGetCurrentSenseOffset+0xf4>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	461a      	mov	r2, r3
 8001916:	4b04      	ldr	r3, [pc, #16]	; (8001928 <BLDCGetCurrentSenseOffset+0xf4>)
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	4805      	ldr	r0, [pc, #20]	; (8001930 <BLDCGetCurrentSenseOffset+0xfc>)
 800191c:	f006 f8e2 	bl	8007ae4 <iprintf>
}
 8001920:	bf00      	nop
 8001922:	3708      	adds	r7, #8
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	20000210 	.word	0x20000210
 800192c:	20000208 	.word	0x20000208
 8001930:	0800a850 	.word	0x0800a850

08001934 <BLDCStartCurrentSense>:
 * @param
 * @return
 * @note	Triggered by tim8(at the center of center aligned PWM.
 * 			Data will be automatically transfered to the variable by DMA
 */
void BLDCStartCurrentSense(void) {
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)curt_sense_data, ADC_CURT_SENSE_BUFFER_SIZE);
 8001938:	2203      	movs	r2, #3
 800193a:	4903      	ldr	r1, [pc, #12]	; (8001948 <BLDCStartCurrentSense+0x14>)
 800193c:	4803      	ldr	r0, [pc, #12]	; (800194c <BLDCStartCurrentSense+0x18>)
 800193e:	f001 fc65 	bl	800320c <HAL_ADC_Start_DMA>
}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	20000208 	.word	0x20000208
 800194c:	20000294 	.word	0x20000294

08001950 <HAL_ADC_ConvCpltCallback>:
 * ADC Conversion Complete Callback(unique function of HAL)
 * @param
 * @return
 * @note	for debugging
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
//	printf("%d %d %d\n", curt_sense_data[0], curt_sense_data[1], curt_sense_data[2]);
}
 8001958:	bf00      	nop
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <BLDCEnable>:
/*
 * Enable BLDC Motor(Enable Gate Driver & Start TIM8 PWM Generation)
 * @param
 * @return
 */
void BLDCEnable(void) {
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);		//EN_GATE = HIGH
 8001968:	2201      	movs	r2, #1
 800196a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800196e:	4814      	ldr	r0, [pc, #80]	; (80019c0 <BLDCEnable+0x5c>)
 8001970:	f002 fe5a 	bl	8004628 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);
 8001974:	4b13      	ldr	r3, [pc, #76]	; (80019c4 <BLDCEnable+0x60>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2200      	movs	r2, #0
 800197a:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);
 800197c:	4b11      	ldr	r3, [pc, #68]	; (80019c4 <BLDCEnable+0x60>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2200      	movs	r2, #0
 8001982:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, 0);
 8001984:	4b0f      	ldr	r3, [pc, #60]	; (80019c4 <BLDCEnable+0x60>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2200      	movs	r2, #0
 800198a:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, __HAL_TIM_GET_AUTORELOAD(&htim8) - 1);
 800198c:	4b0d      	ldr	r3, [pc, #52]	; (80019c4 <BLDCEnable+0x60>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001992:	4b0c      	ldr	r3, [pc, #48]	; (80019c4 <BLDCEnable+0x60>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	3a01      	subs	r2, #1
 8001998:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800199a:	2100      	movs	r1, #0
 800199c:	4809      	ldr	r0, [pc, #36]	; (80019c4 <BLDCEnable+0x60>)
 800199e:	f003 fddf 	bl	8005560 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 80019a2:	2104      	movs	r1, #4
 80019a4:	4807      	ldr	r0, [pc, #28]	; (80019c4 <BLDCEnable+0x60>)
 80019a6:	f003 fddb 	bl	8005560 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 80019aa:	2108      	movs	r1, #8
 80019ac:	4805      	ldr	r0, [pc, #20]	; (80019c4 <BLDCEnable+0x60>)
 80019ae:	f003 fdd7 	bl	8005560 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 80019b2:	210c      	movs	r1, #12
 80019b4:	4803      	ldr	r0, [pc, #12]	; (80019c4 <BLDCEnable+0x60>)
 80019b6:	f003 fdd3 	bl	8005560 <HAL_TIM_PWM_Start>
}
 80019ba:	bf00      	nop
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40020000 	.word	0x40020000
 80019c4:	200036e0 	.word	0x200036e0

080019c8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	607b      	str	r3, [r7, #4]
 80019d2:	4b14      	ldr	r3, [pc, #80]	; (8001a24 <MX_DMA_Init+0x5c>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	4a13      	ldr	r2, [pc, #76]	; (8001a24 <MX_DMA_Init+0x5c>)
 80019d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019dc:	6313      	str	r3, [r2, #48]	; 0x30
 80019de:	4b11      	ldr	r3, [pc, #68]	; (8001a24 <MX_DMA_Init+0x5c>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019e6:	607b      	str	r3, [r7, #4]
 80019e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80019ea:	2200      	movs	r2, #0
 80019ec:	2100      	movs	r1, #0
 80019ee:	2038      	movs	r0, #56	; 0x38
 80019f0:	f002 f8a1 	bl	8003b36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80019f4:	2038      	movs	r0, #56	; 0x38
 80019f6:	f002 f8ba 	bl	8003b6e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80019fa:	2200      	movs	r2, #0
 80019fc:	2100      	movs	r1, #0
 80019fe:	203a      	movs	r0, #58	; 0x3a
 8001a00:	f002 f899 	bl	8003b36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001a04:	203a      	movs	r0, #58	; 0x3a
 8001a06:	f002 f8b2 	bl	8003b6e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	2046      	movs	r0, #70	; 0x46
 8001a10:	f002 f891 	bl	8003b36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001a14:	2046      	movs	r0, #70	; 0x46
 8001a16:	f002 f8aa 	bl	8003b6e <HAL_NVIC_EnableIRQ>

}
 8001a1a:	bf00      	nop
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40023800 	.word	0x40023800

08001a28 <dma_printf_init>:
#include "dma_ring.h"
#include <stdbool.h>

struct dma_printf_info dmi;

void dma_printf_init(UART_HandleTypeDef *printf_huart){
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
    dmi.huart = printf_huart;
 8001a30:	4a09      	ldr	r2, [pc, #36]	; (8001a58 <dma_printf_init+0x30>)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
    dma_ring_init(&dmi.tx_ring);
 8001a38:	4807      	ldr	r0, [pc, #28]	; (8001a58 <dma_printf_init+0x30>)
 8001a3a:	f000 f87d 	bl	8001b38 <dma_ring_init>
    dmi.sending = false;
 8001a3e:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <dma_printf_init+0x30>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    dmi.previous_send_len = 0;
 8001a46:	4b04      	ldr	r3, [pc, #16]	; (8001a58 <dma_printf_init+0x30>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
}
 8001a4e:	bf00      	nop
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	2000321c 	.word	0x2000321c

08001a5c <dma_printf_putc>:

void dma_printf_putc(uint8_t c){
 8001a5c:	b590      	push	{r4, r7, lr}
 8001a5e:	b085      	sub	sp, #20
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	4603      	mov	r3, r0
 8001a64:	71fb      	strb	r3, [r7, #7]
    dma_ring_putc(&dmi.tx_ring, c);
 8001a66:	79fb      	ldrb	r3, [r7, #7]
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4814      	ldr	r0, [pc, #80]	; (8001abc <dma_printf_putc+0x60>)
 8001a6c:	f000 f87f 	bl	8001b6e <dma_ring_putc>
    if(!dmi.sending){
 8001a70:	4b12      	ldr	r3, [pc, #72]	; (8001abc <dma_printf_putc+0x60>)
 8001a72:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d11b      	bne.n	8001ab2 <dma_printf_putc+0x56>
        uint16_t len = (uint16_t)dma_ring_available_linear(&dmi.tx_ring);
 8001a7a:	4810      	ldr	r0, [pc, #64]	; (8001abc <dma_printf_putc+0x60>)
 8001a7c:	f000 f8ac 	bl	8001bd8 <dma_ring_available_linear>
 8001a80:	4603      	mov	r3, r0
 8001a82:	81fb      	strh	r3, [r7, #14]
        dmi.previous_send_len = len;
 8001a84:	89fb      	ldrh	r3, [r7, #14]
 8001a86:	4a0d      	ldr	r2, [pc, #52]	; (8001abc <dma_printf_putc+0x60>)
 8001a88:	f8c2 3410 	str.w	r3, [r2, #1040]	; 0x410
        dmi.sending = true;
 8001a8c:	4b0b      	ldr	r3, [pc, #44]	; (8001abc <dma_printf_putc+0x60>)
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        HAL_UART_Transmit_DMA(dmi.huart, dmi.tx_ring.buf+dma_ring_get_r_ptr(&dmi.tx_ring), len);
 8001a94:	4b09      	ldr	r3, [pc, #36]	; (8001abc <dma_printf_putc+0x60>)
 8001a96:	f8d3 440c 	ldr.w	r4, [r3, #1036]	; 0x40c
 8001a9a:	4808      	ldr	r0, [pc, #32]	; (8001abc <dma_printf_putc+0x60>)
 8001a9c:	f000 f8bf 	bl	8001c1e <dma_ring_get_r_ptr>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	4b05      	ldr	r3, [pc, #20]	; (8001abc <dma_printf_putc+0x60>)
 8001aa6:	4413      	add	r3, r2
 8001aa8:	89fa      	ldrh	r2, [r7, #14]
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4620      	mov	r0, r4
 8001aae:	f004 fcd7 	bl	8006460 <HAL_UART_Transmit_DMA>
    }
}
 8001ab2:	bf00      	nop
 8001ab4:	3714      	adds	r7, #20
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd90      	pop	{r4, r7, pc}
 8001aba:	bf00      	nop
 8001abc:	2000321c 	.word	0x2000321c

08001ac0 <dma_printf_send_it>:

void dma_printf_send_it(UART_HandleTypeDef *printf_huart) {
 8001ac0:	b590      	push	{r4, r7, lr}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
    if(dmi.huart != printf_huart) return;
 8001ac8:	4b1a      	ldr	r3, [pc, #104]	; (8001b34 <dma_printf_send_it+0x74>)
 8001aca:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d12b      	bne.n	8001b2c <dma_printf_send_it+0x6c>

    dma_ring_forward_r_ptr(&dmi.tx_ring, dmi.previous_send_len);
 8001ad4:	4b17      	ldr	r3, [pc, #92]	; (8001b34 <dma_printf_send_it+0x74>)
 8001ad6:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8001ada:	4619      	mov	r1, r3
 8001adc:	4815      	ldr	r0, [pc, #84]	; (8001b34 <dma_printf_send_it+0x74>)
 8001ade:	f000 f8ab 	bl	8001c38 <dma_ring_forward_r_ptr>
    uint16_t len = (uint16_t)dma_ring_available_linear(&dmi.tx_ring);
 8001ae2:	4814      	ldr	r0, [pc, #80]	; (8001b34 <dma_printf_send_it+0x74>)
 8001ae4:	f000 f878 	bl	8001bd8 <dma_ring_available_linear>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	81fb      	strh	r3, [r7, #14]
    if (len > 0 ) {
 8001aec:	89fb      	ldrh	r3, [r7, #14]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d017      	beq.n	8001b22 <dma_printf_send_it+0x62>
        dmi.previous_send_len = len;
 8001af2:	89fb      	ldrh	r3, [r7, #14]
 8001af4:	4a0f      	ldr	r2, [pc, #60]	; (8001b34 <dma_printf_send_it+0x74>)
 8001af6:	f8c2 3410 	str.w	r3, [r2, #1040]	; 0x410
        dmi.sending = true;
 8001afa:	4b0e      	ldr	r3, [pc, #56]	; (8001b34 <dma_printf_send_it+0x74>)
 8001afc:	2201      	movs	r2, #1
 8001afe:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        HAL_UART_Transmit_DMA(dmi.huart, dmi.tx_ring.buf+dma_ring_get_r_ptr(&dmi.tx_ring), len);
 8001b02:	4b0c      	ldr	r3, [pc, #48]	; (8001b34 <dma_printf_send_it+0x74>)
 8001b04:	f8d3 440c 	ldr.w	r4, [r3, #1036]	; 0x40c
 8001b08:	480a      	ldr	r0, [pc, #40]	; (8001b34 <dma_printf_send_it+0x74>)
 8001b0a:	f000 f888 	bl	8001c1e <dma_ring_get_r_ptr>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	461a      	mov	r2, r3
 8001b12:	4b08      	ldr	r3, [pc, #32]	; (8001b34 <dma_printf_send_it+0x74>)
 8001b14:	4413      	add	r3, r2
 8001b16:	89fa      	ldrh	r2, [r7, #14]
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4620      	mov	r0, r4
 8001b1c:	f004 fca0 	bl	8006460 <HAL_UART_Transmit_DMA>
 8001b20:	e005      	b.n	8001b2e <dma_printf_send_it+0x6e>
    }else{
        dmi.sending = false;
 8001b22:	4b04      	ldr	r3, [pc, #16]	; (8001b34 <dma_printf_send_it+0x74>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8001b2a:	e000      	b.n	8001b2e <dma_printf_send_it+0x6e>
    if(dmi.huart != printf_huart) return;
 8001b2c:	bf00      	nop
    }
}
 8001b2e:	3714      	adds	r7, #20
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd90      	pop	{r4, r7, pc}
 8001b34:	2000321c 	.word	0x2000321c

08001b38 <dma_ring_init>:
#include "dma_ring.h"
#include "main.h"
#include <stdio.h>

void dma_ring_init(struct dma_ring_buf *ring){
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  ring->buf_size = RING_BUF_SIZE;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b46:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
  ring->w_ptr = 0;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
  ring->r_ptr = 0;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
  ring->overwrite_cnt = 0;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
}
 8001b62:	bf00      	nop
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr

08001b6e <dma_ring_putc>:
  *c = ring->buf[ring->r_ptr];
  ring->r_ptr = next_ptr;
  return RING_SUCCESS;
}

int dma_ring_putc(struct dma_ring_buf *ring, uint8_t c){
 8001b6e:	b480      	push	{r7}
 8001b70:	b085      	sub	sp, #20
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
 8001b76:	460b      	mov	r3, r1
 8001b78:	70fb      	strb	r3, [r7, #3]
  uint16_t next_ptr = ring->w_ptr+1;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8001b80:	3301      	adds	r3, #1
 8001b82:	81fb      	strh	r3, [r7, #14]
  if(next_ptr >= ring->buf_size) next_ptr = 0;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8001b8a:	89fa      	ldrh	r2, [r7, #14]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d301      	bcc.n	8001b94 <dma_ring_putc+0x26>
 8001b90:	2300      	movs	r3, #0
 8001b92:	81fb      	strh	r3, [r7, #14]

  if(next_ptr == ring->r_ptr){
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8001b9a:	89fa      	ldrh	r2, [r7, #14]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d109      	bne.n	8001bb4 <dma_ring_putc+0x46>
    ring->overwrite_cnt++;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	b29a      	uxth	r2, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
    return RING_FAIL;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e00b      	b.n	8001bcc <dma_ring_putc+0x5e>
  }
  ring->buf[ring->w_ptr] = c;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8001bba:	4619      	mov	r1, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	78fa      	ldrb	r2, [r7, #3]
 8001bc0:	545a      	strb	r2, [r3, r1]
  ring->w_ptr = next_ptr;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	89fa      	ldrh	r2, [r7, #14]
 8001bc6:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
  return RING_SUCCESS;
 8001bca:	2300      	movs	r3, #0
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3714      	adds	r7, #20
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <dma_ring_available_linear>:
    return ring->w_ptr - ring->r_ptr;
  }else{
    return ring->buf_size + ring->w_ptr - ring->r_ptr;
  }
}
int dma_ring_available_linear(struct dma_ring_buf *ring){
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  if(ring->w_ptr >= ring->r_ptr){
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d308      	bcc.n	8001c02 <dma_ring_available_linear+0x2a>
    return ring->w_ptr - ring->r_ptr;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	e007      	b.n	8001c12 <dma_ring_available_linear+0x3a>
  }else{
    return ring->buf_size - ring->r_ptr;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8001c08:	461a      	mov	r2, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8001c10:	1ad3      	subs	r3, r2, r3
  }
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr

08001c1e <dma_ring_get_r_ptr>:

uint16_t dma_ring_get_w_ptr(struct dma_ring_buf *ring){
  return ring->w_ptr;
}

uint16_t dma_ring_get_r_ptr(struct dma_ring_buf *ring){
 8001c1e:	b480      	push	{r7}
 8001c20:	b083      	sub	sp, #12
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
  return ring->r_ptr;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <dma_ring_forward_r_ptr>:

void dma_ring_forward_r_ptr(struct dma_ring_buf *ring, int len){
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
  while(len > 0){
 8001c42:	e018      	b.n	8001c76 <dma_ring_forward_r_ptr+0x3e>
    if(ring->r_ptr+1 >= ring->buf_size){
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	f8b2 2400 	ldrh.w	r2, [r2, #1024]	; 0x400
 8001c52:	4293      	cmp	r3, r2
 8001c54:	db04      	blt.n	8001c60 <dma_ring_forward_r_ptr+0x28>
      ring->r_ptr = 0;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8001c5e:	e007      	b.n	8001c70 <dma_ring_forward_r_ptr+0x38>
    }else{
      ring->r_ptr += 1;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8001c66:	3301      	adds	r3, #1
 8001c68:	b29a      	uxth	r2, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
    }
    len--;
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	3b01      	subs	r3, #1
 8001c74:	603b      	str	r3, [r7, #0]
  while(len > 0){
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	dce3      	bgt.n	8001c44 <dma_ring_forward_r_ptr+0xc>
  }
}
 8001c7c:	bf00      	nop
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <DRV8305Init>:
/*
 * Initialize DRV8305
 * @param
 * @return
 */
void DRV8305Init(void) {
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
	DRV8305Write(DRV8305_GATE_DRIVER_CONTROL, 0x0296);	//6 PWM mode -> 3 PWM mode
 8001c8c:	f240 2196 	movw	r1, #662	; 0x296
 8001c90:	2007      	movs	r0, #7
 8001c92:	f000 f80d 	bl	8001cb0 <DRV8305Write>
	DRV8305Write(DRV8305_SHUNT_AMP_CONTROL, 0x072A);	//Current Amp : x10 -> x40, current sense calibration on
 8001c96:	f240 712a 	movw	r1, #1834	; 0x72a
 8001c9a:	200a      	movs	r0, #10
 8001c9c:	f000 f808 	bl	8001cb0 <DRV8305Write>
	BLDCGetCurrentSenseOffset();						//get current sense offset(calibration)
 8001ca0:	f7ff fdc8 	bl	8001834 <BLDCGetCurrentSenseOffset>
	DRV8305Write(DRV8305_SHUNT_AMP_CONTROL, 0x002A);	//Current Amp : x10 -> x40, current sense calibration off
 8001ca4:	212a      	movs	r1, #42	; 0x2a
 8001ca6:	200a      	movs	r0, #10
 8001ca8:	f000 f802 	bl	8001cb0 <DRV8305Write>
}
 8001cac:	bf00      	nop
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <DRV8305Write>:
 * Write Register
 * @param	address : DRV8305 regigster address(8bit)
 * 			data : data to write(11bit)
 * @return
 */
uint16_t DRV8305Write(uint8_t address, uint16_t data) {
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b086      	sub	sp, #24
 8001cb4:	af02      	add	r7, sp, #8
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	460a      	mov	r2, r1
 8001cba:	71fb      	strb	r3, [r7, #7]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	80bb      	strh	r3, [r7, #4]
	uint16_t adr_data = (address << 11) | (data & 0x07FF);		//0(1bit) + address(4bit) + data(11bit) = 16bit
 8001cc0:	79fb      	ldrb	r3, [r7, #7]
 8001cc2:	02db      	lsls	r3, r3, #11
 8001cc4:	b21a      	sxth	r2, r3
 8001cc6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001cca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001cce:	b21b      	sxth	r3, r3
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	b21b      	sxth	r3, r3
 8001cd4:	81fb      	strh	r3, [r7, #14]
	uint8_t txdata[2] = {adr_data >> 8, adr_data & 0xFF};		//{msb8bit, lsb8bit}
 8001cd6:	89fb      	ldrh	r3, [r7, #14]
 8001cd8:	0a1b      	lsrs	r3, r3, #8
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	733b      	strb	r3, [r7, #12]
 8001ce0:	89fb      	ldrh	r3, [r7, #14]
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	737b      	strb	r3, [r7, #13]
	uint8_t rxdata[2] = {};
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	813b      	strh	r3, [r7, #8]
	DRV8305Select();
 8001cea:	f000 f84d 	bl	8001d88 <DRV8305Select>
	HAL_SPI_TransmitReceive(&DRV8305_SPI_HANDLER, txdata, rxdata, 2, 1);
 8001cee:	f107 0208 	add.w	r2, r7, #8
 8001cf2:	f107 010c 	add.w	r1, r7, #12
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	9300      	str	r3, [sp, #0]
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	4809      	ldr	r0, [pc, #36]	; (8001d24 <DRV8305Write+0x74>)
 8001cfe:	f003 f967 	bl	8004fd0 <HAL_SPI_TransmitReceive>
	DRV8305Deselect();
 8001d02:	f000 f84d 	bl	8001da0 <DRV8305Deselect>
	return (((rxdata[0] & 0x07) << 8) | rxdata[1]);
 8001d06:	7a3b      	ldrb	r3, [r7, #8]
 8001d08:	021b      	lsls	r3, r3, #8
 8001d0a:	b21b      	sxth	r3, r3
 8001d0c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001d10:	b21a      	sxth	r2, r3
 8001d12:	7a7b      	ldrb	r3, [r7, #9]
 8001d14:	b21b      	sxth	r3, r3
 8001d16:	4313      	orrs	r3, r2
 8001d18:	b21b      	sxth	r3, r3
 8001d1a:	b29b      	uxth	r3, r3
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3710      	adds	r7, #16
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	20003630 	.word	0x20003630

08001d28 <DRV8305Read>:
/*
 * Read Register
 * @param	address : DRV8305 regigster address(8bit)
 * @return	data in the designated address(11bit)
 */
uint16_t DRV8305Read(uint8_t address) {
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af02      	add	r7, sp, #8
 8001d2e:	4603      	mov	r3, r0
 8001d30:	71fb      	strb	r3, [r7, #7]
	uint8_t txdata[2] = {(address << 3) | 0x80, 0x00};
 8001d32:	79fb      	ldrb	r3, [r7, #7]
 8001d34:	00db      	lsls	r3, r3, #3
 8001d36:	b25b      	sxtb	r3, r3
 8001d38:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d3c:	b25b      	sxtb	r3, r3
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	733b      	strb	r3, [r7, #12]
 8001d42:	2300      	movs	r3, #0
 8001d44:	737b      	strb	r3, [r7, #13]
	uint8_t rxdata[2] = {};
 8001d46:	2300      	movs	r3, #0
 8001d48:	813b      	strh	r3, [r7, #8]
	DRV8305Select();
 8001d4a:	f000 f81d 	bl	8001d88 <DRV8305Select>
	HAL_SPI_TransmitReceive(&DRV8305_SPI_HANDLER, txdata, rxdata, 2, 1);
 8001d4e:	f107 0208 	add.w	r2, r7, #8
 8001d52:	f107 010c 	add.w	r1, r7, #12
 8001d56:	2301      	movs	r3, #1
 8001d58:	9300      	str	r3, [sp, #0]
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	4809      	ldr	r0, [pc, #36]	; (8001d84 <DRV8305Read+0x5c>)
 8001d5e:	f003 f937 	bl	8004fd0 <HAL_SPI_TransmitReceive>
	DRV8305Deselect();
 8001d62:	f000 f81d 	bl	8001da0 <DRV8305Deselect>
	return (((rxdata[0] & 0x07) << 8) | rxdata[1]);
 8001d66:	7a3b      	ldrb	r3, [r7, #8]
 8001d68:	021b      	lsls	r3, r3, #8
 8001d6a:	b21b      	sxth	r3, r3
 8001d6c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001d70:	b21a      	sxth	r2, r3
 8001d72:	7a7b      	ldrb	r3, [r7, #9]
 8001d74:	b21b      	sxth	r3, r3
 8001d76:	4313      	orrs	r3, r2
 8001d78:	b21b      	sxth	r3, r3
 8001d7a:	b29b      	uxth	r3, r3
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3710      	adds	r7, #16
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	20003630 	.word	0x20003630

08001d88 <DRV8305Select>:
/*
 * Select
 * @param
 * @return
 */
static void DRV8305Select(void) {
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DRV8305_CS_PORT, DRV8305_CS_PIN, GPIO_PIN_RESET);
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d92:	4802      	ldr	r0, [pc, #8]	; (8001d9c <DRV8305Select+0x14>)
 8001d94:	f002 fc48 	bl	8004628 <HAL_GPIO_WritePin>
}
 8001d98:	bf00      	nop
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	40020400 	.word	0x40020400

08001da0 <DRV8305Deselect>:
/*
 * Deselect
 * @param
 * @return
 */
static void DRV8305Deselect(void) {
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DRV8305_CS_PORT, DRV8305_CS_PIN, GPIO_PIN_SET);
 8001da4:	2201      	movs	r2, #1
 8001da6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001daa:	4802      	ldr	r0, [pc, #8]	; (8001db4 <DRV8305Deselect+0x14>)
 8001dac:	f002 fc3c 	bl	8004628 <HAL_GPIO_WritePin>
}
 8001db0:	bf00      	nop
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40020400 	.word	0x40020400

08001db8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b088      	sub	sp, #32
 8001dbc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dbe:	f107 030c 	add.w	r3, r7, #12
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	601a      	str	r2, [r3, #0]
 8001dc6:	605a      	str	r2, [r3, #4]
 8001dc8:	609a      	str	r2, [r3, #8]
 8001dca:	60da      	str	r2, [r3, #12]
 8001dcc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60bb      	str	r3, [r7, #8]
 8001dd2:	4b45      	ldr	r3, [pc, #276]	; (8001ee8 <MX_GPIO_Init+0x130>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd6:	4a44      	ldr	r2, [pc, #272]	; (8001ee8 <MX_GPIO_Init+0x130>)
 8001dd8:	f043 0304 	orr.w	r3, r3, #4
 8001ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dde:	4b42      	ldr	r3, [pc, #264]	; (8001ee8 <MX_GPIO_Init+0x130>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de2:	f003 0304 	and.w	r3, r3, #4
 8001de6:	60bb      	str	r3, [r7, #8]
 8001de8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dea:	2300      	movs	r3, #0
 8001dec:	607b      	str	r3, [r7, #4]
 8001dee:	4b3e      	ldr	r3, [pc, #248]	; (8001ee8 <MX_GPIO_Init+0x130>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	4a3d      	ldr	r2, [pc, #244]	; (8001ee8 <MX_GPIO_Init+0x130>)
 8001df4:	f043 0301 	orr.w	r3, r3, #1
 8001df8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dfa:	4b3b      	ldr	r3, [pc, #236]	; (8001ee8 <MX_GPIO_Init+0x130>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	607b      	str	r3, [r7, #4]
 8001e04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e06:	2300      	movs	r3, #0
 8001e08:	603b      	str	r3, [r7, #0]
 8001e0a:	4b37      	ldr	r3, [pc, #220]	; (8001ee8 <MX_GPIO_Init+0x130>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	4a36      	ldr	r2, [pc, #216]	; (8001ee8 <MX_GPIO_Init+0x130>)
 8001e10:	f043 0302 	orr.w	r3, r3, #2
 8001e14:	6313      	str	r3, [r2, #48]	; 0x30
 8001e16:	4b34      	ldr	r3, [pc, #208]	; (8001ee8 <MX_GPIO_Init+0x130>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	603b      	str	r3, [r7, #0]
 8001e20:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
 8001e22:	2200      	movs	r2, #0
 8001e24:	f248 11d0 	movw	r1, #33232	; 0x81d0
 8001e28:	4830      	ldr	r0, [pc, #192]	; (8001eec <MX_GPIO_Init+0x134>)
 8001e2a:	f002 fbfd 	bl	8004628 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12, GPIO_PIN_RESET);
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f241 0103 	movw	r1, #4099	; 0x1003
 8001e34:	482e      	ldr	r0, [pc, #184]	; (8001ef0 <MX_GPIO_Init+0x138>)
 8001e36:	f002 fbf7 	bl	8004628 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA6 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_8;
 8001e3a:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001e3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e40:	2301      	movs	r3, #1
 8001e42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e44:	2300      	movs	r3, #0
 8001e46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e4c:	f107 030c 	add.w	r3, r7, #12
 8001e50:	4619      	mov	r1, r3
 8001e52:	4826      	ldr	r0, [pc, #152]	; (8001eec <MX_GPIO_Init+0x134>)
 8001e54:	f002 fa36 	bl	80042c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA7 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_15;
 8001e58:	f248 0380 	movw	r3, #32896	; 0x8080
 8001e5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e62:	2300      	movs	r3, #0
 8001e64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e66:	2303      	movs	r3, #3
 8001e68:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e6a:	f107 030c 	add.w	r3, r7, #12
 8001e6e:	4619      	mov	r1, r3
 8001e70:	481e      	ldr	r0, [pc, #120]	; (8001eec <MX_GPIO_Init+0x134>)
 8001e72:	f002 fa27 	bl	80042c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12;
 8001e76:	f241 0303 	movw	r3, #4099	; 0x1003
 8001e7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e80:	2300      	movs	r3, #0
 8001e82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e84:	2303      	movs	r3, #3
 8001e86:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e88:	f107 030c 	add.w	r3, r7, #12
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	4818      	ldr	r0, [pc, #96]	; (8001ef0 <MX_GPIO_Init+0x138>)
 8001e90:	f002 fa18 	bl	80042c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001e94:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e98:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ea2:	f107 030c 	add.w	r3, r7, #12
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	4811      	ldr	r0, [pc, #68]	; (8001ef0 <MX_GPIO_Init+0x138>)
 8001eaa:	f002 fa0b 	bl	80042c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001eae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001eb2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ebc:	f107 030c 	add.w	r3, r7, #12
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	480c      	ldr	r0, [pc, #48]	; (8001ef4 <MX_GPIO_Init+0x13c>)
 8001ec4:	f002 f9fe 	bl	80042c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001ec8:	2380      	movs	r3, #128	; 0x80
 8001eca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ed4:	f107 030c 	add.w	r3, r7, #12
 8001ed8:	4619      	mov	r1, r3
 8001eda:	4805      	ldr	r0, [pc, #20]	; (8001ef0 <MX_GPIO_Init+0x138>)
 8001edc:	f002 f9f2 	bl	80042c4 <HAL_GPIO_Init>

}
 8001ee0:	bf00      	nop
 8001ee2:	3720      	adds	r7, #32
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	40023800 	.word	0x40023800
 8001eec:	40020000 	.word	0x40020000
 8001ef0:	40020400 	.word	0x40020400
 8001ef4:	40020800 	.word	0x40020800

08001ef8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6) {
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a0f      	ldr	r2, [pc, #60]	; (8001f44 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d118      	bne.n	8001f3c <HAL_TIM_PeriodElapsedCallback+0x44>
		static int32_t t = 0;

		BLDCVqConstControl(0, 2.0f);
 8001f0a:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001f0e:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8001f48 <HAL_TIM_PeriodElapsedCallback+0x50>
 8001f12:	f7ff fa2d 	bl	8001370 <BLDCVqConstControl>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);

		}
		*/

		if (t >= 5000) {
 8001f16:	4b0d      	ldr	r3, [pc, #52]	; (8001f4c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f241 3287 	movw	r2, #4999	; 0x1387
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	dd07      	ble.n	8001f32 <HAL_TIM_PeriodElapsedCallback+0x3a>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8001f22:	2140      	movs	r1, #64	; 0x40
 8001f24:	480a      	ldr	r0, [pc, #40]	; (8001f50 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001f26:	f002 fb98 	bl	800465a <HAL_GPIO_TogglePin>
			t = 0;
 8001f2a:	4b08      	ldr	r3, [pc, #32]	; (8001f4c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]
		} else {
			t++;
		}
	}
}
 8001f30:	e004      	b.n	8001f3c <HAL_TIM_PeriodElapsedCallback+0x44>
			t++;
 8001f32:	4b06      	ldr	r3, [pc, #24]	; (8001f4c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	3301      	adds	r3, #1
 8001f38:	4a04      	ldr	r2, [pc, #16]	; (8001f4c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001f3a:	6013      	str	r3, [r2, #0]
}
 8001f3c:	bf00      	nop
 8001f3e:	3708      	adds	r7, #8
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	40001000 	.word	0x40001000
 8001f48:	00000000 	.word	0x00000000
 8001f4c:	20000234 	.word	0x20000234
 8001f50:	40020000 	.word	0x40020000

08001f54 <__io_putchar>:
#ifdef __GNUC__
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
void __io_putchar(uint8_t ch) {
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	71fb      	strb	r3, [r7, #7]
	dma_printf_putc(ch);
 8001f5e:	79fb      	ldrb	r3, [r7, #7]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7ff fd7b 	bl	8001a5c <dma_printf_putc>
}
 8001f66:	bf00      	nop
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
	...

08001f70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f70:	b590      	push	{r4, r7, lr}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f76:	f000 ff31 	bl	8002ddc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f7a:	f000 f887 	bl	800208c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f7e:	f7ff ff1b 	bl	8001db8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001f82:	f7ff fd21 	bl	80019c8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001f86:	f000 fe1f 	bl	8002bc8 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8001f8a:	f000 f915 	bl	80021b8 <MX_SPI2_Init>
  MX_TIM8_Init();
 8001f8e:	f000 fbff 	bl	8002790 <MX_TIM8_Init>
  MX_SPI3_Init();
 8001f92:	f000 f947 	bl	8002224 <MX_SPI3_Init>
  MX_TIM6_Init();
 8001f96:	f000 fbc5 	bl	8002724 <MX_TIM6_Init>
  MX_ADC1_Init();
 8001f9a:	f7fe ffd5 	bl	8000f48 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001f9e:	f000 fb3d 	bl	800261c <MX_TIM2_Init>
  MX_ADC2_Init();
 8001fa2:	f7ff f83f 	bl	8001024 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  //wait after power on
  HAL_Delay(10);
 8001fa6:	200a      	movs	r0, #10
 8001fa8:	f000 ff8a 	bl	8002ec0 <HAL_Delay>

  //printf settings
  dma_printf_init(&huart1);
 8001fac:	482f      	ldr	r0, [pc, #188]	; (800206c <main+0xfc>)
 8001fae:	f7ff fd3b 	bl	8001a28 <dma_printf_init>
  setbuf(stdin, NULL);
 8001fb2:	4b2f      	ldr	r3, [pc, #188]	; (8002070 <main+0x100>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	2100      	movs	r1, #0
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f005 fe0e 	bl	8007bdc <setbuf>
  setbuf(stdout, NULL);
 8001fc0:	4b2b      	ldr	r3, [pc, #172]	; (8002070 <main+0x100>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	2100      	movs	r1, #0
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f005 fe07 	bl	8007bdc <setbuf>
  setbuf(stderr, NULL);
 8001fce:	4b28      	ldr	r3, [pc, #160]	; (8002070 <main+0x100>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f005 fe00 	bl	8007bdc <setbuf>
  printf("Hello BLDCDriver_v1!\n");
 8001fdc:	4825      	ldr	r0, [pc, #148]	; (8002074 <main+0x104>)
 8001fde:	f005 fdf5 	bl	8007bcc <puts>

  //dummy spi com(to avoid error at the first com)
  AS5147Read(AS5147_ANGLECOM);
 8001fe2:	f643 70ff 	movw	r0, #16383	; 0x3fff
 8001fe6:	f7ff f943 	bl	8001270 <AS5147Read>
  DRV8305Read(DRV8305_WARNING_WATCHDOG_RESET);
 8001fea:	2001      	movs	r0, #1
 8001fec:	f7ff fe9c 	bl	8001d28 <DRV8305Read>

  //current sense
  BLDCStartCurrentSense();
 8001ff0:	f7ff fca0 	bl	8001934 <BLDCStartCurrentSense>

  //Enable BLDC and initialize gate-driver
  BLDCEnable();		//must be run before DRV8305Init()
 8001ff4:	f7ff fcb6 	bl	8001964 <BLDCEnable>
  DRV8305Init();
 8001ff8:	f7ff fe46 	bl	8001c88 <DRV8305Init>

  while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_RESET);
 8001ffc:	bf00      	nop
 8001ffe:	2180      	movs	r1, #128	; 0x80
 8002000:	481d      	ldr	r0, [pc, #116]	; (8002078 <main+0x108>)
 8002002:	f002 faf9 	bl	80045f8 <HAL_GPIO_ReadPin>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d0f8      	beq.n	8001ffe <main+0x8e>
//  BLDCCalibZeroPos();


  //start timer interrupt
  HAL_TIM_Base_Start_IT(&htim6);
 800200c:	481b      	ldr	r0, [pc, #108]	; (800207c <main+0x10c>)
 800200e:	f003 fa58 	bl	80054c2 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (idx == 3000) {
 8002012:	4b1b      	ldr	r3, [pc, #108]	; (8002080 <main+0x110>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800201a:	4293      	cmp	r3, r2
 800201c:	d120      	bne.n	8002060 <main+0xf0>
		  for (int32_t i = 0; i < 3000; i++) {
 800201e:	2300      	movs	r3, #0
 8002020:	607b      	str	r3, [r7, #4]
 8002022:	e014      	b.n	800204e <main+0xde>
			  printf("%f\n", g_curt[i]);
 8002024:	4a17      	ldr	r2, [pc, #92]	; (8002084 <main+0x114>)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	4413      	add	r3, r2
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4618      	mov	r0, r3
 8002030:	f7fe fa8a 	bl	8000548 <__aeabi_f2d>
 8002034:	4603      	mov	r3, r0
 8002036:	460c      	mov	r4, r1
 8002038:	461a      	mov	r2, r3
 800203a:	4623      	mov	r3, r4
 800203c:	4812      	ldr	r0, [pc, #72]	; (8002088 <main+0x118>)
 800203e:	f005 fd51 	bl	8007ae4 <iprintf>
			  HAL_Delay(1);
 8002042:	2001      	movs	r0, #1
 8002044:	f000 ff3c 	bl	8002ec0 <HAL_Delay>
		  for (int32_t i = 0; i < 3000; i++) {
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	3301      	adds	r3, #1
 800204c:	607b      	str	r3, [r7, #4]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8002054:	4293      	cmp	r3, r2
 8002056:	dde5      	ble.n	8002024 <main+0xb4>
		  }
		  idx = 3001;
 8002058:	4b09      	ldr	r3, [pc, #36]	; (8002080 <main+0x110>)
 800205a:	f640 32b9 	movw	r2, #3001	; 0xbb9
 800205e:	601a      	str	r2, [r3, #0]
	  }
	  //LED
//	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
	  HAL_Delay(500);
 8002060:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002064:	f000 ff2c 	bl	8002ec0 <HAL_Delay>
	  if (idx == 3000) {
 8002068:	e7d3      	b.n	8002012 <main+0xa2>
 800206a:	bf00      	nop
 800206c:	20003984 	.word	0x20003984
 8002070:	20000014 	.word	0x20000014
 8002074:	0800a85c 	.word	0x0800a85c
 8002078:	40020400 	.word	0x40020400
 800207c:	20003720 	.word	0x20003720
 8002080:	20000204 	.word	0x20000204
 8002084:	2000033c 	.word	0x2000033c
 8002088:	0800a874 	.word	0x0800a874

0800208c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b094      	sub	sp, #80	; 0x50
 8002090:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002092:	f107 0320 	add.w	r3, r7, #32
 8002096:	2230      	movs	r2, #48	; 0x30
 8002098:	2100      	movs	r1, #0
 800209a:	4618      	mov	r0, r3
 800209c:	f005 f8be 	bl	800721c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020a0:	f107 030c 	add.w	r3, r7, #12
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	605a      	str	r2, [r3, #4]
 80020aa:	609a      	str	r2, [r3, #8]
 80020ac:	60da      	str	r2, [r3, #12]
 80020ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80020b0:	2300      	movs	r3, #0
 80020b2:	60bb      	str	r3, [r7, #8]
 80020b4:	4b28      	ldr	r3, [pc, #160]	; (8002158 <SystemClock_Config+0xcc>)
 80020b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b8:	4a27      	ldr	r2, [pc, #156]	; (8002158 <SystemClock_Config+0xcc>)
 80020ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020be:	6413      	str	r3, [r2, #64]	; 0x40
 80020c0:	4b25      	ldr	r3, [pc, #148]	; (8002158 <SystemClock_Config+0xcc>)
 80020c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c8:	60bb      	str	r3, [r7, #8]
 80020ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80020cc:	2300      	movs	r3, #0
 80020ce:	607b      	str	r3, [r7, #4]
 80020d0:	4b22      	ldr	r3, [pc, #136]	; (800215c <SystemClock_Config+0xd0>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a21      	ldr	r2, [pc, #132]	; (800215c <SystemClock_Config+0xd0>)
 80020d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020da:	6013      	str	r3, [r2, #0]
 80020dc:	4b1f      	ldr	r3, [pc, #124]	; (800215c <SystemClock_Config+0xd0>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020e4:	607b      	str	r3, [r7, #4]
 80020e6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80020e8:	2302      	movs	r3, #2
 80020ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020ec:	2301      	movs	r3, #1
 80020ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80020f0:	2310      	movs	r3, #16
 80020f2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020f4:	2302      	movs	r3, #2
 80020f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80020f8:	2300      	movs	r3, #0
 80020fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80020fc:	2308      	movs	r3, #8
 80020fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002100:	2364      	movs	r3, #100	; 0x64
 8002102:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002104:	2302      	movs	r3, #2
 8002106:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002108:	2304      	movs	r3, #4
 800210a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800210c:	f107 0320 	add.w	r3, r7, #32
 8002110:	4618      	mov	r0, r3
 8002112:	f002 fabd 	bl	8004690 <HAL_RCC_OscConfig>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800211c:	f000 f844 	bl	80021a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002120:	230f      	movs	r3, #15
 8002122:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002124:	2302      	movs	r3, #2
 8002126:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002128:	2300      	movs	r3, #0
 800212a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800212c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002130:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002132:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002136:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002138:	f107 030c 	add.w	r3, r7, #12
 800213c:	2103      	movs	r1, #3
 800213e:	4618      	mov	r0, r3
 8002140:	f002 fd16 	bl	8004b70 <HAL_RCC_ClockConfig>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800214a:	f000 f82d 	bl	80021a8 <Error_Handler>
  }
}
 800214e:	bf00      	nop
 8002150:	3750      	adds	r7, #80	; 0x50
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	40023800 	.word	0x40023800
 800215c:	40007000 	.word	0x40007000

08002160 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
//UART Callback for printf(...)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle) {
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
	uart_flag=1;
 8002168:	4b05      	ldr	r3, [pc, #20]	; (8002180 <HAL_UART_RxCpltCallback+0x20>)
 800216a:	2201      	movs	r2, #1
 800216c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart1, uart_buf, 4);
 800216e:	2204      	movs	r2, #4
 8002170:	4904      	ldr	r1, [pc, #16]	; (8002184 <HAL_UART_RxCpltCallback+0x24>)
 8002172:	4805      	ldr	r0, [pc, #20]	; (8002188 <HAL_UART_RxCpltCallback+0x28>)
 8002174:	f004 f91f 	bl	80063b6 <HAL_UART_Receive_IT>
}
 8002178:	bf00      	nop
 800217a:	3708      	adds	r7, #8
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	20000230 	.word	0x20000230
 8002184:	20000000 	.word	0x20000000
 8002188:	20003984 	.word	0x20003984

0800218c <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
    uart_com_send_it(huart);
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f000 fc61 	bl	8002a5c <uart_com_send_it>
    dma_printf_send_it(huart);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f7ff fc90 	bl	8001ac0 <dma_printf_send_it>
}
 80021a0:	bf00      	nop
 80021a2:	3708      	adds	r7, #8
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80021ac:	bf00      	nop
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
	...

080021b8 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 80021bc:	4b17      	ldr	r3, [pc, #92]	; (800221c <MX_SPI2_Init+0x64>)
 80021be:	4a18      	ldr	r2, [pc, #96]	; (8002220 <MX_SPI2_Init+0x68>)
 80021c0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80021c2:	4b16      	ldr	r3, [pc, #88]	; (800221c <MX_SPI2_Init+0x64>)
 80021c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80021c8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80021ca:	4b14      	ldr	r3, [pc, #80]	; (800221c <MX_SPI2_Init+0x64>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80021d0:	4b12      	ldr	r3, [pc, #72]	; (800221c <MX_SPI2_Init+0x64>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80021d6:	4b11      	ldr	r3, [pc, #68]	; (800221c <MX_SPI2_Init+0x64>)
 80021d8:	2200      	movs	r2, #0
 80021da:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80021dc:	4b0f      	ldr	r3, [pc, #60]	; (800221c <MX_SPI2_Init+0x64>)
 80021de:	2201      	movs	r2, #1
 80021e0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80021e2:	4b0e      	ldr	r3, [pc, #56]	; (800221c <MX_SPI2_Init+0x64>)
 80021e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021e8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80021ea:	4b0c      	ldr	r3, [pc, #48]	; (800221c <MX_SPI2_Init+0x64>)
 80021ec:	2218      	movs	r2, #24
 80021ee:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021f0:	4b0a      	ldr	r3, [pc, #40]	; (800221c <MX_SPI2_Init+0x64>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80021f6:	4b09      	ldr	r3, [pc, #36]	; (800221c <MX_SPI2_Init+0x64>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021fc:	4b07      	ldr	r3, [pc, #28]	; (800221c <MX_SPI2_Init+0x64>)
 80021fe:	2200      	movs	r2, #0
 8002200:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002202:	4b06      	ldr	r3, [pc, #24]	; (800221c <MX_SPI2_Init+0x64>)
 8002204:	220a      	movs	r2, #10
 8002206:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002208:	4804      	ldr	r0, [pc, #16]	; (800221c <MX_SPI2_Init+0x64>)
 800220a:	f002 fe7d 	bl	8004f08 <HAL_SPI_Init>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002214:	f7ff ffc8 	bl	80021a8 <Error_Handler>
  }

}
 8002218:	bf00      	nop
 800221a:	bd80      	pop	{r7, pc}
 800221c:	20003630 	.word	0x20003630
 8002220:	40003800 	.word	0x40003800

08002224 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8002228:	4b17      	ldr	r3, [pc, #92]	; (8002288 <MX_SPI3_Init+0x64>)
 800222a:	4a18      	ldr	r2, [pc, #96]	; (800228c <MX_SPI3_Init+0x68>)
 800222c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800222e:	4b16      	ldr	r3, [pc, #88]	; (8002288 <MX_SPI3_Init+0x64>)
 8002230:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002234:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002236:	4b14      	ldr	r3, [pc, #80]	; (8002288 <MX_SPI3_Init+0x64>)
 8002238:	2200      	movs	r2, #0
 800223a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800223c:	4b12      	ldr	r3, [pc, #72]	; (8002288 <MX_SPI3_Init+0x64>)
 800223e:	2200      	movs	r2, #0
 8002240:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002242:	4b11      	ldr	r3, [pc, #68]	; (8002288 <MX_SPI3_Init+0x64>)
 8002244:	2200      	movs	r2, #0
 8002246:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002248:	4b0f      	ldr	r3, [pc, #60]	; (8002288 <MX_SPI3_Init+0x64>)
 800224a:	2201      	movs	r2, #1
 800224c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800224e:	4b0e      	ldr	r3, [pc, #56]	; (8002288 <MX_SPI3_Init+0x64>)
 8002250:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002254:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002256:	4b0c      	ldr	r3, [pc, #48]	; (8002288 <MX_SPI3_Init+0x64>)
 8002258:	2208      	movs	r2, #8
 800225a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800225c:	4b0a      	ldr	r3, [pc, #40]	; (8002288 <MX_SPI3_Init+0x64>)
 800225e:	2200      	movs	r2, #0
 8002260:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002262:	4b09      	ldr	r3, [pc, #36]	; (8002288 <MX_SPI3_Init+0x64>)
 8002264:	2200      	movs	r2, #0
 8002266:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002268:	4b07      	ldr	r3, [pc, #28]	; (8002288 <MX_SPI3_Init+0x64>)
 800226a:	2200      	movs	r2, #0
 800226c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800226e:	4b06      	ldr	r3, [pc, #24]	; (8002288 <MX_SPI3_Init+0x64>)
 8002270:	220a      	movs	r2, #10
 8002272:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002274:	4804      	ldr	r0, [pc, #16]	; (8002288 <MX_SPI3_Init+0x64>)
 8002276:	f002 fe47 	bl	8004f08 <HAL_SPI_Init>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8002280:	f7ff ff92 	bl	80021a8 <Error_Handler>
  }

}
 8002284:	bf00      	nop
 8002286:	bd80      	pop	{r7, pc}
 8002288:	20003688 	.word	0x20003688
 800228c:	40003c00 	.word	0x40003c00

08002290 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b08c      	sub	sp, #48	; 0x30
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002298:	f107 031c 	add.w	r3, r7, #28
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	605a      	str	r2, [r3, #4]
 80022a2:	609a      	str	r2, [r3, #8]
 80022a4:	60da      	str	r2, [r3, #12]
 80022a6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a33      	ldr	r2, [pc, #204]	; (800237c <HAL_SPI_MspInit+0xec>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d12d      	bne.n	800230e <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80022b2:	2300      	movs	r3, #0
 80022b4:	61bb      	str	r3, [r7, #24]
 80022b6:	4b32      	ldr	r3, [pc, #200]	; (8002380 <HAL_SPI_MspInit+0xf0>)
 80022b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ba:	4a31      	ldr	r2, [pc, #196]	; (8002380 <HAL_SPI_MspInit+0xf0>)
 80022bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022c0:	6413      	str	r3, [r2, #64]	; 0x40
 80022c2:	4b2f      	ldr	r3, [pc, #188]	; (8002380 <HAL_SPI_MspInit+0xf0>)
 80022c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022ca:	61bb      	str	r3, [r7, #24]
 80022cc:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ce:	2300      	movs	r3, #0
 80022d0:	617b      	str	r3, [r7, #20]
 80022d2:	4b2b      	ldr	r3, [pc, #172]	; (8002380 <HAL_SPI_MspInit+0xf0>)
 80022d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d6:	4a2a      	ldr	r2, [pc, #168]	; (8002380 <HAL_SPI_MspInit+0xf0>)
 80022d8:	f043 0302 	orr.w	r3, r3, #2
 80022dc:	6313      	str	r3, [r2, #48]	; 0x30
 80022de:	4b28      	ldr	r3, [pc, #160]	; (8002380 <HAL_SPI_MspInit+0xf0>)
 80022e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	617b      	str	r3, [r7, #20]
 80022e8:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80022ea:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80022ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f0:	2302      	movs	r3, #2
 80022f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f4:	2300      	movs	r3, #0
 80022f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022f8:	2303      	movs	r3, #3
 80022fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80022fc:	2305      	movs	r3, #5
 80022fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002300:	f107 031c 	add.w	r3, r7, #28
 8002304:	4619      	mov	r1, r3
 8002306:	481f      	ldr	r0, [pc, #124]	; (8002384 <HAL_SPI_MspInit+0xf4>)
 8002308:	f001 ffdc 	bl	80042c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800230c:	e031      	b.n	8002372 <HAL_SPI_MspInit+0xe2>
  else if(spiHandle->Instance==SPI3)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a1d      	ldr	r2, [pc, #116]	; (8002388 <HAL_SPI_MspInit+0xf8>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d12c      	bne.n	8002372 <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002318:	2300      	movs	r3, #0
 800231a:	613b      	str	r3, [r7, #16]
 800231c:	4b18      	ldr	r3, [pc, #96]	; (8002380 <HAL_SPI_MspInit+0xf0>)
 800231e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002320:	4a17      	ldr	r2, [pc, #92]	; (8002380 <HAL_SPI_MspInit+0xf0>)
 8002322:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002326:	6413      	str	r3, [r2, #64]	; 0x40
 8002328:	4b15      	ldr	r3, [pc, #84]	; (8002380 <HAL_SPI_MspInit+0xf0>)
 800232a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002330:	613b      	str	r3, [r7, #16]
 8002332:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002334:	2300      	movs	r3, #0
 8002336:	60fb      	str	r3, [r7, #12]
 8002338:	4b11      	ldr	r3, [pc, #68]	; (8002380 <HAL_SPI_MspInit+0xf0>)
 800233a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233c:	4a10      	ldr	r2, [pc, #64]	; (8002380 <HAL_SPI_MspInit+0xf0>)
 800233e:	f043 0304 	orr.w	r3, r3, #4
 8002342:	6313      	str	r3, [r2, #48]	; 0x30
 8002344:	4b0e      	ldr	r3, [pc, #56]	; (8002380 <HAL_SPI_MspInit+0xf0>)
 8002346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002348:	f003 0304 	and.w	r3, r3, #4
 800234c:	60fb      	str	r3, [r7, #12]
 800234e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002350:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002354:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002356:	2302      	movs	r3, #2
 8002358:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235a:	2300      	movs	r3, #0
 800235c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800235e:	2303      	movs	r3, #3
 8002360:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002362:	2306      	movs	r3, #6
 8002364:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002366:	f107 031c 	add.w	r3, r7, #28
 800236a:	4619      	mov	r1, r3
 800236c:	4807      	ldr	r0, [pc, #28]	; (800238c <HAL_SPI_MspInit+0xfc>)
 800236e:	f001 ffa9 	bl	80042c4 <HAL_GPIO_Init>
}
 8002372:	bf00      	nop
 8002374:	3730      	adds	r7, #48	; 0x30
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	40003800 	.word	0x40003800
 8002380:	40023800 	.word	0x40023800
 8002384:	40020400 	.word	0x40020400
 8002388:	40003c00 	.word	0x40003c00
 800238c:	40020800 	.word	0x40020800

08002390 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002396:	2300      	movs	r3, #0
 8002398:	607b      	str	r3, [r7, #4]
 800239a:	4b10      	ldr	r3, [pc, #64]	; (80023dc <HAL_MspInit+0x4c>)
 800239c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800239e:	4a0f      	ldr	r2, [pc, #60]	; (80023dc <HAL_MspInit+0x4c>)
 80023a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023a4:	6453      	str	r3, [r2, #68]	; 0x44
 80023a6:	4b0d      	ldr	r3, [pc, #52]	; (80023dc <HAL_MspInit+0x4c>)
 80023a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023ae:	607b      	str	r3, [r7, #4]
 80023b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023b2:	2300      	movs	r3, #0
 80023b4:	603b      	str	r3, [r7, #0]
 80023b6:	4b09      	ldr	r3, [pc, #36]	; (80023dc <HAL_MspInit+0x4c>)
 80023b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ba:	4a08      	ldr	r2, [pc, #32]	; (80023dc <HAL_MspInit+0x4c>)
 80023bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023c0:	6413      	str	r3, [r2, #64]	; 0x40
 80023c2:	4b06      	ldr	r3, [pc, #24]	; (80023dc <HAL_MspInit+0x4c>)
 80023c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ca:	603b      	str	r3, [r7, #0]
 80023cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023ce:	bf00      	nop
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	40023800 	.word	0x40023800

080023e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80023e4:	bf00      	nop
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr

080023ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023ee:	b480      	push	{r7}
 80023f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023f2:	e7fe      	b.n	80023f2 <HardFault_Handler+0x4>

080023f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023f8:	e7fe      	b.n	80023f8 <MemManage_Handler+0x4>

080023fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023fa:	b480      	push	{r7}
 80023fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023fe:	e7fe      	b.n	80023fe <BusFault_Handler+0x4>

08002400 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002404:	e7fe      	b.n	8002404 <UsageFault_Handler+0x4>

08002406 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002406:	b480      	push	{r7}
 8002408:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800240a:	bf00      	nop
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002418:	bf00      	nop
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr

08002422 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002422:	b480      	push	{r7}
 8002424:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002426:	bf00      	nop
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002434:	f000 fd24 	bl	8002e80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002438:	bf00      	nop
 800243a:	bd80      	pop	{r7, pc}

0800243c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002440:	4803      	ldr	r0, [pc, #12]	; (8002450 <ADC_IRQHandler+0x14>)
 8002442:	f000 fda2 	bl	8002f8a <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8002446:	4803      	ldr	r0, [pc, #12]	; (8002454 <ADC_IRQHandler+0x18>)
 8002448:	f000 fd9f 	bl	8002f8a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800244c:	bf00      	nop
 800244e:	bd80      	pop	{r7, pc}
 8002450:	20000294 	.word	0x20000294
 8002454:	2000024c 	.word	0x2000024c

08002458 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800245c:	4802      	ldr	r0, [pc, #8]	; (8002468 <USART1_IRQHandler+0x10>)
 800245e:	f004 f86b 	bl	8006538 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002462:	bf00      	nop
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	20003984 	.word	0x20003984

0800246c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002470:	4802      	ldr	r0, [pc, #8]	; (800247c <TIM6_DAC_IRQHandler+0x10>)
 8002472:	f003 f8b3 	bl	80055dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002476:	bf00      	nop
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	20003720 	.word	0x20003720

08002480 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002484:	4802      	ldr	r0, [pc, #8]	; (8002490 <DMA2_Stream0_IRQHandler+0x10>)
 8002486:	f001 fcb5 	bl	8003df4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800248a:	bf00      	nop
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	200002dc 	.word	0x200002dc

08002494 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002498:	4802      	ldr	r0, [pc, #8]	; (80024a4 <DMA2_Stream2_IRQHandler+0x10>)
 800249a:	f001 fcab 	bl	8003df4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800249e:	bf00      	nop
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	20003924 	.word	0x20003924

080024a8 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80024ac:	4802      	ldr	r0, [pc, #8]	; (80024b8 <DMA2_Stream7_IRQHandler+0x10>)
 80024ae:	f001 fca1 	bl	8003df4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80024b2:	bf00      	nop
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	200038c4 	.word	0x200038c4

080024bc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b086      	sub	sp, #24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024c8:	2300      	movs	r3, #0
 80024ca:	617b      	str	r3, [r7, #20]
 80024cc:	e00a      	b.n	80024e4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80024ce:	f3af 8000 	nop.w
 80024d2:	4601      	mov	r1, r0
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	1c5a      	adds	r2, r3, #1
 80024d8:	60ba      	str	r2, [r7, #8]
 80024da:	b2ca      	uxtb	r2, r1
 80024dc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	3301      	adds	r3, #1
 80024e2:	617b      	str	r3, [r7, #20]
 80024e4:	697a      	ldr	r2, [r7, #20]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	dbf0      	blt.n	80024ce <_read+0x12>
	}

return len;
 80024ec:	687b      	ldr	r3, [r7, #4]
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3718      	adds	r7, #24
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b086      	sub	sp, #24
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	60f8      	str	r0, [r7, #12]
 80024fe:	60b9      	str	r1, [r7, #8]
 8002500:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002502:	2300      	movs	r3, #0
 8002504:	617b      	str	r3, [r7, #20]
 8002506:	e009      	b.n	800251c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	1c5a      	adds	r2, r3, #1
 800250c:	60ba      	str	r2, [r7, #8]
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	4618      	mov	r0, r3
 8002512:	f7ff fd1f 	bl	8001f54 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	3301      	adds	r3, #1
 800251a:	617b      	str	r3, [r7, #20]
 800251c:	697a      	ldr	r2, [r7, #20]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	429a      	cmp	r2, r3
 8002522:	dbf1      	blt.n	8002508 <_write+0x12>
	}
	return len;
 8002524:	687b      	ldr	r3, [r7, #4]
}
 8002526:	4618      	mov	r0, r3
 8002528:	3718      	adds	r7, #24
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <_close>:

int _close(int file)
{
 800252e:	b480      	push	{r7}
 8002530:	b083      	sub	sp, #12
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
	return -1;
 8002536:	f04f 33ff 	mov.w	r3, #4294967295
}
 800253a:	4618      	mov	r0, r3
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr

08002546 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002546:	b480      	push	{r7}
 8002548:	b083      	sub	sp, #12
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
 800254e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002556:	605a      	str	r2, [r3, #4]
	return 0;
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr

08002566 <_isatty>:

int _isatty(int file)
{
 8002566:	b480      	push	{r7}
 8002568:	b083      	sub	sp, #12
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
	return 1;
 800256e:	2301      	movs	r3, #1
}
 8002570:	4618      	mov	r0, r3
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800257c:	b480      	push	{r7}
 800257e:	b085      	sub	sp, #20
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	607a      	str	r2, [r7, #4]
	return 0;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3714      	adds	r7, #20
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
	...

08002598 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80025a0:	4b11      	ldr	r3, [pc, #68]	; (80025e8 <_sbrk+0x50>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d102      	bne.n	80025ae <_sbrk+0x16>
		heap_end = &end;
 80025a8:	4b0f      	ldr	r3, [pc, #60]	; (80025e8 <_sbrk+0x50>)
 80025aa:	4a10      	ldr	r2, [pc, #64]	; (80025ec <_sbrk+0x54>)
 80025ac:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80025ae:	4b0e      	ldr	r3, [pc, #56]	; (80025e8 <_sbrk+0x50>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80025b4:	4b0c      	ldr	r3, [pc, #48]	; (80025e8 <_sbrk+0x50>)
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	4413      	add	r3, r2
 80025bc:	466a      	mov	r2, sp
 80025be:	4293      	cmp	r3, r2
 80025c0:	d907      	bls.n	80025d2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80025c2:	f004 fe01 	bl	80071c8 <__errno>
 80025c6:	4602      	mov	r2, r0
 80025c8:	230c      	movs	r3, #12
 80025ca:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80025cc:	f04f 33ff 	mov.w	r3, #4294967295
 80025d0:	e006      	b.n	80025e0 <_sbrk+0x48>
	}

	heap_end += incr;
 80025d2:	4b05      	ldr	r3, [pc, #20]	; (80025e8 <_sbrk+0x50>)
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4413      	add	r3, r2
 80025da:	4a03      	ldr	r2, [pc, #12]	; (80025e8 <_sbrk+0x50>)
 80025dc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80025de:	68fb      	ldr	r3, [r7, #12]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3710      	adds	r7, #16
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	20000238 	.word	0x20000238
 80025ec:	200039d0 	.word	0x200039d0

080025f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025f4:	4b08      	ldr	r3, [pc, #32]	; (8002618 <SystemInit+0x28>)
 80025f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025fa:	4a07      	ldr	r2, [pc, #28]	; (8002618 <SystemInit+0x28>)
 80025fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002600:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002604:	4b04      	ldr	r3, [pc, #16]	; (8002618 <SystemInit+0x28>)
 8002606:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800260a:	609a      	str	r2, [r3, #8]
#endif
}
 800260c:	bf00      	nop
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	e000ed00 	.word	0xe000ed00

0800261c <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b08e      	sub	sp, #56	; 0x38
 8002620:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002622:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002626:	2200      	movs	r2, #0
 8002628:	601a      	str	r2, [r3, #0]
 800262a:	605a      	str	r2, [r3, #4]
 800262c:	609a      	str	r2, [r3, #8]
 800262e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002630:	f107 0320 	add.w	r3, r7, #32
 8002634:	2200      	movs	r2, #0
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800263a:	1d3b      	adds	r3, r7, #4
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]
 8002640:	605a      	str	r2, [r3, #4]
 8002642:	609a      	str	r2, [r3, #8]
 8002644:	60da      	str	r2, [r3, #12]
 8002646:	611a      	str	r2, [r3, #16]
 8002648:	615a      	str	r2, [r3, #20]
 800264a:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 800264c:	4b34      	ldr	r3, [pc, #208]	; (8002720 <MX_TIM2_Init+0x104>)
 800264e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002652:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 50000-1;
 8002654:	4b32      	ldr	r3, [pc, #200]	; (8002720 <MX_TIM2_Init+0x104>)
 8002656:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800265a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800265c:	4b30      	ldr	r3, [pc, #192]	; (8002720 <MX_TIM2_Init+0x104>)
 800265e:	2220      	movs	r2, #32
 8002660:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 500-1;
 8002662:	4b2f      	ldr	r3, [pc, #188]	; (8002720 <MX_TIM2_Init+0x104>)
 8002664:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002668:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800266a:	4b2d      	ldr	r3, [pc, #180]	; (8002720 <MX_TIM2_Init+0x104>)
 800266c:	2200      	movs	r2, #0
 800266e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002670:	4b2b      	ldr	r3, [pc, #172]	; (8002720 <MX_TIM2_Init+0x104>)
 8002672:	2280      	movs	r2, #128	; 0x80
 8002674:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002676:	482a      	ldr	r0, [pc, #168]	; (8002720 <MX_TIM2_Init+0x104>)
 8002678:	f002 fef8 	bl	800546c <HAL_TIM_Base_Init>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002682:	f7ff fd91 	bl	80021a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002686:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800268a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800268c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002690:	4619      	mov	r1, r3
 8002692:	4823      	ldr	r0, [pc, #140]	; (8002720 <MX_TIM2_Init+0x104>)
 8002694:	f003 f970 	bl	8005978 <HAL_TIM_ConfigClockSource>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800269e:	f7ff fd83 	bl	80021a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80026a2:	481f      	ldr	r0, [pc, #124]	; (8002720 <MX_TIM2_Init+0x104>)
 80026a4:	f002 ff31 	bl	800550a <HAL_TIM_PWM_Init>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80026ae:	f7ff fd7b 	bl	80021a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 80026b2:	2350      	movs	r3, #80	; 0x50
 80026b4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026b6:	2300      	movs	r3, #0
 80026b8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80026ba:	f107 0320 	add.w	r3, r7, #32
 80026be:	4619      	mov	r1, r3
 80026c0:	4817      	ldr	r0, [pc, #92]	; (8002720 <MX_TIM2_Init+0x104>)
 80026c2:	f003 fd49 	bl	8006158 <HAL_TIMEx_MasterConfigSynchronization>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d001      	beq.n	80026d0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80026cc:	f7ff fd6c 	bl	80021a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026d0:	2360      	movs	r3, #96	; 0x60
 80026d2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80026d4:	2300      	movs	r3, #0
 80026d6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026d8:	2300      	movs	r3, #0
 80026da:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026dc:	2300      	movs	r3, #0
 80026de:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026e0:	1d3b      	adds	r3, r7, #4
 80026e2:	2200      	movs	r2, #0
 80026e4:	4619      	mov	r1, r3
 80026e6:	480e      	ldr	r0, [pc, #56]	; (8002720 <MX_TIM2_Init+0x104>)
 80026e8:	f003 f880 	bl	80057ec <HAL_TIM_PWM_ConfigChannel>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80026f2:	f7ff fd59 	bl	80021a8 <Error_Handler>
  }
  sConfigOC.Pulse = 498;
 80026f6:	f44f 73f9 	mov.w	r3, #498	; 0x1f2
 80026fa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80026fc:	1d3b      	adds	r3, r7, #4
 80026fe:	2204      	movs	r2, #4
 8002700:	4619      	mov	r1, r3
 8002702:	4807      	ldr	r0, [pc, #28]	; (8002720 <MX_TIM2_Init+0x104>)
 8002704:	f003 f872 	bl	80057ec <HAL_TIM_PWM_ConfigChannel>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <MX_TIM2_Init+0xf6>
  {
    Error_Handler();
 800270e:	f7ff fd4b 	bl	80021a8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8002712:	4803      	ldr	r0, [pc, #12]	; (8002720 <MX_TIM2_Init+0x104>)
 8002714:	f000 f942 	bl	800299c <HAL_TIM_MspPostInit>

}
 8002718:	bf00      	nop
 800271a:	3738      	adds	r7, #56	; 0x38
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	20003760 	.word	0x20003760

08002724 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800272a:	463b      	mov	r3, r7
 800272c:	2200      	movs	r2, #0
 800272e:	601a      	str	r2, [r3, #0]
 8002730:	605a      	str	r2, [r3, #4]

  htim6.Instance = TIM6;
 8002732:	4b15      	ldr	r3, [pc, #84]	; (8002788 <MX_TIM6_Init+0x64>)
 8002734:	4a15      	ldr	r2, [pc, #84]	; (800278c <MX_TIM6_Init+0x68>)
 8002736:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8002738:	4b13      	ldr	r3, [pc, #76]	; (8002788 <MX_TIM6_Init+0x64>)
 800273a:	2200      	movs	r2, #0
 800273c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800273e:	4b12      	ldr	r3, [pc, #72]	; (8002788 <MX_TIM6_Init+0x64>)
 8002740:	2200      	movs	r2, #0
 8002742:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 5000;
 8002744:	4b10      	ldr	r3, [pc, #64]	; (8002788 <MX_TIM6_Init+0x64>)
 8002746:	f241 3288 	movw	r2, #5000	; 0x1388
 800274a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800274c:	4b0e      	ldr	r3, [pc, #56]	; (8002788 <MX_TIM6_Init+0x64>)
 800274e:	2200      	movs	r2, #0
 8002750:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002752:	480d      	ldr	r0, [pc, #52]	; (8002788 <MX_TIM6_Init+0x64>)
 8002754:	f002 fe8a 	bl	800546c <HAL_TIM_Base_Init>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800275e:	f7ff fd23 	bl	80021a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002762:	2300      	movs	r3, #0
 8002764:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002766:	2300      	movs	r3, #0
 8002768:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800276a:	463b      	mov	r3, r7
 800276c:	4619      	mov	r1, r3
 800276e:	4806      	ldr	r0, [pc, #24]	; (8002788 <MX_TIM6_Init+0x64>)
 8002770:	f003 fcf2 	bl	8006158 <HAL_TIMEx_MasterConfigSynchronization>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800277a:	f7ff fd15 	bl	80021a8 <Error_Handler>
  }

}
 800277e:	bf00      	nop
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	20003720 	.word	0x20003720
 800278c:	40001000 	.word	0x40001000

08002790 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b092      	sub	sp, #72	; 0x48
 8002794:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002796:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800279a:	2200      	movs	r2, #0
 800279c:	601a      	str	r2, [r3, #0]
 800279e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027a4:	2200      	movs	r2, #0
 80027a6:	601a      	str	r2, [r3, #0]
 80027a8:	605a      	str	r2, [r3, #4]
 80027aa:	609a      	str	r2, [r3, #8]
 80027ac:	60da      	str	r2, [r3, #12]
 80027ae:	611a      	str	r2, [r3, #16]
 80027b0:	615a      	str	r2, [r3, #20]
 80027b2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80027b4:	1d3b      	adds	r3, r7, #4
 80027b6:	2220      	movs	r2, #32
 80027b8:	2100      	movs	r1, #0
 80027ba:	4618      	mov	r0, r3
 80027bc:	f004 fd2e 	bl	800721c <memset>

  htim8.Instance = TIM8;
 80027c0:	4b45      	ldr	r3, [pc, #276]	; (80028d8 <MX_TIM8_Init+0x148>)
 80027c2:	4a46      	ldr	r2, [pc, #280]	; (80028dc <MX_TIM8_Init+0x14c>)
 80027c4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80027c6:	4b44      	ldr	r3, [pc, #272]	; (80028d8 <MX_TIM8_Init+0x148>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80027cc:	4b42      	ldr	r3, [pc, #264]	; (80028d8 <MX_TIM8_Init+0x148>)
 80027ce:	2220      	movs	r2, #32
 80027d0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1250-1;
 80027d2:	4b41      	ldr	r3, [pc, #260]	; (80028d8 <MX_TIM8_Init+0x148>)
 80027d4:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80027d8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027da:	4b3f      	ldr	r3, [pc, #252]	; (80028d8 <MX_TIM8_Init+0x148>)
 80027dc:	2200      	movs	r2, #0
 80027de:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80027e0:	4b3d      	ldr	r3, [pc, #244]	; (80028d8 <MX_TIM8_Init+0x148>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027e6:	4b3c      	ldr	r3, [pc, #240]	; (80028d8 <MX_TIM8_Init+0x148>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80027ec:	483a      	ldr	r0, [pc, #232]	; (80028d8 <MX_TIM8_Init+0x148>)
 80027ee:	f002 fe8c 	bl	800550a <HAL_TIM_PWM_Init>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 80027f8:	f7ff fcd6 	bl	80021a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 80027fc:	2370      	movs	r3, #112	; 0x70
 80027fe:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002800:	2300      	movs	r3, #0
 8002802:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002804:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002808:	4619      	mov	r1, r3
 800280a:	4833      	ldr	r0, [pc, #204]	; (80028d8 <MX_TIM8_Init+0x148>)
 800280c:	f003 fca4 	bl	8006158 <HAL_TIMEx_MasterConfigSynchronization>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8002816:	f7ff fcc7 	bl	80021a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800281a:	2360      	movs	r3, #96	; 0x60
 800281c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800281e:	2300      	movs	r3, #0
 8002820:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002822:	2300      	movs	r3, #0
 8002824:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002826:	2300      	movs	r3, #0
 8002828:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800282a:	2300      	movs	r3, #0
 800282c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800282e:	2300      	movs	r3, #0
 8002830:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002832:	2300      	movs	r3, #0
 8002834:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002836:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800283a:	2200      	movs	r2, #0
 800283c:	4619      	mov	r1, r3
 800283e:	4826      	ldr	r0, [pc, #152]	; (80028d8 <MX_TIM8_Init+0x148>)
 8002840:	f002 ffd4 	bl	80057ec <HAL_TIM_PWM_ConfigChannel>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 800284a:	f7ff fcad 	bl	80021a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800284e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002852:	2204      	movs	r2, #4
 8002854:	4619      	mov	r1, r3
 8002856:	4820      	ldr	r0, [pc, #128]	; (80028d8 <MX_TIM8_Init+0x148>)
 8002858:	f002 ffc8 	bl	80057ec <HAL_TIM_PWM_ConfigChannel>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 8002862:	f7ff fca1 	bl	80021a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002866:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800286a:	2208      	movs	r2, #8
 800286c:	4619      	mov	r1, r3
 800286e:	481a      	ldr	r0, [pc, #104]	; (80028d8 <MX_TIM8_Init+0x148>)
 8002870:	f002 ffbc 	bl	80057ec <HAL_TIM_PWM_ConfigChannel>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d001      	beq.n	800287e <MX_TIM8_Init+0xee>
  {
    Error_Handler();
 800287a:	f7ff fc95 	bl	80021a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800287e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002882:	220c      	movs	r2, #12
 8002884:	4619      	mov	r1, r3
 8002886:	4814      	ldr	r0, [pc, #80]	; (80028d8 <MX_TIM8_Init+0x148>)
 8002888:	f002 ffb0 	bl	80057ec <HAL_TIM_PWM_ConfigChannel>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <MX_TIM8_Init+0x106>
  {
    Error_Handler();
 8002892:	f7ff fc89 	bl	80021a8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002896:	2300      	movs	r3, #0
 8002898:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800289a:	2300      	movs	r3, #0
 800289c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800289e:	2300      	movs	r3, #0
 80028a0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80028a2:	2300      	movs	r3, #0
 80028a4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80028a6:	2300      	movs	r3, #0
 80028a8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80028aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028ae:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80028b0:	2300      	movs	r3, #0
 80028b2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80028b4:	1d3b      	adds	r3, r7, #4
 80028b6:	4619      	mov	r1, r3
 80028b8:	4807      	ldr	r0, [pc, #28]	; (80028d8 <MX_TIM8_Init+0x148>)
 80028ba:	f003 fcc9 	bl	8006250 <HAL_TIMEx_ConfigBreakDeadTime>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d001      	beq.n	80028c8 <MX_TIM8_Init+0x138>
  {
    Error_Handler();
 80028c4:	f7ff fc70 	bl	80021a8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 80028c8:	4803      	ldr	r0, [pc, #12]	; (80028d8 <MX_TIM8_Init+0x148>)
 80028ca:	f000 f867 	bl	800299c <HAL_TIM_MspPostInit>

}
 80028ce:	bf00      	nop
 80028d0:	3748      	adds	r7, #72	; 0x48
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	200036e0 	.word	0x200036e0
 80028dc:	40010400 	.word	0x40010400

080028e0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028f0:	d10e      	bne.n	8002910 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028f2:	2300      	movs	r3, #0
 80028f4:	60fb      	str	r3, [r7, #12]
 80028f6:	4b16      	ldr	r3, [pc, #88]	; (8002950 <HAL_TIM_Base_MspInit+0x70>)
 80028f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fa:	4a15      	ldr	r2, [pc, #84]	; (8002950 <HAL_TIM_Base_MspInit+0x70>)
 80028fc:	f043 0301 	orr.w	r3, r3, #1
 8002900:	6413      	str	r3, [r2, #64]	; 0x40
 8002902:	4b13      	ldr	r3, [pc, #76]	; (8002950 <HAL_TIM_Base_MspInit+0x70>)
 8002904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002906:	f003 0301 	and.w	r3, r3, #1
 800290a:	60fb      	str	r3, [r7, #12]
 800290c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800290e:	e01a      	b.n	8002946 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM6)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a0f      	ldr	r2, [pc, #60]	; (8002954 <HAL_TIM_Base_MspInit+0x74>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d115      	bne.n	8002946 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800291a:	2300      	movs	r3, #0
 800291c:	60bb      	str	r3, [r7, #8]
 800291e:	4b0c      	ldr	r3, [pc, #48]	; (8002950 <HAL_TIM_Base_MspInit+0x70>)
 8002920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002922:	4a0b      	ldr	r2, [pc, #44]	; (8002950 <HAL_TIM_Base_MspInit+0x70>)
 8002924:	f043 0310 	orr.w	r3, r3, #16
 8002928:	6413      	str	r3, [r2, #64]	; 0x40
 800292a:	4b09      	ldr	r3, [pc, #36]	; (8002950 <HAL_TIM_Base_MspInit+0x70>)
 800292c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292e:	f003 0310 	and.w	r3, r3, #16
 8002932:	60bb      	str	r3, [r7, #8]
 8002934:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002936:	2200      	movs	r2, #0
 8002938:	2100      	movs	r1, #0
 800293a:	2036      	movs	r0, #54	; 0x36
 800293c:	f001 f8fb 	bl	8003b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002940:	2036      	movs	r0, #54	; 0x36
 8002942:	f001 f914 	bl	8003b6e <HAL_NVIC_EnableIRQ>
}
 8002946:	bf00      	nop
 8002948:	3710      	adds	r7, #16
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	40023800 	.word	0x40023800
 8002954:	40001000 	.word	0x40001000

08002958 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002958:	b480      	push	{r7}
 800295a:	b085      	sub	sp, #20
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM8)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a0b      	ldr	r2, [pc, #44]	; (8002994 <HAL_TIM_PWM_MspInit+0x3c>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d10d      	bne.n	8002986 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800296a:	2300      	movs	r3, #0
 800296c:	60fb      	str	r3, [r7, #12]
 800296e:	4b0a      	ldr	r3, [pc, #40]	; (8002998 <HAL_TIM_PWM_MspInit+0x40>)
 8002970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002972:	4a09      	ldr	r2, [pc, #36]	; (8002998 <HAL_TIM_PWM_MspInit+0x40>)
 8002974:	f043 0302 	orr.w	r3, r3, #2
 8002978:	6453      	str	r3, [r2, #68]	; 0x44
 800297a:	4b07      	ldr	r3, [pc, #28]	; (8002998 <HAL_TIM_PWM_MspInit+0x40>)
 800297c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	60fb      	str	r3, [r7, #12]
 8002984:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002986:	bf00      	nop
 8002988:	3714      	adds	r7, #20
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	40010400 	.word	0x40010400
 8002998:	40023800 	.word	0x40023800

0800299c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b08a      	sub	sp, #40	; 0x28
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a4:	f107 0314 	add.w	r3, r7, #20
 80029a8:	2200      	movs	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]
 80029ac:	605a      	str	r2, [r3, #4]
 80029ae:	609a      	str	r2, [r3, #8]
 80029b0:	60da      	str	r2, [r3, #12]
 80029b2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029bc:	d11e      	bne.n	80029fc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029be:	2300      	movs	r3, #0
 80029c0:	613b      	str	r3, [r7, #16]
 80029c2:	4b22      	ldr	r3, [pc, #136]	; (8002a4c <HAL_TIM_MspPostInit+0xb0>)
 80029c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c6:	4a21      	ldr	r2, [pc, #132]	; (8002a4c <HAL_TIM_MspPostInit+0xb0>)
 80029c8:	f043 0301 	orr.w	r3, r3, #1
 80029cc:	6313      	str	r3, [r2, #48]	; 0x30
 80029ce:	4b1f      	ldr	r3, [pc, #124]	; (8002a4c <HAL_TIM_MspPostInit+0xb0>)
 80029d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d2:	f003 0301 	and.w	r3, r3, #1
 80029d6:	613b      	str	r3, [r7, #16]
 80029d8:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA5     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80029da:	2320      	movs	r3, #32
 80029dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029de:	2302      	movs	r3, #2
 80029e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e2:	2300      	movs	r3, #0
 80029e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e6:	2300      	movs	r3, #0
 80029e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80029ea:	2301      	movs	r3, #1
 80029ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ee:	f107 0314 	add.w	r3, r7, #20
 80029f2:	4619      	mov	r1, r3
 80029f4:	4816      	ldr	r0, [pc, #88]	; (8002a50 <HAL_TIM_MspPostInit+0xb4>)
 80029f6:	f001 fc65 	bl	80042c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80029fa:	e023      	b.n	8002a44 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM8)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a14      	ldr	r2, [pc, #80]	; (8002a54 <HAL_TIM_MspPostInit+0xb8>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d11e      	bne.n	8002a44 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a06:	2300      	movs	r3, #0
 8002a08:	60fb      	str	r3, [r7, #12]
 8002a0a:	4b10      	ldr	r3, [pc, #64]	; (8002a4c <HAL_TIM_MspPostInit+0xb0>)
 8002a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0e:	4a0f      	ldr	r2, [pc, #60]	; (8002a4c <HAL_TIM_MspPostInit+0xb0>)
 8002a10:	f043 0304 	orr.w	r3, r3, #4
 8002a14:	6313      	str	r3, [r2, #48]	; 0x30
 8002a16:	4b0d      	ldr	r3, [pc, #52]	; (8002a4c <HAL_TIM_MspPostInit+0xb0>)
 8002a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1a:	f003 0304 	and.w	r3, r3, #4
 8002a1e:	60fb      	str	r3, [r7, #12]
 8002a20:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8002a22:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002a26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a28:	2302      	movs	r3, #2
 8002a2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a30:	2303      	movs	r3, #3
 8002a32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002a34:	2303      	movs	r3, #3
 8002a36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a38:	f107 0314 	add.w	r3, r7, #20
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	4806      	ldr	r0, [pc, #24]	; (8002a58 <HAL_TIM_MspPostInit+0xbc>)
 8002a40:	f001 fc40 	bl	80042c4 <HAL_GPIO_Init>
}
 8002a44:	bf00      	nop
 8002a46:	3728      	adds	r7, #40	; 0x28
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	40023800 	.word	0x40023800
 8002a50:	40020000 	.word	0x40020000
 8002a54:	40010400 	.word	0x40010400
 8002a58:	40020800 	.word	0x40020800

08002a5c <uart_com_send_it>:
    uart_com_putc(value.u32_val&0xFF);
    uart_com_putc(UART_COM_END_0);
    uart_com_putc(UART_COM_END_1);
}

void uart_com_send_it(UART_HandleTypeDef *huart) {
 8002a5c:	b590      	push	{r4, r7, lr}
 8002a5e:	b085      	sub	sp, #20
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
    if(uart_com_ring_tx.huart != huart) return;
 8002a64:	4b18      	ldr	r3, [pc, #96]	; (8002ac8 <uart_com_send_it+0x6c>)
 8002a66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d127      	bne.n	8002ac0 <uart_com_send_it+0x64>

    uart_com_ring_forward_r_ptr(&uart_com_ring_tx, previous_send_len);
 8002a70:	4b16      	ldr	r3, [pc, #88]	; (8002acc <uart_com_send_it+0x70>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4619      	mov	r1, r3
 8002a76:	4814      	ldr	r0, [pc, #80]	; (8002ac8 <uart_com_send_it+0x6c>)
 8002a78:	f000 f87c 	bl	8002b74 <uart_com_ring_forward_r_ptr>
    uint16_t len = (uint16_t)uart_com_ring_available_linear(&uart_com_ring_tx);
 8002a7c:	4812      	ldr	r0, [pc, #72]	; (8002ac8 <uart_com_send_it+0x6c>)
 8002a7e:	f000 f847 	bl	8002b10 <uart_com_ring_available_linear>
 8002a82:	4603      	mov	r3, r0
 8002a84:	81fb      	strh	r3, [r7, #14]
    if (len > 0 ) {
 8002a86:	89fb      	ldrh	r3, [r7, #14]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d015      	beq.n	8002ab8 <uart_com_send_it+0x5c>
        previous_send_len = len;
 8002a8c:	89fb      	ldrh	r3, [r7, #14]
 8002a8e:	4a0f      	ldr	r2, [pc, #60]	; (8002acc <uart_com_send_it+0x70>)
 8002a90:	6013      	str	r3, [r2, #0]
        send_lock = 1;
 8002a92:	4b0f      	ldr	r3, [pc, #60]	; (8002ad0 <uart_com_send_it+0x74>)
 8002a94:	2201      	movs	r2, #1
 8002a96:	601a      	str	r2, [r3, #0]
        HAL_UART_Transmit_DMA(uart_com_ring_tx.huart, uart_com_ring_tx.buf+uart_com_ring_get_r_ptr(&uart_com_ring_tx), len);
 8002a98:	4b0b      	ldr	r3, [pc, #44]	; (8002ac8 <uart_com_send_it+0x6c>)
 8002a9a:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 8002a9e:	480a      	ldr	r0, [pc, #40]	; (8002ac8 <uart_com_send_it+0x6c>)
 8002aa0:	f000 f85a 	bl	8002b58 <uart_com_ring_get_r_ptr>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	4b07      	ldr	r3, [pc, #28]	; (8002ac8 <uart_com_send_it+0x6c>)
 8002aaa:	4413      	add	r3, r2
 8002aac:	89fa      	ldrh	r2, [r7, #14]
 8002aae:	4619      	mov	r1, r3
 8002ab0:	4620      	mov	r0, r4
 8002ab2:	f003 fcd5 	bl	8006460 <HAL_UART_Transmit_DMA>
 8002ab6:	e004      	b.n	8002ac2 <uart_com_send_it+0x66>
    }else{
        send_lock = 0;
 8002ab8:	4b05      	ldr	r3, [pc, #20]	; (8002ad0 <uart_com_send_it+0x74>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	601a      	str	r2, [r3, #0]
 8002abe:	e000      	b.n	8002ac2 <uart_com_send_it+0x66>
    if(uart_com_ring_tx.huart != huart) return;
 8002ac0:	bf00      	nop
    }
}
 8002ac2:	3714      	adds	r7, #20
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd90      	pop	{r4, r7, pc}
 8002ac8:	200037a4 	.word	0x200037a4
 8002acc:	20000240 	.word	0x20000240
 8002ad0:	2000023c 	.word	0x2000023c

08002ad4 <update_w_ptr>:
#include "main.h"
#include <stdio.h>

static void update_w_ptr(struct ring_buf *ring){
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
    if(ring->type == RING_TYPE_RX_CIRCULAR){
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d10e      	bne.n	8002b04 <update_w_ptr+0x30>
        ring->w_ptr = (uint16_t) ((ring->buf_size - ring->huart->hdmarx->Instance->W_PTR) & 0xFFFF);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f8b3 2080 	ldrh.w	r2, [r3, #128]	; 0x80
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	b29a      	uxth	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
    }
}
 8002b04:	bf00      	nop
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <uart_com_ring_available_linear>:
    }else{
        return ring->buf_size + ring->w_ptr - ring->r_ptr;
    }
}

int uart_com_ring_available_linear(struct ring_buf *ring){
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
    update_w_ptr(ring);
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f7ff ffdb 	bl	8002ad4 <update_w_ptr>

    if(ring->w_ptr >= ring->r_ptr){
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d308      	bcc.n	8002b40 <uart_com_ring_available_linear+0x30>
        return ring->w_ptr - ring->r_ptr;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8002b34:	461a      	mov	r2, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	e007      	b.n	8002b50 <uart_com_ring_available_linear+0x40>
    }else{
        return ring->buf_size - ring->r_ptr;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8002b46:	461a      	mov	r2, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8002b4e:	1ad3      	subs	r3, r2, r3
    }
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3708      	adds	r7, #8
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <uart_com_ring_get_r_ptr>:
    update_w_ptr(ring);

    return ring->w_ptr;
}

uint16_t uart_com_ring_get_r_ptr(struct ring_buf *ring){
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
    update_w_ptr(ring);
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f7ff ffb7 	bl	8002ad4 <update_w_ptr>

    return ring->r_ptr;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3708      	adds	r7, #8
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <uart_com_ring_forward_r_ptr>:

void uart_com_ring_forward_r_ptr(struct ring_buf *ring, int len){
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
    update_w_ptr(ring);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f7ff ffa8 	bl	8002ad4 <update_w_ptr>

    while(len > 0){
 8002b84:	e018      	b.n	8002bb8 <uart_com_ring_forward_r_ptr+0x44>
        if(ring->r_ptr+1 >= ring->buf_size){
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8002b8c:	3301      	adds	r3, #1
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	f8b2 2080 	ldrh.w	r2, [r2, #128]	; 0x80
 8002b94:	4293      	cmp	r3, r2
 8002b96:	db04      	blt.n	8002ba2 <uart_com_ring_forward_r_ptr+0x2e>
            ring->r_ptr = 0;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 8002ba0:	e007      	b.n	8002bb2 <uart_com_ring_forward_r_ptr+0x3e>
        }else{
            ring->r_ptr += 1;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8002ba8:	3301      	adds	r3, #1
 8002baa:	b29a      	uxth	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
        }
        len--;
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	603b      	str	r3, [r7, #0]
    while(len > 0){
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	dce3      	bgt.n	8002b86 <uart_com_ring_forward_r_ptr+0x12>
    }
}
 8002bbe:	bf00      	nop
 8002bc0:	3708      	adds	r7, #8
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
	...

08002bc8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8002bcc:	4b11      	ldr	r3, [pc, #68]	; (8002c14 <MX_USART1_UART_Init+0x4c>)
 8002bce:	4a12      	ldr	r2, [pc, #72]	; (8002c18 <MX_USART1_UART_Init+0x50>)
 8002bd0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002bd2:	4b10      	ldr	r3, [pc, #64]	; (8002c14 <MX_USART1_UART_Init+0x4c>)
 8002bd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002bd8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002bda:	4b0e      	ldr	r3, [pc, #56]	; (8002c14 <MX_USART1_UART_Init+0x4c>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002be0:	4b0c      	ldr	r3, [pc, #48]	; (8002c14 <MX_USART1_UART_Init+0x4c>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002be6:	4b0b      	ldr	r3, [pc, #44]	; (8002c14 <MX_USART1_UART_Init+0x4c>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002bec:	4b09      	ldr	r3, [pc, #36]	; (8002c14 <MX_USART1_UART_Init+0x4c>)
 8002bee:	220c      	movs	r2, #12
 8002bf0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bf2:	4b08      	ldr	r3, [pc, #32]	; (8002c14 <MX_USART1_UART_Init+0x4c>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bf8:	4b06      	ldr	r3, [pc, #24]	; (8002c14 <MX_USART1_UART_Init+0x4c>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002bfe:	4805      	ldr	r0, [pc, #20]	; (8002c14 <MX_USART1_UART_Init+0x4c>)
 8002c00:	f003 fb8c 	bl	800631c <HAL_UART_Init>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d001      	beq.n	8002c0e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002c0a:	f7ff facd 	bl	80021a8 <Error_Handler>
  }

}
 8002c0e:	bf00      	nop
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	20003984 	.word	0x20003984
 8002c18:	40011000 	.word	0x40011000

08002c1c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b08a      	sub	sp, #40	; 0x28
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c24:	f107 0314 	add.w	r3, r7, #20
 8002c28:	2200      	movs	r2, #0
 8002c2a:	601a      	str	r2, [r3, #0]
 8002c2c:	605a      	str	r2, [r3, #4]
 8002c2e:	609a      	str	r2, [r3, #8]
 8002c30:	60da      	str	r2, [r3, #12]
 8002c32:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a4c      	ldr	r2, [pc, #304]	; (8002d6c <HAL_UART_MspInit+0x150>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	f040 8092 	bne.w	8002d64 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c40:	2300      	movs	r3, #0
 8002c42:	613b      	str	r3, [r7, #16]
 8002c44:	4b4a      	ldr	r3, [pc, #296]	; (8002d70 <HAL_UART_MspInit+0x154>)
 8002c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c48:	4a49      	ldr	r2, [pc, #292]	; (8002d70 <HAL_UART_MspInit+0x154>)
 8002c4a:	f043 0310 	orr.w	r3, r3, #16
 8002c4e:	6453      	str	r3, [r2, #68]	; 0x44
 8002c50:	4b47      	ldr	r3, [pc, #284]	; (8002d70 <HAL_UART_MspInit+0x154>)
 8002c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c54:	f003 0310 	and.w	r3, r3, #16
 8002c58:	613b      	str	r3, [r7, #16]
 8002c5a:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	60fb      	str	r3, [r7, #12]
 8002c60:	4b43      	ldr	r3, [pc, #268]	; (8002d70 <HAL_UART_MspInit+0x154>)
 8002c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c64:	4a42      	ldr	r2, [pc, #264]	; (8002d70 <HAL_UART_MspInit+0x154>)
 8002c66:	f043 0301 	orr.w	r3, r3, #1
 8002c6a:	6313      	str	r3, [r2, #48]	; 0x30
 8002c6c:	4b40      	ldr	r3, [pc, #256]	; (8002d70 <HAL_UART_MspInit+0x154>)
 8002c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c70:	f003 0301 	and.w	r3, r3, #1
 8002c74:	60fb      	str	r3, [r7, #12]
 8002c76:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002c78:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002c7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c7e:	2302      	movs	r3, #2
 8002c80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c82:	2300      	movs	r3, #0
 8002c84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c86:	2303      	movs	r3, #3
 8002c88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c8a:	2307      	movs	r3, #7
 8002c8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c8e:	f107 0314 	add.w	r3, r7, #20
 8002c92:	4619      	mov	r1, r3
 8002c94:	4837      	ldr	r0, [pc, #220]	; (8002d74 <HAL_UART_MspInit+0x158>)
 8002c96:	f001 fb15 	bl	80042c4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002c9a:	4b37      	ldr	r3, [pc, #220]	; (8002d78 <HAL_UART_MspInit+0x15c>)
 8002c9c:	4a37      	ldr	r2, [pc, #220]	; (8002d7c <HAL_UART_MspInit+0x160>)
 8002c9e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002ca0:	4b35      	ldr	r3, [pc, #212]	; (8002d78 <HAL_UART_MspInit+0x15c>)
 8002ca2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002ca6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ca8:	4b33      	ldr	r3, [pc, #204]	; (8002d78 <HAL_UART_MspInit+0x15c>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cae:	4b32      	ldr	r3, [pc, #200]	; (8002d78 <HAL_UART_MspInit+0x15c>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002cb4:	4b30      	ldr	r3, [pc, #192]	; (8002d78 <HAL_UART_MspInit+0x15c>)
 8002cb6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cba:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002cbc:	4b2e      	ldr	r3, [pc, #184]	; (8002d78 <HAL_UART_MspInit+0x15c>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002cc2:	4b2d      	ldr	r3, [pc, #180]	; (8002d78 <HAL_UART_MspInit+0x15c>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002cc8:	4b2b      	ldr	r3, [pc, #172]	; (8002d78 <HAL_UART_MspInit+0x15c>)
 8002cca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cce:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002cd0:	4b29      	ldr	r3, [pc, #164]	; (8002d78 <HAL_UART_MspInit+0x15c>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002cd6:	4b28      	ldr	r3, [pc, #160]	; (8002d78 <HAL_UART_MspInit+0x15c>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002cdc:	4826      	ldr	r0, [pc, #152]	; (8002d78 <HAL_UART_MspInit+0x15c>)
 8002cde:	f000 ff61 	bl	8003ba4 <HAL_DMA_Init>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d001      	beq.n	8002cec <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8002ce8:	f7ff fa5e 	bl	80021a8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4a22      	ldr	r2, [pc, #136]	; (8002d78 <HAL_UART_MspInit+0x15c>)
 8002cf0:	635a      	str	r2, [r3, #52]	; 0x34
 8002cf2:	4a21      	ldr	r2, [pc, #132]	; (8002d78 <HAL_UART_MspInit+0x15c>)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002cf8:	4b21      	ldr	r3, [pc, #132]	; (8002d80 <HAL_UART_MspInit+0x164>)
 8002cfa:	4a22      	ldr	r2, [pc, #136]	; (8002d84 <HAL_UART_MspInit+0x168>)
 8002cfc:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002cfe:	4b20      	ldr	r3, [pc, #128]	; (8002d80 <HAL_UART_MspInit+0x164>)
 8002d00:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d04:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d06:	4b1e      	ldr	r3, [pc, #120]	; (8002d80 <HAL_UART_MspInit+0x164>)
 8002d08:	2240      	movs	r2, #64	; 0x40
 8002d0a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d0c:	4b1c      	ldr	r3, [pc, #112]	; (8002d80 <HAL_UART_MspInit+0x164>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002d12:	4b1b      	ldr	r3, [pc, #108]	; (8002d80 <HAL_UART_MspInit+0x164>)
 8002d14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d18:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d1a:	4b19      	ldr	r3, [pc, #100]	; (8002d80 <HAL_UART_MspInit+0x164>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d20:	4b17      	ldr	r3, [pc, #92]	; (8002d80 <HAL_UART_MspInit+0x164>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002d26:	4b16      	ldr	r3, [pc, #88]	; (8002d80 <HAL_UART_MspInit+0x164>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002d2c:	4b14      	ldr	r3, [pc, #80]	; (8002d80 <HAL_UART_MspInit+0x164>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d32:	4b13      	ldr	r3, [pc, #76]	; (8002d80 <HAL_UART_MspInit+0x164>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002d38:	4811      	ldr	r0, [pc, #68]	; (8002d80 <HAL_UART_MspInit+0x164>)
 8002d3a:	f000 ff33 	bl	8003ba4 <HAL_DMA_Init>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d001      	beq.n	8002d48 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 8002d44:	f7ff fa30 	bl	80021a8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4a0d      	ldr	r2, [pc, #52]	; (8002d80 <HAL_UART_MspInit+0x164>)
 8002d4c:	631a      	str	r2, [r3, #48]	; 0x30
 8002d4e:	4a0c      	ldr	r2, [pc, #48]	; (8002d80 <HAL_UART_MspInit+0x164>)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002d54:	2200      	movs	r2, #0
 8002d56:	2100      	movs	r1, #0
 8002d58:	2025      	movs	r0, #37	; 0x25
 8002d5a:	f000 feec 	bl	8003b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002d5e:	2025      	movs	r0, #37	; 0x25
 8002d60:	f000 ff05 	bl	8003b6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002d64:	bf00      	nop
 8002d66:	3728      	adds	r7, #40	; 0x28
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	40011000 	.word	0x40011000
 8002d70:	40023800 	.word	0x40023800
 8002d74:	40020000 	.word	0x40020000
 8002d78:	20003924 	.word	0x20003924
 8002d7c:	40026440 	.word	0x40026440
 8002d80:	200038c4 	.word	0x200038c4
 8002d84:	400264b8 	.word	0x400264b8

08002d88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002d88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002dc0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002d8c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002d8e:	e003      	b.n	8002d98 <LoopCopyDataInit>

08002d90 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002d90:	4b0c      	ldr	r3, [pc, #48]	; (8002dc4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002d92:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002d94:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002d96:	3104      	adds	r1, #4

08002d98 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002d98:	480b      	ldr	r0, [pc, #44]	; (8002dc8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002d9a:	4b0c      	ldr	r3, [pc, #48]	; (8002dcc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002d9c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002d9e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002da0:	d3f6      	bcc.n	8002d90 <CopyDataInit>
  ldr  r2, =_sbss
 8002da2:	4a0b      	ldr	r2, [pc, #44]	; (8002dd0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002da4:	e002      	b.n	8002dac <LoopFillZerobss>

08002da6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002da6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002da8:	f842 3b04 	str.w	r3, [r2], #4

08002dac <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002dac:	4b09      	ldr	r3, [pc, #36]	; (8002dd4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002dae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002db0:	d3f9      	bcc.n	8002da6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002db2:	f7ff fc1d 	bl	80025f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002db6:	f004 fa0d 	bl	80071d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002dba:	f7ff f8d9 	bl	8001f70 <main>
  bx  lr    
 8002dbe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002dc0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002dc4:	0800af48 	.word	0x0800af48
  ldr  r0, =_sdata
 8002dc8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002dcc:	200001e8 	.word	0x200001e8
  ldr  r2, =_sbss
 8002dd0:	200001e8 	.word	0x200001e8
  ldr  r3, = _ebss
 8002dd4:	200039cc 	.word	0x200039cc

08002dd8 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002dd8:	e7fe      	b.n	8002dd8 <CAN1_RX0_IRQHandler>
	...

08002ddc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002de0:	4b0e      	ldr	r3, [pc, #56]	; (8002e1c <HAL_Init+0x40>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a0d      	ldr	r2, [pc, #52]	; (8002e1c <HAL_Init+0x40>)
 8002de6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002dea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002dec:	4b0b      	ldr	r3, [pc, #44]	; (8002e1c <HAL_Init+0x40>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a0a      	ldr	r2, [pc, #40]	; (8002e1c <HAL_Init+0x40>)
 8002df2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002df6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002df8:	4b08      	ldr	r3, [pc, #32]	; (8002e1c <HAL_Init+0x40>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a07      	ldr	r2, [pc, #28]	; (8002e1c <HAL_Init+0x40>)
 8002dfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e04:	2003      	movs	r0, #3
 8002e06:	f000 fe8b 	bl	8003b20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e0a:	2000      	movs	r0, #0
 8002e0c:	f000 f808 	bl	8002e20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e10:	f7ff fabe 	bl	8002390 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	40023c00 	.word	0x40023c00

08002e20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e28:	4b12      	ldr	r3, [pc, #72]	; (8002e74 <HAL_InitTick+0x54>)
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	4b12      	ldr	r3, [pc, #72]	; (8002e78 <HAL_InitTick+0x58>)
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	4619      	mov	r1, r3
 8002e32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e36:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f000 fea3 	bl	8003b8a <HAL_SYSTICK_Config>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e00e      	b.n	8002e6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2b0f      	cmp	r3, #15
 8002e52:	d80a      	bhi.n	8002e6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e54:	2200      	movs	r2, #0
 8002e56:	6879      	ldr	r1, [r7, #4]
 8002e58:	f04f 30ff 	mov.w	r0, #4294967295
 8002e5c:	f000 fe6b 	bl	8003b36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e60:	4a06      	ldr	r2, [pc, #24]	; (8002e7c <HAL_InitTick+0x5c>)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e66:	2300      	movs	r3, #0
 8002e68:	e000      	b.n	8002e6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3708      	adds	r7, #8
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	20000008 	.word	0x20000008
 8002e78:	20000010 	.word	0x20000010
 8002e7c:	2000000c 	.word	0x2000000c

08002e80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e80:	b480      	push	{r7}
 8002e82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e84:	4b06      	ldr	r3, [pc, #24]	; (8002ea0 <HAL_IncTick+0x20>)
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	461a      	mov	r2, r3
 8002e8a:	4b06      	ldr	r3, [pc, #24]	; (8002ea4 <HAL_IncTick+0x24>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4413      	add	r3, r2
 8002e90:	4a04      	ldr	r2, [pc, #16]	; (8002ea4 <HAL_IncTick+0x24>)
 8002e92:	6013      	str	r3, [r2, #0]
}
 8002e94:	bf00      	nop
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	20000010 	.word	0x20000010
 8002ea4:	200039c4 	.word	0x200039c4

08002ea8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	af00      	add	r7, sp, #0
  return uwTick;
 8002eac:	4b03      	ldr	r3, [pc, #12]	; (8002ebc <HAL_GetTick+0x14>)
 8002eae:	681b      	ldr	r3, [r3, #0]
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	200039c4 	.word	0x200039c4

08002ec0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ec8:	f7ff ffee 	bl	8002ea8 <HAL_GetTick>
 8002ecc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed8:	d005      	beq.n	8002ee6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002eda:	4b09      	ldr	r3, [pc, #36]	; (8002f00 <HAL_Delay+0x40>)
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	461a      	mov	r2, r3
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ee6:	bf00      	nop
 8002ee8:	f7ff ffde 	bl	8002ea8 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d8f7      	bhi.n	8002ee8 <HAL_Delay+0x28>
  {
  }
}
 8002ef8:	bf00      	nop
 8002efa:	3710      	adds	r7, #16
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	20000010 	.word	0x20000010

08002f04 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d101      	bne.n	8002f1a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e033      	b.n	8002f82 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d109      	bne.n	8002f36 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f7fe f8d0 	bl	80010c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3a:	f003 0310 	and.w	r3, r3, #16
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d118      	bne.n	8002f74 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f46:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f4a:	f023 0302 	bic.w	r3, r3, #2
 8002f4e:	f043 0202 	orr.w	r2, r3, #2
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 fb8a 	bl	8003670 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f66:	f023 0303 	bic.w	r3, r3, #3
 8002f6a:	f043 0201 	orr.w	r2, r3, #1
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	641a      	str	r2, [r3, #64]	; 0x40
 8002f72:	e001      	b.n	8002f78 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3710      	adds	r7, #16
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}

08002f8a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b084      	sub	sp, #16
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002f92:	2300      	movs	r3, #0
 8002f94:	60fb      	str	r3, [r7, #12]
 8002f96:	2300      	movs	r3, #0
 8002f98:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0302 	and.w	r3, r3, #2
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	bf0c      	ite	eq
 8002fa8:	2301      	moveq	r3, #1
 8002faa:	2300      	movne	r3, #0
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f003 0320 	and.w	r3, r3, #32
 8002fba:	2b20      	cmp	r3, #32
 8002fbc:	bf0c      	ite	eq
 8002fbe:	2301      	moveq	r3, #1
 8002fc0:	2300      	movne	r3, #0
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d049      	beq.n	8003060 <HAL_ADC_IRQHandler+0xd6>
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d046      	beq.n	8003060 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd6:	f003 0310 	and.w	r3, r3, #16
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d105      	bne.n	8002fea <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d12b      	bne.n	8003050 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d127      	bne.n	8003050 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003006:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800300a:	2b00      	cmp	r3, #0
 800300c:	d006      	beq.n	800301c <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003018:	2b00      	cmp	r3, #0
 800301a:	d119      	bne.n	8003050 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	685a      	ldr	r2, [r3, #4]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f022 0220 	bic.w	r2, r2, #32
 800302a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003030:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d105      	bne.n	8003050 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003048:	f043 0201 	orr.w	r2, r3, #1
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f7fe fc7d 	bl	8001950 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f06f 0212 	mvn.w	r2, #18
 800305e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0304 	and.w	r3, r3, #4
 800306a:	2b04      	cmp	r3, #4
 800306c:	bf0c      	ite	eq
 800306e:	2301      	moveq	r3, #1
 8003070:	2300      	movne	r3, #0
 8003072:	b2db      	uxtb	r3, r3
 8003074:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003080:	2b80      	cmp	r3, #128	; 0x80
 8003082:	bf0c      	ite	eq
 8003084:	2301      	moveq	r3, #1
 8003086:	2300      	movne	r3, #0
 8003088:	b2db      	uxtb	r3, r3
 800308a:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d057      	beq.n	8003142 <HAL_ADC_IRQHandler+0x1b8>
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d054      	beq.n	8003142 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309c:	f003 0310 	and.w	r3, r3, #16
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d105      	bne.n	80030b0 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d139      	bne.n	8003132 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d006      	beq.n	80030da <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d12b      	bne.n	8003132 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d124      	bne.n	8003132 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d11d      	bne.n	8003132 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d119      	bne.n	8003132 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	685a      	ldr	r2, [r3, #4]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800310c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003112:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003122:	2b00      	cmp	r3, #0
 8003124:	d105      	bne.n	8003132 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312a:	f043 0201 	orr.w	r2, r3, #1
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 fc1a 	bl	800396c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f06f 020c 	mvn.w	r2, #12
 8003140:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0301 	and.w	r3, r3, #1
 800314c:	2b01      	cmp	r3, #1
 800314e:	bf0c      	ite	eq
 8003150:	2301      	moveq	r3, #1
 8003152:	2300      	movne	r3, #0
 8003154:	b2db      	uxtb	r3, r3
 8003156:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003162:	2b40      	cmp	r3, #64	; 0x40
 8003164:	bf0c      	ite	eq
 8003166:	2301      	moveq	r3, #1
 8003168:	2300      	movne	r3, #0
 800316a:	b2db      	uxtb	r3, r3
 800316c:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d017      	beq.n	80031a4 <HAL_ADC_IRQHandler+0x21a>
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d014      	beq.n	80031a4 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0301 	and.w	r3, r3, #1
 8003184:	2b01      	cmp	r3, #1
 8003186:	d10d      	bne.n	80031a4 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f000 f935 	bl	8003404 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f06f 0201 	mvn.w	r2, #1
 80031a2:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0320 	and.w	r3, r3, #32
 80031ae:	2b20      	cmp	r3, #32
 80031b0:	bf0c      	ite	eq
 80031b2:	2301      	moveq	r3, #1
 80031b4:	2300      	movne	r3, #0
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80031c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80031c8:	bf0c      	ite	eq
 80031ca:	2301      	moveq	r3, #1
 80031cc:	2300      	movne	r3, #0
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d015      	beq.n	8003204 <HAL_ADC_IRQHandler+0x27a>
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d012      	beq.n	8003204 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e2:	f043 0202 	orr.w	r2, r3, #2
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f06f 0220 	mvn.w	r2, #32
 80031f2:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f000 f90f 	bl	8003418 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f06f 0220 	mvn.w	r2, #32
 8003202:	601a      	str	r2, [r3, #0]
  }
}
 8003204:	bf00      	nop
 8003206:	3710      	adds	r7, #16
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b086      	sub	sp, #24
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003218:	2300      	movs	r3, #0
 800321a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003222:	2b01      	cmp	r3, #1
 8003224:	d101      	bne.n	800322a <HAL_ADC_Start_DMA+0x1e>
 8003226:	2302      	movs	r3, #2
 8003228:	e0cc      	b.n	80033c4 <HAL_ADC_Start_DMA+0x1b8>
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2201      	movs	r2, #1
 800322e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	f003 0301 	and.w	r3, r3, #1
 800323c:	2b01      	cmp	r3, #1
 800323e:	d018      	beq.n	8003272 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	689a      	ldr	r2, [r3, #8]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f042 0201 	orr.w	r2, r2, #1
 800324e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003250:	4b5e      	ldr	r3, [pc, #376]	; (80033cc <HAL_ADC_Start_DMA+0x1c0>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a5e      	ldr	r2, [pc, #376]	; (80033d0 <HAL_ADC_Start_DMA+0x1c4>)
 8003256:	fba2 2303 	umull	r2, r3, r2, r3
 800325a:	0c9a      	lsrs	r2, r3, #18
 800325c:	4613      	mov	r3, r2
 800325e:	005b      	lsls	r3, r3, #1
 8003260:	4413      	add	r3, r2
 8003262:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003264:	e002      	b.n	800326c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	3b01      	subs	r3, #1
 800326a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d1f9      	bne.n	8003266 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f003 0301 	and.w	r3, r3, #1
 800327c:	2b01      	cmp	r3, #1
 800327e:	f040 80a0 	bne.w	80033c2 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003286:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800328a:	f023 0301 	bic.w	r3, r3, #1
 800328e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d007      	beq.n	80032b4 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80032ac:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032c0:	d106      	bne.n	80032d0 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c6:	f023 0206 	bic.w	r2, r3, #6
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	645a      	str	r2, [r3, #68]	; 0x44
 80032ce:	e002      	b.n	80032d6 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2200      	movs	r2, #0
 80032d4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032de:	4b3d      	ldr	r3, [pc, #244]	; (80033d4 <HAL_ADC_Start_DMA+0x1c8>)
 80032e0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e6:	4a3c      	ldr	r2, [pc, #240]	; (80033d8 <HAL_ADC_Start_DMA+0x1cc>)
 80032e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ee:	4a3b      	ldr	r2, [pc, #236]	; (80033dc <HAL_ADC_Start_DMA+0x1d0>)
 80032f0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f6:	4a3a      	ldr	r2, [pc, #232]	; (80033e0 <HAL_ADC_Start_DMA+0x1d4>)
 80032f8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003302:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	685a      	ldr	r2, [r3, #4]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003312:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	689a      	ldr	r2, [r3, #8]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003322:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	334c      	adds	r3, #76	; 0x4c
 800332e:	4619      	mov	r1, r3
 8003330:	68ba      	ldr	r2, [r7, #8]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f000 fce4 	bl	8003d00 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f003 031f 	and.w	r3, r3, #31
 8003340:	2b00      	cmp	r3, #0
 8003342:	d12a      	bne.n	800339a <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a26      	ldr	r2, [pc, #152]	; (80033e4 <HAL_ADC_Start_DMA+0x1d8>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d015      	beq.n	800337a <HAL_ADC_Start_DMA+0x16e>
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a25      	ldr	r2, [pc, #148]	; (80033e8 <HAL_ADC_Start_DMA+0x1dc>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d105      	bne.n	8003364 <HAL_ADC_Start_DMA+0x158>
 8003358:	4b1e      	ldr	r3, [pc, #120]	; (80033d4 <HAL_ADC_Start_DMA+0x1c8>)
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f003 031f 	and.w	r3, r3, #31
 8003360:	2b00      	cmp	r3, #0
 8003362:	d00a      	beq.n	800337a <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a20      	ldr	r2, [pc, #128]	; (80033ec <HAL_ADC_Start_DMA+0x1e0>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d129      	bne.n	80033c2 <HAL_ADC_Start_DMA+0x1b6>
 800336e:	4b19      	ldr	r3, [pc, #100]	; (80033d4 <HAL_ADC_Start_DMA+0x1c8>)
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f003 031f 	and.w	r3, r3, #31
 8003376:	2b0f      	cmp	r3, #15
 8003378:	d823      	bhi.n	80033c2 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d11c      	bne.n	80033c2 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	689a      	ldr	r2, [r3, #8]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003396:	609a      	str	r2, [r3, #8]
 8003398:	e013      	b.n	80033c2 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a11      	ldr	r2, [pc, #68]	; (80033e4 <HAL_ADC_Start_DMA+0x1d8>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d10e      	bne.n	80033c2 <HAL_ADC_Start_DMA+0x1b6>
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d107      	bne.n	80033c2 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	689a      	ldr	r2, [r3, #8]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80033c0:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80033c2:	2300      	movs	r3, #0
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3718      	adds	r7, #24
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	20000008 	.word	0x20000008
 80033d0:	431bde83 	.word	0x431bde83
 80033d4:	40012300 	.word	0x40012300
 80033d8:	08003869 	.word	0x08003869
 80033dc:	08003923 	.word	0x08003923
 80033e0:	0800393f 	.word	0x0800393f
 80033e4:	40012000 	.word	0x40012000
 80033e8:	40012100 	.word	0x40012100
 80033ec:	40012200 	.word	0x40012200

080033f0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80033f8:	bf00      	nop
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800340c:	bf00      	nop
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003420:	bf00      	nop
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800342c:	b480      	push	{r7}
 800342e:	b085      	sub	sp, #20
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003436:	2300      	movs	r3, #0
 8003438:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003440:	2b01      	cmp	r3, #1
 8003442:	d101      	bne.n	8003448 <HAL_ADC_ConfigChannel+0x1c>
 8003444:	2302      	movs	r3, #2
 8003446:	e105      	b.n	8003654 <HAL_ADC_ConfigChannel+0x228>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2b09      	cmp	r3, #9
 8003456:	d925      	bls.n	80034a4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	68d9      	ldr	r1, [r3, #12]
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	b29b      	uxth	r3, r3
 8003464:	461a      	mov	r2, r3
 8003466:	4613      	mov	r3, r2
 8003468:	005b      	lsls	r3, r3, #1
 800346a:	4413      	add	r3, r2
 800346c:	3b1e      	subs	r3, #30
 800346e:	2207      	movs	r2, #7
 8003470:	fa02 f303 	lsl.w	r3, r2, r3
 8003474:	43da      	mvns	r2, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	400a      	ands	r2, r1
 800347c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	68d9      	ldr	r1, [r3, #12]
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	689a      	ldr	r2, [r3, #8]
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	b29b      	uxth	r3, r3
 800348e:	4618      	mov	r0, r3
 8003490:	4603      	mov	r3, r0
 8003492:	005b      	lsls	r3, r3, #1
 8003494:	4403      	add	r3, r0
 8003496:	3b1e      	subs	r3, #30
 8003498:	409a      	lsls	r2, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	430a      	orrs	r2, r1
 80034a0:	60da      	str	r2, [r3, #12]
 80034a2:	e022      	b.n	80034ea <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	6919      	ldr	r1, [r3, #16]
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	461a      	mov	r2, r3
 80034b2:	4613      	mov	r3, r2
 80034b4:	005b      	lsls	r3, r3, #1
 80034b6:	4413      	add	r3, r2
 80034b8:	2207      	movs	r2, #7
 80034ba:	fa02 f303 	lsl.w	r3, r2, r3
 80034be:	43da      	mvns	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	400a      	ands	r2, r1
 80034c6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	6919      	ldr	r1, [r3, #16]
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	689a      	ldr	r2, [r3, #8]
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	4618      	mov	r0, r3
 80034da:	4603      	mov	r3, r0
 80034dc:	005b      	lsls	r3, r3, #1
 80034de:	4403      	add	r3, r0
 80034e0:	409a      	lsls	r2, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	430a      	orrs	r2, r1
 80034e8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	2b06      	cmp	r3, #6
 80034f0:	d824      	bhi.n	800353c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685a      	ldr	r2, [r3, #4]
 80034fc:	4613      	mov	r3, r2
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	4413      	add	r3, r2
 8003502:	3b05      	subs	r3, #5
 8003504:	221f      	movs	r2, #31
 8003506:	fa02 f303 	lsl.w	r3, r2, r3
 800350a:	43da      	mvns	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	400a      	ands	r2, r1
 8003512:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	b29b      	uxth	r3, r3
 8003520:	4618      	mov	r0, r3
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	685a      	ldr	r2, [r3, #4]
 8003526:	4613      	mov	r3, r2
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	4413      	add	r3, r2
 800352c:	3b05      	subs	r3, #5
 800352e:	fa00 f203 	lsl.w	r2, r0, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	430a      	orrs	r2, r1
 8003538:	635a      	str	r2, [r3, #52]	; 0x34
 800353a:	e04c      	b.n	80035d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	2b0c      	cmp	r3, #12
 8003542:	d824      	bhi.n	800358e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	685a      	ldr	r2, [r3, #4]
 800354e:	4613      	mov	r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	4413      	add	r3, r2
 8003554:	3b23      	subs	r3, #35	; 0x23
 8003556:	221f      	movs	r2, #31
 8003558:	fa02 f303 	lsl.w	r3, r2, r3
 800355c:	43da      	mvns	r2, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	400a      	ands	r2, r1
 8003564:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	b29b      	uxth	r3, r3
 8003572:	4618      	mov	r0, r3
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	685a      	ldr	r2, [r3, #4]
 8003578:	4613      	mov	r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	4413      	add	r3, r2
 800357e:	3b23      	subs	r3, #35	; 0x23
 8003580:	fa00 f203 	lsl.w	r2, r0, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	430a      	orrs	r2, r1
 800358a:	631a      	str	r2, [r3, #48]	; 0x30
 800358c:	e023      	b.n	80035d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	685a      	ldr	r2, [r3, #4]
 8003598:	4613      	mov	r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	4413      	add	r3, r2
 800359e:	3b41      	subs	r3, #65	; 0x41
 80035a0:	221f      	movs	r2, #31
 80035a2:	fa02 f303 	lsl.w	r3, r2, r3
 80035a6:	43da      	mvns	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	400a      	ands	r2, r1
 80035ae:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	4618      	mov	r0, r3
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	685a      	ldr	r2, [r3, #4]
 80035c2:	4613      	mov	r3, r2
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	4413      	add	r3, r2
 80035c8:	3b41      	subs	r3, #65	; 0x41
 80035ca:	fa00 f203 	lsl.w	r2, r0, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	430a      	orrs	r2, r1
 80035d4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80035d6:	4b22      	ldr	r3, [pc, #136]	; (8003660 <HAL_ADC_ConfigChannel+0x234>)
 80035d8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a21      	ldr	r2, [pc, #132]	; (8003664 <HAL_ADC_ConfigChannel+0x238>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d109      	bne.n	80035f8 <HAL_ADC_ConfigChannel+0x1cc>
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2b12      	cmp	r3, #18
 80035ea:	d105      	bne.n	80035f8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a19      	ldr	r2, [pc, #100]	; (8003664 <HAL_ADC_ConfigChannel+0x238>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d123      	bne.n	800364a <HAL_ADC_ConfigChannel+0x21e>
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2b10      	cmp	r3, #16
 8003608:	d003      	beq.n	8003612 <HAL_ADC_ConfigChannel+0x1e6>
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	2b11      	cmp	r3, #17
 8003610:	d11b      	bne.n	800364a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2b10      	cmp	r3, #16
 8003624:	d111      	bne.n	800364a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003626:	4b10      	ldr	r3, [pc, #64]	; (8003668 <HAL_ADC_ConfigChannel+0x23c>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a10      	ldr	r2, [pc, #64]	; (800366c <HAL_ADC_ConfigChannel+0x240>)
 800362c:	fba2 2303 	umull	r2, r3, r2, r3
 8003630:	0c9a      	lsrs	r2, r3, #18
 8003632:	4613      	mov	r3, r2
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	4413      	add	r3, r2
 8003638:	005b      	lsls	r3, r3, #1
 800363a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800363c:	e002      	b.n	8003644 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	3b01      	subs	r3, #1
 8003642:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d1f9      	bne.n	800363e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003652:	2300      	movs	r3, #0
}
 8003654:	4618      	mov	r0, r3
 8003656:	3714      	adds	r7, #20
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr
 8003660:	40012300 	.word	0x40012300
 8003664:	40012000 	.word	0x40012000
 8003668:	20000008 	.word	0x20000008
 800366c:	431bde83 	.word	0x431bde83

08003670 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003670:	b480      	push	{r7}
 8003672:	b085      	sub	sp, #20
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003678:	4b79      	ldr	r3, [pc, #484]	; (8003860 <ADC_Init+0x1f0>)
 800367a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	685a      	ldr	r2, [r3, #4]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	431a      	orrs	r2, r3
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	685a      	ldr	r2, [r3, #4]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	6859      	ldr	r1, [r3, #4]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	691b      	ldr	r3, [r3, #16]
 80036b0:	021a      	lsls	r2, r3, #8
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	430a      	orrs	r2, r1
 80036b8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	685a      	ldr	r2, [r3, #4]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80036c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	6859      	ldr	r1, [r3, #4]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	689a      	ldr	r2, [r3, #8]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	430a      	orrs	r2, r1
 80036da:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	689a      	ldr	r2, [r3, #8]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	6899      	ldr	r1, [r3, #8]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	68da      	ldr	r2, [r3, #12]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	430a      	orrs	r2, r1
 80036fc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003702:	4a58      	ldr	r2, [pc, #352]	; (8003864 <ADC_Init+0x1f4>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d022      	beq.n	800374e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	689a      	ldr	r2, [r3, #8]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003716:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	6899      	ldr	r1, [r3, #8]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	430a      	orrs	r2, r1
 8003728:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	689a      	ldr	r2, [r3, #8]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003738:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	6899      	ldr	r1, [r3, #8]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	430a      	orrs	r2, r1
 800374a:	609a      	str	r2, [r3, #8]
 800374c:	e00f      	b.n	800376e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	689a      	ldr	r2, [r3, #8]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800375c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	689a      	ldr	r2, [r3, #8]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800376c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	689a      	ldr	r2, [r3, #8]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f022 0202 	bic.w	r2, r2, #2
 800377c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	6899      	ldr	r1, [r3, #8]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	7e1b      	ldrb	r3, [r3, #24]
 8003788:	005a      	lsls	r2, r3, #1
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	430a      	orrs	r2, r1
 8003790:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d01b      	beq.n	80037d4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	685a      	ldr	r2, [r3, #4]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037aa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	685a      	ldr	r2, [r3, #4]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80037ba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	6859      	ldr	r1, [r3, #4]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c6:	3b01      	subs	r3, #1
 80037c8:	035a      	lsls	r2, r3, #13
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	430a      	orrs	r2, r1
 80037d0:	605a      	str	r2, [r3, #4]
 80037d2:	e007      	b.n	80037e4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	685a      	ldr	r2, [r3, #4]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037e2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80037f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	69db      	ldr	r3, [r3, #28]
 80037fe:	3b01      	subs	r3, #1
 8003800:	051a      	lsls	r2, r3, #20
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	430a      	orrs	r2, r1
 8003808:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	689a      	ldr	r2, [r3, #8]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003818:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	6899      	ldr	r1, [r3, #8]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003826:	025a      	lsls	r2, r3, #9
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	430a      	orrs	r2, r1
 800382e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	689a      	ldr	r2, [r3, #8]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800383e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	6899      	ldr	r1, [r3, #8]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	695b      	ldr	r3, [r3, #20]
 800384a:	029a      	lsls	r2, r3, #10
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	430a      	orrs	r2, r1
 8003852:	609a      	str	r2, [r3, #8]
}
 8003854:	bf00      	nop
 8003856:	3714      	adds	r7, #20
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr
 8003860:	40012300 	.word	0x40012300
 8003864:	0f000001 	.word	0x0f000001

08003868 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003874:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800387e:	2b00      	cmp	r3, #0
 8003880:	d13c      	bne.n	80038fc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003886:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d12b      	bne.n	80038f4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d127      	bne.n	80038f4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038aa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d006      	beq.n	80038c0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d119      	bne.n	80038f4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	685a      	ldr	r2, [r3, #4]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f022 0220 	bic.w	r2, r2, #32
 80038ce:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d105      	bne.n	80038f4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ec:	f043 0201 	orr.w	r2, r3, #1
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80038f4:	68f8      	ldr	r0, [r7, #12]
 80038f6:	f7fe f82b 	bl	8001950 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80038fa:	e00e      	b.n	800391a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003900:	f003 0310 	and.w	r3, r3, #16
 8003904:	2b00      	cmp	r3, #0
 8003906:	d003      	beq.n	8003910 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003908:	68f8      	ldr	r0, [r7, #12]
 800390a:	f7ff fd85 	bl	8003418 <HAL_ADC_ErrorCallback>
}
 800390e:	e004      	b.n	800391a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	4798      	blx	r3
}
 800391a:	bf00      	nop
 800391c:	3710      	adds	r7, #16
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}

08003922 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003922:	b580      	push	{r7, lr}
 8003924:	b084      	sub	sp, #16
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800392e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003930:	68f8      	ldr	r0, [r7, #12]
 8003932:	f7ff fd5d 	bl	80033f0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003936:	bf00      	nop
 8003938:	3710      	adds	r7, #16
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}

0800393e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800393e:	b580      	push	{r7, lr}
 8003940:	b084      	sub	sp, #16
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800394a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2240      	movs	r2, #64	; 0x40
 8003950:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003956:	f043 0204 	orr.w	r2, r3, #4
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800395e:	68f8      	ldr	r0, [r7, #12]
 8003960:	f7ff fd5a 	bl	8003418 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003964:	bf00      	nop
 8003966:	3710      	adds	r7, #16
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003974:	bf00      	nop
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003980:	b480      	push	{r7}
 8003982:	b085      	sub	sp, #20
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f003 0307 	and.w	r3, r3, #7
 800398e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003990:	4b0c      	ldr	r3, [pc, #48]	; (80039c4 <__NVIC_SetPriorityGrouping+0x44>)
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003996:	68ba      	ldr	r2, [r7, #8]
 8003998:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800399c:	4013      	ands	r3, r2
 800399e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80039ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039b2:	4a04      	ldr	r2, [pc, #16]	; (80039c4 <__NVIC_SetPriorityGrouping+0x44>)
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	60d3      	str	r3, [r2, #12]
}
 80039b8:	bf00      	nop
 80039ba:	3714      	adds	r7, #20
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr
 80039c4:	e000ed00 	.word	0xe000ed00

080039c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039c8:	b480      	push	{r7}
 80039ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039cc:	4b04      	ldr	r3, [pc, #16]	; (80039e0 <__NVIC_GetPriorityGrouping+0x18>)
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	0a1b      	lsrs	r3, r3, #8
 80039d2:	f003 0307 	and.w	r3, r3, #7
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr
 80039e0:	e000ed00 	.word	0xe000ed00

080039e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	4603      	mov	r3, r0
 80039ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	db0b      	blt.n	8003a0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039f6:	79fb      	ldrb	r3, [r7, #7]
 80039f8:	f003 021f 	and.w	r2, r3, #31
 80039fc:	4907      	ldr	r1, [pc, #28]	; (8003a1c <__NVIC_EnableIRQ+0x38>)
 80039fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a02:	095b      	lsrs	r3, r3, #5
 8003a04:	2001      	movs	r0, #1
 8003a06:	fa00 f202 	lsl.w	r2, r0, r2
 8003a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003a0e:	bf00      	nop
 8003a10:	370c      	adds	r7, #12
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	e000e100 	.word	0xe000e100

08003a20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	4603      	mov	r3, r0
 8003a28:	6039      	str	r1, [r7, #0]
 8003a2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	db0a      	blt.n	8003a4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	b2da      	uxtb	r2, r3
 8003a38:	490c      	ldr	r1, [pc, #48]	; (8003a6c <__NVIC_SetPriority+0x4c>)
 8003a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a3e:	0112      	lsls	r2, r2, #4
 8003a40:	b2d2      	uxtb	r2, r2
 8003a42:	440b      	add	r3, r1
 8003a44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a48:	e00a      	b.n	8003a60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	b2da      	uxtb	r2, r3
 8003a4e:	4908      	ldr	r1, [pc, #32]	; (8003a70 <__NVIC_SetPriority+0x50>)
 8003a50:	79fb      	ldrb	r3, [r7, #7]
 8003a52:	f003 030f 	and.w	r3, r3, #15
 8003a56:	3b04      	subs	r3, #4
 8003a58:	0112      	lsls	r2, r2, #4
 8003a5a:	b2d2      	uxtb	r2, r2
 8003a5c:	440b      	add	r3, r1
 8003a5e:	761a      	strb	r2, [r3, #24]
}
 8003a60:	bf00      	nop
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr
 8003a6c:	e000e100 	.word	0xe000e100
 8003a70:	e000ed00 	.word	0xe000ed00

08003a74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b089      	sub	sp, #36	; 0x24
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f003 0307 	and.w	r3, r3, #7
 8003a86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	f1c3 0307 	rsb	r3, r3, #7
 8003a8e:	2b04      	cmp	r3, #4
 8003a90:	bf28      	it	cs
 8003a92:	2304      	movcs	r3, #4
 8003a94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	3304      	adds	r3, #4
 8003a9a:	2b06      	cmp	r3, #6
 8003a9c:	d902      	bls.n	8003aa4 <NVIC_EncodePriority+0x30>
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	3b03      	subs	r3, #3
 8003aa2:	e000      	b.n	8003aa6 <NVIC_EncodePriority+0x32>
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab2:	43da      	mvns	r2, r3
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	401a      	ands	r2, r3
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003abc:	f04f 31ff 	mov.w	r1, #4294967295
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ac6:	43d9      	mvns	r1, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003acc:	4313      	orrs	r3, r2
         );
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3724      	adds	r7, #36	; 0x24
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr
	...

08003adc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003aec:	d301      	bcc.n	8003af2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003aee:	2301      	movs	r3, #1
 8003af0:	e00f      	b.n	8003b12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003af2:	4a0a      	ldr	r2, [pc, #40]	; (8003b1c <SysTick_Config+0x40>)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	3b01      	subs	r3, #1
 8003af8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003afa:	210f      	movs	r1, #15
 8003afc:	f04f 30ff 	mov.w	r0, #4294967295
 8003b00:	f7ff ff8e 	bl	8003a20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b04:	4b05      	ldr	r3, [pc, #20]	; (8003b1c <SysTick_Config+0x40>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b0a:	4b04      	ldr	r3, [pc, #16]	; (8003b1c <SysTick_Config+0x40>)
 8003b0c:	2207      	movs	r2, #7
 8003b0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3708      	adds	r7, #8
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	e000e010 	.word	0xe000e010

08003b20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f7ff ff29 	bl	8003980 <__NVIC_SetPriorityGrouping>
}
 8003b2e:	bf00      	nop
 8003b30:	3708      	adds	r7, #8
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}

08003b36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b36:	b580      	push	{r7, lr}
 8003b38:	b086      	sub	sp, #24
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	60b9      	str	r1, [r7, #8]
 8003b40:	607a      	str	r2, [r7, #4]
 8003b42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b44:	2300      	movs	r3, #0
 8003b46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b48:	f7ff ff3e 	bl	80039c8 <__NVIC_GetPriorityGrouping>
 8003b4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	68b9      	ldr	r1, [r7, #8]
 8003b52:	6978      	ldr	r0, [r7, #20]
 8003b54:	f7ff ff8e 	bl	8003a74 <NVIC_EncodePriority>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b5e:	4611      	mov	r1, r2
 8003b60:	4618      	mov	r0, r3
 8003b62:	f7ff ff5d 	bl	8003a20 <__NVIC_SetPriority>
}
 8003b66:	bf00      	nop
 8003b68:	3718      	adds	r7, #24
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}

08003b6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b6e:	b580      	push	{r7, lr}
 8003b70:	b082      	sub	sp, #8
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	4603      	mov	r3, r0
 8003b76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f7ff ff31 	bl	80039e4 <__NVIC_EnableIRQ>
}
 8003b82:	bf00      	nop
 8003b84:	3708      	adds	r7, #8
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}

08003b8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b8a:	b580      	push	{r7, lr}
 8003b8c:	b082      	sub	sp, #8
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f7ff ffa2 	bl	8003adc <SysTick_Config>
 8003b98:	4603      	mov	r3, r0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3708      	adds	r7, #8
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
	...

08003ba4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b086      	sub	sp, #24
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003bac:	2300      	movs	r3, #0
 8003bae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003bb0:	f7ff f97a 	bl	8002ea8 <HAL_GetTick>
 8003bb4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d101      	bne.n	8003bc0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e099      	b.n	8003cf4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2202      	movs	r2, #2
 8003bcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f022 0201 	bic.w	r2, r2, #1
 8003bde:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003be0:	e00f      	b.n	8003c02 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003be2:	f7ff f961 	bl	8002ea8 <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	2b05      	cmp	r3, #5
 8003bee:	d908      	bls.n	8003c02 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2220      	movs	r2, #32
 8003bf4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2203      	movs	r2, #3
 8003bfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e078      	b.n	8003cf4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0301 	and.w	r3, r3, #1
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d1e8      	bne.n	8003be2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003c18:	697a      	ldr	r2, [r7, #20]
 8003c1a:	4b38      	ldr	r3, [pc, #224]	; (8003cfc <HAL_DMA_Init+0x158>)
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685a      	ldr	r2, [r3, #4]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	691b      	ldr	r3, [r3, #16]
 8003c34:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	699b      	ldr	r3, [r3, #24]
 8003c40:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c46:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6a1b      	ldr	r3, [r3, #32]
 8003c4c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c4e:	697a      	ldr	r2, [r7, #20]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c58:	2b04      	cmp	r3, #4
 8003c5a:	d107      	bne.n	8003c6c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c64:	4313      	orrs	r3, r2
 8003c66:	697a      	ldr	r2, [r7, #20]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	697a      	ldr	r2, [r7, #20]
 8003c72:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	695b      	ldr	r3, [r3, #20]
 8003c7a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	f023 0307 	bic.w	r3, r3, #7
 8003c82:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c88:	697a      	ldr	r2, [r7, #20]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c92:	2b04      	cmp	r3, #4
 8003c94:	d117      	bne.n	8003cc6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c9a:	697a      	ldr	r2, [r7, #20]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d00e      	beq.n	8003cc6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f000 fa91 	bl	80041d0 <DMA_CheckFifoParam>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d008      	beq.n	8003cc6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2240      	movs	r2, #64	; 0x40
 8003cb8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e016      	b.n	8003cf4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	697a      	ldr	r2, [r7, #20]
 8003ccc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 fa48 	bl	8004164 <DMA_CalcBaseAndBitshift>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cdc:	223f      	movs	r2, #63	; 0x3f
 8003cde:	409a      	lsls	r2, r3
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2201      	movs	r2, #1
 8003cee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003cf2:	2300      	movs	r3, #0
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3718      	adds	r7, #24
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	f010803f 	.word	0xf010803f

08003d00 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b086      	sub	sp, #24
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	607a      	str	r2, [r7, #4]
 8003d0c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d16:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d101      	bne.n	8003d26 <HAL_DMA_Start_IT+0x26>
 8003d22:	2302      	movs	r3, #2
 8003d24:	e040      	b.n	8003da8 <HAL_DMA_Start_IT+0xa8>
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d12f      	bne.n	8003d9a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2202      	movs	r2, #2
 8003d3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2200      	movs	r2, #0
 8003d46:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	68b9      	ldr	r1, [r7, #8]
 8003d4e:	68f8      	ldr	r0, [r7, #12]
 8003d50:	f000 f9da 	bl	8004108 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d58:	223f      	movs	r2, #63	; 0x3f
 8003d5a:	409a      	lsls	r2, r3
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f042 0216 	orr.w	r2, r2, #22
 8003d6e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d007      	beq.n	8003d88 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f042 0208 	orr.w	r2, r2, #8
 8003d86:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f042 0201 	orr.w	r2, r2, #1
 8003d96:	601a      	str	r2, [r3, #0]
 8003d98:	e005      	b.n	8003da6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003da2:	2302      	movs	r3, #2
 8003da4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003da6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3718      	adds	r7, #24
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d004      	beq.n	8003dce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2280      	movs	r2, #128	; 0x80
 8003dc8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e00c      	b.n	8003de8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2205      	movs	r2, #5
 8003dd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f022 0201 	bic.w	r2, r2, #1
 8003de4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003de6:	2300      	movs	r3, #0
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	370c      	adds	r7, #12
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b086      	sub	sp, #24
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003e00:	4b92      	ldr	r3, [pc, #584]	; (800404c <HAL_DMA_IRQHandler+0x258>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a92      	ldr	r2, [pc, #584]	; (8004050 <HAL_DMA_IRQHandler+0x25c>)
 8003e06:	fba2 2303 	umull	r2, r3, r2, r3
 8003e0a:	0a9b      	lsrs	r3, r3, #10
 8003e0c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e12:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e1e:	2208      	movs	r2, #8
 8003e20:	409a      	lsls	r2, r3
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	4013      	ands	r3, r2
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d01a      	beq.n	8003e60 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0304 	and.w	r3, r3, #4
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d013      	beq.n	8003e60 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f022 0204 	bic.w	r2, r2, #4
 8003e46:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e4c:	2208      	movs	r2, #8
 8003e4e:	409a      	lsls	r2, r3
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e58:	f043 0201 	orr.w	r2, r3, #1
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e64:	2201      	movs	r2, #1
 8003e66:	409a      	lsls	r2, r3
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d012      	beq.n	8003e96 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	695b      	ldr	r3, [r3, #20]
 8003e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00b      	beq.n	8003e96 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e82:	2201      	movs	r2, #1
 8003e84:	409a      	lsls	r2, r3
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e8e:	f043 0202 	orr.w	r2, r3, #2
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e9a:	2204      	movs	r2, #4
 8003e9c:	409a      	lsls	r2, r3
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d012      	beq.n	8003ecc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0302 	and.w	r3, r3, #2
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d00b      	beq.n	8003ecc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eb8:	2204      	movs	r2, #4
 8003eba:	409a      	lsls	r2, r3
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ec4:	f043 0204 	orr.w	r2, r3, #4
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ed0:	2210      	movs	r2, #16
 8003ed2:	409a      	lsls	r2, r3
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d043      	beq.n	8003f64 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0308 	and.w	r3, r3, #8
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d03c      	beq.n	8003f64 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eee:	2210      	movs	r2, #16
 8003ef0:	409a      	lsls	r2, r3
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d018      	beq.n	8003f36 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d108      	bne.n	8003f24 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d024      	beq.n	8003f64 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	4798      	blx	r3
 8003f22:	e01f      	b.n	8003f64 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d01b      	beq.n	8003f64 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	4798      	blx	r3
 8003f34:	e016      	b.n	8003f64 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d107      	bne.n	8003f54 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f022 0208 	bic.w	r2, r2, #8
 8003f52:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d003      	beq.n	8003f64 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f68:	2220      	movs	r2, #32
 8003f6a:	409a      	lsls	r2, r3
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	4013      	ands	r3, r2
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	f000 808e 	beq.w	8004092 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0310 	and.w	r3, r3, #16
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	f000 8086 	beq.w	8004092 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f8a:	2220      	movs	r2, #32
 8003f8c:	409a      	lsls	r2, r3
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	2b05      	cmp	r3, #5
 8003f9c:	d136      	bne.n	800400c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f022 0216 	bic.w	r2, r2, #22
 8003fac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	695a      	ldr	r2, [r3, #20]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003fbc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d103      	bne.n	8003fce <HAL_DMA_IRQHandler+0x1da>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d007      	beq.n	8003fde <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f022 0208 	bic.w	r2, r2, #8
 8003fdc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fe2:	223f      	movs	r2, #63	; 0x3f
 8003fe4:	409a      	lsls	r2, r3
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d07d      	beq.n	80040fe <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	4798      	blx	r3
        }
        return;
 800400a:	e078      	b.n	80040fe <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d01c      	beq.n	8004054 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d108      	bne.n	800403a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800402c:	2b00      	cmp	r3, #0
 800402e:	d030      	beq.n	8004092 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	4798      	blx	r3
 8004038:	e02b      	b.n	8004092 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800403e:	2b00      	cmp	r3, #0
 8004040:	d027      	beq.n	8004092 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	4798      	blx	r3
 800404a:	e022      	b.n	8004092 <HAL_DMA_IRQHandler+0x29e>
 800404c:	20000008 	.word	0x20000008
 8004050:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800405e:	2b00      	cmp	r3, #0
 8004060:	d10f      	bne.n	8004082 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f022 0210 	bic.w	r2, r2, #16
 8004070:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2201      	movs	r2, #1
 800407e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004086:	2b00      	cmp	r3, #0
 8004088:	d003      	beq.n	8004092 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004096:	2b00      	cmp	r3, #0
 8004098:	d032      	beq.n	8004100 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800409e:	f003 0301 	and.w	r3, r3, #1
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d022      	beq.n	80040ec <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2205      	movs	r2, #5
 80040aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f022 0201 	bic.w	r2, r2, #1
 80040bc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	3301      	adds	r3, #1
 80040c2:	60bb      	str	r3, [r7, #8]
 80040c4:	697a      	ldr	r2, [r7, #20]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d307      	bcc.n	80040da <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0301 	and.w	r3, r3, #1
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d1f2      	bne.n	80040be <HAL_DMA_IRQHandler+0x2ca>
 80040d8:	e000      	b.n	80040dc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80040da:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d005      	beq.n	8004100 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	4798      	blx	r3
 80040fc:	e000      	b.n	8004100 <HAL_DMA_IRQHandler+0x30c>
        return;
 80040fe:	bf00      	nop
    }
  }
}
 8004100:	3718      	adds	r7, #24
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop

08004108 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004108:	b480      	push	{r7}
 800410a:	b085      	sub	sp, #20
 800410c:	af00      	add	r7, sp, #0
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	607a      	str	r2, [r7, #4]
 8004114:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004124:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	683a      	ldr	r2, [r7, #0]
 800412c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	2b40      	cmp	r3, #64	; 0x40
 8004134:	d108      	bne.n	8004148 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	68ba      	ldr	r2, [r7, #8]
 8004144:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004146:	e007      	b.n	8004158 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	68ba      	ldr	r2, [r7, #8]
 800414e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	60da      	str	r2, [r3, #12]
}
 8004158:	bf00      	nop
 800415a:	3714      	adds	r7, #20
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004164:	b480      	push	{r7}
 8004166:	b085      	sub	sp, #20
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	b2db      	uxtb	r3, r3
 8004172:	3b10      	subs	r3, #16
 8004174:	4a14      	ldr	r2, [pc, #80]	; (80041c8 <DMA_CalcBaseAndBitshift+0x64>)
 8004176:	fba2 2303 	umull	r2, r3, r2, r3
 800417a:	091b      	lsrs	r3, r3, #4
 800417c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800417e:	4a13      	ldr	r2, [pc, #76]	; (80041cc <DMA_CalcBaseAndBitshift+0x68>)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	4413      	add	r3, r2
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	461a      	mov	r2, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2b03      	cmp	r3, #3
 8004190:	d909      	bls.n	80041a6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800419a:	f023 0303 	bic.w	r3, r3, #3
 800419e:	1d1a      	adds	r2, r3, #4
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	659a      	str	r2, [r3, #88]	; 0x58
 80041a4:	e007      	b.n	80041b6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80041ae:	f023 0303 	bic.w	r3, r3, #3
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3714      	adds	r7, #20
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	aaaaaaab 	.word	0xaaaaaaab
 80041cc:	0800a890 	.word	0x0800a890

080041d0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b085      	sub	sp, #20
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041d8:	2300      	movs	r3, #0
 80041da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	699b      	ldr	r3, [r3, #24]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d11f      	bne.n	800422a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	2b03      	cmp	r3, #3
 80041ee:	d855      	bhi.n	800429c <DMA_CheckFifoParam+0xcc>
 80041f0:	a201      	add	r2, pc, #4	; (adr r2, 80041f8 <DMA_CheckFifoParam+0x28>)
 80041f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041f6:	bf00      	nop
 80041f8:	08004209 	.word	0x08004209
 80041fc:	0800421b 	.word	0x0800421b
 8004200:	08004209 	.word	0x08004209
 8004204:	0800429d 	.word	0x0800429d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800420c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d045      	beq.n	80042a0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004218:	e042      	b.n	80042a0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800421e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004222:	d13f      	bne.n	80042a4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004228:	e03c      	b.n	80042a4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	699b      	ldr	r3, [r3, #24]
 800422e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004232:	d121      	bne.n	8004278 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	2b03      	cmp	r3, #3
 8004238:	d836      	bhi.n	80042a8 <DMA_CheckFifoParam+0xd8>
 800423a:	a201      	add	r2, pc, #4	; (adr r2, 8004240 <DMA_CheckFifoParam+0x70>)
 800423c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004240:	08004251 	.word	0x08004251
 8004244:	08004257 	.word	0x08004257
 8004248:	08004251 	.word	0x08004251
 800424c:	08004269 	.word	0x08004269
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	73fb      	strb	r3, [r7, #15]
      break;
 8004254:	e02f      	b.n	80042b6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800425a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d024      	beq.n	80042ac <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004266:	e021      	b.n	80042ac <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800426c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004270:	d11e      	bne.n	80042b0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004276:	e01b      	b.n	80042b0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	2b02      	cmp	r3, #2
 800427c:	d902      	bls.n	8004284 <DMA_CheckFifoParam+0xb4>
 800427e:	2b03      	cmp	r3, #3
 8004280:	d003      	beq.n	800428a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004282:	e018      	b.n	80042b6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	73fb      	strb	r3, [r7, #15]
      break;
 8004288:	e015      	b.n	80042b6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800428e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00e      	beq.n	80042b4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	73fb      	strb	r3, [r7, #15]
      break;
 800429a:	e00b      	b.n	80042b4 <DMA_CheckFifoParam+0xe4>
      break;
 800429c:	bf00      	nop
 800429e:	e00a      	b.n	80042b6 <DMA_CheckFifoParam+0xe6>
      break;
 80042a0:	bf00      	nop
 80042a2:	e008      	b.n	80042b6 <DMA_CheckFifoParam+0xe6>
      break;
 80042a4:	bf00      	nop
 80042a6:	e006      	b.n	80042b6 <DMA_CheckFifoParam+0xe6>
      break;
 80042a8:	bf00      	nop
 80042aa:	e004      	b.n	80042b6 <DMA_CheckFifoParam+0xe6>
      break;
 80042ac:	bf00      	nop
 80042ae:	e002      	b.n	80042b6 <DMA_CheckFifoParam+0xe6>
      break;   
 80042b0:	bf00      	nop
 80042b2:	e000      	b.n	80042b6 <DMA_CheckFifoParam+0xe6>
      break;
 80042b4:	bf00      	nop
    }
  } 
  
  return status; 
 80042b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3714      	adds	r7, #20
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b089      	sub	sp, #36	; 0x24
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80042ce:	2300      	movs	r3, #0
 80042d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80042d2:	2300      	movs	r3, #0
 80042d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80042d6:	2300      	movs	r3, #0
 80042d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042da:	2300      	movs	r3, #0
 80042dc:	61fb      	str	r3, [r7, #28]
 80042de:	e16b      	b.n	80045b8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80042e0:	2201      	movs	r2, #1
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	fa02 f303 	lsl.w	r3, r2, r3
 80042e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	697a      	ldr	r2, [r7, #20]
 80042f0:	4013      	ands	r3, r2
 80042f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80042f4:	693a      	ldr	r2, [r7, #16]
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	429a      	cmp	r2, r3
 80042fa:	f040 815a 	bne.w	80045b2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	2b01      	cmp	r3, #1
 8004304:	d00b      	beq.n	800431e <HAL_GPIO_Init+0x5a>
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	2b02      	cmp	r3, #2
 800430c:	d007      	beq.n	800431e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004312:	2b11      	cmp	r3, #17
 8004314:	d003      	beq.n	800431e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	2b12      	cmp	r3, #18
 800431c:	d130      	bne.n	8004380 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	005b      	lsls	r3, r3, #1
 8004328:	2203      	movs	r2, #3
 800432a:	fa02 f303 	lsl.w	r3, r2, r3
 800432e:	43db      	mvns	r3, r3
 8004330:	69ba      	ldr	r2, [r7, #24]
 8004332:	4013      	ands	r3, r2
 8004334:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	68da      	ldr	r2, [r3, #12]
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	005b      	lsls	r3, r3, #1
 800433e:	fa02 f303 	lsl.w	r3, r2, r3
 8004342:	69ba      	ldr	r2, [r7, #24]
 8004344:	4313      	orrs	r3, r2
 8004346:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	69ba      	ldr	r2, [r7, #24]
 800434c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004354:	2201      	movs	r2, #1
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	fa02 f303 	lsl.w	r3, r2, r3
 800435c:	43db      	mvns	r3, r3
 800435e:	69ba      	ldr	r2, [r7, #24]
 8004360:	4013      	ands	r3, r2
 8004362:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	091b      	lsrs	r3, r3, #4
 800436a:	f003 0201 	and.w	r2, r3, #1
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	fa02 f303 	lsl.w	r3, r2, r3
 8004374:	69ba      	ldr	r2, [r7, #24]
 8004376:	4313      	orrs	r3, r2
 8004378:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	69ba      	ldr	r2, [r7, #24]
 800437e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	005b      	lsls	r3, r3, #1
 800438a:	2203      	movs	r2, #3
 800438c:	fa02 f303 	lsl.w	r3, r2, r3
 8004390:	43db      	mvns	r3, r3
 8004392:	69ba      	ldr	r2, [r7, #24]
 8004394:	4013      	ands	r3, r2
 8004396:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	689a      	ldr	r2, [r3, #8]
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	005b      	lsls	r3, r3, #1
 80043a0:	fa02 f303 	lsl.w	r3, r2, r3
 80043a4:	69ba      	ldr	r2, [r7, #24]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	69ba      	ldr	r2, [r7, #24]
 80043ae:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	d003      	beq.n	80043c0 <HAL_GPIO_Init+0xfc>
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	2b12      	cmp	r3, #18
 80043be:	d123      	bne.n	8004408 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	08da      	lsrs	r2, r3, #3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	3208      	adds	r2, #8
 80043c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	f003 0307 	and.w	r3, r3, #7
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	220f      	movs	r2, #15
 80043d8:	fa02 f303 	lsl.w	r3, r2, r3
 80043dc:	43db      	mvns	r3, r3
 80043de:	69ba      	ldr	r2, [r7, #24]
 80043e0:	4013      	ands	r3, r2
 80043e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	691a      	ldr	r2, [r3, #16]
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	f003 0307 	and.w	r3, r3, #7
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	fa02 f303 	lsl.w	r3, r2, r3
 80043f4:	69ba      	ldr	r2, [r7, #24]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	08da      	lsrs	r2, r3, #3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	3208      	adds	r2, #8
 8004402:	69b9      	ldr	r1, [r7, #24]
 8004404:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	005b      	lsls	r3, r3, #1
 8004412:	2203      	movs	r2, #3
 8004414:	fa02 f303 	lsl.w	r3, r2, r3
 8004418:	43db      	mvns	r3, r3
 800441a:	69ba      	ldr	r2, [r7, #24]
 800441c:	4013      	ands	r3, r2
 800441e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	f003 0203 	and.w	r2, r3, #3
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	005b      	lsls	r3, r3, #1
 800442c:	fa02 f303 	lsl.w	r3, r2, r3
 8004430:	69ba      	ldr	r2, [r7, #24]
 8004432:	4313      	orrs	r3, r2
 8004434:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	69ba      	ldr	r2, [r7, #24]
 800443a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004444:	2b00      	cmp	r3, #0
 8004446:	f000 80b4 	beq.w	80045b2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800444a:	2300      	movs	r3, #0
 800444c:	60fb      	str	r3, [r7, #12]
 800444e:	4b5f      	ldr	r3, [pc, #380]	; (80045cc <HAL_GPIO_Init+0x308>)
 8004450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004452:	4a5e      	ldr	r2, [pc, #376]	; (80045cc <HAL_GPIO_Init+0x308>)
 8004454:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004458:	6453      	str	r3, [r2, #68]	; 0x44
 800445a:	4b5c      	ldr	r3, [pc, #368]	; (80045cc <HAL_GPIO_Init+0x308>)
 800445c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800445e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004462:	60fb      	str	r3, [r7, #12]
 8004464:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004466:	4a5a      	ldr	r2, [pc, #360]	; (80045d0 <HAL_GPIO_Init+0x30c>)
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	089b      	lsrs	r3, r3, #2
 800446c:	3302      	adds	r3, #2
 800446e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004472:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	f003 0303 	and.w	r3, r3, #3
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	220f      	movs	r2, #15
 800447e:	fa02 f303 	lsl.w	r3, r2, r3
 8004482:	43db      	mvns	r3, r3
 8004484:	69ba      	ldr	r2, [r7, #24]
 8004486:	4013      	ands	r3, r2
 8004488:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a51      	ldr	r2, [pc, #324]	; (80045d4 <HAL_GPIO_Init+0x310>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d02b      	beq.n	80044ea <HAL_GPIO_Init+0x226>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a50      	ldr	r2, [pc, #320]	; (80045d8 <HAL_GPIO_Init+0x314>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d025      	beq.n	80044e6 <HAL_GPIO_Init+0x222>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a4f      	ldr	r2, [pc, #316]	; (80045dc <HAL_GPIO_Init+0x318>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d01f      	beq.n	80044e2 <HAL_GPIO_Init+0x21e>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a4e      	ldr	r2, [pc, #312]	; (80045e0 <HAL_GPIO_Init+0x31c>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d019      	beq.n	80044de <HAL_GPIO_Init+0x21a>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a4d      	ldr	r2, [pc, #308]	; (80045e4 <HAL_GPIO_Init+0x320>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d013      	beq.n	80044da <HAL_GPIO_Init+0x216>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a4c      	ldr	r2, [pc, #304]	; (80045e8 <HAL_GPIO_Init+0x324>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d00d      	beq.n	80044d6 <HAL_GPIO_Init+0x212>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a4b      	ldr	r2, [pc, #300]	; (80045ec <HAL_GPIO_Init+0x328>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d007      	beq.n	80044d2 <HAL_GPIO_Init+0x20e>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a4a      	ldr	r2, [pc, #296]	; (80045f0 <HAL_GPIO_Init+0x32c>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d101      	bne.n	80044ce <HAL_GPIO_Init+0x20a>
 80044ca:	2307      	movs	r3, #7
 80044cc:	e00e      	b.n	80044ec <HAL_GPIO_Init+0x228>
 80044ce:	2308      	movs	r3, #8
 80044d0:	e00c      	b.n	80044ec <HAL_GPIO_Init+0x228>
 80044d2:	2306      	movs	r3, #6
 80044d4:	e00a      	b.n	80044ec <HAL_GPIO_Init+0x228>
 80044d6:	2305      	movs	r3, #5
 80044d8:	e008      	b.n	80044ec <HAL_GPIO_Init+0x228>
 80044da:	2304      	movs	r3, #4
 80044dc:	e006      	b.n	80044ec <HAL_GPIO_Init+0x228>
 80044de:	2303      	movs	r3, #3
 80044e0:	e004      	b.n	80044ec <HAL_GPIO_Init+0x228>
 80044e2:	2302      	movs	r3, #2
 80044e4:	e002      	b.n	80044ec <HAL_GPIO_Init+0x228>
 80044e6:	2301      	movs	r3, #1
 80044e8:	e000      	b.n	80044ec <HAL_GPIO_Init+0x228>
 80044ea:	2300      	movs	r3, #0
 80044ec:	69fa      	ldr	r2, [r7, #28]
 80044ee:	f002 0203 	and.w	r2, r2, #3
 80044f2:	0092      	lsls	r2, r2, #2
 80044f4:	4093      	lsls	r3, r2
 80044f6:	69ba      	ldr	r2, [r7, #24]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80044fc:	4934      	ldr	r1, [pc, #208]	; (80045d0 <HAL_GPIO_Init+0x30c>)
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	089b      	lsrs	r3, r3, #2
 8004502:	3302      	adds	r3, #2
 8004504:	69ba      	ldr	r2, [r7, #24]
 8004506:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800450a:	4b3a      	ldr	r3, [pc, #232]	; (80045f4 <HAL_GPIO_Init+0x330>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	43db      	mvns	r3, r3
 8004514:	69ba      	ldr	r2, [r7, #24]
 8004516:	4013      	ands	r3, r2
 8004518:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d003      	beq.n	800452e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004526:	69ba      	ldr	r2, [r7, #24]
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	4313      	orrs	r3, r2
 800452c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800452e:	4a31      	ldr	r2, [pc, #196]	; (80045f4 <HAL_GPIO_Init+0x330>)
 8004530:	69bb      	ldr	r3, [r7, #24]
 8004532:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004534:	4b2f      	ldr	r3, [pc, #188]	; (80045f4 <HAL_GPIO_Init+0x330>)
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	43db      	mvns	r3, r3
 800453e:	69ba      	ldr	r2, [r7, #24]
 8004540:	4013      	ands	r3, r2
 8004542:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800454c:	2b00      	cmp	r3, #0
 800454e:	d003      	beq.n	8004558 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004550:	69ba      	ldr	r2, [r7, #24]
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	4313      	orrs	r3, r2
 8004556:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004558:	4a26      	ldr	r2, [pc, #152]	; (80045f4 <HAL_GPIO_Init+0x330>)
 800455a:	69bb      	ldr	r3, [r7, #24]
 800455c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800455e:	4b25      	ldr	r3, [pc, #148]	; (80045f4 <HAL_GPIO_Init+0x330>)
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	43db      	mvns	r3, r3
 8004568:	69ba      	ldr	r2, [r7, #24]
 800456a:	4013      	ands	r3, r2
 800456c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d003      	beq.n	8004582 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800457a:	69ba      	ldr	r2, [r7, #24]
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	4313      	orrs	r3, r2
 8004580:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004582:	4a1c      	ldr	r2, [pc, #112]	; (80045f4 <HAL_GPIO_Init+0x330>)
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004588:	4b1a      	ldr	r3, [pc, #104]	; (80045f4 <HAL_GPIO_Init+0x330>)
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	43db      	mvns	r3, r3
 8004592:	69ba      	ldr	r2, [r7, #24]
 8004594:	4013      	ands	r3, r2
 8004596:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d003      	beq.n	80045ac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80045a4:	69ba      	ldr	r2, [r7, #24]
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80045ac:	4a11      	ldr	r2, [pc, #68]	; (80045f4 <HAL_GPIO_Init+0x330>)
 80045ae:	69bb      	ldr	r3, [r7, #24]
 80045b0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	3301      	adds	r3, #1
 80045b6:	61fb      	str	r3, [r7, #28]
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	2b0f      	cmp	r3, #15
 80045bc:	f67f ae90 	bls.w	80042e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80045c0:	bf00      	nop
 80045c2:	3724      	adds	r7, #36	; 0x24
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr
 80045cc:	40023800 	.word	0x40023800
 80045d0:	40013800 	.word	0x40013800
 80045d4:	40020000 	.word	0x40020000
 80045d8:	40020400 	.word	0x40020400
 80045dc:	40020800 	.word	0x40020800
 80045e0:	40020c00 	.word	0x40020c00
 80045e4:	40021000 	.word	0x40021000
 80045e8:	40021400 	.word	0x40021400
 80045ec:	40021800 	.word	0x40021800
 80045f0:	40021c00 	.word	0x40021c00
 80045f4:	40013c00 	.word	0x40013c00

080045f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b085      	sub	sp, #20
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	460b      	mov	r3, r1
 8004602:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	691a      	ldr	r2, [r3, #16]
 8004608:	887b      	ldrh	r3, [r7, #2]
 800460a:	4013      	ands	r3, r2
 800460c:	2b00      	cmp	r3, #0
 800460e:	d002      	beq.n	8004616 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004610:	2301      	movs	r3, #1
 8004612:	73fb      	strb	r3, [r7, #15]
 8004614:	e001      	b.n	800461a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004616:	2300      	movs	r3, #0
 8004618:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800461a:	7bfb      	ldrb	r3, [r7, #15]
}
 800461c:	4618      	mov	r0, r3
 800461e:	3714      	adds	r7, #20
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr

08004628 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004628:	b480      	push	{r7}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	460b      	mov	r3, r1
 8004632:	807b      	strh	r3, [r7, #2]
 8004634:	4613      	mov	r3, r2
 8004636:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004638:	787b      	ldrb	r3, [r7, #1]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d003      	beq.n	8004646 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800463e:	887a      	ldrh	r2, [r7, #2]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004644:	e003      	b.n	800464e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004646:	887b      	ldrh	r3, [r7, #2]
 8004648:	041a      	lsls	r2, r3, #16
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	619a      	str	r2, [r3, #24]
}
 800464e:	bf00      	nop
 8004650:	370c      	adds	r7, #12
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr

0800465a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800465a:	b480      	push	{r7}
 800465c:	b083      	sub	sp, #12
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
 8004662:	460b      	mov	r3, r1
 8004664:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	695a      	ldr	r2, [r3, #20]
 800466a:	887b      	ldrh	r3, [r7, #2]
 800466c:	401a      	ands	r2, r3
 800466e:	887b      	ldrh	r3, [r7, #2]
 8004670:	429a      	cmp	r2, r3
 8004672:	d104      	bne.n	800467e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004674:	887b      	ldrh	r3, [r7, #2]
 8004676:	041a      	lsls	r2, r3, #16
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800467c:	e002      	b.n	8004684 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800467e:	887a      	ldrh	r2, [r7, #2]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	619a      	str	r2, [r3, #24]
}
 8004684:	bf00      	nop
 8004686:	370c      	adds	r7, #12
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b086      	sub	sp, #24
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d101      	bne.n	80046a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e25b      	b.n	8004b5a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0301 	and.w	r3, r3, #1
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d075      	beq.n	800479a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046ae:	4ba3      	ldr	r3, [pc, #652]	; (800493c <HAL_RCC_OscConfig+0x2ac>)
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	f003 030c 	and.w	r3, r3, #12
 80046b6:	2b04      	cmp	r3, #4
 80046b8:	d00c      	beq.n	80046d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046ba:	4ba0      	ldr	r3, [pc, #640]	; (800493c <HAL_RCC_OscConfig+0x2ac>)
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046c2:	2b08      	cmp	r3, #8
 80046c4:	d112      	bne.n	80046ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046c6:	4b9d      	ldr	r3, [pc, #628]	; (800493c <HAL_RCC_OscConfig+0x2ac>)
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046d2:	d10b      	bne.n	80046ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046d4:	4b99      	ldr	r3, [pc, #612]	; (800493c <HAL_RCC_OscConfig+0x2ac>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d05b      	beq.n	8004798 <HAL_RCC_OscConfig+0x108>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d157      	bne.n	8004798 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e236      	b.n	8004b5a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046f4:	d106      	bne.n	8004704 <HAL_RCC_OscConfig+0x74>
 80046f6:	4b91      	ldr	r3, [pc, #580]	; (800493c <HAL_RCC_OscConfig+0x2ac>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a90      	ldr	r2, [pc, #576]	; (800493c <HAL_RCC_OscConfig+0x2ac>)
 80046fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004700:	6013      	str	r3, [r2, #0]
 8004702:	e01d      	b.n	8004740 <HAL_RCC_OscConfig+0xb0>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800470c:	d10c      	bne.n	8004728 <HAL_RCC_OscConfig+0x98>
 800470e:	4b8b      	ldr	r3, [pc, #556]	; (800493c <HAL_RCC_OscConfig+0x2ac>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a8a      	ldr	r2, [pc, #552]	; (800493c <HAL_RCC_OscConfig+0x2ac>)
 8004714:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004718:	6013      	str	r3, [r2, #0]
 800471a:	4b88      	ldr	r3, [pc, #544]	; (800493c <HAL_RCC_OscConfig+0x2ac>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a87      	ldr	r2, [pc, #540]	; (800493c <HAL_RCC_OscConfig+0x2ac>)
 8004720:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004724:	6013      	str	r3, [r2, #0]
 8004726:	e00b      	b.n	8004740 <HAL_RCC_OscConfig+0xb0>
 8004728:	4b84      	ldr	r3, [pc, #528]	; (800493c <HAL_RCC_OscConfig+0x2ac>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a83      	ldr	r2, [pc, #524]	; (800493c <HAL_RCC_OscConfig+0x2ac>)
 800472e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004732:	6013      	str	r3, [r2, #0]
 8004734:	4b81      	ldr	r3, [pc, #516]	; (800493c <HAL_RCC_OscConfig+0x2ac>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a80      	ldr	r2, [pc, #512]	; (800493c <HAL_RCC_OscConfig+0x2ac>)
 800473a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800473e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d013      	beq.n	8004770 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004748:	f7fe fbae 	bl	8002ea8 <HAL_GetTick>
 800474c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800474e:	e008      	b.n	8004762 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004750:	f7fe fbaa 	bl	8002ea8 <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	2b64      	cmp	r3, #100	; 0x64
 800475c:	d901      	bls.n	8004762 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e1fb      	b.n	8004b5a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004762:	4b76      	ldr	r3, [pc, #472]	; (800493c <HAL_RCC_OscConfig+0x2ac>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d0f0      	beq.n	8004750 <HAL_RCC_OscConfig+0xc0>
 800476e:	e014      	b.n	800479a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004770:	f7fe fb9a 	bl	8002ea8 <HAL_GetTick>
 8004774:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004776:	e008      	b.n	800478a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004778:	f7fe fb96 	bl	8002ea8 <HAL_GetTick>
 800477c:	4602      	mov	r2, r0
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	2b64      	cmp	r3, #100	; 0x64
 8004784:	d901      	bls.n	800478a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e1e7      	b.n	8004b5a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800478a:	4b6c      	ldr	r3, [pc, #432]	; (800493c <HAL_RCC_OscConfig+0x2ac>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d1f0      	bne.n	8004778 <HAL_RCC_OscConfig+0xe8>
 8004796:	e000      	b.n	800479a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004798:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 0302 	and.w	r3, r3, #2
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d063      	beq.n	800486e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047a6:	4b65      	ldr	r3, [pc, #404]	; (800493c <HAL_RCC_OscConfig+0x2ac>)
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	f003 030c 	and.w	r3, r3, #12
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d00b      	beq.n	80047ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047b2:	4b62      	ldr	r3, [pc, #392]	; (800493c <HAL_RCC_OscConfig+0x2ac>)
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047ba:	2b08      	cmp	r3, #8
 80047bc:	d11c      	bne.n	80047f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047be:	4b5f      	ldr	r3, [pc, #380]	; (800493c <HAL_RCC_OscConfig+0x2ac>)
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d116      	bne.n	80047f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047ca:	4b5c      	ldr	r3, [pc, #368]	; (800493c <HAL_RCC_OscConfig+0x2ac>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0302 	and.w	r3, r3, #2
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d005      	beq.n	80047e2 <HAL_RCC_OscConfig+0x152>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d001      	beq.n	80047e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e1bb      	b.n	8004b5a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047e2:	4b56      	ldr	r3, [pc, #344]	; (800493c <HAL_RCC_OscConfig+0x2ac>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	00db      	lsls	r3, r3, #3
 80047f0:	4952      	ldr	r1, [pc, #328]	; (800493c <HAL_RCC_OscConfig+0x2ac>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047f6:	e03a      	b.n	800486e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d020      	beq.n	8004842 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004800:	4b4f      	ldr	r3, [pc, #316]	; (8004940 <HAL_RCC_OscConfig+0x2b0>)
 8004802:	2201      	movs	r2, #1
 8004804:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004806:	f7fe fb4f 	bl	8002ea8 <HAL_GetTick>
 800480a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800480c:	e008      	b.n	8004820 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800480e:	f7fe fb4b 	bl	8002ea8 <HAL_GetTick>
 8004812:	4602      	mov	r2, r0
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	2b02      	cmp	r3, #2
 800481a:	d901      	bls.n	8004820 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	e19c      	b.n	8004b5a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004820:	4b46      	ldr	r3, [pc, #280]	; (800493c <HAL_RCC_OscConfig+0x2ac>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0302 	and.w	r3, r3, #2
 8004828:	2b00      	cmp	r3, #0
 800482a:	d0f0      	beq.n	800480e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800482c:	4b43      	ldr	r3, [pc, #268]	; (800493c <HAL_RCC_OscConfig+0x2ac>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	691b      	ldr	r3, [r3, #16]
 8004838:	00db      	lsls	r3, r3, #3
 800483a:	4940      	ldr	r1, [pc, #256]	; (800493c <HAL_RCC_OscConfig+0x2ac>)
 800483c:	4313      	orrs	r3, r2
 800483e:	600b      	str	r3, [r1, #0]
 8004840:	e015      	b.n	800486e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004842:	4b3f      	ldr	r3, [pc, #252]	; (8004940 <HAL_RCC_OscConfig+0x2b0>)
 8004844:	2200      	movs	r2, #0
 8004846:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004848:	f7fe fb2e 	bl	8002ea8 <HAL_GetTick>
 800484c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800484e:	e008      	b.n	8004862 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004850:	f7fe fb2a 	bl	8002ea8 <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	2b02      	cmp	r3, #2
 800485c:	d901      	bls.n	8004862 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e17b      	b.n	8004b5a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004862:	4b36      	ldr	r3, [pc, #216]	; (800493c <HAL_RCC_OscConfig+0x2ac>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0302 	and.w	r3, r3, #2
 800486a:	2b00      	cmp	r3, #0
 800486c:	d1f0      	bne.n	8004850 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0308 	and.w	r3, r3, #8
 8004876:	2b00      	cmp	r3, #0
 8004878:	d030      	beq.n	80048dc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	695b      	ldr	r3, [r3, #20]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d016      	beq.n	80048b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004882:	4b30      	ldr	r3, [pc, #192]	; (8004944 <HAL_RCC_OscConfig+0x2b4>)
 8004884:	2201      	movs	r2, #1
 8004886:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004888:	f7fe fb0e 	bl	8002ea8 <HAL_GetTick>
 800488c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800488e:	e008      	b.n	80048a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004890:	f7fe fb0a 	bl	8002ea8 <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	2b02      	cmp	r3, #2
 800489c:	d901      	bls.n	80048a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e15b      	b.n	8004b5a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048a2:	4b26      	ldr	r3, [pc, #152]	; (800493c <HAL_RCC_OscConfig+0x2ac>)
 80048a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048a6:	f003 0302 	and.w	r3, r3, #2
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d0f0      	beq.n	8004890 <HAL_RCC_OscConfig+0x200>
 80048ae:	e015      	b.n	80048dc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048b0:	4b24      	ldr	r3, [pc, #144]	; (8004944 <HAL_RCC_OscConfig+0x2b4>)
 80048b2:	2200      	movs	r2, #0
 80048b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048b6:	f7fe faf7 	bl	8002ea8 <HAL_GetTick>
 80048ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048bc:	e008      	b.n	80048d0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048be:	f7fe faf3 	bl	8002ea8 <HAL_GetTick>
 80048c2:	4602      	mov	r2, r0
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d901      	bls.n	80048d0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80048cc:	2303      	movs	r3, #3
 80048ce:	e144      	b.n	8004b5a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048d0:	4b1a      	ldr	r3, [pc, #104]	; (800493c <HAL_RCC_OscConfig+0x2ac>)
 80048d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048d4:	f003 0302 	and.w	r3, r3, #2
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d1f0      	bne.n	80048be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0304 	and.w	r3, r3, #4
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	f000 80a0 	beq.w	8004a2a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048ea:	2300      	movs	r3, #0
 80048ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048ee:	4b13      	ldr	r3, [pc, #76]	; (800493c <HAL_RCC_OscConfig+0x2ac>)
 80048f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d10f      	bne.n	800491a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048fa:	2300      	movs	r3, #0
 80048fc:	60bb      	str	r3, [r7, #8]
 80048fe:	4b0f      	ldr	r3, [pc, #60]	; (800493c <HAL_RCC_OscConfig+0x2ac>)
 8004900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004902:	4a0e      	ldr	r2, [pc, #56]	; (800493c <HAL_RCC_OscConfig+0x2ac>)
 8004904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004908:	6413      	str	r3, [r2, #64]	; 0x40
 800490a:	4b0c      	ldr	r3, [pc, #48]	; (800493c <HAL_RCC_OscConfig+0x2ac>)
 800490c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004912:	60bb      	str	r3, [r7, #8]
 8004914:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004916:	2301      	movs	r3, #1
 8004918:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800491a:	4b0b      	ldr	r3, [pc, #44]	; (8004948 <HAL_RCC_OscConfig+0x2b8>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004922:	2b00      	cmp	r3, #0
 8004924:	d121      	bne.n	800496a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004926:	4b08      	ldr	r3, [pc, #32]	; (8004948 <HAL_RCC_OscConfig+0x2b8>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a07      	ldr	r2, [pc, #28]	; (8004948 <HAL_RCC_OscConfig+0x2b8>)
 800492c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004930:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004932:	f7fe fab9 	bl	8002ea8 <HAL_GetTick>
 8004936:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004938:	e011      	b.n	800495e <HAL_RCC_OscConfig+0x2ce>
 800493a:	bf00      	nop
 800493c:	40023800 	.word	0x40023800
 8004940:	42470000 	.word	0x42470000
 8004944:	42470e80 	.word	0x42470e80
 8004948:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800494c:	f7fe faac 	bl	8002ea8 <HAL_GetTick>
 8004950:	4602      	mov	r2, r0
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	2b02      	cmp	r3, #2
 8004958:	d901      	bls.n	800495e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e0fd      	b.n	8004b5a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800495e:	4b81      	ldr	r3, [pc, #516]	; (8004b64 <HAL_RCC_OscConfig+0x4d4>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004966:	2b00      	cmp	r3, #0
 8004968:	d0f0      	beq.n	800494c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	2b01      	cmp	r3, #1
 8004970:	d106      	bne.n	8004980 <HAL_RCC_OscConfig+0x2f0>
 8004972:	4b7d      	ldr	r3, [pc, #500]	; (8004b68 <HAL_RCC_OscConfig+0x4d8>)
 8004974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004976:	4a7c      	ldr	r2, [pc, #496]	; (8004b68 <HAL_RCC_OscConfig+0x4d8>)
 8004978:	f043 0301 	orr.w	r3, r3, #1
 800497c:	6713      	str	r3, [r2, #112]	; 0x70
 800497e:	e01c      	b.n	80049ba <HAL_RCC_OscConfig+0x32a>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	2b05      	cmp	r3, #5
 8004986:	d10c      	bne.n	80049a2 <HAL_RCC_OscConfig+0x312>
 8004988:	4b77      	ldr	r3, [pc, #476]	; (8004b68 <HAL_RCC_OscConfig+0x4d8>)
 800498a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800498c:	4a76      	ldr	r2, [pc, #472]	; (8004b68 <HAL_RCC_OscConfig+0x4d8>)
 800498e:	f043 0304 	orr.w	r3, r3, #4
 8004992:	6713      	str	r3, [r2, #112]	; 0x70
 8004994:	4b74      	ldr	r3, [pc, #464]	; (8004b68 <HAL_RCC_OscConfig+0x4d8>)
 8004996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004998:	4a73      	ldr	r2, [pc, #460]	; (8004b68 <HAL_RCC_OscConfig+0x4d8>)
 800499a:	f043 0301 	orr.w	r3, r3, #1
 800499e:	6713      	str	r3, [r2, #112]	; 0x70
 80049a0:	e00b      	b.n	80049ba <HAL_RCC_OscConfig+0x32a>
 80049a2:	4b71      	ldr	r3, [pc, #452]	; (8004b68 <HAL_RCC_OscConfig+0x4d8>)
 80049a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a6:	4a70      	ldr	r2, [pc, #448]	; (8004b68 <HAL_RCC_OscConfig+0x4d8>)
 80049a8:	f023 0301 	bic.w	r3, r3, #1
 80049ac:	6713      	str	r3, [r2, #112]	; 0x70
 80049ae:	4b6e      	ldr	r3, [pc, #440]	; (8004b68 <HAL_RCC_OscConfig+0x4d8>)
 80049b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049b2:	4a6d      	ldr	r2, [pc, #436]	; (8004b68 <HAL_RCC_OscConfig+0x4d8>)
 80049b4:	f023 0304 	bic.w	r3, r3, #4
 80049b8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d015      	beq.n	80049ee <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049c2:	f7fe fa71 	bl	8002ea8 <HAL_GetTick>
 80049c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049c8:	e00a      	b.n	80049e0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049ca:	f7fe fa6d 	bl	8002ea8 <HAL_GetTick>
 80049ce:	4602      	mov	r2, r0
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80049d8:	4293      	cmp	r3, r2
 80049da:	d901      	bls.n	80049e0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80049dc:	2303      	movs	r3, #3
 80049de:	e0bc      	b.n	8004b5a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049e0:	4b61      	ldr	r3, [pc, #388]	; (8004b68 <HAL_RCC_OscConfig+0x4d8>)
 80049e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049e4:	f003 0302 	and.w	r3, r3, #2
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d0ee      	beq.n	80049ca <HAL_RCC_OscConfig+0x33a>
 80049ec:	e014      	b.n	8004a18 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049ee:	f7fe fa5b 	bl	8002ea8 <HAL_GetTick>
 80049f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049f4:	e00a      	b.n	8004a0c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049f6:	f7fe fa57 	bl	8002ea8 <HAL_GetTick>
 80049fa:	4602      	mov	r2, r0
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d901      	bls.n	8004a0c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004a08:	2303      	movs	r3, #3
 8004a0a:	e0a6      	b.n	8004b5a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a0c:	4b56      	ldr	r3, [pc, #344]	; (8004b68 <HAL_RCC_OscConfig+0x4d8>)
 8004a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a10:	f003 0302 	and.w	r3, r3, #2
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d1ee      	bne.n	80049f6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a18:	7dfb      	ldrb	r3, [r7, #23]
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d105      	bne.n	8004a2a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a1e:	4b52      	ldr	r3, [pc, #328]	; (8004b68 <HAL_RCC_OscConfig+0x4d8>)
 8004a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a22:	4a51      	ldr	r2, [pc, #324]	; (8004b68 <HAL_RCC_OscConfig+0x4d8>)
 8004a24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a28:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	699b      	ldr	r3, [r3, #24]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	f000 8092 	beq.w	8004b58 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a34:	4b4c      	ldr	r3, [pc, #304]	; (8004b68 <HAL_RCC_OscConfig+0x4d8>)
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	f003 030c 	and.w	r3, r3, #12
 8004a3c:	2b08      	cmp	r3, #8
 8004a3e:	d05c      	beq.n	8004afa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	699b      	ldr	r3, [r3, #24]
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d141      	bne.n	8004acc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a48:	4b48      	ldr	r3, [pc, #288]	; (8004b6c <HAL_RCC_OscConfig+0x4dc>)
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a4e:	f7fe fa2b 	bl	8002ea8 <HAL_GetTick>
 8004a52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a54:	e008      	b.n	8004a68 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a56:	f7fe fa27 	bl	8002ea8 <HAL_GetTick>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	1ad3      	subs	r3, r2, r3
 8004a60:	2b02      	cmp	r3, #2
 8004a62:	d901      	bls.n	8004a68 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004a64:	2303      	movs	r3, #3
 8004a66:	e078      	b.n	8004b5a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a68:	4b3f      	ldr	r3, [pc, #252]	; (8004b68 <HAL_RCC_OscConfig+0x4d8>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d1f0      	bne.n	8004a56 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	69da      	ldr	r2, [r3, #28]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6a1b      	ldr	r3, [r3, #32]
 8004a7c:	431a      	orrs	r2, r3
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a82:	019b      	lsls	r3, r3, #6
 8004a84:	431a      	orrs	r2, r3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a8a:	085b      	lsrs	r3, r3, #1
 8004a8c:	3b01      	subs	r3, #1
 8004a8e:	041b      	lsls	r3, r3, #16
 8004a90:	431a      	orrs	r2, r3
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a96:	061b      	lsls	r3, r3, #24
 8004a98:	4933      	ldr	r1, [pc, #204]	; (8004b68 <HAL_RCC_OscConfig+0x4d8>)
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a9e:	4b33      	ldr	r3, [pc, #204]	; (8004b6c <HAL_RCC_OscConfig+0x4dc>)
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aa4:	f7fe fa00 	bl	8002ea8 <HAL_GetTick>
 8004aa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004aaa:	e008      	b.n	8004abe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004aac:	f7fe f9fc 	bl	8002ea8 <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d901      	bls.n	8004abe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e04d      	b.n	8004b5a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004abe:	4b2a      	ldr	r3, [pc, #168]	; (8004b68 <HAL_RCC_OscConfig+0x4d8>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d0f0      	beq.n	8004aac <HAL_RCC_OscConfig+0x41c>
 8004aca:	e045      	b.n	8004b58 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004acc:	4b27      	ldr	r3, [pc, #156]	; (8004b6c <HAL_RCC_OscConfig+0x4dc>)
 8004ace:	2200      	movs	r2, #0
 8004ad0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ad2:	f7fe f9e9 	bl	8002ea8 <HAL_GetTick>
 8004ad6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ad8:	e008      	b.n	8004aec <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ada:	f7fe f9e5 	bl	8002ea8 <HAL_GetTick>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	d901      	bls.n	8004aec <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e036      	b.n	8004b5a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aec:	4b1e      	ldr	r3, [pc, #120]	; (8004b68 <HAL_RCC_OscConfig+0x4d8>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d1f0      	bne.n	8004ada <HAL_RCC_OscConfig+0x44a>
 8004af8:	e02e      	b.n	8004b58 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	699b      	ldr	r3, [r3, #24]
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d101      	bne.n	8004b06 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e029      	b.n	8004b5a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b06:	4b18      	ldr	r3, [pc, #96]	; (8004b68 <HAL_RCC_OscConfig+0x4d8>)
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	69db      	ldr	r3, [r3, #28]
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d11c      	bne.n	8004b54 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d115      	bne.n	8004b54 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004b28:	68fa      	ldr	r2, [r7, #12]
 8004b2a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b2e:	4013      	ands	r3, r2
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d10d      	bne.n	8004b54 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d106      	bne.n	8004b54 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d001      	beq.n	8004b58 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e000      	b.n	8004b5a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004b58:	2300      	movs	r3, #0
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3718      	adds	r7, #24
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	40007000 	.word	0x40007000
 8004b68:	40023800 	.word	0x40023800
 8004b6c:	42470060 	.word	0x42470060

08004b70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d101      	bne.n	8004b84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e0cc      	b.n	8004d1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b84:	4b68      	ldr	r3, [pc, #416]	; (8004d28 <HAL_RCC_ClockConfig+0x1b8>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 030f 	and.w	r3, r3, #15
 8004b8c:	683a      	ldr	r2, [r7, #0]
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d90c      	bls.n	8004bac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b92:	4b65      	ldr	r3, [pc, #404]	; (8004d28 <HAL_RCC_ClockConfig+0x1b8>)
 8004b94:	683a      	ldr	r2, [r7, #0]
 8004b96:	b2d2      	uxtb	r2, r2
 8004b98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b9a:	4b63      	ldr	r3, [pc, #396]	; (8004d28 <HAL_RCC_ClockConfig+0x1b8>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 030f 	and.w	r3, r3, #15
 8004ba2:	683a      	ldr	r2, [r7, #0]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d001      	beq.n	8004bac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e0b8      	b.n	8004d1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 0302 	and.w	r3, r3, #2
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d020      	beq.n	8004bfa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 0304 	and.w	r3, r3, #4
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d005      	beq.n	8004bd0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004bc4:	4b59      	ldr	r3, [pc, #356]	; (8004d2c <HAL_RCC_ClockConfig+0x1bc>)
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	4a58      	ldr	r2, [pc, #352]	; (8004d2c <HAL_RCC_ClockConfig+0x1bc>)
 8004bca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004bce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 0308 	and.w	r3, r3, #8
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d005      	beq.n	8004be8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004bdc:	4b53      	ldr	r3, [pc, #332]	; (8004d2c <HAL_RCC_ClockConfig+0x1bc>)
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	4a52      	ldr	r2, [pc, #328]	; (8004d2c <HAL_RCC_ClockConfig+0x1bc>)
 8004be2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004be6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004be8:	4b50      	ldr	r3, [pc, #320]	; (8004d2c <HAL_RCC_ClockConfig+0x1bc>)
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	494d      	ldr	r1, [pc, #308]	; (8004d2c <HAL_RCC_ClockConfig+0x1bc>)
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 0301 	and.w	r3, r3, #1
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d044      	beq.n	8004c90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d107      	bne.n	8004c1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c0e:	4b47      	ldr	r3, [pc, #284]	; (8004d2c <HAL_RCC_ClockConfig+0x1bc>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d119      	bne.n	8004c4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e07f      	b.n	8004d1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	2b02      	cmp	r3, #2
 8004c24:	d003      	beq.n	8004c2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c2a:	2b03      	cmp	r3, #3
 8004c2c:	d107      	bne.n	8004c3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c2e:	4b3f      	ldr	r3, [pc, #252]	; (8004d2c <HAL_RCC_ClockConfig+0x1bc>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d109      	bne.n	8004c4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e06f      	b.n	8004d1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c3e:	4b3b      	ldr	r3, [pc, #236]	; (8004d2c <HAL_RCC_ClockConfig+0x1bc>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 0302 	and.w	r3, r3, #2
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d101      	bne.n	8004c4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e067      	b.n	8004d1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c4e:	4b37      	ldr	r3, [pc, #220]	; (8004d2c <HAL_RCC_ClockConfig+0x1bc>)
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	f023 0203 	bic.w	r2, r3, #3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	4934      	ldr	r1, [pc, #208]	; (8004d2c <HAL_RCC_ClockConfig+0x1bc>)
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c60:	f7fe f922 	bl	8002ea8 <HAL_GetTick>
 8004c64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c66:	e00a      	b.n	8004c7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c68:	f7fe f91e 	bl	8002ea8 <HAL_GetTick>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d901      	bls.n	8004c7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e04f      	b.n	8004d1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c7e:	4b2b      	ldr	r3, [pc, #172]	; (8004d2c <HAL_RCC_ClockConfig+0x1bc>)
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	f003 020c 	and.w	r2, r3, #12
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d1eb      	bne.n	8004c68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c90:	4b25      	ldr	r3, [pc, #148]	; (8004d28 <HAL_RCC_ClockConfig+0x1b8>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 030f 	and.w	r3, r3, #15
 8004c98:	683a      	ldr	r2, [r7, #0]
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d20c      	bcs.n	8004cb8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c9e:	4b22      	ldr	r3, [pc, #136]	; (8004d28 <HAL_RCC_ClockConfig+0x1b8>)
 8004ca0:	683a      	ldr	r2, [r7, #0]
 8004ca2:	b2d2      	uxtb	r2, r2
 8004ca4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ca6:	4b20      	ldr	r3, [pc, #128]	; (8004d28 <HAL_RCC_ClockConfig+0x1b8>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 030f 	and.w	r3, r3, #15
 8004cae:	683a      	ldr	r2, [r7, #0]
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d001      	beq.n	8004cb8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e032      	b.n	8004d1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0304 	and.w	r3, r3, #4
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d008      	beq.n	8004cd6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cc4:	4b19      	ldr	r3, [pc, #100]	; (8004d2c <HAL_RCC_ClockConfig+0x1bc>)
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	4916      	ldr	r1, [pc, #88]	; (8004d2c <HAL_RCC_ClockConfig+0x1bc>)
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 0308 	and.w	r3, r3, #8
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d009      	beq.n	8004cf6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ce2:	4b12      	ldr	r3, [pc, #72]	; (8004d2c <HAL_RCC_ClockConfig+0x1bc>)
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	00db      	lsls	r3, r3, #3
 8004cf0:	490e      	ldr	r1, [pc, #56]	; (8004d2c <HAL_RCC_ClockConfig+0x1bc>)
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004cf6:	f000 f821 	bl	8004d3c <HAL_RCC_GetSysClockFreq>
 8004cfa:	4601      	mov	r1, r0
 8004cfc:	4b0b      	ldr	r3, [pc, #44]	; (8004d2c <HAL_RCC_ClockConfig+0x1bc>)
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	091b      	lsrs	r3, r3, #4
 8004d02:	f003 030f 	and.w	r3, r3, #15
 8004d06:	4a0a      	ldr	r2, [pc, #40]	; (8004d30 <HAL_RCC_ClockConfig+0x1c0>)
 8004d08:	5cd3      	ldrb	r3, [r2, r3]
 8004d0a:	fa21 f303 	lsr.w	r3, r1, r3
 8004d0e:	4a09      	ldr	r2, [pc, #36]	; (8004d34 <HAL_RCC_ClockConfig+0x1c4>)
 8004d10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004d12:	4b09      	ldr	r3, [pc, #36]	; (8004d38 <HAL_RCC_ClockConfig+0x1c8>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4618      	mov	r0, r3
 8004d18:	f7fe f882 	bl	8002e20 <HAL_InitTick>

  return HAL_OK;
 8004d1c:	2300      	movs	r3, #0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3710      	adds	r7, #16
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	40023c00 	.word	0x40023c00
 8004d2c:	40023800 	.word	0x40023800
 8004d30:	0800a878 	.word	0x0800a878
 8004d34:	20000008 	.word	0x20000008
 8004d38:	2000000c 	.word	0x2000000c

08004d3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d3e:	b085      	sub	sp, #20
 8004d40:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004d42:	2300      	movs	r3, #0
 8004d44:	607b      	str	r3, [r7, #4]
 8004d46:	2300      	movs	r3, #0
 8004d48:	60fb      	str	r3, [r7, #12]
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d52:	4b50      	ldr	r3, [pc, #320]	; (8004e94 <HAL_RCC_GetSysClockFreq+0x158>)
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	f003 030c 	and.w	r3, r3, #12
 8004d5a:	2b04      	cmp	r3, #4
 8004d5c:	d007      	beq.n	8004d6e <HAL_RCC_GetSysClockFreq+0x32>
 8004d5e:	2b08      	cmp	r3, #8
 8004d60:	d008      	beq.n	8004d74 <HAL_RCC_GetSysClockFreq+0x38>
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	f040 808d 	bne.w	8004e82 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d68:	4b4b      	ldr	r3, [pc, #300]	; (8004e98 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004d6a:	60bb      	str	r3, [r7, #8]
       break;
 8004d6c:	e08c      	b.n	8004e88 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d6e:	4b4b      	ldr	r3, [pc, #300]	; (8004e9c <HAL_RCC_GetSysClockFreq+0x160>)
 8004d70:	60bb      	str	r3, [r7, #8]
      break;
 8004d72:	e089      	b.n	8004e88 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d74:	4b47      	ldr	r3, [pc, #284]	; (8004e94 <HAL_RCC_GetSysClockFreq+0x158>)
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d7c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d7e:	4b45      	ldr	r3, [pc, #276]	; (8004e94 <HAL_RCC_GetSysClockFreq+0x158>)
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d023      	beq.n	8004dd2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d8a:	4b42      	ldr	r3, [pc, #264]	; (8004e94 <HAL_RCC_GetSysClockFreq+0x158>)
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	099b      	lsrs	r3, r3, #6
 8004d90:	f04f 0400 	mov.w	r4, #0
 8004d94:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004d98:	f04f 0200 	mov.w	r2, #0
 8004d9c:	ea03 0501 	and.w	r5, r3, r1
 8004da0:	ea04 0602 	and.w	r6, r4, r2
 8004da4:	4a3d      	ldr	r2, [pc, #244]	; (8004e9c <HAL_RCC_GetSysClockFreq+0x160>)
 8004da6:	fb02 f106 	mul.w	r1, r2, r6
 8004daa:	2200      	movs	r2, #0
 8004dac:	fb02 f205 	mul.w	r2, r2, r5
 8004db0:	440a      	add	r2, r1
 8004db2:	493a      	ldr	r1, [pc, #232]	; (8004e9c <HAL_RCC_GetSysClockFreq+0x160>)
 8004db4:	fba5 0101 	umull	r0, r1, r5, r1
 8004db8:	1853      	adds	r3, r2, r1
 8004dba:	4619      	mov	r1, r3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f04f 0400 	mov.w	r4, #0
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	4623      	mov	r3, r4
 8004dc6:	f7fb ff3f 	bl	8000c48 <__aeabi_uldivmod>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	460c      	mov	r4, r1
 8004dce:	60fb      	str	r3, [r7, #12]
 8004dd0:	e049      	b.n	8004e66 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dd2:	4b30      	ldr	r3, [pc, #192]	; (8004e94 <HAL_RCC_GetSysClockFreq+0x158>)
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	099b      	lsrs	r3, r3, #6
 8004dd8:	f04f 0400 	mov.w	r4, #0
 8004ddc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004de0:	f04f 0200 	mov.w	r2, #0
 8004de4:	ea03 0501 	and.w	r5, r3, r1
 8004de8:	ea04 0602 	and.w	r6, r4, r2
 8004dec:	4629      	mov	r1, r5
 8004dee:	4632      	mov	r2, r6
 8004df0:	f04f 0300 	mov.w	r3, #0
 8004df4:	f04f 0400 	mov.w	r4, #0
 8004df8:	0154      	lsls	r4, r2, #5
 8004dfa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004dfe:	014b      	lsls	r3, r1, #5
 8004e00:	4619      	mov	r1, r3
 8004e02:	4622      	mov	r2, r4
 8004e04:	1b49      	subs	r1, r1, r5
 8004e06:	eb62 0206 	sbc.w	r2, r2, r6
 8004e0a:	f04f 0300 	mov.w	r3, #0
 8004e0e:	f04f 0400 	mov.w	r4, #0
 8004e12:	0194      	lsls	r4, r2, #6
 8004e14:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004e18:	018b      	lsls	r3, r1, #6
 8004e1a:	1a5b      	subs	r3, r3, r1
 8004e1c:	eb64 0402 	sbc.w	r4, r4, r2
 8004e20:	f04f 0100 	mov.w	r1, #0
 8004e24:	f04f 0200 	mov.w	r2, #0
 8004e28:	00e2      	lsls	r2, r4, #3
 8004e2a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004e2e:	00d9      	lsls	r1, r3, #3
 8004e30:	460b      	mov	r3, r1
 8004e32:	4614      	mov	r4, r2
 8004e34:	195b      	adds	r3, r3, r5
 8004e36:	eb44 0406 	adc.w	r4, r4, r6
 8004e3a:	f04f 0100 	mov.w	r1, #0
 8004e3e:	f04f 0200 	mov.w	r2, #0
 8004e42:	02a2      	lsls	r2, r4, #10
 8004e44:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004e48:	0299      	lsls	r1, r3, #10
 8004e4a:	460b      	mov	r3, r1
 8004e4c:	4614      	mov	r4, r2
 8004e4e:	4618      	mov	r0, r3
 8004e50:	4621      	mov	r1, r4
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f04f 0400 	mov.w	r4, #0
 8004e58:	461a      	mov	r2, r3
 8004e5a:	4623      	mov	r3, r4
 8004e5c:	f7fb fef4 	bl	8000c48 <__aeabi_uldivmod>
 8004e60:	4603      	mov	r3, r0
 8004e62:	460c      	mov	r4, r1
 8004e64:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004e66:	4b0b      	ldr	r3, [pc, #44]	; (8004e94 <HAL_RCC_GetSysClockFreq+0x158>)
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	0c1b      	lsrs	r3, r3, #16
 8004e6c:	f003 0303 	and.w	r3, r3, #3
 8004e70:	3301      	adds	r3, #1
 8004e72:	005b      	lsls	r3, r3, #1
 8004e74:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e7e:	60bb      	str	r3, [r7, #8]
      break;
 8004e80:	e002      	b.n	8004e88 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e82:	4b05      	ldr	r3, [pc, #20]	; (8004e98 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004e84:	60bb      	str	r3, [r7, #8]
      break;
 8004e86:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e88:	68bb      	ldr	r3, [r7, #8]
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3714      	adds	r7, #20
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e92:	bf00      	nop
 8004e94:	40023800 	.word	0x40023800
 8004e98:	00f42400 	.word	0x00f42400
 8004e9c:	017d7840 	.word	0x017d7840

08004ea0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ea4:	4b03      	ldr	r3, [pc, #12]	; (8004eb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr
 8004eb2:	bf00      	nop
 8004eb4:	20000008 	.word	0x20000008

08004eb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ebc:	f7ff fff0 	bl	8004ea0 <HAL_RCC_GetHCLKFreq>
 8004ec0:	4601      	mov	r1, r0
 8004ec2:	4b05      	ldr	r3, [pc, #20]	; (8004ed8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	0a9b      	lsrs	r3, r3, #10
 8004ec8:	f003 0307 	and.w	r3, r3, #7
 8004ecc:	4a03      	ldr	r2, [pc, #12]	; (8004edc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ece:	5cd3      	ldrb	r3, [r2, r3]
 8004ed0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	bd80      	pop	{r7, pc}
 8004ed8:	40023800 	.word	0x40023800
 8004edc:	0800a888 	.word	0x0800a888

08004ee0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004ee4:	f7ff ffdc 	bl	8004ea0 <HAL_RCC_GetHCLKFreq>
 8004ee8:	4601      	mov	r1, r0
 8004eea:	4b05      	ldr	r3, [pc, #20]	; (8004f00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	0b5b      	lsrs	r3, r3, #13
 8004ef0:	f003 0307 	and.w	r3, r3, #7
 8004ef4:	4a03      	ldr	r2, [pc, #12]	; (8004f04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ef6:	5cd3      	ldrb	r3, [r2, r3]
 8004ef8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	40023800 	.word	0x40023800
 8004f04:	0800a888 	.word	0x0800a888

08004f08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b082      	sub	sp, #8
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d101      	bne.n	8004f1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e056      	b.n	8004fc8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d106      	bne.n	8004f3a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f7fd f9ab 	bl	8002290 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2202      	movs	r2, #2
 8004f3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f50:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	685a      	ldr	r2, [r3, #4]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	431a      	orrs	r2, r3
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	431a      	orrs	r2, r3
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	431a      	orrs	r2, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	695b      	ldr	r3, [r3, #20]
 8004f6c:	431a      	orrs	r2, r3
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	699b      	ldr	r3, [r3, #24]
 8004f72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f76:	431a      	orrs	r2, r3
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	69db      	ldr	r3, [r3, #28]
 8004f7c:	431a      	orrs	r2, r3
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6a1b      	ldr	r3, [r3, #32]
 8004f82:	ea42 0103 	orr.w	r1, r2, r3
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	430a      	orrs	r2, r1
 8004f90:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	699b      	ldr	r3, [r3, #24]
 8004f96:	0c1b      	lsrs	r3, r3, #16
 8004f98:	f003 0104 	and.w	r1, r3, #4
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	430a      	orrs	r2, r1
 8004fa6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	69da      	ldr	r2, [r3, #28]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fb6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004fc6:	2300      	movs	r3, #0
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3708      	adds	r7, #8
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b08c      	sub	sp, #48	; 0x30
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	60b9      	str	r1, [r7, #8]
 8004fda:	607a      	str	r2, [r7, #4]
 8004fdc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d101      	bne.n	8004ff6 <HAL_SPI_TransmitReceive+0x26>
 8004ff2:	2302      	movs	r3, #2
 8004ff4:	e18a      	b.n	800530c <HAL_SPI_TransmitReceive+0x33c>
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ffe:	f7fd ff53 	bl	8002ea8 <HAL_GetTick>
 8005002:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800500a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005014:	887b      	ldrh	r3, [r7, #2]
 8005016:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005018:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800501c:	2b01      	cmp	r3, #1
 800501e:	d00f      	beq.n	8005040 <HAL_SPI_TransmitReceive+0x70>
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005026:	d107      	bne.n	8005038 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d103      	bne.n	8005038 <HAL_SPI_TransmitReceive+0x68>
 8005030:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005034:	2b04      	cmp	r3, #4
 8005036:	d003      	beq.n	8005040 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005038:	2302      	movs	r3, #2
 800503a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800503e:	e15b      	b.n	80052f8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d005      	beq.n	8005052 <HAL_SPI_TransmitReceive+0x82>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d002      	beq.n	8005052 <HAL_SPI_TransmitReceive+0x82>
 800504c:	887b      	ldrh	r3, [r7, #2]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d103      	bne.n	800505a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005058:	e14e      	b.n	80052f8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005060:	b2db      	uxtb	r3, r3
 8005062:	2b04      	cmp	r3, #4
 8005064:	d003      	beq.n	800506e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2205      	movs	r2, #5
 800506a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2200      	movs	r2, #0
 8005072:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	887a      	ldrh	r2, [r7, #2]
 800507e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	887a      	ldrh	r2, [r7, #2]
 8005084:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	68ba      	ldr	r2, [r7, #8]
 800508a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	887a      	ldrh	r2, [r7, #2]
 8005090:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	887a      	ldrh	r2, [r7, #2]
 8005096:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2200      	movs	r2, #0
 800509c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2200      	movs	r2, #0
 80050a2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ae:	2b40      	cmp	r3, #64	; 0x40
 80050b0:	d007      	beq.n	80050c2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050c0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050ca:	d178      	bne.n	80051be <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d002      	beq.n	80050da <HAL_SPI_TransmitReceive+0x10a>
 80050d4:	8b7b      	ldrh	r3, [r7, #26]
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d166      	bne.n	80051a8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050de:	881a      	ldrh	r2, [r3, #0]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ea:	1c9a      	adds	r2, r3, #2
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	3b01      	subs	r3, #1
 80050f8:	b29a      	uxth	r2, r3
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050fe:	e053      	b.n	80051a8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	f003 0302 	and.w	r3, r3, #2
 800510a:	2b02      	cmp	r3, #2
 800510c:	d11b      	bne.n	8005146 <HAL_SPI_TransmitReceive+0x176>
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005112:	b29b      	uxth	r3, r3
 8005114:	2b00      	cmp	r3, #0
 8005116:	d016      	beq.n	8005146 <HAL_SPI_TransmitReceive+0x176>
 8005118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800511a:	2b01      	cmp	r3, #1
 800511c:	d113      	bne.n	8005146 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005122:	881a      	ldrh	r2, [r3, #0]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800512e:	1c9a      	adds	r2, r3, #2
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005138:	b29b      	uxth	r3, r3
 800513a:	3b01      	subs	r3, #1
 800513c:	b29a      	uxth	r2, r3
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005142:	2300      	movs	r3, #0
 8005144:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	f003 0301 	and.w	r3, r3, #1
 8005150:	2b01      	cmp	r3, #1
 8005152:	d119      	bne.n	8005188 <HAL_SPI_TransmitReceive+0x1b8>
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005158:	b29b      	uxth	r3, r3
 800515a:	2b00      	cmp	r3, #0
 800515c:	d014      	beq.n	8005188 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	68da      	ldr	r2, [r3, #12]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005168:	b292      	uxth	r2, r2
 800516a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005170:	1c9a      	adds	r2, r3, #2
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800517a:	b29b      	uxth	r3, r3
 800517c:	3b01      	subs	r3, #1
 800517e:	b29a      	uxth	r2, r3
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005184:	2301      	movs	r3, #1
 8005186:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005188:	f7fd fe8e 	bl	8002ea8 <HAL_GetTick>
 800518c:	4602      	mov	r2, r0
 800518e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005194:	429a      	cmp	r2, r3
 8005196:	d807      	bhi.n	80051a8 <HAL_SPI_TransmitReceive+0x1d8>
 8005198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800519a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800519e:	d003      	beq.n	80051a8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80051a0:	2303      	movs	r3, #3
 80051a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80051a6:	e0a7      	b.n	80052f8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d1a6      	bne.n	8005100 <HAL_SPI_TransmitReceive+0x130>
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d1a1      	bne.n	8005100 <HAL_SPI_TransmitReceive+0x130>
 80051bc:	e07c      	b.n	80052b8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d002      	beq.n	80051cc <HAL_SPI_TransmitReceive+0x1fc>
 80051c6:	8b7b      	ldrh	r3, [r7, #26]
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d16b      	bne.n	80052a4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	330c      	adds	r3, #12
 80051d6:	7812      	ldrb	r2, [r2, #0]
 80051d8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051de:	1c5a      	adds	r2, r3, #1
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	3b01      	subs	r3, #1
 80051ec:	b29a      	uxth	r2, r3
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051f2:	e057      	b.n	80052a4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	f003 0302 	and.w	r3, r3, #2
 80051fe:	2b02      	cmp	r3, #2
 8005200:	d11c      	bne.n	800523c <HAL_SPI_TransmitReceive+0x26c>
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005206:	b29b      	uxth	r3, r3
 8005208:	2b00      	cmp	r3, #0
 800520a:	d017      	beq.n	800523c <HAL_SPI_TransmitReceive+0x26c>
 800520c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800520e:	2b01      	cmp	r3, #1
 8005210:	d114      	bne.n	800523c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	330c      	adds	r3, #12
 800521c:	7812      	ldrb	r2, [r2, #0]
 800521e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005224:	1c5a      	adds	r2, r3, #1
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800522e:	b29b      	uxth	r3, r3
 8005230:	3b01      	subs	r3, #1
 8005232:	b29a      	uxth	r2, r3
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005238:	2300      	movs	r3, #0
 800523a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	f003 0301 	and.w	r3, r3, #1
 8005246:	2b01      	cmp	r3, #1
 8005248:	d119      	bne.n	800527e <HAL_SPI_TransmitReceive+0x2ae>
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800524e:	b29b      	uxth	r3, r3
 8005250:	2b00      	cmp	r3, #0
 8005252:	d014      	beq.n	800527e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	68da      	ldr	r2, [r3, #12]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800525e:	b2d2      	uxtb	r2, r2
 8005260:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005266:	1c5a      	adds	r2, r3, #1
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005270:	b29b      	uxth	r3, r3
 8005272:	3b01      	subs	r3, #1
 8005274:	b29a      	uxth	r2, r3
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800527a:	2301      	movs	r3, #1
 800527c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800527e:	f7fd fe13 	bl	8002ea8 <HAL_GetTick>
 8005282:	4602      	mov	r2, r0
 8005284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005286:	1ad3      	subs	r3, r2, r3
 8005288:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800528a:	429a      	cmp	r2, r3
 800528c:	d803      	bhi.n	8005296 <HAL_SPI_TransmitReceive+0x2c6>
 800528e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005294:	d102      	bne.n	800529c <HAL_SPI_TransmitReceive+0x2cc>
 8005296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005298:	2b00      	cmp	r3, #0
 800529a:	d103      	bne.n	80052a4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800529c:	2303      	movs	r3, #3
 800529e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80052a2:	e029      	b.n	80052f8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d1a2      	bne.n	80051f4 <HAL_SPI_TransmitReceive+0x224>
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d19d      	bne.n	80051f4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80052b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80052bc:	68f8      	ldr	r0, [r7, #12]
 80052be:	f000 f893 	bl	80053e8 <SPI_EndRxTxTransaction>
 80052c2:	4603      	mov	r3, r0
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d006      	beq.n	80052d6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2220      	movs	r2, #32
 80052d2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80052d4:	e010      	b.n	80052f8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d10b      	bne.n	80052f6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80052de:	2300      	movs	r3, #0
 80052e0:	617b      	str	r3, [r7, #20]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	617b      	str	r3, [r7, #20]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	617b      	str	r3, [r7, #20]
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	e000      	b.n	80052f8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80052f6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2200      	movs	r2, #0
 8005304:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005308:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800530c:	4618      	mov	r0, r3
 800530e:	3730      	adds	r7, #48	; 0x30
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	60b9      	str	r1, [r7, #8]
 800531e:	603b      	str	r3, [r7, #0]
 8005320:	4613      	mov	r3, r2
 8005322:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005324:	e04c      	b.n	80053c0 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800532c:	d048      	beq.n	80053c0 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800532e:	f7fd fdbb 	bl	8002ea8 <HAL_GetTick>
 8005332:	4602      	mov	r2, r0
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	1ad3      	subs	r3, r2, r3
 8005338:	683a      	ldr	r2, [r7, #0]
 800533a:	429a      	cmp	r2, r3
 800533c:	d902      	bls.n	8005344 <SPI_WaitFlagStateUntilTimeout+0x30>
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d13d      	bne.n	80053c0 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	685a      	ldr	r2, [r3, #4]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005352:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800535c:	d111      	bne.n	8005382 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005366:	d004      	beq.n	8005372 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005370:	d107      	bne.n	8005382 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005380:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005386:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800538a:	d10f      	bne.n	80053ac <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800539a:	601a      	str	r2, [r3, #0]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053aa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2200      	movs	r2, #0
 80053b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80053bc:	2303      	movs	r3, #3
 80053be:	e00f      	b.n	80053e0 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	689a      	ldr	r2, [r3, #8]
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	4013      	ands	r3, r2
 80053ca:	68ba      	ldr	r2, [r7, #8]
 80053cc:	429a      	cmp	r2, r3
 80053ce:	bf0c      	ite	eq
 80053d0:	2301      	moveq	r3, #1
 80053d2:	2300      	movne	r3, #0
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	461a      	mov	r2, r3
 80053d8:	79fb      	ldrb	r3, [r7, #7]
 80053da:	429a      	cmp	r2, r3
 80053dc:	d1a3      	bne.n	8005326 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80053de:	2300      	movs	r3, #0
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3710      	adds	r7, #16
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b088      	sub	sp, #32
 80053ec:	af02      	add	r7, sp, #8
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	60b9      	str	r1, [r7, #8]
 80053f2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80053f4:	4b1b      	ldr	r3, [pc, #108]	; (8005464 <SPI_EndRxTxTransaction+0x7c>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a1b      	ldr	r2, [pc, #108]	; (8005468 <SPI_EndRxTxTransaction+0x80>)
 80053fa:	fba2 2303 	umull	r2, r3, r2, r3
 80053fe:	0d5b      	lsrs	r3, r3, #21
 8005400:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005404:	fb02 f303 	mul.w	r3, r2, r3
 8005408:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005412:	d112      	bne.n	800543a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	9300      	str	r3, [sp, #0]
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	2200      	movs	r2, #0
 800541c:	2180      	movs	r1, #128	; 0x80
 800541e:	68f8      	ldr	r0, [r7, #12]
 8005420:	f7ff ff78 	bl	8005314 <SPI_WaitFlagStateUntilTimeout>
 8005424:	4603      	mov	r3, r0
 8005426:	2b00      	cmp	r3, #0
 8005428:	d016      	beq.n	8005458 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800542e:	f043 0220 	orr.w	r2, r3, #32
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005436:	2303      	movs	r3, #3
 8005438:	e00f      	b.n	800545a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d00a      	beq.n	8005456 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	3b01      	subs	r3, #1
 8005444:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005450:	2b80      	cmp	r3, #128	; 0x80
 8005452:	d0f2      	beq.n	800543a <SPI_EndRxTxTransaction+0x52>
 8005454:	e000      	b.n	8005458 <SPI_EndRxTxTransaction+0x70>
        break;
 8005456:	bf00      	nop
  }

  return HAL_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	3718      	adds	r7, #24
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	20000008 	.word	0x20000008
 8005468:	165e9f81 	.word	0x165e9f81

0800546c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b082      	sub	sp, #8
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d101      	bne.n	800547e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	e01d      	b.n	80054ba <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005484:	b2db      	uxtb	r3, r3
 8005486:	2b00      	cmp	r3, #0
 8005488:	d106      	bne.n	8005498 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f7fd fa24 	bl	80028e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2202      	movs	r2, #2
 800549c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	3304      	adds	r3, #4
 80054a8:	4619      	mov	r1, r3
 80054aa:	4610      	mov	r0, r2
 80054ac:	f000 fb44 	bl	8005b38 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3708      	adds	r7, #8
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}

080054c2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80054c2:	b480      	push	{r7}
 80054c4:	b085      	sub	sp, #20
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	68da      	ldr	r2, [r3, #12]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f042 0201 	orr.w	r2, r2, #1
 80054d8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	f003 0307 	and.w	r3, r3, #7
 80054e4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2b06      	cmp	r3, #6
 80054ea:	d007      	beq.n	80054fc <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f042 0201 	orr.w	r2, r2, #1
 80054fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80054fc:	2300      	movs	r3, #0
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3714      	adds	r7, #20
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr

0800550a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800550a:	b580      	push	{r7, lr}
 800550c:	b082      	sub	sp, #8
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d101      	bne.n	800551c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	e01d      	b.n	8005558 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005522:	b2db      	uxtb	r3, r3
 8005524:	2b00      	cmp	r3, #0
 8005526:	d106      	bne.n	8005536 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f7fd fa11 	bl	8002958 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2202      	movs	r2, #2
 800553a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	3304      	adds	r3, #4
 8005546:	4619      	mov	r1, r3
 8005548:	4610      	mov	r0, r2
 800554a:	f000 faf5 	bl	8005b38 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2201      	movs	r2, #1
 8005552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005556:	2300      	movs	r3, #0
}
 8005558:	4618      	mov	r0, r3
 800555a:	3708      	adds	r7, #8
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}

08005560 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b084      	sub	sp, #16
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2201      	movs	r2, #1
 8005570:	6839      	ldr	r1, [r7, #0]
 8005572:	4618      	mov	r0, r3
 8005574:	f000 fdca 	bl	800610c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a15      	ldr	r2, [pc, #84]	; (80055d4 <HAL_TIM_PWM_Start+0x74>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d004      	beq.n	800558c <HAL_TIM_PWM_Start+0x2c>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a14      	ldr	r2, [pc, #80]	; (80055d8 <HAL_TIM_PWM_Start+0x78>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d101      	bne.n	8005590 <HAL_TIM_PWM_Start+0x30>
 800558c:	2301      	movs	r3, #1
 800558e:	e000      	b.n	8005592 <HAL_TIM_PWM_Start+0x32>
 8005590:	2300      	movs	r3, #0
 8005592:	2b00      	cmp	r3, #0
 8005594:	d007      	beq.n	80055a6 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80055a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	f003 0307 	and.w	r3, r3, #7
 80055b0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2b06      	cmp	r3, #6
 80055b6:	d007      	beq.n	80055c8 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f042 0201 	orr.w	r2, r2, #1
 80055c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3710      	adds	r7, #16
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	bf00      	nop
 80055d4:	40010000 	.word	0x40010000
 80055d8:	40010400 	.word	0x40010400

080055dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b082      	sub	sp, #8
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	691b      	ldr	r3, [r3, #16]
 80055ea:	f003 0302 	and.w	r3, r3, #2
 80055ee:	2b02      	cmp	r3, #2
 80055f0:	d122      	bne.n	8005638 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	f003 0302 	and.w	r3, r3, #2
 80055fc:	2b02      	cmp	r3, #2
 80055fe:	d11b      	bne.n	8005638 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f06f 0202 	mvn.w	r2, #2
 8005608:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2201      	movs	r2, #1
 800560e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	699b      	ldr	r3, [r3, #24]
 8005616:	f003 0303 	and.w	r3, r3, #3
 800561a:	2b00      	cmp	r3, #0
 800561c:	d003      	beq.n	8005626 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f000 fa6b 	bl	8005afa <HAL_TIM_IC_CaptureCallback>
 8005624:	e005      	b.n	8005632 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 fa5d 	bl	8005ae6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f000 fa6e 	bl	8005b0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	f003 0304 	and.w	r3, r3, #4
 8005642:	2b04      	cmp	r3, #4
 8005644:	d122      	bne.n	800568c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	f003 0304 	and.w	r3, r3, #4
 8005650:	2b04      	cmp	r3, #4
 8005652:	d11b      	bne.n	800568c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f06f 0204 	mvn.w	r2, #4
 800565c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2202      	movs	r2, #2
 8005662:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	699b      	ldr	r3, [r3, #24]
 800566a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800566e:	2b00      	cmp	r3, #0
 8005670:	d003      	beq.n	800567a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f000 fa41 	bl	8005afa <HAL_TIM_IC_CaptureCallback>
 8005678:	e005      	b.n	8005686 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f000 fa33 	bl	8005ae6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f000 fa44 	bl	8005b0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	f003 0308 	and.w	r3, r3, #8
 8005696:	2b08      	cmp	r3, #8
 8005698:	d122      	bne.n	80056e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	f003 0308 	and.w	r3, r3, #8
 80056a4:	2b08      	cmp	r3, #8
 80056a6:	d11b      	bne.n	80056e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f06f 0208 	mvn.w	r2, #8
 80056b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2204      	movs	r2, #4
 80056b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	69db      	ldr	r3, [r3, #28]
 80056be:	f003 0303 	and.w	r3, r3, #3
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d003      	beq.n	80056ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 fa17 	bl	8005afa <HAL_TIM_IC_CaptureCallback>
 80056cc:	e005      	b.n	80056da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 fa09 	bl	8005ae6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f000 fa1a 	bl	8005b0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	f003 0310 	and.w	r3, r3, #16
 80056ea:	2b10      	cmp	r3, #16
 80056ec:	d122      	bne.n	8005734 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	f003 0310 	and.w	r3, r3, #16
 80056f8:	2b10      	cmp	r3, #16
 80056fa:	d11b      	bne.n	8005734 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f06f 0210 	mvn.w	r2, #16
 8005704:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2208      	movs	r2, #8
 800570a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	69db      	ldr	r3, [r3, #28]
 8005712:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005716:	2b00      	cmp	r3, #0
 8005718:	d003      	beq.n	8005722 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 f9ed 	bl	8005afa <HAL_TIM_IC_CaptureCallback>
 8005720:	e005      	b.n	800572e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 f9df 	bl	8005ae6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f000 f9f0 	bl	8005b0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	691b      	ldr	r3, [r3, #16]
 800573a:	f003 0301 	and.w	r3, r3, #1
 800573e:	2b01      	cmp	r3, #1
 8005740:	d10e      	bne.n	8005760 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	f003 0301 	and.w	r3, r3, #1
 800574c:	2b01      	cmp	r3, #1
 800574e:	d107      	bne.n	8005760 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f06f 0201 	mvn.w	r2, #1
 8005758:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f7fc fbcc 	bl	8001ef8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800576a:	2b80      	cmp	r3, #128	; 0x80
 800576c:	d10e      	bne.n	800578c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005778:	2b80      	cmp	r3, #128	; 0x80
 800577a:	d107      	bne.n	800578c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005784:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f000 fdbe 	bl	8006308 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	691b      	ldr	r3, [r3, #16]
 8005792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005796:	2b40      	cmp	r3, #64	; 0x40
 8005798:	d10e      	bne.n	80057b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	68db      	ldr	r3, [r3, #12]
 80057a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057a4:	2b40      	cmp	r3, #64	; 0x40
 80057a6:	d107      	bne.n	80057b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80057b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f000 f9b5 	bl	8005b22 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	f003 0320 	and.w	r3, r3, #32
 80057c2:	2b20      	cmp	r3, #32
 80057c4:	d10e      	bne.n	80057e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	f003 0320 	and.w	r3, r3, #32
 80057d0:	2b20      	cmp	r3, #32
 80057d2:	d107      	bne.n	80057e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f06f 0220 	mvn.w	r2, #32
 80057dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 fd88 	bl	80062f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057e4:	bf00      	nop
 80057e6:	3708      	adds	r7, #8
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}

080057ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b084      	sub	sp, #16
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d101      	bne.n	8005806 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005802:	2302      	movs	r3, #2
 8005804:	e0b4      	b.n	8005970 <HAL_TIM_PWM_ConfigChannel+0x184>
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2201      	movs	r2, #1
 800580a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2202      	movs	r2, #2
 8005812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2b0c      	cmp	r3, #12
 800581a:	f200 809f 	bhi.w	800595c <HAL_TIM_PWM_ConfigChannel+0x170>
 800581e:	a201      	add	r2, pc, #4	; (adr r2, 8005824 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005824:	08005859 	.word	0x08005859
 8005828:	0800595d 	.word	0x0800595d
 800582c:	0800595d 	.word	0x0800595d
 8005830:	0800595d 	.word	0x0800595d
 8005834:	08005899 	.word	0x08005899
 8005838:	0800595d 	.word	0x0800595d
 800583c:	0800595d 	.word	0x0800595d
 8005840:	0800595d 	.word	0x0800595d
 8005844:	080058db 	.word	0x080058db
 8005848:	0800595d 	.word	0x0800595d
 800584c:	0800595d 	.word	0x0800595d
 8005850:	0800595d 	.word	0x0800595d
 8005854:	0800591b 	.word	0x0800591b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	68b9      	ldr	r1, [r7, #8]
 800585e:	4618      	mov	r0, r3
 8005860:	f000 fa0a 	bl	8005c78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	699a      	ldr	r2, [r3, #24]
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f042 0208 	orr.w	r2, r2, #8
 8005872:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	699a      	ldr	r2, [r3, #24]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f022 0204 	bic.w	r2, r2, #4
 8005882:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	6999      	ldr	r1, [r3, #24]
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	691a      	ldr	r2, [r3, #16]
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	430a      	orrs	r2, r1
 8005894:	619a      	str	r2, [r3, #24]
      break;
 8005896:	e062      	b.n	800595e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	68b9      	ldr	r1, [r7, #8]
 800589e:	4618      	mov	r0, r3
 80058a0:	f000 fa5a 	bl	8005d58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	699a      	ldr	r2, [r3, #24]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	699a      	ldr	r2, [r3, #24]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	6999      	ldr	r1, [r3, #24]
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	691b      	ldr	r3, [r3, #16]
 80058ce:	021a      	lsls	r2, r3, #8
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	430a      	orrs	r2, r1
 80058d6:	619a      	str	r2, [r3, #24]
      break;
 80058d8:	e041      	b.n	800595e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	68b9      	ldr	r1, [r7, #8]
 80058e0:	4618      	mov	r0, r3
 80058e2:	f000 faaf 	bl	8005e44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	69da      	ldr	r2, [r3, #28]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f042 0208 	orr.w	r2, r2, #8
 80058f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	69da      	ldr	r2, [r3, #28]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f022 0204 	bic.w	r2, r2, #4
 8005904:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	69d9      	ldr	r1, [r3, #28]
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	691a      	ldr	r2, [r3, #16]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	430a      	orrs	r2, r1
 8005916:	61da      	str	r2, [r3, #28]
      break;
 8005918:	e021      	b.n	800595e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	68b9      	ldr	r1, [r7, #8]
 8005920:	4618      	mov	r0, r3
 8005922:	f000 fb03 	bl	8005f2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	69da      	ldr	r2, [r3, #28]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005934:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	69da      	ldr	r2, [r3, #28]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005944:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	69d9      	ldr	r1, [r3, #28]
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	691b      	ldr	r3, [r3, #16]
 8005950:	021a      	lsls	r2, r3, #8
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	430a      	orrs	r2, r1
 8005958:	61da      	str	r2, [r3, #28]
      break;
 800595a:	e000      	b.n	800595e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800595c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2201      	movs	r2, #1
 8005962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2200      	movs	r2, #0
 800596a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800596e:	2300      	movs	r3, #0
}
 8005970:	4618      	mov	r0, r3
 8005972:	3710      	adds	r7, #16
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}

08005978 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005988:	2b01      	cmp	r3, #1
 800598a:	d101      	bne.n	8005990 <HAL_TIM_ConfigClockSource+0x18>
 800598c:	2302      	movs	r3, #2
 800598e:	e0a6      	b.n	8005ade <HAL_TIM_ConfigClockSource+0x166>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2202      	movs	r2, #2
 800599c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80059ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059b6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	68fa      	ldr	r2, [r7, #12]
 80059be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	2b40      	cmp	r3, #64	; 0x40
 80059c6:	d067      	beq.n	8005a98 <HAL_TIM_ConfigClockSource+0x120>
 80059c8:	2b40      	cmp	r3, #64	; 0x40
 80059ca:	d80b      	bhi.n	80059e4 <HAL_TIM_ConfigClockSource+0x6c>
 80059cc:	2b10      	cmp	r3, #16
 80059ce:	d073      	beq.n	8005ab8 <HAL_TIM_ConfigClockSource+0x140>
 80059d0:	2b10      	cmp	r3, #16
 80059d2:	d802      	bhi.n	80059da <HAL_TIM_ConfigClockSource+0x62>
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d06f      	beq.n	8005ab8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80059d8:	e078      	b.n	8005acc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80059da:	2b20      	cmp	r3, #32
 80059dc:	d06c      	beq.n	8005ab8 <HAL_TIM_ConfigClockSource+0x140>
 80059de:	2b30      	cmp	r3, #48	; 0x30
 80059e0:	d06a      	beq.n	8005ab8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80059e2:	e073      	b.n	8005acc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80059e4:	2b70      	cmp	r3, #112	; 0x70
 80059e6:	d00d      	beq.n	8005a04 <HAL_TIM_ConfigClockSource+0x8c>
 80059e8:	2b70      	cmp	r3, #112	; 0x70
 80059ea:	d804      	bhi.n	80059f6 <HAL_TIM_ConfigClockSource+0x7e>
 80059ec:	2b50      	cmp	r3, #80	; 0x50
 80059ee:	d033      	beq.n	8005a58 <HAL_TIM_ConfigClockSource+0xe0>
 80059f0:	2b60      	cmp	r3, #96	; 0x60
 80059f2:	d041      	beq.n	8005a78 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80059f4:	e06a      	b.n	8005acc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80059f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059fa:	d066      	beq.n	8005aca <HAL_TIM_ConfigClockSource+0x152>
 80059fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a00:	d017      	beq.n	8005a32 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005a02:	e063      	b.n	8005acc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6818      	ldr	r0, [r3, #0]
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	6899      	ldr	r1, [r3, #8]
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	685a      	ldr	r2, [r3, #4]
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	f000 fb5a 	bl	80060cc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005a26:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	68fa      	ldr	r2, [r7, #12]
 8005a2e:	609a      	str	r2, [r3, #8]
      break;
 8005a30:	e04c      	b.n	8005acc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6818      	ldr	r0, [r3, #0]
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	6899      	ldr	r1, [r3, #8]
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	685a      	ldr	r2, [r3, #4]
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	f000 fb43 	bl	80060cc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	689a      	ldr	r2, [r3, #8]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a54:	609a      	str	r2, [r3, #8]
      break;
 8005a56:	e039      	b.n	8005acc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6818      	ldr	r0, [r3, #0]
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	6859      	ldr	r1, [r3, #4]
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	461a      	mov	r2, r3
 8005a66:	f000 fab7 	bl	8005fd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	2150      	movs	r1, #80	; 0x50
 8005a70:	4618      	mov	r0, r3
 8005a72:	f000 fb10 	bl	8006096 <TIM_ITRx_SetConfig>
      break;
 8005a76:	e029      	b.n	8005acc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6818      	ldr	r0, [r3, #0]
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	6859      	ldr	r1, [r3, #4]
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	461a      	mov	r2, r3
 8005a86:	f000 fad6 	bl	8006036 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	2160      	movs	r1, #96	; 0x60
 8005a90:	4618      	mov	r0, r3
 8005a92:	f000 fb00 	bl	8006096 <TIM_ITRx_SetConfig>
      break;
 8005a96:	e019      	b.n	8005acc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6818      	ldr	r0, [r3, #0]
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	6859      	ldr	r1, [r3, #4]
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	f000 fa97 	bl	8005fd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	2140      	movs	r1, #64	; 0x40
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f000 faf0 	bl	8006096 <TIM_ITRx_SetConfig>
      break;
 8005ab6:	e009      	b.n	8005acc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4619      	mov	r1, r3
 8005ac2:	4610      	mov	r0, r2
 8005ac4:	f000 fae7 	bl	8006096 <TIM_ITRx_SetConfig>
      break;
 8005ac8:	e000      	b.n	8005acc <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005aca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005adc:	2300      	movs	r3, #0
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3710      	adds	r7, #16
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}

08005ae6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ae6:	b480      	push	{r7}
 8005ae8:	b083      	sub	sp, #12
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005aee:	bf00      	nop
 8005af0:	370c      	adds	r7, #12
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr

08005afa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005afa:	b480      	push	{r7}
 8005afc:	b083      	sub	sp, #12
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b02:	bf00      	nop
 8005b04:	370c      	adds	r7, #12
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr

08005b0e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b0e:	b480      	push	{r7}
 8005b10:	b083      	sub	sp, #12
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b16:	bf00      	nop
 8005b18:	370c      	adds	r7, #12
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr

08005b22 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b22:	b480      	push	{r7}
 8005b24:	b083      	sub	sp, #12
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b2a:	bf00      	nop
 8005b2c:	370c      	adds	r7, #12
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr
	...

08005b38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b085      	sub	sp, #20
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4a40      	ldr	r2, [pc, #256]	; (8005c4c <TIM_Base_SetConfig+0x114>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d013      	beq.n	8005b78 <TIM_Base_SetConfig+0x40>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b56:	d00f      	beq.n	8005b78 <TIM_Base_SetConfig+0x40>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	4a3d      	ldr	r2, [pc, #244]	; (8005c50 <TIM_Base_SetConfig+0x118>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d00b      	beq.n	8005b78 <TIM_Base_SetConfig+0x40>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4a3c      	ldr	r2, [pc, #240]	; (8005c54 <TIM_Base_SetConfig+0x11c>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d007      	beq.n	8005b78 <TIM_Base_SetConfig+0x40>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4a3b      	ldr	r2, [pc, #236]	; (8005c58 <TIM_Base_SetConfig+0x120>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d003      	beq.n	8005b78 <TIM_Base_SetConfig+0x40>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4a3a      	ldr	r2, [pc, #232]	; (8005c5c <TIM_Base_SetConfig+0x124>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d108      	bne.n	8005b8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	68fa      	ldr	r2, [r7, #12]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4a2f      	ldr	r2, [pc, #188]	; (8005c4c <TIM_Base_SetConfig+0x114>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d02b      	beq.n	8005bea <TIM_Base_SetConfig+0xb2>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b98:	d027      	beq.n	8005bea <TIM_Base_SetConfig+0xb2>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4a2c      	ldr	r2, [pc, #176]	; (8005c50 <TIM_Base_SetConfig+0x118>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d023      	beq.n	8005bea <TIM_Base_SetConfig+0xb2>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	4a2b      	ldr	r2, [pc, #172]	; (8005c54 <TIM_Base_SetConfig+0x11c>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d01f      	beq.n	8005bea <TIM_Base_SetConfig+0xb2>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4a2a      	ldr	r2, [pc, #168]	; (8005c58 <TIM_Base_SetConfig+0x120>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d01b      	beq.n	8005bea <TIM_Base_SetConfig+0xb2>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4a29      	ldr	r2, [pc, #164]	; (8005c5c <TIM_Base_SetConfig+0x124>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d017      	beq.n	8005bea <TIM_Base_SetConfig+0xb2>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	4a28      	ldr	r2, [pc, #160]	; (8005c60 <TIM_Base_SetConfig+0x128>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d013      	beq.n	8005bea <TIM_Base_SetConfig+0xb2>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	4a27      	ldr	r2, [pc, #156]	; (8005c64 <TIM_Base_SetConfig+0x12c>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d00f      	beq.n	8005bea <TIM_Base_SetConfig+0xb2>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	4a26      	ldr	r2, [pc, #152]	; (8005c68 <TIM_Base_SetConfig+0x130>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d00b      	beq.n	8005bea <TIM_Base_SetConfig+0xb2>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	4a25      	ldr	r2, [pc, #148]	; (8005c6c <TIM_Base_SetConfig+0x134>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d007      	beq.n	8005bea <TIM_Base_SetConfig+0xb2>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4a24      	ldr	r2, [pc, #144]	; (8005c70 <TIM_Base_SetConfig+0x138>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d003      	beq.n	8005bea <TIM_Base_SetConfig+0xb2>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	4a23      	ldr	r2, [pc, #140]	; (8005c74 <TIM_Base_SetConfig+0x13c>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d108      	bne.n	8005bfc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bf0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	68db      	ldr	r3, [r3, #12]
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	695b      	ldr	r3, [r3, #20]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	68fa      	ldr	r2, [r7, #12]
 8005c0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	689a      	ldr	r2, [r3, #8]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	4a0a      	ldr	r2, [pc, #40]	; (8005c4c <TIM_Base_SetConfig+0x114>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d003      	beq.n	8005c30 <TIM_Base_SetConfig+0xf8>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	4a0c      	ldr	r2, [pc, #48]	; (8005c5c <TIM_Base_SetConfig+0x124>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d103      	bne.n	8005c38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	691a      	ldr	r2, [r3, #16]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	615a      	str	r2, [r3, #20]
}
 8005c3e:	bf00      	nop
 8005c40:	3714      	adds	r7, #20
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr
 8005c4a:	bf00      	nop
 8005c4c:	40010000 	.word	0x40010000
 8005c50:	40000400 	.word	0x40000400
 8005c54:	40000800 	.word	0x40000800
 8005c58:	40000c00 	.word	0x40000c00
 8005c5c:	40010400 	.word	0x40010400
 8005c60:	40014000 	.word	0x40014000
 8005c64:	40014400 	.word	0x40014400
 8005c68:	40014800 	.word	0x40014800
 8005c6c:	40001800 	.word	0x40001800
 8005c70:	40001c00 	.word	0x40001c00
 8005c74:	40002000 	.word	0x40002000

08005c78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b087      	sub	sp, #28
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6a1b      	ldr	r3, [r3, #32]
 8005c86:	f023 0201 	bic.w	r2, r3, #1
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6a1b      	ldr	r3, [r3, #32]
 8005c92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	699b      	ldr	r3, [r3, #24]
 8005c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ca6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f023 0303 	bic.w	r3, r3, #3
 8005cae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	68fa      	ldr	r2, [r7, #12]
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	f023 0302 	bic.w	r3, r3, #2
 8005cc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	697a      	ldr	r2, [r7, #20]
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	4a20      	ldr	r2, [pc, #128]	; (8005d50 <TIM_OC1_SetConfig+0xd8>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d003      	beq.n	8005cdc <TIM_OC1_SetConfig+0x64>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4a1f      	ldr	r2, [pc, #124]	; (8005d54 <TIM_OC1_SetConfig+0xdc>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d10c      	bne.n	8005cf6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	f023 0308 	bic.w	r3, r3, #8
 8005ce2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	68db      	ldr	r3, [r3, #12]
 8005ce8:	697a      	ldr	r2, [r7, #20]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	f023 0304 	bic.w	r3, r3, #4
 8005cf4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a15      	ldr	r2, [pc, #84]	; (8005d50 <TIM_OC1_SetConfig+0xd8>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d003      	beq.n	8005d06 <TIM_OC1_SetConfig+0x8e>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a14      	ldr	r2, [pc, #80]	; (8005d54 <TIM_OC1_SetConfig+0xdc>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d111      	bne.n	8005d2a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	695b      	ldr	r3, [r3, #20]
 8005d1a:	693a      	ldr	r2, [r7, #16]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	699b      	ldr	r3, [r3, #24]
 8005d24:	693a      	ldr	r2, [r7, #16]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	693a      	ldr	r2, [r7, #16]
 8005d2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	68fa      	ldr	r2, [r7, #12]
 8005d34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	685a      	ldr	r2, [r3, #4]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	697a      	ldr	r2, [r7, #20]
 8005d42:	621a      	str	r2, [r3, #32]
}
 8005d44:	bf00      	nop
 8005d46:	371c      	adds	r7, #28
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr
 8005d50:	40010000 	.word	0x40010000
 8005d54:	40010400 	.word	0x40010400

08005d58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b087      	sub	sp, #28
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6a1b      	ldr	r3, [r3, #32]
 8005d66:	f023 0210 	bic.w	r2, r3, #16
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a1b      	ldr	r3, [r3, #32]
 8005d72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	699b      	ldr	r3, [r3, #24]
 8005d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	021b      	lsls	r3, r3, #8
 8005d96:	68fa      	ldr	r2, [r7, #12]
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	f023 0320 	bic.w	r3, r3, #32
 8005da2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	011b      	lsls	r3, r3, #4
 8005daa:	697a      	ldr	r2, [r7, #20]
 8005dac:	4313      	orrs	r3, r2
 8005dae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	4a22      	ldr	r2, [pc, #136]	; (8005e3c <TIM_OC2_SetConfig+0xe4>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d003      	beq.n	8005dc0 <TIM_OC2_SetConfig+0x68>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	4a21      	ldr	r2, [pc, #132]	; (8005e40 <TIM_OC2_SetConfig+0xe8>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d10d      	bne.n	8005ddc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005dc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	011b      	lsls	r3, r3, #4
 8005dce:	697a      	ldr	r2, [r7, #20]
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dda:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	4a17      	ldr	r2, [pc, #92]	; (8005e3c <TIM_OC2_SetConfig+0xe4>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d003      	beq.n	8005dec <TIM_OC2_SetConfig+0x94>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	4a16      	ldr	r2, [pc, #88]	; (8005e40 <TIM_OC2_SetConfig+0xe8>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d113      	bne.n	8005e14 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005df2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005dfa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	695b      	ldr	r3, [r3, #20]
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	693a      	ldr	r2, [r7, #16]
 8005e04:	4313      	orrs	r3, r2
 8005e06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	699b      	ldr	r3, [r3, #24]
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	693a      	ldr	r2, [r7, #16]
 8005e10:	4313      	orrs	r3, r2
 8005e12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	693a      	ldr	r2, [r7, #16]
 8005e18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	68fa      	ldr	r2, [r7, #12]
 8005e1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	685a      	ldr	r2, [r3, #4]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	697a      	ldr	r2, [r7, #20]
 8005e2c:	621a      	str	r2, [r3, #32]
}
 8005e2e:	bf00      	nop
 8005e30:	371c      	adds	r7, #28
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr
 8005e3a:	bf00      	nop
 8005e3c:	40010000 	.word	0x40010000
 8005e40:	40010400 	.word	0x40010400

08005e44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b087      	sub	sp, #28
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a1b      	ldr	r3, [r3, #32]
 8005e52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6a1b      	ldr	r3, [r3, #32]
 8005e5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	69db      	ldr	r3, [r3, #28]
 8005e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f023 0303 	bic.w	r3, r3, #3
 8005e7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	68fa      	ldr	r2, [r7, #12]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	021b      	lsls	r3, r3, #8
 8005e94:	697a      	ldr	r2, [r7, #20]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	4a21      	ldr	r2, [pc, #132]	; (8005f24 <TIM_OC3_SetConfig+0xe0>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d003      	beq.n	8005eaa <TIM_OC3_SetConfig+0x66>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	4a20      	ldr	r2, [pc, #128]	; (8005f28 <TIM_OC3_SetConfig+0xe4>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d10d      	bne.n	8005ec6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005eb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	021b      	lsls	r3, r3, #8
 8005eb8:	697a      	ldr	r2, [r7, #20]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ec4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4a16      	ldr	r2, [pc, #88]	; (8005f24 <TIM_OC3_SetConfig+0xe0>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d003      	beq.n	8005ed6 <TIM_OC3_SetConfig+0x92>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4a15      	ldr	r2, [pc, #84]	; (8005f28 <TIM_OC3_SetConfig+0xe4>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d113      	bne.n	8005efe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005edc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ee4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	695b      	ldr	r3, [r3, #20]
 8005eea:	011b      	lsls	r3, r3, #4
 8005eec:	693a      	ldr	r2, [r7, #16]
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	699b      	ldr	r3, [r3, #24]
 8005ef6:	011b      	lsls	r3, r3, #4
 8005ef8:	693a      	ldr	r2, [r7, #16]
 8005efa:	4313      	orrs	r3, r2
 8005efc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	693a      	ldr	r2, [r7, #16]
 8005f02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	68fa      	ldr	r2, [r7, #12]
 8005f08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	685a      	ldr	r2, [r3, #4]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	697a      	ldr	r2, [r7, #20]
 8005f16:	621a      	str	r2, [r3, #32]
}
 8005f18:	bf00      	nop
 8005f1a:	371c      	adds	r7, #28
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr
 8005f24:	40010000 	.word	0x40010000
 8005f28:	40010400 	.word	0x40010400

08005f2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b087      	sub	sp, #28
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6a1b      	ldr	r3, [r3, #32]
 8005f3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6a1b      	ldr	r3, [r3, #32]
 8005f46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	69db      	ldr	r3, [r3, #28]
 8005f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	021b      	lsls	r3, r3, #8
 8005f6a:	68fa      	ldr	r2, [r7, #12]
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	031b      	lsls	r3, r3, #12
 8005f7e:	693a      	ldr	r2, [r7, #16]
 8005f80:	4313      	orrs	r3, r2
 8005f82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	4a12      	ldr	r2, [pc, #72]	; (8005fd0 <TIM_OC4_SetConfig+0xa4>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d003      	beq.n	8005f94 <TIM_OC4_SetConfig+0x68>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	4a11      	ldr	r2, [pc, #68]	; (8005fd4 <TIM_OC4_SetConfig+0xa8>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d109      	bne.n	8005fa8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f9a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	695b      	ldr	r3, [r3, #20]
 8005fa0:	019b      	lsls	r3, r3, #6
 8005fa2:	697a      	ldr	r2, [r7, #20]
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	697a      	ldr	r2, [r7, #20]
 8005fac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	68fa      	ldr	r2, [r7, #12]
 8005fb2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	685a      	ldr	r2, [r3, #4]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	693a      	ldr	r2, [r7, #16]
 8005fc0:	621a      	str	r2, [r3, #32]
}
 8005fc2:	bf00      	nop
 8005fc4:	371c      	adds	r7, #28
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr
 8005fce:	bf00      	nop
 8005fd0:	40010000 	.word	0x40010000
 8005fd4:	40010400 	.word	0x40010400

08005fd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b087      	sub	sp, #28
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	60f8      	str	r0, [r7, #12]
 8005fe0:	60b9      	str	r1, [r7, #8]
 8005fe2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	6a1b      	ldr	r3, [r3, #32]
 8005fe8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6a1b      	ldr	r3, [r3, #32]
 8005fee:	f023 0201 	bic.w	r2, r3, #1
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	699b      	ldr	r3, [r3, #24]
 8005ffa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006002:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	011b      	lsls	r3, r3, #4
 8006008:	693a      	ldr	r2, [r7, #16]
 800600a:	4313      	orrs	r3, r2
 800600c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	f023 030a 	bic.w	r3, r3, #10
 8006014:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006016:	697a      	ldr	r2, [r7, #20]
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	4313      	orrs	r3, r2
 800601c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	693a      	ldr	r2, [r7, #16]
 8006022:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	697a      	ldr	r2, [r7, #20]
 8006028:	621a      	str	r2, [r3, #32]
}
 800602a:	bf00      	nop
 800602c:	371c      	adds	r7, #28
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr

08006036 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006036:	b480      	push	{r7}
 8006038:	b087      	sub	sp, #28
 800603a:	af00      	add	r7, sp, #0
 800603c:	60f8      	str	r0, [r7, #12]
 800603e:	60b9      	str	r1, [r7, #8]
 8006040:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	6a1b      	ldr	r3, [r3, #32]
 8006046:	f023 0210 	bic.w	r2, r3, #16
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	699b      	ldr	r3, [r3, #24]
 8006052:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	6a1b      	ldr	r3, [r3, #32]
 8006058:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006060:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	031b      	lsls	r3, r3, #12
 8006066:	697a      	ldr	r2, [r7, #20]
 8006068:	4313      	orrs	r3, r2
 800606a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006072:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	011b      	lsls	r3, r3, #4
 8006078:	693a      	ldr	r2, [r7, #16]
 800607a:	4313      	orrs	r3, r2
 800607c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	697a      	ldr	r2, [r7, #20]
 8006082:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	693a      	ldr	r2, [r7, #16]
 8006088:	621a      	str	r2, [r3, #32]
}
 800608a:	bf00      	nop
 800608c:	371c      	adds	r7, #28
 800608e:	46bd      	mov	sp, r7
 8006090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006094:	4770      	bx	lr

08006096 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006096:	b480      	push	{r7}
 8006098:	b085      	sub	sp, #20
 800609a:	af00      	add	r7, sp, #0
 800609c:	6078      	str	r0, [r7, #4]
 800609e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80060ae:	683a      	ldr	r2, [r7, #0]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	4313      	orrs	r3, r2
 80060b4:	f043 0307 	orr.w	r3, r3, #7
 80060b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	68fa      	ldr	r2, [r7, #12]
 80060be:	609a      	str	r2, [r3, #8]
}
 80060c0:	bf00      	nop
 80060c2:	3714      	adds	r7, #20
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr

080060cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b087      	sub	sp, #28
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	60b9      	str	r1, [r7, #8]
 80060d6:	607a      	str	r2, [r7, #4]
 80060d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	021a      	lsls	r2, r3, #8
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	431a      	orrs	r2, r3
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	4313      	orrs	r3, r2
 80060f4:	697a      	ldr	r2, [r7, #20]
 80060f6:	4313      	orrs	r3, r2
 80060f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	697a      	ldr	r2, [r7, #20]
 80060fe:	609a      	str	r2, [r3, #8]
}
 8006100:	bf00      	nop
 8006102:	371c      	adds	r7, #28
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr

0800610c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800610c:	b480      	push	{r7}
 800610e:	b087      	sub	sp, #28
 8006110:	af00      	add	r7, sp, #0
 8006112:	60f8      	str	r0, [r7, #12]
 8006114:	60b9      	str	r1, [r7, #8]
 8006116:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	f003 031f 	and.w	r3, r3, #31
 800611e:	2201      	movs	r2, #1
 8006120:	fa02 f303 	lsl.w	r3, r2, r3
 8006124:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	6a1a      	ldr	r2, [r3, #32]
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	43db      	mvns	r3, r3
 800612e:	401a      	ands	r2, r3
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	6a1a      	ldr	r2, [r3, #32]
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	f003 031f 	and.w	r3, r3, #31
 800613e:	6879      	ldr	r1, [r7, #4]
 8006140:	fa01 f303 	lsl.w	r3, r1, r3
 8006144:	431a      	orrs	r2, r3
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	621a      	str	r2, [r3, #32]
}
 800614a:	bf00      	nop
 800614c:	371c      	adds	r7, #28
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr
	...

08006158 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006158:	b480      	push	{r7}
 800615a:	b085      	sub	sp, #20
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006168:	2b01      	cmp	r3, #1
 800616a:	d101      	bne.n	8006170 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800616c:	2302      	movs	r3, #2
 800616e:	e05a      	b.n	8006226 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2201      	movs	r2, #1
 8006174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2202      	movs	r2, #2
 800617c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006196:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	68fa      	ldr	r2, [r7, #12]
 800619e:	4313      	orrs	r3, r2
 80061a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	68fa      	ldr	r2, [r7, #12]
 80061a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a21      	ldr	r2, [pc, #132]	; (8006234 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d022      	beq.n	80061fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061bc:	d01d      	beq.n	80061fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a1d      	ldr	r2, [pc, #116]	; (8006238 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d018      	beq.n	80061fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a1b      	ldr	r2, [pc, #108]	; (800623c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d013      	beq.n	80061fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a1a      	ldr	r2, [pc, #104]	; (8006240 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d00e      	beq.n	80061fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a18      	ldr	r2, [pc, #96]	; (8006244 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d009      	beq.n	80061fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a17      	ldr	r2, [pc, #92]	; (8006248 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d004      	beq.n	80061fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a15      	ldr	r2, [pc, #84]	; (800624c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d10c      	bne.n	8006214 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006200:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	68ba      	ldr	r2, [r7, #8]
 8006208:	4313      	orrs	r3, r2
 800620a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	68ba      	ldr	r2, [r7, #8]
 8006212:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2200      	movs	r2, #0
 8006220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006224:	2300      	movs	r3, #0
}
 8006226:	4618      	mov	r0, r3
 8006228:	3714      	adds	r7, #20
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr
 8006232:	bf00      	nop
 8006234:	40010000 	.word	0x40010000
 8006238:	40000400 	.word	0x40000400
 800623c:	40000800 	.word	0x40000800
 8006240:	40000c00 	.word	0x40000c00
 8006244:	40010400 	.word	0x40010400
 8006248:	40014000 	.word	0x40014000
 800624c:	40001800 	.word	0x40001800

08006250 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006250:	b480      	push	{r7}
 8006252:	b085      	sub	sp, #20
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800625a:	2300      	movs	r3, #0
 800625c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006264:	2b01      	cmp	r3, #1
 8006266:	d101      	bne.n	800626c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006268:	2302      	movs	r3, #2
 800626a:	e03d      	b.n	80062e8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2201      	movs	r2, #1
 8006270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	4313      	orrs	r3, r2
 8006280:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	4313      	orrs	r3, r2
 800628e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	4313      	orrs	r3, r2
 800629c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4313      	orrs	r3, r2
 80062aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	691b      	ldr	r3, [r3, #16]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	695b      	ldr	r3, [r3, #20]
 80062c4:	4313      	orrs	r3, r2
 80062c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	69db      	ldr	r3, [r3, #28]
 80062d2:	4313      	orrs	r3, r2
 80062d4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	68fa      	ldr	r2, [r7, #12]
 80062dc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062e6:	2300      	movs	r3, #0
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3714      	adds	r7, #20
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr

080062f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b083      	sub	sp, #12
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80062fc:	bf00      	nop
 80062fe:	370c      	adds	r7, #12
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr

08006308 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006308:	b480      	push	{r7}
 800630a:	b083      	sub	sp, #12
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006310:	bf00      	nop
 8006312:	370c      	adds	r7, #12
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr

0800631c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b082      	sub	sp, #8
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d101      	bne.n	800632e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	e03f      	b.n	80063ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006334:	b2db      	uxtb	r3, r3
 8006336:	2b00      	cmp	r3, #0
 8006338:	d106      	bne.n	8006348 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2200      	movs	r2, #0
 800633e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f7fc fc6a 	bl	8002c1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2224      	movs	r2, #36	; 0x24
 800634c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	68da      	ldr	r2, [r3, #12]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800635e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f000 fbb5 	bl	8006ad0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	691a      	ldr	r2, [r3, #16]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006374:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	695a      	ldr	r2, [r3, #20]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006384:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	68da      	ldr	r2, [r3, #12]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006394:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2200      	movs	r2, #0
 800639a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2220      	movs	r2, #32
 80063a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2220      	movs	r2, #32
 80063a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80063ac:	2300      	movs	r3, #0
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3708      	adds	r7, #8
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}

080063b6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80063b6:	b480      	push	{r7}
 80063b8:	b085      	sub	sp, #20
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	60f8      	str	r0, [r7, #12]
 80063be:	60b9      	str	r1, [r7, #8]
 80063c0:	4613      	mov	r3, r2
 80063c2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80063ca:	b2db      	uxtb	r3, r3
 80063cc:	2b20      	cmp	r3, #32
 80063ce:	d140      	bne.n	8006452 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d002      	beq.n	80063dc <HAL_UART_Receive_IT+0x26>
 80063d6:	88fb      	ldrh	r3, [r7, #6]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d101      	bne.n	80063e0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80063dc:	2301      	movs	r3, #1
 80063de:	e039      	b.n	8006454 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d101      	bne.n	80063ee <HAL_UART_Receive_IT+0x38>
 80063ea:	2302      	movs	r3, #2
 80063ec:	e032      	b.n	8006454 <HAL_UART_Receive_IT+0x9e>
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2201      	movs	r2, #1
 80063f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	68ba      	ldr	r2, [r7, #8]
 80063fa:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	88fa      	ldrh	r2, [r7, #6]
 8006400:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	88fa      	ldrh	r2, [r7, #6]
 8006406:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2200      	movs	r2, #0
 800640c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2222      	movs	r2, #34	; 0x22
 8006412:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2200      	movs	r2, #0
 800641a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	68da      	ldr	r2, [r3, #12]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800642c:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	695a      	ldr	r2, [r3, #20]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f042 0201 	orr.w	r2, r2, #1
 800643c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	68da      	ldr	r2, [r3, #12]
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f042 0220 	orr.w	r2, r2, #32
 800644c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800644e:	2300      	movs	r3, #0
 8006450:	e000      	b.n	8006454 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8006452:	2302      	movs	r3, #2
  }
}
 8006454:	4618      	mov	r0, r3
 8006456:	3714      	adds	r7, #20
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr

08006460 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b086      	sub	sp, #24
 8006464:	af00      	add	r7, sp, #0
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	60b9      	str	r1, [r7, #8]
 800646a:	4613      	mov	r3, r2
 800646c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006474:	b2db      	uxtb	r3, r3
 8006476:	2b20      	cmp	r3, #32
 8006478:	d153      	bne.n	8006522 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d002      	beq.n	8006486 <HAL_UART_Transmit_DMA+0x26>
 8006480:	88fb      	ldrh	r3, [r7, #6]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d101      	bne.n	800648a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006486:	2301      	movs	r3, #1
 8006488:	e04c      	b.n	8006524 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006490:	2b01      	cmp	r3, #1
 8006492:	d101      	bne.n	8006498 <HAL_UART_Transmit_DMA+0x38>
 8006494:	2302      	movs	r3, #2
 8006496:	e045      	b.n	8006524 <HAL_UART_Transmit_DMA+0xc4>
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2201      	movs	r2, #1
 800649c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80064a0:	68ba      	ldr	r2, [r7, #8]
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	88fa      	ldrh	r2, [r7, #6]
 80064aa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	88fa      	ldrh	r2, [r7, #6]
 80064b0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2200      	movs	r2, #0
 80064b6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2221      	movs	r2, #33	; 0x21
 80064bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064c4:	4a19      	ldr	r2, [pc, #100]	; (800652c <HAL_UART_Transmit_DMA+0xcc>)
 80064c6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064cc:	4a18      	ldr	r2, [pc, #96]	; (8006530 <HAL_UART_Transmit_DMA+0xd0>)
 80064ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064d4:	4a17      	ldr	r2, [pc, #92]	; (8006534 <HAL_UART_Transmit_DMA+0xd4>)
 80064d6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064dc:	2200      	movs	r2, #0
 80064de:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 80064e0:	f107 0308 	add.w	r3, r7, #8
 80064e4:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	6819      	ldr	r1, [r3, #0]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	3304      	adds	r3, #4
 80064f4:	461a      	mov	r2, r3
 80064f6:	88fb      	ldrh	r3, [r7, #6]
 80064f8:	f7fd fc02 	bl	8003d00 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006504:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2200      	movs	r2, #0
 800650a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	695a      	ldr	r2, [r3, #20]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800651c:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800651e:	2300      	movs	r3, #0
 8006520:	e000      	b.n	8006524 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8006522:	2302      	movs	r3, #2
  }
}
 8006524:	4618      	mov	r0, r3
 8006526:	3718      	adds	r7, #24
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}
 800652c:	08006761 	.word	0x08006761
 8006530:	080067b3 	.word	0x080067b3
 8006534:	080067cf 	.word	0x080067cf

08006538 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b088      	sub	sp, #32
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	695b      	ldr	r3, [r3, #20]
 8006556:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006558:	2300      	movs	r3, #0
 800655a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800655c:	2300      	movs	r3, #0
 800655e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006560:	69fb      	ldr	r3, [r7, #28]
 8006562:	f003 030f 	and.w	r3, r3, #15
 8006566:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d10d      	bne.n	800658a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800656e:	69fb      	ldr	r3, [r7, #28]
 8006570:	f003 0320 	and.w	r3, r3, #32
 8006574:	2b00      	cmp	r3, #0
 8006576:	d008      	beq.n	800658a <HAL_UART_IRQHandler+0x52>
 8006578:	69bb      	ldr	r3, [r7, #24]
 800657a:	f003 0320 	and.w	r3, r3, #32
 800657e:	2b00      	cmp	r3, #0
 8006580:	d003      	beq.n	800658a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f000 fa23 	bl	80069ce <UART_Receive_IT>
      return;
 8006588:	e0d1      	b.n	800672e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	2b00      	cmp	r3, #0
 800658e:	f000 80b0 	beq.w	80066f2 <HAL_UART_IRQHandler+0x1ba>
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	f003 0301 	and.w	r3, r3, #1
 8006598:	2b00      	cmp	r3, #0
 800659a:	d105      	bne.n	80065a8 <HAL_UART_IRQHandler+0x70>
 800659c:	69bb      	ldr	r3, [r7, #24]
 800659e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	f000 80a5 	beq.w	80066f2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80065a8:	69fb      	ldr	r3, [r7, #28]
 80065aa:	f003 0301 	and.w	r3, r3, #1
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d00a      	beq.n	80065c8 <HAL_UART_IRQHandler+0x90>
 80065b2:	69bb      	ldr	r3, [r7, #24]
 80065b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d005      	beq.n	80065c8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065c0:	f043 0201 	orr.w	r2, r3, #1
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80065c8:	69fb      	ldr	r3, [r7, #28]
 80065ca:	f003 0304 	and.w	r3, r3, #4
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d00a      	beq.n	80065e8 <HAL_UART_IRQHandler+0xb0>
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	f003 0301 	and.w	r3, r3, #1
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d005      	beq.n	80065e8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065e0:	f043 0202 	orr.w	r2, r3, #2
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80065e8:	69fb      	ldr	r3, [r7, #28]
 80065ea:	f003 0302 	and.w	r3, r3, #2
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d00a      	beq.n	8006608 <HAL_UART_IRQHandler+0xd0>
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	f003 0301 	and.w	r3, r3, #1
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d005      	beq.n	8006608 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006600:	f043 0204 	orr.w	r2, r3, #4
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006608:	69fb      	ldr	r3, [r7, #28]
 800660a:	f003 0308 	and.w	r3, r3, #8
 800660e:	2b00      	cmp	r3, #0
 8006610:	d00f      	beq.n	8006632 <HAL_UART_IRQHandler+0xfa>
 8006612:	69bb      	ldr	r3, [r7, #24]
 8006614:	f003 0320 	and.w	r3, r3, #32
 8006618:	2b00      	cmp	r3, #0
 800661a:	d104      	bne.n	8006626 <HAL_UART_IRQHandler+0xee>
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	f003 0301 	and.w	r3, r3, #1
 8006622:	2b00      	cmp	r3, #0
 8006624:	d005      	beq.n	8006632 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800662a:	f043 0208 	orr.w	r2, r3, #8
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006636:	2b00      	cmp	r3, #0
 8006638:	d078      	beq.n	800672c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800663a:	69fb      	ldr	r3, [r7, #28]
 800663c:	f003 0320 	and.w	r3, r3, #32
 8006640:	2b00      	cmp	r3, #0
 8006642:	d007      	beq.n	8006654 <HAL_UART_IRQHandler+0x11c>
 8006644:	69bb      	ldr	r3, [r7, #24]
 8006646:	f003 0320 	and.w	r3, r3, #32
 800664a:	2b00      	cmp	r3, #0
 800664c:	d002      	beq.n	8006654 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 f9bd 	bl	80069ce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	695b      	ldr	r3, [r3, #20]
 800665a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800665e:	2b40      	cmp	r3, #64	; 0x40
 8006660:	bf0c      	ite	eq
 8006662:	2301      	moveq	r3, #1
 8006664:	2300      	movne	r3, #0
 8006666:	b2db      	uxtb	r3, r3
 8006668:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800666e:	f003 0308 	and.w	r3, r3, #8
 8006672:	2b00      	cmp	r3, #0
 8006674:	d102      	bne.n	800667c <HAL_UART_IRQHandler+0x144>
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d031      	beq.n	80066e0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f000 f906 	bl	800688e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	695b      	ldr	r3, [r3, #20]
 8006688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800668c:	2b40      	cmp	r3, #64	; 0x40
 800668e:	d123      	bne.n	80066d8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	695a      	ldr	r2, [r3, #20]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800669e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d013      	beq.n	80066d0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066ac:	4a21      	ldr	r2, [pc, #132]	; (8006734 <HAL_UART_IRQHandler+0x1fc>)
 80066ae:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066b4:	4618      	mov	r0, r3
 80066b6:	f7fd fb7b 	bl	8003db0 <HAL_DMA_Abort_IT>
 80066ba:	4603      	mov	r3, r0
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d016      	beq.n	80066ee <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066c6:	687a      	ldr	r2, [r7, #4]
 80066c8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80066ca:	4610      	mov	r0, r2
 80066cc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066ce:	e00e      	b.n	80066ee <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f000 f83b 	bl	800674c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066d6:	e00a      	b.n	80066ee <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f000 f837 	bl	800674c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066de:	e006      	b.n	80066ee <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f000 f833 	bl	800674c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2200      	movs	r2, #0
 80066ea:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80066ec:	e01e      	b.n	800672c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066ee:	bf00      	nop
    return;
 80066f0:	e01c      	b.n	800672c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80066f2:	69fb      	ldr	r3, [r7, #28]
 80066f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d008      	beq.n	800670e <HAL_UART_IRQHandler+0x1d6>
 80066fc:	69bb      	ldr	r3, [r7, #24]
 80066fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006702:	2b00      	cmp	r3, #0
 8006704:	d003      	beq.n	800670e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f000 f8f3 	bl	80068f2 <UART_Transmit_IT>
    return;
 800670c:	e00f      	b.n	800672e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800670e:	69fb      	ldr	r3, [r7, #28]
 8006710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006714:	2b00      	cmp	r3, #0
 8006716:	d00a      	beq.n	800672e <HAL_UART_IRQHandler+0x1f6>
 8006718:	69bb      	ldr	r3, [r7, #24]
 800671a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800671e:	2b00      	cmp	r3, #0
 8006720:	d005      	beq.n	800672e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f000 f93b 	bl	800699e <UART_EndTransmit_IT>
    return;
 8006728:	bf00      	nop
 800672a:	e000      	b.n	800672e <HAL_UART_IRQHandler+0x1f6>
    return;
 800672c:	bf00      	nop
  }
}
 800672e:	3720      	adds	r7, #32
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}
 8006734:	080068cb 	.word	0x080068cb

08006738 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006738:	b480      	push	{r7}
 800673a:	b083      	sub	sp, #12
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006740:	bf00      	nop
 8006742:	370c      	adds	r7, #12
 8006744:	46bd      	mov	sp, r7
 8006746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674a:	4770      	bx	lr

0800674c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800674c:	b480      	push	{r7}
 800674e:	b083      	sub	sp, #12
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006754:	bf00      	nop
 8006756:	370c      	adds	r7, #12
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b084      	sub	sp, #16
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800676c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006778:	2b00      	cmp	r3, #0
 800677a:	d113      	bne.n	80067a4 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2200      	movs	r2, #0
 8006780:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	695a      	ldr	r2, [r3, #20]
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006790:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	68da      	ldr	r2, [r3, #12]
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067a0:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80067a2:	e002      	b.n	80067aa <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 80067a4:	68f8      	ldr	r0, [r7, #12]
 80067a6:	f7fb fcf1 	bl	800218c <HAL_UART_TxCpltCallback>
}
 80067aa:	bf00      	nop
 80067ac:	3710      	adds	r7, #16
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}

080067b2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80067b2:	b580      	push	{r7, lr}
 80067b4:	b084      	sub	sp, #16
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067be:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80067c0:	68f8      	ldr	r0, [r7, #12]
 80067c2:	f7ff ffb9 	bl	8006738 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067c6:	bf00      	nop
 80067c8:	3710      	adds	r7, #16
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}

080067ce <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80067ce:	b580      	push	{r7, lr}
 80067d0:	b084      	sub	sp, #16
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80067d6:	2300      	movs	r3, #0
 80067d8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067de:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	695b      	ldr	r3, [r3, #20]
 80067e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067ea:	2b80      	cmp	r3, #128	; 0x80
 80067ec:	bf0c      	ite	eq
 80067ee:	2301      	moveq	r3, #1
 80067f0:	2300      	movne	r3, #0
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	2b21      	cmp	r3, #33	; 0x21
 8006800:	d108      	bne.n	8006814 <UART_DMAError+0x46>
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d005      	beq.n	8006814 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	2200      	movs	r2, #0
 800680c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800680e:	68b8      	ldr	r0, [r7, #8]
 8006810:	f000 f827 	bl	8006862 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	695b      	ldr	r3, [r3, #20]
 800681a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800681e:	2b40      	cmp	r3, #64	; 0x40
 8006820:	bf0c      	ite	eq
 8006822:	2301      	moveq	r3, #1
 8006824:	2300      	movne	r3, #0
 8006826:	b2db      	uxtb	r3, r3
 8006828:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006830:	b2db      	uxtb	r3, r3
 8006832:	2b22      	cmp	r3, #34	; 0x22
 8006834:	d108      	bne.n	8006848 <UART_DMAError+0x7a>
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d005      	beq.n	8006848 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	2200      	movs	r2, #0
 8006840:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006842:	68b8      	ldr	r0, [r7, #8]
 8006844:	f000 f823 	bl	800688e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800684c:	f043 0210 	orr.w	r2, r3, #16
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006854:	68b8      	ldr	r0, [r7, #8]
 8006856:	f7ff ff79 	bl	800674c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800685a:	bf00      	nop
 800685c:	3710      	adds	r7, #16
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}

08006862 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006862:	b480      	push	{r7}
 8006864:	b083      	sub	sp, #12
 8006866:	af00      	add	r7, sp, #0
 8006868:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	68da      	ldr	r2, [r3, #12]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006878:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2220      	movs	r2, #32
 800687e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8006882:	bf00      	nop
 8006884:	370c      	adds	r7, #12
 8006886:	46bd      	mov	sp, r7
 8006888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688c:	4770      	bx	lr

0800688e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800688e:	b480      	push	{r7}
 8006890:	b083      	sub	sp, #12
 8006892:	af00      	add	r7, sp, #0
 8006894:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	68da      	ldr	r2, [r3, #12]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80068a4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	695a      	ldr	r2, [r3, #20]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f022 0201 	bic.w	r2, r2, #1
 80068b4:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2220      	movs	r2, #32
 80068ba:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80068be:	bf00      	nop
 80068c0:	370c      	adds	r7, #12
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr

080068ca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80068ca:	b580      	push	{r7, lr}
 80068cc:	b084      	sub	sp, #16
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2200      	movs	r2, #0
 80068dc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2200      	movs	r2, #0
 80068e2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80068e4:	68f8      	ldr	r0, [r7, #12]
 80068e6:	f7ff ff31 	bl	800674c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068ea:	bf00      	nop
 80068ec:	3710      	adds	r7, #16
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}

080068f2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80068f2:	b480      	push	{r7}
 80068f4:	b085      	sub	sp, #20
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006900:	b2db      	uxtb	r3, r3
 8006902:	2b21      	cmp	r3, #33	; 0x21
 8006904:	d144      	bne.n	8006990 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800690e:	d11a      	bne.n	8006946 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6a1b      	ldr	r3, [r3, #32]
 8006914:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	881b      	ldrh	r3, [r3, #0]
 800691a:	461a      	mov	r2, r3
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006924:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	691b      	ldr	r3, [r3, #16]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d105      	bne.n	800693a <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6a1b      	ldr	r3, [r3, #32]
 8006932:	1c9a      	adds	r2, r3, #2
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	621a      	str	r2, [r3, #32]
 8006938:	e00e      	b.n	8006958 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6a1b      	ldr	r3, [r3, #32]
 800693e:	1c5a      	adds	r2, r3, #1
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	621a      	str	r2, [r3, #32]
 8006944:	e008      	b.n	8006958 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6a1b      	ldr	r3, [r3, #32]
 800694a:	1c59      	adds	r1, r3, #1
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	6211      	str	r1, [r2, #32]
 8006950:	781a      	ldrb	r2, [r3, #0]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800695c:	b29b      	uxth	r3, r3
 800695e:	3b01      	subs	r3, #1
 8006960:	b29b      	uxth	r3, r3
 8006962:	687a      	ldr	r2, [r7, #4]
 8006964:	4619      	mov	r1, r3
 8006966:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006968:	2b00      	cmp	r3, #0
 800696a:	d10f      	bne.n	800698c <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	68da      	ldr	r2, [r3, #12]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800697a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	68da      	ldr	r2, [r3, #12]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800698a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800698c:	2300      	movs	r3, #0
 800698e:	e000      	b.n	8006992 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006990:	2302      	movs	r3, #2
  }
}
 8006992:	4618      	mov	r0, r3
 8006994:	3714      	adds	r7, #20
 8006996:	46bd      	mov	sp, r7
 8006998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699c:	4770      	bx	lr

0800699e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800699e:	b580      	push	{r7, lr}
 80069a0:	b082      	sub	sp, #8
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	68da      	ldr	r2, [r3, #12]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069b4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2220      	movs	r2, #32
 80069ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f7fb fbe4 	bl	800218c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80069c4:	2300      	movs	r3, #0
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3708      	adds	r7, #8
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}

080069ce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80069ce:	b580      	push	{r7, lr}
 80069d0:	b084      	sub	sp, #16
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	2b22      	cmp	r3, #34	; 0x22
 80069e0:	d171      	bne.n	8006ac6 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069ea:	d123      	bne.n	8006a34 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069f0:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	691b      	ldr	r3, [r3, #16]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d10e      	bne.n	8006a18 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a06:	b29a      	uxth	r2, r3
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a10:	1c9a      	adds	r2, r3, #2
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	629a      	str	r2, [r3, #40]	; 0x28
 8006a16:	e029      	b.n	8006a6c <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	b29a      	uxth	r2, r3
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a2c:	1c5a      	adds	r2, r3, #1
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	629a      	str	r2, [r3, #40]	; 0x28
 8006a32:	e01b      	b.n	8006a6c <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	691b      	ldr	r3, [r3, #16]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d10a      	bne.n	8006a52 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	6858      	ldr	r0, [r3, #4]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a46:	1c59      	adds	r1, r3, #1
 8006a48:	687a      	ldr	r2, [r7, #4]
 8006a4a:	6291      	str	r1, [r2, #40]	; 0x28
 8006a4c:	b2c2      	uxtb	r2, r0
 8006a4e:	701a      	strb	r2, [r3, #0]
 8006a50:	e00c      	b.n	8006a6c <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	b2da      	uxtb	r2, r3
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a5e:	1c58      	adds	r0, r3, #1
 8006a60:	6879      	ldr	r1, [r7, #4]
 8006a62:	6288      	str	r0, [r1, #40]	; 0x28
 8006a64:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006a68:	b2d2      	uxtb	r2, r2
 8006a6a:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	3b01      	subs	r3, #1
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	687a      	ldr	r2, [r7, #4]
 8006a78:	4619      	mov	r1, r3
 8006a7a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d120      	bne.n	8006ac2 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	68da      	ldr	r2, [r3, #12]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f022 0220 	bic.w	r2, r2, #32
 8006a8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	68da      	ldr	r2, [r3, #12]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a9e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	695a      	ldr	r2, [r3, #20]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f022 0201 	bic.w	r2, r2, #1
 8006aae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2220      	movs	r2, #32
 8006ab4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f7fb fb51 	bl	8002160 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	e002      	b.n	8006ac8 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	e000      	b.n	8006ac8 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006ac6:	2302      	movs	r3, #2
  }
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3710      	adds	r7, #16
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ad4:	b085      	sub	sp, #20
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	691b      	ldr	r3, [r3, #16]
 8006ae0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	68da      	ldr	r2, [r3, #12]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	430a      	orrs	r2, r1
 8006aee:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	689a      	ldr	r2, [r3, #8]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	691b      	ldr	r3, [r3, #16]
 8006af8:	431a      	orrs	r2, r3
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	695b      	ldr	r3, [r3, #20]
 8006afe:	431a      	orrs	r2, r3
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	69db      	ldr	r3, [r3, #28]
 8006b04:	4313      	orrs	r3, r2
 8006b06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	68db      	ldr	r3, [r3, #12]
 8006b0e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006b12:	f023 030c 	bic.w	r3, r3, #12
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	6812      	ldr	r2, [r2, #0]
 8006b1a:	68f9      	ldr	r1, [r7, #12]
 8006b1c:	430b      	orrs	r3, r1
 8006b1e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	695b      	ldr	r3, [r3, #20]
 8006b26:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	699a      	ldr	r2, [r3, #24]
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	430a      	orrs	r2, r1
 8006b34:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	69db      	ldr	r3, [r3, #28]
 8006b3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b3e:	f040 818b 	bne.w	8006e58 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4ac1      	ldr	r2, [pc, #772]	; (8006e4c <UART_SetConfig+0x37c>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d005      	beq.n	8006b58 <UART_SetConfig+0x88>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4abf      	ldr	r2, [pc, #764]	; (8006e50 <UART_SetConfig+0x380>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	f040 80bd 	bne.w	8006cd2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006b58:	f7fe f9c2 	bl	8004ee0 <HAL_RCC_GetPCLK2Freq>
 8006b5c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	461d      	mov	r5, r3
 8006b62:	f04f 0600 	mov.w	r6, #0
 8006b66:	46a8      	mov	r8, r5
 8006b68:	46b1      	mov	r9, r6
 8006b6a:	eb18 0308 	adds.w	r3, r8, r8
 8006b6e:	eb49 0409 	adc.w	r4, r9, r9
 8006b72:	4698      	mov	r8, r3
 8006b74:	46a1      	mov	r9, r4
 8006b76:	eb18 0805 	adds.w	r8, r8, r5
 8006b7a:	eb49 0906 	adc.w	r9, r9, r6
 8006b7e:	f04f 0100 	mov.w	r1, #0
 8006b82:	f04f 0200 	mov.w	r2, #0
 8006b86:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006b8a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006b8e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006b92:	4688      	mov	r8, r1
 8006b94:	4691      	mov	r9, r2
 8006b96:	eb18 0005 	adds.w	r0, r8, r5
 8006b9a:	eb49 0106 	adc.w	r1, r9, r6
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	461d      	mov	r5, r3
 8006ba4:	f04f 0600 	mov.w	r6, #0
 8006ba8:	196b      	adds	r3, r5, r5
 8006baa:	eb46 0406 	adc.w	r4, r6, r6
 8006bae:	461a      	mov	r2, r3
 8006bb0:	4623      	mov	r3, r4
 8006bb2:	f7fa f849 	bl	8000c48 <__aeabi_uldivmod>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	460c      	mov	r4, r1
 8006bba:	461a      	mov	r2, r3
 8006bbc:	4ba5      	ldr	r3, [pc, #660]	; (8006e54 <UART_SetConfig+0x384>)
 8006bbe:	fba3 2302 	umull	r2, r3, r3, r2
 8006bc2:	095b      	lsrs	r3, r3, #5
 8006bc4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	461d      	mov	r5, r3
 8006bcc:	f04f 0600 	mov.w	r6, #0
 8006bd0:	46a9      	mov	r9, r5
 8006bd2:	46b2      	mov	sl, r6
 8006bd4:	eb19 0309 	adds.w	r3, r9, r9
 8006bd8:	eb4a 040a 	adc.w	r4, sl, sl
 8006bdc:	4699      	mov	r9, r3
 8006bde:	46a2      	mov	sl, r4
 8006be0:	eb19 0905 	adds.w	r9, r9, r5
 8006be4:	eb4a 0a06 	adc.w	sl, sl, r6
 8006be8:	f04f 0100 	mov.w	r1, #0
 8006bec:	f04f 0200 	mov.w	r2, #0
 8006bf0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006bf4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006bf8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006bfc:	4689      	mov	r9, r1
 8006bfe:	4692      	mov	sl, r2
 8006c00:	eb19 0005 	adds.w	r0, r9, r5
 8006c04:	eb4a 0106 	adc.w	r1, sl, r6
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	461d      	mov	r5, r3
 8006c0e:	f04f 0600 	mov.w	r6, #0
 8006c12:	196b      	adds	r3, r5, r5
 8006c14:	eb46 0406 	adc.w	r4, r6, r6
 8006c18:	461a      	mov	r2, r3
 8006c1a:	4623      	mov	r3, r4
 8006c1c:	f7fa f814 	bl	8000c48 <__aeabi_uldivmod>
 8006c20:	4603      	mov	r3, r0
 8006c22:	460c      	mov	r4, r1
 8006c24:	461a      	mov	r2, r3
 8006c26:	4b8b      	ldr	r3, [pc, #556]	; (8006e54 <UART_SetConfig+0x384>)
 8006c28:	fba3 1302 	umull	r1, r3, r3, r2
 8006c2c:	095b      	lsrs	r3, r3, #5
 8006c2e:	2164      	movs	r1, #100	; 0x64
 8006c30:	fb01 f303 	mul.w	r3, r1, r3
 8006c34:	1ad3      	subs	r3, r2, r3
 8006c36:	00db      	lsls	r3, r3, #3
 8006c38:	3332      	adds	r3, #50	; 0x32
 8006c3a:	4a86      	ldr	r2, [pc, #536]	; (8006e54 <UART_SetConfig+0x384>)
 8006c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8006c40:	095b      	lsrs	r3, r3, #5
 8006c42:	005b      	lsls	r3, r3, #1
 8006c44:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006c48:	4498      	add	r8, r3
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	461d      	mov	r5, r3
 8006c4e:	f04f 0600 	mov.w	r6, #0
 8006c52:	46a9      	mov	r9, r5
 8006c54:	46b2      	mov	sl, r6
 8006c56:	eb19 0309 	adds.w	r3, r9, r9
 8006c5a:	eb4a 040a 	adc.w	r4, sl, sl
 8006c5e:	4699      	mov	r9, r3
 8006c60:	46a2      	mov	sl, r4
 8006c62:	eb19 0905 	adds.w	r9, r9, r5
 8006c66:	eb4a 0a06 	adc.w	sl, sl, r6
 8006c6a:	f04f 0100 	mov.w	r1, #0
 8006c6e:	f04f 0200 	mov.w	r2, #0
 8006c72:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c76:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006c7a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006c7e:	4689      	mov	r9, r1
 8006c80:	4692      	mov	sl, r2
 8006c82:	eb19 0005 	adds.w	r0, r9, r5
 8006c86:	eb4a 0106 	adc.w	r1, sl, r6
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	461d      	mov	r5, r3
 8006c90:	f04f 0600 	mov.w	r6, #0
 8006c94:	196b      	adds	r3, r5, r5
 8006c96:	eb46 0406 	adc.w	r4, r6, r6
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	4623      	mov	r3, r4
 8006c9e:	f7f9 ffd3 	bl	8000c48 <__aeabi_uldivmod>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	460c      	mov	r4, r1
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	4b6a      	ldr	r3, [pc, #424]	; (8006e54 <UART_SetConfig+0x384>)
 8006caa:	fba3 1302 	umull	r1, r3, r3, r2
 8006cae:	095b      	lsrs	r3, r3, #5
 8006cb0:	2164      	movs	r1, #100	; 0x64
 8006cb2:	fb01 f303 	mul.w	r3, r1, r3
 8006cb6:	1ad3      	subs	r3, r2, r3
 8006cb8:	00db      	lsls	r3, r3, #3
 8006cba:	3332      	adds	r3, #50	; 0x32
 8006cbc:	4a65      	ldr	r2, [pc, #404]	; (8006e54 <UART_SetConfig+0x384>)
 8006cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8006cc2:	095b      	lsrs	r3, r3, #5
 8006cc4:	f003 0207 	and.w	r2, r3, #7
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4442      	add	r2, r8
 8006cce:	609a      	str	r2, [r3, #8]
 8006cd0:	e26f      	b.n	80071b2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006cd2:	f7fe f8f1 	bl	8004eb8 <HAL_RCC_GetPCLK1Freq>
 8006cd6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	461d      	mov	r5, r3
 8006cdc:	f04f 0600 	mov.w	r6, #0
 8006ce0:	46a8      	mov	r8, r5
 8006ce2:	46b1      	mov	r9, r6
 8006ce4:	eb18 0308 	adds.w	r3, r8, r8
 8006ce8:	eb49 0409 	adc.w	r4, r9, r9
 8006cec:	4698      	mov	r8, r3
 8006cee:	46a1      	mov	r9, r4
 8006cf0:	eb18 0805 	adds.w	r8, r8, r5
 8006cf4:	eb49 0906 	adc.w	r9, r9, r6
 8006cf8:	f04f 0100 	mov.w	r1, #0
 8006cfc:	f04f 0200 	mov.w	r2, #0
 8006d00:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006d04:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006d08:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006d0c:	4688      	mov	r8, r1
 8006d0e:	4691      	mov	r9, r2
 8006d10:	eb18 0005 	adds.w	r0, r8, r5
 8006d14:	eb49 0106 	adc.w	r1, r9, r6
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	461d      	mov	r5, r3
 8006d1e:	f04f 0600 	mov.w	r6, #0
 8006d22:	196b      	adds	r3, r5, r5
 8006d24:	eb46 0406 	adc.w	r4, r6, r6
 8006d28:	461a      	mov	r2, r3
 8006d2a:	4623      	mov	r3, r4
 8006d2c:	f7f9 ff8c 	bl	8000c48 <__aeabi_uldivmod>
 8006d30:	4603      	mov	r3, r0
 8006d32:	460c      	mov	r4, r1
 8006d34:	461a      	mov	r2, r3
 8006d36:	4b47      	ldr	r3, [pc, #284]	; (8006e54 <UART_SetConfig+0x384>)
 8006d38:	fba3 2302 	umull	r2, r3, r3, r2
 8006d3c:	095b      	lsrs	r3, r3, #5
 8006d3e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	461d      	mov	r5, r3
 8006d46:	f04f 0600 	mov.w	r6, #0
 8006d4a:	46a9      	mov	r9, r5
 8006d4c:	46b2      	mov	sl, r6
 8006d4e:	eb19 0309 	adds.w	r3, r9, r9
 8006d52:	eb4a 040a 	adc.w	r4, sl, sl
 8006d56:	4699      	mov	r9, r3
 8006d58:	46a2      	mov	sl, r4
 8006d5a:	eb19 0905 	adds.w	r9, r9, r5
 8006d5e:	eb4a 0a06 	adc.w	sl, sl, r6
 8006d62:	f04f 0100 	mov.w	r1, #0
 8006d66:	f04f 0200 	mov.w	r2, #0
 8006d6a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d6e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006d72:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006d76:	4689      	mov	r9, r1
 8006d78:	4692      	mov	sl, r2
 8006d7a:	eb19 0005 	adds.w	r0, r9, r5
 8006d7e:	eb4a 0106 	adc.w	r1, sl, r6
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	461d      	mov	r5, r3
 8006d88:	f04f 0600 	mov.w	r6, #0
 8006d8c:	196b      	adds	r3, r5, r5
 8006d8e:	eb46 0406 	adc.w	r4, r6, r6
 8006d92:	461a      	mov	r2, r3
 8006d94:	4623      	mov	r3, r4
 8006d96:	f7f9 ff57 	bl	8000c48 <__aeabi_uldivmod>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	460c      	mov	r4, r1
 8006d9e:	461a      	mov	r2, r3
 8006da0:	4b2c      	ldr	r3, [pc, #176]	; (8006e54 <UART_SetConfig+0x384>)
 8006da2:	fba3 1302 	umull	r1, r3, r3, r2
 8006da6:	095b      	lsrs	r3, r3, #5
 8006da8:	2164      	movs	r1, #100	; 0x64
 8006daa:	fb01 f303 	mul.w	r3, r1, r3
 8006dae:	1ad3      	subs	r3, r2, r3
 8006db0:	00db      	lsls	r3, r3, #3
 8006db2:	3332      	adds	r3, #50	; 0x32
 8006db4:	4a27      	ldr	r2, [pc, #156]	; (8006e54 <UART_SetConfig+0x384>)
 8006db6:	fba2 2303 	umull	r2, r3, r2, r3
 8006dba:	095b      	lsrs	r3, r3, #5
 8006dbc:	005b      	lsls	r3, r3, #1
 8006dbe:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006dc2:	4498      	add	r8, r3
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	461d      	mov	r5, r3
 8006dc8:	f04f 0600 	mov.w	r6, #0
 8006dcc:	46a9      	mov	r9, r5
 8006dce:	46b2      	mov	sl, r6
 8006dd0:	eb19 0309 	adds.w	r3, r9, r9
 8006dd4:	eb4a 040a 	adc.w	r4, sl, sl
 8006dd8:	4699      	mov	r9, r3
 8006dda:	46a2      	mov	sl, r4
 8006ddc:	eb19 0905 	adds.w	r9, r9, r5
 8006de0:	eb4a 0a06 	adc.w	sl, sl, r6
 8006de4:	f04f 0100 	mov.w	r1, #0
 8006de8:	f04f 0200 	mov.w	r2, #0
 8006dec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006df0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006df4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006df8:	4689      	mov	r9, r1
 8006dfa:	4692      	mov	sl, r2
 8006dfc:	eb19 0005 	adds.w	r0, r9, r5
 8006e00:	eb4a 0106 	adc.w	r1, sl, r6
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	461d      	mov	r5, r3
 8006e0a:	f04f 0600 	mov.w	r6, #0
 8006e0e:	196b      	adds	r3, r5, r5
 8006e10:	eb46 0406 	adc.w	r4, r6, r6
 8006e14:	461a      	mov	r2, r3
 8006e16:	4623      	mov	r3, r4
 8006e18:	f7f9 ff16 	bl	8000c48 <__aeabi_uldivmod>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	460c      	mov	r4, r1
 8006e20:	461a      	mov	r2, r3
 8006e22:	4b0c      	ldr	r3, [pc, #48]	; (8006e54 <UART_SetConfig+0x384>)
 8006e24:	fba3 1302 	umull	r1, r3, r3, r2
 8006e28:	095b      	lsrs	r3, r3, #5
 8006e2a:	2164      	movs	r1, #100	; 0x64
 8006e2c:	fb01 f303 	mul.w	r3, r1, r3
 8006e30:	1ad3      	subs	r3, r2, r3
 8006e32:	00db      	lsls	r3, r3, #3
 8006e34:	3332      	adds	r3, #50	; 0x32
 8006e36:	4a07      	ldr	r2, [pc, #28]	; (8006e54 <UART_SetConfig+0x384>)
 8006e38:	fba2 2303 	umull	r2, r3, r2, r3
 8006e3c:	095b      	lsrs	r3, r3, #5
 8006e3e:	f003 0207 	and.w	r2, r3, #7
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4442      	add	r2, r8
 8006e48:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006e4a:	e1b2      	b.n	80071b2 <UART_SetConfig+0x6e2>
 8006e4c:	40011000 	.word	0x40011000
 8006e50:	40011400 	.word	0x40011400
 8006e54:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4ad7      	ldr	r2, [pc, #860]	; (80071bc <UART_SetConfig+0x6ec>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d005      	beq.n	8006e6e <UART_SetConfig+0x39e>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4ad6      	ldr	r2, [pc, #856]	; (80071c0 <UART_SetConfig+0x6f0>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	f040 80d1 	bne.w	8007010 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006e6e:	f7fe f837 	bl	8004ee0 <HAL_RCC_GetPCLK2Freq>
 8006e72:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	469a      	mov	sl, r3
 8006e78:	f04f 0b00 	mov.w	fp, #0
 8006e7c:	46d0      	mov	r8, sl
 8006e7e:	46d9      	mov	r9, fp
 8006e80:	eb18 0308 	adds.w	r3, r8, r8
 8006e84:	eb49 0409 	adc.w	r4, r9, r9
 8006e88:	4698      	mov	r8, r3
 8006e8a:	46a1      	mov	r9, r4
 8006e8c:	eb18 080a 	adds.w	r8, r8, sl
 8006e90:	eb49 090b 	adc.w	r9, r9, fp
 8006e94:	f04f 0100 	mov.w	r1, #0
 8006e98:	f04f 0200 	mov.w	r2, #0
 8006e9c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006ea0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006ea4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006ea8:	4688      	mov	r8, r1
 8006eaa:	4691      	mov	r9, r2
 8006eac:	eb1a 0508 	adds.w	r5, sl, r8
 8006eb0:	eb4b 0609 	adc.w	r6, fp, r9
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	4619      	mov	r1, r3
 8006eba:	f04f 0200 	mov.w	r2, #0
 8006ebe:	f04f 0300 	mov.w	r3, #0
 8006ec2:	f04f 0400 	mov.w	r4, #0
 8006ec6:	0094      	lsls	r4, r2, #2
 8006ec8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006ecc:	008b      	lsls	r3, r1, #2
 8006ece:	461a      	mov	r2, r3
 8006ed0:	4623      	mov	r3, r4
 8006ed2:	4628      	mov	r0, r5
 8006ed4:	4631      	mov	r1, r6
 8006ed6:	f7f9 feb7 	bl	8000c48 <__aeabi_uldivmod>
 8006eda:	4603      	mov	r3, r0
 8006edc:	460c      	mov	r4, r1
 8006ede:	461a      	mov	r2, r3
 8006ee0:	4bb8      	ldr	r3, [pc, #736]	; (80071c4 <UART_SetConfig+0x6f4>)
 8006ee2:	fba3 2302 	umull	r2, r3, r3, r2
 8006ee6:	095b      	lsrs	r3, r3, #5
 8006ee8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	469b      	mov	fp, r3
 8006ef0:	f04f 0c00 	mov.w	ip, #0
 8006ef4:	46d9      	mov	r9, fp
 8006ef6:	46e2      	mov	sl, ip
 8006ef8:	eb19 0309 	adds.w	r3, r9, r9
 8006efc:	eb4a 040a 	adc.w	r4, sl, sl
 8006f00:	4699      	mov	r9, r3
 8006f02:	46a2      	mov	sl, r4
 8006f04:	eb19 090b 	adds.w	r9, r9, fp
 8006f08:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006f0c:	f04f 0100 	mov.w	r1, #0
 8006f10:	f04f 0200 	mov.w	r2, #0
 8006f14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006f18:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006f1c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006f20:	4689      	mov	r9, r1
 8006f22:	4692      	mov	sl, r2
 8006f24:	eb1b 0509 	adds.w	r5, fp, r9
 8006f28:	eb4c 060a 	adc.w	r6, ip, sl
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	4619      	mov	r1, r3
 8006f32:	f04f 0200 	mov.w	r2, #0
 8006f36:	f04f 0300 	mov.w	r3, #0
 8006f3a:	f04f 0400 	mov.w	r4, #0
 8006f3e:	0094      	lsls	r4, r2, #2
 8006f40:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006f44:	008b      	lsls	r3, r1, #2
 8006f46:	461a      	mov	r2, r3
 8006f48:	4623      	mov	r3, r4
 8006f4a:	4628      	mov	r0, r5
 8006f4c:	4631      	mov	r1, r6
 8006f4e:	f7f9 fe7b 	bl	8000c48 <__aeabi_uldivmod>
 8006f52:	4603      	mov	r3, r0
 8006f54:	460c      	mov	r4, r1
 8006f56:	461a      	mov	r2, r3
 8006f58:	4b9a      	ldr	r3, [pc, #616]	; (80071c4 <UART_SetConfig+0x6f4>)
 8006f5a:	fba3 1302 	umull	r1, r3, r3, r2
 8006f5e:	095b      	lsrs	r3, r3, #5
 8006f60:	2164      	movs	r1, #100	; 0x64
 8006f62:	fb01 f303 	mul.w	r3, r1, r3
 8006f66:	1ad3      	subs	r3, r2, r3
 8006f68:	011b      	lsls	r3, r3, #4
 8006f6a:	3332      	adds	r3, #50	; 0x32
 8006f6c:	4a95      	ldr	r2, [pc, #596]	; (80071c4 <UART_SetConfig+0x6f4>)
 8006f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8006f72:	095b      	lsrs	r3, r3, #5
 8006f74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f78:	4498      	add	r8, r3
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	469b      	mov	fp, r3
 8006f7e:	f04f 0c00 	mov.w	ip, #0
 8006f82:	46d9      	mov	r9, fp
 8006f84:	46e2      	mov	sl, ip
 8006f86:	eb19 0309 	adds.w	r3, r9, r9
 8006f8a:	eb4a 040a 	adc.w	r4, sl, sl
 8006f8e:	4699      	mov	r9, r3
 8006f90:	46a2      	mov	sl, r4
 8006f92:	eb19 090b 	adds.w	r9, r9, fp
 8006f96:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006f9a:	f04f 0100 	mov.w	r1, #0
 8006f9e:	f04f 0200 	mov.w	r2, #0
 8006fa2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006fa6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006faa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006fae:	4689      	mov	r9, r1
 8006fb0:	4692      	mov	sl, r2
 8006fb2:	eb1b 0509 	adds.w	r5, fp, r9
 8006fb6:	eb4c 060a 	adc.w	r6, ip, sl
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	4619      	mov	r1, r3
 8006fc0:	f04f 0200 	mov.w	r2, #0
 8006fc4:	f04f 0300 	mov.w	r3, #0
 8006fc8:	f04f 0400 	mov.w	r4, #0
 8006fcc:	0094      	lsls	r4, r2, #2
 8006fce:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006fd2:	008b      	lsls	r3, r1, #2
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	4623      	mov	r3, r4
 8006fd8:	4628      	mov	r0, r5
 8006fda:	4631      	mov	r1, r6
 8006fdc:	f7f9 fe34 	bl	8000c48 <__aeabi_uldivmod>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	460c      	mov	r4, r1
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	4b77      	ldr	r3, [pc, #476]	; (80071c4 <UART_SetConfig+0x6f4>)
 8006fe8:	fba3 1302 	umull	r1, r3, r3, r2
 8006fec:	095b      	lsrs	r3, r3, #5
 8006fee:	2164      	movs	r1, #100	; 0x64
 8006ff0:	fb01 f303 	mul.w	r3, r1, r3
 8006ff4:	1ad3      	subs	r3, r2, r3
 8006ff6:	011b      	lsls	r3, r3, #4
 8006ff8:	3332      	adds	r3, #50	; 0x32
 8006ffa:	4a72      	ldr	r2, [pc, #456]	; (80071c4 <UART_SetConfig+0x6f4>)
 8006ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8007000:	095b      	lsrs	r3, r3, #5
 8007002:	f003 020f 	and.w	r2, r3, #15
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4442      	add	r2, r8
 800700c:	609a      	str	r2, [r3, #8]
 800700e:	e0d0      	b.n	80071b2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007010:	f7fd ff52 	bl	8004eb8 <HAL_RCC_GetPCLK1Freq>
 8007014:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	469a      	mov	sl, r3
 800701a:	f04f 0b00 	mov.w	fp, #0
 800701e:	46d0      	mov	r8, sl
 8007020:	46d9      	mov	r9, fp
 8007022:	eb18 0308 	adds.w	r3, r8, r8
 8007026:	eb49 0409 	adc.w	r4, r9, r9
 800702a:	4698      	mov	r8, r3
 800702c:	46a1      	mov	r9, r4
 800702e:	eb18 080a 	adds.w	r8, r8, sl
 8007032:	eb49 090b 	adc.w	r9, r9, fp
 8007036:	f04f 0100 	mov.w	r1, #0
 800703a:	f04f 0200 	mov.w	r2, #0
 800703e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007042:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007046:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800704a:	4688      	mov	r8, r1
 800704c:	4691      	mov	r9, r2
 800704e:	eb1a 0508 	adds.w	r5, sl, r8
 8007052:	eb4b 0609 	adc.w	r6, fp, r9
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	4619      	mov	r1, r3
 800705c:	f04f 0200 	mov.w	r2, #0
 8007060:	f04f 0300 	mov.w	r3, #0
 8007064:	f04f 0400 	mov.w	r4, #0
 8007068:	0094      	lsls	r4, r2, #2
 800706a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800706e:	008b      	lsls	r3, r1, #2
 8007070:	461a      	mov	r2, r3
 8007072:	4623      	mov	r3, r4
 8007074:	4628      	mov	r0, r5
 8007076:	4631      	mov	r1, r6
 8007078:	f7f9 fde6 	bl	8000c48 <__aeabi_uldivmod>
 800707c:	4603      	mov	r3, r0
 800707e:	460c      	mov	r4, r1
 8007080:	461a      	mov	r2, r3
 8007082:	4b50      	ldr	r3, [pc, #320]	; (80071c4 <UART_SetConfig+0x6f4>)
 8007084:	fba3 2302 	umull	r2, r3, r3, r2
 8007088:	095b      	lsrs	r3, r3, #5
 800708a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	469b      	mov	fp, r3
 8007092:	f04f 0c00 	mov.w	ip, #0
 8007096:	46d9      	mov	r9, fp
 8007098:	46e2      	mov	sl, ip
 800709a:	eb19 0309 	adds.w	r3, r9, r9
 800709e:	eb4a 040a 	adc.w	r4, sl, sl
 80070a2:	4699      	mov	r9, r3
 80070a4:	46a2      	mov	sl, r4
 80070a6:	eb19 090b 	adds.w	r9, r9, fp
 80070aa:	eb4a 0a0c 	adc.w	sl, sl, ip
 80070ae:	f04f 0100 	mov.w	r1, #0
 80070b2:	f04f 0200 	mov.w	r2, #0
 80070b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80070ba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80070be:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80070c2:	4689      	mov	r9, r1
 80070c4:	4692      	mov	sl, r2
 80070c6:	eb1b 0509 	adds.w	r5, fp, r9
 80070ca:	eb4c 060a 	adc.w	r6, ip, sl
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	4619      	mov	r1, r3
 80070d4:	f04f 0200 	mov.w	r2, #0
 80070d8:	f04f 0300 	mov.w	r3, #0
 80070dc:	f04f 0400 	mov.w	r4, #0
 80070e0:	0094      	lsls	r4, r2, #2
 80070e2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80070e6:	008b      	lsls	r3, r1, #2
 80070e8:	461a      	mov	r2, r3
 80070ea:	4623      	mov	r3, r4
 80070ec:	4628      	mov	r0, r5
 80070ee:	4631      	mov	r1, r6
 80070f0:	f7f9 fdaa 	bl	8000c48 <__aeabi_uldivmod>
 80070f4:	4603      	mov	r3, r0
 80070f6:	460c      	mov	r4, r1
 80070f8:	461a      	mov	r2, r3
 80070fa:	4b32      	ldr	r3, [pc, #200]	; (80071c4 <UART_SetConfig+0x6f4>)
 80070fc:	fba3 1302 	umull	r1, r3, r3, r2
 8007100:	095b      	lsrs	r3, r3, #5
 8007102:	2164      	movs	r1, #100	; 0x64
 8007104:	fb01 f303 	mul.w	r3, r1, r3
 8007108:	1ad3      	subs	r3, r2, r3
 800710a:	011b      	lsls	r3, r3, #4
 800710c:	3332      	adds	r3, #50	; 0x32
 800710e:	4a2d      	ldr	r2, [pc, #180]	; (80071c4 <UART_SetConfig+0x6f4>)
 8007110:	fba2 2303 	umull	r2, r3, r2, r3
 8007114:	095b      	lsrs	r3, r3, #5
 8007116:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800711a:	4498      	add	r8, r3
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	469b      	mov	fp, r3
 8007120:	f04f 0c00 	mov.w	ip, #0
 8007124:	46d9      	mov	r9, fp
 8007126:	46e2      	mov	sl, ip
 8007128:	eb19 0309 	adds.w	r3, r9, r9
 800712c:	eb4a 040a 	adc.w	r4, sl, sl
 8007130:	4699      	mov	r9, r3
 8007132:	46a2      	mov	sl, r4
 8007134:	eb19 090b 	adds.w	r9, r9, fp
 8007138:	eb4a 0a0c 	adc.w	sl, sl, ip
 800713c:	f04f 0100 	mov.w	r1, #0
 8007140:	f04f 0200 	mov.w	r2, #0
 8007144:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007148:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800714c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007150:	4689      	mov	r9, r1
 8007152:	4692      	mov	sl, r2
 8007154:	eb1b 0509 	adds.w	r5, fp, r9
 8007158:	eb4c 060a 	adc.w	r6, ip, sl
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	4619      	mov	r1, r3
 8007162:	f04f 0200 	mov.w	r2, #0
 8007166:	f04f 0300 	mov.w	r3, #0
 800716a:	f04f 0400 	mov.w	r4, #0
 800716e:	0094      	lsls	r4, r2, #2
 8007170:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007174:	008b      	lsls	r3, r1, #2
 8007176:	461a      	mov	r2, r3
 8007178:	4623      	mov	r3, r4
 800717a:	4628      	mov	r0, r5
 800717c:	4631      	mov	r1, r6
 800717e:	f7f9 fd63 	bl	8000c48 <__aeabi_uldivmod>
 8007182:	4603      	mov	r3, r0
 8007184:	460c      	mov	r4, r1
 8007186:	461a      	mov	r2, r3
 8007188:	4b0e      	ldr	r3, [pc, #56]	; (80071c4 <UART_SetConfig+0x6f4>)
 800718a:	fba3 1302 	umull	r1, r3, r3, r2
 800718e:	095b      	lsrs	r3, r3, #5
 8007190:	2164      	movs	r1, #100	; 0x64
 8007192:	fb01 f303 	mul.w	r3, r1, r3
 8007196:	1ad3      	subs	r3, r2, r3
 8007198:	011b      	lsls	r3, r3, #4
 800719a:	3332      	adds	r3, #50	; 0x32
 800719c:	4a09      	ldr	r2, [pc, #36]	; (80071c4 <UART_SetConfig+0x6f4>)
 800719e:	fba2 2303 	umull	r2, r3, r2, r3
 80071a2:	095b      	lsrs	r3, r3, #5
 80071a4:	f003 020f 	and.w	r2, r3, #15
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4442      	add	r2, r8
 80071ae:	609a      	str	r2, [r3, #8]
}
 80071b0:	e7ff      	b.n	80071b2 <UART_SetConfig+0x6e2>
 80071b2:	bf00      	nop
 80071b4:	3714      	adds	r7, #20
 80071b6:	46bd      	mov	sp, r7
 80071b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071bc:	40011000 	.word	0x40011000
 80071c0:	40011400 	.word	0x40011400
 80071c4:	51eb851f 	.word	0x51eb851f

080071c8 <__errno>:
 80071c8:	4b01      	ldr	r3, [pc, #4]	; (80071d0 <__errno+0x8>)
 80071ca:	6818      	ldr	r0, [r3, #0]
 80071cc:	4770      	bx	lr
 80071ce:	bf00      	nop
 80071d0:	20000014 	.word	0x20000014

080071d4 <__libc_init_array>:
 80071d4:	b570      	push	{r4, r5, r6, lr}
 80071d6:	4e0d      	ldr	r6, [pc, #52]	; (800720c <__libc_init_array+0x38>)
 80071d8:	4c0d      	ldr	r4, [pc, #52]	; (8007210 <__libc_init_array+0x3c>)
 80071da:	1ba4      	subs	r4, r4, r6
 80071dc:	10a4      	asrs	r4, r4, #2
 80071de:	2500      	movs	r5, #0
 80071e0:	42a5      	cmp	r5, r4
 80071e2:	d109      	bne.n	80071f8 <__libc_init_array+0x24>
 80071e4:	4e0b      	ldr	r6, [pc, #44]	; (8007214 <__libc_init_array+0x40>)
 80071e6:	4c0c      	ldr	r4, [pc, #48]	; (8007218 <__libc_init_array+0x44>)
 80071e8:	f003 fb24 	bl	800a834 <_init>
 80071ec:	1ba4      	subs	r4, r4, r6
 80071ee:	10a4      	asrs	r4, r4, #2
 80071f0:	2500      	movs	r5, #0
 80071f2:	42a5      	cmp	r5, r4
 80071f4:	d105      	bne.n	8007202 <__libc_init_array+0x2e>
 80071f6:	bd70      	pop	{r4, r5, r6, pc}
 80071f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80071fc:	4798      	blx	r3
 80071fe:	3501      	adds	r5, #1
 8007200:	e7ee      	b.n	80071e0 <__libc_init_array+0xc>
 8007202:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007206:	4798      	blx	r3
 8007208:	3501      	adds	r5, #1
 800720a:	e7f2      	b.n	80071f2 <__libc_init_array+0x1e>
 800720c:	0800af40 	.word	0x0800af40
 8007210:	0800af40 	.word	0x0800af40
 8007214:	0800af40 	.word	0x0800af40
 8007218:	0800af44 	.word	0x0800af44

0800721c <memset>:
 800721c:	4402      	add	r2, r0
 800721e:	4603      	mov	r3, r0
 8007220:	4293      	cmp	r3, r2
 8007222:	d100      	bne.n	8007226 <memset+0xa>
 8007224:	4770      	bx	lr
 8007226:	f803 1b01 	strb.w	r1, [r3], #1
 800722a:	e7f9      	b.n	8007220 <memset+0x4>

0800722c <__cvt>:
 800722c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007230:	ec55 4b10 	vmov	r4, r5, d0
 8007234:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8007236:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800723a:	2d00      	cmp	r5, #0
 800723c:	460e      	mov	r6, r1
 800723e:	4691      	mov	r9, r2
 8007240:	4619      	mov	r1, r3
 8007242:	bfb8      	it	lt
 8007244:	4622      	movlt	r2, r4
 8007246:	462b      	mov	r3, r5
 8007248:	f027 0720 	bic.w	r7, r7, #32
 800724c:	bfbb      	ittet	lt
 800724e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007252:	461d      	movlt	r5, r3
 8007254:	2300      	movge	r3, #0
 8007256:	232d      	movlt	r3, #45	; 0x2d
 8007258:	bfb8      	it	lt
 800725a:	4614      	movlt	r4, r2
 800725c:	2f46      	cmp	r7, #70	; 0x46
 800725e:	700b      	strb	r3, [r1, #0]
 8007260:	d004      	beq.n	800726c <__cvt+0x40>
 8007262:	2f45      	cmp	r7, #69	; 0x45
 8007264:	d100      	bne.n	8007268 <__cvt+0x3c>
 8007266:	3601      	adds	r6, #1
 8007268:	2102      	movs	r1, #2
 800726a:	e000      	b.n	800726e <__cvt+0x42>
 800726c:	2103      	movs	r1, #3
 800726e:	ab03      	add	r3, sp, #12
 8007270:	9301      	str	r3, [sp, #4]
 8007272:	ab02      	add	r3, sp, #8
 8007274:	9300      	str	r3, [sp, #0]
 8007276:	4632      	mov	r2, r6
 8007278:	4653      	mov	r3, sl
 800727a:	ec45 4b10 	vmov	d0, r4, r5
 800727e:	f000 feaf 	bl	8007fe0 <_dtoa_r>
 8007282:	2f47      	cmp	r7, #71	; 0x47
 8007284:	4680      	mov	r8, r0
 8007286:	d102      	bne.n	800728e <__cvt+0x62>
 8007288:	f019 0f01 	tst.w	r9, #1
 800728c:	d026      	beq.n	80072dc <__cvt+0xb0>
 800728e:	2f46      	cmp	r7, #70	; 0x46
 8007290:	eb08 0906 	add.w	r9, r8, r6
 8007294:	d111      	bne.n	80072ba <__cvt+0x8e>
 8007296:	f898 3000 	ldrb.w	r3, [r8]
 800729a:	2b30      	cmp	r3, #48	; 0x30
 800729c:	d10a      	bne.n	80072b4 <__cvt+0x88>
 800729e:	2200      	movs	r2, #0
 80072a0:	2300      	movs	r3, #0
 80072a2:	4620      	mov	r0, r4
 80072a4:	4629      	mov	r1, r5
 80072a6:	f7f9 fc0f 	bl	8000ac8 <__aeabi_dcmpeq>
 80072aa:	b918      	cbnz	r0, 80072b4 <__cvt+0x88>
 80072ac:	f1c6 0601 	rsb	r6, r6, #1
 80072b0:	f8ca 6000 	str.w	r6, [sl]
 80072b4:	f8da 3000 	ldr.w	r3, [sl]
 80072b8:	4499      	add	r9, r3
 80072ba:	2200      	movs	r2, #0
 80072bc:	2300      	movs	r3, #0
 80072be:	4620      	mov	r0, r4
 80072c0:	4629      	mov	r1, r5
 80072c2:	f7f9 fc01 	bl	8000ac8 <__aeabi_dcmpeq>
 80072c6:	b938      	cbnz	r0, 80072d8 <__cvt+0xac>
 80072c8:	2230      	movs	r2, #48	; 0x30
 80072ca:	9b03      	ldr	r3, [sp, #12]
 80072cc:	454b      	cmp	r3, r9
 80072ce:	d205      	bcs.n	80072dc <__cvt+0xb0>
 80072d0:	1c59      	adds	r1, r3, #1
 80072d2:	9103      	str	r1, [sp, #12]
 80072d4:	701a      	strb	r2, [r3, #0]
 80072d6:	e7f8      	b.n	80072ca <__cvt+0x9e>
 80072d8:	f8cd 900c 	str.w	r9, [sp, #12]
 80072dc:	9b03      	ldr	r3, [sp, #12]
 80072de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80072e0:	eba3 0308 	sub.w	r3, r3, r8
 80072e4:	4640      	mov	r0, r8
 80072e6:	6013      	str	r3, [r2, #0]
 80072e8:	b004      	add	sp, #16
 80072ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080072ee <__exponent>:
 80072ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80072f0:	2900      	cmp	r1, #0
 80072f2:	4604      	mov	r4, r0
 80072f4:	bfba      	itte	lt
 80072f6:	4249      	neglt	r1, r1
 80072f8:	232d      	movlt	r3, #45	; 0x2d
 80072fa:	232b      	movge	r3, #43	; 0x2b
 80072fc:	2909      	cmp	r1, #9
 80072fe:	f804 2b02 	strb.w	r2, [r4], #2
 8007302:	7043      	strb	r3, [r0, #1]
 8007304:	dd20      	ble.n	8007348 <__exponent+0x5a>
 8007306:	f10d 0307 	add.w	r3, sp, #7
 800730a:	461f      	mov	r7, r3
 800730c:	260a      	movs	r6, #10
 800730e:	fb91 f5f6 	sdiv	r5, r1, r6
 8007312:	fb06 1115 	mls	r1, r6, r5, r1
 8007316:	3130      	adds	r1, #48	; 0x30
 8007318:	2d09      	cmp	r5, #9
 800731a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800731e:	f103 32ff 	add.w	r2, r3, #4294967295
 8007322:	4629      	mov	r1, r5
 8007324:	dc09      	bgt.n	800733a <__exponent+0x4c>
 8007326:	3130      	adds	r1, #48	; 0x30
 8007328:	3b02      	subs	r3, #2
 800732a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800732e:	42bb      	cmp	r3, r7
 8007330:	4622      	mov	r2, r4
 8007332:	d304      	bcc.n	800733e <__exponent+0x50>
 8007334:	1a10      	subs	r0, r2, r0
 8007336:	b003      	add	sp, #12
 8007338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800733a:	4613      	mov	r3, r2
 800733c:	e7e7      	b.n	800730e <__exponent+0x20>
 800733e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007342:	f804 2b01 	strb.w	r2, [r4], #1
 8007346:	e7f2      	b.n	800732e <__exponent+0x40>
 8007348:	2330      	movs	r3, #48	; 0x30
 800734a:	4419      	add	r1, r3
 800734c:	7083      	strb	r3, [r0, #2]
 800734e:	1d02      	adds	r2, r0, #4
 8007350:	70c1      	strb	r1, [r0, #3]
 8007352:	e7ef      	b.n	8007334 <__exponent+0x46>

08007354 <_printf_float>:
 8007354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007358:	b08d      	sub	sp, #52	; 0x34
 800735a:	460c      	mov	r4, r1
 800735c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8007360:	4616      	mov	r6, r2
 8007362:	461f      	mov	r7, r3
 8007364:	4605      	mov	r5, r0
 8007366:	f001 fd6d 	bl	8008e44 <_localeconv_r>
 800736a:	6803      	ldr	r3, [r0, #0]
 800736c:	9304      	str	r3, [sp, #16]
 800736e:	4618      	mov	r0, r3
 8007370:	f7f8 ff2e 	bl	80001d0 <strlen>
 8007374:	2300      	movs	r3, #0
 8007376:	930a      	str	r3, [sp, #40]	; 0x28
 8007378:	f8d8 3000 	ldr.w	r3, [r8]
 800737c:	9005      	str	r0, [sp, #20]
 800737e:	3307      	adds	r3, #7
 8007380:	f023 0307 	bic.w	r3, r3, #7
 8007384:	f103 0208 	add.w	r2, r3, #8
 8007388:	f894 a018 	ldrb.w	sl, [r4, #24]
 800738c:	f8d4 b000 	ldr.w	fp, [r4]
 8007390:	f8c8 2000 	str.w	r2, [r8]
 8007394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007398:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800739c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80073a0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80073a4:	9307      	str	r3, [sp, #28]
 80073a6:	f8cd 8018 	str.w	r8, [sp, #24]
 80073aa:	f04f 32ff 	mov.w	r2, #4294967295
 80073ae:	4ba7      	ldr	r3, [pc, #668]	; (800764c <_printf_float+0x2f8>)
 80073b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80073b4:	f7f9 fbba 	bl	8000b2c <__aeabi_dcmpun>
 80073b8:	bb70      	cbnz	r0, 8007418 <_printf_float+0xc4>
 80073ba:	f04f 32ff 	mov.w	r2, #4294967295
 80073be:	4ba3      	ldr	r3, [pc, #652]	; (800764c <_printf_float+0x2f8>)
 80073c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80073c4:	f7f9 fb94 	bl	8000af0 <__aeabi_dcmple>
 80073c8:	bb30      	cbnz	r0, 8007418 <_printf_float+0xc4>
 80073ca:	2200      	movs	r2, #0
 80073cc:	2300      	movs	r3, #0
 80073ce:	4640      	mov	r0, r8
 80073d0:	4649      	mov	r1, r9
 80073d2:	f7f9 fb83 	bl	8000adc <__aeabi_dcmplt>
 80073d6:	b110      	cbz	r0, 80073de <_printf_float+0x8a>
 80073d8:	232d      	movs	r3, #45	; 0x2d
 80073da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073de:	4a9c      	ldr	r2, [pc, #624]	; (8007650 <_printf_float+0x2fc>)
 80073e0:	4b9c      	ldr	r3, [pc, #624]	; (8007654 <_printf_float+0x300>)
 80073e2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80073e6:	bf8c      	ite	hi
 80073e8:	4690      	movhi	r8, r2
 80073ea:	4698      	movls	r8, r3
 80073ec:	2303      	movs	r3, #3
 80073ee:	f02b 0204 	bic.w	r2, fp, #4
 80073f2:	6123      	str	r3, [r4, #16]
 80073f4:	6022      	str	r2, [r4, #0]
 80073f6:	f04f 0900 	mov.w	r9, #0
 80073fa:	9700      	str	r7, [sp, #0]
 80073fc:	4633      	mov	r3, r6
 80073fe:	aa0b      	add	r2, sp, #44	; 0x2c
 8007400:	4621      	mov	r1, r4
 8007402:	4628      	mov	r0, r5
 8007404:	f000 f9e6 	bl	80077d4 <_printf_common>
 8007408:	3001      	adds	r0, #1
 800740a:	f040 808d 	bne.w	8007528 <_printf_float+0x1d4>
 800740e:	f04f 30ff 	mov.w	r0, #4294967295
 8007412:	b00d      	add	sp, #52	; 0x34
 8007414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007418:	4642      	mov	r2, r8
 800741a:	464b      	mov	r3, r9
 800741c:	4640      	mov	r0, r8
 800741e:	4649      	mov	r1, r9
 8007420:	f7f9 fb84 	bl	8000b2c <__aeabi_dcmpun>
 8007424:	b110      	cbz	r0, 800742c <_printf_float+0xd8>
 8007426:	4a8c      	ldr	r2, [pc, #560]	; (8007658 <_printf_float+0x304>)
 8007428:	4b8c      	ldr	r3, [pc, #560]	; (800765c <_printf_float+0x308>)
 800742a:	e7da      	b.n	80073e2 <_printf_float+0x8e>
 800742c:	6861      	ldr	r1, [r4, #4]
 800742e:	1c4b      	adds	r3, r1, #1
 8007430:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8007434:	a80a      	add	r0, sp, #40	; 0x28
 8007436:	d13e      	bne.n	80074b6 <_printf_float+0x162>
 8007438:	2306      	movs	r3, #6
 800743a:	6063      	str	r3, [r4, #4]
 800743c:	2300      	movs	r3, #0
 800743e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007442:	ab09      	add	r3, sp, #36	; 0x24
 8007444:	9300      	str	r3, [sp, #0]
 8007446:	ec49 8b10 	vmov	d0, r8, r9
 800744a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800744e:	6022      	str	r2, [r4, #0]
 8007450:	f8cd a004 	str.w	sl, [sp, #4]
 8007454:	6861      	ldr	r1, [r4, #4]
 8007456:	4628      	mov	r0, r5
 8007458:	f7ff fee8 	bl	800722c <__cvt>
 800745c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8007460:	2b47      	cmp	r3, #71	; 0x47
 8007462:	4680      	mov	r8, r0
 8007464:	d109      	bne.n	800747a <_printf_float+0x126>
 8007466:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007468:	1cd8      	adds	r0, r3, #3
 800746a:	db02      	blt.n	8007472 <_printf_float+0x11e>
 800746c:	6862      	ldr	r2, [r4, #4]
 800746e:	4293      	cmp	r3, r2
 8007470:	dd47      	ble.n	8007502 <_printf_float+0x1ae>
 8007472:	f1aa 0a02 	sub.w	sl, sl, #2
 8007476:	fa5f fa8a 	uxtb.w	sl, sl
 800747a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800747e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007480:	d824      	bhi.n	80074cc <_printf_float+0x178>
 8007482:	3901      	subs	r1, #1
 8007484:	4652      	mov	r2, sl
 8007486:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800748a:	9109      	str	r1, [sp, #36]	; 0x24
 800748c:	f7ff ff2f 	bl	80072ee <__exponent>
 8007490:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007492:	1813      	adds	r3, r2, r0
 8007494:	2a01      	cmp	r2, #1
 8007496:	4681      	mov	r9, r0
 8007498:	6123      	str	r3, [r4, #16]
 800749a:	dc02      	bgt.n	80074a2 <_printf_float+0x14e>
 800749c:	6822      	ldr	r2, [r4, #0]
 800749e:	07d1      	lsls	r1, r2, #31
 80074a0:	d501      	bpl.n	80074a6 <_printf_float+0x152>
 80074a2:	3301      	adds	r3, #1
 80074a4:	6123      	str	r3, [r4, #16]
 80074a6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d0a5      	beq.n	80073fa <_printf_float+0xa6>
 80074ae:	232d      	movs	r3, #45	; 0x2d
 80074b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074b4:	e7a1      	b.n	80073fa <_printf_float+0xa6>
 80074b6:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80074ba:	f000 8177 	beq.w	80077ac <_printf_float+0x458>
 80074be:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80074c2:	d1bb      	bne.n	800743c <_printf_float+0xe8>
 80074c4:	2900      	cmp	r1, #0
 80074c6:	d1b9      	bne.n	800743c <_printf_float+0xe8>
 80074c8:	2301      	movs	r3, #1
 80074ca:	e7b6      	b.n	800743a <_printf_float+0xe6>
 80074cc:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80074d0:	d119      	bne.n	8007506 <_printf_float+0x1b2>
 80074d2:	2900      	cmp	r1, #0
 80074d4:	6863      	ldr	r3, [r4, #4]
 80074d6:	dd0c      	ble.n	80074f2 <_printf_float+0x19e>
 80074d8:	6121      	str	r1, [r4, #16]
 80074da:	b913      	cbnz	r3, 80074e2 <_printf_float+0x18e>
 80074dc:	6822      	ldr	r2, [r4, #0]
 80074de:	07d2      	lsls	r2, r2, #31
 80074e0:	d502      	bpl.n	80074e8 <_printf_float+0x194>
 80074e2:	3301      	adds	r3, #1
 80074e4:	440b      	add	r3, r1
 80074e6:	6123      	str	r3, [r4, #16]
 80074e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074ea:	65a3      	str	r3, [r4, #88]	; 0x58
 80074ec:	f04f 0900 	mov.w	r9, #0
 80074f0:	e7d9      	b.n	80074a6 <_printf_float+0x152>
 80074f2:	b913      	cbnz	r3, 80074fa <_printf_float+0x1a6>
 80074f4:	6822      	ldr	r2, [r4, #0]
 80074f6:	07d0      	lsls	r0, r2, #31
 80074f8:	d501      	bpl.n	80074fe <_printf_float+0x1aa>
 80074fa:	3302      	adds	r3, #2
 80074fc:	e7f3      	b.n	80074e6 <_printf_float+0x192>
 80074fe:	2301      	movs	r3, #1
 8007500:	e7f1      	b.n	80074e6 <_printf_float+0x192>
 8007502:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8007506:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800750a:	4293      	cmp	r3, r2
 800750c:	db05      	blt.n	800751a <_printf_float+0x1c6>
 800750e:	6822      	ldr	r2, [r4, #0]
 8007510:	6123      	str	r3, [r4, #16]
 8007512:	07d1      	lsls	r1, r2, #31
 8007514:	d5e8      	bpl.n	80074e8 <_printf_float+0x194>
 8007516:	3301      	adds	r3, #1
 8007518:	e7e5      	b.n	80074e6 <_printf_float+0x192>
 800751a:	2b00      	cmp	r3, #0
 800751c:	bfd4      	ite	le
 800751e:	f1c3 0302 	rsble	r3, r3, #2
 8007522:	2301      	movgt	r3, #1
 8007524:	4413      	add	r3, r2
 8007526:	e7de      	b.n	80074e6 <_printf_float+0x192>
 8007528:	6823      	ldr	r3, [r4, #0]
 800752a:	055a      	lsls	r2, r3, #21
 800752c:	d407      	bmi.n	800753e <_printf_float+0x1ea>
 800752e:	6923      	ldr	r3, [r4, #16]
 8007530:	4642      	mov	r2, r8
 8007532:	4631      	mov	r1, r6
 8007534:	4628      	mov	r0, r5
 8007536:	47b8      	blx	r7
 8007538:	3001      	adds	r0, #1
 800753a:	d12b      	bne.n	8007594 <_printf_float+0x240>
 800753c:	e767      	b.n	800740e <_printf_float+0xba>
 800753e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007542:	f240 80dc 	bls.w	80076fe <_printf_float+0x3aa>
 8007546:	2200      	movs	r2, #0
 8007548:	2300      	movs	r3, #0
 800754a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800754e:	f7f9 fabb 	bl	8000ac8 <__aeabi_dcmpeq>
 8007552:	2800      	cmp	r0, #0
 8007554:	d033      	beq.n	80075be <_printf_float+0x26a>
 8007556:	2301      	movs	r3, #1
 8007558:	4a41      	ldr	r2, [pc, #260]	; (8007660 <_printf_float+0x30c>)
 800755a:	4631      	mov	r1, r6
 800755c:	4628      	mov	r0, r5
 800755e:	47b8      	blx	r7
 8007560:	3001      	adds	r0, #1
 8007562:	f43f af54 	beq.w	800740e <_printf_float+0xba>
 8007566:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800756a:	429a      	cmp	r2, r3
 800756c:	db02      	blt.n	8007574 <_printf_float+0x220>
 800756e:	6823      	ldr	r3, [r4, #0]
 8007570:	07d8      	lsls	r0, r3, #31
 8007572:	d50f      	bpl.n	8007594 <_printf_float+0x240>
 8007574:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007578:	4631      	mov	r1, r6
 800757a:	4628      	mov	r0, r5
 800757c:	47b8      	blx	r7
 800757e:	3001      	adds	r0, #1
 8007580:	f43f af45 	beq.w	800740e <_printf_float+0xba>
 8007584:	f04f 0800 	mov.w	r8, #0
 8007588:	f104 091a 	add.w	r9, r4, #26
 800758c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800758e:	3b01      	subs	r3, #1
 8007590:	4543      	cmp	r3, r8
 8007592:	dc09      	bgt.n	80075a8 <_printf_float+0x254>
 8007594:	6823      	ldr	r3, [r4, #0]
 8007596:	079b      	lsls	r3, r3, #30
 8007598:	f100 8103 	bmi.w	80077a2 <_printf_float+0x44e>
 800759c:	68e0      	ldr	r0, [r4, #12]
 800759e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075a0:	4298      	cmp	r0, r3
 80075a2:	bfb8      	it	lt
 80075a4:	4618      	movlt	r0, r3
 80075a6:	e734      	b.n	8007412 <_printf_float+0xbe>
 80075a8:	2301      	movs	r3, #1
 80075aa:	464a      	mov	r2, r9
 80075ac:	4631      	mov	r1, r6
 80075ae:	4628      	mov	r0, r5
 80075b0:	47b8      	blx	r7
 80075b2:	3001      	adds	r0, #1
 80075b4:	f43f af2b 	beq.w	800740e <_printf_float+0xba>
 80075b8:	f108 0801 	add.w	r8, r8, #1
 80075bc:	e7e6      	b.n	800758c <_printf_float+0x238>
 80075be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	dc2b      	bgt.n	800761c <_printf_float+0x2c8>
 80075c4:	2301      	movs	r3, #1
 80075c6:	4a26      	ldr	r2, [pc, #152]	; (8007660 <_printf_float+0x30c>)
 80075c8:	4631      	mov	r1, r6
 80075ca:	4628      	mov	r0, r5
 80075cc:	47b8      	blx	r7
 80075ce:	3001      	adds	r0, #1
 80075d0:	f43f af1d 	beq.w	800740e <_printf_float+0xba>
 80075d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075d6:	b923      	cbnz	r3, 80075e2 <_printf_float+0x28e>
 80075d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075da:	b913      	cbnz	r3, 80075e2 <_printf_float+0x28e>
 80075dc:	6823      	ldr	r3, [r4, #0]
 80075de:	07d9      	lsls	r1, r3, #31
 80075e0:	d5d8      	bpl.n	8007594 <_printf_float+0x240>
 80075e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80075e6:	4631      	mov	r1, r6
 80075e8:	4628      	mov	r0, r5
 80075ea:	47b8      	blx	r7
 80075ec:	3001      	adds	r0, #1
 80075ee:	f43f af0e 	beq.w	800740e <_printf_float+0xba>
 80075f2:	f04f 0900 	mov.w	r9, #0
 80075f6:	f104 0a1a 	add.w	sl, r4, #26
 80075fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075fc:	425b      	negs	r3, r3
 80075fe:	454b      	cmp	r3, r9
 8007600:	dc01      	bgt.n	8007606 <_printf_float+0x2b2>
 8007602:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007604:	e794      	b.n	8007530 <_printf_float+0x1dc>
 8007606:	2301      	movs	r3, #1
 8007608:	4652      	mov	r2, sl
 800760a:	4631      	mov	r1, r6
 800760c:	4628      	mov	r0, r5
 800760e:	47b8      	blx	r7
 8007610:	3001      	adds	r0, #1
 8007612:	f43f aefc 	beq.w	800740e <_printf_float+0xba>
 8007616:	f109 0901 	add.w	r9, r9, #1
 800761a:	e7ee      	b.n	80075fa <_printf_float+0x2a6>
 800761c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800761e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007620:	429a      	cmp	r2, r3
 8007622:	bfa8      	it	ge
 8007624:	461a      	movge	r2, r3
 8007626:	2a00      	cmp	r2, #0
 8007628:	4691      	mov	r9, r2
 800762a:	dd07      	ble.n	800763c <_printf_float+0x2e8>
 800762c:	4613      	mov	r3, r2
 800762e:	4631      	mov	r1, r6
 8007630:	4642      	mov	r2, r8
 8007632:	4628      	mov	r0, r5
 8007634:	47b8      	blx	r7
 8007636:	3001      	adds	r0, #1
 8007638:	f43f aee9 	beq.w	800740e <_printf_float+0xba>
 800763c:	f104 031a 	add.w	r3, r4, #26
 8007640:	f04f 0b00 	mov.w	fp, #0
 8007644:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007648:	9306      	str	r3, [sp, #24]
 800764a:	e015      	b.n	8007678 <_printf_float+0x324>
 800764c:	7fefffff 	.word	0x7fefffff
 8007650:	0800a8a0 	.word	0x0800a8a0
 8007654:	0800a89c 	.word	0x0800a89c
 8007658:	0800a8a8 	.word	0x0800a8a8
 800765c:	0800a8a4 	.word	0x0800a8a4
 8007660:	0800a8ac 	.word	0x0800a8ac
 8007664:	2301      	movs	r3, #1
 8007666:	9a06      	ldr	r2, [sp, #24]
 8007668:	4631      	mov	r1, r6
 800766a:	4628      	mov	r0, r5
 800766c:	47b8      	blx	r7
 800766e:	3001      	adds	r0, #1
 8007670:	f43f aecd 	beq.w	800740e <_printf_float+0xba>
 8007674:	f10b 0b01 	add.w	fp, fp, #1
 8007678:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800767c:	ebaa 0309 	sub.w	r3, sl, r9
 8007680:	455b      	cmp	r3, fp
 8007682:	dcef      	bgt.n	8007664 <_printf_float+0x310>
 8007684:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007688:	429a      	cmp	r2, r3
 800768a:	44d0      	add	r8, sl
 800768c:	db15      	blt.n	80076ba <_printf_float+0x366>
 800768e:	6823      	ldr	r3, [r4, #0]
 8007690:	07da      	lsls	r2, r3, #31
 8007692:	d412      	bmi.n	80076ba <_printf_float+0x366>
 8007694:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007696:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007698:	eba3 020a 	sub.w	r2, r3, sl
 800769c:	eba3 0a01 	sub.w	sl, r3, r1
 80076a0:	4592      	cmp	sl, r2
 80076a2:	bfa8      	it	ge
 80076a4:	4692      	movge	sl, r2
 80076a6:	f1ba 0f00 	cmp.w	sl, #0
 80076aa:	dc0e      	bgt.n	80076ca <_printf_float+0x376>
 80076ac:	f04f 0800 	mov.w	r8, #0
 80076b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80076b4:	f104 091a 	add.w	r9, r4, #26
 80076b8:	e019      	b.n	80076ee <_printf_float+0x39a>
 80076ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076be:	4631      	mov	r1, r6
 80076c0:	4628      	mov	r0, r5
 80076c2:	47b8      	blx	r7
 80076c4:	3001      	adds	r0, #1
 80076c6:	d1e5      	bne.n	8007694 <_printf_float+0x340>
 80076c8:	e6a1      	b.n	800740e <_printf_float+0xba>
 80076ca:	4653      	mov	r3, sl
 80076cc:	4642      	mov	r2, r8
 80076ce:	4631      	mov	r1, r6
 80076d0:	4628      	mov	r0, r5
 80076d2:	47b8      	blx	r7
 80076d4:	3001      	adds	r0, #1
 80076d6:	d1e9      	bne.n	80076ac <_printf_float+0x358>
 80076d8:	e699      	b.n	800740e <_printf_float+0xba>
 80076da:	2301      	movs	r3, #1
 80076dc:	464a      	mov	r2, r9
 80076de:	4631      	mov	r1, r6
 80076e0:	4628      	mov	r0, r5
 80076e2:	47b8      	blx	r7
 80076e4:	3001      	adds	r0, #1
 80076e6:	f43f ae92 	beq.w	800740e <_printf_float+0xba>
 80076ea:	f108 0801 	add.w	r8, r8, #1
 80076ee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80076f2:	1a9b      	subs	r3, r3, r2
 80076f4:	eba3 030a 	sub.w	r3, r3, sl
 80076f8:	4543      	cmp	r3, r8
 80076fa:	dcee      	bgt.n	80076da <_printf_float+0x386>
 80076fc:	e74a      	b.n	8007594 <_printf_float+0x240>
 80076fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007700:	2a01      	cmp	r2, #1
 8007702:	dc01      	bgt.n	8007708 <_printf_float+0x3b4>
 8007704:	07db      	lsls	r3, r3, #31
 8007706:	d53a      	bpl.n	800777e <_printf_float+0x42a>
 8007708:	2301      	movs	r3, #1
 800770a:	4642      	mov	r2, r8
 800770c:	4631      	mov	r1, r6
 800770e:	4628      	mov	r0, r5
 8007710:	47b8      	blx	r7
 8007712:	3001      	adds	r0, #1
 8007714:	f43f ae7b 	beq.w	800740e <_printf_float+0xba>
 8007718:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800771c:	4631      	mov	r1, r6
 800771e:	4628      	mov	r0, r5
 8007720:	47b8      	blx	r7
 8007722:	3001      	adds	r0, #1
 8007724:	f108 0801 	add.w	r8, r8, #1
 8007728:	f43f ae71 	beq.w	800740e <_printf_float+0xba>
 800772c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800772e:	2200      	movs	r2, #0
 8007730:	f103 3aff 	add.w	sl, r3, #4294967295
 8007734:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007738:	2300      	movs	r3, #0
 800773a:	f7f9 f9c5 	bl	8000ac8 <__aeabi_dcmpeq>
 800773e:	b9c8      	cbnz	r0, 8007774 <_printf_float+0x420>
 8007740:	4653      	mov	r3, sl
 8007742:	4642      	mov	r2, r8
 8007744:	4631      	mov	r1, r6
 8007746:	4628      	mov	r0, r5
 8007748:	47b8      	blx	r7
 800774a:	3001      	adds	r0, #1
 800774c:	d10e      	bne.n	800776c <_printf_float+0x418>
 800774e:	e65e      	b.n	800740e <_printf_float+0xba>
 8007750:	2301      	movs	r3, #1
 8007752:	4652      	mov	r2, sl
 8007754:	4631      	mov	r1, r6
 8007756:	4628      	mov	r0, r5
 8007758:	47b8      	blx	r7
 800775a:	3001      	adds	r0, #1
 800775c:	f43f ae57 	beq.w	800740e <_printf_float+0xba>
 8007760:	f108 0801 	add.w	r8, r8, #1
 8007764:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007766:	3b01      	subs	r3, #1
 8007768:	4543      	cmp	r3, r8
 800776a:	dcf1      	bgt.n	8007750 <_printf_float+0x3fc>
 800776c:	464b      	mov	r3, r9
 800776e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007772:	e6de      	b.n	8007532 <_printf_float+0x1de>
 8007774:	f04f 0800 	mov.w	r8, #0
 8007778:	f104 0a1a 	add.w	sl, r4, #26
 800777c:	e7f2      	b.n	8007764 <_printf_float+0x410>
 800777e:	2301      	movs	r3, #1
 8007780:	e7df      	b.n	8007742 <_printf_float+0x3ee>
 8007782:	2301      	movs	r3, #1
 8007784:	464a      	mov	r2, r9
 8007786:	4631      	mov	r1, r6
 8007788:	4628      	mov	r0, r5
 800778a:	47b8      	blx	r7
 800778c:	3001      	adds	r0, #1
 800778e:	f43f ae3e 	beq.w	800740e <_printf_float+0xba>
 8007792:	f108 0801 	add.w	r8, r8, #1
 8007796:	68e3      	ldr	r3, [r4, #12]
 8007798:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800779a:	1a9b      	subs	r3, r3, r2
 800779c:	4543      	cmp	r3, r8
 800779e:	dcf0      	bgt.n	8007782 <_printf_float+0x42e>
 80077a0:	e6fc      	b.n	800759c <_printf_float+0x248>
 80077a2:	f04f 0800 	mov.w	r8, #0
 80077a6:	f104 0919 	add.w	r9, r4, #25
 80077aa:	e7f4      	b.n	8007796 <_printf_float+0x442>
 80077ac:	2900      	cmp	r1, #0
 80077ae:	f43f ae8b 	beq.w	80074c8 <_printf_float+0x174>
 80077b2:	2300      	movs	r3, #0
 80077b4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80077b8:	ab09      	add	r3, sp, #36	; 0x24
 80077ba:	9300      	str	r3, [sp, #0]
 80077bc:	ec49 8b10 	vmov	d0, r8, r9
 80077c0:	6022      	str	r2, [r4, #0]
 80077c2:	f8cd a004 	str.w	sl, [sp, #4]
 80077c6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80077ca:	4628      	mov	r0, r5
 80077cc:	f7ff fd2e 	bl	800722c <__cvt>
 80077d0:	4680      	mov	r8, r0
 80077d2:	e648      	b.n	8007466 <_printf_float+0x112>

080077d4 <_printf_common>:
 80077d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077d8:	4691      	mov	r9, r2
 80077da:	461f      	mov	r7, r3
 80077dc:	688a      	ldr	r2, [r1, #8]
 80077de:	690b      	ldr	r3, [r1, #16]
 80077e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80077e4:	4293      	cmp	r3, r2
 80077e6:	bfb8      	it	lt
 80077e8:	4613      	movlt	r3, r2
 80077ea:	f8c9 3000 	str.w	r3, [r9]
 80077ee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80077f2:	4606      	mov	r6, r0
 80077f4:	460c      	mov	r4, r1
 80077f6:	b112      	cbz	r2, 80077fe <_printf_common+0x2a>
 80077f8:	3301      	adds	r3, #1
 80077fa:	f8c9 3000 	str.w	r3, [r9]
 80077fe:	6823      	ldr	r3, [r4, #0]
 8007800:	0699      	lsls	r1, r3, #26
 8007802:	bf42      	ittt	mi
 8007804:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007808:	3302      	addmi	r3, #2
 800780a:	f8c9 3000 	strmi.w	r3, [r9]
 800780e:	6825      	ldr	r5, [r4, #0]
 8007810:	f015 0506 	ands.w	r5, r5, #6
 8007814:	d107      	bne.n	8007826 <_printf_common+0x52>
 8007816:	f104 0a19 	add.w	sl, r4, #25
 800781a:	68e3      	ldr	r3, [r4, #12]
 800781c:	f8d9 2000 	ldr.w	r2, [r9]
 8007820:	1a9b      	subs	r3, r3, r2
 8007822:	42ab      	cmp	r3, r5
 8007824:	dc28      	bgt.n	8007878 <_printf_common+0xa4>
 8007826:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800782a:	6822      	ldr	r2, [r4, #0]
 800782c:	3300      	adds	r3, #0
 800782e:	bf18      	it	ne
 8007830:	2301      	movne	r3, #1
 8007832:	0692      	lsls	r2, r2, #26
 8007834:	d42d      	bmi.n	8007892 <_printf_common+0xbe>
 8007836:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800783a:	4639      	mov	r1, r7
 800783c:	4630      	mov	r0, r6
 800783e:	47c0      	blx	r8
 8007840:	3001      	adds	r0, #1
 8007842:	d020      	beq.n	8007886 <_printf_common+0xb2>
 8007844:	6823      	ldr	r3, [r4, #0]
 8007846:	68e5      	ldr	r5, [r4, #12]
 8007848:	f8d9 2000 	ldr.w	r2, [r9]
 800784c:	f003 0306 	and.w	r3, r3, #6
 8007850:	2b04      	cmp	r3, #4
 8007852:	bf08      	it	eq
 8007854:	1aad      	subeq	r5, r5, r2
 8007856:	68a3      	ldr	r3, [r4, #8]
 8007858:	6922      	ldr	r2, [r4, #16]
 800785a:	bf0c      	ite	eq
 800785c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007860:	2500      	movne	r5, #0
 8007862:	4293      	cmp	r3, r2
 8007864:	bfc4      	itt	gt
 8007866:	1a9b      	subgt	r3, r3, r2
 8007868:	18ed      	addgt	r5, r5, r3
 800786a:	f04f 0900 	mov.w	r9, #0
 800786e:	341a      	adds	r4, #26
 8007870:	454d      	cmp	r5, r9
 8007872:	d11a      	bne.n	80078aa <_printf_common+0xd6>
 8007874:	2000      	movs	r0, #0
 8007876:	e008      	b.n	800788a <_printf_common+0xb6>
 8007878:	2301      	movs	r3, #1
 800787a:	4652      	mov	r2, sl
 800787c:	4639      	mov	r1, r7
 800787e:	4630      	mov	r0, r6
 8007880:	47c0      	blx	r8
 8007882:	3001      	adds	r0, #1
 8007884:	d103      	bne.n	800788e <_printf_common+0xba>
 8007886:	f04f 30ff 	mov.w	r0, #4294967295
 800788a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800788e:	3501      	adds	r5, #1
 8007890:	e7c3      	b.n	800781a <_printf_common+0x46>
 8007892:	18e1      	adds	r1, r4, r3
 8007894:	1c5a      	adds	r2, r3, #1
 8007896:	2030      	movs	r0, #48	; 0x30
 8007898:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800789c:	4422      	add	r2, r4
 800789e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80078a2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80078a6:	3302      	adds	r3, #2
 80078a8:	e7c5      	b.n	8007836 <_printf_common+0x62>
 80078aa:	2301      	movs	r3, #1
 80078ac:	4622      	mov	r2, r4
 80078ae:	4639      	mov	r1, r7
 80078b0:	4630      	mov	r0, r6
 80078b2:	47c0      	blx	r8
 80078b4:	3001      	adds	r0, #1
 80078b6:	d0e6      	beq.n	8007886 <_printf_common+0xb2>
 80078b8:	f109 0901 	add.w	r9, r9, #1
 80078bc:	e7d8      	b.n	8007870 <_printf_common+0x9c>
	...

080078c0 <_printf_i>:
 80078c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80078c4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80078c8:	460c      	mov	r4, r1
 80078ca:	7e09      	ldrb	r1, [r1, #24]
 80078cc:	b085      	sub	sp, #20
 80078ce:	296e      	cmp	r1, #110	; 0x6e
 80078d0:	4617      	mov	r7, r2
 80078d2:	4606      	mov	r6, r0
 80078d4:	4698      	mov	r8, r3
 80078d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80078d8:	f000 80b3 	beq.w	8007a42 <_printf_i+0x182>
 80078dc:	d822      	bhi.n	8007924 <_printf_i+0x64>
 80078de:	2963      	cmp	r1, #99	; 0x63
 80078e0:	d036      	beq.n	8007950 <_printf_i+0x90>
 80078e2:	d80a      	bhi.n	80078fa <_printf_i+0x3a>
 80078e4:	2900      	cmp	r1, #0
 80078e6:	f000 80b9 	beq.w	8007a5c <_printf_i+0x19c>
 80078ea:	2958      	cmp	r1, #88	; 0x58
 80078ec:	f000 8083 	beq.w	80079f6 <_printf_i+0x136>
 80078f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80078f4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80078f8:	e032      	b.n	8007960 <_printf_i+0xa0>
 80078fa:	2964      	cmp	r1, #100	; 0x64
 80078fc:	d001      	beq.n	8007902 <_printf_i+0x42>
 80078fe:	2969      	cmp	r1, #105	; 0x69
 8007900:	d1f6      	bne.n	80078f0 <_printf_i+0x30>
 8007902:	6820      	ldr	r0, [r4, #0]
 8007904:	6813      	ldr	r3, [r2, #0]
 8007906:	0605      	lsls	r5, r0, #24
 8007908:	f103 0104 	add.w	r1, r3, #4
 800790c:	d52a      	bpl.n	8007964 <_printf_i+0xa4>
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	6011      	str	r1, [r2, #0]
 8007912:	2b00      	cmp	r3, #0
 8007914:	da03      	bge.n	800791e <_printf_i+0x5e>
 8007916:	222d      	movs	r2, #45	; 0x2d
 8007918:	425b      	negs	r3, r3
 800791a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800791e:	486f      	ldr	r0, [pc, #444]	; (8007adc <_printf_i+0x21c>)
 8007920:	220a      	movs	r2, #10
 8007922:	e039      	b.n	8007998 <_printf_i+0xd8>
 8007924:	2973      	cmp	r1, #115	; 0x73
 8007926:	f000 809d 	beq.w	8007a64 <_printf_i+0x1a4>
 800792a:	d808      	bhi.n	800793e <_printf_i+0x7e>
 800792c:	296f      	cmp	r1, #111	; 0x6f
 800792e:	d020      	beq.n	8007972 <_printf_i+0xb2>
 8007930:	2970      	cmp	r1, #112	; 0x70
 8007932:	d1dd      	bne.n	80078f0 <_printf_i+0x30>
 8007934:	6823      	ldr	r3, [r4, #0]
 8007936:	f043 0320 	orr.w	r3, r3, #32
 800793a:	6023      	str	r3, [r4, #0]
 800793c:	e003      	b.n	8007946 <_printf_i+0x86>
 800793e:	2975      	cmp	r1, #117	; 0x75
 8007940:	d017      	beq.n	8007972 <_printf_i+0xb2>
 8007942:	2978      	cmp	r1, #120	; 0x78
 8007944:	d1d4      	bne.n	80078f0 <_printf_i+0x30>
 8007946:	2378      	movs	r3, #120	; 0x78
 8007948:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800794c:	4864      	ldr	r0, [pc, #400]	; (8007ae0 <_printf_i+0x220>)
 800794e:	e055      	b.n	80079fc <_printf_i+0x13c>
 8007950:	6813      	ldr	r3, [r2, #0]
 8007952:	1d19      	adds	r1, r3, #4
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	6011      	str	r1, [r2, #0]
 8007958:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800795c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007960:	2301      	movs	r3, #1
 8007962:	e08c      	b.n	8007a7e <_printf_i+0x1be>
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	6011      	str	r1, [r2, #0]
 8007968:	f010 0f40 	tst.w	r0, #64	; 0x40
 800796c:	bf18      	it	ne
 800796e:	b21b      	sxthne	r3, r3
 8007970:	e7cf      	b.n	8007912 <_printf_i+0x52>
 8007972:	6813      	ldr	r3, [r2, #0]
 8007974:	6825      	ldr	r5, [r4, #0]
 8007976:	1d18      	adds	r0, r3, #4
 8007978:	6010      	str	r0, [r2, #0]
 800797a:	0628      	lsls	r0, r5, #24
 800797c:	d501      	bpl.n	8007982 <_printf_i+0xc2>
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	e002      	b.n	8007988 <_printf_i+0xc8>
 8007982:	0668      	lsls	r0, r5, #25
 8007984:	d5fb      	bpl.n	800797e <_printf_i+0xbe>
 8007986:	881b      	ldrh	r3, [r3, #0]
 8007988:	4854      	ldr	r0, [pc, #336]	; (8007adc <_printf_i+0x21c>)
 800798a:	296f      	cmp	r1, #111	; 0x6f
 800798c:	bf14      	ite	ne
 800798e:	220a      	movne	r2, #10
 8007990:	2208      	moveq	r2, #8
 8007992:	2100      	movs	r1, #0
 8007994:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007998:	6865      	ldr	r5, [r4, #4]
 800799a:	60a5      	str	r5, [r4, #8]
 800799c:	2d00      	cmp	r5, #0
 800799e:	f2c0 8095 	blt.w	8007acc <_printf_i+0x20c>
 80079a2:	6821      	ldr	r1, [r4, #0]
 80079a4:	f021 0104 	bic.w	r1, r1, #4
 80079a8:	6021      	str	r1, [r4, #0]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d13d      	bne.n	8007a2a <_printf_i+0x16a>
 80079ae:	2d00      	cmp	r5, #0
 80079b0:	f040 808e 	bne.w	8007ad0 <_printf_i+0x210>
 80079b4:	4665      	mov	r5, ip
 80079b6:	2a08      	cmp	r2, #8
 80079b8:	d10b      	bne.n	80079d2 <_printf_i+0x112>
 80079ba:	6823      	ldr	r3, [r4, #0]
 80079bc:	07db      	lsls	r3, r3, #31
 80079be:	d508      	bpl.n	80079d2 <_printf_i+0x112>
 80079c0:	6923      	ldr	r3, [r4, #16]
 80079c2:	6862      	ldr	r2, [r4, #4]
 80079c4:	429a      	cmp	r2, r3
 80079c6:	bfde      	ittt	le
 80079c8:	2330      	movle	r3, #48	; 0x30
 80079ca:	f805 3c01 	strble.w	r3, [r5, #-1]
 80079ce:	f105 35ff 	addle.w	r5, r5, #4294967295
 80079d2:	ebac 0305 	sub.w	r3, ip, r5
 80079d6:	6123      	str	r3, [r4, #16]
 80079d8:	f8cd 8000 	str.w	r8, [sp]
 80079dc:	463b      	mov	r3, r7
 80079de:	aa03      	add	r2, sp, #12
 80079e0:	4621      	mov	r1, r4
 80079e2:	4630      	mov	r0, r6
 80079e4:	f7ff fef6 	bl	80077d4 <_printf_common>
 80079e8:	3001      	adds	r0, #1
 80079ea:	d14d      	bne.n	8007a88 <_printf_i+0x1c8>
 80079ec:	f04f 30ff 	mov.w	r0, #4294967295
 80079f0:	b005      	add	sp, #20
 80079f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80079f6:	4839      	ldr	r0, [pc, #228]	; (8007adc <_printf_i+0x21c>)
 80079f8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80079fc:	6813      	ldr	r3, [r2, #0]
 80079fe:	6821      	ldr	r1, [r4, #0]
 8007a00:	1d1d      	adds	r5, r3, #4
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	6015      	str	r5, [r2, #0]
 8007a06:	060a      	lsls	r2, r1, #24
 8007a08:	d50b      	bpl.n	8007a22 <_printf_i+0x162>
 8007a0a:	07ca      	lsls	r2, r1, #31
 8007a0c:	bf44      	itt	mi
 8007a0e:	f041 0120 	orrmi.w	r1, r1, #32
 8007a12:	6021      	strmi	r1, [r4, #0]
 8007a14:	b91b      	cbnz	r3, 8007a1e <_printf_i+0x15e>
 8007a16:	6822      	ldr	r2, [r4, #0]
 8007a18:	f022 0220 	bic.w	r2, r2, #32
 8007a1c:	6022      	str	r2, [r4, #0]
 8007a1e:	2210      	movs	r2, #16
 8007a20:	e7b7      	b.n	8007992 <_printf_i+0xd2>
 8007a22:	064d      	lsls	r5, r1, #25
 8007a24:	bf48      	it	mi
 8007a26:	b29b      	uxthmi	r3, r3
 8007a28:	e7ef      	b.n	8007a0a <_printf_i+0x14a>
 8007a2a:	4665      	mov	r5, ip
 8007a2c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007a30:	fb02 3311 	mls	r3, r2, r1, r3
 8007a34:	5cc3      	ldrb	r3, [r0, r3]
 8007a36:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007a3a:	460b      	mov	r3, r1
 8007a3c:	2900      	cmp	r1, #0
 8007a3e:	d1f5      	bne.n	8007a2c <_printf_i+0x16c>
 8007a40:	e7b9      	b.n	80079b6 <_printf_i+0xf6>
 8007a42:	6813      	ldr	r3, [r2, #0]
 8007a44:	6825      	ldr	r5, [r4, #0]
 8007a46:	6961      	ldr	r1, [r4, #20]
 8007a48:	1d18      	adds	r0, r3, #4
 8007a4a:	6010      	str	r0, [r2, #0]
 8007a4c:	0628      	lsls	r0, r5, #24
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	d501      	bpl.n	8007a56 <_printf_i+0x196>
 8007a52:	6019      	str	r1, [r3, #0]
 8007a54:	e002      	b.n	8007a5c <_printf_i+0x19c>
 8007a56:	066a      	lsls	r2, r5, #25
 8007a58:	d5fb      	bpl.n	8007a52 <_printf_i+0x192>
 8007a5a:	8019      	strh	r1, [r3, #0]
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	6123      	str	r3, [r4, #16]
 8007a60:	4665      	mov	r5, ip
 8007a62:	e7b9      	b.n	80079d8 <_printf_i+0x118>
 8007a64:	6813      	ldr	r3, [r2, #0]
 8007a66:	1d19      	adds	r1, r3, #4
 8007a68:	6011      	str	r1, [r2, #0]
 8007a6a:	681d      	ldr	r5, [r3, #0]
 8007a6c:	6862      	ldr	r2, [r4, #4]
 8007a6e:	2100      	movs	r1, #0
 8007a70:	4628      	mov	r0, r5
 8007a72:	f7f8 fbb5 	bl	80001e0 <memchr>
 8007a76:	b108      	cbz	r0, 8007a7c <_printf_i+0x1bc>
 8007a78:	1b40      	subs	r0, r0, r5
 8007a7a:	6060      	str	r0, [r4, #4]
 8007a7c:	6863      	ldr	r3, [r4, #4]
 8007a7e:	6123      	str	r3, [r4, #16]
 8007a80:	2300      	movs	r3, #0
 8007a82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a86:	e7a7      	b.n	80079d8 <_printf_i+0x118>
 8007a88:	6923      	ldr	r3, [r4, #16]
 8007a8a:	462a      	mov	r2, r5
 8007a8c:	4639      	mov	r1, r7
 8007a8e:	4630      	mov	r0, r6
 8007a90:	47c0      	blx	r8
 8007a92:	3001      	adds	r0, #1
 8007a94:	d0aa      	beq.n	80079ec <_printf_i+0x12c>
 8007a96:	6823      	ldr	r3, [r4, #0]
 8007a98:	079b      	lsls	r3, r3, #30
 8007a9a:	d413      	bmi.n	8007ac4 <_printf_i+0x204>
 8007a9c:	68e0      	ldr	r0, [r4, #12]
 8007a9e:	9b03      	ldr	r3, [sp, #12]
 8007aa0:	4298      	cmp	r0, r3
 8007aa2:	bfb8      	it	lt
 8007aa4:	4618      	movlt	r0, r3
 8007aa6:	e7a3      	b.n	80079f0 <_printf_i+0x130>
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	464a      	mov	r2, r9
 8007aac:	4639      	mov	r1, r7
 8007aae:	4630      	mov	r0, r6
 8007ab0:	47c0      	blx	r8
 8007ab2:	3001      	adds	r0, #1
 8007ab4:	d09a      	beq.n	80079ec <_printf_i+0x12c>
 8007ab6:	3501      	adds	r5, #1
 8007ab8:	68e3      	ldr	r3, [r4, #12]
 8007aba:	9a03      	ldr	r2, [sp, #12]
 8007abc:	1a9b      	subs	r3, r3, r2
 8007abe:	42ab      	cmp	r3, r5
 8007ac0:	dcf2      	bgt.n	8007aa8 <_printf_i+0x1e8>
 8007ac2:	e7eb      	b.n	8007a9c <_printf_i+0x1dc>
 8007ac4:	2500      	movs	r5, #0
 8007ac6:	f104 0919 	add.w	r9, r4, #25
 8007aca:	e7f5      	b.n	8007ab8 <_printf_i+0x1f8>
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d1ac      	bne.n	8007a2a <_printf_i+0x16a>
 8007ad0:	7803      	ldrb	r3, [r0, #0]
 8007ad2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007ad6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ada:	e76c      	b.n	80079b6 <_printf_i+0xf6>
 8007adc:	0800a8ae 	.word	0x0800a8ae
 8007ae0:	0800a8bf 	.word	0x0800a8bf

08007ae4 <iprintf>:
 8007ae4:	b40f      	push	{r0, r1, r2, r3}
 8007ae6:	4b0a      	ldr	r3, [pc, #40]	; (8007b10 <iprintf+0x2c>)
 8007ae8:	b513      	push	{r0, r1, r4, lr}
 8007aea:	681c      	ldr	r4, [r3, #0]
 8007aec:	b124      	cbz	r4, 8007af8 <iprintf+0x14>
 8007aee:	69a3      	ldr	r3, [r4, #24]
 8007af0:	b913      	cbnz	r3, 8007af8 <iprintf+0x14>
 8007af2:	4620      	mov	r0, r4
 8007af4:	f001 f91c 	bl	8008d30 <__sinit>
 8007af8:	ab05      	add	r3, sp, #20
 8007afa:	9a04      	ldr	r2, [sp, #16]
 8007afc:	68a1      	ldr	r1, [r4, #8]
 8007afe:	9301      	str	r3, [sp, #4]
 8007b00:	4620      	mov	r0, r4
 8007b02:	f001 fddf 	bl	80096c4 <_vfiprintf_r>
 8007b06:	b002      	add	sp, #8
 8007b08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b0c:	b004      	add	sp, #16
 8007b0e:	4770      	bx	lr
 8007b10:	20000014 	.word	0x20000014

08007b14 <_puts_r>:
 8007b14:	b570      	push	{r4, r5, r6, lr}
 8007b16:	460e      	mov	r6, r1
 8007b18:	4605      	mov	r5, r0
 8007b1a:	b118      	cbz	r0, 8007b24 <_puts_r+0x10>
 8007b1c:	6983      	ldr	r3, [r0, #24]
 8007b1e:	b90b      	cbnz	r3, 8007b24 <_puts_r+0x10>
 8007b20:	f001 f906 	bl	8008d30 <__sinit>
 8007b24:	69ab      	ldr	r3, [r5, #24]
 8007b26:	68ac      	ldr	r4, [r5, #8]
 8007b28:	b913      	cbnz	r3, 8007b30 <_puts_r+0x1c>
 8007b2a:	4628      	mov	r0, r5
 8007b2c:	f001 f900 	bl	8008d30 <__sinit>
 8007b30:	4b23      	ldr	r3, [pc, #140]	; (8007bc0 <_puts_r+0xac>)
 8007b32:	429c      	cmp	r4, r3
 8007b34:	d117      	bne.n	8007b66 <_puts_r+0x52>
 8007b36:	686c      	ldr	r4, [r5, #4]
 8007b38:	89a3      	ldrh	r3, [r4, #12]
 8007b3a:	071b      	lsls	r3, r3, #28
 8007b3c:	d51d      	bpl.n	8007b7a <_puts_r+0x66>
 8007b3e:	6923      	ldr	r3, [r4, #16]
 8007b40:	b1db      	cbz	r3, 8007b7a <_puts_r+0x66>
 8007b42:	3e01      	subs	r6, #1
 8007b44:	68a3      	ldr	r3, [r4, #8]
 8007b46:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007b4a:	3b01      	subs	r3, #1
 8007b4c:	60a3      	str	r3, [r4, #8]
 8007b4e:	b9e9      	cbnz	r1, 8007b8c <_puts_r+0x78>
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	da2e      	bge.n	8007bb2 <_puts_r+0x9e>
 8007b54:	4622      	mov	r2, r4
 8007b56:	210a      	movs	r1, #10
 8007b58:	4628      	mov	r0, r5
 8007b5a:	f000 f8f5 	bl	8007d48 <__swbuf_r>
 8007b5e:	3001      	adds	r0, #1
 8007b60:	d011      	beq.n	8007b86 <_puts_r+0x72>
 8007b62:	200a      	movs	r0, #10
 8007b64:	e011      	b.n	8007b8a <_puts_r+0x76>
 8007b66:	4b17      	ldr	r3, [pc, #92]	; (8007bc4 <_puts_r+0xb0>)
 8007b68:	429c      	cmp	r4, r3
 8007b6a:	d101      	bne.n	8007b70 <_puts_r+0x5c>
 8007b6c:	68ac      	ldr	r4, [r5, #8]
 8007b6e:	e7e3      	b.n	8007b38 <_puts_r+0x24>
 8007b70:	4b15      	ldr	r3, [pc, #84]	; (8007bc8 <_puts_r+0xb4>)
 8007b72:	429c      	cmp	r4, r3
 8007b74:	bf08      	it	eq
 8007b76:	68ec      	ldreq	r4, [r5, #12]
 8007b78:	e7de      	b.n	8007b38 <_puts_r+0x24>
 8007b7a:	4621      	mov	r1, r4
 8007b7c:	4628      	mov	r0, r5
 8007b7e:	f000 f935 	bl	8007dec <__swsetup_r>
 8007b82:	2800      	cmp	r0, #0
 8007b84:	d0dd      	beq.n	8007b42 <_puts_r+0x2e>
 8007b86:	f04f 30ff 	mov.w	r0, #4294967295
 8007b8a:	bd70      	pop	{r4, r5, r6, pc}
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	da04      	bge.n	8007b9a <_puts_r+0x86>
 8007b90:	69a2      	ldr	r2, [r4, #24]
 8007b92:	429a      	cmp	r2, r3
 8007b94:	dc06      	bgt.n	8007ba4 <_puts_r+0x90>
 8007b96:	290a      	cmp	r1, #10
 8007b98:	d004      	beq.n	8007ba4 <_puts_r+0x90>
 8007b9a:	6823      	ldr	r3, [r4, #0]
 8007b9c:	1c5a      	adds	r2, r3, #1
 8007b9e:	6022      	str	r2, [r4, #0]
 8007ba0:	7019      	strb	r1, [r3, #0]
 8007ba2:	e7cf      	b.n	8007b44 <_puts_r+0x30>
 8007ba4:	4622      	mov	r2, r4
 8007ba6:	4628      	mov	r0, r5
 8007ba8:	f000 f8ce 	bl	8007d48 <__swbuf_r>
 8007bac:	3001      	adds	r0, #1
 8007bae:	d1c9      	bne.n	8007b44 <_puts_r+0x30>
 8007bb0:	e7e9      	b.n	8007b86 <_puts_r+0x72>
 8007bb2:	6823      	ldr	r3, [r4, #0]
 8007bb4:	200a      	movs	r0, #10
 8007bb6:	1c5a      	adds	r2, r3, #1
 8007bb8:	6022      	str	r2, [r4, #0]
 8007bba:	7018      	strb	r0, [r3, #0]
 8007bbc:	e7e5      	b.n	8007b8a <_puts_r+0x76>
 8007bbe:	bf00      	nop
 8007bc0:	0800a900 	.word	0x0800a900
 8007bc4:	0800a920 	.word	0x0800a920
 8007bc8:	0800a8e0 	.word	0x0800a8e0

08007bcc <puts>:
 8007bcc:	4b02      	ldr	r3, [pc, #8]	; (8007bd8 <puts+0xc>)
 8007bce:	4601      	mov	r1, r0
 8007bd0:	6818      	ldr	r0, [r3, #0]
 8007bd2:	f7ff bf9f 	b.w	8007b14 <_puts_r>
 8007bd6:	bf00      	nop
 8007bd8:	20000014 	.word	0x20000014

08007bdc <setbuf>:
 8007bdc:	2900      	cmp	r1, #0
 8007bde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007be2:	bf0c      	ite	eq
 8007be4:	2202      	moveq	r2, #2
 8007be6:	2200      	movne	r2, #0
 8007be8:	f000 b800 	b.w	8007bec <setvbuf>

08007bec <setvbuf>:
 8007bec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007bf0:	461d      	mov	r5, r3
 8007bf2:	4b51      	ldr	r3, [pc, #324]	; (8007d38 <setvbuf+0x14c>)
 8007bf4:	681e      	ldr	r6, [r3, #0]
 8007bf6:	4604      	mov	r4, r0
 8007bf8:	460f      	mov	r7, r1
 8007bfa:	4690      	mov	r8, r2
 8007bfc:	b126      	cbz	r6, 8007c08 <setvbuf+0x1c>
 8007bfe:	69b3      	ldr	r3, [r6, #24]
 8007c00:	b913      	cbnz	r3, 8007c08 <setvbuf+0x1c>
 8007c02:	4630      	mov	r0, r6
 8007c04:	f001 f894 	bl	8008d30 <__sinit>
 8007c08:	4b4c      	ldr	r3, [pc, #304]	; (8007d3c <setvbuf+0x150>)
 8007c0a:	429c      	cmp	r4, r3
 8007c0c:	d152      	bne.n	8007cb4 <setvbuf+0xc8>
 8007c0e:	6874      	ldr	r4, [r6, #4]
 8007c10:	f1b8 0f02 	cmp.w	r8, #2
 8007c14:	d006      	beq.n	8007c24 <setvbuf+0x38>
 8007c16:	f1b8 0f01 	cmp.w	r8, #1
 8007c1a:	f200 8089 	bhi.w	8007d30 <setvbuf+0x144>
 8007c1e:	2d00      	cmp	r5, #0
 8007c20:	f2c0 8086 	blt.w	8007d30 <setvbuf+0x144>
 8007c24:	4621      	mov	r1, r4
 8007c26:	4630      	mov	r0, r6
 8007c28:	f001 f818 	bl	8008c5c <_fflush_r>
 8007c2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c2e:	b141      	cbz	r1, 8007c42 <setvbuf+0x56>
 8007c30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c34:	4299      	cmp	r1, r3
 8007c36:	d002      	beq.n	8007c3e <setvbuf+0x52>
 8007c38:	4630      	mov	r0, r6
 8007c3a:	f001 fc71 	bl	8009520 <_free_r>
 8007c3e:	2300      	movs	r3, #0
 8007c40:	6363      	str	r3, [r4, #52]	; 0x34
 8007c42:	2300      	movs	r3, #0
 8007c44:	61a3      	str	r3, [r4, #24]
 8007c46:	6063      	str	r3, [r4, #4]
 8007c48:	89a3      	ldrh	r3, [r4, #12]
 8007c4a:	061b      	lsls	r3, r3, #24
 8007c4c:	d503      	bpl.n	8007c56 <setvbuf+0x6a>
 8007c4e:	6921      	ldr	r1, [r4, #16]
 8007c50:	4630      	mov	r0, r6
 8007c52:	f001 fc65 	bl	8009520 <_free_r>
 8007c56:	89a3      	ldrh	r3, [r4, #12]
 8007c58:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8007c5c:	f023 0303 	bic.w	r3, r3, #3
 8007c60:	f1b8 0f02 	cmp.w	r8, #2
 8007c64:	81a3      	strh	r3, [r4, #12]
 8007c66:	d05d      	beq.n	8007d24 <setvbuf+0x138>
 8007c68:	ab01      	add	r3, sp, #4
 8007c6a:	466a      	mov	r2, sp
 8007c6c:	4621      	mov	r1, r4
 8007c6e:	4630      	mov	r0, r6
 8007c70:	f001 f8f6 	bl	8008e60 <__swhatbuf_r>
 8007c74:	89a3      	ldrh	r3, [r4, #12]
 8007c76:	4318      	orrs	r0, r3
 8007c78:	81a0      	strh	r0, [r4, #12]
 8007c7a:	bb2d      	cbnz	r5, 8007cc8 <setvbuf+0xdc>
 8007c7c:	9d00      	ldr	r5, [sp, #0]
 8007c7e:	4628      	mov	r0, r5
 8007c80:	f001 f952 	bl	8008f28 <malloc>
 8007c84:	4607      	mov	r7, r0
 8007c86:	2800      	cmp	r0, #0
 8007c88:	d14e      	bne.n	8007d28 <setvbuf+0x13c>
 8007c8a:	f8dd 9000 	ldr.w	r9, [sp]
 8007c8e:	45a9      	cmp	r9, r5
 8007c90:	d13c      	bne.n	8007d0c <setvbuf+0x120>
 8007c92:	f04f 30ff 	mov.w	r0, #4294967295
 8007c96:	89a3      	ldrh	r3, [r4, #12]
 8007c98:	f043 0302 	orr.w	r3, r3, #2
 8007c9c:	81a3      	strh	r3, [r4, #12]
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	60a3      	str	r3, [r4, #8]
 8007ca2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007ca6:	6023      	str	r3, [r4, #0]
 8007ca8:	6123      	str	r3, [r4, #16]
 8007caa:	2301      	movs	r3, #1
 8007cac:	6163      	str	r3, [r4, #20]
 8007cae:	b003      	add	sp, #12
 8007cb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007cb4:	4b22      	ldr	r3, [pc, #136]	; (8007d40 <setvbuf+0x154>)
 8007cb6:	429c      	cmp	r4, r3
 8007cb8:	d101      	bne.n	8007cbe <setvbuf+0xd2>
 8007cba:	68b4      	ldr	r4, [r6, #8]
 8007cbc:	e7a8      	b.n	8007c10 <setvbuf+0x24>
 8007cbe:	4b21      	ldr	r3, [pc, #132]	; (8007d44 <setvbuf+0x158>)
 8007cc0:	429c      	cmp	r4, r3
 8007cc2:	bf08      	it	eq
 8007cc4:	68f4      	ldreq	r4, [r6, #12]
 8007cc6:	e7a3      	b.n	8007c10 <setvbuf+0x24>
 8007cc8:	2f00      	cmp	r7, #0
 8007cca:	d0d8      	beq.n	8007c7e <setvbuf+0x92>
 8007ccc:	69b3      	ldr	r3, [r6, #24]
 8007cce:	b913      	cbnz	r3, 8007cd6 <setvbuf+0xea>
 8007cd0:	4630      	mov	r0, r6
 8007cd2:	f001 f82d 	bl	8008d30 <__sinit>
 8007cd6:	f1b8 0f01 	cmp.w	r8, #1
 8007cda:	bf08      	it	eq
 8007cdc:	89a3      	ldrheq	r3, [r4, #12]
 8007cde:	6027      	str	r7, [r4, #0]
 8007ce0:	bf04      	itt	eq
 8007ce2:	f043 0301 	orreq.w	r3, r3, #1
 8007ce6:	81a3      	strheq	r3, [r4, #12]
 8007ce8:	89a3      	ldrh	r3, [r4, #12]
 8007cea:	f013 0008 	ands.w	r0, r3, #8
 8007cee:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8007cf2:	d01b      	beq.n	8007d2c <setvbuf+0x140>
 8007cf4:	f013 0001 	ands.w	r0, r3, #1
 8007cf8:	bf18      	it	ne
 8007cfa:	426d      	negne	r5, r5
 8007cfc:	f04f 0300 	mov.w	r3, #0
 8007d00:	bf1d      	ittte	ne
 8007d02:	60a3      	strne	r3, [r4, #8]
 8007d04:	61a5      	strne	r5, [r4, #24]
 8007d06:	4618      	movne	r0, r3
 8007d08:	60a5      	streq	r5, [r4, #8]
 8007d0a:	e7d0      	b.n	8007cae <setvbuf+0xc2>
 8007d0c:	4648      	mov	r0, r9
 8007d0e:	f001 f90b 	bl	8008f28 <malloc>
 8007d12:	4607      	mov	r7, r0
 8007d14:	2800      	cmp	r0, #0
 8007d16:	d0bc      	beq.n	8007c92 <setvbuf+0xa6>
 8007d18:	89a3      	ldrh	r3, [r4, #12]
 8007d1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d1e:	81a3      	strh	r3, [r4, #12]
 8007d20:	464d      	mov	r5, r9
 8007d22:	e7d3      	b.n	8007ccc <setvbuf+0xe0>
 8007d24:	2000      	movs	r0, #0
 8007d26:	e7b6      	b.n	8007c96 <setvbuf+0xaa>
 8007d28:	46a9      	mov	r9, r5
 8007d2a:	e7f5      	b.n	8007d18 <setvbuf+0x12c>
 8007d2c:	60a0      	str	r0, [r4, #8]
 8007d2e:	e7be      	b.n	8007cae <setvbuf+0xc2>
 8007d30:	f04f 30ff 	mov.w	r0, #4294967295
 8007d34:	e7bb      	b.n	8007cae <setvbuf+0xc2>
 8007d36:	bf00      	nop
 8007d38:	20000014 	.word	0x20000014
 8007d3c:	0800a900 	.word	0x0800a900
 8007d40:	0800a920 	.word	0x0800a920
 8007d44:	0800a8e0 	.word	0x0800a8e0

08007d48 <__swbuf_r>:
 8007d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d4a:	460e      	mov	r6, r1
 8007d4c:	4614      	mov	r4, r2
 8007d4e:	4605      	mov	r5, r0
 8007d50:	b118      	cbz	r0, 8007d5a <__swbuf_r+0x12>
 8007d52:	6983      	ldr	r3, [r0, #24]
 8007d54:	b90b      	cbnz	r3, 8007d5a <__swbuf_r+0x12>
 8007d56:	f000 ffeb 	bl	8008d30 <__sinit>
 8007d5a:	4b21      	ldr	r3, [pc, #132]	; (8007de0 <__swbuf_r+0x98>)
 8007d5c:	429c      	cmp	r4, r3
 8007d5e:	d12a      	bne.n	8007db6 <__swbuf_r+0x6e>
 8007d60:	686c      	ldr	r4, [r5, #4]
 8007d62:	69a3      	ldr	r3, [r4, #24]
 8007d64:	60a3      	str	r3, [r4, #8]
 8007d66:	89a3      	ldrh	r3, [r4, #12]
 8007d68:	071a      	lsls	r2, r3, #28
 8007d6a:	d52e      	bpl.n	8007dca <__swbuf_r+0x82>
 8007d6c:	6923      	ldr	r3, [r4, #16]
 8007d6e:	b363      	cbz	r3, 8007dca <__swbuf_r+0x82>
 8007d70:	6923      	ldr	r3, [r4, #16]
 8007d72:	6820      	ldr	r0, [r4, #0]
 8007d74:	1ac0      	subs	r0, r0, r3
 8007d76:	6963      	ldr	r3, [r4, #20]
 8007d78:	b2f6      	uxtb	r6, r6
 8007d7a:	4283      	cmp	r3, r0
 8007d7c:	4637      	mov	r7, r6
 8007d7e:	dc04      	bgt.n	8007d8a <__swbuf_r+0x42>
 8007d80:	4621      	mov	r1, r4
 8007d82:	4628      	mov	r0, r5
 8007d84:	f000 ff6a 	bl	8008c5c <_fflush_r>
 8007d88:	bb28      	cbnz	r0, 8007dd6 <__swbuf_r+0x8e>
 8007d8a:	68a3      	ldr	r3, [r4, #8]
 8007d8c:	3b01      	subs	r3, #1
 8007d8e:	60a3      	str	r3, [r4, #8]
 8007d90:	6823      	ldr	r3, [r4, #0]
 8007d92:	1c5a      	adds	r2, r3, #1
 8007d94:	6022      	str	r2, [r4, #0]
 8007d96:	701e      	strb	r6, [r3, #0]
 8007d98:	6963      	ldr	r3, [r4, #20]
 8007d9a:	3001      	adds	r0, #1
 8007d9c:	4283      	cmp	r3, r0
 8007d9e:	d004      	beq.n	8007daa <__swbuf_r+0x62>
 8007da0:	89a3      	ldrh	r3, [r4, #12]
 8007da2:	07db      	lsls	r3, r3, #31
 8007da4:	d519      	bpl.n	8007dda <__swbuf_r+0x92>
 8007da6:	2e0a      	cmp	r6, #10
 8007da8:	d117      	bne.n	8007dda <__swbuf_r+0x92>
 8007daa:	4621      	mov	r1, r4
 8007dac:	4628      	mov	r0, r5
 8007dae:	f000 ff55 	bl	8008c5c <_fflush_r>
 8007db2:	b190      	cbz	r0, 8007dda <__swbuf_r+0x92>
 8007db4:	e00f      	b.n	8007dd6 <__swbuf_r+0x8e>
 8007db6:	4b0b      	ldr	r3, [pc, #44]	; (8007de4 <__swbuf_r+0x9c>)
 8007db8:	429c      	cmp	r4, r3
 8007dba:	d101      	bne.n	8007dc0 <__swbuf_r+0x78>
 8007dbc:	68ac      	ldr	r4, [r5, #8]
 8007dbe:	e7d0      	b.n	8007d62 <__swbuf_r+0x1a>
 8007dc0:	4b09      	ldr	r3, [pc, #36]	; (8007de8 <__swbuf_r+0xa0>)
 8007dc2:	429c      	cmp	r4, r3
 8007dc4:	bf08      	it	eq
 8007dc6:	68ec      	ldreq	r4, [r5, #12]
 8007dc8:	e7cb      	b.n	8007d62 <__swbuf_r+0x1a>
 8007dca:	4621      	mov	r1, r4
 8007dcc:	4628      	mov	r0, r5
 8007dce:	f000 f80d 	bl	8007dec <__swsetup_r>
 8007dd2:	2800      	cmp	r0, #0
 8007dd4:	d0cc      	beq.n	8007d70 <__swbuf_r+0x28>
 8007dd6:	f04f 37ff 	mov.w	r7, #4294967295
 8007dda:	4638      	mov	r0, r7
 8007ddc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007dde:	bf00      	nop
 8007de0:	0800a900 	.word	0x0800a900
 8007de4:	0800a920 	.word	0x0800a920
 8007de8:	0800a8e0 	.word	0x0800a8e0

08007dec <__swsetup_r>:
 8007dec:	4b32      	ldr	r3, [pc, #200]	; (8007eb8 <__swsetup_r+0xcc>)
 8007dee:	b570      	push	{r4, r5, r6, lr}
 8007df0:	681d      	ldr	r5, [r3, #0]
 8007df2:	4606      	mov	r6, r0
 8007df4:	460c      	mov	r4, r1
 8007df6:	b125      	cbz	r5, 8007e02 <__swsetup_r+0x16>
 8007df8:	69ab      	ldr	r3, [r5, #24]
 8007dfa:	b913      	cbnz	r3, 8007e02 <__swsetup_r+0x16>
 8007dfc:	4628      	mov	r0, r5
 8007dfe:	f000 ff97 	bl	8008d30 <__sinit>
 8007e02:	4b2e      	ldr	r3, [pc, #184]	; (8007ebc <__swsetup_r+0xd0>)
 8007e04:	429c      	cmp	r4, r3
 8007e06:	d10f      	bne.n	8007e28 <__swsetup_r+0x3c>
 8007e08:	686c      	ldr	r4, [r5, #4]
 8007e0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e0e:	b29a      	uxth	r2, r3
 8007e10:	0715      	lsls	r5, r2, #28
 8007e12:	d42c      	bmi.n	8007e6e <__swsetup_r+0x82>
 8007e14:	06d0      	lsls	r0, r2, #27
 8007e16:	d411      	bmi.n	8007e3c <__swsetup_r+0x50>
 8007e18:	2209      	movs	r2, #9
 8007e1a:	6032      	str	r2, [r6, #0]
 8007e1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e20:	81a3      	strh	r3, [r4, #12]
 8007e22:	f04f 30ff 	mov.w	r0, #4294967295
 8007e26:	e03e      	b.n	8007ea6 <__swsetup_r+0xba>
 8007e28:	4b25      	ldr	r3, [pc, #148]	; (8007ec0 <__swsetup_r+0xd4>)
 8007e2a:	429c      	cmp	r4, r3
 8007e2c:	d101      	bne.n	8007e32 <__swsetup_r+0x46>
 8007e2e:	68ac      	ldr	r4, [r5, #8]
 8007e30:	e7eb      	b.n	8007e0a <__swsetup_r+0x1e>
 8007e32:	4b24      	ldr	r3, [pc, #144]	; (8007ec4 <__swsetup_r+0xd8>)
 8007e34:	429c      	cmp	r4, r3
 8007e36:	bf08      	it	eq
 8007e38:	68ec      	ldreq	r4, [r5, #12]
 8007e3a:	e7e6      	b.n	8007e0a <__swsetup_r+0x1e>
 8007e3c:	0751      	lsls	r1, r2, #29
 8007e3e:	d512      	bpl.n	8007e66 <__swsetup_r+0x7a>
 8007e40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e42:	b141      	cbz	r1, 8007e56 <__swsetup_r+0x6a>
 8007e44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e48:	4299      	cmp	r1, r3
 8007e4a:	d002      	beq.n	8007e52 <__swsetup_r+0x66>
 8007e4c:	4630      	mov	r0, r6
 8007e4e:	f001 fb67 	bl	8009520 <_free_r>
 8007e52:	2300      	movs	r3, #0
 8007e54:	6363      	str	r3, [r4, #52]	; 0x34
 8007e56:	89a3      	ldrh	r3, [r4, #12]
 8007e58:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007e5c:	81a3      	strh	r3, [r4, #12]
 8007e5e:	2300      	movs	r3, #0
 8007e60:	6063      	str	r3, [r4, #4]
 8007e62:	6923      	ldr	r3, [r4, #16]
 8007e64:	6023      	str	r3, [r4, #0]
 8007e66:	89a3      	ldrh	r3, [r4, #12]
 8007e68:	f043 0308 	orr.w	r3, r3, #8
 8007e6c:	81a3      	strh	r3, [r4, #12]
 8007e6e:	6923      	ldr	r3, [r4, #16]
 8007e70:	b94b      	cbnz	r3, 8007e86 <__swsetup_r+0x9a>
 8007e72:	89a3      	ldrh	r3, [r4, #12]
 8007e74:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007e78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e7c:	d003      	beq.n	8007e86 <__swsetup_r+0x9a>
 8007e7e:	4621      	mov	r1, r4
 8007e80:	4630      	mov	r0, r6
 8007e82:	f001 f811 	bl	8008ea8 <__smakebuf_r>
 8007e86:	89a2      	ldrh	r2, [r4, #12]
 8007e88:	f012 0301 	ands.w	r3, r2, #1
 8007e8c:	d00c      	beq.n	8007ea8 <__swsetup_r+0xbc>
 8007e8e:	2300      	movs	r3, #0
 8007e90:	60a3      	str	r3, [r4, #8]
 8007e92:	6963      	ldr	r3, [r4, #20]
 8007e94:	425b      	negs	r3, r3
 8007e96:	61a3      	str	r3, [r4, #24]
 8007e98:	6923      	ldr	r3, [r4, #16]
 8007e9a:	b953      	cbnz	r3, 8007eb2 <__swsetup_r+0xc6>
 8007e9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ea0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007ea4:	d1ba      	bne.n	8007e1c <__swsetup_r+0x30>
 8007ea6:	bd70      	pop	{r4, r5, r6, pc}
 8007ea8:	0792      	lsls	r2, r2, #30
 8007eaa:	bf58      	it	pl
 8007eac:	6963      	ldrpl	r3, [r4, #20]
 8007eae:	60a3      	str	r3, [r4, #8]
 8007eb0:	e7f2      	b.n	8007e98 <__swsetup_r+0xac>
 8007eb2:	2000      	movs	r0, #0
 8007eb4:	e7f7      	b.n	8007ea6 <__swsetup_r+0xba>
 8007eb6:	bf00      	nop
 8007eb8:	20000014 	.word	0x20000014
 8007ebc:	0800a900 	.word	0x0800a900
 8007ec0:	0800a920 	.word	0x0800a920
 8007ec4:	0800a8e0 	.word	0x0800a8e0

08007ec8 <quorem>:
 8007ec8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ecc:	6903      	ldr	r3, [r0, #16]
 8007ece:	690c      	ldr	r4, [r1, #16]
 8007ed0:	42a3      	cmp	r3, r4
 8007ed2:	4680      	mov	r8, r0
 8007ed4:	f2c0 8082 	blt.w	8007fdc <quorem+0x114>
 8007ed8:	3c01      	subs	r4, #1
 8007eda:	f101 0714 	add.w	r7, r1, #20
 8007ede:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8007ee2:	f100 0614 	add.w	r6, r0, #20
 8007ee6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8007eea:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8007eee:	eb06 030c 	add.w	r3, r6, ip
 8007ef2:	3501      	adds	r5, #1
 8007ef4:	eb07 090c 	add.w	r9, r7, ip
 8007ef8:	9301      	str	r3, [sp, #4]
 8007efa:	fbb0 f5f5 	udiv	r5, r0, r5
 8007efe:	b395      	cbz	r5, 8007f66 <quorem+0x9e>
 8007f00:	f04f 0a00 	mov.w	sl, #0
 8007f04:	4638      	mov	r0, r7
 8007f06:	46b6      	mov	lr, r6
 8007f08:	46d3      	mov	fp, sl
 8007f0a:	f850 2b04 	ldr.w	r2, [r0], #4
 8007f0e:	b293      	uxth	r3, r2
 8007f10:	fb05 a303 	mla	r3, r5, r3, sl
 8007f14:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007f18:	b29b      	uxth	r3, r3
 8007f1a:	ebab 0303 	sub.w	r3, fp, r3
 8007f1e:	0c12      	lsrs	r2, r2, #16
 8007f20:	f8de b000 	ldr.w	fp, [lr]
 8007f24:	fb05 a202 	mla	r2, r5, r2, sl
 8007f28:	fa13 f38b 	uxtah	r3, r3, fp
 8007f2c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007f30:	fa1f fb82 	uxth.w	fp, r2
 8007f34:	f8de 2000 	ldr.w	r2, [lr]
 8007f38:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007f3c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007f40:	b29b      	uxth	r3, r3
 8007f42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f46:	4581      	cmp	r9, r0
 8007f48:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007f4c:	f84e 3b04 	str.w	r3, [lr], #4
 8007f50:	d2db      	bcs.n	8007f0a <quorem+0x42>
 8007f52:	f856 300c 	ldr.w	r3, [r6, ip]
 8007f56:	b933      	cbnz	r3, 8007f66 <quorem+0x9e>
 8007f58:	9b01      	ldr	r3, [sp, #4]
 8007f5a:	3b04      	subs	r3, #4
 8007f5c:	429e      	cmp	r6, r3
 8007f5e:	461a      	mov	r2, r3
 8007f60:	d330      	bcc.n	8007fc4 <quorem+0xfc>
 8007f62:	f8c8 4010 	str.w	r4, [r8, #16]
 8007f66:	4640      	mov	r0, r8
 8007f68:	f001 fa06 	bl	8009378 <__mcmp>
 8007f6c:	2800      	cmp	r0, #0
 8007f6e:	db25      	blt.n	8007fbc <quorem+0xf4>
 8007f70:	3501      	adds	r5, #1
 8007f72:	4630      	mov	r0, r6
 8007f74:	f04f 0c00 	mov.w	ip, #0
 8007f78:	f857 2b04 	ldr.w	r2, [r7], #4
 8007f7c:	f8d0 e000 	ldr.w	lr, [r0]
 8007f80:	b293      	uxth	r3, r2
 8007f82:	ebac 0303 	sub.w	r3, ip, r3
 8007f86:	0c12      	lsrs	r2, r2, #16
 8007f88:	fa13 f38e 	uxtah	r3, r3, lr
 8007f8c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007f90:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007f94:	b29b      	uxth	r3, r3
 8007f96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f9a:	45b9      	cmp	r9, r7
 8007f9c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007fa0:	f840 3b04 	str.w	r3, [r0], #4
 8007fa4:	d2e8      	bcs.n	8007f78 <quorem+0xb0>
 8007fa6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007faa:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007fae:	b92a      	cbnz	r2, 8007fbc <quorem+0xf4>
 8007fb0:	3b04      	subs	r3, #4
 8007fb2:	429e      	cmp	r6, r3
 8007fb4:	461a      	mov	r2, r3
 8007fb6:	d30b      	bcc.n	8007fd0 <quorem+0x108>
 8007fb8:	f8c8 4010 	str.w	r4, [r8, #16]
 8007fbc:	4628      	mov	r0, r5
 8007fbe:	b003      	add	sp, #12
 8007fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fc4:	6812      	ldr	r2, [r2, #0]
 8007fc6:	3b04      	subs	r3, #4
 8007fc8:	2a00      	cmp	r2, #0
 8007fca:	d1ca      	bne.n	8007f62 <quorem+0x9a>
 8007fcc:	3c01      	subs	r4, #1
 8007fce:	e7c5      	b.n	8007f5c <quorem+0x94>
 8007fd0:	6812      	ldr	r2, [r2, #0]
 8007fd2:	3b04      	subs	r3, #4
 8007fd4:	2a00      	cmp	r2, #0
 8007fd6:	d1ef      	bne.n	8007fb8 <quorem+0xf0>
 8007fd8:	3c01      	subs	r4, #1
 8007fda:	e7ea      	b.n	8007fb2 <quorem+0xea>
 8007fdc:	2000      	movs	r0, #0
 8007fde:	e7ee      	b.n	8007fbe <quorem+0xf6>

08007fe0 <_dtoa_r>:
 8007fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fe4:	ec57 6b10 	vmov	r6, r7, d0
 8007fe8:	b097      	sub	sp, #92	; 0x5c
 8007fea:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007fec:	9106      	str	r1, [sp, #24]
 8007fee:	4604      	mov	r4, r0
 8007ff0:	920b      	str	r2, [sp, #44]	; 0x2c
 8007ff2:	9312      	str	r3, [sp, #72]	; 0x48
 8007ff4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007ff8:	e9cd 6700 	strd	r6, r7, [sp]
 8007ffc:	b93d      	cbnz	r5, 800800e <_dtoa_r+0x2e>
 8007ffe:	2010      	movs	r0, #16
 8008000:	f000 ff92 	bl	8008f28 <malloc>
 8008004:	6260      	str	r0, [r4, #36]	; 0x24
 8008006:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800800a:	6005      	str	r5, [r0, #0]
 800800c:	60c5      	str	r5, [r0, #12]
 800800e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008010:	6819      	ldr	r1, [r3, #0]
 8008012:	b151      	cbz	r1, 800802a <_dtoa_r+0x4a>
 8008014:	685a      	ldr	r2, [r3, #4]
 8008016:	604a      	str	r2, [r1, #4]
 8008018:	2301      	movs	r3, #1
 800801a:	4093      	lsls	r3, r2
 800801c:	608b      	str	r3, [r1, #8]
 800801e:	4620      	mov	r0, r4
 8008020:	f000 ffc9 	bl	8008fb6 <_Bfree>
 8008024:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008026:	2200      	movs	r2, #0
 8008028:	601a      	str	r2, [r3, #0]
 800802a:	1e3b      	subs	r3, r7, #0
 800802c:	bfbb      	ittet	lt
 800802e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008032:	9301      	strlt	r3, [sp, #4]
 8008034:	2300      	movge	r3, #0
 8008036:	2201      	movlt	r2, #1
 8008038:	bfac      	ite	ge
 800803a:	f8c8 3000 	strge.w	r3, [r8]
 800803e:	f8c8 2000 	strlt.w	r2, [r8]
 8008042:	4baf      	ldr	r3, [pc, #700]	; (8008300 <_dtoa_r+0x320>)
 8008044:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008048:	ea33 0308 	bics.w	r3, r3, r8
 800804c:	d114      	bne.n	8008078 <_dtoa_r+0x98>
 800804e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008050:	f242 730f 	movw	r3, #9999	; 0x270f
 8008054:	6013      	str	r3, [r2, #0]
 8008056:	9b00      	ldr	r3, [sp, #0]
 8008058:	b923      	cbnz	r3, 8008064 <_dtoa_r+0x84>
 800805a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800805e:	2800      	cmp	r0, #0
 8008060:	f000 8542 	beq.w	8008ae8 <_dtoa_r+0xb08>
 8008064:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008066:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8008314 <_dtoa_r+0x334>
 800806a:	2b00      	cmp	r3, #0
 800806c:	f000 8544 	beq.w	8008af8 <_dtoa_r+0xb18>
 8008070:	f10b 0303 	add.w	r3, fp, #3
 8008074:	f000 bd3e 	b.w	8008af4 <_dtoa_r+0xb14>
 8008078:	e9dd 6700 	ldrd	r6, r7, [sp]
 800807c:	2200      	movs	r2, #0
 800807e:	2300      	movs	r3, #0
 8008080:	4630      	mov	r0, r6
 8008082:	4639      	mov	r1, r7
 8008084:	f7f8 fd20 	bl	8000ac8 <__aeabi_dcmpeq>
 8008088:	4681      	mov	r9, r0
 800808a:	b168      	cbz	r0, 80080a8 <_dtoa_r+0xc8>
 800808c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800808e:	2301      	movs	r3, #1
 8008090:	6013      	str	r3, [r2, #0]
 8008092:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008094:	2b00      	cmp	r3, #0
 8008096:	f000 8524 	beq.w	8008ae2 <_dtoa_r+0xb02>
 800809a:	4b9a      	ldr	r3, [pc, #616]	; (8008304 <_dtoa_r+0x324>)
 800809c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800809e:	f103 3bff 	add.w	fp, r3, #4294967295
 80080a2:	6013      	str	r3, [r2, #0]
 80080a4:	f000 bd28 	b.w	8008af8 <_dtoa_r+0xb18>
 80080a8:	aa14      	add	r2, sp, #80	; 0x50
 80080aa:	a915      	add	r1, sp, #84	; 0x54
 80080ac:	ec47 6b10 	vmov	d0, r6, r7
 80080b0:	4620      	mov	r0, r4
 80080b2:	f001 f9d8 	bl	8009466 <__d2b>
 80080b6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80080ba:	9004      	str	r0, [sp, #16]
 80080bc:	2d00      	cmp	r5, #0
 80080be:	d07c      	beq.n	80081ba <_dtoa_r+0x1da>
 80080c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80080c4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80080c8:	46b2      	mov	sl, r6
 80080ca:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80080ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80080d2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80080d6:	2200      	movs	r2, #0
 80080d8:	4b8b      	ldr	r3, [pc, #556]	; (8008308 <_dtoa_r+0x328>)
 80080da:	4650      	mov	r0, sl
 80080dc:	4659      	mov	r1, fp
 80080de:	f7f8 f8d3 	bl	8000288 <__aeabi_dsub>
 80080e2:	a381      	add	r3, pc, #516	; (adr r3, 80082e8 <_dtoa_r+0x308>)
 80080e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e8:	f7f8 fa86 	bl	80005f8 <__aeabi_dmul>
 80080ec:	a380      	add	r3, pc, #512	; (adr r3, 80082f0 <_dtoa_r+0x310>)
 80080ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080f2:	f7f8 f8cb 	bl	800028c <__adddf3>
 80080f6:	4606      	mov	r6, r0
 80080f8:	4628      	mov	r0, r5
 80080fa:	460f      	mov	r7, r1
 80080fc:	f7f8 fa12 	bl	8000524 <__aeabi_i2d>
 8008100:	a37d      	add	r3, pc, #500	; (adr r3, 80082f8 <_dtoa_r+0x318>)
 8008102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008106:	f7f8 fa77 	bl	80005f8 <__aeabi_dmul>
 800810a:	4602      	mov	r2, r0
 800810c:	460b      	mov	r3, r1
 800810e:	4630      	mov	r0, r6
 8008110:	4639      	mov	r1, r7
 8008112:	f7f8 f8bb 	bl	800028c <__adddf3>
 8008116:	4606      	mov	r6, r0
 8008118:	460f      	mov	r7, r1
 800811a:	f7f8 fd1d 	bl	8000b58 <__aeabi_d2iz>
 800811e:	2200      	movs	r2, #0
 8008120:	4682      	mov	sl, r0
 8008122:	2300      	movs	r3, #0
 8008124:	4630      	mov	r0, r6
 8008126:	4639      	mov	r1, r7
 8008128:	f7f8 fcd8 	bl	8000adc <__aeabi_dcmplt>
 800812c:	b148      	cbz	r0, 8008142 <_dtoa_r+0x162>
 800812e:	4650      	mov	r0, sl
 8008130:	f7f8 f9f8 	bl	8000524 <__aeabi_i2d>
 8008134:	4632      	mov	r2, r6
 8008136:	463b      	mov	r3, r7
 8008138:	f7f8 fcc6 	bl	8000ac8 <__aeabi_dcmpeq>
 800813c:	b908      	cbnz	r0, 8008142 <_dtoa_r+0x162>
 800813e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008142:	f1ba 0f16 	cmp.w	sl, #22
 8008146:	d859      	bhi.n	80081fc <_dtoa_r+0x21c>
 8008148:	4970      	ldr	r1, [pc, #448]	; (800830c <_dtoa_r+0x32c>)
 800814a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800814e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008152:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008156:	f7f8 fcdf 	bl	8000b18 <__aeabi_dcmpgt>
 800815a:	2800      	cmp	r0, #0
 800815c:	d050      	beq.n	8008200 <_dtoa_r+0x220>
 800815e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008162:	2300      	movs	r3, #0
 8008164:	930f      	str	r3, [sp, #60]	; 0x3c
 8008166:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008168:	1b5d      	subs	r5, r3, r5
 800816a:	f1b5 0801 	subs.w	r8, r5, #1
 800816e:	bf49      	itett	mi
 8008170:	f1c5 0301 	rsbmi	r3, r5, #1
 8008174:	2300      	movpl	r3, #0
 8008176:	9305      	strmi	r3, [sp, #20]
 8008178:	f04f 0800 	movmi.w	r8, #0
 800817c:	bf58      	it	pl
 800817e:	9305      	strpl	r3, [sp, #20]
 8008180:	f1ba 0f00 	cmp.w	sl, #0
 8008184:	db3e      	blt.n	8008204 <_dtoa_r+0x224>
 8008186:	2300      	movs	r3, #0
 8008188:	44d0      	add	r8, sl
 800818a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800818e:	9307      	str	r3, [sp, #28]
 8008190:	9b06      	ldr	r3, [sp, #24]
 8008192:	2b09      	cmp	r3, #9
 8008194:	f200 8090 	bhi.w	80082b8 <_dtoa_r+0x2d8>
 8008198:	2b05      	cmp	r3, #5
 800819a:	bfc4      	itt	gt
 800819c:	3b04      	subgt	r3, #4
 800819e:	9306      	strgt	r3, [sp, #24]
 80081a0:	9b06      	ldr	r3, [sp, #24]
 80081a2:	f1a3 0302 	sub.w	r3, r3, #2
 80081a6:	bfcc      	ite	gt
 80081a8:	2500      	movgt	r5, #0
 80081aa:	2501      	movle	r5, #1
 80081ac:	2b03      	cmp	r3, #3
 80081ae:	f200 808f 	bhi.w	80082d0 <_dtoa_r+0x2f0>
 80081b2:	e8df f003 	tbb	[pc, r3]
 80081b6:	7f7d      	.short	0x7f7d
 80081b8:	7131      	.short	0x7131
 80081ba:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80081be:	441d      	add	r5, r3
 80081c0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80081c4:	2820      	cmp	r0, #32
 80081c6:	dd13      	ble.n	80081f0 <_dtoa_r+0x210>
 80081c8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80081cc:	9b00      	ldr	r3, [sp, #0]
 80081ce:	fa08 f800 	lsl.w	r8, r8, r0
 80081d2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80081d6:	fa23 f000 	lsr.w	r0, r3, r0
 80081da:	ea48 0000 	orr.w	r0, r8, r0
 80081de:	f7f8 f991 	bl	8000504 <__aeabi_ui2d>
 80081e2:	2301      	movs	r3, #1
 80081e4:	4682      	mov	sl, r0
 80081e6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80081ea:	3d01      	subs	r5, #1
 80081ec:	9313      	str	r3, [sp, #76]	; 0x4c
 80081ee:	e772      	b.n	80080d6 <_dtoa_r+0xf6>
 80081f0:	9b00      	ldr	r3, [sp, #0]
 80081f2:	f1c0 0020 	rsb	r0, r0, #32
 80081f6:	fa03 f000 	lsl.w	r0, r3, r0
 80081fa:	e7f0      	b.n	80081de <_dtoa_r+0x1fe>
 80081fc:	2301      	movs	r3, #1
 80081fe:	e7b1      	b.n	8008164 <_dtoa_r+0x184>
 8008200:	900f      	str	r0, [sp, #60]	; 0x3c
 8008202:	e7b0      	b.n	8008166 <_dtoa_r+0x186>
 8008204:	9b05      	ldr	r3, [sp, #20]
 8008206:	eba3 030a 	sub.w	r3, r3, sl
 800820a:	9305      	str	r3, [sp, #20]
 800820c:	f1ca 0300 	rsb	r3, sl, #0
 8008210:	9307      	str	r3, [sp, #28]
 8008212:	2300      	movs	r3, #0
 8008214:	930e      	str	r3, [sp, #56]	; 0x38
 8008216:	e7bb      	b.n	8008190 <_dtoa_r+0x1b0>
 8008218:	2301      	movs	r3, #1
 800821a:	930a      	str	r3, [sp, #40]	; 0x28
 800821c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800821e:	2b00      	cmp	r3, #0
 8008220:	dd59      	ble.n	80082d6 <_dtoa_r+0x2f6>
 8008222:	9302      	str	r3, [sp, #8]
 8008224:	4699      	mov	r9, r3
 8008226:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008228:	2200      	movs	r2, #0
 800822a:	6072      	str	r2, [r6, #4]
 800822c:	2204      	movs	r2, #4
 800822e:	f102 0014 	add.w	r0, r2, #20
 8008232:	4298      	cmp	r0, r3
 8008234:	6871      	ldr	r1, [r6, #4]
 8008236:	d953      	bls.n	80082e0 <_dtoa_r+0x300>
 8008238:	4620      	mov	r0, r4
 800823a:	f000 fe88 	bl	8008f4e <_Balloc>
 800823e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008240:	6030      	str	r0, [r6, #0]
 8008242:	f1b9 0f0e 	cmp.w	r9, #14
 8008246:	f8d3 b000 	ldr.w	fp, [r3]
 800824a:	f200 80e6 	bhi.w	800841a <_dtoa_r+0x43a>
 800824e:	2d00      	cmp	r5, #0
 8008250:	f000 80e3 	beq.w	800841a <_dtoa_r+0x43a>
 8008254:	ed9d 7b00 	vldr	d7, [sp]
 8008258:	f1ba 0f00 	cmp.w	sl, #0
 800825c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8008260:	dd74      	ble.n	800834c <_dtoa_r+0x36c>
 8008262:	4a2a      	ldr	r2, [pc, #168]	; (800830c <_dtoa_r+0x32c>)
 8008264:	f00a 030f 	and.w	r3, sl, #15
 8008268:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800826c:	ed93 7b00 	vldr	d7, [r3]
 8008270:	ea4f 162a 	mov.w	r6, sl, asr #4
 8008274:	06f0      	lsls	r0, r6, #27
 8008276:	ed8d 7b08 	vstr	d7, [sp, #32]
 800827a:	d565      	bpl.n	8008348 <_dtoa_r+0x368>
 800827c:	4b24      	ldr	r3, [pc, #144]	; (8008310 <_dtoa_r+0x330>)
 800827e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008282:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008286:	f7f8 fae1 	bl	800084c <__aeabi_ddiv>
 800828a:	e9cd 0100 	strd	r0, r1, [sp]
 800828e:	f006 060f 	and.w	r6, r6, #15
 8008292:	2503      	movs	r5, #3
 8008294:	4f1e      	ldr	r7, [pc, #120]	; (8008310 <_dtoa_r+0x330>)
 8008296:	e04c      	b.n	8008332 <_dtoa_r+0x352>
 8008298:	2301      	movs	r3, #1
 800829a:	930a      	str	r3, [sp, #40]	; 0x28
 800829c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800829e:	4453      	add	r3, sl
 80082a0:	f103 0901 	add.w	r9, r3, #1
 80082a4:	9302      	str	r3, [sp, #8]
 80082a6:	464b      	mov	r3, r9
 80082a8:	2b01      	cmp	r3, #1
 80082aa:	bfb8      	it	lt
 80082ac:	2301      	movlt	r3, #1
 80082ae:	e7ba      	b.n	8008226 <_dtoa_r+0x246>
 80082b0:	2300      	movs	r3, #0
 80082b2:	e7b2      	b.n	800821a <_dtoa_r+0x23a>
 80082b4:	2300      	movs	r3, #0
 80082b6:	e7f0      	b.n	800829a <_dtoa_r+0x2ba>
 80082b8:	2501      	movs	r5, #1
 80082ba:	2300      	movs	r3, #0
 80082bc:	9306      	str	r3, [sp, #24]
 80082be:	950a      	str	r5, [sp, #40]	; 0x28
 80082c0:	f04f 33ff 	mov.w	r3, #4294967295
 80082c4:	9302      	str	r3, [sp, #8]
 80082c6:	4699      	mov	r9, r3
 80082c8:	2200      	movs	r2, #0
 80082ca:	2312      	movs	r3, #18
 80082cc:	920b      	str	r2, [sp, #44]	; 0x2c
 80082ce:	e7aa      	b.n	8008226 <_dtoa_r+0x246>
 80082d0:	2301      	movs	r3, #1
 80082d2:	930a      	str	r3, [sp, #40]	; 0x28
 80082d4:	e7f4      	b.n	80082c0 <_dtoa_r+0x2e0>
 80082d6:	2301      	movs	r3, #1
 80082d8:	9302      	str	r3, [sp, #8]
 80082da:	4699      	mov	r9, r3
 80082dc:	461a      	mov	r2, r3
 80082de:	e7f5      	b.n	80082cc <_dtoa_r+0x2ec>
 80082e0:	3101      	adds	r1, #1
 80082e2:	6071      	str	r1, [r6, #4]
 80082e4:	0052      	lsls	r2, r2, #1
 80082e6:	e7a2      	b.n	800822e <_dtoa_r+0x24e>
 80082e8:	636f4361 	.word	0x636f4361
 80082ec:	3fd287a7 	.word	0x3fd287a7
 80082f0:	8b60c8b3 	.word	0x8b60c8b3
 80082f4:	3fc68a28 	.word	0x3fc68a28
 80082f8:	509f79fb 	.word	0x509f79fb
 80082fc:	3fd34413 	.word	0x3fd34413
 8008300:	7ff00000 	.word	0x7ff00000
 8008304:	0800a8ad 	.word	0x0800a8ad
 8008308:	3ff80000 	.word	0x3ff80000
 800830c:	0800a968 	.word	0x0800a968
 8008310:	0800a940 	.word	0x0800a940
 8008314:	0800a8d9 	.word	0x0800a8d9
 8008318:	07f1      	lsls	r1, r6, #31
 800831a:	d508      	bpl.n	800832e <_dtoa_r+0x34e>
 800831c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008320:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008324:	f7f8 f968 	bl	80005f8 <__aeabi_dmul>
 8008328:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800832c:	3501      	adds	r5, #1
 800832e:	1076      	asrs	r6, r6, #1
 8008330:	3708      	adds	r7, #8
 8008332:	2e00      	cmp	r6, #0
 8008334:	d1f0      	bne.n	8008318 <_dtoa_r+0x338>
 8008336:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800833a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800833e:	f7f8 fa85 	bl	800084c <__aeabi_ddiv>
 8008342:	e9cd 0100 	strd	r0, r1, [sp]
 8008346:	e01a      	b.n	800837e <_dtoa_r+0x39e>
 8008348:	2502      	movs	r5, #2
 800834a:	e7a3      	b.n	8008294 <_dtoa_r+0x2b4>
 800834c:	f000 80a0 	beq.w	8008490 <_dtoa_r+0x4b0>
 8008350:	f1ca 0600 	rsb	r6, sl, #0
 8008354:	4b9f      	ldr	r3, [pc, #636]	; (80085d4 <_dtoa_r+0x5f4>)
 8008356:	4fa0      	ldr	r7, [pc, #640]	; (80085d8 <_dtoa_r+0x5f8>)
 8008358:	f006 020f 	and.w	r2, r6, #15
 800835c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008364:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008368:	f7f8 f946 	bl	80005f8 <__aeabi_dmul>
 800836c:	e9cd 0100 	strd	r0, r1, [sp]
 8008370:	1136      	asrs	r6, r6, #4
 8008372:	2300      	movs	r3, #0
 8008374:	2502      	movs	r5, #2
 8008376:	2e00      	cmp	r6, #0
 8008378:	d17f      	bne.n	800847a <_dtoa_r+0x49a>
 800837a:	2b00      	cmp	r3, #0
 800837c:	d1e1      	bne.n	8008342 <_dtoa_r+0x362>
 800837e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008380:	2b00      	cmp	r3, #0
 8008382:	f000 8087 	beq.w	8008494 <_dtoa_r+0x4b4>
 8008386:	e9dd 6700 	ldrd	r6, r7, [sp]
 800838a:	2200      	movs	r2, #0
 800838c:	4b93      	ldr	r3, [pc, #588]	; (80085dc <_dtoa_r+0x5fc>)
 800838e:	4630      	mov	r0, r6
 8008390:	4639      	mov	r1, r7
 8008392:	f7f8 fba3 	bl	8000adc <__aeabi_dcmplt>
 8008396:	2800      	cmp	r0, #0
 8008398:	d07c      	beq.n	8008494 <_dtoa_r+0x4b4>
 800839a:	f1b9 0f00 	cmp.w	r9, #0
 800839e:	d079      	beq.n	8008494 <_dtoa_r+0x4b4>
 80083a0:	9b02      	ldr	r3, [sp, #8]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	dd35      	ble.n	8008412 <_dtoa_r+0x432>
 80083a6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80083aa:	9308      	str	r3, [sp, #32]
 80083ac:	4639      	mov	r1, r7
 80083ae:	2200      	movs	r2, #0
 80083b0:	4b8b      	ldr	r3, [pc, #556]	; (80085e0 <_dtoa_r+0x600>)
 80083b2:	4630      	mov	r0, r6
 80083b4:	f7f8 f920 	bl	80005f8 <__aeabi_dmul>
 80083b8:	e9cd 0100 	strd	r0, r1, [sp]
 80083bc:	9f02      	ldr	r7, [sp, #8]
 80083be:	3501      	adds	r5, #1
 80083c0:	4628      	mov	r0, r5
 80083c2:	f7f8 f8af 	bl	8000524 <__aeabi_i2d>
 80083c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80083ca:	f7f8 f915 	bl	80005f8 <__aeabi_dmul>
 80083ce:	2200      	movs	r2, #0
 80083d0:	4b84      	ldr	r3, [pc, #528]	; (80085e4 <_dtoa_r+0x604>)
 80083d2:	f7f7 ff5b 	bl	800028c <__adddf3>
 80083d6:	4605      	mov	r5, r0
 80083d8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80083dc:	2f00      	cmp	r7, #0
 80083de:	d15d      	bne.n	800849c <_dtoa_r+0x4bc>
 80083e0:	2200      	movs	r2, #0
 80083e2:	4b81      	ldr	r3, [pc, #516]	; (80085e8 <_dtoa_r+0x608>)
 80083e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80083e8:	f7f7 ff4e 	bl	8000288 <__aeabi_dsub>
 80083ec:	462a      	mov	r2, r5
 80083ee:	4633      	mov	r3, r6
 80083f0:	e9cd 0100 	strd	r0, r1, [sp]
 80083f4:	f7f8 fb90 	bl	8000b18 <__aeabi_dcmpgt>
 80083f8:	2800      	cmp	r0, #0
 80083fa:	f040 8288 	bne.w	800890e <_dtoa_r+0x92e>
 80083fe:	462a      	mov	r2, r5
 8008400:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008404:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008408:	f7f8 fb68 	bl	8000adc <__aeabi_dcmplt>
 800840c:	2800      	cmp	r0, #0
 800840e:	f040 827c 	bne.w	800890a <_dtoa_r+0x92a>
 8008412:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008416:	e9cd 2300 	strd	r2, r3, [sp]
 800841a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800841c:	2b00      	cmp	r3, #0
 800841e:	f2c0 8150 	blt.w	80086c2 <_dtoa_r+0x6e2>
 8008422:	f1ba 0f0e 	cmp.w	sl, #14
 8008426:	f300 814c 	bgt.w	80086c2 <_dtoa_r+0x6e2>
 800842a:	4b6a      	ldr	r3, [pc, #424]	; (80085d4 <_dtoa_r+0x5f4>)
 800842c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008430:	ed93 7b00 	vldr	d7, [r3]
 8008434:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008436:	2b00      	cmp	r3, #0
 8008438:	ed8d 7b02 	vstr	d7, [sp, #8]
 800843c:	f280 80d8 	bge.w	80085f0 <_dtoa_r+0x610>
 8008440:	f1b9 0f00 	cmp.w	r9, #0
 8008444:	f300 80d4 	bgt.w	80085f0 <_dtoa_r+0x610>
 8008448:	f040 825e 	bne.w	8008908 <_dtoa_r+0x928>
 800844c:	2200      	movs	r2, #0
 800844e:	4b66      	ldr	r3, [pc, #408]	; (80085e8 <_dtoa_r+0x608>)
 8008450:	ec51 0b17 	vmov	r0, r1, d7
 8008454:	f7f8 f8d0 	bl	80005f8 <__aeabi_dmul>
 8008458:	e9dd 2300 	ldrd	r2, r3, [sp]
 800845c:	f7f8 fb52 	bl	8000b04 <__aeabi_dcmpge>
 8008460:	464f      	mov	r7, r9
 8008462:	464e      	mov	r6, r9
 8008464:	2800      	cmp	r0, #0
 8008466:	f040 8234 	bne.w	80088d2 <_dtoa_r+0x8f2>
 800846a:	2331      	movs	r3, #49	; 0x31
 800846c:	f10b 0501 	add.w	r5, fp, #1
 8008470:	f88b 3000 	strb.w	r3, [fp]
 8008474:	f10a 0a01 	add.w	sl, sl, #1
 8008478:	e22f      	b.n	80088da <_dtoa_r+0x8fa>
 800847a:	07f2      	lsls	r2, r6, #31
 800847c:	d505      	bpl.n	800848a <_dtoa_r+0x4aa>
 800847e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008482:	f7f8 f8b9 	bl	80005f8 <__aeabi_dmul>
 8008486:	3501      	adds	r5, #1
 8008488:	2301      	movs	r3, #1
 800848a:	1076      	asrs	r6, r6, #1
 800848c:	3708      	adds	r7, #8
 800848e:	e772      	b.n	8008376 <_dtoa_r+0x396>
 8008490:	2502      	movs	r5, #2
 8008492:	e774      	b.n	800837e <_dtoa_r+0x39e>
 8008494:	f8cd a020 	str.w	sl, [sp, #32]
 8008498:	464f      	mov	r7, r9
 800849a:	e791      	b.n	80083c0 <_dtoa_r+0x3e0>
 800849c:	4b4d      	ldr	r3, [pc, #308]	; (80085d4 <_dtoa_r+0x5f4>)
 800849e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80084a2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80084a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d047      	beq.n	800853c <_dtoa_r+0x55c>
 80084ac:	4602      	mov	r2, r0
 80084ae:	460b      	mov	r3, r1
 80084b0:	2000      	movs	r0, #0
 80084b2:	494e      	ldr	r1, [pc, #312]	; (80085ec <_dtoa_r+0x60c>)
 80084b4:	f7f8 f9ca 	bl	800084c <__aeabi_ddiv>
 80084b8:	462a      	mov	r2, r5
 80084ba:	4633      	mov	r3, r6
 80084bc:	f7f7 fee4 	bl	8000288 <__aeabi_dsub>
 80084c0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80084c4:	465d      	mov	r5, fp
 80084c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80084ca:	f7f8 fb45 	bl	8000b58 <__aeabi_d2iz>
 80084ce:	4606      	mov	r6, r0
 80084d0:	f7f8 f828 	bl	8000524 <__aeabi_i2d>
 80084d4:	4602      	mov	r2, r0
 80084d6:	460b      	mov	r3, r1
 80084d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80084dc:	f7f7 fed4 	bl	8000288 <__aeabi_dsub>
 80084e0:	3630      	adds	r6, #48	; 0x30
 80084e2:	f805 6b01 	strb.w	r6, [r5], #1
 80084e6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80084ea:	e9cd 0100 	strd	r0, r1, [sp]
 80084ee:	f7f8 faf5 	bl	8000adc <__aeabi_dcmplt>
 80084f2:	2800      	cmp	r0, #0
 80084f4:	d163      	bne.n	80085be <_dtoa_r+0x5de>
 80084f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80084fa:	2000      	movs	r0, #0
 80084fc:	4937      	ldr	r1, [pc, #220]	; (80085dc <_dtoa_r+0x5fc>)
 80084fe:	f7f7 fec3 	bl	8000288 <__aeabi_dsub>
 8008502:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008506:	f7f8 fae9 	bl	8000adc <__aeabi_dcmplt>
 800850a:	2800      	cmp	r0, #0
 800850c:	f040 80b7 	bne.w	800867e <_dtoa_r+0x69e>
 8008510:	eba5 030b 	sub.w	r3, r5, fp
 8008514:	429f      	cmp	r7, r3
 8008516:	f77f af7c 	ble.w	8008412 <_dtoa_r+0x432>
 800851a:	2200      	movs	r2, #0
 800851c:	4b30      	ldr	r3, [pc, #192]	; (80085e0 <_dtoa_r+0x600>)
 800851e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008522:	f7f8 f869 	bl	80005f8 <__aeabi_dmul>
 8008526:	2200      	movs	r2, #0
 8008528:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800852c:	4b2c      	ldr	r3, [pc, #176]	; (80085e0 <_dtoa_r+0x600>)
 800852e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008532:	f7f8 f861 	bl	80005f8 <__aeabi_dmul>
 8008536:	e9cd 0100 	strd	r0, r1, [sp]
 800853a:	e7c4      	b.n	80084c6 <_dtoa_r+0x4e6>
 800853c:	462a      	mov	r2, r5
 800853e:	4633      	mov	r3, r6
 8008540:	f7f8 f85a 	bl	80005f8 <__aeabi_dmul>
 8008544:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008548:	eb0b 0507 	add.w	r5, fp, r7
 800854c:	465e      	mov	r6, fp
 800854e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008552:	f7f8 fb01 	bl	8000b58 <__aeabi_d2iz>
 8008556:	4607      	mov	r7, r0
 8008558:	f7f7 ffe4 	bl	8000524 <__aeabi_i2d>
 800855c:	3730      	adds	r7, #48	; 0x30
 800855e:	4602      	mov	r2, r0
 8008560:	460b      	mov	r3, r1
 8008562:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008566:	f7f7 fe8f 	bl	8000288 <__aeabi_dsub>
 800856a:	f806 7b01 	strb.w	r7, [r6], #1
 800856e:	42ae      	cmp	r6, r5
 8008570:	e9cd 0100 	strd	r0, r1, [sp]
 8008574:	f04f 0200 	mov.w	r2, #0
 8008578:	d126      	bne.n	80085c8 <_dtoa_r+0x5e8>
 800857a:	4b1c      	ldr	r3, [pc, #112]	; (80085ec <_dtoa_r+0x60c>)
 800857c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008580:	f7f7 fe84 	bl	800028c <__adddf3>
 8008584:	4602      	mov	r2, r0
 8008586:	460b      	mov	r3, r1
 8008588:	e9dd 0100 	ldrd	r0, r1, [sp]
 800858c:	f7f8 fac4 	bl	8000b18 <__aeabi_dcmpgt>
 8008590:	2800      	cmp	r0, #0
 8008592:	d174      	bne.n	800867e <_dtoa_r+0x69e>
 8008594:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008598:	2000      	movs	r0, #0
 800859a:	4914      	ldr	r1, [pc, #80]	; (80085ec <_dtoa_r+0x60c>)
 800859c:	f7f7 fe74 	bl	8000288 <__aeabi_dsub>
 80085a0:	4602      	mov	r2, r0
 80085a2:	460b      	mov	r3, r1
 80085a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80085a8:	f7f8 fa98 	bl	8000adc <__aeabi_dcmplt>
 80085ac:	2800      	cmp	r0, #0
 80085ae:	f43f af30 	beq.w	8008412 <_dtoa_r+0x432>
 80085b2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80085b6:	2b30      	cmp	r3, #48	; 0x30
 80085b8:	f105 32ff 	add.w	r2, r5, #4294967295
 80085bc:	d002      	beq.n	80085c4 <_dtoa_r+0x5e4>
 80085be:	f8dd a020 	ldr.w	sl, [sp, #32]
 80085c2:	e04a      	b.n	800865a <_dtoa_r+0x67a>
 80085c4:	4615      	mov	r5, r2
 80085c6:	e7f4      	b.n	80085b2 <_dtoa_r+0x5d2>
 80085c8:	4b05      	ldr	r3, [pc, #20]	; (80085e0 <_dtoa_r+0x600>)
 80085ca:	f7f8 f815 	bl	80005f8 <__aeabi_dmul>
 80085ce:	e9cd 0100 	strd	r0, r1, [sp]
 80085d2:	e7bc      	b.n	800854e <_dtoa_r+0x56e>
 80085d4:	0800a968 	.word	0x0800a968
 80085d8:	0800a940 	.word	0x0800a940
 80085dc:	3ff00000 	.word	0x3ff00000
 80085e0:	40240000 	.word	0x40240000
 80085e4:	401c0000 	.word	0x401c0000
 80085e8:	40140000 	.word	0x40140000
 80085ec:	3fe00000 	.word	0x3fe00000
 80085f0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80085f4:	465d      	mov	r5, fp
 80085f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80085fa:	4630      	mov	r0, r6
 80085fc:	4639      	mov	r1, r7
 80085fe:	f7f8 f925 	bl	800084c <__aeabi_ddiv>
 8008602:	f7f8 faa9 	bl	8000b58 <__aeabi_d2iz>
 8008606:	4680      	mov	r8, r0
 8008608:	f7f7 ff8c 	bl	8000524 <__aeabi_i2d>
 800860c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008610:	f7f7 fff2 	bl	80005f8 <__aeabi_dmul>
 8008614:	4602      	mov	r2, r0
 8008616:	460b      	mov	r3, r1
 8008618:	4630      	mov	r0, r6
 800861a:	4639      	mov	r1, r7
 800861c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8008620:	f7f7 fe32 	bl	8000288 <__aeabi_dsub>
 8008624:	f805 6b01 	strb.w	r6, [r5], #1
 8008628:	eba5 060b 	sub.w	r6, r5, fp
 800862c:	45b1      	cmp	r9, r6
 800862e:	4602      	mov	r2, r0
 8008630:	460b      	mov	r3, r1
 8008632:	d139      	bne.n	80086a8 <_dtoa_r+0x6c8>
 8008634:	f7f7 fe2a 	bl	800028c <__adddf3>
 8008638:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800863c:	4606      	mov	r6, r0
 800863e:	460f      	mov	r7, r1
 8008640:	f7f8 fa6a 	bl	8000b18 <__aeabi_dcmpgt>
 8008644:	b9c8      	cbnz	r0, 800867a <_dtoa_r+0x69a>
 8008646:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800864a:	4630      	mov	r0, r6
 800864c:	4639      	mov	r1, r7
 800864e:	f7f8 fa3b 	bl	8000ac8 <__aeabi_dcmpeq>
 8008652:	b110      	cbz	r0, 800865a <_dtoa_r+0x67a>
 8008654:	f018 0f01 	tst.w	r8, #1
 8008658:	d10f      	bne.n	800867a <_dtoa_r+0x69a>
 800865a:	9904      	ldr	r1, [sp, #16]
 800865c:	4620      	mov	r0, r4
 800865e:	f000 fcaa 	bl	8008fb6 <_Bfree>
 8008662:	2300      	movs	r3, #0
 8008664:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008666:	702b      	strb	r3, [r5, #0]
 8008668:	f10a 0301 	add.w	r3, sl, #1
 800866c:	6013      	str	r3, [r2, #0]
 800866e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008670:	2b00      	cmp	r3, #0
 8008672:	f000 8241 	beq.w	8008af8 <_dtoa_r+0xb18>
 8008676:	601d      	str	r5, [r3, #0]
 8008678:	e23e      	b.n	8008af8 <_dtoa_r+0xb18>
 800867a:	f8cd a020 	str.w	sl, [sp, #32]
 800867e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008682:	2a39      	cmp	r2, #57	; 0x39
 8008684:	f105 33ff 	add.w	r3, r5, #4294967295
 8008688:	d108      	bne.n	800869c <_dtoa_r+0x6bc>
 800868a:	459b      	cmp	fp, r3
 800868c:	d10a      	bne.n	80086a4 <_dtoa_r+0x6c4>
 800868e:	9b08      	ldr	r3, [sp, #32]
 8008690:	3301      	adds	r3, #1
 8008692:	9308      	str	r3, [sp, #32]
 8008694:	2330      	movs	r3, #48	; 0x30
 8008696:	f88b 3000 	strb.w	r3, [fp]
 800869a:	465b      	mov	r3, fp
 800869c:	781a      	ldrb	r2, [r3, #0]
 800869e:	3201      	adds	r2, #1
 80086a0:	701a      	strb	r2, [r3, #0]
 80086a2:	e78c      	b.n	80085be <_dtoa_r+0x5de>
 80086a4:	461d      	mov	r5, r3
 80086a6:	e7ea      	b.n	800867e <_dtoa_r+0x69e>
 80086a8:	2200      	movs	r2, #0
 80086aa:	4b9b      	ldr	r3, [pc, #620]	; (8008918 <_dtoa_r+0x938>)
 80086ac:	f7f7 ffa4 	bl	80005f8 <__aeabi_dmul>
 80086b0:	2200      	movs	r2, #0
 80086b2:	2300      	movs	r3, #0
 80086b4:	4606      	mov	r6, r0
 80086b6:	460f      	mov	r7, r1
 80086b8:	f7f8 fa06 	bl	8000ac8 <__aeabi_dcmpeq>
 80086bc:	2800      	cmp	r0, #0
 80086be:	d09a      	beq.n	80085f6 <_dtoa_r+0x616>
 80086c0:	e7cb      	b.n	800865a <_dtoa_r+0x67a>
 80086c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086c4:	2a00      	cmp	r2, #0
 80086c6:	f000 808b 	beq.w	80087e0 <_dtoa_r+0x800>
 80086ca:	9a06      	ldr	r2, [sp, #24]
 80086cc:	2a01      	cmp	r2, #1
 80086ce:	dc6e      	bgt.n	80087ae <_dtoa_r+0x7ce>
 80086d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80086d2:	2a00      	cmp	r2, #0
 80086d4:	d067      	beq.n	80087a6 <_dtoa_r+0x7c6>
 80086d6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80086da:	9f07      	ldr	r7, [sp, #28]
 80086dc:	9d05      	ldr	r5, [sp, #20]
 80086de:	9a05      	ldr	r2, [sp, #20]
 80086e0:	2101      	movs	r1, #1
 80086e2:	441a      	add	r2, r3
 80086e4:	4620      	mov	r0, r4
 80086e6:	9205      	str	r2, [sp, #20]
 80086e8:	4498      	add	r8, r3
 80086ea:	f000 fd04 	bl	80090f6 <__i2b>
 80086ee:	4606      	mov	r6, r0
 80086f0:	2d00      	cmp	r5, #0
 80086f2:	dd0c      	ble.n	800870e <_dtoa_r+0x72e>
 80086f4:	f1b8 0f00 	cmp.w	r8, #0
 80086f8:	dd09      	ble.n	800870e <_dtoa_r+0x72e>
 80086fa:	4545      	cmp	r5, r8
 80086fc:	9a05      	ldr	r2, [sp, #20]
 80086fe:	462b      	mov	r3, r5
 8008700:	bfa8      	it	ge
 8008702:	4643      	movge	r3, r8
 8008704:	1ad2      	subs	r2, r2, r3
 8008706:	9205      	str	r2, [sp, #20]
 8008708:	1aed      	subs	r5, r5, r3
 800870a:	eba8 0803 	sub.w	r8, r8, r3
 800870e:	9b07      	ldr	r3, [sp, #28]
 8008710:	b1eb      	cbz	r3, 800874e <_dtoa_r+0x76e>
 8008712:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008714:	2b00      	cmp	r3, #0
 8008716:	d067      	beq.n	80087e8 <_dtoa_r+0x808>
 8008718:	b18f      	cbz	r7, 800873e <_dtoa_r+0x75e>
 800871a:	4631      	mov	r1, r6
 800871c:	463a      	mov	r2, r7
 800871e:	4620      	mov	r0, r4
 8008720:	f000 fd88 	bl	8009234 <__pow5mult>
 8008724:	9a04      	ldr	r2, [sp, #16]
 8008726:	4601      	mov	r1, r0
 8008728:	4606      	mov	r6, r0
 800872a:	4620      	mov	r0, r4
 800872c:	f000 fcec 	bl	8009108 <__multiply>
 8008730:	9904      	ldr	r1, [sp, #16]
 8008732:	9008      	str	r0, [sp, #32]
 8008734:	4620      	mov	r0, r4
 8008736:	f000 fc3e 	bl	8008fb6 <_Bfree>
 800873a:	9b08      	ldr	r3, [sp, #32]
 800873c:	9304      	str	r3, [sp, #16]
 800873e:	9b07      	ldr	r3, [sp, #28]
 8008740:	1bda      	subs	r2, r3, r7
 8008742:	d004      	beq.n	800874e <_dtoa_r+0x76e>
 8008744:	9904      	ldr	r1, [sp, #16]
 8008746:	4620      	mov	r0, r4
 8008748:	f000 fd74 	bl	8009234 <__pow5mult>
 800874c:	9004      	str	r0, [sp, #16]
 800874e:	2101      	movs	r1, #1
 8008750:	4620      	mov	r0, r4
 8008752:	f000 fcd0 	bl	80090f6 <__i2b>
 8008756:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008758:	4607      	mov	r7, r0
 800875a:	2b00      	cmp	r3, #0
 800875c:	f000 81d0 	beq.w	8008b00 <_dtoa_r+0xb20>
 8008760:	461a      	mov	r2, r3
 8008762:	4601      	mov	r1, r0
 8008764:	4620      	mov	r0, r4
 8008766:	f000 fd65 	bl	8009234 <__pow5mult>
 800876a:	9b06      	ldr	r3, [sp, #24]
 800876c:	2b01      	cmp	r3, #1
 800876e:	4607      	mov	r7, r0
 8008770:	dc40      	bgt.n	80087f4 <_dtoa_r+0x814>
 8008772:	9b00      	ldr	r3, [sp, #0]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d139      	bne.n	80087ec <_dtoa_r+0x80c>
 8008778:	9b01      	ldr	r3, [sp, #4]
 800877a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800877e:	2b00      	cmp	r3, #0
 8008780:	d136      	bne.n	80087f0 <_dtoa_r+0x810>
 8008782:	9b01      	ldr	r3, [sp, #4]
 8008784:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008788:	0d1b      	lsrs	r3, r3, #20
 800878a:	051b      	lsls	r3, r3, #20
 800878c:	b12b      	cbz	r3, 800879a <_dtoa_r+0x7ba>
 800878e:	9b05      	ldr	r3, [sp, #20]
 8008790:	3301      	adds	r3, #1
 8008792:	9305      	str	r3, [sp, #20]
 8008794:	f108 0801 	add.w	r8, r8, #1
 8008798:	2301      	movs	r3, #1
 800879a:	9307      	str	r3, [sp, #28]
 800879c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d12a      	bne.n	80087f8 <_dtoa_r+0x818>
 80087a2:	2001      	movs	r0, #1
 80087a4:	e030      	b.n	8008808 <_dtoa_r+0x828>
 80087a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80087a8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80087ac:	e795      	b.n	80086da <_dtoa_r+0x6fa>
 80087ae:	9b07      	ldr	r3, [sp, #28]
 80087b0:	f109 37ff 	add.w	r7, r9, #4294967295
 80087b4:	42bb      	cmp	r3, r7
 80087b6:	bfbf      	itttt	lt
 80087b8:	9b07      	ldrlt	r3, [sp, #28]
 80087ba:	9707      	strlt	r7, [sp, #28]
 80087bc:	1afa      	sublt	r2, r7, r3
 80087be:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80087c0:	bfbb      	ittet	lt
 80087c2:	189b      	addlt	r3, r3, r2
 80087c4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80087c6:	1bdf      	subge	r7, r3, r7
 80087c8:	2700      	movlt	r7, #0
 80087ca:	f1b9 0f00 	cmp.w	r9, #0
 80087ce:	bfb5      	itete	lt
 80087d0:	9b05      	ldrlt	r3, [sp, #20]
 80087d2:	9d05      	ldrge	r5, [sp, #20]
 80087d4:	eba3 0509 	sublt.w	r5, r3, r9
 80087d8:	464b      	movge	r3, r9
 80087da:	bfb8      	it	lt
 80087dc:	2300      	movlt	r3, #0
 80087de:	e77e      	b.n	80086de <_dtoa_r+0x6fe>
 80087e0:	9f07      	ldr	r7, [sp, #28]
 80087e2:	9d05      	ldr	r5, [sp, #20]
 80087e4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80087e6:	e783      	b.n	80086f0 <_dtoa_r+0x710>
 80087e8:	9a07      	ldr	r2, [sp, #28]
 80087ea:	e7ab      	b.n	8008744 <_dtoa_r+0x764>
 80087ec:	2300      	movs	r3, #0
 80087ee:	e7d4      	b.n	800879a <_dtoa_r+0x7ba>
 80087f0:	9b00      	ldr	r3, [sp, #0]
 80087f2:	e7d2      	b.n	800879a <_dtoa_r+0x7ba>
 80087f4:	2300      	movs	r3, #0
 80087f6:	9307      	str	r3, [sp, #28]
 80087f8:	693b      	ldr	r3, [r7, #16]
 80087fa:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80087fe:	6918      	ldr	r0, [r3, #16]
 8008800:	f000 fc2b 	bl	800905a <__hi0bits>
 8008804:	f1c0 0020 	rsb	r0, r0, #32
 8008808:	4440      	add	r0, r8
 800880a:	f010 001f 	ands.w	r0, r0, #31
 800880e:	d047      	beq.n	80088a0 <_dtoa_r+0x8c0>
 8008810:	f1c0 0320 	rsb	r3, r0, #32
 8008814:	2b04      	cmp	r3, #4
 8008816:	dd3b      	ble.n	8008890 <_dtoa_r+0x8b0>
 8008818:	9b05      	ldr	r3, [sp, #20]
 800881a:	f1c0 001c 	rsb	r0, r0, #28
 800881e:	4403      	add	r3, r0
 8008820:	9305      	str	r3, [sp, #20]
 8008822:	4405      	add	r5, r0
 8008824:	4480      	add	r8, r0
 8008826:	9b05      	ldr	r3, [sp, #20]
 8008828:	2b00      	cmp	r3, #0
 800882a:	dd05      	ble.n	8008838 <_dtoa_r+0x858>
 800882c:	461a      	mov	r2, r3
 800882e:	9904      	ldr	r1, [sp, #16]
 8008830:	4620      	mov	r0, r4
 8008832:	f000 fd4d 	bl	80092d0 <__lshift>
 8008836:	9004      	str	r0, [sp, #16]
 8008838:	f1b8 0f00 	cmp.w	r8, #0
 800883c:	dd05      	ble.n	800884a <_dtoa_r+0x86a>
 800883e:	4639      	mov	r1, r7
 8008840:	4642      	mov	r2, r8
 8008842:	4620      	mov	r0, r4
 8008844:	f000 fd44 	bl	80092d0 <__lshift>
 8008848:	4607      	mov	r7, r0
 800884a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800884c:	b353      	cbz	r3, 80088a4 <_dtoa_r+0x8c4>
 800884e:	4639      	mov	r1, r7
 8008850:	9804      	ldr	r0, [sp, #16]
 8008852:	f000 fd91 	bl	8009378 <__mcmp>
 8008856:	2800      	cmp	r0, #0
 8008858:	da24      	bge.n	80088a4 <_dtoa_r+0x8c4>
 800885a:	2300      	movs	r3, #0
 800885c:	220a      	movs	r2, #10
 800885e:	9904      	ldr	r1, [sp, #16]
 8008860:	4620      	mov	r0, r4
 8008862:	f000 fbbf 	bl	8008fe4 <__multadd>
 8008866:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008868:	9004      	str	r0, [sp, #16]
 800886a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800886e:	2b00      	cmp	r3, #0
 8008870:	f000 814d 	beq.w	8008b0e <_dtoa_r+0xb2e>
 8008874:	2300      	movs	r3, #0
 8008876:	4631      	mov	r1, r6
 8008878:	220a      	movs	r2, #10
 800887a:	4620      	mov	r0, r4
 800887c:	f000 fbb2 	bl	8008fe4 <__multadd>
 8008880:	9b02      	ldr	r3, [sp, #8]
 8008882:	2b00      	cmp	r3, #0
 8008884:	4606      	mov	r6, r0
 8008886:	dc4f      	bgt.n	8008928 <_dtoa_r+0x948>
 8008888:	9b06      	ldr	r3, [sp, #24]
 800888a:	2b02      	cmp	r3, #2
 800888c:	dd4c      	ble.n	8008928 <_dtoa_r+0x948>
 800888e:	e011      	b.n	80088b4 <_dtoa_r+0x8d4>
 8008890:	d0c9      	beq.n	8008826 <_dtoa_r+0x846>
 8008892:	9a05      	ldr	r2, [sp, #20]
 8008894:	331c      	adds	r3, #28
 8008896:	441a      	add	r2, r3
 8008898:	9205      	str	r2, [sp, #20]
 800889a:	441d      	add	r5, r3
 800889c:	4498      	add	r8, r3
 800889e:	e7c2      	b.n	8008826 <_dtoa_r+0x846>
 80088a0:	4603      	mov	r3, r0
 80088a2:	e7f6      	b.n	8008892 <_dtoa_r+0x8b2>
 80088a4:	f1b9 0f00 	cmp.w	r9, #0
 80088a8:	dc38      	bgt.n	800891c <_dtoa_r+0x93c>
 80088aa:	9b06      	ldr	r3, [sp, #24]
 80088ac:	2b02      	cmp	r3, #2
 80088ae:	dd35      	ble.n	800891c <_dtoa_r+0x93c>
 80088b0:	f8cd 9008 	str.w	r9, [sp, #8]
 80088b4:	9b02      	ldr	r3, [sp, #8]
 80088b6:	b963      	cbnz	r3, 80088d2 <_dtoa_r+0x8f2>
 80088b8:	4639      	mov	r1, r7
 80088ba:	2205      	movs	r2, #5
 80088bc:	4620      	mov	r0, r4
 80088be:	f000 fb91 	bl	8008fe4 <__multadd>
 80088c2:	4601      	mov	r1, r0
 80088c4:	4607      	mov	r7, r0
 80088c6:	9804      	ldr	r0, [sp, #16]
 80088c8:	f000 fd56 	bl	8009378 <__mcmp>
 80088cc:	2800      	cmp	r0, #0
 80088ce:	f73f adcc 	bgt.w	800846a <_dtoa_r+0x48a>
 80088d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088d4:	465d      	mov	r5, fp
 80088d6:	ea6f 0a03 	mvn.w	sl, r3
 80088da:	f04f 0900 	mov.w	r9, #0
 80088de:	4639      	mov	r1, r7
 80088e0:	4620      	mov	r0, r4
 80088e2:	f000 fb68 	bl	8008fb6 <_Bfree>
 80088e6:	2e00      	cmp	r6, #0
 80088e8:	f43f aeb7 	beq.w	800865a <_dtoa_r+0x67a>
 80088ec:	f1b9 0f00 	cmp.w	r9, #0
 80088f0:	d005      	beq.n	80088fe <_dtoa_r+0x91e>
 80088f2:	45b1      	cmp	r9, r6
 80088f4:	d003      	beq.n	80088fe <_dtoa_r+0x91e>
 80088f6:	4649      	mov	r1, r9
 80088f8:	4620      	mov	r0, r4
 80088fa:	f000 fb5c 	bl	8008fb6 <_Bfree>
 80088fe:	4631      	mov	r1, r6
 8008900:	4620      	mov	r0, r4
 8008902:	f000 fb58 	bl	8008fb6 <_Bfree>
 8008906:	e6a8      	b.n	800865a <_dtoa_r+0x67a>
 8008908:	2700      	movs	r7, #0
 800890a:	463e      	mov	r6, r7
 800890c:	e7e1      	b.n	80088d2 <_dtoa_r+0x8f2>
 800890e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008912:	463e      	mov	r6, r7
 8008914:	e5a9      	b.n	800846a <_dtoa_r+0x48a>
 8008916:	bf00      	nop
 8008918:	40240000 	.word	0x40240000
 800891c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800891e:	f8cd 9008 	str.w	r9, [sp, #8]
 8008922:	2b00      	cmp	r3, #0
 8008924:	f000 80fa 	beq.w	8008b1c <_dtoa_r+0xb3c>
 8008928:	2d00      	cmp	r5, #0
 800892a:	dd05      	ble.n	8008938 <_dtoa_r+0x958>
 800892c:	4631      	mov	r1, r6
 800892e:	462a      	mov	r2, r5
 8008930:	4620      	mov	r0, r4
 8008932:	f000 fccd 	bl	80092d0 <__lshift>
 8008936:	4606      	mov	r6, r0
 8008938:	9b07      	ldr	r3, [sp, #28]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d04c      	beq.n	80089d8 <_dtoa_r+0x9f8>
 800893e:	6871      	ldr	r1, [r6, #4]
 8008940:	4620      	mov	r0, r4
 8008942:	f000 fb04 	bl	8008f4e <_Balloc>
 8008946:	6932      	ldr	r2, [r6, #16]
 8008948:	3202      	adds	r2, #2
 800894a:	4605      	mov	r5, r0
 800894c:	0092      	lsls	r2, r2, #2
 800894e:	f106 010c 	add.w	r1, r6, #12
 8008952:	300c      	adds	r0, #12
 8008954:	f000 faf0 	bl	8008f38 <memcpy>
 8008958:	2201      	movs	r2, #1
 800895a:	4629      	mov	r1, r5
 800895c:	4620      	mov	r0, r4
 800895e:	f000 fcb7 	bl	80092d0 <__lshift>
 8008962:	9b00      	ldr	r3, [sp, #0]
 8008964:	f8cd b014 	str.w	fp, [sp, #20]
 8008968:	f003 0301 	and.w	r3, r3, #1
 800896c:	46b1      	mov	r9, r6
 800896e:	9307      	str	r3, [sp, #28]
 8008970:	4606      	mov	r6, r0
 8008972:	4639      	mov	r1, r7
 8008974:	9804      	ldr	r0, [sp, #16]
 8008976:	f7ff faa7 	bl	8007ec8 <quorem>
 800897a:	4649      	mov	r1, r9
 800897c:	4605      	mov	r5, r0
 800897e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008982:	9804      	ldr	r0, [sp, #16]
 8008984:	f000 fcf8 	bl	8009378 <__mcmp>
 8008988:	4632      	mov	r2, r6
 800898a:	9000      	str	r0, [sp, #0]
 800898c:	4639      	mov	r1, r7
 800898e:	4620      	mov	r0, r4
 8008990:	f000 fd0c 	bl	80093ac <__mdiff>
 8008994:	68c3      	ldr	r3, [r0, #12]
 8008996:	4602      	mov	r2, r0
 8008998:	bb03      	cbnz	r3, 80089dc <_dtoa_r+0x9fc>
 800899a:	4601      	mov	r1, r0
 800899c:	9008      	str	r0, [sp, #32]
 800899e:	9804      	ldr	r0, [sp, #16]
 80089a0:	f000 fcea 	bl	8009378 <__mcmp>
 80089a4:	9a08      	ldr	r2, [sp, #32]
 80089a6:	4603      	mov	r3, r0
 80089a8:	4611      	mov	r1, r2
 80089aa:	4620      	mov	r0, r4
 80089ac:	9308      	str	r3, [sp, #32]
 80089ae:	f000 fb02 	bl	8008fb6 <_Bfree>
 80089b2:	9b08      	ldr	r3, [sp, #32]
 80089b4:	b9a3      	cbnz	r3, 80089e0 <_dtoa_r+0xa00>
 80089b6:	9a06      	ldr	r2, [sp, #24]
 80089b8:	b992      	cbnz	r2, 80089e0 <_dtoa_r+0xa00>
 80089ba:	9a07      	ldr	r2, [sp, #28]
 80089bc:	b982      	cbnz	r2, 80089e0 <_dtoa_r+0xa00>
 80089be:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80089c2:	d029      	beq.n	8008a18 <_dtoa_r+0xa38>
 80089c4:	9b00      	ldr	r3, [sp, #0]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	dd01      	ble.n	80089ce <_dtoa_r+0x9ee>
 80089ca:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80089ce:	9b05      	ldr	r3, [sp, #20]
 80089d0:	1c5d      	adds	r5, r3, #1
 80089d2:	f883 8000 	strb.w	r8, [r3]
 80089d6:	e782      	b.n	80088de <_dtoa_r+0x8fe>
 80089d8:	4630      	mov	r0, r6
 80089da:	e7c2      	b.n	8008962 <_dtoa_r+0x982>
 80089dc:	2301      	movs	r3, #1
 80089de:	e7e3      	b.n	80089a8 <_dtoa_r+0x9c8>
 80089e0:	9a00      	ldr	r2, [sp, #0]
 80089e2:	2a00      	cmp	r2, #0
 80089e4:	db04      	blt.n	80089f0 <_dtoa_r+0xa10>
 80089e6:	d125      	bne.n	8008a34 <_dtoa_r+0xa54>
 80089e8:	9a06      	ldr	r2, [sp, #24]
 80089ea:	bb1a      	cbnz	r2, 8008a34 <_dtoa_r+0xa54>
 80089ec:	9a07      	ldr	r2, [sp, #28]
 80089ee:	bb0a      	cbnz	r2, 8008a34 <_dtoa_r+0xa54>
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	ddec      	ble.n	80089ce <_dtoa_r+0x9ee>
 80089f4:	2201      	movs	r2, #1
 80089f6:	9904      	ldr	r1, [sp, #16]
 80089f8:	4620      	mov	r0, r4
 80089fa:	f000 fc69 	bl	80092d0 <__lshift>
 80089fe:	4639      	mov	r1, r7
 8008a00:	9004      	str	r0, [sp, #16]
 8008a02:	f000 fcb9 	bl	8009378 <__mcmp>
 8008a06:	2800      	cmp	r0, #0
 8008a08:	dc03      	bgt.n	8008a12 <_dtoa_r+0xa32>
 8008a0a:	d1e0      	bne.n	80089ce <_dtoa_r+0x9ee>
 8008a0c:	f018 0f01 	tst.w	r8, #1
 8008a10:	d0dd      	beq.n	80089ce <_dtoa_r+0x9ee>
 8008a12:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008a16:	d1d8      	bne.n	80089ca <_dtoa_r+0x9ea>
 8008a18:	9b05      	ldr	r3, [sp, #20]
 8008a1a:	9a05      	ldr	r2, [sp, #20]
 8008a1c:	1c5d      	adds	r5, r3, #1
 8008a1e:	2339      	movs	r3, #57	; 0x39
 8008a20:	7013      	strb	r3, [r2, #0]
 8008a22:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008a26:	2b39      	cmp	r3, #57	; 0x39
 8008a28:	f105 32ff 	add.w	r2, r5, #4294967295
 8008a2c:	d04f      	beq.n	8008ace <_dtoa_r+0xaee>
 8008a2e:	3301      	adds	r3, #1
 8008a30:	7013      	strb	r3, [r2, #0]
 8008a32:	e754      	b.n	80088de <_dtoa_r+0x8fe>
 8008a34:	9a05      	ldr	r2, [sp, #20]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	f102 0501 	add.w	r5, r2, #1
 8008a3c:	dd06      	ble.n	8008a4c <_dtoa_r+0xa6c>
 8008a3e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008a42:	d0e9      	beq.n	8008a18 <_dtoa_r+0xa38>
 8008a44:	f108 0801 	add.w	r8, r8, #1
 8008a48:	9b05      	ldr	r3, [sp, #20]
 8008a4a:	e7c2      	b.n	80089d2 <_dtoa_r+0x9f2>
 8008a4c:	9a02      	ldr	r2, [sp, #8]
 8008a4e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8008a52:	eba5 030b 	sub.w	r3, r5, fp
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d021      	beq.n	8008a9e <_dtoa_r+0xabe>
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	220a      	movs	r2, #10
 8008a5e:	9904      	ldr	r1, [sp, #16]
 8008a60:	4620      	mov	r0, r4
 8008a62:	f000 fabf 	bl	8008fe4 <__multadd>
 8008a66:	45b1      	cmp	r9, r6
 8008a68:	9004      	str	r0, [sp, #16]
 8008a6a:	f04f 0300 	mov.w	r3, #0
 8008a6e:	f04f 020a 	mov.w	r2, #10
 8008a72:	4649      	mov	r1, r9
 8008a74:	4620      	mov	r0, r4
 8008a76:	d105      	bne.n	8008a84 <_dtoa_r+0xaa4>
 8008a78:	f000 fab4 	bl	8008fe4 <__multadd>
 8008a7c:	4681      	mov	r9, r0
 8008a7e:	4606      	mov	r6, r0
 8008a80:	9505      	str	r5, [sp, #20]
 8008a82:	e776      	b.n	8008972 <_dtoa_r+0x992>
 8008a84:	f000 faae 	bl	8008fe4 <__multadd>
 8008a88:	4631      	mov	r1, r6
 8008a8a:	4681      	mov	r9, r0
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	220a      	movs	r2, #10
 8008a90:	4620      	mov	r0, r4
 8008a92:	f000 faa7 	bl	8008fe4 <__multadd>
 8008a96:	4606      	mov	r6, r0
 8008a98:	e7f2      	b.n	8008a80 <_dtoa_r+0xaa0>
 8008a9a:	f04f 0900 	mov.w	r9, #0
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	9904      	ldr	r1, [sp, #16]
 8008aa2:	4620      	mov	r0, r4
 8008aa4:	f000 fc14 	bl	80092d0 <__lshift>
 8008aa8:	4639      	mov	r1, r7
 8008aaa:	9004      	str	r0, [sp, #16]
 8008aac:	f000 fc64 	bl	8009378 <__mcmp>
 8008ab0:	2800      	cmp	r0, #0
 8008ab2:	dcb6      	bgt.n	8008a22 <_dtoa_r+0xa42>
 8008ab4:	d102      	bne.n	8008abc <_dtoa_r+0xadc>
 8008ab6:	f018 0f01 	tst.w	r8, #1
 8008aba:	d1b2      	bne.n	8008a22 <_dtoa_r+0xa42>
 8008abc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008ac0:	2b30      	cmp	r3, #48	; 0x30
 8008ac2:	f105 32ff 	add.w	r2, r5, #4294967295
 8008ac6:	f47f af0a 	bne.w	80088de <_dtoa_r+0x8fe>
 8008aca:	4615      	mov	r5, r2
 8008acc:	e7f6      	b.n	8008abc <_dtoa_r+0xadc>
 8008ace:	4593      	cmp	fp, r2
 8008ad0:	d105      	bne.n	8008ade <_dtoa_r+0xafe>
 8008ad2:	2331      	movs	r3, #49	; 0x31
 8008ad4:	f10a 0a01 	add.w	sl, sl, #1
 8008ad8:	f88b 3000 	strb.w	r3, [fp]
 8008adc:	e6ff      	b.n	80088de <_dtoa_r+0x8fe>
 8008ade:	4615      	mov	r5, r2
 8008ae0:	e79f      	b.n	8008a22 <_dtoa_r+0xa42>
 8008ae2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8008b48 <_dtoa_r+0xb68>
 8008ae6:	e007      	b.n	8008af8 <_dtoa_r+0xb18>
 8008ae8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008aea:	f8df b060 	ldr.w	fp, [pc, #96]	; 8008b4c <_dtoa_r+0xb6c>
 8008aee:	b11b      	cbz	r3, 8008af8 <_dtoa_r+0xb18>
 8008af0:	f10b 0308 	add.w	r3, fp, #8
 8008af4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008af6:	6013      	str	r3, [r2, #0]
 8008af8:	4658      	mov	r0, fp
 8008afa:	b017      	add	sp, #92	; 0x5c
 8008afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b00:	9b06      	ldr	r3, [sp, #24]
 8008b02:	2b01      	cmp	r3, #1
 8008b04:	f77f ae35 	ble.w	8008772 <_dtoa_r+0x792>
 8008b08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b0a:	9307      	str	r3, [sp, #28]
 8008b0c:	e649      	b.n	80087a2 <_dtoa_r+0x7c2>
 8008b0e:	9b02      	ldr	r3, [sp, #8]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	dc03      	bgt.n	8008b1c <_dtoa_r+0xb3c>
 8008b14:	9b06      	ldr	r3, [sp, #24]
 8008b16:	2b02      	cmp	r3, #2
 8008b18:	f73f aecc 	bgt.w	80088b4 <_dtoa_r+0x8d4>
 8008b1c:	465d      	mov	r5, fp
 8008b1e:	4639      	mov	r1, r7
 8008b20:	9804      	ldr	r0, [sp, #16]
 8008b22:	f7ff f9d1 	bl	8007ec8 <quorem>
 8008b26:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008b2a:	f805 8b01 	strb.w	r8, [r5], #1
 8008b2e:	9a02      	ldr	r2, [sp, #8]
 8008b30:	eba5 030b 	sub.w	r3, r5, fp
 8008b34:	429a      	cmp	r2, r3
 8008b36:	ddb0      	ble.n	8008a9a <_dtoa_r+0xaba>
 8008b38:	2300      	movs	r3, #0
 8008b3a:	220a      	movs	r2, #10
 8008b3c:	9904      	ldr	r1, [sp, #16]
 8008b3e:	4620      	mov	r0, r4
 8008b40:	f000 fa50 	bl	8008fe4 <__multadd>
 8008b44:	9004      	str	r0, [sp, #16]
 8008b46:	e7ea      	b.n	8008b1e <_dtoa_r+0xb3e>
 8008b48:	0800a8ac 	.word	0x0800a8ac
 8008b4c:	0800a8d0 	.word	0x0800a8d0

08008b50 <__sflush_r>:
 8008b50:	898a      	ldrh	r2, [r1, #12]
 8008b52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b56:	4605      	mov	r5, r0
 8008b58:	0710      	lsls	r0, r2, #28
 8008b5a:	460c      	mov	r4, r1
 8008b5c:	d458      	bmi.n	8008c10 <__sflush_r+0xc0>
 8008b5e:	684b      	ldr	r3, [r1, #4]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	dc05      	bgt.n	8008b70 <__sflush_r+0x20>
 8008b64:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	dc02      	bgt.n	8008b70 <__sflush_r+0x20>
 8008b6a:	2000      	movs	r0, #0
 8008b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b72:	2e00      	cmp	r6, #0
 8008b74:	d0f9      	beq.n	8008b6a <__sflush_r+0x1a>
 8008b76:	2300      	movs	r3, #0
 8008b78:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008b7c:	682f      	ldr	r7, [r5, #0]
 8008b7e:	6a21      	ldr	r1, [r4, #32]
 8008b80:	602b      	str	r3, [r5, #0]
 8008b82:	d032      	beq.n	8008bea <__sflush_r+0x9a>
 8008b84:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008b86:	89a3      	ldrh	r3, [r4, #12]
 8008b88:	075a      	lsls	r2, r3, #29
 8008b8a:	d505      	bpl.n	8008b98 <__sflush_r+0x48>
 8008b8c:	6863      	ldr	r3, [r4, #4]
 8008b8e:	1ac0      	subs	r0, r0, r3
 8008b90:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008b92:	b10b      	cbz	r3, 8008b98 <__sflush_r+0x48>
 8008b94:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008b96:	1ac0      	subs	r0, r0, r3
 8008b98:	2300      	movs	r3, #0
 8008b9a:	4602      	mov	r2, r0
 8008b9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b9e:	6a21      	ldr	r1, [r4, #32]
 8008ba0:	4628      	mov	r0, r5
 8008ba2:	47b0      	blx	r6
 8008ba4:	1c43      	adds	r3, r0, #1
 8008ba6:	89a3      	ldrh	r3, [r4, #12]
 8008ba8:	d106      	bne.n	8008bb8 <__sflush_r+0x68>
 8008baa:	6829      	ldr	r1, [r5, #0]
 8008bac:	291d      	cmp	r1, #29
 8008bae:	d848      	bhi.n	8008c42 <__sflush_r+0xf2>
 8008bb0:	4a29      	ldr	r2, [pc, #164]	; (8008c58 <__sflush_r+0x108>)
 8008bb2:	40ca      	lsrs	r2, r1
 8008bb4:	07d6      	lsls	r6, r2, #31
 8008bb6:	d544      	bpl.n	8008c42 <__sflush_r+0xf2>
 8008bb8:	2200      	movs	r2, #0
 8008bba:	6062      	str	r2, [r4, #4]
 8008bbc:	04d9      	lsls	r1, r3, #19
 8008bbe:	6922      	ldr	r2, [r4, #16]
 8008bc0:	6022      	str	r2, [r4, #0]
 8008bc2:	d504      	bpl.n	8008bce <__sflush_r+0x7e>
 8008bc4:	1c42      	adds	r2, r0, #1
 8008bc6:	d101      	bne.n	8008bcc <__sflush_r+0x7c>
 8008bc8:	682b      	ldr	r3, [r5, #0]
 8008bca:	b903      	cbnz	r3, 8008bce <__sflush_r+0x7e>
 8008bcc:	6560      	str	r0, [r4, #84]	; 0x54
 8008bce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008bd0:	602f      	str	r7, [r5, #0]
 8008bd2:	2900      	cmp	r1, #0
 8008bd4:	d0c9      	beq.n	8008b6a <__sflush_r+0x1a>
 8008bd6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008bda:	4299      	cmp	r1, r3
 8008bdc:	d002      	beq.n	8008be4 <__sflush_r+0x94>
 8008bde:	4628      	mov	r0, r5
 8008be0:	f000 fc9e 	bl	8009520 <_free_r>
 8008be4:	2000      	movs	r0, #0
 8008be6:	6360      	str	r0, [r4, #52]	; 0x34
 8008be8:	e7c0      	b.n	8008b6c <__sflush_r+0x1c>
 8008bea:	2301      	movs	r3, #1
 8008bec:	4628      	mov	r0, r5
 8008bee:	47b0      	blx	r6
 8008bf0:	1c41      	adds	r1, r0, #1
 8008bf2:	d1c8      	bne.n	8008b86 <__sflush_r+0x36>
 8008bf4:	682b      	ldr	r3, [r5, #0]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d0c5      	beq.n	8008b86 <__sflush_r+0x36>
 8008bfa:	2b1d      	cmp	r3, #29
 8008bfc:	d001      	beq.n	8008c02 <__sflush_r+0xb2>
 8008bfe:	2b16      	cmp	r3, #22
 8008c00:	d101      	bne.n	8008c06 <__sflush_r+0xb6>
 8008c02:	602f      	str	r7, [r5, #0]
 8008c04:	e7b1      	b.n	8008b6a <__sflush_r+0x1a>
 8008c06:	89a3      	ldrh	r3, [r4, #12]
 8008c08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c0c:	81a3      	strh	r3, [r4, #12]
 8008c0e:	e7ad      	b.n	8008b6c <__sflush_r+0x1c>
 8008c10:	690f      	ldr	r7, [r1, #16]
 8008c12:	2f00      	cmp	r7, #0
 8008c14:	d0a9      	beq.n	8008b6a <__sflush_r+0x1a>
 8008c16:	0793      	lsls	r3, r2, #30
 8008c18:	680e      	ldr	r6, [r1, #0]
 8008c1a:	bf08      	it	eq
 8008c1c:	694b      	ldreq	r3, [r1, #20]
 8008c1e:	600f      	str	r7, [r1, #0]
 8008c20:	bf18      	it	ne
 8008c22:	2300      	movne	r3, #0
 8008c24:	eba6 0807 	sub.w	r8, r6, r7
 8008c28:	608b      	str	r3, [r1, #8]
 8008c2a:	f1b8 0f00 	cmp.w	r8, #0
 8008c2e:	dd9c      	ble.n	8008b6a <__sflush_r+0x1a>
 8008c30:	4643      	mov	r3, r8
 8008c32:	463a      	mov	r2, r7
 8008c34:	6a21      	ldr	r1, [r4, #32]
 8008c36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008c38:	4628      	mov	r0, r5
 8008c3a:	47b0      	blx	r6
 8008c3c:	2800      	cmp	r0, #0
 8008c3e:	dc06      	bgt.n	8008c4e <__sflush_r+0xfe>
 8008c40:	89a3      	ldrh	r3, [r4, #12]
 8008c42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c46:	81a3      	strh	r3, [r4, #12]
 8008c48:	f04f 30ff 	mov.w	r0, #4294967295
 8008c4c:	e78e      	b.n	8008b6c <__sflush_r+0x1c>
 8008c4e:	4407      	add	r7, r0
 8008c50:	eba8 0800 	sub.w	r8, r8, r0
 8008c54:	e7e9      	b.n	8008c2a <__sflush_r+0xda>
 8008c56:	bf00      	nop
 8008c58:	20400001 	.word	0x20400001

08008c5c <_fflush_r>:
 8008c5c:	b538      	push	{r3, r4, r5, lr}
 8008c5e:	690b      	ldr	r3, [r1, #16]
 8008c60:	4605      	mov	r5, r0
 8008c62:	460c      	mov	r4, r1
 8008c64:	b1db      	cbz	r3, 8008c9e <_fflush_r+0x42>
 8008c66:	b118      	cbz	r0, 8008c70 <_fflush_r+0x14>
 8008c68:	6983      	ldr	r3, [r0, #24]
 8008c6a:	b90b      	cbnz	r3, 8008c70 <_fflush_r+0x14>
 8008c6c:	f000 f860 	bl	8008d30 <__sinit>
 8008c70:	4b0c      	ldr	r3, [pc, #48]	; (8008ca4 <_fflush_r+0x48>)
 8008c72:	429c      	cmp	r4, r3
 8008c74:	d109      	bne.n	8008c8a <_fflush_r+0x2e>
 8008c76:	686c      	ldr	r4, [r5, #4]
 8008c78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c7c:	b17b      	cbz	r3, 8008c9e <_fflush_r+0x42>
 8008c7e:	4621      	mov	r1, r4
 8008c80:	4628      	mov	r0, r5
 8008c82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c86:	f7ff bf63 	b.w	8008b50 <__sflush_r>
 8008c8a:	4b07      	ldr	r3, [pc, #28]	; (8008ca8 <_fflush_r+0x4c>)
 8008c8c:	429c      	cmp	r4, r3
 8008c8e:	d101      	bne.n	8008c94 <_fflush_r+0x38>
 8008c90:	68ac      	ldr	r4, [r5, #8]
 8008c92:	e7f1      	b.n	8008c78 <_fflush_r+0x1c>
 8008c94:	4b05      	ldr	r3, [pc, #20]	; (8008cac <_fflush_r+0x50>)
 8008c96:	429c      	cmp	r4, r3
 8008c98:	bf08      	it	eq
 8008c9a:	68ec      	ldreq	r4, [r5, #12]
 8008c9c:	e7ec      	b.n	8008c78 <_fflush_r+0x1c>
 8008c9e:	2000      	movs	r0, #0
 8008ca0:	bd38      	pop	{r3, r4, r5, pc}
 8008ca2:	bf00      	nop
 8008ca4:	0800a900 	.word	0x0800a900
 8008ca8:	0800a920 	.word	0x0800a920
 8008cac:	0800a8e0 	.word	0x0800a8e0

08008cb0 <std>:
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	b510      	push	{r4, lr}
 8008cb4:	4604      	mov	r4, r0
 8008cb6:	e9c0 3300 	strd	r3, r3, [r0]
 8008cba:	6083      	str	r3, [r0, #8]
 8008cbc:	8181      	strh	r1, [r0, #12]
 8008cbe:	6643      	str	r3, [r0, #100]	; 0x64
 8008cc0:	81c2      	strh	r2, [r0, #14]
 8008cc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008cc6:	6183      	str	r3, [r0, #24]
 8008cc8:	4619      	mov	r1, r3
 8008cca:	2208      	movs	r2, #8
 8008ccc:	305c      	adds	r0, #92	; 0x5c
 8008cce:	f7fe faa5 	bl	800721c <memset>
 8008cd2:	4b05      	ldr	r3, [pc, #20]	; (8008ce8 <std+0x38>)
 8008cd4:	6263      	str	r3, [r4, #36]	; 0x24
 8008cd6:	4b05      	ldr	r3, [pc, #20]	; (8008cec <std+0x3c>)
 8008cd8:	62a3      	str	r3, [r4, #40]	; 0x28
 8008cda:	4b05      	ldr	r3, [pc, #20]	; (8008cf0 <std+0x40>)
 8008cdc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008cde:	4b05      	ldr	r3, [pc, #20]	; (8008cf4 <std+0x44>)
 8008ce0:	6224      	str	r4, [r4, #32]
 8008ce2:	6323      	str	r3, [r4, #48]	; 0x30
 8008ce4:	bd10      	pop	{r4, pc}
 8008ce6:	bf00      	nop
 8008ce8:	08009911 	.word	0x08009911
 8008cec:	08009933 	.word	0x08009933
 8008cf0:	0800996b 	.word	0x0800996b
 8008cf4:	0800998f 	.word	0x0800998f

08008cf8 <_cleanup_r>:
 8008cf8:	4901      	ldr	r1, [pc, #4]	; (8008d00 <_cleanup_r+0x8>)
 8008cfa:	f000 b885 	b.w	8008e08 <_fwalk_reent>
 8008cfe:	bf00      	nop
 8008d00:	08008c5d 	.word	0x08008c5d

08008d04 <__sfmoreglue>:
 8008d04:	b570      	push	{r4, r5, r6, lr}
 8008d06:	1e4a      	subs	r2, r1, #1
 8008d08:	2568      	movs	r5, #104	; 0x68
 8008d0a:	4355      	muls	r5, r2
 8008d0c:	460e      	mov	r6, r1
 8008d0e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008d12:	f000 fc53 	bl	80095bc <_malloc_r>
 8008d16:	4604      	mov	r4, r0
 8008d18:	b140      	cbz	r0, 8008d2c <__sfmoreglue+0x28>
 8008d1a:	2100      	movs	r1, #0
 8008d1c:	e9c0 1600 	strd	r1, r6, [r0]
 8008d20:	300c      	adds	r0, #12
 8008d22:	60a0      	str	r0, [r4, #8]
 8008d24:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008d28:	f7fe fa78 	bl	800721c <memset>
 8008d2c:	4620      	mov	r0, r4
 8008d2e:	bd70      	pop	{r4, r5, r6, pc}

08008d30 <__sinit>:
 8008d30:	6983      	ldr	r3, [r0, #24]
 8008d32:	b510      	push	{r4, lr}
 8008d34:	4604      	mov	r4, r0
 8008d36:	bb33      	cbnz	r3, 8008d86 <__sinit+0x56>
 8008d38:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8008d3c:	6503      	str	r3, [r0, #80]	; 0x50
 8008d3e:	4b12      	ldr	r3, [pc, #72]	; (8008d88 <__sinit+0x58>)
 8008d40:	4a12      	ldr	r2, [pc, #72]	; (8008d8c <__sinit+0x5c>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	6282      	str	r2, [r0, #40]	; 0x28
 8008d46:	4298      	cmp	r0, r3
 8008d48:	bf04      	itt	eq
 8008d4a:	2301      	moveq	r3, #1
 8008d4c:	6183      	streq	r3, [r0, #24]
 8008d4e:	f000 f81f 	bl	8008d90 <__sfp>
 8008d52:	6060      	str	r0, [r4, #4]
 8008d54:	4620      	mov	r0, r4
 8008d56:	f000 f81b 	bl	8008d90 <__sfp>
 8008d5a:	60a0      	str	r0, [r4, #8]
 8008d5c:	4620      	mov	r0, r4
 8008d5e:	f000 f817 	bl	8008d90 <__sfp>
 8008d62:	2200      	movs	r2, #0
 8008d64:	60e0      	str	r0, [r4, #12]
 8008d66:	2104      	movs	r1, #4
 8008d68:	6860      	ldr	r0, [r4, #4]
 8008d6a:	f7ff ffa1 	bl	8008cb0 <std>
 8008d6e:	2201      	movs	r2, #1
 8008d70:	2109      	movs	r1, #9
 8008d72:	68a0      	ldr	r0, [r4, #8]
 8008d74:	f7ff ff9c 	bl	8008cb0 <std>
 8008d78:	2202      	movs	r2, #2
 8008d7a:	2112      	movs	r1, #18
 8008d7c:	68e0      	ldr	r0, [r4, #12]
 8008d7e:	f7ff ff97 	bl	8008cb0 <std>
 8008d82:	2301      	movs	r3, #1
 8008d84:	61a3      	str	r3, [r4, #24]
 8008d86:	bd10      	pop	{r4, pc}
 8008d88:	0800a898 	.word	0x0800a898
 8008d8c:	08008cf9 	.word	0x08008cf9

08008d90 <__sfp>:
 8008d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d92:	4b1b      	ldr	r3, [pc, #108]	; (8008e00 <__sfp+0x70>)
 8008d94:	681e      	ldr	r6, [r3, #0]
 8008d96:	69b3      	ldr	r3, [r6, #24]
 8008d98:	4607      	mov	r7, r0
 8008d9a:	b913      	cbnz	r3, 8008da2 <__sfp+0x12>
 8008d9c:	4630      	mov	r0, r6
 8008d9e:	f7ff ffc7 	bl	8008d30 <__sinit>
 8008da2:	3648      	adds	r6, #72	; 0x48
 8008da4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008da8:	3b01      	subs	r3, #1
 8008daa:	d503      	bpl.n	8008db4 <__sfp+0x24>
 8008dac:	6833      	ldr	r3, [r6, #0]
 8008dae:	b133      	cbz	r3, 8008dbe <__sfp+0x2e>
 8008db0:	6836      	ldr	r6, [r6, #0]
 8008db2:	e7f7      	b.n	8008da4 <__sfp+0x14>
 8008db4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008db8:	b16d      	cbz	r5, 8008dd6 <__sfp+0x46>
 8008dba:	3468      	adds	r4, #104	; 0x68
 8008dbc:	e7f4      	b.n	8008da8 <__sfp+0x18>
 8008dbe:	2104      	movs	r1, #4
 8008dc0:	4638      	mov	r0, r7
 8008dc2:	f7ff ff9f 	bl	8008d04 <__sfmoreglue>
 8008dc6:	6030      	str	r0, [r6, #0]
 8008dc8:	2800      	cmp	r0, #0
 8008dca:	d1f1      	bne.n	8008db0 <__sfp+0x20>
 8008dcc:	230c      	movs	r3, #12
 8008dce:	603b      	str	r3, [r7, #0]
 8008dd0:	4604      	mov	r4, r0
 8008dd2:	4620      	mov	r0, r4
 8008dd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008dd6:	4b0b      	ldr	r3, [pc, #44]	; (8008e04 <__sfp+0x74>)
 8008dd8:	6665      	str	r5, [r4, #100]	; 0x64
 8008dda:	e9c4 5500 	strd	r5, r5, [r4]
 8008dde:	60a5      	str	r5, [r4, #8]
 8008de0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8008de4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8008de8:	2208      	movs	r2, #8
 8008dea:	4629      	mov	r1, r5
 8008dec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008df0:	f7fe fa14 	bl	800721c <memset>
 8008df4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008df8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008dfc:	e7e9      	b.n	8008dd2 <__sfp+0x42>
 8008dfe:	bf00      	nop
 8008e00:	0800a898 	.word	0x0800a898
 8008e04:	ffff0001 	.word	0xffff0001

08008e08 <_fwalk_reent>:
 8008e08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e0c:	4680      	mov	r8, r0
 8008e0e:	4689      	mov	r9, r1
 8008e10:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008e14:	2600      	movs	r6, #0
 8008e16:	b914      	cbnz	r4, 8008e1e <_fwalk_reent+0x16>
 8008e18:	4630      	mov	r0, r6
 8008e1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e1e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8008e22:	3f01      	subs	r7, #1
 8008e24:	d501      	bpl.n	8008e2a <_fwalk_reent+0x22>
 8008e26:	6824      	ldr	r4, [r4, #0]
 8008e28:	e7f5      	b.n	8008e16 <_fwalk_reent+0xe>
 8008e2a:	89ab      	ldrh	r3, [r5, #12]
 8008e2c:	2b01      	cmp	r3, #1
 8008e2e:	d907      	bls.n	8008e40 <_fwalk_reent+0x38>
 8008e30:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008e34:	3301      	adds	r3, #1
 8008e36:	d003      	beq.n	8008e40 <_fwalk_reent+0x38>
 8008e38:	4629      	mov	r1, r5
 8008e3a:	4640      	mov	r0, r8
 8008e3c:	47c8      	blx	r9
 8008e3e:	4306      	orrs	r6, r0
 8008e40:	3568      	adds	r5, #104	; 0x68
 8008e42:	e7ee      	b.n	8008e22 <_fwalk_reent+0x1a>

08008e44 <_localeconv_r>:
 8008e44:	4b04      	ldr	r3, [pc, #16]	; (8008e58 <_localeconv_r+0x14>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	6a18      	ldr	r0, [r3, #32]
 8008e4a:	4b04      	ldr	r3, [pc, #16]	; (8008e5c <_localeconv_r+0x18>)
 8008e4c:	2800      	cmp	r0, #0
 8008e4e:	bf08      	it	eq
 8008e50:	4618      	moveq	r0, r3
 8008e52:	30f0      	adds	r0, #240	; 0xf0
 8008e54:	4770      	bx	lr
 8008e56:	bf00      	nop
 8008e58:	20000014 	.word	0x20000014
 8008e5c:	20000078 	.word	0x20000078

08008e60 <__swhatbuf_r>:
 8008e60:	b570      	push	{r4, r5, r6, lr}
 8008e62:	460e      	mov	r6, r1
 8008e64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e68:	2900      	cmp	r1, #0
 8008e6a:	b096      	sub	sp, #88	; 0x58
 8008e6c:	4614      	mov	r4, r2
 8008e6e:	461d      	mov	r5, r3
 8008e70:	da07      	bge.n	8008e82 <__swhatbuf_r+0x22>
 8008e72:	2300      	movs	r3, #0
 8008e74:	602b      	str	r3, [r5, #0]
 8008e76:	89b3      	ldrh	r3, [r6, #12]
 8008e78:	061a      	lsls	r2, r3, #24
 8008e7a:	d410      	bmi.n	8008e9e <__swhatbuf_r+0x3e>
 8008e7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e80:	e00e      	b.n	8008ea0 <__swhatbuf_r+0x40>
 8008e82:	466a      	mov	r2, sp
 8008e84:	f000 fdaa 	bl	80099dc <_fstat_r>
 8008e88:	2800      	cmp	r0, #0
 8008e8a:	dbf2      	blt.n	8008e72 <__swhatbuf_r+0x12>
 8008e8c:	9a01      	ldr	r2, [sp, #4]
 8008e8e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008e92:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008e96:	425a      	negs	r2, r3
 8008e98:	415a      	adcs	r2, r3
 8008e9a:	602a      	str	r2, [r5, #0]
 8008e9c:	e7ee      	b.n	8008e7c <__swhatbuf_r+0x1c>
 8008e9e:	2340      	movs	r3, #64	; 0x40
 8008ea0:	2000      	movs	r0, #0
 8008ea2:	6023      	str	r3, [r4, #0]
 8008ea4:	b016      	add	sp, #88	; 0x58
 8008ea6:	bd70      	pop	{r4, r5, r6, pc}

08008ea8 <__smakebuf_r>:
 8008ea8:	898b      	ldrh	r3, [r1, #12]
 8008eaa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008eac:	079d      	lsls	r5, r3, #30
 8008eae:	4606      	mov	r6, r0
 8008eb0:	460c      	mov	r4, r1
 8008eb2:	d507      	bpl.n	8008ec4 <__smakebuf_r+0x1c>
 8008eb4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008eb8:	6023      	str	r3, [r4, #0]
 8008eba:	6123      	str	r3, [r4, #16]
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	6163      	str	r3, [r4, #20]
 8008ec0:	b002      	add	sp, #8
 8008ec2:	bd70      	pop	{r4, r5, r6, pc}
 8008ec4:	ab01      	add	r3, sp, #4
 8008ec6:	466a      	mov	r2, sp
 8008ec8:	f7ff ffca 	bl	8008e60 <__swhatbuf_r>
 8008ecc:	9900      	ldr	r1, [sp, #0]
 8008ece:	4605      	mov	r5, r0
 8008ed0:	4630      	mov	r0, r6
 8008ed2:	f000 fb73 	bl	80095bc <_malloc_r>
 8008ed6:	b948      	cbnz	r0, 8008eec <__smakebuf_r+0x44>
 8008ed8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008edc:	059a      	lsls	r2, r3, #22
 8008ede:	d4ef      	bmi.n	8008ec0 <__smakebuf_r+0x18>
 8008ee0:	f023 0303 	bic.w	r3, r3, #3
 8008ee4:	f043 0302 	orr.w	r3, r3, #2
 8008ee8:	81a3      	strh	r3, [r4, #12]
 8008eea:	e7e3      	b.n	8008eb4 <__smakebuf_r+0xc>
 8008eec:	4b0d      	ldr	r3, [pc, #52]	; (8008f24 <__smakebuf_r+0x7c>)
 8008eee:	62b3      	str	r3, [r6, #40]	; 0x28
 8008ef0:	89a3      	ldrh	r3, [r4, #12]
 8008ef2:	6020      	str	r0, [r4, #0]
 8008ef4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ef8:	81a3      	strh	r3, [r4, #12]
 8008efa:	9b00      	ldr	r3, [sp, #0]
 8008efc:	6163      	str	r3, [r4, #20]
 8008efe:	9b01      	ldr	r3, [sp, #4]
 8008f00:	6120      	str	r0, [r4, #16]
 8008f02:	b15b      	cbz	r3, 8008f1c <__smakebuf_r+0x74>
 8008f04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f08:	4630      	mov	r0, r6
 8008f0a:	f000 fd79 	bl	8009a00 <_isatty_r>
 8008f0e:	b128      	cbz	r0, 8008f1c <__smakebuf_r+0x74>
 8008f10:	89a3      	ldrh	r3, [r4, #12]
 8008f12:	f023 0303 	bic.w	r3, r3, #3
 8008f16:	f043 0301 	orr.w	r3, r3, #1
 8008f1a:	81a3      	strh	r3, [r4, #12]
 8008f1c:	89a3      	ldrh	r3, [r4, #12]
 8008f1e:	431d      	orrs	r5, r3
 8008f20:	81a5      	strh	r5, [r4, #12]
 8008f22:	e7cd      	b.n	8008ec0 <__smakebuf_r+0x18>
 8008f24:	08008cf9 	.word	0x08008cf9

08008f28 <malloc>:
 8008f28:	4b02      	ldr	r3, [pc, #8]	; (8008f34 <malloc+0xc>)
 8008f2a:	4601      	mov	r1, r0
 8008f2c:	6818      	ldr	r0, [r3, #0]
 8008f2e:	f000 bb45 	b.w	80095bc <_malloc_r>
 8008f32:	bf00      	nop
 8008f34:	20000014 	.word	0x20000014

08008f38 <memcpy>:
 8008f38:	b510      	push	{r4, lr}
 8008f3a:	1e43      	subs	r3, r0, #1
 8008f3c:	440a      	add	r2, r1
 8008f3e:	4291      	cmp	r1, r2
 8008f40:	d100      	bne.n	8008f44 <memcpy+0xc>
 8008f42:	bd10      	pop	{r4, pc}
 8008f44:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f48:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f4c:	e7f7      	b.n	8008f3e <memcpy+0x6>

08008f4e <_Balloc>:
 8008f4e:	b570      	push	{r4, r5, r6, lr}
 8008f50:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008f52:	4604      	mov	r4, r0
 8008f54:	460e      	mov	r6, r1
 8008f56:	b93d      	cbnz	r5, 8008f68 <_Balloc+0x1a>
 8008f58:	2010      	movs	r0, #16
 8008f5a:	f7ff ffe5 	bl	8008f28 <malloc>
 8008f5e:	6260      	str	r0, [r4, #36]	; 0x24
 8008f60:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008f64:	6005      	str	r5, [r0, #0]
 8008f66:	60c5      	str	r5, [r0, #12]
 8008f68:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008f6a:	68eb      	ldr	r3, [r5, #12]
 8008f6c:	b183      	cbz	r3, 8008f90 <_Balloc+0x42>
 8008f6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f70:	68db      	ldr	r3, [r3, #12]
 8008f72:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008f76:	b9b8      	cbnz	r0, 8008fa8 <_Balloc+0x5a>
 8008f78:	2101      	movs	r1, #1
 8008f7a:	fa01 f506 	lsl.w	r5, r1, r6
 8008f7e:	1d6a      	adds	r2, r5, #5
 8008f80:	0092      	lsls	r2, r2, #2
 8008f82:	4620      	mov	r0, r4
 8008f84:	f000 fabe 	bl	8009504 <_calloc_r>
 8008f88:	b160      	cbz	r0, 8008fa4 <_Balloc+0x56>
 8008f8a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8008f8e:	e00e      	b.n	8008fae <_Balloc+0x60>
 8008f90:	2221      	movs	r2, #33	; 0x21
 8008f92:	2104      	movs	r1, #4
 8008f94:	4620      	mov	r0, r4
 8008f96:	f000 fab5 	bl	8009504 <_calloc_r>
 8008f9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f9c:	60e8      	str	r0, [r5, #12]
 8008f9e:	68db      	ldr	r3, [r3, #12]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d1e4      	bne.n	8008f6e <_Balloc+0x20>
 8008fa4:	2000      	movs	r0, #0
 8008fa6:	bd70      	pop	{r4, r5, r6, pc}
 8008fa8:	6802      	ldr	r2, [r0, #0]
 8008faa:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8008fae:	2300      	movs	r3, #0
 8008fb0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008fb4:	e7f7      	b.n	8008fa6 <_Balloc+0x58>

08008fb6 <_Bfree>:
 8008fb6:	b570      	push	{r4, r5, r6, lr}
 8008fb8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008fba:	4606      	mov	r6, r0
 8008fbc:	460d      	mov	r5, r1
 8008fbe:	b93c      	cbnz	r4, 8008fd0 <_Bfree+0x1a>
 8008fc0:	2010      	movs	r0, #16
 8008fc2:	f7ff ffb1 	bl	8008f28 <malloc>
 8008fc6:	6270      	str	r0, [r6, #36]	; 0x24
 8008fc8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008fcc:	6004      	str	r4, [r0, #0]
 8008fce:	60c4      	str	r4, [r0, #12]
 8008fd0:	b13d      	cbz	r5, 8008fe2 <_Bfree+0x2c>
 8008fd2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008fd4:	686a      	ldr	r2, [r5, #4]
 8008fd6:	68db      	ldr	r3, [r3, #12]
 8008fd8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008fdc:	6029      	str	r1, [r5, #0]
 8008fde:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008fe2:	bd70      	pop	{r4, r5, r6, pc}

08008fe4 <__multadd>:
 8008fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fe8:	690d      	ldr	r5, [r1, #16]
 8008fea:	461f      	mov	r7, r3
 8008fec:	4606      	mov	r6, r0
 8008fee:	460c      	mov	r4, r1
 8008ff0:	f101 0c14 	add.w	ip, r1, #20
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	f8dc 0000 	ldr.w	r0, [ip]
 8008ffa:	b281      	uxth	r1, r0
 8008ffc:	fb02 7101 	mla	r1, r2, r1, r7
 8009000:	0c0f      	lsrs	r7, r1, #16
 8009002:	0c00      	lsrs	r0, r0, #16
 8009004:	fb02 7000 	mla	r0, r2, r0, r7
 8009008:	b289      	uxth	r1, r1
 800900a:	3301      	adds	r3, #1
 800900c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009010:	429d      	cmp	r5, r3
 8009012:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009016:	f84c 1b04 	str.w	r1, [ip], #4
 800901a:	dcec      	bgt.n	8008ff6 <__multadd+0x12>
 800901c:	b1d7      	cbz	r7, 8009054 <__multadd+0x70>
 800901e:	68a3      	ldr	r3, [r4, #8]
 8009020:	42ab      	cmp	r3, r5
 8009022:	dc12      	bgt.n	800904a <__multadd+0x66>
 8009024:	6861      	ldr	r1, [r4, #4]
 8009026:	4630      	mov	r0, r6
 8009028:	3101      	adds	r1, #1
 800902a:	f7ff ff90 	bl	8008f4e <_Balloc>
 800902e:	6922      	ldr	r2, [r4, #16]
 8009030:	3202      	adds	r2, #2
 8009032:	f104 010c 	add.w	r1, r4, #12
 8009036:	4680      	mov	r8, r0
 8009038:	0092      	lsls	r2, r2, #2
 800903a:	300c      	adds	r0, #12
 800903c:	f7ff ff7c 	bl	8008f38 <memcpy>
 8009040:	4621      	mov	r1, r4
 8009042:	4630      	mov	r0, r6
 8009044:	f7ff ffb7 	bl	8008fb6 <_Bfree>
 8009048:	4644      	mov	r4, r8
 800904a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800904e:	3501      	adds	r5, #1
 8009050:	615f      	str	r7, [r3, #20]
 8009052:	6125      	str	r5, [r4, #16]
 8009054:	4620      	mov	r0, r4
 8009056:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800905a <__hi0bits>:
 800905a:	0c02      	lsrs	r2, r0, #16
 800905c:	0412      	lsls	r2, r2, #16
 800905e:	4603      	mov	r3, r0
 8009060:	b9b2      	cbnz	r2, 8009090 <__hi0bits+0x36>
 8009062:	0403      	lsls	r3, r0, #16
 8009064:	2010      	movs	r0, #16
 8009066:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800906a:	bf04      	itt	eq
 800906c:	021b      	lsleq	r3, r3, #8
 800906e:	3008      	addeq	r0, #8
 8009070:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009074:	bf04      	itt	eq
 8009076:	011b      	lsleq	r3, r3, #4
 8009078:	3004      	addeq	r0, #4
 800907a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800907e:	bf04      	itt	eq
 8009080:	009b      	lsleq	r3, r3, #2
 8009082:	3002      	addeq	r0, #2
 8009084:	2b00      	cmp	r3, #0
 8009086:	db06      	blt.n	8009096 <__hi0bits+0x3c>
 8009088:	005b      	lsls	r3, r3, #1
 800908a:	d503      	bpl.n	8009094 <__hi0bits+0x3a>
 800908c:	3001      	adds	r0, #1
 800908e:	4770      	bx	lr
 8009090:	2000      	movs	r0, #0
 8009092:	e7e8      	b.n	8009066 <__hi0bits+0xc>
 8009094:	2020      	movs	r0, #32
 8009096:	4770      	bx	lr

08009098 <__lo0bits>:
 8009098:	6803      	ldr	r3, [r0, #0]
 800909a:	f013 0207 	ands.w	r2, r3, #7
 800909e:	4601      	mov	r1, r0
 80090a0:	d00b      	beq.n	80090ba <__lo0bits+0x22>
 80090a2:	07da      	lsls	r2, r3, #31
 80090a4:	d423      	bmi.n	80090ee <__lo0bits+0x56>
 80090a6:	0798      	lsls	r0, r3, #30
 80090a8:	bf49      	itett	mi
 80090aa:	085b      	lsrmi	r3, r3, #1
 80090ac:	089b      	lsrpl	r3, r3, #2
 80090ae:	2001      	movmi	r0, #1
 80090b0:	600b      	strmi	r3, [r1, #0]
 80090b2:	bf5c      	itt	pl
 80090b4:	600b      	strpl	r3, [r1, #0]
 80090b6:	2002      	movpl	r0, #2
 80090b8:	4770      	bx	lr
 80090ba:	b298      	uxth	r0, r3
 80090bc:	b9a8      	cbnz	r0, 80090ea <__lo0bits+0x52>
 80090be:	0c1b      	lsrs	r3, r3, #16
 80090c0:	2010      	movs	r0, #16
 80090c2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80090c6:	bf04      	itt	eq
 80090c8:	0a1b      	lsreq	r3, r3, #8
 80090ca:	3008      	addeq	r0, #8
 80090cc:	071a      	lsls	r2, r3, #28
 80090ce:	bf04      	itt	eq
 80090d0:	091b      	lsreq	r3, r3, #4
 80090d2:	3004      	addeq	r0, #4
 80090d4:	079a      	lsls	r2, r3, #30
 80090d6:	bf04      	itt	eq
 80090d8:	089b      	lsreq	r3, r3, #2
 80090da:	3002      	addeq	r0, #2
 80090dc:	07da      	lsls	r2, r3, #31
 80090de:	d402      	bmi.n	80090e6 <__lo0bits+0x4e>
 80090e0:	085b      	lsrs	r3, r3, #1
 80090e2:	d006      	beq.n	80090f2 <__lo0bits+0x5a>
 80090e4:	3001      	adds	r0, #1
 80090e6:	600b      	str	r3, [r1, #0]
 80090e8:	4770      	bx	lr
 80090ea:	4610      	mov	r0, r2
 80090ec:	e7e9      	b.n	80090c2 <__lo0bits+0x2a>
 80090ee:	2000      	movs	r0, #0
 80090f0:	4770      	bx	lr
 80090f2:	2020      	movs	r0, #32
 80090f4:	4770      	bx	lr

080090f6 <__i2b>:
 80090f6:	b510      	push	{r4, lr}
 80090f8:	460c      	mov	r4, r1
 80090fa:	2101      	movs	r1, #1
 80090fc:	f7ff ff27 	bl	8008f4e <_Balloc>
 8009100:	2201      	movs	r2, #1
 8009102:	6144      	str	r4, [r0, #20]
 8009104:	6102      	str	r2, [r0, #16]
 8009106:	bd10      	pop	{r4, pc}

08009108 <__multiply>:
 8009108:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800910c:	4614      	mov	r4, r2
 800910e:	690a      	ldr	r2, [r1, #16]
 8009110:	6923      	ldr	r3, [r4, #16]
 8009112:	429a      	cmp	r2, r3
 8009114:	bfb8      	it	lt
 8009116:	460b      	movlt	r3, r1
 8009118:	4688      	mov	r8, r1
 800911a:	bfbc      	itt	lt
 800911c:	46a0      	movlt	r8, r4
 800911e:	461c      	movlt	r4, r3
 8009120:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009124:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009128:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800912c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009130:	eb07 0609 	add.w	r6, r7, r9
 8009134:	42b3      	cmp	r3, r6
 8009136:	bfb8      	it	lt
 8009138:	3101      	addlt	r1, #1
 800913a:	f7ff ff08 	bl	8008f4e <_Balloc>
 800913e:	f100 0514 	add.w	r5, r0, #20
 8009142:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8009146:	462b      	mov	r3, r5
 8009148:	2200      	movs	r2, #0
 800914a:	4573      	cmp	r3, lr
 800914c:	d316      	bcc.n	800917c <__multiply+0x74>
 800914e:	f104 0214 	add.w	r2, r4, #20
 8009152:	f108 0114 	add.w	r1, r8, #20
 8009156:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800915a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800915e:	9300      	str	r3, [sp, #0]
 8009160:	9b00      	ldr	r3, [sp, #0]
 8009162:	9201      	str	r2, [sp, #4]
 8009164:	4293      	cmp	r3, r2
 8009166:	d80c      	bhi.n	8009182 <__multiply+0x7a>
 8009168:	2e00      	cmp	r6, #0
 800916a:	dd03      	ble.n	8009174 <__multiply+0x6c>
 800916c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009170:	2b00      	cmp	r3, #0
 8009172:	d05d      	beq.n	8009230 <__multiply+0x128>
 8009174:	6106      	str	r6, [r0, #16]
 8009176:	b003      	add	sp, #12
 8009178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800917c:	f843 2b04 	str.w	r2, [r3], #4
 8009180:	e7e3      	b.n	800914a <__multiply+0x42>
 8009182:	f8b2 b000 	ldrh.w	fp, [r2]
 8009186:	f1bb 0f00 	cmp.w	fp, #0
 800918a:	d023      	beq.n	80091d4 <__multiply+0xcc>
 800918c:	4689      	mov	r9, r1
 800918e:	46ac      	mov	ip, r5
 8009190:	f04f 0800 	mov.w	r8, #0
 8009194:	f859 4b04 	ldr.w	r4, [r9], #4
 8009198:	f8dc a000 	ldr.w	sl, [ip]
 800919c:	b2a3      	uxth	r3, r4
 800919e:	fa1f fa8a 	uxth.w	sl, sl
 80091a2:	fb0b a303 	mla	r3, fp, r3, sl
 80091a6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80091aa:	f8dc 4000 	ldr.w	r4, [ip]
 80091ae:	4443      	add	r3, r8
 80091b0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80091b4:	fb0b 840a 	mla	r4, fp, sl, r8
 80091b8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80091bc:	46e2      	mov	sl, ip
 80091be:	b29b      	uxth	r3, r3
 80091c0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80091c4:	454f      	cmp	r7, r9
 80091c6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80091ca:	f84a 3b04 	str.w	r3, [sl], #4
 80091ce:	d82b      	bhi.n	8009228 <__multiply+0x120>
 80091d0:	f8cc 8004 	str.w	r8, [ip, #4]
 80091d4:	9b01      	ldr	r3, [sp, #4]
 80091d6:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80091da:	3204      	adds	r2, #4
 80091dc:	f1ba 0f00 	cmp.w	sl, #0
 80091e0:	d020      	beq.n	8009224 <__multiply+0x11c>
 80091e2:	682b      	ldr	r3, [r5, #0]
 80091e4:	4689      	mov	r9, r1
 80091e6:	46a8      	mov	r8, r5
 80091e8:	f04f 0b00 	mov.w	fp, #0
 80091ec:	f8b9 c000 	ldrh.w	ip, [r9]
 80091f0:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80091f4:	fb0a 440c 	mla	r4, sl, ip, r4
 80091f8:	445c      	add	r4, fp
 80091fa:	46c4      	mov	ip, r8
 80091fc:	b29b      	uxth	r3, r3
 80091fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009202:	f84c 3b04 	str.w	r3, [ip], #4
 8009206:	f859 3b04 	ldr.w	r3, [r9], #4
 800920a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800920e:	0c1b      	lsrs	r3, r3, #16
 8009210:	fb0a b303 	mla	r3, sl, r3, fp
 8009214:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009218:	454f      	cmp	r7, r9
 800921a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800921e:	d805      	bhi.n	800922c <__multiply+0x124>
 8009220:	f8c8 3004 	str.w	r3, [r8, #4]
 8009224:	3504      	adds	r5, #4
 8009226:	e79b      	b.n	8009160 <__multiply+0x58>
 8009228:	46d4      	mov	ip, sl
 800922a:	e7b3      	b.n	8009194 <__multiply+0x8c>
 800922c:	46e0      	mov	r8, ip
 800922e:	e7dd      	b.n	80091ec <__multiply+0xe4>
 8009230:	3e01      	subs	r6, #1
 8009232:	e799      	b.n	8009168 <__multiply+0x60>

08009234 <__pow5mult>:
 8009234:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009238:	4615      	mov	r5, r2
 800923a:	f012 0203 	ands.w	r2, r2, #3
 800923e:	4606      	mov	r6, r0
 8009240:	460f      	mov	r7, r1
 8009242:	d007      	beq.n	8009254 <__pow5mult+0x20>
 8009244:	3a01      	subs	r2, #1
 8009246:	4c21      	ldr	r4, [pc, #132]	; (80092cc <__pow5mult+0x98>)
 8009248:	2300      	movs	r3, #0
 800924a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800924e:	f7ff fec9 	bl	8008fe4 <__multadd>
 8009252:	4607      	mov	r7, r0
 8009254:	10ad      	asrs	r5, r5, #2
 8009256:	d035      	beq.n	80092c4 <__pow5mult+0x90>
 8009258:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800925a:	b93c      	cbnz	r4, 800926c <__pow5mult+0x38>
 800925c:	2010      	movs	r0, #16
 800925e:	f7ff fe63 	bl	8008f28 <malloc>
 8009262:	6270      	str	r0, [r6, #36]	; 0x24
 8009264:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009268:	6004      	str	r4, [r0, #0]
 800926a:	60c4      	str	r4, [r0, #12]
 800926c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009270:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009274:	b94c      	cbnz	r4, 800928a <__pow5mult+0x56>
 8009276:	f240 2171 	movw	r1, #625	; 0x271
 800927a:	4630      	mov	r0, r6
 800927c:	f7ff ff3b 	bl	80090f6 <__i2b>
 8009280:	2300      	movs	r3, #0
 8009282:	f8c8 0008 	str.w	r0, [r8, #8]
 8009286:	4604      	mov	r4, r0
 8009288:	6003      	str	r3, [r0, #0]
 800928a:	f04f 0800 	mov.w	r8, #0
 800928e:	07eb      	lsls	r3, r5, #31
 8009290:	d50a      	bpl.n	80092a8 <__pow5mult+0x74>
 8009292:	4639      	mov	r1, r7
 8009294:	4622      	mov	r2, r4
 8009296:	4630      	mov	r0, r6
 8009298:	f7ff ff36 	bl	8009108 <__multiply>
 800929c:	4639      	mov	r1, r7
 800929e:	4681      	mov	r9, r0
 80092a0:	4630      	mov	r0, r6
 80092a2:	f7ff fe88 	bl	8008fb6 <_Bfree>
 80092a6:	464f      	mov	r7, r9
 80092a8:	106d      	asrs	r5, r5, #1
 80092aa:	d00b      	beq.n	80092c4 <__pow5mult+0x90>
 80092ac:	6820      	ldr	r0, [r4, #0]
 80092ae:	b938      	cbnz	r0, 80092c0 <__pow5mult+0x8c>
 80092b0:	4622      	mov	r2, r4
 80092b2:	4621      	mov	r1, r4
 80092b4:	4630      	mov	r0, r6
 80092b6:	f7ff ff27 	bl	8009108 <__multiply>
 80092ba:	6020      	str	r0, [r4, #0]
 80092bc:	f8c0 8000 	str.w	r8, [r0]
 80092c0:	4604      	mov	r4, r0
 80092c2:	e7e4      	b.n	800928e <__pow5mult+0x5a>
 80092c4:	4638      	mov	r0, r7
 80092c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092ca:	bf00      	nop
 80092cc:	0800aa30 	.word	0x0800aa30

080092d0 <__lshift>:
 80092d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092d4:	460c      	mov	r4, r1
 80092d6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80092da:	6923      	ldr	r3, [r4, #16]
 80092dc:	6849      	ldr	r1, [r1, #4]
 80092de:	eb0a 0903 	add.w	r9, sl, r3
 80092e2:	68a3      	ldr	r3, [r4, #8]
 80092e4:	4607      	mov	r7, r0
 80092e6:	4616      	mov	r6, r2
 80092e8:	f109 0501 	add.w	r5, r9, #1
 80092ec:	42ab      	cmp	r3, r5
 80092ee:	db32      	blt.n	8009356 <__lshift+0x86>
 80092f0:	4638      	mov	r0, r7
 80092f2:	f7ff fe2c 	bl	8008f4e <_Balloc>
 80092f6:	2300      	movs	r3, #0
 80092f8:	4680      	mov	r8, r0
 80092fa:	f100 0114 	add.w	r1, r0, #20
 80092fe:	461a      	mov	r2, r3
 8009300:	4553      	cmp	r3, sl
 8009302:	db2b      	blt.n	800935c <__lshift+0x8c>
 8009304:	6920      	ldr	r0, [r4, #16]
 8009306:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800930a:	f104 0314 	add.w	r3, r4, #20
 800930e:	f016 021f 	ands.w	r2, r6, #31
 8009312:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009316:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800931a:	d025      	beq.n	8009368 <__lshift+0x98>
 800931c:	f1c2 0e20 	rsb	lr, r2, #32
 8009320:	2000      	movs	r0, #0
 8009322:	681e      	ldr	r6, [r3, #0]
 8009324:	468a      	mov	sl, r1
 8009326:	4096      	lsls	r6, r2
 8009328:	4330      	orrs	r0, r6
 800932a:	f84a 0b04 	str.w	r0, [sl], #4
 800932e:	f853 0b04 	ldr.w	r0, [r3], #4
 8009332:	459c      	cmp	ip, r3
 8009334:	fa20 f00e 	lsr.w	r0, r0, lr
 8009338:	d814      	bhi.n	8009364 <__lshift+0x94>
 800933a:	6048      	str	r0, [r1, #4]
 800933c:	b108      	cbz	r0, 8009342 <__lshift+0x72>
 800933e:	f109 0502 	add.w	r5, r9, #2
 8009342:	3d01      	subs	r5, #1
 8009344:	4638      	mov	r0, r7
 8009346:	f8c8 5010 	str.w	r5, [r8, #16]
 800934a:	4621      	mov	r1, r4
 800934c:	f7ff fe33 	bl	8008fb6 <_Bfree>
 8009350:	4640      	mov	r0, r8
 8009352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009356:	3101      	adds	r1, #1
 8009358:	005b      	lsls	r3, r3, #1
 800935a:	e7c7      	b.n	80092ec <__lshift+0x1c>
 800935c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009360:	3301      	adds	r3, #1
 8009362:	e7cd      	b.n	8009300 <__lshift+0x30>
 8009364:	4651      	mov	r1, sl
 8009366:	e7dc      	b.n	8009322 <__lshift+0x52>
 8009368:	3904      	subs	r1, #4
 800936a:	f853 2b04 	ldr.w	r2, [r3], #4
 800936e:	f841 2f04 	str.w	r2, [r1, #4]!
 8009372:	459c      	cmp	ip, r3
 8009374:	d8f9      	bhi.n	800936a <__lshift+0x9a>
 8009376:	e7e4      	b.n	8009342 <__lshift+0x72>

08009378 <__mcmp>:
 8009378:	6903      	ldr	r3, [r0, #16]
 800937a:	690a      	ldr	r2, [r1, #16]
 800937c:	1a9b      	subs	r3, r3, r2
 800937e:	b530      	push	{r4, r5, lr}
 8009380:	d10c      	bne.n	800939c <__mcmp+0x24>
 8009382:	0092      	lsls	r2, r2, #2
 8009384:	3014      	adds	r0, #20
 8009386:	3114      	adds	r1, #20
 8009388:	1884      	adds	r4, r0, r2
 800938a:	4411      	add	r1, r2
 800938c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009390:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009394:	4295      	cmp	r5, r2
 8009396:	d003      	beq.n	80093a0 <__mcmp+0x28>
 8009398:	d305      	bcc.n	80093a6 <__mcmp+0x2e>
 800939a:	2301      	movs	r3, #1
 800939c:	4618      	mov	r0, r3
 800939e:	bd30      	pop	{r4, r5, pc}
 80093a0:	42a0      	cmp	r0, r4
 80093a2:	d3f3      	bcc.n	800938c <__mcmp+0x14>
 80093a4:	e7fa      	b.n	800939c <__mcmp+0x24>
 80093a6:	f04f 33ff 	mov.w	r3, #4294967295
 80093aa:	e7f7      	b.n	800939c <__mcmp+0x24>

080093ac <__mdiff>:
 80093ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093b0:	460d      	mov	r5, r1
 80093b2:	4607      	mov	r7, r0
 80093b4:	4611      	mov	r1, r2
 80093b6:	4628      	mov	r0, r5
 80093b8:	4614      	mov	r4, r2
 80093ba:	f7ff ffdd 	bl	8009378 <__mcmp>
 80093be:	1e06      	subs	r6, r0, #0
 80093c0:	d108      	bne.n	80093d4 <__mdiff+0x28>
 80093c2:	4631      	mov	r1, r6
 80093c4:	4638      	mov	r0, r7
 80093c6:	f7ff fdc2 	bl	8008f4e <_Balloc>
 80093ca:	2301      	movs	r3, #1
 80093cc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80093d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093d4:	bfa4      	itt	ge
 80093d6:	4623      	movge	r3, r4
 80093d8:	462c      	movge	r4, r5
 80093da:	4638      	mov	r0, r7
 80093dc:	6861      	ldr	r1, [r4, #4]
 80093de:	bfa6      	itte	ge
 80093e0:	461d      	movge	r5, r3
 80093e2:	2600      	movge	r6, #0
 80093e4:	2601      	movlt	r6, #1
 80093e6:	f7ff fdb2 	bl	8008f4e <_Balloc>
 80093ea:	692b      	ldr	r3, [r5, #16]
 80093ec:	60c6      	str	r6, [r0, #12]
 80093ee:	6926      	ldr	r6, [r4, #16]
 80093f0:	f105 0914 	add.w	r9, r5, #20
 80093f4:	f104 0214 	add.w	r2, r4, #20
 80093f8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80093fc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009400:	f100 0514 	add.w	r5, r0, #20
 8009404:	f04f 0e00 	mov.w	lr, #0
 8009408:	f852 ab04 	ldr.w	sl, [r2], #4
 800940c:	f859 4b04 	ldr.w	r4, [r9], #4
 8009410:	fa1e f18a 	uxtah	r1, lr, sl
 8009414:	b2a3      	uxth	r3, r4
 8009416:	1ac9      	subs	r1, r1, r3
 8009418:	0c23      	lsrs	r3, r4, #16
 800941a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800941e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009422:	b289      	uxth	r1, r1
 8009424:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009428:	45c8      	cmp	r8, r9
 800942a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800942e:	4694      	mov	ip, r2
 8009430:	f845 3b04 	str.w	r3, [r5], #4
 8009434:	d8e8      	bhi.n	8009408 <__mdiff+0x5c>
 8009436:	45bc      	cmp	ip, r7
 8009438:	d304      	bcc.n	8009444 <__mdiff+0x98>
 800943a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800943e:	b183      	cbz	r3, 8009462 <__mdiff+0xb6>
 8009440:	6106      	str	r6, [r0, #16]
 8009442:	e7c5      	b.n	80093d0 <__mdiff+0x24>
 8009444:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009448:	fa1e f381 	uxtah	r3, lr, r1
 800944c:	141a      	asrs	r2, r3, #16
 800944e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009452:	b29b      	uxth	r3, r3
 8009454:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009458:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800945c:	f845 3b04 	str.w	r3, [r5], #4
 8009460:	e7e9      	b.n	8009436 <__mdiff+0x8a>
 8009462:	3e01      	subs	r6, #1
 8009464:	e7e9      	b.n	800943a <__mdiff+0x8e>

08009466 <__d2b>:
 8009466:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800946a:	460e      	mov	r6, r1
 800946c:	2101      	movs	r1, #1
 800946e:	ec59 8b10 	vmov	r8, r9, d0
 8009472:	4615      	mov	r5, r2
 8009474:	f7ff fd6b 	bl	8008f4e <_Balloc>
 8009478:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800947c:	4607      	mov	r7, r0
 800947e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009482:	bb34      	cbnz	r4, 80094d2 <__d2b+0x6c>
 8009484:	9301      	str	r3, [sp, #4]
 8009486:	f1b8 0300 	subs.w	r3, r8, #0
 800948a:	d027      	beq.n	80094dc <__d2b+0x76>
 800948c:	a802      	add	r0, sp, #8
 800948e:	f840 3d08 	str.w	r3, [r0, #-8]!
 8009492:	f7ff fe01 	bl	8009098 <__lo0bits>
 8009496:	9900      	ldr	r1, [sp, #0]
 8009498:	b1f0      	cbz	r0, 80094d8 <__d2b+0x72>
 800949a:	9a01      	ldr	r2, [sp, #4]
 800949c:	f1c0 0320 	rsb	r3, r0, #32
 80094a0:	fa02 f303 	lsl.w	r3, r2, r3
 80094a4:	430b      	orrs	r3, r1
 80094a6:	40c2      	lsrs	r2, r0
 80094a8:	617b      	str	r3, [r7, #20]
 80094aa:	9201      	str	r2, [sp, #4]
 80094ac:	9b01      	ldr	r3, [sp, #4]
 80094ae:	61bb      	str	r3, [r7, #24]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	bf14      	ite	ne
 80094b4:	2102      	movne	r1, #2
 80094b6:	2101      	moveq	r1, #1
 80094b8:	6139      	str	r1, [r7, #16]
 80094ba:	b1c4      	cbz	r4, 80094ee <__d2b+0x88>
 80094bc:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80094c0:	4404      	add	r4, r0
 80094c2:	6034      	str	r4, [r6, #0]
 80094c4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80094c8:	6028      	str	r0, [r5, #0]
 80094ca:	4638      	mov	r0, r7
 80094cc:	b003      	add	sp, #12
 80094ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80094d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80094d6:	e7d5      	b.n	8009484 <__d2b+0x1e>
 80094d8:	6179      	str	r1, [r7, #20]
 80094da:	e7e7      	b.n	80094ac <__d2b+0x46>
 80094dc:	a801      	add	r0, sp, #4
 80094de:	f7ff fddb 	bl	8009098 <__lo0bits>
 80094e2:	9b01      	ldr	r3, [sp, #4]
 80094e4:	617b      	str	r3, [r7, #20]
 80094e6:	2101      	movs	r1, #1
 80094e8:	6139      	str	r1, [r7, #16]
 80094ea:	3020      	adds	r0, #32
 80094ec:	e7e5      	b.n	80094ba <__d2b+0x54>
 80094ee:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80094f2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80094f6:	6030      	str	r0, [r6, #0]
 80094f8:	6918      	ldr	r0, [r3, #16]
 80094fa:	f7ff fdae 	bl	800905a <__hi0bits>
 80094fe:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009502:	e7e1      	b.n	80094c8 <__d2b+0x62>

08009504 <_calloc_r>:
 8009504:	b538      	push	{r3, r4, r5, lr}
 8009506:	fb02 f401 	mul.w	r4, r2, r1
 800950a:	4621      	mov	r1, r4
 800950c:	f000 f856 	bl	80095bc <_malloc_r>
 8009510:	4605      	mov	r5, r0
 8009512:	b118      	cbz	r0, 800951c <_calloc_r+0x18>
 8009514:	4622      	mov	r2, r4
 8009516:	2100      	movs	r1, #0
 8009518:	f7fd fe80 	bl	800721c <memset>
 800951c:	4628      	mov	r0, r5
 800951e:	bd38      	pop	{r3, r4, r5, pc}

08009520 <_free_r>:
 8009520:	b538      	push	{r3, r4, r5, lr}
 8009522:	4605      	mov	r5, r0
 8009524:	2900      	cmp	r1, #0
 8009526:	d045      	beq.n	80095b4 <_free_r+0x94>
 8009528:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800952c:	1f0c      	subs	r4, r1, #4
 800952e:	2b00      	cmp	r3, #0
 8009530:	bfb8      	it	lt
 8009532:	18e4      	addlt	r4, r4, r3
 8009534:	f000 fa98 	bl	8009a68 <__malloc_lock>
 8009538:	4a1f      	ldr	r2, [pc, #124]	; (80095b8 <_free_r+0x98>)
 800953a:	6813      	ldr	r3, [r2, #0]
 800953c:	4610      	mov	r0, r2
 800953e:	b933      	cbnz	r3, 800954e <_free_r+0x2e>
 8009540:	6063      	str	r3, [r4, #4]
 8009542:	6014      	str	r4, [r2, #0]
 8009544:	4628      	mov	r0, r5
 8009546:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800954a:	f000 ba8e 	b.w	8009a6a <__malloc_unlock>
 800954e:	42a3      	cmp	r3, r4
 8009550:	d90c      	bls.n	800956c <_free_r+0x4c>
 8009552:	6821      	ldr	r1, [r4, #0]
 8009554:	1862      	adds	r2, r4, r1
 8009556:	4293      	cmp	r3, r2
 8009558:	bf04      	itt	eq
 800955a:	681a      	ldreq	r2, [r3, #0]
 800955c:	685b      	ldreq	r3, [r3, #4]
 800955e:	6063      	str	r3, [r4, #4]
 8009560:	bf04      	itt	eq
 8009562:	1852      	addeq	r2, r2, r1
 8009564:	6022      	streq	r2, [r4, #0]
 8009566:	6004      	str	r4, [r0, #0]
 8009568:	e7ec      	b.n	8009544 <_free_r+0x24>
 800956a:	4613      	mov	r3, r2
 800956c:	685a      	ldr	r2, [r3, #4]
 800956e:	b10a      	cbz	r2, 8009574 <_free_r+0x54>
 8009570:	42a2      	cmp	r2, r4
 8009572:	d9fa      	bls.n	800956a <_free_r+0x4a>
 8009574:	6819      	ldr	r1, [r3, #0]
 8009576:	1858      	adds	r0, r3, r1
 8009578:	42a0      	cmp	r0, r4
 800957a:	d10b      	bne.n	8009594 <_free_r+0x74>
 800957c:	6820      	ldr	r0, [r4, #0]
 800957e:	4401      	add	r1, r0
 8009580:	1858      	adds	r0, r3, r1
 8009582:	4282      	cmp	r2, r0
 8009584:	6019      	str	r1, [r3, #0]
 8009586:	d1dd      	bne.n	8009544 <_free_r+0x24>
 8009588:	6810      	ldr	r0, [r2, #0]
 800958a:	6852      	ldr	r2, [r2, #4]
 800958c:	605a      	str	r2, [r3, #4]
 800958e:	4401      	add	r1, r0
 8009590:	6019      	str	r1, [r3, #0]
 8009592:	e7d7      	b.n	8009544 <_free_r+0x24>
 8009594:	d902      	bls.n	800959c <_free_r+0x7c>
 8009596:	230c      	movs	r3, #12
 8009598:	602b      	str	r3, [r5, #0]
 800959a:	e7d3      	b.n	8009544 <_free_r+0x24>
 800959c:	6820      	ldr	r0, [r4, #0]
 800959e:	1821      	adds	r1, r4, r0
 80095a0:	428a      	cmp	r2, r1
 80095a2:	bf04      	itt	eq
 80095a4:	6811      	ldreq	r1, [r2, #0]
 80095a6:	6852      	ldreq	r2, [r2, #4]
 80095a8:	6062      	str	r2, [r4, #4]
 80095aa:	bf04      	itt	eq
 80095ac:	1809      	addeq	r1, r1, r0
 80095ae:	6021      	streq	r1, [r4, #0]
 80095b0:	605c      	str	r4, [r3, #4]
 80095b2:	e7c7      	b.n	8009544 <_free_r+0x24>
 80095b4:	bd38      	pop	{r3, r4, r5, pc}
 80095b6:	bf00      	nop
 80095b8:	20000244 	.word	0x20000244

080095bc <_malloc_r>:
 80095bc:	b570      	push	{r4, r5, r6, lr}
 80095be:	1ccd      	adds	r5, r1, #3
 80095c0:	f025 0503 	bic.w	r5, r5, #3
 80095c4:	3508      	adds	r5, #8
 80095c6:	2d0c      	cmp	r5, #12
 80095c8:	bf38      	it	cc
 80095ca:	250c      	movcc	r5, #12
 80095cc:	2d00      	cmp	r5, #0
 80095ce:	4606      	mov	r6, r0
 80095d0:	db01      	blt.n	80095d6 <_malloc_r+0x1a>
 80095d2:	42a9      	cmp	r1, r5
 80095d4:	d903      	bls.n	80095de <_malloc_r+0x22>
 80095d6:	230c      	movs	r3, #12
 80095d8:	6033      	str	r3, [r6, #0]
 80095da:	2000      	movs	r0, #0
 80095dc:	bd70      	pop	{r4, r5, r6, pc}
 80095de:	f000 fa43 	bl	8009a68 <__malloc_lock>
 80095e2:	4a21      	ldr	r2, [pc, #132]	; (8009668 <_malloc_r+0xac>)
 80095e4:	6814      	ldr	r4, [r2, #0]
 80095e6:	4621      	mov	r1, r4
 80095e8:	b991      	cbnz	r1, 8009610 <_malloc_r+0x54>
 80095ea:	4c20      	ldr	r4, [pc, #128]	; (800966c <_malloc_r+0xb0>)
 80095ec:	6823      	ldr	r3, [r4, #0]
 80095ee:	b91b      	cbnz	r3, 80095f8 <_malloc_r+0x3c>
 80095f0:	4630      	mov	r0, r6
 80095f2:	f000 f97d 	bl	80098f0 <_sbrk_r>
 80095f6:	6020      	str	r0, [r4, #0]
 80095f8:	4629      	mov	r1, r5
 80095fa:	4630      	mov	r0, r6
 80095fc:	f000 f978 	bl	80098f0 <_sbrk_r>
 8009600:	1c43      	adds	r3, r0, #1
 8009602:	d124      	bne.n	800964e <_malloc_r+0x92>
 8009604:	230c      	movs	r3, #12
 8009606:	6033      	str	r3, [r6, #0]
 8009608:	4630      	mov	r0, r6
 800960a:	f000 fa2e 	bl	8009a6a <__malloc_unlock>
 800960e:	e7e4      	b.n	80095da <_malloc_r+0x1e>
 8009610:	680b      	ldr	r3, [r1, #0]
 8009612:	1b5b      	subs	r3, r3, r5
 8009614:	d418      	bmi.n	8009648 <_malloc_r+0x8c>
 8009616:	2b0b      	cmp	r3, #11
 8009618:	d90f      	bls.n	800963a <_malloc_r+0x7e>
 800961a:	600b      	str	r3, [r1, #0]
 800961c:	50cd      	str	r5, [r1, r3]
 800961e:	18cc      	adds	r4, r1, r3
 8009620:	4630      	mov	r0, r6
 8009622:	f000 fa22 	bl	8009a6a <__malloc_unlock>
 8009626:	f104 000b 	add.w	r0, r4, #11
 800962a:	1d23      	adds	r3, r4, #4
 800962c:	f020 0007 	bic.w	r0, r0, #7
 8009630:	1ac3      	subs	r3, r0, r3
 8009632:	d0d3      	beq.n	80095dc <_malloc_r+0x20>
 8009634:	425a      	negs	r2, r3
 8009636:	50e2      	str	r2, [r4, r3]
 8009638:	e7d0      	b.n	80095dc <_malloc_r+0x20>
 800963a:	428c      	cmp	r4, r1
 800963c:	684b      	ldr	r3, [r1, #4]
 800963e:	bf16      	itet	ne
 8009640:	6063      	strne	r3, [r4, #4]
 8009642:	6013      	streq	r3, [r2, #0]
 8009644:	460c      	movne	r4, r1
 8009646:	e7eb      	b.n	8009620 <_malloc_r+0x64>
 8009648:	460c      	mov	r4, r1
 800964a:	6849      	ldr	r1, [r1, #4]
 800964c:	e7cc      	b.n	80095e8 <_malloc_r+0x2c>
 800964e:	1cc4      	adds	r4, r0, #3
 8009650:	f024 0403 	bic.w	r4, r4, #3
 8009654:	42a0      	cmp	r0, r4
 8009656:	d005      	beq.n	8009664 <_malloc_r+0xa8>
 8009658:	1a21      	subs	r1, r4, r0
 800965a:	4630      	mov	r0, r6
 800965c:	f000 f948 	bl	80098f0 <_sbrk_r>
 8009660:	3001      	adds	r0, #1
 8009662:	d0cf      	beq.n	8009604 <_malloc_r+0x48>
 8009664:	6025      	str	r5, [r4, #0]
 8009666:	e7db      	b.n	8009620 <_malloc_r+0x64>
 8009668:	20000244 	.word	0x20000244
 800966c:	20000248 	.word	0x20000248

08009670 <__sfputc_r>:
 8009670:	6893      	ldr	r3, [r2, #8]
 8009672:	3b01      	subs	r3, #1
 8009674:	2b00      	cmp	r3, #0
 8009676:	b410      	push	{r4}
 8009678:	6093      	str	r3, [r2, #8]
 800967a:	da08      	bge.n	800968e <__sfputc_r+0x1e>
 800967c:	6994      	ldr	r4, [r2, #24]
 800967e:	42a3      	cmp	r3, r4
 8009680:	db01      	blt.n	8009686 <__sfputc_r+0x16>
 8009682:	290a      	cmp	r1, #10
 8009684:	d103      	bne.n	800968e <__sfputc_r+0x1e>
 8009686:	f85d 4b04 	ldr.w	r4, [sp], #4
 800968a:	f7fe bb5d 	b.w	8007d48 <__swbuf_r>
 800968e:	6813      	ldr	r3, [r2, #0]
 8009690:	1c58      	adds	r0, r3, #1
 8009692:	6010      	str	r0, [r2, #0]
 8009694:	7019      	strb	r1, [r3, #0]
 8009696:	4608      	mov	r0, r1
 8009698:	f85d 4b04 	ldr.w	r4, [sp], #4
 800969c:	4770      	bx	lr

0800969e <__sfputs_r>:
 800969e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096a0:	4606      	mov	r6, r0
 80096a2:	460f      	mov	r7, r1
 80096a4:	4614      	mov	r4, r2
 80096a6:	18d5      	adds	r5, r2, r3
 80096a8:	42ac      	cmp	r4, r5
 80096aa:	d101      	bne.n	80096b0 <__sfputs_r+0x12>
 80096ac:	2000      	movs	r0, #0
 80096ae:	e007      	b.n	80096c0 <__sfputs_r+0x22>
 80096b0:	463a      	mov	r2, r7
 80096b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096b6:	4630      	mov	r0, r6
 80096b8:	f7ff ffda 	bl	8009670 <__sfputc_r>
 80096bc:	1c43      	adds	r3, r0, #1
 80096be:	d1f3      	bne.n	80096a8 <__sfputs_r+0xa>
 80096c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080096c4 <_vfiprintf_r>:
 80096c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096c8:	460c      	mov	r4, r1
 80096ca:	b09d      	sub	sp, #116	; 0x74
 80096cc:	4617      	mov	r7, r2
 80096ce:	461d      	mov	r5, r3
 80096d0:	4606      	mov	r6, r0
 80096d2:	b118      	cbz	r0, 80096dc <_vfiprintf_r+0x18>
 80096d4:	6983      	ldr	r3, [r0, #24]
 80096d6:	b90b      	cbnz	r3, 80096dc <_vfiprintf_r+0x18>
 80096d8:	f7ff fb2a 	bl	8008d30 <__sinit>
 80096dc:	4b7c      	ldr	r3, [pc, #496]	; (80098d0 <_vfiprintf_r+0x20c>)
 80096de:	429c      	cmp	r4, r3
 80096e0:	d158      	bne.n	8009794 <_vfiprintf_r+0xd0>
 80096e2:	6874      	ldr	r4, [r6, #4]
 80096e4:	89a3      	ldrh	r3, [r4, #12]
 80096e6:	0718      	lsls	r0, r3, #28
 80096e8:	d55e      	bpl.n	80097a8 <_vfiprintf_r+0xe4>
 80096ea:	6923      	ldr	r3, [r4, #16]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d05b      	beq.n	80097a8 <_vfiprintf_r+0xe4>
 80096f0:	2300      	movs	r3, #0
 80096f2:	9309      	str	r3, [sp, #36]	; 0x24
 80096f4:	2320      	movs	r3, #32
 80096f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80096fa:	2330      	movs	r3, #48	; 0x30
 80096fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009700:	9503      	str	r5, [sp, #12]
 8009702:	f04f 0b01 	mov.w	fp, #1
 8009706:	46b8      	mov	r8, r7
 8009708:	4645      	mov	r5, r8
 800970a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800970e:	b10b      	cbz	r3, 8009714 <_vfiprintf_r+0x50>
 8009710:	2b25      	cmp	r3, #37	; 0x25
 8009712:	d154      	bne.n	80097be <_vfiprintf_r+0xfa>
 8009714:	ebb8 0a07 	subs.w	sl, r8, r7
 8009718:	d00b      	beq.n	8009732 <_vfiprintf_r+0x6e>
 800971a:	4653      	mov	r3, sl
 800971c:	463a      	mov	r2, r7
 800971e:	4621      	mov	r1, r4
 8009720:	4630      	mov	r0, r6
 8009722:	f7ff ffbc 	bl	800969e <__sfputs_r>
 8009726:	3001      	adds	r0, #1
 8009728:	f000 80c2 	beq.w	80098b0 <_vfiprintf_r+0x1ec>
 800972c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800972e:	4453      	add	r3, sl
 8009730:	9309      	str	r3, [sp, #36]	; 0x24
 8009732:	f898 3000 	ldrb.w	r3, [r8]
 8009736:	2b00      	cmp	r3, #0
 8009738:	f000 80ba 	beq.w	80098b0 <_vfiprintf_r+0x1ec>
 800973c:	2300      	movs	r3, #0
 800973e:	f04f 32ff 	mov.w	r2, #4294967295
 8009742:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009746:	9304      	str	r3, [sp, #16]
 8009748:	9307      	str	r3, [sp, #28]
 800974a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800974e:	931a      	str	r3, [sp, #104]	; 0x68
 8009750:	46a8      	mov	r8, r5
 8009752:	2205      	movs	r2, #5
 8009754:	f818 1b01 	ldrb.w	r1, [r8], #1
 8009758:	485e      	ldr	r0, [pc, #376]	; (80098d4 <_vfiprintf_r+0x210>)
 800975a:	f7f6 fd41 	bl	80001e0 <memchr>
 800975e:	9b04      	ldr	r3, [sp, #16]
 8009760:	bb78      	cbnz	r0, 80097c2 <_vfiprintf_r+0xfe>
 8009762:	06d9      	lsls	r1, r3, #27
 8009764:	bf44      	itt	mi
 8009766:	2220      	movmi	r2, #32
 8009768:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800976c:	071a      	lsls	r2, r3, #28
 800976e:	bf44      	itt	mi
 8009770:	222b      	movmi	r2, #43	; 0x2b
 8009772:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009776:	782a      	ldrb	r2, [r5, #0]
 8009778:	2a2a      	cmp	r2, #42	; 0x2a
 800977a:	d02a      	beq.n	80097d2 <_vfiprintf_r+0x10e>
 800977c:	9a07      	ldr	r2, [sp, #28]
 800977e:	46a8      	mov	r8, r5
 8009780:	2000      	movs	r0, #0
 8009782:	250a      	movs	r5, #10
 8009784:	4641      	mov	r1, r8
 8009786:	f811 3b01 	ldrb.w	r3, [r1], #1
 800978a:	3b30      	subs	r3, #48	; 0x30
 800978c:	2b09      	cmp	r3, #9
 800978e:	d969      	bls.n	8009864 <_vfiprintf_r+0x1a0>
 8009790:	b360      	cbz	r0, 80097ec <_vfiprintf_r+0x128>
 8009792:	e024      	b.n	80097de <_vfiprintf_r+0x11a>
 8009794:	4b50      	ldr	r3, [pc, #320]	; (80098d8 <_vfiprintf_r+0x214>)
 8009796:	429c      	cmp	r4, r3
 8009798:	d101      	bne.n	800979e <_vfiprintf_r+0xda>
 800979a:	68b4      	ldr	r4, [r6, #8]
 800979c:	e7a2      	b.n	80096e4 <_vfiprintf_r+0x20>
 800979e:	4b4f      	ldr	r3, [pc, #316]	; (80098dc <_vfiprintf_r+0x218>)
 80097a0:	429c      	cmp	r4, r3
 80097a2:	bf08      	it	eq
 80097a4:	68f4      	ldreq	r4, [r6, #12]
 80097a6:	e79d      	b.n	80096e4 <_vfiprintf_r+0x20>
 80097a8:	4621      	mov	r1, r4
 80097aa:	4630      	mov	r0, r6
 80097ac:	f7fe fb1e 	bl	8007dec <__swsetup_r>
 80097b0:	2800      	cmp	r0, #0
 80097b2:	d09d      	beq.n	80096f0 <_vfiprintf_r+0x2c>
 80097b4:	f04f 30ff 	mov.w	r0, #4294967295
 80097b8:	b01d      	add	sp, #116	; 0x74
 80097ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097be:	46a8      	mov	r8, r5
 80097c0:	e7a2      	b.n	8009708 <_vfiprintf_r+0x44>
 80097c2:	4a44      	ldr	r2, [pc, #272]	; (80098d4 <_vfiprintf_r+0x210>)
 80097c4:	1a80      	subs	r0, r0, r2
 80097c6:	fa0b f000 	lsl.w	r0, fp, r0
 80097ca:	4318      	orrs	r0, r3
 80097cc:	9004      	str	r0, [sp, #16]
 80097ce:	4645      	mov	r5, r8
 80097d0:	e7be      	b.n	8009750 <_vfiprintf_r+0x8c>
 80097d2:	9a03      	ldr	r2, [sp, #12]
 80097d4:	1d11      	adds	r1, r2, #4
 80097d6:	6812      	ldr	r2, [r2, #0]
 80097d8:	9103      	str	r1, [sp, #12]
 80097da:	2a00      	cmp	r2, #0
 80097dc:	db01      	blt.n	80097e2 <_vfiprintf_r+0x11e>
 80097de:	9207      	str	r2, [sp, #28]
 80097e0:	e004      	b.n	80097ec <_vfiprintf_r+0x128>
 80097e2:	4252      	negs	r2, r2
 80097e4:	f043 0302 	orr.w	r3, r3, #2
 80097e8:	9207      	str	r2, [sp, #28]
 80097ea:	9304      	str	r3, [sp, #16]
 80097ec:	f898 3000 	ldrb.w	r3, [r8]
 80097f0:	2b2e      	cmp	r3, #46	; 0x2e
 80097f2:	d10e      	bne.n	8009812 <_vfiprintf_r+0x14e>
 80097f4:	f898 3001 	ldrb.w	r3, [r8, #1]
 80097f8:	2b2a      	cmp	r3, #42	; 0x2a
 80097fa:	d138      	bne.n	800986e <_vfiprintf_r+0x1aa>
 80097fc:	9b03      	ldr	r3, [sp, #12]
 80097fe:	1d1a      	adds	r2, r3, #4
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	9203      	str	r2, [sp, #12]
 8009804:	2b00      	cmp	r3, #0
 8009806:	bfb8      	it	lt
 8009808:	f04f 33ff 	movlt.w	r3, #4294967295
 800980c:	f108 0802 	add.w	r8, r8, #2
 8009810:	9305      	str	r3, [sp, #20]
 8009812:	4d33      	ldr	r5, [pc, #204]	; (80098e0 <_vfiprintf_r+0x21c>)
 8009814:	f898 1000 	ldrb.w	r1, [r8]
 8009818:	2203      	movs	r2, #3
 800981a:	4628      	mov	r0, r5
 800981c:	f7f6 fce0 	bl	80001e0 <memchr>
 8009820:	b140      	cbz	r0, 8009834 <_vfiprintf_r+0x170>
 8009822:	2340      	movs	r3, #64	; 0x40
 8009824:	1b40      	subs	r0, r0, r5
 8009826:	fa03 f000 	lsl.w	r0, r3, r0
 800982a:	9b04      	ldr	r3, [sp, #16]
 800982c:	4303      	orrs	r3, r0
 800982e:	f108 0801 	add.w	r8, r8, #1
 8009832:	9304      	str	r3, [sp, #16]
 8009834:	f898 1000 	ldrb.w	r1, [r8]
 8009838:	482a      	ldr	r0, [pc, #168]	; (80098e4 <_vfiprintf_r+0x220>)
 800983a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800983e:	2206      	movs	r2, #6
 8009840:	f108 0701 	add.w	r7, r8, #1
 8009844:	f7f6 fccc 	bl	80001e0 <memchr>
 8009848:	2800      	cmp	r0, #0
 800984a:	d037      	beq.n	80098bc <_vfiprintf_r+0x1f8>
 800984c:	4b26      	ldr	r3, [pc, #152]	; (80098e8 <_vfiprintf_r+0x224>)
 800984e:	bb1b      	cbnz	r3, 8009898 <_vfiprintf_r+0x1d4>
 8009850:	9b03      	ldr	r3, [sp, #12]
 8009852:	3307      	adds	r3, #7
 8009854:	f023 0307 	bic.w	r3, r3, #7
 8009858:	3308      	adds	r3, #8
 800985a:	9303      	str	r3, [sp, #12]
 800985c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800985e:	444b      	add	r3, r9
 8009860:	9309      	str	r3, [sp, #36]	; 0x24
 8009862:	e750      	b.n	8009706 <_vfiprintf_r+0x42>
 8009864:	fb05 3202 	mla	r2, r5, r2, r3
 8009868:	2001      	movs	r0, #1
 800986a:	4688      	mov	r8, r1
 800986c:	e78a      	b.n	8009784 <_vfiprintf_r+0xc0>
 800986e:	2300      	movs	r3, #0
 8009870:	f108 0801 	add.w	r8, r8, #1
 8009874:	9305      	str	r3, [sp, #20]
 8009876:	4619      	mov	r1, r3
 8009878:	250a      	movs	r5, #10
 800987a:	4640      	mov	r0, r8
 800987c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009880:	3a30      	subs	r2, #48	; 0x30
 8009882:	2a09      	cmp	r2, #9
 8009884:	d903      	bls.n	800988e <_vfiprintf_r+0x1ca>
 8009886:	2b00      	cmp	r3, #0
 8009888:	d0c3      	beq.n	8009812 <_vfiprintf_r+0x14e>
 800988a:	9105      	str	r1, [sp, #20]
 800988c:	e7c1      	b.n	8009812 <_vfiprintf_r+0x14e>
 800988e:	fb05 2101 	mla	r1, r5, r1, r2
 8009892:	2301      	movs	r3, #1
 8009894:	4680      	mov	r8, r0
 8009896:	e7f0      	b.n	800987a <_vfiprintf_r+0x1b6>
 8009898:	ab03      	add	r3, sp, #12
 800989a:	9300      	str	r3, [sp, #0]
 800989c:	4622      	mov	r2, r4
 800989e:	4b13      	ldr	r3, [pc, #76]	; (80098ec <_vfiprintf_r+0x228>)
 80098a0:	a904      	add	r1, sp, #16
 80098a2:	4630      	mov	r0, r6
 80098a4:	f7fd fd56 	bl	8007354 <_printf_float>
 80098a8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80098ac:	4681      	mov	r9, r0
 80098ae:	d1d5      	bne.n	800985c <_vfiprintf_r+0x198>
 80098b0:	89a3      	ldrh	r3, [r4, #12]
 80098b2:	065b      	lsls	r3, r3, #25
 80098b4:	f53f af7e 	bmi.w	80097b4 <_vfiprintf_r+0xf0>
 80098b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80098ba:	e77d      	b.n	80097b8 <_vfiprintf_r+0xf4>
 80098bc:	ab03      	add	r3, sp, #12
 80098be:	9300      	str	r3, [sp, #0]
 80098c0:	4622      	mov	r2, r4
 80098c2:	4b0a      	ldr	r3, [pc, #40]	; (80098ec <_vfiprintf_r+0x228>)
 80098c4:	a904      	add	r1, sp, #16
 80098c6:	4630      	mov	r0, r6
 80098c8:	f7fd fffa 	bl	80078c0 <_printf_i>
 80098cc:	e7ec      	b.n	80098a8 <_vfiprintf_r+0x1e4>
 80098ce:	bf00      	nop
 80098d0:	0800a900 	.word	0x0800a900
 80098d4:	0800aa3c 	.word	0x0800aa3c
 80098d8:	0800a920 	.word	0x0800a920
 80098dc:	0800a8e0 	.word	0x0800a8e0
 80098e0:	0800aa42 	.word	0x0800aa42
 80098e4:	0800aa46 	.word	0x0800aa46
 80098e8:	08007355 	.word	0x08007355
 80098ec:	0800969f 	.word	0x0800969f

080098f0 <_sbrk_r>:
 80098f0:	b538      	push	{r3, r4, r5, lr}
 80098f2:	4c06      	ldr	r4, [pc, #24]	; (800990c <_sbrk_r+0x1c>)
 80098f4:	2300      	movs	r3, #0
 80098f6:	4605      	mov	r5, r0
 80098f8:	4608      	mov	r0, r1
 80098fa:	6023      	str	r3, [r4, #0]
 80098fc:	f7f8 fe4c 	bl	8002598 <_sbrk>
 8009900:	1c43      	adds	r3, r0, #1
 8009902:	d102      	bne.n	800990a <_sbrk_r+0x1a>
 8009904:	6823      	ldr	r3, [r4, #0]
 8009906:	b103      	cbz	r3, 800990a <_sbrk_r+0x1a>
 8009908:	602b      	str	r3, [r5, #0]
 800990a:	bd38      	pop	{r3, r4, r5, pc}
 800990c:	200039c8 	.word	0x200039c8

08009910 <__sread>:
 8009910:	b510      	push	{r4, lr}
 8009912:	460c      	mov	r4, r1
 8009914:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009918:	f000 f8a8 	bl	8009a6c <_read_r>
 800991c:	2800      	cmp	r0, #0
 800991e:	bfab      	itete	ge
 8009920:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009922:	89a3      	ldrhlt	r3, [r4, #12]
 8009924:	181b      	addge	r3, r3, r0
 8009926:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800992a:	bfac      	ite	ge
 800992c:	6563      	strge	r3, [r4, #84]	; 0x54
 800992e:	81a3      	strhlt	r3, [r4, #12]
 8009930:	bd10      	pop	{r4, pc}

08009932 <__swrite>:
 8009932:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009936:	461f      	mov	r7, r3
 8009938:	898b      	ldrh	r3, [r1, #12]
 800993a:	05db      	lsls	r3, r3, #23
 800993c:	4605      	mov	r5, r0
 800993e:	460c      	mov	r4, r1
 8009940:	4616      	mov	r6, r2
 8009942:	d505      	bpl.n	8009950 <__swrite+0x1e>
 8009944:	2302      	movs	r3, #2
 8009946:	2200      	movs	r2, #0
 8009948:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800994c:	f000 f868 	bl	8009a20 <_lseek_r>
 8009950:	89a3      	ldrh	r3, [r4, #12]
 8009952:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009956:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800995a:	81a3      	strh	r3, [r4, #12]
 800995c:	4632      	mov	r2, r6
 800995e:	463b      	mov	r3, r7
 8009960:	4628      	mov	r0, r5
 8009962:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009966:	f000 b817 	b.w	8009998 <_write_r>

0800996a <__sseek>:
 800996a:	b510      	push	{r4, lr}
 800996c:	460c      	mov	r4, r1
 800996e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009972:	f000 f855 	bl	8009a20 <_lseek_r>
 8009976:	1c43      	adds	r3, r0, #1
 8009978:	89a3      	ldrh	r3, [r4, #12]
 800997a:	bf15      	itete	ne
 800997c:	6560      	strne	r0, [r4, #84]	; 0x54
 800997e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009982:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009986:	81a3      	strheq	r3, [r4, #12]
 8009988:	bf18      	it	ne
 800998a:	81a3      	strhne	r3, [r4, #12]
 800998c:	bd10      	pop	{r4, pc}

0800998e <__sclose>:
 800998e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009992:	f000 b813 	b.w	80099bc <_close_r>
	...

08009998 <_write_r>:
 8009998:	b538      	push	{r3, r4, r5, lr}
 800999a:	4c07      	ldr	r4, [pc, #28]	; (80099b8 <_write_r+0x20>)
 800999c:	4605      	mov	r5, r0
 800999e:	4608      	mov	r0, r1
 80099a0:	4611      	mov	r1, r2
 80099a2:	2200      	movs	r2, #0
 80099a4:	6022      	str	r2, [r4, #0]
 80099a6:	461a      	mov	r2, r3
 80099a8:	f7f8 fda5 	bl	80024f6 <_write>
 80099ac:	1c43      	adds	r3, r0, #1
 80099ae:	d102      	bne.n	80099b6 <_write_r+0x1e>
 80099b0:	6823      	ldr	r3, [r4, #0]
 80099b2:	b103      	cbz	r3, 80099b6 <_write_r+0x1e>
 80099b4:	602b      	str	r3, [r5, #0]
 80099b6:	bd38      	pop	{r3, r4, r5, pc}
 80099b8:	200039c8 	.word	0x200039c8

080099bc <_close_r>:
 80099bc:	b538      	push	{r3, r4, r5, lr}
 80099be:	4c06      	ldr	r4, [pc, #24]	; (80099d8 <_close_r+0x1c>)
 80099c0:	2300      	movs	r3, #0
 80099c2:	4605      	mov	r5, r0
 80099c4:	4608      	mov	r0, r1
 80099c6:	6023      	str	r3, [r4, #0]
 80099c8:	f7f8 fdb1 	bl	800252e <_close>
 80099cc:	1c43      	adds	r3, r0, #1
 80099ce:	d102      	bne.n	80099d6 <_close_r+0x1a>
 80099d0:	6823      	ldr	r3, [r4, #0]
 80099d2:	b103      	cbz	r3, 80099d6 <_close_r+0x1a>
 80099d4:	602b      	str	r3, [r5, #0]
 80099d6:	bd38      	pop	{r3, r4, r5, pc}
 80099d8:	200039c8 	.word	0x200039c8

080099dc <_fstat_r>:
 80099dc:	b538      	push	{r3, r4, r5, lr}
 80099de:	4c07      	ldr	r4, [pc, #28]	; (80099fc <_fstat_r+0x20>)
 80099e0:	2300      	movs	r3, #0
 80099e2:	4605      	mov	r5, r0
 80099e4:	4608      	mov	r0, r1
 80099e6:	4611      	mov	r1, r2
 80099e8:	6023      	str	r3, [r4, #0]
 80099ea:	f7f8 fdac 	bl	8002546 <_fstat>
 80099ee:	1c43      	adds	r3, r0, #1
 80099f0:	d102      	bne.n	80099f8 <_fstat_r+0x1c>
 80099f2:	6823      	ldr	r3, [r4, #0]
 80099f4:	b103      	cbz	r3, 80099f8 <_fstat_r+0x1c>
 80099f6:	602b      	str	r3, [r5, #0]
 80099f8:	bd38      	pop	{r3, r4, r5, pc}
 80099fa:	bf00      	nop
 80099fc:	200039c8 	.word	0x200039c8

08009a00 <_isatty_r>:
 8009a00:	b538      	push	{r3, r4, r5, lr}
 8009a02:	4c06      	ldr	r4, [pc, #24]	; (8009a1c <_isatty_r+0x1c>)
 8009a04:	2300      	movs	r3, #0
 8009a06:	4605      	mov	r5, r0
 8009a08:	4608      	mov	r0, r1
 8009a0a:	6023      	str	r3, [r4, #0]
 8009a0c:	f7f8 fdab 	bl	8002566 <_isatty>
 8009a10:	1c43      	adds	r3, r0, #1
 8009a12:	d102      	bne.n	8009a1a <_isatty_r+0x1a>
 8009a14:	6823      	ldr	r3, [r4, #0]
 8009a16:	b103      	cbz	r3, 8009a1a <_isatty_r+0x1a>
 8009a18:	602b      	str	r3, [r5, #0]
 8009a1a:	bd38      	pop	{r3, r4, r5, pc}
 8009a1c:	200039c8 	.word	0x200039c8

08009a20 <_lseek_r>:
 8009a20:	b538      	push	{r3, r4, r5, lr}
 8009a22:	4c07      	ldr	r4, [pc, #28]	; (8009a40 <_lseek_r+0x20>)
 8009a24:	4605      	mov	r5, r0
 8009a26:	4608      	mov	r0, r1
 8009a28:	4611      	mov	r1, r2
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	6022      	str	r2, [r4, #0]
 8009a2e:	461a      	mov	r2, r3
 8009a30:	f7f8 fda4 	bl	800257c <_lseek>
 8009a34:	1c43      	adds	r3, r0, #1
 8009a36:	d102      	bne.n	8009a3e <_lseek_r+0x1e>
 8009a38:	6823      	ldr	r3, [r4, #0]
 8009a3a:	b103      	cbz	r3, 8009a3e <_lseek_r+0x1e>
 8009a3c:	602b      	str	r3, [r5, #0]
 8009a3e:	bd38      	pop	{r3, r4, r5, pc}
 8009a40:	200039c8 	.word	0x200039c8

08009a44 <__ascii_mbtowc>:
 8009a44:	b082      	sub	sp, #8
 8009a46:	b901      	cbnz	r1, 8009a4a <__ascii_mbtowc+0x6>
 8009a48:	a901      	add	r1, sp, #4
 8009a4a:	b142      	cbz	r2, 8009a5e <__ascii_mbtowc+0x1a>
 8009a4c:	b14b      	cbz	r3, 8009a62 <__ascii_mbtowc+0x1e>
 8009a4e:	7813      	ldrb	r3, [r2, #0]
 8009a50:	600b      	str	r3, [r1, #0]
 8009a52:	7812      	ldrb	r2, [r2, #0]
 8009a54:	1c10      	adds	r0, r2, #0
 8009a56:	bf18      	it	ne
 8009a58:	2001      	movne	r0, #1
 8009a5a:	b002      	add	sp, #8
 8009a5c:	4770      	bx	lr
 8009a5e:	4610      	mov	r0, r2
 8009a60:	e7fb      	b.n	8009a5a <__ascii_mbtowc+0x16>
 8009a62:	f06f 0001 	mvn.w	r0, #1
 8009a66:	e7f8      	b.n	8009a5a <__ascii_mbtowc+0x16>

08009a68 <__malloc_lock>:
 8009a68:	4770      	bx	lr

08009a6a <__malloc_unlock>:
 8009a6a:	4770      	bx	lr

08009a6c <_read_r>:
 8009a6c:	b538      	push	{r3, r4, r5, lr}
 8009a6e:	4c07      	ldr	r4, [pc, #28]	; (8009a8c <_read_r+0x20>)
 8009a70:	4605      	mov	r5, r0
 8009a72:	4608      	mov	r0, r1
 8009a74:	4611      	mov	r1, r2
 8009a76:	2200      	movs	r2, #0
 8009a78:	6022      	str	r2, [r4, #0]
 8009a7a:	461a      	mov	r2, r3
 8009a7c:	f7f8 fd1e 	bl	80024bc <_read>
 8009a80:	1c43      	adds	r3, r0, #1
 8009a82:	d102      	bne.n	8009a8a <_read_r+0x1e>
 8009a84:	6823      	ldr	r3, [r4, #0]
 8009a86:	b103      	cbz	r3, 8009a8a <_read_r+0x1e>
 8009a88:	602b      	str	r3, [r5, #0]
 8009a8a:	bd38      	pop	{r3, r4, r5, pc}
 8009a8c:	200039c8 	.word	0x200039c8

08009a90 <__ascii_wctomb>:
 8009a90:	b149      	cbz	r1, 8009aa6 <__ascii_wctomb+0x16>
 8009a92:	2aff      	cmp	r2, #255	; 0xff
 8009a94:	bf85      	ittet	hi
 8009a96:	238a      	movhi	r3, #138	; 0x8a
 8009a98:	6003      	strhi	r3, [r0, #0]
 8009a9a:	700a      	strbls	r2, [r1, #0]
 8009a9c:	f04f 30ff 	movhi.w	r0, #4294967295
 8009aa0:	bf98      	it	ls
 8009aa2:	2001      	movls	r0, #1
 8009aa4:	4770      	bx	lr
 8009aa6:	4608      	mov	r0, r1
 8009aa8:	4770      	bx	lr
	...

08009aac <cosf>:
 8009aac:	ee10 3a10 	vmov	r3, s0
 8009ab0:	b507      	push	{r0, r1, r2, lr}
 8009ab2:	4a1c      	ldr	r2, [pc, #112]	; (8009b24 <cosf+0x78>)
 8009ab4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009ab8:	4293      	cmp	r3, r2
 8009aba:	dc04      	bgt.n	8009ac6 <cosf+0x1a>
 8009abc:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8009b28 <cosf+0x7c>
 8009ac0:	f000 fad8 	bl	800a074 <__kernel_cosf>
 8009ac4:	e004      	b.n	8009ad0 <cosf+0x24>
 8009ac6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009aca:	db04      	blt.n	8009ad6 <cosf+0x2a>
 8009acc:	ee30 0a40 	vsub.f32	s0, s0, s0
 8009ad0:	b003      	add	sp, #12
 8009ad2:	f85d fb04 	ldr.w	pc, [sp], #4
 8009ad6:	4668      	mov	r0, sp
 8009ad8:	f000 f9a0 	bl	8009e1c <__ieee754_rem_pio2f>
 8009adc:	f000 0003 	and.w	r0, r0, #3
 8009ae0:	2801      	cmp	r0, #1
 8009ae2:	d007      	beq.n	8009af4 <cosf+0x48>
 8009ae4:	2802      	cmp	r0, #2
 8009ae6:	d00e      	beq.n	8009b06 <cosf+0x5a>
 8009ae8:	b9a0      	cbnz	r0, 8009b14 <cosf+0x68>
 8009aea:	eddd 0a01 	vldr	s1, [sp, #4]
 8009aee:	ed9d 0a00 	vldr	s0, [sp]
 8009af2:	e7e5      	b.n	8009ac0 <cosf+0x14>
 8009af4:	eddd 0a01 	vldr	s1, [sp, #4]
 8009af8:	ed9d 0a00 	vldr	s0, [sp]
 8009afc:	f000 fd9a 	bl	800a634 <__kernel_sinf>
 8009b00:	eeb1 0a40 	vneg.f32	s0, s0
 8009b04:	e7e4      	b.n	8009ad0 <cosf+0x24>
 8009b06:	eddd 0a01 	vldr	s1, [sp, #4]
 8009b0a:	ed9d 0a00 	vldr	s0, [sp]
 8009b0e:	f000 fab1 	bl	800a074 <__kernel_cosf>
 8009b12:	e7f5      	b.n	8009b00 <cosf+0x54>
 8009b14:	2001      	movs	r0, #1
 8009b16:	eddd 0a01 	vldr	s1, [sp, #4]
 8009b1a:	ed9d 0a00 	vldr	s0, [sp]
 8009b1e:	f000 fd89 	bl	800a634 <__kernel_sinf>
 8009b22:	e7d5      	b.n	8009ad0 <cosf+0x24>
 8009b24:	3f490fd8 	.word	0x3f490fd8
 8009b28:	00000000 	.word	0x00000000

08009b2c <fmaxf>:
 8009b2c:	b508      	push	{r3, lr}
 8009b2e:	ed2d 8b02 	vpush	{d8}
 8009b32:	eeb0 8a40 	vmov.f32	s16, s0
 8009b36:	eef0 8a60 	vmov.f32	s17, s1
 8009b3a:	f000 f82d 	bl	8009b98 <__fpclassifyf>
 8009b3e:	b148      	cbz	r0, 8009b54 <fmaxf+0x28>
 8009b40:	eeb0 0a68 	vmov.f32	s0, s17
 8009b44:	f000 f828 	bl	8009b98 <__fpclassifyf>
 8009b48:	b130      	cbz	r0, 8009b58 <fmaxf+0x2c>
 8009b4a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8009b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b52:	dc01      	bgt.n	8009b58 <fmaxf+0x2c>
 8009b54:	eeb0 8a68 	vmov.f32	s16, s17
 8009b58:	eeb0 0a48 	vmov.f32	s0, s16
 8009b5c:	ecbd 8b02 	vpop	{d8}
 8009b60:	bd08      	pop	{r3, pc}

08009b62 <fminf>:
 8009b62:	b508      	push	{r3, lr}
 8009b64:	ed2d 8b02 	vpush	{d8}
 8009b68:	eeb0 8a40 	vmov.f32	s16, s0
 8009b6c:	eef0 8a60 	vmov.f32	s17, s1
 8009b70:	f000 f812 	bl	8009b98 <__fpclassifyf>
 8009b74:	b148      	cbz	r0, 8009b8a <fminf+0x28>
 8009b76:	eeb0 0a68 	vmov.f32	s0, s17
 8009b7a:	f000 f80d 	bl	8009b98 <__fpclassifyf>
 8009b7e:	b130      	cbz	r0, 8009b8e <fminf+0x2c>
 8009b80:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8009b84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b88:	d401      	bmi.n	8009b8e <fminf+0x2c>
 8009b8a:	eeb0 8a68 	vmov.f32	s16, s17
 8009b8e:	eeb0 0a48 	vmov.f32	s0, s16
 8009b92:	ecbd 8b02 	vpop	{d8}
 8009b96:	bd08      	pop	{r3, pc}

08009b98 <__fpclassifyf>:
 8009b98:	ee10 3a10 	vmov	r3, s0
 8009b9c:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 8009ba0:	d00d      	beq.n	8009bbe <__fpclassifyf+0x26>
 8009ba2:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 8009ba6:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8009baa:	d30a      	bcc.n	8009bc2 <__fpclassifyf+0x2a>
 8009bac:	4b07      	ldr	r3, [pc, #28]	; (8009bcc <__fpclassifyf+0x34>)
 8009bae:	1e42      	subs	r2, r0, #1
 8009bb0:	429a      	cmp	r2, r3
 8009bb2:	d908      	bls.n	8009bc6 <__fpclassifyf+0x2e>
 8009bb4:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 8009bb8:	4258      	negs	r0, r3
 8009bba:	4158      	adcs	r0, r3
 8009bbc:	4770      	bx	lr
 8009bbe:	2002      	movs	r0, #2
 8009bc0:	4770      	bx	lr
 8009bc2:	2004      	movs	r0, #4
 8009bc4:	4770      	bx	lr
 8009bc6:	2003      	movs	r0, #3
 8009bc8:	4770      	bx	lr
 8009bca:	bf00      	nop
 8009bcc:	007ffffe 	.word	0x007ffffe

08009bd0 <sinf>:
 8009bd0:	ee10 3a10 	vmov	r3, s0
 8009bd4:	b507      	push	{r0, r1, r2, lr}
 8009bd6:	4a1d      	ldr	r2, [pc, #116]	; (8009c4c <sinf+0x7c>)
 8009bd8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009bdc:	4293      	cmp	r3, r2
 8009bde:	dc05      	bgt.n	8009bec <sinf+0x1c>
 8009be0:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8009c50 <sinf+0x80>
 8009be4:	2000      	movs	r0, #0
 8009be6:	f000 fd25 	bl	800a634 <__kernel_sinf>
 8009bea:	e004      	b.n	8009bf6 <sinf+0x26>
 8009bec:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009bf0:	db04      	blt.n	8009bfc <sinf+0x2c>
 8009bf2:	ee30 0a40 	vsub.f32	s0, s0, s0
 8009bf6:	b003      	add	sp, #12
 8009bf8:	f85d fb04 	ldr.w	pc, [sp], #4
 8009bfc:	4668      	mov	r0, sp
 8009bfe:	f000 f90d 	bl	8009e1c <__ieee754_rem_pio2f>
 8009c02:	f000 0003 	and.w	r0, r0, #3
 8009c06:	2801      	cmp	r0, #1
 8009c08:	d008      	beq.n	8009c1c <sinf+0x4c>
 8009c0a:	2802      	cmp	r0, #2
 8009c0c:	d00d      	beq.n	8009c2a <sinf+0x5a>
 8009c0e:	b9b0      	cbnz	r0, 8009c3e <sinf+0x6e>
 8009c10:	2001      	movs	r0, #1
 8009c12:	eddd 0a01 	vldr	s1, [sp, #4]
 8009c16:	ed9d 0a00 	vldr	s0, [sp]
 8009c1a:	e7e4      	b.n	8009be6 <sinf+0x16>
 8009c1c:	eddd 0a01 	vldr	s1, [sp, #4]
 8009c20:	ed9d 0a00 	vldr	s0, [sp]
 8009c24:	f000 fa26 	bl	800a074 <__kernel_cosf>
 8009c28:	e7e5      	b.n	8009bf6 <sinf+0x26>
 8009c2a:	2001      	movs	r0, #1
 8009c2c:	eddd 0a01 	vldr	s1, [sp, #4]
 8009c30:	ed9d 0a00 	vldr	s0, [sp]
 8009c34:	f000 fcfe 	bl	800a634 <__kernel_sinf>
 8009c38:	eeb1 0a40 	vneg.f32	s0, s0
 8009c3c:	e7db      	b.n	8009bf6 <sinf+0x26>
 8009c3e:	eddd 0a01 	vldr	s1, [sp, #4]
 8009c42:	ed9d 0a00 	vldr	s0, [sp]
 8009c46:	f000 fa15 	bl	800a074 <__kernel_cosf>
 8009c4a:	e7f5      	b.n	8009c38 <sinf+0x68>
 8009c4c:	3f490fd8 	.word	0x3f490fd8
 8009c50:	00000000 	.word	0x00000000

08009c54 <fmodf>:
 8009c54:	b5d0      	push	{r4, r6, r7, lr}
 8009c56:	ed2d 8b02 	vpush	{d8}
 8009c5a:	b08a      	sub	sp, #40	; 0x28
 8009c5c:	eef0 8a40 	vmov.f32	s17, s0
 8009c60:	eeb0 8a60 	vmov.f32	s16, s1
 8009c64:	f000 f852 	bl	8009d0c <__ieee754_fmodf>
 8009c68:	4b26      	ldr	r3, [pc, #152]	; (8009d04 <fmodf+0xb0>)
 8009c6a:	f993 4000 	ldrsb.w	r4, [r3]
 8009c6e:	1c63      	adds	r3, r4, #1
 8009c70:	d035      	beq.n	8009cde <fmodf+0x8a>
 8009c72:	eeb4 8a48 	vcmp.f32	s16, s16
 8009c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c7a:	d630      	bvs.n	8009cde <fmodf+0x8a>
 8009c7c:	eef4 8a68 	vcmp.f32	s17, s17
 8009c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c84:	d62b      	bvs.n	8009cde <fmodf+0x8a>
 8009c86:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8009c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c8e:	d126      	bne.n	8009cde <fmodf+0x8a>
 8009c90:	2301      	movs	r3, #1
 8009c92:	9300      	str	r3, [sp, #0]
 8009c94:	4b1c      	ldr	r3, [pc, #112]	; (8009d08 <fmodf+0xb4>)
 8009c96:	9301      	str	r3, [sp, #4]
 8009c98:	ee18 0a90 	vmov	r0, s17
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	9308      	str	r3, [sp, #32]
 8009ca0:	f7f6 fc52 	bl	8000548 <__aeabi_f2d>
 8009ca4:	4606      	mov	r6, r0
 8009ca6:	460f      	mov	r7, r1
 8009ca8:	ee18 0a10 	vmov	r0, s16
 8009cac:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8009cb0:	f7f6 fc4a 	bl	8000548 <__aeabi_f2d>
 8009cb4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009cb8:	b9ac      	cbnz	r4, 8009ce6 <fmodf+0x92>
 8009cba:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009cbe:	4668      	mov	r0, sp
 8009cc0:	f000 fd00 	bl	800a6c4 <matherr>
 8009cc4:	b1c8      	cbz	r0, 8009cfa <fmodf+0xa6>
 8009cc6:	9b08      	ldr	r3, [sp, #32]
 8009cc8:	b11b      	cbz	r3, 8009cd2 <fmodf+0x7e>
 8009cca:	f7fd fa7d 	bl	80071c8 <__errno>
 8009cce:	9b08      	ldr	r3, [sp, #32]
 8009cd0:	6003      	str	r3, [r0, #0]
 8009cd2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009cd6:	f7f6 ff67 	bl	8000ba8 <__aeabi_d2f>
 8009cda:	ee00 0a10 	vmov	s0, r0
 8009cde:	b00a      	add	sp, #40	; 0x28
 8009ce0:	ecbd 8b02 	vpop	{d8}
 8009ce4:	bdd0      	pop	{r4, r6, r7, pc}
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	2300      	movs	r3, #0
 8009cea:	4610      	mov	r0, r2
 8009cec:	4619      	mov	r1, r3
 8009cee:	f7f6 fdad 	bl	800084c <__aeabi_ddiv>
 8009cf2:	2c02      	cmp	r4, #2
 8009cf4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009cf8:	d1e1      	bne.n	8009cbe <fmodf+0x6a>
 8009cfa:	f7fd fa65 	bl	80071c8 <__errno>
 8009cfe:	2321      	movs	r3, #33	; 0x21
 8009d00:	6003      	str	r3, [r0, #0]
 8009d02:	e7e0      	b.n	8009cc6 <fmodf+0x72>
 8009d04:	200001e4 	.word	0x200001e4
 8009d08:	0800ab58 	.word	0x0800ab58

08009d0c <__ieee754_fmodf>:
 8009d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d0e:	ee10 6a90 	vmov	r6, s1
 8009d12:	f036 4500 	bics.w	r5, r6, #2147483648	; 0x80000000
 8009d16:	ee10 3a10 	vmov	r3, s0
 8009d1a:	d009      	beq.n	8009d30 <__ieee754_fmodf+0x24>
 8009d1c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009d20:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8009d24:	ee10 7a10 	vmov	r7, s0
 8009d28:	da02      	bge.n	8009d30 <__ieee754_fmodf+0x24>
 8009d2a:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8009d2e:	dd0a      	ble.n	8009d46 <__ieee754_fmodf+0x3a>
 8009d30:	ee07 3a90 	vmov	s15, r3
 8009d34:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8009d38:	eec0 7aa0 	vdiv.f32	s15, s1, s1
 8009d3c:	ee17 3a90 	vmov	r3, s15
 8009d40:	ee00 3a10 	vmov	s0, r3
 8009d44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d46:	42a9      	cmp	r1, r5
 8009d48:	dbfa      	blt.n	8009d40 <__ieee754_fmodf+0x34>
 8009d4a:	f003 4400 	and.w	r4, r3, #2147483648	; 0x80000000
 8009d4e:	d105      	bne.n	8009d5c <__ieee754_fmodf+0x50>
 8009d50:	4a30      	ldr	r2, [pc, #192]	; (8009e14 <__ieee754_fmodf+0x108>)
 8009d52:	0fe3      	lsrs	r3, r4, #31
 8009d54:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	e7f1      	b.n	8009d40 <__ieee754_fmodf+0x34>
 8009d5c:	4b2e      	ldr	r3, [pc, #184]	; (8009e18 <__ieee754_fmodf+0x10c>)
 8009d5e:	4299      	cmp	r1, r3
 8009d60:	dc3e      	bgt.n	8009de0 <__ieee754_fmodf+0xd4>
 8009d62:	020a      	lsls	r2, r1, #8
 8009d64:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 8009d68:	2a00      	cmp	r2, #0
 8009d6a:	dc36      	bgt.n	8009dda <__ieee754_fmodf+0xce>
 8009d6c:	429d      	cmp	r5, r3
 8009d6e:	dc3a      	bgt.n	8009de6 <__ieee754_fmodf+0xda>
 8009d70:	022b      	lsls	r3, r5, #8
 8009d72:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 8009d76:	005b      	lsls	r3, r3, #1
 8009d78:	f102 32ff 	add.w	r2, r2, #4294967295
 8009d7c:	d5fb      	bpl.n	8009d76 <__ieee754_fmodf+0x6a>
 8009d7e:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 8009d82:	bfbb      	ittet	lt
 8009d84:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 8009d88:	1a1b      	sublt	r3, r3, r0
 8009d8a:	f3c7 0116 	ubfxge	r1, r7, #0, #23
 8009d8e:	4099      	lsllt	r1, r3
 8009d90:	bfa8      	it	ge
 8009d92:	f441 0100 	orrge.w	r1, r1, #8388608	; 0x800000
 8009d96:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 8009d9a:	bfb5      	itete	lt
 8009d9c:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 8009da0:	f3c6 0516 	ubfxge	r5, r6, #0, #23
 8009da4:	1a9b      	sublt	r3, r3, r2
 8009da6:	f445 0500 	orrge.w	r5, r5, #8388608	; 0x800000
 8009daa:	bfb8      	it	lt
 8009dac:	409d      	lsllt	r5, r3
 8009dae:	1a80      	subs	r0, r0, r2
 8009db0:	1b4b      	subs	r3, r1, r5
 8009db2:	b9d8      	cbnz	r0, 8009dec <__ieee754_fmodf+0xe0>
 8009db4:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 8009db8:	bf28      	it	cs
 8009dba:	460b      	movcs	r3, r1
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d0c7      	beq.n	8009d50 <__ieee754_fmodf+0x44>
 8009dc0:	4915      	ldr	r1, [pc, #84]	; (8009e18 <__ieee754_fmodf+0x10c>)
 8009dc2:	428b      	cmp	r3, r1
 8009dc4:	dd1a      	ble.n	8009dfc <__ieee754_fmodf+0xf0>
 8009dc6:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 8009dca:	db1a      	blt.n	8009e02 <__ieee754_fmodf+0xf6>
 8009dcc:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8009dd0:	4323      	orrs	r3, r4
 8009dd2:	327f      	adds	r2, #127	; 0x7f
 8009dd4:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8009dd8:	e7b2      	b.n	8009d40 <__ieee754_fmodf+0x34>
 8009dda:	3801      	subs	r0, #1
 8009ddc:	0052      	lsls	r2, r2, #1
 8009dde:	e7c3      	b.n	8009d68 <__ieee754_fmodf+0x5c>
 8009de0:	15c8      	asrs	r0, r1, #23
 8009de2:	387f      	subs	r0, #127	; 0x7f
 8009de4:	e7c2      	b.n	8009d6c <__ieee754_fmodf+0x60>
 8009de6:	15ea      	asrs	r2, r5, #23
 8009de8:	3a7f      	subs	r2, #127	; 0x7f
 8009dea:	e7c8      	b.n	8009d7e <__ieee754_fmodf+0x72>
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	da02      	bge.n	8009df6 <__ieee754_fmodf+0xea>
 8009df0:	0049      	lsls	r1, r1, #1
 8009df2:	3801      	subs	r0, #1
 8009df4:	e7dc      	b.n	8009db0 <__ieee754_fmodf+0xa4>
 8009df6:	d0ab      	beq.n	8009d50 <__ieee754_fmodf+0x44>
 8009df8:	0059      	lsls	r1, r3, #1
 8009dfa:	e7fa      	b.n	8009df2 <__ieee754_fmodf+0xe6>
 8009dfc:	005b      	lsls	r3, r3, #1
 8009dfe:	3a01      	subs	r2, #1
 8009e00:	e7df      	b.n	8009dc2 <__ieee754_fmodf+0xb6>
 8009e02:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009e06:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009e0a:	3282      	adds	r2, #130	; 0x82
 8009e0c:	4113      	asrs	r3, r2
 8009e0e:	4323      	orrs	r3, r4
 8009e10:	e796      	b.n	8009d40 <__ieee754_fmodf+0x34>
 8009e12:	bf00      	nop
 8009e14:	0800ab60 	.word	0x0800ab60
 8009e18:	007fffff 	.word	0x007fffff

08009e1c <__ieee754_rem_pio2f>:
 8009e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e1e:	ee10 6a10 	vmov	r6, s0
 8009e22:	4b86      	ldr	r3, [pc, #536]	; (800a03c <__ieee754_rem_pio2f+0x220>)
 8009e24:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8009e28:	429c      	cmp	r4, r3
 8009e2a:	b087      	sub	sp, #28
 8009e2c:	4605      	mov	r5, r0
 8009e2e:	dc05      	bgt.n	8009e3c <__ieee754_rem_pio2f+0x20>
 8009e30:	2300      	movs	r3, #0
 8009e32:	ed85 0a00 	vstr	s0, [r5]
 8009e36:	6043      	str	r3, [r0, #4]
 8009e38:	2000      	movs	r0, #0
 8009e3a:	e020      	b.n	8009e7e <__ieee754_rem_pio2f+0x62>
 8009e3c:	4b80      	ldr	r3, [pc, #512]	; (800a040 <__ieee754_rem_pio2f+0x224>)
 8009e3e:	429c      	cmp	r4, r3
 8009e40:	dc38      	bgt.n	8009eb4 <__ieee754_rem_pio2f+0x98>
 8009e42:	2e00      	cmp	r6, #0
 8009e44:	f024 040f 	bic.w	r4, r4, #15
 8009e48:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 800a044 <__ieee754_rem_pio2f+0x228>
 8009e4c:	4b7e      	ldr	r3, [pc, #504]	; (800a048 <__ieee754_rem_pio2f+0x22c>)
 8009e4e:	dd18      	ble.n	8009e82 <__ieee754_rem_pio2f+0x66>
 8009e50:	429c      	cmp	r4, r3
 8009e52:	ee70 7a47 	vsub.f32	s15, s0, s14
 8009e56:	bf09      	itett	eq
 8009e58:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 800a04c <__ieee754_rem_pio2f+0x230>
 8009e5c:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 800a050 <__ieee754_rem_pio2f+0x234>
 8009e60:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8009e64:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 800a054 <__ieee754_rem_pio2f+0x238>
 8009e68:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8009e6c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009e70:	edc0 6a00 	vstr	s13, [r0]
 8009e74:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009e78:	edc0 7a01 	vstr	s15, [r0, #4]
 8009e7c:	2001      	movs	r0, #1
 8009e7e:	b007      	add	sp, #28
 8009e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e82:	429c      	cmp	r4, r3
 8009e84:	ee70 7a07 	vadd.f32	s15, s0, s14
 8009e88:	bf09      	itett	eq
 8009e8a:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 800a04c <__ieee754_rem_pio2f+0x230>
 8009e8e:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 800a050 <__ieee754_rem_pio2f+0x234>
 8009e92:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8009e96:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 800a054 <__ieee754_rem_pio2f+0x238>
 8009e9a:	ee77 6a87 	vadd.f32	s13, s15, s14
 8009e9e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009ea2:	edc0 6a00 	vstr	s13, [r0]
 8009ea6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009eaa:	edc0 7a01 	vstr	s15, [r0, #4]
 8009eae:	f04f 30ff 	mov.w	r0, #4294967295
 8009eb2:	e7e4      	b.n	8009e7e <__ieee754_rem_pio2f+0x62>
 8009eb4:	4b68      	ldr	r3, [pc, #416]	; (800a058 <__ieee754_rem_pio2f+0x23c>)
 8009eb6:	429c      	cmp	r4, r3
 8009eb8:	dc71      	bgt.n	8009f9e <__ieee754_rem_pio2f+0x182>
 8009eba:	f000 fc05 	bl	800a6c8 <fabsf>
 8009ebe:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800a05c <__ieee754_rem_pio2f+0x240>
 8009ec2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8009ec6:	eee0 7a07 	vfma.f32	s15, s0, s14
 8009eca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009ece:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8009ed2:	ee17 0a90 	vmov	r0, s15
 8009ed6:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800a044 <__ieee754_rem_pio2f+0x228>
 8009eda:	eeb1 7a46 	vneg.f32	s14, s12
 8009ede:	eea7 0a27 	vfma.f32	s0, s14, s15
 8009ee2:	281f      	cmp	r0, #31
 8009ee4:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800a050 <__ieee754_rem_pio2f+0x234>
 8009ee8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8009eec:	ee70 6a67 	vsub.f32	s13, s0, s15
 8009ef0:	ee16 3a90 	vmov	r3, s13
 8009ef4:	dc1c      	bgt.n	8009f30 <__ieee754_rem_pio2f+0x114>
 8009ef6:	1e47      	subs	r7, r0, #1
 8009ef8:	4959      	ldr	r1, [pc, #356]	; (800a060 <__ieee754_rem_pio2f+0x244>)
 8009efa:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8009efe:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 8009f02:	428a      	cmp	r2, r1
 8009f04:	d014      	beq.n	8009f30 <__ieee754_rem_pio2f+0x114>
 8009f06:	602b      	str	r3, [r5, #0]
 8009f08:	ed95 7a00 	vldr	s14, [r5]
 8009f0c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8009f10:	2e00      	cmp	r6, #0
 8009f12:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009f16:	ed85 0a01 	vstr	s0, [r5, #4]
 8009f1a:	dab0      	bge.n	8009e7e <__ieee754_rem_pio2f+0x62>
 8009f1c:	eeb1 7a47 	vneg.f32	s14, s14
 8009f20:	eeb1 0a40 	vneg.f32	s0, s0
 8009f24:	ed85 7a00 	vstr	s14, [r5]
 8009f28:	ed85 0a01 	vstr	s0, [r5, #4]
 8009f2c:	4240      	negs	r0, r0
 8009f2e:	e7a6      	b.n	8009e7e <__ieee754_rem_pio2f+0x62>
 8009f30:	15e4      	asrs	r4, r4, #23
 8009f32:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8009f36:	1aa2      	subs	r2, r4, r2
 8009f38:	2a08      	cmp	r2, #8
 8009f3a:	dde4      	ble.n	8009f06 <__ieee754_rem_pio2f+0xea>
 8009f3c:	eddf 7a43 	vldr	s15, [pc, #268]	; 800a04c <__ieee754_rem_pio2f+0x230>
 8009f40:	eef0 6a40 	vmov.f32	s13, s0
 8009f44:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009f48:	ee30 0a66 	vsub.f32	s0, s0, s13
 8009f4c:	eea7 0a27 	vfma.f32	s0, s14, s15
 8009f50:	eddf 7a40 	vldr	s15, [pc, #256]	; 800a054 <__ieee754_rem_pio2f+0x238>
 8009f54:	ee96 0a27 	vfnms.f32	s0, s12, s15
 8009f58:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8009f5c:	eef0 7a40 	vmov.f32	s15, s0
 8009f60:	ee15 3a90 	vmov	r3, s11
 8009f64:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8009f68:	1aa4      	subs	r4, r4, r2
 8009f6a:	2c19      	cmp	r4, #25
 8009f6c:	dc04      	bgt.n	8009f78 <__ieee754_rem_pio2f+0x15c>
 8009f6e:	edc5 5a00 	vstr	s11, [r5]
 8009f72:	eeb0 0a66 	vmov.f32	s0, s13
 8009f76:	e7c7      	b.n	8009f08 <__ieee754_rem_pio2f+0xec>
 8009f78:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800a064 <__ieee754_rem_pio2f+0x248>
 8009f7c:	eeb0 0a66 	vmov.f32	s0, s13
 8009f80:	eea7 0a25 	vfma.f32	s0, s14, s11
 8009f84:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8009f88:	eee7 7a25 	vfma.f32	s15, s14, s11
 8009f8c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800a068 <__ieee754_rem_pio2f+0x24c>
 8009f90:	eed6 7a07 	vfnms.f32	s15, s12, s14
 8009f94:	ee30 7a67 	vsub.f32	s14, s0, s15
 8009f98:	ed85 7a00 	vstr	s14, [r5]
 8009f9c:	e7b4      	b.n	8009f08 <__ieee754_rem_pio2f+0xec>
 8009f9e:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8009fa2:	db06      	blt.n	8009fb2 <__ieee754_rem_pio2f+0x196>
 8009fa4:	ee70 7a40 	vsub.f32	s15, s0, s0
 8009fa8:	edc0 7a01 	vstr	s15, [r0, #4]
 8009fac:	edc0 7a00 	vstr	s15, [r0]
 8009fb0:	e742      	b.n	8009e38 <__ieee754_rem_pio2f+0x1c>
 8009fb2:	15e2      	asrs	r2, r4, #23
 8009fb4:	3a86      	subs	r2, #134	; 0x86
 8009fb6:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 8009fba:	ee07 3a90 	vmov	s15, r3
 8009fbe:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8009fc2:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800a06c <__ieee754_rem_pio2f+0x250>
 8009fc6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009fca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009fce:	ed8d 7a03 	vstr	s14, [sp, #12]
 8009fd2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009fd6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8009fda:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009fde:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009fe2:	ed8d 7a04 	vstr	s14, [sp, #16]
 8009fe6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009fea:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ff2:	edcd 7a05 	vstr	s15, [sp, #20]
 8009ff6:	d11e      	bne.n	800a036 <__ieee754_rem_pio2f+0x21a>
 8009ff8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8009ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a000:	bf0c      	ite	eq
 800a002:	2301      	moveq	r3, #1
 800a004:	2302      	movne	r3, #2
 800a006:	491a      	ldr	r1, [pc, #104]	; (800a070 <__ieee754_rem_pio2f+0x254>)
 800a008:	9101      	str	r1, [sp, #4]
 800a00a:	2102      	movs	r1, #2
 800a00c:	9100      	str	r1, [sp, #0]
 800a00e:	a803      	add	r0, sp, #12
 800a010:	4629      	mov	r1, r5
 800a012:	f000 f88d 	bl	800a130 <__kernel_rem_pio2f>
 800a016:	2e00      	cmp	r6, #0
 800a018:	f6bf af31 	bge.w	8009e7e <__ieee754_rem_pio2f+0x62>
 800a01c:	edd5 7a00 	vldr	s15, [r5]
 800a020:	eef1 7a67 	vneg.f32	s15, s15
 800a024:	edc5 7a00 	vstr	s15, [r5]
 800a028:	edd5 7a01 	vldr	s15, [r5, #4]
 800a02c:	eef1 7a67 	vneg.f32	s15, s15
 800a030:	edc5 7a01 	vstr	s15, [r5, #4]
 800a034:	e77a      	b.n	8009f2c <__ieee754_rem_pio2f+0x110>
 800a036:	2303      	movs	r3, #3
 800a038:	e7e5      	b.n	800a006 <__ieee754_rem_pio2f+0x1ea>
 800a03a:	bf00      	nop
 800a03c:	3f490fd8 	.word	0x3f490fd8
 800a040:	4016cbe3 	.word	0x4016cbe3
 800a044:	3fc90f80 	.word	0x3fc90f80
 800a048:	3fc90fd0 	.word	0x3fc90fd0
 800a04c:	37354400 	.word	0x37354400
 800a050:	37354443 	.word	0x37354443
 800a054:	2e85a308 	.word	0x2e85a308
 800a058:	43490f80 	.word	0x43490f80
 800a05c:	3f22f984 	.word	0x3f22f984
 800a060:	0800ab68 	.word	0x0800ab68
 800a064:	2e85a300 	.word	0x2e85a300
 800a068:	248d3132 	.word	0x248d3132
 800a06c:	43800000 	.word	0x43800000
 800a070:	0800abe8 	.word	0x0800abe8

0800a074 <__kernel_cosf>:
 800a074:	ee10 3a10 	vmov	r3, s0
 800a078:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a07c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800a080:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a084:	da05      	bge.n	800a092 <__kernel_cosf+0x1e>
 800a086:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800a08a:	ee17 2a90 	vmov	r2, s15
 800a08e:	2a00      	cmp	r2, #0
 800a090:	d03b      	beq.n	800a10a <__kernel_cosf+0x96>
 800a092:	ee20 6a00 	vmul.f32	s12, s0, s0
 800a096:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a09a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a110 <__kernel_cosf+0x9c>
 800a09e:	4a1d      	ldr	r2, [pc, #116]	; (800a114 <__kernel_cosf+0xa0>)
 800a0a0:	ee66 7a07 	vmul.f32	s15, s12, s14
 800a0a4:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800a118 <__kernel_cosf+0xa4>
 800a0a8:	eea6 7a25 	vfma.f32	s14, s12, s11
 800a0ac:	4293      	cmp	r3, r2
 800a0ae:	eddf 5a1b 	vldr	s11, [pc, #108]	; 800a11c <__kernel_cosf+0xa8>
 800a0b2:	eee7 5a06 	vfma.f32	s11, s14, s12
 800a0b6:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800a120 <__kernel_cosf+0xac>
 800a0ba:	eea5 7a86 	vfma.f32	s14, s11, s12
 800a0be:	eddf 5a19 	vldr	s11, [pc, #100]	; 800a124 <__kernel_cosf+0xb0>
 800a0c2:	eee7 5a06 	vfma.f32	s11, s14, s12
 800a0c6:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800a128 <__kernel_cosf+0xb4>
 800a0ca:	eea5 7a86 	vfma.f32	s14, s11, s12
 800a0ce:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 800a0d2:	ee27 7a06 	vmul.f32	s14, s14, s12
 800a0d6:	eee6 0a07 	vfma.f32	s1, s12, s14
 800a0da:	dc04      	bgt.n	800a0e6 <__kernel_cosf+0x72>
 800a0dc:	ee77 0ae0 	vsub.f32	s1, s15, s1
 800a0e0:	ee36 0ae0 	vsub.f32	s0, s13, s1
 800a0e4:	4770      	bx	lr
 800a0e6:	4a11      	ldr	r2, [pc, #68]	; (800a12c <__kernel_cosf+0xb8>)
 800a0e8:	4293      	cmp	r3, r2
 800a0ea:	bfda      	itte	le
 800a0ec:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800a0f0:	ee07 3a10 	vmovle	s14, r3
 800a0f4:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 800a0f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a0fc:	ee36 0ac7 	vsub.f32	s0, s13, s14
 800a100:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800a104:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a108:	4770      	bx	lr
 800a10a:	eeb0 0a66 	vmov.f32	s0, s13
 800a10e:	4770      	bx	lr
 800a110:	ad47d74e 	.word	0xad47d74e
 800a114:	3e999999 	.word	0x3e999999
 800a118:	310f74f6 	.word	0x310f74f6
 800a11c:	b493f27c 	.word	0xb493f27c
 800a120:	37d00d01 	.word	0x37d00d01
 800a124:	bab60b61 	.word	0xbab60b61
 800a128:	3d2aaaab 	.word	0x3d2aaaab
 800a12c:	3f480000 	.word	0x3f480000

0800a130 <__kernel_rem_pio2f>:
 800a130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a134:	ed2d 8b04 	vpush	{d8-d9}
 800a138:	b0d7      	sub	sp, #348	; 0x15c
 800a13a:	469b      	mov	fp, r3
 800a13c:	460e      	mov	r6, r1
 800a13e:	4bbe      	ldr	r3, [pc, #760]	; (800a438 <__kernel_rem_pio2f+0x308>)
 800a140:	9964      	ldr	r1, [sp, #400]	; 0x190
 800a142:	9002      	str	r0, [sp, #8]
 800a144:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800a148:	9865      	ldr	r0, [sp, #404]	; 0x194
 800a14a:	ed9f 7abf 	vldr	s14, [pc, #764]	; 800a448 <__kernel_rem_pio2f+0x318>
 800a14e:	1ed1      	subs	r1, r2, #3
 800a150:	2308      	movs	r3, #8
 800a152:	fb91 f1f3 	sdiv	r1, r1, r3
 800a156:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800a15a:	f10b 3aff 	add.w	sl, fp, #4294967295
 800a15e:	1c4c      	adds	r4, r1, #1
 800a160:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 800a164:	eba1 050a 	sub.w	r5, r1, sl
 800a168:	aa1a      	add	r2, sp, #104	; 0x68
 800a16a:	eb09 070a 	add.w	r7, r9, sl
 800a16e:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 800a172:	4696      	mov	lr, r2
 800a174:	2300      	movs	r3, #0
 800a176:	42bb      	cmp	r3, r7
 800a178:	dd0f      	ble.n	800a19a <__kernel_rem_pio2f+0x6a>
 800a17a:	af42      	add	r7, sp, #264	; 0x108
 800a17c:	2200      	movs	r2, #0
 800a17e:	454a      	cmp	r2, r9
 800a180:	dc27      	bgt.n	800a1d2 <__kernel_rem_pio2f+0xa2>
 800a182:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 800a186:	eb0b 0302 	add.w	r3, fp, r2
 800a18a:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 800a18e:	9d02      	ldr	r5, [sp, #8]
 800a190:	eddf 7aad 	vldr	s15, [pc, #692]	; 800a448 <__kernel_rem_pio2f+0x318>
 800a194:	f04f 0c00 	mov.w	ip, #0
 800a198:	e015      	b.n	800a1c6 <__kernel_rem_pio2f+0x96>
 800a19a:	42dd      	cmn	r5, r3
 800a19c:	bf5d      	ittte	pl
 800a19e:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 800a1a2:	ee07 2a90 	vmovpl	s15, r2
 800a1a6:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800a1aa:	eef0 7a47 	vmovmi.f32	s15, s14
 800a1ae:	ecee 7a01 	vstmia	lr!, {s15}
 800a1b2:	3301      	adds	r3, #1
 800a1b4:	e7df      	b.n	800a176 <__kernel_rem_pio2f+0x46>
 800a1b6:	ecf5 6a01 	vldmia	r5!, {s13}
 800a1ba:	ed33 7a01 	vldmdb	r3!, {s14}
 800a1be:	eee6 7a87 	vfma.f32	s15, s13, s14
 800a1c2:	f10c 0c01 	add.w	ip, ip, #1
 800a1c6:	45d4      	cmp	ip, sl
 800a1c8:	ddf5      	ble.n	800a1b6 <__kernel_rem_pio2f+0x86>
 800a1ca:	ece7 7a01 	vstmia	r7!, {s15}
 800a1ce:	3201      	adds	r2, #1
 800a1d0:	e7d5      	b.n	800a17e <__kernel_rem_pio2f+0x4e>
 800a1d2:	ab06      	add	r3, sp, #24
 800a1d4:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800a1d8:	9304      	str	r3, [sp, #16]
 800a1da:	eddf 8a9a 	vldr	s17, [pc, #616]	; 800a444 <__kernel_rem_pio2f+0x314>
 800a1de:	ed9f 9a98 	vldr	s18, [pc, #608]	; 800a440 <__kernel_rem_pio2f+0x310>
 800a1e2:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800a1e6:	9303      	str	r3, [sp, #12]
 800a1e8:	464d      	mov	r5, r9
 800a1ea:	ab56      	add	r3, sp, #344	; 0x158
 800a1ec:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 800a1f0:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800a1f4:	3f01      	subs	r7, #1
 800a1f6:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 800a1fa:	00bf      	lsls	r7, r7, #2
 800a1fc:	ab56      	add	r3, sp, #344	; 0x158
 800a1fe:	19da      	adds	r2, r3, r7
 800a200:	3a4c      	subs	r2, #76	; 0x4c
 800a202:	2300      	movs	r3, #0
 800a204:	1ae9      	subs	r1, r5, r3
 800a206:	2900      	cmp	r1, #0
 800a208:	dc4c      	bgt.n	800a2a4 <__kernel_rem_pio2f+0x174>
 800a20a:	4620      	mov	r0, r4
 800a20c:	f000 faa6 	bl	800a75c <scalbnf>
 800a210:	eeb0 8a40 	vmov.f32	s16, s0
 800a214:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800a218:	ee28 0a00 	vmul.f32	s0, s16, s0
 800a21c:	f000 fa5c 	bl	800a6d8 <floorf>
 800a220:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800a224:	eea0 8a67 	vfms.f32	s16, s0, s15
 800a228:	2c00      	cmp	r4, #0
 800a22a:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800a22e:	edcd 7a01 	vstr	s15, [sp, #4]
 800a232:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a236:	ee38 8a67 	vsub.f32	s16, s16, s15
 800a23a:	dd48      	ble.n	800a2ce <__kernel_rem_pio2f+0x19e>
 800a23c:	1e69      	subs	r1, r5, #1
 800a23e:	ab06      	add	r3, sp, #24
 800a240:	f1c4 0008 	rsb	r0, r4, #8
 800a244:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 800a248:	9a01      	ldr	r2, [sp, #4]
 800a24a:	fa4c f300 	asr.w	r3, ip, r0
 800a24e:	441a      	add	r2, r3
 800a250:	4083      	lsls	r3, r0
 800a252:	9201      	str	r2, [sp, #4]
 800a254:	ebac 0203 	sub.w	r2, ip, r3
 800a258:	ab06      	add	r3, sp, #24
 800a25a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800a25e:	f1c4 0307 	rsb	r3, r4, #7
 800a262:	fa42 f803 	asr.w	r8, r2, r3
 800a266:	f1b8 0f00 	cmp.w	r8, #0
 800a26a:	dd41      	ble.n	800a2f0 <__kernel_rem_pio2f+0x1c0>
 800a26c:	9b01      	ldr	r3, [sp, #4]
 800a26e:	2000      	movs	r0, #0
 800a270:	3301      	adds	r3, #1
 800a272:	9301      	str	r3, [sp, #4]
 800a274:	4601      	mov	r1, r0
 800a276:	4285      	cmp	r5, r0
 800a278:	dc6d      	bgt.n	800a356 <__kernel_rem_pio2f+0x226>
 800a27a:	2c00      	cmp	r4, #0
 800a27c:	dd04      	ble.n	800a288 <__kernel_rem_pio2f+0x158>
 800a27e:	2c01      	cmp	r4, #1
 800a280:	d07e      	beq.n	800a380 <__kernel_rem_pio2f+0x250>
 800a282:	2c02      	cmp	r4, #2
 800a284:	f000 8086 	beq.w	800a394 <__kernel_rem_pio2f+0x264>
 800a288:	f1b8 0f02 	cmp.w	r8, #2
 800a28c:	d130      	bne.n	800a2f0 <__kernel_rem_pio2f+0x1c0>
 800a28e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800a292:	ee30 8a48 	vsub.f32	s16, s0, s16
 800a296:	b359      	cbz	r1, 800a2f0 <__kernel_rem_pio2f+0x1c0>
 800a298:	4620      	mov	r0, r4
 800a29a:	f000 fa5f 	bl	800a75c <scalbnf>
 800a29e:	ee38 8a40 	vsub.f32	s16, s16, s0
 800a2a2:	e025      	b.n	800a2f0 <__kernel_rem_pio2f+0x1c0>
 800a2a4:	ee60 7a28 	vmul.f32	s15, s0, s17
 800a2a8:	a806      	add	r0, sp, #24
 800a2aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a2ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a2b2:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800a2b6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800a2ba:	ee10 1a10 	vmov	r1, s0
 800a2be:	ed32 0a01 	vldmdb	r2!, {s0}
 800a2c2:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 800a2c6:	ee37 0a80 	vadd.f32	s0, s15, s0
 800a2ca:	3301      	adds	r3, #1
 800a2cc:	e79a      	b.n	800a204 <__kernel_rem_pio2f+0xd4>
 800a2ce:	d106      	bne.n	800a2de <__kernel_rem_pio2f+0x1ae>
 800a2d0:	1e6b      	subs	r3, r5, #1
 800a2d2:	aa06      	add	r2, sp, #24
 800a2d4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a2d8:	ea4f 2822 	mov.w	r8, r2, asr #8
 800a2dc:	e7c3      	b.n	800a266 <__kernel_rem_pio2f+0x136>
 800a2de:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800a2e2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800a2e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2ea:	da31      	bge.n	800a350 <__kernel_rem_pio2f+0x220>
 800a2ec:	f04f 0800 	mov.w	r8, #0
 800a2f0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800a2f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2f8:	f040 80a8 	bne.w	800a44c <__kernel_rem_pio2f+0x31c>
 800a2fc:	1e6b      	subs	r3, r5, #1
 800a2fe:	4618      	mov	r0, r3
 800a300:	2200      	movs	r2, #0
 800a302:	4548      	cmp	r0, r9
 800a304:	da4d      	bge.n	800a3a2 <__kernel_rem_pio2f+0x272>
 800a306:	2a00      	cmp	r2, #0
 800a308:	f000 8087 	beq.w	800a41a <__kernel_rem_pio2f+0x2ea>
 800a30c:	aa06      	add	r2, sp, #24
 800a30e:	3c08      	subs	r4, #8
 800a310:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a314:	2900      	cmp	r1, #0
 800a316:	f000 808d 	beq.w	800a434 <__kernel_rem_pio2f+0x304>
 800a31a:	4620      	mov	r0, r4
 800a31c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800a320:	9302      	str	r3, [sp, #8]
 800a322:	f000 fa1b 	bl	800a75c <scalbnf>
 800a326:	9b02      	ldr	r3, [sp, #8]
 800a328:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800a444 <__kernel_rem_pio2f+0x314>
 800a32c:	0099      	lsls	r1, r3, #2
 800a32e:	aa42      	add	r2, sp, #264	; 0x108
 800a330:	1850      	adds	r0, r2, r1
 800a332:	1d05      	adds	r5, r0, #4
 800a334:	461c      	mov	r4, r3
 800a336:	2c00      	cmp	r4, #0
 800a338:	f280 80b8 	bge.w	800a4ac <__kernel_rem_pio2f+0x37c>
 800a33c:	2500      	movs	r5, #0
 800a33e:	1b5c      	subs	r4, r3, r5
 800a340:	2c00      	cmp	r4, #0
 800a342:	f2c0 80d8 	blt.w	800a4f6 <__kernel_rem_pio2f+0x3c6>
 800a346:	4f3d      	ldr	r7, [pc, #244]	; (800a43c <__kernel_rem_pio2f+0x30c>)
 800a348:	eddf 7a3f 	vldr	s15, [pc, #252]	; 800a448 <__kernel_rem_pio2f+0x318>
 800a34c:	2400      	movs	r4, #0
 800a34e:	e0c6      	b.n	800a4de <__kernel_rem_pio2f+0x3ae>
 800a350:	f04f 0802 	mov.w	r8, #2
 800a354:	e78a      	b.n	800a26c <__kernel_rem_pio2f+0x13c>
 800a356:	ab06      	add	r3, sp, #24
 800a358:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800a35c:	b949      	cbnz	r1, 800a372 <__kernel_rem_pio2f+0x242>
 800a35e:	b12b      	cbz	r3, 800a36c <__kernel_rem_pio2f+0x23c>
 800a360:	aa06      	add	r2, sp, #24
 800a362:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800a366:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800a36a:	2301      	movs	r3, #1
 800a36c:	3001      	adds	r0, #1
 800a36e:	4619      	mov	r1, r3
 800a370:	e781      	b.n	800a276 <__kernel_rem_pio2f+0x146>
 800a372:	aa06      	add	r2, sp, #24
 800a374:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800a378:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800a37c:	460b      	mov	r3, r1
 800a37e:	e7f5      	b.n	800a36c <__kernel_rem_pio2f+0x23c>
 800a380:	1e68      	subs	r0, r5, #1
 800a382:	ab06      	add	r3, sp, #24
 800a384:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800a388:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a38c:	aa06      	add	r2, sp, #24
 800a38e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800a392:	e779      	b.n	800a288 <__kernel_rem_pio2f+0x158>
 800a394:	1e68      	subs	r0, r5, #1
 800a396:	ab06      	add	r3, sp, #24
 800a398:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800a39c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a3a0:	e7f4      	b.n	800a38c <__kernel_rem_pio2f+0x25c>
 800a3a2:	a906      	add	r1, sp, #24
 800a3a4:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800a3a8:	3801      	subs	r0, #1
 800a3aa:	430a      	orrs	r2, r1
 800a3ac:	e7a9      	b.n	800a302 <__kernel_rem_pio2f+0x1d2>
 800a3ae:	f10c 0c01 	add.w	ip, ip, #1
 800a3b2:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a3b6:	2a00      	cmp	r2, #0
 800a3b8:	d0f9      	beq.n	800a3ae <__kernel_rem_pio2f+0x27e>
 800a3ba:	eb0b 0305 	add.w	r3, fp, r5
 800a3be:	aa1a      	add	r2, sp, #104	; 0x68
 800a3c0:	009b      	lsls	r3, r3, #2
 800a3c2:	1898      	adds	r0, r3, r2
 800a3c4:	3004      	adds	r0, #4
 800a3c6:	1c69      	adds	r1, r5, #1
 800a3c8:	3704      	adds	r7, #4
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	4465      	add	r5, ip
 800a3ce:	9005      	str	r0, [sp, #20]
 800a3d0:	428d      	cmp	r5, r1
 800a3d2:	f6ff af0a 	blt.w	800a1ea <__kernel_rem_pio2f+0xba>
 800a3d6:	a81a      	add	r0, sp, #104	; 0x68
 800a3d8:	eb02 0c03 	add.w	ip, r2, r3
 800a3dc:	4484      	add	ip, r0
 800a3de:	9803      	ldr	r0, [sp, #12]
 800a3e0:	f8dd e008 	ldr.w	lr, [sp, #8]
 800a3e4:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800a3e8:	9001      	str	r0, [sp, #4]
 800a3ea:	ee07 0a90 	vmov	s15, r0
 800a3ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a3f2:	9805      	ldr	r0, [sp, #20]
 800a3f4:	edcc 7a00 	vstr	s15, [ip]
 800a3f8:	eddf 7a13 	vldr	s15, [pc, #76]	; 800a448 <__kernel_rem_pio2f+0x318>
 800a3fc:	eb00 0802 	add.w	r8, r0, r2
 800a400:	f04f 0c00 	mov.w	ip, #0
 800a404:	45d4      	cmp	ip, sl
 800a406:	dd0c      	ble.n	800a422 <__kernel_rem_pio2f+0x2f2>
 800a408:	eb02 0c07 	add.w	ip, r2, r7
 800a40c:	a842      	add	r0, sp, #264	; 0x108
 800a40e:	4484      	add	ip, r0
 800a410:	edcc 7a01 	vstr	s15, [ip, #4]
 800a414:	3101      	adds	r1, #1
 800a416:	3204      	adds	r2, #4
 800a418:	e7da      	b.n	800a3d0 <__kernel_rem_pio2f+0x2a0>
 800a41a:	9b04      	ldr	r3, [sp, #16]
 800a41c:	f04f 0c01 	mov.w	ip, #1
 800a420:	e7c7      	b.n	800a3b2 <__kernel_rem_pio2f+0x282>
 800a422:	ecfe 6a01 	vldmia	lr!, {s13}
 800a426:	ed38 7a01 	vldmdb	r8!, {s14}
 800a42a:	f10c 0c01 	add.w	ip, ip, #1
 800a42e:	eee6 7a87 	vfma.f32	s15, s13, s14
 800a432:	e7e7      	b.n	800a404 <__kernel_rem_pio2f+0x2d4>
 800a434:	3b01      	subs	r3, #1
 800a436:	e769      	b.n	800a30c <__kernel_rem_pio2f+0x1dc>
 800a438:	0800af2c 	.word	0x0800af2c
 800a43c:	0800af00 	.word	0x0800af00
 800a440:	43800000 	.word	0x43800000
 800a444:	3b800000 	.word	0x3b800000
 800a448:	00000000 	.word	0x00000000
 800a44c:	4260      	negs	r0, r4
 800a44e:	eeb0 0a48 	vmov.f32	s0, s16
 800a452:	f000 f983 	bl	800a75c <scalbnf>
 800a456:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 800a440 <__kernel_rem_pio2f+0x310>
 800a45a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800a45e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a462:	db1a      	blt.n	800a49a <__kernel_rem_pio2f+0x36a>
 800a464:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800a444 <__kernel_rem_pio2f+0x314>
 800a468:	ee60 7a27 	vmul.f32	s15, s0, s15
 800a46c:	aa06      	add	r2, sp, #24
 800a46e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a472:	a906      	add	r1, sp, #24
 800a474:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a478:	3408      	adds	r4, #8
 800a47a:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800a47e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a482:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800a486:	ee10 3a10 	vmov	r3, s0
 800a48a:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800a48e:	1c6b      	adds	r3, r5, #1
 800a490:	ee17 2a90 	vmov	r2, s15
 800a494:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a498:	e73f      	b.n	800a31a <__kernel_rem_pio2f+0x1ea>
 800a49a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800a49e:	aa06      	add	r2, sp, #24
 800a4a0:	ee10 3a10 	vmov	r3, s0
 800a4a4:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800a4a8:	462b      	mov	r3, r5
 800a4aa:	e736      	b.n	800a31a <__kernel_rem_pio2f+0x1ea>
 800a4ac:	aa06      	add	r2, sp, #24
 800a4ae:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800a4b2:	9202      	str	r2, [sp, #8]
 800a4b4:	ee07 2a90 	vmov	s15, r2
 800a4b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a4bc:	3c01      	subs	r4, #1
 800a4be:	ee67 7a80 	vmul.f32	s15, s15, s0
 800a4c2:	ee20 0a07 	vmul.f32	s0, s0, s14
 800a4c6:	ed65 7a01 	vstmdb	r5!, {s15}
 800a4ca:	e734      	b.n	800a336 <__kernel_rem_pio2f+0x206>
 800a4cc:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 800a4d0:	ecf7 6a01 	vldmia	r7!, {s13}
 800a4d4:	ed9c 7a00 	vldr	s14, [ip]
 800a4d8:	eee6 7a87 	vfma.f32	s15, s13, s14
 800a4dc:	3401      	adds	r4, #1
 800a4de:	454c      	cmp	r4, r9
 800a4e0:	dc01      	bgt.n	800a4e6 <__kernel_rem_pio2f+0x3b6>
 800a4e2:	42a5      	cmp	r5, r4
 800a4e4:	daf2      	bge.n	800a4cc <__kernel_rem_pio2f+0x39c>
 800a4e6:	aa56      	add	r2, sp, #344	; 0x158
 800a4e8:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 800a4ec:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 800a4f0:	3501      	adds	r5, #1
 800a4f2:	3804      	subs	r0, #4
 800a4f4:	e723      	b.n	800a33e <__kernel_rem_pio2f+0x20e>
 800a4f6:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800a4f8:	2a03      	cmp	r2, #3
 800a4fa:	d84d      	bhi.n	800a598 <__kernel_rem_pio2f+0x468>
 800a4fc:	e8df f002 	tbb	[pc, r2]
 800a500:	021f1f3e 	.word	0x021f1f3e
 800a504:	aa56      	add	r2, sp, #344	; 0x158
 800a506:	4411      	add	r1, r2
 800a508:	399c      	subs	r1, #156	; 0x9c
 800a50a:	4608      	mov	r0, r1
 800a50c:	461c      	mov	r4, r3
 800a50e:	2c00      	cmp	r4, #0
 800a510:	dc5f      	bgt.n	800a5d2 <__kernel_rem_pio2f+0x4a2>
 800a512:	4608      	mov	r0, r1
 800a514:	461c      	mov	r4, r3
 800a516:	2c01      	cmp	r4, #1
 800a518:	dc6b      	bgt.n	800a5f2 <__kernel_rem_pio2f+0x4c2>
 800a51a:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 800a448 <__kernel_rem_pio2f+0x318>
 800a51e:	2b01      	cmp	r3, #1
 800a520:	dc77      	bgt.n	800a612 <__kernel_rem_pio2f+0x4e2>
 800a522:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 800a526:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 800a52a:	f1b8 0f00 	cmp.w	r8, #0
 800a52e:	d176      	bne.n	800a61e <__kernel_rem_pio2f+0x4ee>
 800a530:	edc6 6a00 	vstr	s13, [r6]
 800a534:	ed86 7a01 	vstr	s14, [r6, #4]
 800a538:	edc6 7a02 	vstr	s15, [r6, #8]
 800a53c:	e02c      	b.n	800a598 <__kernel_rem_pio2f+0x468>
 800a53e:	aa56      	add	r2, sp, #344	; 0x158
 800a540:	4411      	add	r1, r2
 800a542:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 800a448 <__kernel_rem_pio2f+0x318>
 800a546:	399c      	subs	r1, #156	; 0x9c
 800a548:	4618      	mov	r0, r3
 800a54a:	2800      	cmp	r0, #0
 800a54c:	da32      	bge.n	800a5b4 <__kernel_rem_pio2f+0x484>
 800a54e:	f1b8 0f00 	cmp.w	r8, #0
 800a552:	d035      	beq.n	800a5c0 <__kernel_rem_pio2f+0x490>
 800a554:	eef1 7a47 	vneg.f32	s15, s14
 800a558:	edc6 7a00 	vstr	s15, [r6]
 800a55c:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 800a560:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a564:	a82f      	add	r0, sp, #188	; 0xbc
 800a566:	2101      	movs	r1, #1
 800a568:	428b      	cmp	r3, r1
 800a56a:	da2c      	bge.n	800a5c6 <__kernel_rem_pio2f+0x496>
 800a56c:	f1b8 0f00 	cmp.w	r8, #0
 800a570:	d001      	beq.n	800a576 <__kernel_rem_pio2f+0x446>
 800a572:	eef1 7a67 	vneg.f32	s15, s15
 800a576:	edc6 7a01 	vstr	s15, [r6, #4]
 800a57a:	e00d      	b.n	800a598 <__kernel_rem_pio2f+0x468>
 800a57c:	aa56      	add	r2, sp, #344	; 0x158
 800a57e:	4411      	add	r1, r2
 800a580:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 800a448 <__kernel_rem_pio2f+0x318>
 800a584:	399c      	subs	r1, #156	; 0x9c
 800a586:	2b00      	cmp	r3, #0
 800a588:	da0e      	bge.n	800a5a8 <__kernel_rem_pio2f+0x478>
 800a58a:	f1b8 0f00 	cmp.w	r8, #0
 800a58e:	d001      	beq.n	800a594 <__kernel_rem_pio2f+0x464>
 800a590:	eef1 7a67 	vneg.f32	s15, s15
 800a594:	edc6 7a00 	vstr	s15, [r6]
 800a598:	9b01      	ldr	r3, [sp, #4]
 800a59a:	f003 0007 	and.w	r0, r3, #7
 800a59e:	b057      	add	sp, #348	; 0x15c
 800a5a0:	ecbd 8b04 	vpop	{d8-d9}
 800a5a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5a8:	ed31 7a01 	vldmdb	r1!, {s14}
 800a5ac:	3b01      	subs	r3, #1
 800a5ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a5b2:	e7e8      	b.n	800a586 <__kernel_rem_pio2f+0x456>
 800a5b4:	ed71 7a01 	vldmdb	r1!, {s15}
 800a5b8:	3801      	subs	r0, #1
 800a5ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a5be:	e7c4      	b.n	800a54a <__kernel_rem_pio2f+0x41a>
 800a5c0:	eef0 7a47 	vmov.f32	s15, s14
 800a5c4:	e7c8      	b.n	800a558 <__kernel_rem_pio2f+0x428>
 800a5c6:	ecb0 7a01 	vldmia	r0!, {s14}
 800a5ca:	3101      	adds	r1, #1
 800a5cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a5d0:	e7ca      	b.n	800a568 <__kernel_rem_pio2f+0x438>
 800a5d2:	ed50 7a02 	vldr	s15, [r0, #-8]
 800a5d6:	ed70 6a01 	vldmdb	r0!, {s13}
 800a5da:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800a5de:	3c01      	subs	r4, #1
 800a5e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a5e4:	ed00 7a01 	vstr	s14, [r0, #-4]
 800a5e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5ec:	edc0 7a00 	vstr	s15, [r0]
 800a5f0:	e78d      	b.n	800a50e <__kernel_rem_pio2f+0x3de>
 800a5f2:	ed50 7a02 	vldr	s15, [r0, #-8]
 800a5f6:	ed70 6a01 	vldmdb	r0!, {s13}
 800a5fa:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800a5fe:	3c01      	subs	r4, #1
 800a600:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a604:	ed00 7a01 	vstr	s14, [r0, #-4]
 800a608:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a60c:	edc0 7a00 	vstr	s15, [r0]
 800a610:	e781      	b.n	800a516 <__kernel_rem_pio2f+0x3e6>
 800a612:	ed31 7a01 	vldmdb	r1!, {s14}
 800a616:	3b01      	subs	r3, #1
 800a618:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a61c:	e77f      	b.n	800a51e <__kernel_rem_pio2f+0x3ee>
 800a61e:	eef1 6a66 	vneg.f32	s13, s13
 800a622:	eeb1 7a47 	vneg.f32	s14, s14
 800a626:	edc6 6a00 	vstr	s13, [r6]
 800a62a:	ed86 7a01 	vstr	s14, [r6, #4]
 800a62e:	eef1 7a67 	vneg.f32	s15, s15
 800a632:	e781      	b.n	800a538 <__kernel_rem_pio2f+0x408>

0800a634 <__kernel_sinf>:
 800a634:	ee10 3a10 	vmov	r3, s0
 800a638:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a63c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800a640:	da04      	bge.n	800a64c <__kernel_sinf+0x18>
 800a642:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800a646:	ee17 3a90 	vmov	r3, s15
 800a64a:	b35b      	cbz	r3, 800a6a4 <__kernel_sinf+0x70>
 800a64c:	ee20 7a00 	vmul.f32	s14, s0, s0
 800a650:	eddf 7a15 	vldr	s15, [pc, #84]	; 800a6a8 <__kernel_sinf+0x74>
 800a654:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800a6ac <__kernel_sinf+0x78>
 800a658:	eea7 6a27 	vfma.f32	s12, s14, s15
 800a65c:	eddf 7a14 	vldr	s15, [pc, #80]	; 800a6b0 <__kernel_sinf+0x7c>
 800a660:	eee6 7a07 	vfma.f32	s15, s12, s14
 800a664:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800a6b4 <__kernel_sinf+0x80>
 800a668:	eea7 6a87 	vfma.f32	s12, s15, s14
 800a66c:	eddf 7a12 	vldr	s15, [pc, #72]	; 800a6b8 <__kernel_sinf+0x84>
 800a670:	ee60 6a07 	vmul.f32	s13, s0, s14
 800a674:	eee6 7a07 	vfma.f32	s15, s12, s14
 800a678:	b930      	cbnz	r0, 800a688 <__kernel_sinf+0x54>
 800a67a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800a6bc <__kernel_sinf+0x88>
 800a67e:	eea7 6a27 	vfma.f32	s12, s14, s15
 800a682:	eea6 0a26 	vfma.f32	s0, s12, s13
 800a686:	4770      	bx	lr
 800a688:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800a68c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800a690:	eee0 7a86 	vfma.f32	s15, s1, s12
 800a694:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800a698:	eddf 7a09 	vldr	s15, [pc, #36]	; 800a6c0 <__kernel_sinf+0x8c>
 800a69c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800a6a0:	ee30 0a60 	vsub.f32	s0, s0, s1
 800a6a4:	4770      	bx	lr
 800a6a6:	bf00      	nop
 800a6a8:	2f2ec9d3 	.word	0x2f2ec9d3
 800a6ac:	b2d72f34 	.word	0xb2d72f34
 800a6b0:	3638ef1b 	.word	0x3638ef1b
 800a6b4:	b9500d01 	.word	0xb9500d01
 800a6b8:	3c088889 	.word	0x3c088889
 800a6bc:	be2aaaab 	.word	0xbe2aaaab
 800a6c0:	3e2aaaab 	.word	0x3e2aaaab

0800a6c4 <matherr>:
 800a6c4:	2000      	movs	r0, #0
 800a6c6:	4770      	bx	lr

0800a6c8 <fabsf>:
 800a6c8:	ee10 3a10 	vmov	r3, s0
 800a6cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a6d0:	ee00 3a10 	vmov	s0, r3
 800a6d4:	4770      	bx	lr
	...

0800a6d8 <floorf>:
 800a6d8:	ee10 3a10 	vmov	r3, s0
 800a6dc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a6e0:	0dca      	lsrs	r2, r1, #23
 800a6e2:	3a7f      	subs	r2, #127	; 0x7f
 800a6e4:	2a16      	cmp	r2, #22
 800a6e6:	dc2a      	bgt.n	800a73e <floorf+0x66>
 800a6e8:	2a00      	cmp	r2, #0
 800a6ea:	da11      	bge.n	800a710 <floorf+0x38>
 800a6ec:	eddf 7a18 	vldr	s15, [pc, #96]	; 800a750 <floorf+0x78>
 800a6f0:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a6f4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a6f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6fc:	dd05      	ble.n	800a70a <floorf+0x32>
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	da23      	bge.n	800a74a <floorf+0x72>
 800a702:	4a14      	ldr	r2, [pc, #80]	; (800a754 <floorf+0x7c>)
 800a704:	2900      	cmp	r1, #0
 800a706:	bf18      	it	ne
 800a708:	4613      	movne	r3, r2
 800a70a:	ee00 3a10 	vmov	s0, r3
 800a70e:	4770      	bx	lr
 800a710:	4911      	ldr	r1, [pc, #68]	; (800a758 <floorf+0x80>)
 800a712:	4111      	asrs	r1, r2
 800a714:	420b      	tst	r3, r1
 800a716:	d0fa      	beq.n	800a70e <floorf+0x36>
 800a718:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800a750 <floorf+0x78>
 800a71c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a720:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a728:	ddef      	ble.n	800a70a <floorf+0x32>
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	bfbe      	ittt	lt
 800a72e:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800a732:	fa40 f202 	asrlt.w	r2, r0, r2
 800a736:	189b      	addlt	r3, r3, r2
 800a738:	ea23 0301 	bic.w	r3, r3, r1
 800a73c:	e7e5      	b.n	800a70a <floorf+0x32>
 800a73e:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800a742:	d3e4      	bcc.n	800a70e <floorf+0x36>
 800a744:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a748:	4770      	bx	lr
 800a74a:	2300      	movs	r3, #0
 800a74c:	e7dd      	b.n	800a70a <floorf+0x32>
 800a74e:	bf00      	nop
 800a750:	7149f2ca 	.word	0x7149f2ca
 800a754:	bf800000 	.word	0xbf800000
 800a758:	007fffff 	.word	0x007fffff

0800a75c <scalbnf>:
 800a75c:	b508      	push	{r3, lr}
 800a75e:	ee10 2a10 	vmov	r2, s0
 800a762:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800a766:	ed2d 8b02 	vpush	{d8}
 800a76a:	eef0 0a40 	vmov.f32	s1, s0
 800a76e:	d004      	beq.n	800a77a <scalbnf+0x1e>
 800a770:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a774:	d306      	bcc.n	800a784 <scalbnf+0x28>
 800a776:	ee70 0a00 	vadd.f32	s1, s0, s0
 800a77a:	ecbd 8b02 	vpop	{d8}
 800a77e:	eeb0 0a60 	vmov.f32	s0, s1
 800a782:	bd08      	pop	{r3, pc}
 800a784:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a788:	d21c      	bcs.n	800a7c4 <scalbnf+0x68>
 800a78a:	4b1f      	ldr	r3, [pc, #124]	; (800a808 <scalbnf+0xac>)
 800a78c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800a80c <scalbnf+0xb0>
 800a790:	4298      	cmp	r0, r3
 800a792:	ee60 0a27 	vmul.f32	s1, s0, s15
 800a796:	db10      	blt.n	800a7ba <scalbnf+0x5e>
 800a798:	ee10 2a90 	vmov	r2, s1
 800a79c:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 800a7a0:	3b19      	subs	r3, #25
 800a7a2:	4403      	add	r3, r0
 800a7a4:	2bfe      	cmp	r3, #254	; 0xfe
 800a7a6:	dd0f      	ble.n	800a7c8 <scalbnf+0x6c>
 800a7a8:	ed9f 8a19 	vldr	s16, [pc, #100]	; 800a810 <scalbnf+0xb4>
 800a7ac:	eeb0 0a48 	vmov.f32	s0, s16
 800a7b0:	f000 f834 	bl	800a81c <copysignf>
 800a7b4:	ee60 0a08 	vmul.f32	s1, s0, s16
 800a7b8:	e7df      	b.n	800a77a <scalbnf+0x1e>
 800a7ba:	eddf 7a16 	vldr	s15, [pc, #88]	; 800a814 <scalbnf+0xb8>
 800a7be:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800a7c2:	e7da      	b.n	800a77a <scalbnf+0x1e>
 800a7c4:	0ddb      	lsrs	r3, r3, #23
 800a7c6:	e7ec      	b.n	800a7a2 <scalbnf+0x46>
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	dd06      	ble.n	800a7da <scalbnf+0x7e>
 800a7cc:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800a7d0:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800a7d4:	ee00 3a90 	vmov	s1, r3
 800a7d8:	e7cf      	b.n	800a77a <scalbnf+0x1e>
 800a7da:	f113 0f16 	cmn.w	r3, #22
 800a7de:	da06      	bge.n	800a7ee <scalbnf+0x92>
 800a7e0:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a7e4:	4298      	cmp	r0, r3
 800a7e6:	dcdf      	bgt.n	800a7a8 <scalbnf+0x4c>
 800a7e8:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 800a814 <scalbnf+0xb8>
 800a7ec:	e7de      	b.n	800a7ac <scalbnf+0x50>
 800a7ee:	3319      	adds	r3, #25
 800a7f0:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800a7f4:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800a7f8:	eddf 7a07 	vldr	s15, [pc, #28]	; 800a818 <scalbnf+0xbc>
 800a7fc:	ee07 3a10 	vmov	s14, r3
 800a800:	ee67 0a27 	vmul.f32	s1, s14, s15
 800a804:	e7b9      	b.n	800a77a <scalbnf+0x1e>
 800a806:	bf00      	nop
 800a808:	ffff3cb0 	.word	0xffff3cb0
 800a80c:	4c000000 	.word	0x4c000000
 800a810:	7149f2ca 	.word	0x7149f2ca
 800a814:	0da24260 	.word	0x0da24260
 800a818:	33000000 	.word	0x33000000

0800a81c <copysignf>:
 800a81c:	ee10 3a10 	vmov	r3, s0
 800a820:	ee10 2a90 	vmov	r2, s1
 800a824:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a828:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800a82c:	4313      	orrs	r3, r2
 800a82e:	ee00 3a10 	vmov	s0, r3
 800a832:	4770      	bx	lr

0800a834 <_init>:
 800a834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a836:	bf00      	nop
 800a838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a83a:	bc08      	pop	{r3}
 800a83c:	469e      	mov	lr, r3
 800a83e:	4770      	bx	lr

0800a840 <_fini>:
 800a840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a842:	bf00      	nop
 800a844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a846:	bc08      	pop	{r3}
 800a848:	469e      	mov	lr, r3
 800a84a:	4770      	bx	lr
