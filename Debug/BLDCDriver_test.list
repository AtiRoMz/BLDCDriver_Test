
BLDCDriver_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a70c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006e8  0800a8a0  0800a8a0  0001a8a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af88  0800af88  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800af88  0800af88  0001af88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800af90  0800af90  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af90  0800af90  0001af90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800af94  0800af94  0001af94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800af98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000037e4  200001e8  0800b180  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200039cc  0800b180  000239cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019250  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003a74  00000000  00000000  00039468  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012e8  00000000  00000000  0003cee0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001118  00000000  00000000  0003e1c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023962  00000000  00000000  0003f2e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000126e1  00000000  00000000  00062c42  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c7932  00000000  00000000  00075323  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013cc55  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d70  00000000  00000000  0013ccd0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a884 	.word	0x0800a884

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800a884 	.word	0x0800a884

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b972 	b.w	8000f44 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	4688      	mov	r8, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14b      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4615      	mov	r5, r2
 8000c8a:	d967      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0720 	rsb	r7, r2, #32
 8000c96:	fa01 f302 	lsl.w	r3, r1, r2
 8000c9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c9e:	4095      	lsls	r5, r2
 8000ca0:	ea47 0803 	orr.w	r8, r7, r3
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cb0:	fa1f fc85 	uxth.w	ip, r5
 8000cb4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cb8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18eb      	adds	r3, r5, r3
 8000cc6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cca:	f080 811b 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8118 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000cd4:	3f02      	subs	r7, #2
 8000cd6:	442b      	add	r3, r5
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cec:	45a4      	cmp	ip, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	192c      	adds	r4, r5, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8107 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	f240 8104 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000d00:	3802      	subs	r0, #2
 8000d02:	442c      	add	r4, r5
 8000d04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d08:	eba4 040c 	sub.w	r4, r4, ip
 8000d0c:	2700      	movs	r7, #0
 8000d0e:	b11e      	cbz	r6, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c6 4300 	strd	r4, r3, [r6]
 8000d18:	4639      	mov	r1, r7
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0xbe>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80eb 	beq.w	8000efe <__udivmoddi4+0x286>
 8000d28:	2700      	movs	r7, #0
 8000d2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d2e:	4638      	mov	r0, r7
 8000d30:	4639      	mov	r1, r7
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f783 	clz	r7, r3
 8000d3a:	2f00      	cmp	r7, #0
 8000d3c:	d147      	bne.n	8000dce <__udivmoddi4+0x156>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0xd0>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80fa 	bhi.w	8000f3c <__udivmoddi4+0x2c4>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	4698      	mov	r8, r3
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d0e0      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000d56:	e9c6 4800 	strd	r4, r8, [r6]
 8000d5a:	e7dd      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000d5c:	b902      	cbnz	r2, 8000d60 <__udivmoddi4+0xe8>
 8000d5e:	deff      	udf	#255	; 0xff
 8000d60:	fab2 f282 	clz	r2, r2
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f040 808f 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d6a:	1b49      	subs	r1, r1, r5
 8000d6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d70:	fa1f f885 	uxth.w	r8, r5
 8000d74:	2701      	movs	r7, #1
 8000d76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d7a:	0c23      	lsrs	r3, r4, #16
 8000d7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb08 f10c 	mul.w	r1, r8, ip
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8c:	18eb      	adds	r3, r5, r3
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4299      	cmp	r1, r3
 8000d96:	f200 80cd 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1a59      	subs	r1, r3, r1
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000da8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x14c>
 8000db4:	192c      	adds	r4, r5, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x14a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80b6 	bhi.w	8000f2e <__udivmoddi4+0x2b6>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e79f      	b.n	8000d0e <__udivmoddi4+0x96>
 8000dce:	f1c7 0c20 	rsb	ip, r7, #32
 8000dd2:	40bb      	lsls	r3, r7
 8000dd4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dd8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ddc:	fa01 f407 	lsl.w	r4, r1, r7
 8000de0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000de4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000de8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dec:	4325      	orrs	r5, r4
 8000dee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000df2:	0c2c      	lsrs	r4, r5, #16
 8000df4:	fb08 3319 	mls	r3, r8, r9, r3
 8000df8:	fa1f fa8e 	uxth.w	sl, lr
 8000dfc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e00:	fb09 f40a 	mul.w	r4, r9, sl
 8000e04:	429c      	cmp	r4, r3
 8000e06:	fa02 f207 	lsl.w	r2, r2, r7
 8000e0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1e 0303 	adds.w	r3, lr, r3
 8000e14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e18:	f080 8087 	bcs.w	8000f2a <__udivmoddi4+0x2b2>
 8000e1c:	429c      	cmp	r4, r3
 8000e1e:	f240 8084 	bls.w	8000f2a <__udivmoddi4+0x2b2>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4473      	add	r3, lr
 8000e28:	1b1b      	subs	r3, r3, r4
 8000e2a:	b2ad      	uxth	r5, r5
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e3c:	45a2      	cmp	sl, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1e 0404 	adds.w	r4, lr, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e48:	d26b      	bcs.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4a:	45a2      	cmp	sl, r4
 8000e4c:	d969      	bls.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4474      	add	r4, lr
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5a:	eba4 040a 	sub.w	r4, r4, sl
 8000e5e:	454c      	cmp	r4, r9
 8000e60:	46c2      	mov	sl, r8
 8000e62:	464b      	mov	r3, r9
 8000e64:	d354      	bcc.n	8000f10 <__udivmoddi4+0x298>
 8000e66:	d051      	beq.n	8000f0c <__udivmoddi4+0x294>
 8000e68:	2e00      	cmp	r6, #0
 8000e6a:	d069      	beq.n	8000f40 <__udivmoddi4+0x2c8>
 8000e6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e70:	eb64 0403 	sbc.w	r4, r4, r3
 8000e74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	40fc      	lsrs	r4, r7
 8000e7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e80:	e9c6 5400 	strd	r5, r4, [r6]
 8000e84:	2700      	movs	r7, #0
 8000e86:	e747      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e90:	4095      	lsls	r5, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	fa21 f303 	lsr.w	r3, r1, r3
 8000e9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e9e:	4338      	orrs	r0, r7
 8000ea0:	0c01      	lsrs	r1, r0, #16
 8000ea2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ea6:	fa1f f885 	uxth.w	r8, r5
 8000eaa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb2:	fb07 f308 	mul.w	r3, r7, r8
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ebc:	d907      	bls.n	8000ece <__udivmoddi4+0x256>
 8000ebe:	1869      	adds	r1, r5, r1
 8000ec0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ec4:	d22f      	bcs.n	8000f26 <__udivmoddi4+0x2ae>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d92d      	bls.n	8000f26 <__udivmoddi4+0x2ae>
 8000eca:	3f02      	subs	r7, #2
 8000ecc:	4429      	add	r1, r5
 8000ece:	1acb      	subs	r3, r1, r3
 8000ed0:	b281      	uxth	r1, r0
 8000ed2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ede:	fb00 f308 	mul.w	r3, r0, r8
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x27e>
 8000ee6:	1869      	adds	r1, r5, r1
 8000ee8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eec:	d217      	bcs.n	8000f1e <__udivmoddi4+0x2a6>
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	d915      	bls.n	8000f1e <__udivmoddi4+0x2a6>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	4429      	add	r1, r5
 8000ef6:	1ac9      	subs	r1, r1, r3
 8000ef8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000efc:	e73b      	b.n	8000d76 <__udivmoddi4+0xfe>
 8000efe:	4637      	mov	r7, r6
 8000f00:	4630      	mov	r0, r6
 8000f02:	e709      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f04:	4607      	mov	r7, r0
 8000f06:	e6e7      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f08:	4618      	mov	r0, r3
 8000f0a:	e6fb      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f0c:	4541      	cmp	r1, r8
 8000f0e:	d2ab      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f10:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f14:	eb69 020e 	sbc.w	r2, r9, lr
 8000f18:	3801      	subs	r0, #1
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	e7a4      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f1e:	4660      	mov	r0, ip
 8000f20:	e7e9      	b.n	8000ef6 <__udivmoddi4+0x27e>
 8000f22:	4618      	mov	r0, r3
 8000f24:	e795      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f26:	4667      	mov	r7, ip
 8000f28:	e7d1      	b.n	8000ece <__udivmoddi4+0x256>
 8000f2a:	4681      	mov	r9, r0
 8000f2c:	e77c      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f2e:	3802      	subs	r0, #2
 8000f30:	442c      	add	r4, r5
 8000f32:	e747      	b.n	8000dc4 <__udivmoddi4+0x14c>
 8000f34:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f38:	442b      	add	r3, r5
 8000f3a:	e72f      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	e708      	b.n	8000d52 <__udivmoddi4+0xda>
 8000f40:	4637      	mov	r7, r6
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0xa0>

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f4e:	463b      	mov	r3, r7
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000f5a:	4b30      	ldr	r3, [pc, #192]	; (800101c <MX_ADC1_Init+0xd4>)
 8000f5c:	4a30      	ldr	r2, [pc, #192]	; (8001020 <MX_ADC1_Init+0xd8>)
 8000f5e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000f60:	4b2e      	ldr	r3, [pc, #184]	; (800101c <MX_ADC1_Init+0xd4>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f66:	4b2d      	ldr	r3, [pc, #180]	; (800101c <MX_ADC1_Init+0xd4>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000f6c:	4b2b      	ldr	r3, [pc, #172]	; (800101c <MX_ADC1_Init+0xd4>)
 8000f6e:	2201      	movs	r2, #1
 8000f70:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f72:	4b2a      	ldr	r3, [pc, #168]	; (800101c <MX_ADC1_Init+0xd4>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f78:	4b28      	ldr	r3, [pc, #160]	; (800101c <MX_ADC1_Init+0xd4>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000f80:	4b26      	ldr	r3, [pc, #152]	; (800101c <MX_ADC1_Init+0xd4>)
 8000f82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f86:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 8000f88:	4b24      	ldr	r3, [pc, #144]	; (800101c <MX_ADC1_Init+0xd4>)
 8000f8a:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8000f8e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f90:	4b22      	ldr	r3, [pc, #136]	; (800101c <MX_ADC1_Init+0xd4>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000f96:	4b21      	ldr	r3, [pc, #132]	; (800101c <MX_ADC1_Init+0xd4>)
 8000f98:	2203      	movs	r2, #3
 8000f9a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f9c:	4b1f      	ldr	r3, [pc, #124]	; (800101c <MX_ADC1_Init+0xd4>)
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000fa4:	4b1d      	ldr	r3, [pc, #116]	; (800101c <MX_ADC1_Init+0xd4>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000faa:	481c      	ldr	r0, [pc, #112]	; (800101c <MX_ADC1_Init+0xd4>)
 8000fac:	f001 ffc6 	bl	8002f3c <HAL_ADC_Init>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000fb6:	f001 f913 	bl	80021e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000fba:	230a      	movs	r3, #10
 8000fbc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fc6:	463b      	mov	r3, r7
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4814      	ldr	r0, [pc, #80]	; (800101c <MX_ADC1_Init+0xd4>)
 8000fcc:	f002 fa54 	bl	8003478 <HAL_ADC_ConfigChannel>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000fd6:	f001 f903 	bl	80021e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000fda:	230b      	movs	r3, #11
 8000fdc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fe2:	463b      	mov	r3, r7
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	480d      	ldr	r0, [pc, #52]	; (800101c <MX_ADC1_Init+0xd4>)
 8000fe8:	f002 fa46 	bl	8003478 <HAL_ADC_ConfigChannel>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000ff2:	f001 f8f5 	bl	80021e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000ff6:	230c      	movs	r3, #12
 8000ff8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ffe:	463b      	mov	r3, r7
 8001000:	4619      	mov	r1, r3
 8001002:	4806      	ldr	r0, [pc, #24]	; (800101c <MX_ADC1_Init+0xd4>)
 8001004:	f002 fa38 	bl	8003478 <HAL_ADC_ConfigChannel>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 800100e:	f001 f8e7 	bl	80021e0 <Error_Handler>
  }

}
 8001012:	bf00      	nop
 8001014:	3710      	adds	r7, #16
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20000294 	.word	0x20000294
 8001020:	40012000 	.word	0x40012000

08001024 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800102a:	463b      	mov	r3, r7
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc2.Instance = ADC2;
 8001036:	4b21      	ldr	r3, [pc, #132]	; (80010bc <MX_ADC2_Init+0x98>)
 8001038:	4a21      	ldr	r2, [pc, #132]	; (80010c0 <MX_ADC2_Init+0x9c>)
 800103a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800103c:	4b1f      	ldr	r3, [pc, #124]	; (80010bc <MX_ADC2_Init+0x98>)
 800103e:	2200      	movs	r2, #0
 8001040:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001042:	4b1e      	ldr	r3, [pc, #120]	; (80010bc <MX_ADC2_Init+0x98>)
 8001044:	2200      	movs	r2, #0
 8001046:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001048:	4b1c      	ldr	r3, [pc, #112]	; (80010bc <MX_ADC2_Init+0x98>)
 800104a:	2200      	movs	r2, #0
 800104c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800104e:	4b1b      	ldr	r3, [pc, #108]	; (80010bc <MX_ADC2_Init+0x98>)
 8001050:	2200      	movs	r2, #0
 8001052:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001054:	4b19      	ldr	r3, [pc, #100]	; (80010bc <MX_ADC2_Init+0x98>)
 8001056:	2200      	movs	r2, #0
 8001058:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800105c:	4b17      	ldr	r3, [pc, #92]	; (80010bc <MX_ADC2_Init+0x98>)
 800105e:	2200      	movs	r2, #0
 8001060:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001062:	4b16      	ldr	r3, [pc, #88]	; (80010bc <MX_ADC2_Init+0x98>)
 8001064:	4a17      	ldr	r2, [pc, #92]	; (80010c4 <MX_ADC2_Init+0xa0>)
 8001066:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001068:	4b14      	ldr	r3, [pc, #80]	; (80010bc <MX_ADC2_Init+0x98>)
 800106a:	2200      	movs	r2, #0
 800106c:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800106e:	4b13      	ldr	r3, [pc, #76]	; (80010bc <MX_ADC2_Init+0x98>)
 8001070:	2201      	movs	r2, #1
 8001072:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001074:	4b11      	ldr	r3, [pc, #68]	; (80010bc <MX_ADC2_Init+0x98>)
 8001076:	2200      	movs	r2, #0
 8001078:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800107c:	4b0f      	ldr	r3, [pc, #60]	; (80010bc <MX_ADC2_Init+0x98>)
 800107e:	2201      	movs	r2, #1
 8001080:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001082:	480e      	ldr	r0, [pc, #56]	; (80010bc <MX_ADC2_Init+0x98>)
 8001084:	f001 ff5a 	bl	8002f3c <HAL_ADC_Init>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 800108e:	f001 f8a7 	bl	80021e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001092:	230d      	movs	r3, #13
 8001094:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001096:	2301      	movs	r3, #1
 8001098:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800109a:	2300      	movs	r3, #0
 800109c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800109e:	463b      	mov	r3, r7
 80010a0:	4619      	mov	r1, r3
 80010a2:	4806      	ldr	r0, [pc, #24]	; (80010bc <MX_ADC2_Init+0x98>)
 80010a4:	f002 f9e8 	bl	8003478 <HAL_ADC_ConfigChannel>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80010ae:	f001 f897 	bl	80021e0 <Error_Handler>
  }

}
 80010b2:	bf00      	nop
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	2000024c 	.word	0x2000024c
 80010c0:	40012100 	.word	0x40012100
 80010c4:	0f000001 	.word	0x0f000001

080010c8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08c      	sub	sp, #48	; 0x30
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d0:	f107 031c 	add.w	r3, r7, #28
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a5b      	ldr	r2, [pc, #364]	; (8001254 <HAL_ADC_MspInit+0x18c>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d160      	bne.n	80011ac <HAL_ADC_MspInit+0xe4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	61bb      	str	r3, [r7, #24]
 80010ee:	4b5a      	ldr	r3, [pc, #360]	; (8001258 <HAL_ADC_MspInit+0x190>)
 80010f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f2:	4a59      	ldr	r2, [pc, #356]	; (8001258 <HAL_ADC_MspInit+0x190>)
 80010f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010f8:	6453      	str	r3, [r2, #68]	; 0x44
 80010fa:	4b57      	ldr	r3, [pc, #348]	; (8001258 <HAL_ADC_MspInit+0x190>)
 80010fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001102:	61bb      	str	r3, [r7, #24]
 8001104:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	617b      	str	r3, [r7, #20]
 800110a:	4b53      	ldr	r3, [pc, #332]	; (8001258 <HAL_ADC_MspInit+0x190>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	4a52      	ldr	r2, [pc, #328]	; (8001258 <HAL_ADC_MspInit+0x190>)
 8001110:	f043 0304 	orr.w	r3, r3, #4
 8001114:	6313      	str	r3, [r2, #48]	; 0x30
 8001116:	4b50      	ldr	r3, [pc, #320]	; (8001258 <HAL_ADC_MspInit+0x190>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	f003 0304 	and.w	r3, r3, #4
 800111e:	617b      	str	r3, [r7, #20]
 8001120:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration    
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001122:	2307      	movs	r3, #7
 8001124:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001126:	2303      	movs	r3, #3
 8001128:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800112e:	f107 031c 	add.w	r3, r7, #28
 8001132:	4619      	mov	r1, r3
 8001134:	4849      	ldr	r0, [pc, #292]	; (800125c <HAL_ADC_MspInit+0x194>)
 8001136:	f003 f8eb 	bl	8004310 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800113a:	4b49      	ldr	r3, [pc, #292]	; (8001260 <HAL_ADC_MspInit+0x198>)
 800113c:	4a49      	ldr	r2, [pc, #292]	; (8001264 <HAL_ADC_MspInit+0x19c>)
 800113e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001140:	4b47      	ldr	r3, [pc, #284]	; (8001260 <HAL_ADC_MspInit+0x198>)
 8001142:	2200      	movs	r2, #0
 8001144:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001146:	4b46      	ldr	r3, [pc, #280]	; (8001260 <HAL_ADC_MspInit+0x198>)
 8001148:	2200      	movs	r2, #0
 800114a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800114c:	4b44      	ldr	r3, [pc, #272]	; (8001260 <HAL_ADC_MspInit+0x198>)
 800114e:	2200      	movs	r2, #0
 8001150:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001152:	4b43      	ldr	r3, [pc, #268]	; (8001260 <HAL_ADC_MspInit+0x198>)
 8001154:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001158:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800115a:	4b41      	ldr	r3, [pc, #260]	; (8001260 <HAL_ADC_MspInit+0x198>)
 800115c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001160:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001162:	4b3f      	ldr	r3, [pc, #252]	; (8001260 <HAL_ADC_MspInit+0x198>)
 8001164:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001168:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800116a:	4b3d      	ldr	r3, [pc, #244]	; (8001260 <HAL_ADC_MspInit+0x198>)
 800116c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001170:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001172:	4b3b      	ldr	r3, [pc, #236]	; (8001260 <HAL_ADC_MspInit+0x198>)
 8001174:	2200      	movs	r2, #0
 8001176:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001178:	4b39      	ldr	r3, [pc, #228]	; (8001260 <HAL_ADC_MspInit+0x198>)
 800117a:	2200      	movs	r2, #0
 800117c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800117e:	4838      	ldr	r0, [pc, #224]	; (8001260 <HAL_ADC_MspInit+0x198>)
 8001180:	f002 fd36 	bl	8003bf0 <HAL_DMA_Init>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800118a:	f001 f829 	bl	80021e0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a33      	ldr	r2, [pc, #204]	; (8001260 <HAL_ADC_MspInit+0x198>)
 8001192:	639a      	str	r2, [r3, #56]	; 0x38
 8001194:	4a32      	ldr	r2, [pc, #200]	; (8001260 <HAL_ADC_MspInit+0x198>)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800119a:	2200      	movs	r2, #0
 800119c:	2100      	movs	r1, #0
 800119e:	2012      	movs	r0, #18
 80011a0:	f002 fcef 	bl	8003b82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80011a4:	2012      	movs	r0, #18
 80011a6:	f002 fd08 	bl	8003bba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80011aa:	e04e      	b.n	800124a <HAL_ADC_MspInit+0x182>
  else if(adcHandle->Instance==ADC2)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a2d      	ldr	r2, [pc, #180]	; (8001268 <HAL_ADC_MspInit+0x1a0>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d149      	bne.n	800124a <HAL_ADC_MspInit+0x182>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	613b      	str	r3, [r7, #16]
 80011ba:	4b27      	ldr	r3, [pc, #156]	; (8001258 <HAL_ADC_MspInit+0x190>)
 80011bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011be:	4a26      	ldr	r2, [pc, #152]	; (8001258 <HAL_ADC_MspInit+0x190>)
 80011c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011c4:	6453      	str	r3, [r2, #68]	; 0x44
 80011c6:	4b24      	ldr	r3, [pc, #144]	; (8001258 <HAL_ADC_MspInit+0x190>)
 80011c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011ce:	613b      	str	r3, [r7, #16]
 80011d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	60fb      	str	r3, [r7, #12]
 80011d6:	4b20      	ldr	r3, [pc, #128]	; (8001258 <HAL_ADC_MspInit+0x190>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	4a1f      	ldr	r2, [pc, #124]	; (8001258 <HAL_ADC_MspInit+0x190>)
 80011dc:	f043 0304 	orr.w	r3, r3, #4
 80011e0:	6313      	str	r3, [r2, #48]	; 0x30
 80011e2:	4b1d      	ldr	r3, [pc, #116]	; (8001258 <HAL_ADC_MspInit+0x190>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	f003 0304 	and.w	r3, r3, #4
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	60bb      	str	r3, [r7, #8]
 80011f2:	4b19      	ldr	r3, [pc, #100]	; (8001258 <HAL_ADC_MspInit+0x190>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	4a18      	ldr	r2, [pc, #96]	; (8001258 <HAL_ADC_MspInit+0x190>)
 80011f8:	f043 0301 	orr.w	r3, r3, #1
 80011fc:	6313      	str	r3, [r2, #48]	; 0x30
 80011fe:	4b16      	ldr	r3, [pc, #88]	; (8001258 <HAL_ADC_MspInit+0x190>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	60bb      	str	r3, [r7, #8]
 8001208:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800120a:	2308      	movs	r3, #8
 800120c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800120e:	2303      	movs	r3, #3
 8001210:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001216:	f107 031c 	add.w	r3, r7, #28
 800121a:	4619      	mov	r1, r3
 800121c:	480f      	ldr	r0, [pc, #60]	; (800125c <HAL_ADC_MspInit+0x194>)
 800121e:	f003 f877 	bl	8004310 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001222:	2307      	movs	r3, #7
 8001224:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001226:	2303      	movs	r3, #3
 8001228:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122e:	f107 031c 	add.w	r3, r7, #28
 8001232:	4619      	mov	r1, r3
 8001234:	480d      	ldr	r0, [pc, #52]	; (800126c <HAL_ADC_MspInit+0x1a4>)
 8001236:	f003 f86b 	bl	8004310 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800123a:	2200      	movs	r2, #0
 800123c:	2100      	movs	r1, #0
 800123e:	2012      	movs	r0, #18
 8001240:	f002 fc9f 	bl	8003b82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001244:	2012      	movs	r0, #18
 8001246:	f002 fcb8 	bl	8003bba <HAL_NVIC_EnableIRQ>
}
 800124a:	bf00      	nop
 800124c:	3730      	adds	r7, #48	; 0x30
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40012000 	.word	0x40012000
 8001258:	40023800 	.word	0x40023800
 800125c:	40020800 	.word	0x40020800
 8001260:	200002dc 	.word	0x200002dc
 8001264:	40026410 	.word	0x40026410
 8001268:	40012100 	.word	0x40012100
 800126c:	40020000 	.word	0x40020000

08001270 <AS5147Read>:
/*
 * Read Register
 * @param	address : AS5147 regigster address
 * @return	16 bit data
 */
uint16_t AS5147Read(uint16_t address) {
 8001270:	b580      	push	{r7, lr}
 8001272:	b086      	sub	sp, #24
 8001274:	af02      	add	r7, sp, #8
 8001276:	4603      	mov	r3, r0
 8001278:	80fb      	strh	r3, [r7, #6]
	uint8_t txdata[2] = {((AS5147AddParityBit(address | 0x4000) & 0xFF00) >> 8), (AS5147AddParityBit(address | 0x4000) & 0x00FF)};
 800127a:	88fb      	ldrh	r3, [r7, #6]
 800127c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001280:	b29b      	uxth	r3, r3
 8001282:	4618      	mov	r0, r3
 8001284:	f000 f844 	bl	8001310 <AS5147AddParityBit>
 8001288:	4603      	mov	r3, r0
 800128a:	121b      	asrs	r3, r3, #8
 800128c:	b2db      	uxtb	r3, r3
 800128e:	733b      	strb	r3, [r7, #12]
 8001290:	88fb      	ldrh	r3, [r7, #6]
 8001292:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001296:	b29b      	uxth	r3, r3
 8001298:	4618      	mov	r0, r3
 800129a:	f000 f839 	bl	8001310 <AS5147AddParityBit>
 800129e:	4603      	mov	r3, r0
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	737b      	strb	r3, [r7, #13]
	uint8_t rxdata[2] = {};
 80012a4:	2300      	movs	r3, #0
 80012a6:	813b      	strh	r3, [r7, #8]
	AS5147Select();
 80012a8:	f000 f81a 	bl	80012e0 <AS5147Select>
	HAL_SPI_TransmitReceive(&AS5147_SPI_HANDLER, txdata, rxdata, 2, 1);
 80012ac:	f107 0208 	add.w	r2, r7, #8
 80012b0:	f107 010c 	add.w	r1, r7, #12
 80012b4:	2301      	movs	r3, #1
 80012b6:	9300      	str	r3, [sp, #0]
 80012b8:	2302      	movs	r3, #2
 80012ba:	4808      	ldr	r0, [pc, #32]	; (80012dc <AS5147Read+0x6c>)
 80012bc:	f003 feae 	bl	800501c <HAL_SPI_TransmitReceive>
	AS5147Deselect();
 80012c0:	f000 f81a 	bl	80012f8 <AS5147Deselect>
	return ((rxdata[0] << 8) | rxdata[1]);
 80012c4:	7a3b      	ldrb	r3, [r7, #8]
 80012c6:	021b      	lsls	r3, r3, #8
 80012c8:	b21a      	sxth	r2, r3
 80012ca:	7a7b      	ldrb	r3, [r7, #9]
 80012cc:	b21b      	sxth	r3, r3
 80012ce:	4313      	orrs	r3, r2
 80012d0:	b21b      	sxth	r3, r3
 80012d2:	b29b      	uxth	r3, r3
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3710      	adds	r7, #16
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	20003688 	.word	0x20003688

080012e0 <AS5147Select>:
/*
 * Select
 * @param
 * @return
 */
static void AS5147Select(void) {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(AS5147_CS_PORT, AS5147_CS_PIN, GPIO_PIN_RESET);
 80012e4:	2200      	movs	r2, #0
 80012e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012ea:	4802      	ldr	r0, [pc, #8]	; (80012f4 <AS5147Select+0x14>)
 80012ec:	f003 f9c2 	bl	8004674 <HAL_GPIO_WritePin>
}
 80012f0:	bf00      	nop
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	40020000 	.word	0x40020000

080012f8 <AS5147Deselect>:
/*
 * Deselect
 * @param
 * @return
 */
static void AS5147Deselect(void) {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(AS5147_CS_PORT, AS5147_CS_PIN, GPIO_PIN_SET);
 80012fc:	2201      	movs	r2, #1
 80012fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001302:	4802      	ldr	r0, [pc, #8]	; (800130c <AS5147Deselect+0x14>)
 8001304:	f003 f9b6 	bl	8004674 <HAL_GPIO_WritePin>
}
 8001308:	bf00      	nop
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40020000 	.word	0x40020000

08001310 <AS5147AddParityBit>:
/*
 * Parity Calculation
 * @param	raw_data
 * @return	parity bit + raw_data
 */
static uint16_t AS5147AddParityBit(uint16_t raw_data) {
 8001310:	b480      	push	{r7}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	80fb      	strh	r3, [r7, #6]
	uint16_t parity = raw_data;
 800131a:	88fb      	ldrh	r3, [r7, #6]
 800131c:	81fb      	strh	r3, [r7, #14]
	parity ^= parity >> 8;
 800131e:	89fb      	ldrh	r3, [r7, #14]
 8001320:	0a1b      	lsrs	r3, r3, #8
 8001322:	b29a      	uxth	r2, r3
 8001324:	89fb      	ldrh	r3, [r7, #14]
 8001326:	4053      	eors	r3, r2
 8001328:	81fb      	strh	r3, [r7, #14]
	parity ^= parity >> 4;
 800132a:	89fb      	ldrh	r3, [r7, #14]
 800132c:	091b      	lsrs	r3, r3, #4
 800132e:	b29a      	uxth	r2, r3
 8001330:	89fb      	ldrh	r3, [r7, #14]
 8001332:	4053      	eors	r3, r2
 8001334:	81fb      	strh	r3, [r7, #14]
	parity ^= parity >> 2;
 8001336:	89fb      	ldrh	r3, [r7, #14]
 8001338:	089b      	lsrs	r3, r3, #2
 800133a:	b29a      	uxth	r2, r3
 800133c:	89fb      	ldrh	r3, [r7, #14]
 800133e:	4053      	eors	r3, r2
 8001340:	81fb      	strh	r3, [r7, #14]
	parity ^= parity >> 1;
 8001342:	89fb      	ldrh	r3, [r7, #14]
 8001344:	085b      	lsrs	r3, r3, #1
 8001346:	b29a      	uxth	r2, r3
 8001348:	89fb      	ldrh	r3, [r7, #14]
 800134a:	4053      	eors	r3, r2
 800134c:	81fb      	strh	r3, [r7, #14]

	return (raw_data | ((parity & 0x0001) << 15));
 800134e:	89fb      	ldrh	r3, [r7, #14]
 8001350:	03db      	lsls	r3, r3, #15
 8001352:	b21a      	sxth	r2, r3
 8001354:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001358:	4313      	orrs	r3, r2
 800135a:	b21b      	sxth	r3, r3
 800135c:	b29b      	uxth	r3, r3
}
 800135e:	4618      	mov	r0, r3
 8001360:	3714      	adds	r7, #20
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	0000      	movs	r0, r0
 800136c:	0000      	movs	r0, r0
	...

08001370 <BLDCVqConstControl>:

//static variables
static uint16_t curt_sense_data[ADC_CURT_SENSE_BUFFER_SIZE] = {};
static float curt_sense_data_offset[ADC_CURT_SENSE_BUFFER_SIZE] = {};

void BLDCVqConstControl(float vol_d, float vol_q) {
 8001370:	b5b0      	push	{r4, r5, r7, lr}
 8001372:	b08e      	sub	sp, #56	; 0x38
 8001374:	af00      	add	r7, sp, #0
 8001376:	ed87 0a01 	vstr	s0, [r7, #4]
 800137a:	edc7 0a00 	vstr	s1, [r7]
	float curt_alpha, curt_beta; 	//I_alpha, I_beta current[A]
    float curt_d, curt_q;			//Id, Iq current[A]

    static volatile float vol_u, vol_v, vol_w, vol_max;
    static volatile float vol_alpha, vol_beta;
    const float pwm_max = __HAL_TIM_GET_AUTORELOAD(&htim8);
 800137e:	4be4      	ldr	r3, [pc, #912]	; (8001710 <BLDCVqConstControl+0x3a0>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001384:	ee07 3a90 	vmov	s15, r3
 8001388:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800138c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

    float theta, sinth, costh;
	uint16_t theta_data;

	theta_data = (AS5147Read(AS5147_ANGLECOM) & 0x3FFF);		//mask lower 14bit
 8001390:	f643 70ff 	movw	r0, #16383	; 0x3fff
 8001394:	f7ff ff6c 	bl	8001270 <AS5147Read>
 8001398:	4603      	mov	r3, r0
 800139a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800139e:	867b      	strh	r3, [r7, #50]	; 0x32
	theta = fmodf(((float)theta_data + ((float)0x3FFF / 12) - 361), ((float)0x3FFF / 12)) * ((float)(2 * M_PI * 12) / 0x3FFF);
 80013a0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80013a2:	ee07 3a90 	vmov	s15, r3
 80013a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013aa:	ed9f 7ada 	vldr	s14, [pc, #872]	; 8001714 <BLDCVqConstControl+0x3a4>
 80013ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80013b2:	ed9f 7ad9 	vldr	s14, [pc, #868]	; 8001718 <BLDCVqConstControl+0x3a8>
 80013b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80013ba:	eddf 0ad6 	vldr	s1, [pc, #856]	; 8001714 <BLDCVqConstControl+0x3a4>
 80013be:	eeb0 0a67 	vmov.f32	s0, s15
 80013c2:	f008 fc6f 	bl	8009ca4 <fmodf>
 80013c6:	eeb0 7a40 	vmov.f32	s14, s0
 80013ca:	eddf 7ad4 	vldr	s15, [pc, #848]	; 800171c <BLDCVqConstControl+0x3ac>
 80013ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013d2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	sinth = sinf(theta);
 80013d6:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 80013da:	f008 fc21 	bl	8009c20 <sinf>
 80013de:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
	costh = cosf(theta);
 80013e2:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 80013e6:	f008 fb89 	bl	8009afc <cosf>
 80013ea:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24

	//current control
	curt_u = (1.65f - ((float)curt_sense_data[0] - curt_sense_data_offset[0]) * 3.3f / 4096.0f) * 12.5f;
 80013ee:	4bcc      	ldr	r3, [pc, #816]	; (8001720 <BLDCVqConstControl+0x3b0>)
 80013f0:	881b      	ldrh	r3, [r3, #0]
 80013f2:	ee07 3a90 	vmov	s15, r3
 80013f6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013fa:	4bca      	ldr	r3, [pc, #808]	; (8001724 <BLDCVqConstControl+0x3b4>)
 80013fc:	edd3 7a00 	vldr	s15, [r3]
 8001400:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001404:	ed9f 7ac8 	vldr	s14, [pc, #800]	; 8001728 <BLDCVqConstControl+0x3b8>
 8001408:	ee27 7a87 	vmul.f32	s14, s15, s14
 800140c:	eddf 6ac7 	vldr	s13, [pc, #796]	; 800172c <BLDCVqConstControl+0x3bc>
 8001410:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001414:	ed9f 7ac6 	vldr	s14, [pc, #792]	; 8001730 <BLDCVqConstControl+0x3c0>
 8001418:	ee77 7a67 	vsub.f32	s15, s14, s15
 800141c:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8001420:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001424:	edc7 7a08 	vstr	s15, [r7, #32]
	curt_v = (1.65f - ((float)curt_sense_data[1] - curt_sense_data_offset[1]) * 3.3f / 4096.0f) * 12.5f;
 8001428:	4bbd      	ldr	r3, [pc, #756]	; (8001720 <BLDCVqConstControl+0x3b0>)
 800142a:	885b      	ldrh	r3, [r3, #2]
 800142c:	ee07 3a90 	vmov	s15, r3
 8001430:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001434:	4bbb      	ldr	r3, [pc, #748]	; (8001724 <BLDCVqConstControl+0x3b4>)
 8001436:	edd3 7a01 	vldr	s15, [r3, #4]
 800143a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800143e:	ed9f 7aba 	vldr	s14, [pc, #744]	; 8001728 <BLDCVqConstControl+0x3b8>
 8001442:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001446:	eddf 6ab9 	vldr	s13, [pc, #740]	; 800172c <BLDCVqConstControl+0x3bc>
 800144a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800144e:	ed9f 7ab8 	vldr	s14, [pc, #736]	; 8001730 <BLDCVqConstControl+0x3c0>
 8001452:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001456:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800145a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800145e:	edc7 7a07 	vstr	s15, [r7, #28]
	curt_w = (1.65f - ((float)curt_sense_data[2] - curt_sense_data_offset[2]) * 3.3f / 4096.0f) * 12.5f;
 8001462:	4baf      	ldr	r3, [pc, #700]	; (8001720 <BLDCVqConstControl+0x3b0>)
 8001464:	889b      	ldrh	r3, [r3, #4]
 8001466:	ee07 3a90 	vmov	s15, r3
 800146a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800146e:	4bad      	ldr	r3, [pc, #692]	; (8001724 <BLDCVqConstControl+0x3b4>)
 8001470:	edd3 7a02 	vldr	s15, [r3, #8]
 8001474:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001478:	ed9f 7aab 	vldr	s14, [pc, #684]	; 8001728 <BLDCVqConstControl+0x3b8>
 800147c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001480:	eddf 6aaa 	vldr	s13, [pc, #680]	; 800172c <BLDCVqConstControl+0x3bc>
 8001484:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001488:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 8001730 <BLDCVqConstControl+0x3c0>
 800148c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001490:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8001494:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001498:	edc7 7a06 	vstr	s15, [r7, #24]
	/*
	if 		(vol_u >= vol_v && vol_u >= vol_w) {curt_u = -curt_v - curt_w;}
	else if (vol_v >= vol_w && vol_v >= vol_u) {curt_v = -curt_w - curt_u;}
	else if (vol_w >= vol_u && vol_w >= vol_v) {curt_w = -curt_u - curt_v;}
	*/
	if (idx < 3000) {
 800149c:	4ba5      	ldr	r3, [pc, #660]	; (8001734 <BLDCVqConstControl+0x3c4>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80014a4:	4293      	cmp	r3, r2
 80014a6:	dc15      	bgt.n	80014d4 <BLDCVqConstControl+0x164>
		g_curt[idx] = curt_u + curt_v + curt_w;
 80014a8:	ed97 7a08 	vldr	s14, [r7, #32]
 80014ac:	edd7 7a07 	vldr	s15, [r7, #28]
 80014b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014b4:	4b9f      	ldr	r3, [pc, #636]	; (8001734 <BLDCVqConstControl+0x3c4>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	edd7 7a06 	vldr	s15, [r7, #24]
 80014bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014c0:	4a9d      	ldr	r2, [pc, #628]	; (8001738 <BLDCVqConstControl+0x3c8>)
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	4413      	add	r3, r2
 80014c6:	edc3 7a00 	vstr	s15, [r3]
		idx++;
 80014ca:	4b9a      	ldr	r3, [pc, #616]	; (8001734 <BLDCVqConstControl+0x3c4>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	3301      	adds	r3, #1
 80014d0:	4a98      	ldr	r2, [pc, #608]	; (8001734 <BLDCVqConstControl+0x3c4>)
 80014d2:	6013      	str	r3, [r2, #0]
	}

	//current UVW -> alpha,beta
	curt_alpha = 0.8169496580928f * (curt_u - 0.5 * (curt_v + curt_w));
 80014d4:	6a38      	ldr	r0, [r7, #32]
 80014d6:	f7ff f837 	bl	8000548 <__aeabi_f2d>
 80014da:	4604      	mov	r4, r0
 80014dc:	460d      	mov	r5, r1
 80014de:	ed97 7a07 	vldr	s14, [r7, #28]
 80014e2:	edd7 7a06 	vldr	s15, [r7, #24]
 80014e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014ea:	ee17 0a90 	vmov	r0, s15
 80014ee:	f7ff f82b 	bl	8000548 <__aeabi_f2d>
 80014f2:	f04f 0200 	mov.w	r2, #0
 80014f6:	4b91      	ldr	r3, [pc, #580]	; (800173c <BLDCVqConstControl+0x3cc>)
 80014f8:	f7ff f87e 	bl	80005f8 <__aeabi_dmul>
 80014fc:	4602      	mov	r2, r0
 80014fe:	460b      	mov	r3, r1
 8001500:	4620      	mov	r0, r4
 8001502:	4629      	mov	r1, r5
 8001504:	f7fe fec0 	bl	8000288 <__aeabi_dsub>
 8001508:	4603      	mov	r3, r0
 800150a:	460c      	mov	r4, r1
 800150c:	4618      	mov	r0, r3
 800150e:	4621      	mov	r1, r4
 8001510:	a37b      	add	r3, pc, #492	; (adr r3, 8001700 <BLDCVqConstControl+0x390>)
 8001512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001516:	f7ff f86f 	bl	80005f8 <__aeabi_dmul>
 800151a:	4603      	mov	r3, r0
 800151c:	460c      	mov	r4, r1
 800151e:	4618      	mov	r0, r3
 8001520:	4621      	mov	r1, r4
 8001522:	f7ff fb41 	bl	8000ba8 <__aeabi_d2f>
 8001526:	4603      	mov	r3, r0
 8001528:	617b      	str	r3, [r7, #20]
	curt_beta  = 0.7071067811866f * (curt_v - curt_w);
 800152a:	ed97 7a07 	vldr	s14, [r7, #28]
 800152e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001532:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001536:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8001740 <BLDCVqConstControl+0x3d0>
 800153a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800153e:	edc7 7a04 	vstr	s15, [r7, #16]

	//current alpha,beta -> dq
	curt_d =  curt_alpha * costh + curt_beta * sinth;
 8001542:	ed97 7a05 	vldr	s14, [r7, #20]
 8001546:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800154a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800154e:	edd7 6a04 	vldr	s13, [r7, #16]
 8001552:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001556:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800155a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800155e:	edc7 7a03 	vstr	s15, [r7, #12]
	curt_q = -curt_alpha * sinth + curt_beta * costh;
 8001562:	edd7 7a05 	vldr	s15, [r7, #20]
 8001566:	eeb1 7a67 	vneg.f32	s14, s15
 800156a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800156e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001572:	edd7 6a04 	vldr	s13, [r7, #16]
 8001576:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800157a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800157e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001582:	edc7 7a02 	vstr	s15, [r7, #8]

	//Vd,Vq control
	//dq -> alpha,beta
	vol_alpha = vol_d * costh - vol_q * sinth;
 8001586:	ed97 7a01 	vldr	s14, [r7, #4]
 800158a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800158e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001592:	edd7 6a00 	vldr	s13, [r7]
 8001596:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800159a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800159e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015a2:	4b68      	ldr	r3, [pc, #416]	; (8001744 <BLDCVqConstControl+0x3d4>)
 80015a4:	edc3 7a00 	vstr	s15, [r3]
	vol_beta  = vol_d * sinth + vol_q * costh;
 80015a8:	ed97 7a01 	vldr	s14, [r7, #4]
 80015ac:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80015b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015b4:	edd7 6a00 	vldr	s13, [r7]
 80015b8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80015bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015c4:	4b60      	ldr	r3, [pc, #384]	; (8001748 <BLDCVqConstControl+0x3d8>)
 80015c6:	edc3 7a00 	vstr	s15, [r3]

	//alpha,beta -> UVW
	vol_u =  0.81649658f * vol_alpha;
 80015ca:	4b5e      	ldr	r3, [pc, #376]	; (8001744 <BLDCVqConstControl+0x3d4>)
 80015cc:	edd3 7a00 	vldr	s15, [r3]
 80015d0:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 800174c <BLDCVqConstControl+0x3dc>
 80015d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015d8:	4b5d      	ldr	r3, [pc, #372]	; (8001750 <BLDCVqConstControl+0x3e0>)
 80015da:	edc3 7a00 	vstr	s15, [r3]
    vol_v = -0.40824829f * vol_alpha + 0.707106781 * vol_beta;
 80015de:	4b59      	ldr	r3, [pc, #356]	; (8001744 <BLDCVqConstControl+0x3d4>)
 80015e0:	edd3 7a00 	vldr	s15, [r3]
 80015e4:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8001754 <BLDCVqConstControl+0x3e4>
 80015e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015ec:	ee17 0a90 	vmov	r0, s15
 80015f0:	f7fe ffaa 	bl	8000548 <__aeabi_f2d>
 80015f4:	4604      	mov	r4, r0
 80015f6:	460d      	mov	r5, r1
 80015f8:	4b53      	ldr	r3, [pc, #332]	; (8001748 <BLDCVqConstControl+0x3d8>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7fe ffa3 	bl	8000548 <__aeabi_f2d>
 8001602:	a341      	add	r3, pc, #260	; (adr r3, 8001708 <BLDCVqConstControl+0x398>)
 8001604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001608:	f7fe fff6 	bl	80005f8 <__aeabi_dmul>
 800160c:	4602      	mov	r2, r0
 800160e:	460b      	mov	r3, r1
 8001610:	4620      	mov	r0, r4
 8001612:	4629      	mov	r1, r5
 8001614:	f7fe fe3a 	bl	800028c <__adddf3>
 8001618:	4603      	mov	r3, r0
 800161a:	460c      	mov	r4, r1
 800161c:	4618      	mov	r0, r3
 800161e:	4621      	mov	r1, r4
 8001620:	f7ff fac2 	bl	8000ba8 <__aeabi_d2f>
 8001624:	4602      	mov	r2, r0
 8001626:	4b4c      	ldr	r3, [pc, #304]	; (8001758 <BLDCVqConstControl+0x3e8>)
 8001628:	601a      	str	r2, [r3, #0]
    vol_w = -0.40824829f * vol_alpha - 0.707106781 * vol_beta;
 800162a:	4b46      	ldr	r3, [pc, #280]	; (8001744 <BLDCVqConstControl+0x3d4>)
 800162c:	edd3 7a00 	vldr	s15, [r3]
 8001630:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8001754 <BLDCVqConstControl+0x3e4>
 8001634:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001638:	ee17 0a90 	vmov	r0, s15
 800163c:	f7fe ff84 	bl	8000548 <__aeabi_f2d>
 8001640:	4604      	mov	r4, r0
 8001642:	460d      	mov	r5, r1
 8001644:	4b40      	ldr	r3, [pc, #256]	; (8001748 <BLDCVqConstControl+0x3d8>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4618      	mov	r0, r3
 800164a:	f7fe ff7d 	bl	8000548 <__aeabi_f2d>
 800164e:	a32e      	add	r3, pc, #184	; (adr r3, 8001708 <BLDCVqConstControl+0x398>)
 8001650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001654:	f7fe ffd0 	bl	80005f8 <__aeabi_dmul>
 8001658:	4602      	mov	r2, r0
 800165a:	460b      	mov	r3, r1
 800165c:	4620      	mov	r0, r4
 800165e:	4629      	mov	r1, r5
 8001660:	f7fe fe12 	bl	8000288 <__aeabi_dsub>
 8001664:	4603      	mov	r3, r0
 8001666:	460c      	mov	r4, r1
 8001668:	4618      	mov	r0, r3
 800166a:	4621      	mov	r1, r4
 800166c:	f7ff fa9c 	bl	8000ba8 <__aeabi_d2f>
 8001670:	4602      	mov	r2, r0
 8001672:	4b3a      	ldr	r3, [pc, #232]	; (800175c <BLDCVqConstControl+0x3ec>)
 8001674:	601a      	str	r2, [r3, #0]

    vol_u = fmaxf(fminf(pwm_max / 2.0f + vol_u * pwm_max / 12.0f, pwm_max), 0);
 8001676:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800167a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800167e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001682:	4b33      	ldr	r3, [pc, #204]	; (8001750 <BLDCVqConstControl+0x3e0>)
 8001684:	edd3 6a00 	vldr	s13, [r3]
 8001688:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800168c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001690:	eeb2 6a08 	vmov.f32	s12, #40	; 0x41400000  12.0
 8001694:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001698:	ee77 7a27 	vadd.f32	s15, s14, s15
 800169c:	edd7 0a0d 	vldr	s1, [r7, #52]	; 0x34
 80016a0:	eeb0 0a67 	vmov.f32	s0, s15
 80016a4:	f008 fa85 	bl	8009bb2 <fminf>
 80016a8:	eef0 7a40 	vmov.f32	s15, s0
 80016ac:	eddf 0a2c 	vldr	s1, [pc, #176]	; 8001760 <BLDCVqConstControl+0x3f0>
 80016b0:	eeb0 0a67 	vmov.f32	s0, s15
 80016b4:	f008 fa62 	bl	8009b7c <fmaxf>
 80016b8:	eef0 7a40 	vmov.f32	s15, s0
 80016bc:	4b24      	ldr	r3, [pc, #144]	; (8001750 <BLDCVqConstControl+0x3e0>)
 80016be:	edc3 7a00 	vstr	s15, [r3]
    vol_v = fmaxf(fminf(pwm_max / 2.0f + vol_v * pwm_max / 12.0f, pwm_max), 0);
 80016c2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80016c6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80016ca:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80016ce:	4b22      	ldr	r3, [pc, #136]	; (8001758 <BLDCVqConstControl+0x3e8>)
 80016d0:	edd3 6a00 	vldr	s13, [r3]
 80016d4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80016d8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80016dc:	eeb2 6a08 	vmov.f32	s12, #40	; 0x41400000  12.0
 80016e0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80016e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016e8:	edd7 0a0d 	vldr	s1, [r7, #52]	; 0x34
 80016ec:	eeb0 0a67 	vmov.f32	s0, s15
 80016f0:	f008 fa5f 	bl	8009bb2 <fminf>
 80016f4:	eef0 7a40 	vmov.f32	s15, s0
 80016f8:	e034      	b.n	8001764 <BLDCVqConstControl+0x3f4>
 80016fa:	bf00      	nop
 80016fc:	f3af 8000 	nop.w
 8001700:	a0000000 	.word	0xa0000000
 8001704:	3fea2473 	.word	0x3fea2473
 8001708:	6665983e 	.word	0x6665983e
 800170c:	3fe6a09e 	.word	0x3fe6a09e
 8001710:	200036e0 	.word	0x200036e0
 8001714:	44aaa800 	.word	0x44aaa800
 8001718:	43b48000 	.word	0x43b48000
 800171c:	3b96ce3f 	.word	0x3b96ce3f
 8001720:	20000208 	.word	0x20000208
 8001724:	20000210 	.word	0x20000210
 8001728:	40533333 	.word	0x40533333
 800172c:	45800000 	.word	0x45800000
 8001730:	3fd33333 	.word	0x3fd33333
 8001734:	20000204 	.word	0x20000204
 8001738:	2000033c 	.word	0x2000033c
 800173c:	3fe00000 	.word	0x3fe00000
 8001740:	3f3504f3 	.word	0x3f3504f3
 8001744:	2000021c 	.word	0x2000021c
 8001748:	20000220 	.word	0x20000220
 800174c:	3f5105eb 	.word	0x3f5105eb
 8001750:	20000224 	.word	0x20000224
 8001754:	bed105eb 	.word	0xbed105eb
 8001758:	20000228 	.word	0x20000228
 800175c:	2000022c 	.word	0x2000022c
 8001760:	00000000 	.word	0x00000000
 8001764:	ed5f 0a02 	vldr	s1, [pc, #-8]	; 8001760 <BLDCVqConstControl+0x3f0>
 8001768:	eeb0 0a67 	vmov.f32	s0, s15
 800176c:	f008 fa06 	bl	8009b7c <fmaxf>
 8001770:	eef0 7a40 	vmov.f32	s15, s0
 8001774:	4b26      	ldr	r3, [pc, #152]	; (8001810 <BLDCVqConstControl+0x4a0>)
 8001776:	edc3 7a00 	vstr	s15, [r3]
    vol_w = fmaxf(fminf(pwm_max / 2.0f + vol_w * pwm_max / 12.0f, pwm_max), 0);
 800177a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800177e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001782:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001786:	4b23      	ldr	r3, [pc, #140]	; (8001814 <BLDCVqConstControl+0x4a4>)
 8001788:	edd3 6a00 	vldr	s13, [r3]
 800178c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001790:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001794:	eeb2 6a08 	vmov.f32	s12, #40	; 0x41400000  12.0
 8001798:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800179c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017a0:	edd7 0a0d 	vldr	s1, [r7, #52]	; 0x34
 80017a4:	eeb0 0a67 	vmov.f32	s0, s15
 80017a8:	f008 fa03 	bl	8009bb2 <fminf>
 80017ac:	eef0 7a40 	vmov.f32	s15, s0
 80017b0:	eddf 0a19 	vldr	s1, [pc, #100]	; 8001818 <BLDCVqConstControl+0x4a8>
 80017b4:	eeb0 0a67 	vmov.f32	s0, s15
 80017b8:	f008 f9e0 	bl	8009b7c <fmaxf>
 80017bc:	eef0 7a40 	vmov.f32	s15, s0
 80017c0:	4b14      	ldr	r3, [pc, #80]	; (8001814 <BLDCVqConstControl+0x4a4>)
 80017c2:	edc3 7a00 	vstr	s15, [r3]

//    printf("%f %f %f %f\n", theta, vol_u, vol_v, vol_w);

    //output PWM
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, (uint16_t)vol_u);
 80017c6:	4b15      	ldr	r3, [pc, #84]	; (800181c <BLDCVqConstControl+0x4ac>)
 80017c8:	edd3 7a00 	vldr	s15, [r3]
 80017cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017d0:	ee17 3a90 	vmov	r3, s15
 80017d4:	b29a      	uxth	r2, r3
 80017d6:	4b12      	ldr	r3, [pc, #72]	; (8001820 <BLDCVqConstControl+0x4b0>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, (uint16_t)vol_v);
 80017dc:	4b0c      	ldr	r3, [pc, #48]	; (8001810 <BLDCVqConstControl+0x4a0>)
 80017de:	edd3 7a00 	vldr	s15, [r3]
 80017e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017e6:	ee17 3a90 	vmov	r3, s15
 80017ea:	b29a      	uxth	r2, r3
 80017ec:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <BLDCVqConstControl+0x4b0>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, (uint16_t)vol_w);
 80017f2:	4b08      	ldr	r3, [pc, #32]	; (8001814 <BLDCVqConstControl+0x4a4>)
 80017f4:	edd3 7a00 	vldr	s15, [r3]
 80017f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017fc:	ee17 3a90 	vmov	r3, s15
 8001800:	b29a      	uxth	r2, r3
 8001802:	4b07      	ldr	r3, [pc, #28]	; (8001820 <BLDCVqConstControl+0x4b0>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001808:	bf00      	nop
 800180a:	3738      	adds	r7, #56	; 0x38
 800180c:	46bd      	mov	sp, r7
 800180e:	bdb0      	pop	{r4, r5, r7, pc}
 8001810:	20000228 	.word	0x20000228
 8001814:	2000022c 	.word	0x2000022c
 8001818:	00000000 	.word	0x00000000
 800181c:	20000224 	.word	0x20000224
 8001820:	200036e0 	.word	0x200036e0

08001824 <BLDCGetCurrentSenseOffset>:

void BLDCGetCurrentSenseOffset(void) {
 8001824:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001828:	b086      	sub	sp, #24
 800182a:	af04      	add	r7, sp, #16
	const int32_t num_offset = 10000;
 800182c:	f242 7310 	movw	r3, #10000	; 0x2710
 8001830:	603b      	str	r3, [r7, #0]

	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, __HAL_TIM_GET_AUTORELOAD(&htim8) - 1);
 8001832:	4b4c      	ldr	r3, [pc, #304]	; (8001964 <BLDCGetCurrentSenseOffset+0x140>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001838:	4b4a      	ldr	r3, [pc, #296]	; (8001964 <BLDCGetCurrentSenseOffset+0x140>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	3a01      	subs	r2, #1
 800183e:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8001840:	210c      	movs	r1, #12
 8001842:	4848      	ldr	r0, [pc, #288]	; (8001964 <BLDCGetCurrentSenseOffset+0x140>)
 8001844:	f003 feb2 	bl	80055ac <HAL_TIM_PWM_Start>
	HAL_Delay(10);
 8001848:	200a      	movs	r0, #10
 800184a:	f001 fb55 	bl	8002ef8 <HAL_Delay>

 	curt_sense_data_offset[0] = curt_sense_data_offset[1] = curt_sense_data_offset[2] = 0;
 800184e:	4b46      	ldr	r3, [pc, #280]	; (8001968 <BLDCGetCurrentSenseOffset+0x144>)
 8001850:	f04f 0200 	mov.w	r2, #0
 8001854:	609a      	str	r2, [r3, #8]
 8001856:	4b44      	ldr	r3, [pc, #272]	; (8001968 <BLDCGetCurrentSenseOffset+0x144>)
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	4a43      	ldr	r2, [pc, #268]	; (8001968 <BLDCGetCurrentSenseOffset+0x144>)
 800185c:	6053      	str	r3, [r2, #4]
 800185e:	4b42      	ldr	r3, [pc, #264]	; (8001968 <BLDCGetCurrentSenseOffset+0x144>)
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	4a41      	ldr	r2, [pc, #260]	; (8001968 <BLDCGetCurrentSenseOffset+0x144>)
 8001864:	6013      	str	r3, [r2, #0]
 	for (int32_t i = 0; i < num_offset; i++) {
 8001866:	2300      	movs	r3, #0
 8001868:	607b      	str	r3, [r7, #4]
 800186a:	e02c      	b.n	80018c6 <BLDCGetCurrentSenseOffset+0xa2>
 		curt_sense_data_offset[0] += curt_sense_data[0];
 800186c:	4b3e      	ldr	r3, [pc, #248]	; (8001968 <BLDCGetCurrentSenseOffset+0x144>)
 800186e:	ed93 7a00 	vldr	s14, [r3]
 8001872:	4b3e      	ldr	r3, [pc, #248]	; (800196c <BLDCGetCurrentSenseOffset+0x148>)
 8001874:	881b      	ldrh	r3, [r3, #0]
 8001876:	ee07 3a90 	vmov	s15, r3
 800187a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800187e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001882:	4b39      	ldr	r3, [pc, #228]	; (8001968 <BLDCGetCurrentSenseOffset+0x144>)
 8001884:	edc3 7a00 	vstr	s15, [r3]
 		curt_sense_data_offset[1] += curt_sense_data[1];
 8001888:	4b37      	ldr	r3, [pc, #220]	; (8001968 <BLDCGetCurrentSenseOffset+0x144>)
 800188a:	ed93 7a01 	vldr	s14, [r3, #4]
 800188e:	4b37      	ldr	r3, [pc, #220]	; (800196c <BLDCGetCurrentSenseOffset+0x148>)
 8001890:	885b      	ldrh	r3, [r3, #2]
 8001892:	ee07 3a90 	vmov	s15, r3
 8001896:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800189a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800189e:	4b32      	ldr	r3, [pc, #200]	; (8001968 <BLDCGetCurrentSenseOffset+0x144>)
 80018a0:	edc3 7a01 	vstr	s15, [r3, #4]
 		curt_sense_data_offset[2] += curt_sense_data[2];
 80018a4:	4b30      	ldr	r3, [pc, #192]	; (8001968 <BLDCGetCurrentSenseOffset+0x144>)
 80018a6:	ed93 7a02 	vldr	s14, [r3, #8]
 80018aa:	4b30      	ldr	r3, [pc, #192]	; (800196c <BLDCGetCurrentSenseOffset+0x148>)
 80018ac:	889b      	ldrh	r3, [r3, #4]
 80018ae:	ee07 3a90 	vmov	s15, r3
 80018b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018ba:	4b2b      	ldr	r3, [pc, #172]	; (8001968 <BLDCGetCurrentSenseOffset+0x144>)
 80018bc:	edc3 7a02 	vstr	s15, [r3, #8]
 	for (int32_t i = 0; i < num_offset; i++) {
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	3301      	adds	r3, #1
 80018c4:	607b      	str	r3, [r7, #4]
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	dbce      	blt.n	800186c <BLDCGetCurrentSenseOffset+0x48>
 	}
 	curt_sense_data_offset[0] /= num_offset;
 80018ce:	4b26      	ldr	r3, [pc, #152]	; (8001968 <BLDCGetCurrentSenseOffset+0x144>)
 80018d0:	edd3 6a00 	vldr	s13, [r3]
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	ee07 3a90 	vmov	s15, r3
 80018da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018e2:	4b21      	ldr	r3, [pc, #132]	; (8001968 <BLDCGetCurrentSenseOffset+0x144>)
 80018e4:	edc3 7a00 	vstr	s15, [r3]
 	curt_sense_data_offset[1] /= num_offset;
 80018e8:	4b1f      	ldr	r3, [pc, #124]	; (8001968 <BLDCGetCurrentSenseOffset+0x144>)
 80018ea:	edd3 6a01 	vldr	s13, [r3, #4]
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	ee07 3a90 	vmov	s15, r3
 80018f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018fc:	4b1a      	ldr	r3, [pc, #104]	; (8001968 <BLDCGetCurrentSenseOffset+0x144>)
 80018fe:	edc3 7a01 	vstr	s15, [r3, #4]
 	curt_sense_data_offset[2] /= num_offset;
 8001902:	4b19      	ldr	r3, [pc, #100]	; (8001968 <BLDCGetCurrentSenseOffset+0x144>)
 8001904:	edd3 6a02 	vldr	s13, [r3, #8]
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	ee07 3a90 	vmov	s15, r3
 800190e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001912:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001916:	4b14      	ldr	r3, [pc, #80]	; (8001968 <BLDCGetCurrentSenseOffset+0x144>)
 8001918:	edc3 7a02 	vstr	s15, [r3, #8]
 	printf("%f %f %f\n", curt_sense_data_offset[0], curt_sense_data_offset[1], curt_sense_data_offset[2]);
 800191c:	4b12      	ldr	r3, [pc, #72]	; (8001968 <BLDCGetCurrentSenseOffset+0x144>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4618      	mov	r0, r3
 8001922:	f7fe fe11 	bl	8000548 <__aeabi_f2d>
 8001926:	4680      	mov	r8, r0
 8001928:	4689      	mov	r9, r1
 800192a:	4b0f      	ldr	r3, [pc, #60]	; (8001968 <BLDCGetCurrentSenseOffset+0x144>)
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	4618      	mov	r0, r3
 8001930:	f7fe fe0a 	bl	8000548 <__aeabi_f2d>
 8001934:	4604      	mov	r4, r0
 8001936:	460d      	mov	r5, r1
 8001938:	4b0b      	ldr	r3, [pc, #44]	; (8001968 <BLDCGetCurrentSenseOffset+0x144>)
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	4618      	mov	r0, r3
 800193e:	f7fe fe03 	bl	8000548 <__aeabi_f2d>
 8001942:	4602      	mov	r2, r0
 8001944:	460b      	mov	r3, r1
 8001946:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800194a:	e9cd 4500 	strd	r4, r5, [sp]
 800194e:	4642      	mov	r2, r8
 8001950:	464b      	mov	r3, r9
 8001952:	4807      	ldr	r0, [pc, #28]	; (8001970 <BLDCGetCurrentSenseOffset+0x14c>)
 8001954:	f006 f8ec 	bl	8007b30 <iprintf>
}
 8001958:	bf00      	nop
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001962:	bf00      	nop
 8001964:	200036e0 	.word	0x200036e0
 8001968:	20000210 	.word	0x20000210
 800196c:	20000208 	.word	0x20000208
 8001970:	0800a8a0 	.word	0x0800a8a0

08001974 <BLDCStartCurrentSense>:
 * @param
 * @return
 * @note	Triggered by tim8(at the center of center aligned PWM.
 * 			Data will be automatically transfered to the variable by DMA
 */
void BLDCStartCurrentSense(void) {
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)curt_sense_data, ADC_CURT_SENSE_BUFFER_SIZE);
 8001978:	2203      	movs	r2, #3
 800197a:	4903      	ldr	r1, [pc, #12]	; (8001988 <BLDCStartCurrentSense+0x14>)
 800197c:	4803      	ldr	r0, [pc, #12]	; (800198c <BLDCStartCurrentSense+0x18>)
 800197e:	f001 fc61 	bl	8003244 <HAL_ADC_Start_DMA>
}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	20000208 	.word	0x20000208
 800198c:	20000294 	.word	0x20000294

08001990 <BLDCEnable>:
/*
 * Enable BLDC Motor(Enable Gate Driver & Start TIM8 PWM Generation)
 * @param
 * @return
 */
void BLDCEnable(void) {
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);		//EN_GATE = HIGH
 8001994:	2201      	movs	r2, #1
 8001996:	f44f 7180 	mov.w	r1, #256	; 0x100
 800199a:	4814      	ldr	r0, [pc, #80]	; (80019ec <BLDCEnable+0x5c>)
 800199c:	f002 fe6a 	bl	8004674 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);
 80019a0:	4b13      	ldr	r3, [pc, #76]	; (80019f0 <BLDCEnable+0x60>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2200      	movs	r2, #0
 80019a6:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);
 80019a8:	4b11      	ldr	r3, [pc, #68]	; (80019f0 <BLDCEnable+0x60>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2200      	movs	r2, #0
 80019ae:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, 0);
 80019b0:	4b0f      	ldr	r3, [pc, #60]	; (80019f0 <BLDCEnable+0x60>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2200      	movs	r2, #0
 80019b6:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, __HAL_TIM_GET_AUTORELOAD(&htim8) - 1);
 80019b8:	4b0d      	ldr	r3, [pc, #52]	; (80019f0 <BLDCEnable+0x60>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019be:	4b0c      	ldr	r3, [pc, #48]	; (80019f0 <BLDCEnable+0x60>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	3a01      	subs	r2, #1
 80019c4:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80019c6:	2100      	movs	r1, #0
 80019c8:	4809      	ldr	r0, [pc, #36]	; (80019f0 <BLDCEnable+0x60>)
 80019ca:	f003 fdef 	bl	80055ac <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 80019ce:	2104      	movs	r1, #4
 80019d0:	4807      	ldr	r0, [pc, #28]	; (80019f0 <BLDCEnable+0x60>)
 80019d2:	f003 fdeb 	bl	80055ac <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 80019d6:	2108      	movs	r1, #8
 80019d8:	4805      	ldr	r0, [pc, #20]	; (80019f0 <BLDCEnable+0x60>)
 80019da:	f003 fde7 	bl	80055ac <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 80019de:	210c      	movs	r1, #12
 80019e0:	4803      	ldr	r0, [pc, #12]	; (80019f0 <BLDCEnable+0x60>)
 80019e2:	f003 fde3 	bl	80055ac <HAL_TIM_PWM_Start>
}
 80019e6:	bf00      	nop
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	40020000 	.word	0x40020000
 80019f0:	200036e0 	.word	0x200036e0

080019f4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	607b      	str	r3, [r7, #4]
 80019fe:	4b14      	ldr	r3, [pc, #80]	; (8001a50 <MX_DMA_Init+0x5c>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	4a13      	ldr	r2, [pc, #76]	; (8001a50 <MX_DMA_Init+0x5c>)
 8001a04:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a08:	6313      	str	r3, [r2, #48]	; 0x30
 8001a0a:	4b11      	ldr	r3, [pc, #68]	; (8001a50 <MX_DMA_Init+0x5c>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a12:	607b      	str	r3, [r7, #4]
 8001a14:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001a16:	2200      	movs	r2, #0
 8001a18:	2100      	movs	r1, #0
 8001a1a:	2038      	movs	r0, #56	; 0x38
 8001a1c:	f002 f8b1 	bl	8003b82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001a20:	2038      	movs	r0, #56	; 0x38
 8001a22:	f002 f8ca 	bl	8003bba <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001a26:	2200      	movs	r2, #0
 8001a28:	2100      	movs	r1, #0
 8001a2a:	203a      	movs	r0, #58	; 0x3a
 8001a2c:	f002 f8a9 	bl	8003b82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001a30:	203a      	movs	r0, #58	; 0x3a
 8001a32:	f002 f8c2 	bl	8003bba <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8001a36:	2200      	movs	r2, #0
 8001a38:	2100      	movs	r1, #0
 8001a3a:	2046      	movs	r0, #70	; 0x46
 8001a3c:	f002 f8a1 	bl	8003b82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001a40:	2046      	movs	r0, #70	; 0x46
 8001a42:	f002 f8ba 	bl	8003bba <HAL_NVIC_EnableIRQ>

}
 8001a46:	bf00      	nop
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	40023800 	.word	0x40023800

08001a54 <dma_printf_init>:
#include "dma_ring.h"
#include <stdbool.h>

struct dma_printf_info dmi;

void dma_printf_init(UART_HandleTypeDef *printf_huart){
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
    dmi.huart = printf_huart;
 8001a5c:	4a09      	ldr	r2, [pc, #36]	; (8001a84 <dma_printf_init+0x30>)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
    dma_ring_init(&dmi.tx_ring);
 8001a64:	4807      	ldr	r0, [pc, #28]	; (8001a84 <dma_printf_init+0x30>)
 8001a66:	f000 f87d 	bl	8001b64 <dma_ring_init>
    dmi.sending = false;
 8001a6a:	4b06      	ldr	r3, [pc, #24]	; (8001a84 <dma_printf_init+0x30>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    dmi.previous_send_len = 0;
 8001a72:	4b04      	ldr	r3, [pc, #16]	; (8001a84 <dma_printf_init+0x30>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
}
 8001a7a:	bf00      	nop
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	2000321c 	.word	0x2000321c

08001a88 <dma_printf_putc>:

void dma_printf_putc(uint8_t c){
 8001a88:	b590      	push	{r4, r7, lr}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	4603      	mov	r3, r0
 8001a90:	71fb      	strb	r3, [r7, #7]
    dma_ring_putc(&dmi.tx_ring, c);
 8001a92:	79fb      	ldrb	r3, [r7, #7]
 8001a94:	4619      	mov	r1, r3
 8001a96:	4814      	ldr	r0, [pc, #80]	; (8001ae8 <dma_printf_putc+0x60>)
 8001a98:	f000 f87f 	bl	8001b9a <dma_ring_putc>
    if(!dmi.sending){
 8001a9c:	4b12      	ldr	r3, [pc, #72]	; (8001ae8 <dma_printf_putc+0x60>)
 8001a9e:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d11b      	bne.n	8001ade <dma_printf_putc+0x56>
        uint16_t len = (uint16_t)dma_ring_available_linear(&dmi.tx_ring);
 8001aa6:	4810      	ldr	r0, [pc, #64]	; (8001ae8 <dma_printf_putc+0x60>)
 8001aa8:	f000 f8ac 	bl	8001c04 <dma_ring_available_linear>
 8001aac:	4603      	mov	r3, r0
 8001aae:	81fb      	strh	r3, [r7, #14]
        dmi.previous_send_len = len;
 8001ab0:	89fb      	ldrh	r3, [r7, #14]
 8001ab2:	4a0d      	ldr	r2, [pc, #52]	; (8001ae8 <dma_printf_putc+0x60>)
 8001ab4:	f8c2 3410 	str.w	r3, [r2, #1040]	; 0x410
        dmi.sending = true;
 8001ab8:	4b0b      	ldr	r3, [pc, #44]	; (8001ae8 <dma_printf_putc+0x60>)
 8001aba:	2201      	movs	r2, #1
 8001abc:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        HAL_UART_Transmit_DMA(dmi.huart, dmi.tx_ring.buf+dma_ring_get_r_ptr(&dmi.tx_ring), len);
 8001ac0:	4b09      	ldr	r3, [pc, #36]	; (8001ae8 <dma_printf_putc+0x60>)
 8001ac2:	f8d3 440c 	ldr.w	r4, [r3, #1036]	; 0x40c
 8001ac6:	4808      	ldr	r0, [pc, #32]	; (8001ae8 <dma_printf_putc+0x60>)
 8001ac8:	f000 f8bf 	bl	8001c4a <dma_ring_get_r_ptr>
 8001acc:	4603      	mov	r3, r0
 8001ace:	461a      	mov	r2, r3
 8001ad0:	4b05      	ldr	r3, [pc, #20]	; (8001ae8 <dma_printf_putc+0x60>)
 8001ad2:	4413      	add	r3, r2
 8001ad4:	89fa      	ldrh	r2, [r7, #14]
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4620      	mov	r0, r4
 8001ada:	f004 fce7 	bl	80064ac <HAL_UART_Transmit_DMA>
    }
}
 8001ade:	bf00      	nop
 8001ae0:	3714      	adds	r7, #20
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd90      	pop	{r4, r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	2000321c 	.word	0x2000321c

08001aec <dma_printf_send_it>:

void dma_printf_send_it(UART_HandleTypeDef *printf_huart) {
 8001aec:	b590      	push	{r4, r7, lr}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
    if(dmi.huart != printf_huart) return;
 8001af4:	4b1a      	ldr	r3, [pc, #104]	; (8001b60 <dma_printf_send_it+0x74>)
 8001af6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d12b      	bne.n	8001b58 <dma_printf_send_it+0x6c>

    dma_ring_forward_r_ptr(&dmi.tx_ring, dmi.previous_send_len);
 8001b00:	4b17      	ldr	r3, [pc, #92]	; (8001b60 <dma_printf_send_it+0x74>)
 8001b02:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8001b06:	4619      	mov	r1, r3
 8001b08:	4815      	ldr	r0, [pc, #84]	; (8001b60 <dma_printf_send_it+0x74>)
 8001b0a:	f000 f8ab 	bl	8001c64 <dma_ring_forward_r_ptr>
    uint16_t len = (uint16_t)dma_ring_available_linear(&dmi.tx_ring);
 8001b0e:	4814      	ldr	r0, [pc, #80]	; (8001b60 <dma_printf_send_it+0x74>)
 8001b10:	f000 f878 	bl	8001c04 <dma_ring_available_linear>
 8001b14:	4603      	mov	r3, r0
 8001b16:	81fb      	strh	r3, [r7, #14]
    if (len > 0 ) {
 8001b18:	89fb      	ldrh	r3, [r7, #14]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d017      	beq.n	8001b4e <dma_printf_send_it+0x62>
        dmi.previous_send_len = len;
 8001b1e:	89fb      	ldrh	r3, [r7, #14]
 8001b20:	4a0f      	ldr	r2, [pc, #60]	; (8001b60 <dma_printf_send_it+0x74>)
 8001b22:	f8c2 3410 	str.w	r3, [r2, #1040]	; 0x410
        dmi.sending = true;
 8001b26:	4b0e      	ldr	r3, [pc, #56]	; (8001b60 <dma_printf_send_it+0x74>)
 8001b28:	2201      	movs	r2, #1
 8001b2a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        HAL_UART_Transmit_DMA(dmi.huart, dmi.tx_ring.buf+dma_ring_get_r_ptr(&dmi.tx_ring), len);
 8001b2e:	4b0c      	ldr	r3, [pc, #48]	; (8001b60 <dma_printf_send_it+0x74>)
 8001b30:	f8d3 440c 	ldr.w	r4, [r3, #1036]	; 0x40c
 8001b34:	480a      	ldr	r0, [pc, #40]	; (8001b60 <dma_printf_send_it+0x74>)
 8001b36:	f000 f888 	bl	8001c4a <dma_ring_get_r_ptr>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	4b08      	ldr	r3, [pc, #32]	; (8001b60 <dma_printf_send_it+0x74>)
 8001b40:	4413      	add	r3, r2
 8001b42:	89fa      	ldrh	r2, [r7, #14]
 8001b44:	4619      	mov	r1, r3
 8001b46:	4620      	mov	r0, r4
 8001b48:	f004 fcb0 	bl	80064ac <HAL_UART_Transmit_DMA>
 8001b4c:	e005      	b.n	8001b5a <dma_printf_send_it+0x6e>
    }else{
        dmi.sending = false;
 8001b4e:	4b04      	ldr	r3, [pc, #16]	; (8001b60 <dma_printf_send_it+0x74>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8001b56:	e000      	b.n	8001b5a <dma_printf_send_it+0x6e>
    if(dmi.huart != printf_huart) return;
 8001b58:	bf00      	nop
    }
}
 8001b5a:	3714      	adds	r7, #20
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd90      	pop	{r4, r7, pc}
 8001b60:	2000321c 	.word	0x2000321c

08001b64 <dma_ring_init>:
#include "dma_ring.h"
#include "main.h"
#include <stdio.h>

void dma_ring_init(struct dma_ring_buf *ring){
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  ring->buf_size = RING_BUF_SIZE;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b72:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
  ring->w_ptr = 0;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
  ring->r_ptr = 0;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
  ring->overwrite_cnt = 0;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
}
 8001b8e:	bf00      	nop
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr

08001b9a <dma_ring_putc>:
  *c = ring->buf[ring->r_ptr];
  ring->r_ptr = next_ptr;
  return RING_SUCCESS;
}

int dma_ring_putc(struct dma_ring_buf *ring, uint8_t c){
 8001b9a:	b480      	push	{r7}
 8001b9c:	b085      	sub	sp, #20
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	70fb      	strb	r3, [r7, #3]
  uint16_t next_ptr = ring->w_ptr+1;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8001bac:	3301      	adds	r3, #1
 8001bae:	81fb      	strh	r3, [r7, #14]
  if(next_ptr >= ring->buf_size) next_ptr = 0;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8001bb6:	89fa      	ldrh	r2, [r7, #14]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d301      	bcc.n	8001bc0 <dma_ring_putc+0x26>
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	81fb      	strh	r3, [r7, #14]

  if(next_ptr == ring->r_ptr){
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8001bc6:	89fa      	ldrh	r2, [r7, #14]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d109      	bne.n	8001be0 <dma_ring_putc+0x46>
    ring->overwrite_cnt++;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	b29a      	uxth	r2, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
    return RING_FAIL;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e00b      	b.n	8001bf8 <dma_ring_putc+0x5e>
  }
  ring->buf[ring->w_ptr] = c;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8001be6:	4619      	mov	r1, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	78fa      	ldrb	r2, [r7, #3]
 8001bec:	545a      	strb	r2, [r3, r1]
  ring->w_ptr = next_ptr;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	89fa      	ldrh	r2, [r7, #14]
 8001bf2:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
  return RING_SUCCESS;
 8001bf6:	2300      	movs	r3, #0
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3714      	adds	r7, #20
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <dma_ring_available_linear>:
    return ring->w_ptr - ring->r_ptr;
  }else{
    return ring->buf_size + ring->w_ptr - ring->r_ptr;
  }
}
int dma_ring_available_linear(struct dma_ring_buf *ring){
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  if(ring->w_ptr >= ring->r_ptr){
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d308      	bcc.n	8001c2e <dma_ring_available_linear+0x2a>
    return ring->w_ptr - ring->r_ptr;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8001c22:	461a      	mov	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	e007      	b.n	8001c3e <dma_ring_available_linear+0x3a>
  }else{
    return ring->buf_size - ring->r_ptr;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8001c34:	461a      	mov	r2, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8001c3c:	1ad3      	subs	r3, r2, r3
  }
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr

08001c4a <dma_ring_get_r_ptr>:

uint16_t dma_ring_get_w_ptr(struct dma_ring_buf *ring){
  return ring->w_ptr;
}

uint16_t dma_ring_get_r_ptr(struct dma_ring_buf *ring){
 8001c4a:	b480      	push	{r7}
 8001c4c:	b083      	sub	sp, #12
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
  return ring->r_ptr;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <dma_ring_forward_r_ptr>:

void dma_ring_forward_r_ptr(struct dma_ring_buf *ring, int len){
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
  while(len > 0){
 8001c6e:	e018      	b.n	8001ca2 <dma_ring_forward_r_ptr+0x3e>
    if(ring->r_ptr+1 >= ring->buf_size){
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8001c76:	3301      	adds	r3, #1
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	f8b2 2400 	ldrh.w	r2, [r2, #1024]	; 0x400
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	db04      	blt.n	8001c8c <dma_ring_forward_r_ptr+0x28>
      ring->r_ptr = 0;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8001c8a:	e007      	b.n	8001c9c <dma_ring_forward_r_ptr+0x38>
    }else{
      ring->r_ptr += 1;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8001c92:	3301      	adds	r3, #1
 8001c94:	b29a      	uxth	r2, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
    }
    len--;
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	603b      	str	r3, [r7, #0]
  while(len > 0){
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	dce3      	bgt.n	8001c70 <dma_ring_forward_r_ptr+0xc>
  }
}
 8001ca8:	bf00      	nop
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <DRV8305Init>:
/*
 * Initialize DRV8305
 * @param
 * @return
 */
void DRV8305Init(void) {
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
	DRV8305Write(DRV8305_GATE_DRIVER_CONTROL, 0x0296);	//6 PWM mode -> 3 PWM mode
 8001cb8:	f240 2196 	movw	r1, #662	; 0x296
 8001cbc:	2007      	movs	r0, #7
 8001cbe:	f000 f80d 	bl	8001cdc <DRV8305Write>
	DRV8305Write(DRV8305_SHUNT_AMP_CONTROL, 0x072A);	//Current Amp : x10 -> x40, current sense calibration on
 8001cc2:	f240 712a 	movw	r1, #1834	; 0x72a
 8001cc6:	200a      	movs	r0, #10
 8001cc8:	f000 f808 	bl	8001cdc <DRV8305Write>
	BLDCGetCurrentSenseOffset();						//get current sense offset(calibration)
 8001ccc:	f7ff fdaa 	bl	8001824 <BLDCGetCurrentSenseOffset>
	DRV8305Write(DRV8305_SHUNT_AMP_CONTROL, 0x002A);	//Current Amp : x10 -> x40, current sense calibration off
 8001cd0:	212a      	movs	r1, #42	; 0x2a
 8001cd2:	200a      	movs	r0, #10
 8001cd4:	f000 f802 	bl	8001cdc <DRV8305Write>
}
 8001cd8:	bf00      	nop
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <DRV8305Write>:
 * Write Register
 * @param	address : DRV8305 regigster address(8bit)
 * 			data : data to write(11bit)
 * @return
 */
uint16_t DRV8305Write(uint8_t address, uint16_t data) {
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b086      	sub	sp, #24
 8001ce0:	af02      	add	r7, sp, #8
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	460a      	mov	r2, r1
 8001ce6:	71fb      	strb	r3, [r7, #7]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	80bb      	strh	r3, [r7, #4]
	uint16_t adr_data = (address << 11) | (data & 0x07FF);		//0(1bit) + address(4bit) + data(11bit) = 16bit
 8001cec:	79fb      	ldrb	r3, [r7, #7]
 8001cee:	02db      	lsls	r3, r3, #11
 8001cf0:	b21a      	sxth	r2, r3
 8001cf2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001cf6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001cfa:	b21b      	sxth	r3, r3
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	b21b      	sxth	r3, r3
 8001d00:	81fb      	strh	r3, [r7, #14]
	uint8_t txdata[2] = {adr_data >> 8, adr_data & 0xFF};		//{msb8bit, lsb8bit}
 8001d02:	89fb      	ldrh	r3, [r7, #14]
 8001d04:	0a1b      	lsrs	r3, r3, #8
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	733b      	strb	r3, [r7, #12]
 8001d0c:	89fb      	ldrh	r3, [r7, #14]
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	737b      	strb	r3, [r7, #13]
	uint8_t rxdata[2] = {};
 8001d12:	2300      	movs	r3, #0
 8001d14:	813b      	strh	r3, [r7, #8]
	DRV8305Select();
 8001d16:	f000 f84d 	bl	8001db4 <DRV8305Select>
	HAL_SPI_TransmitReceive(&DRV8305_SPI_HANDLER, txdata, rxdata, 2, 1);
 8001d1a:	f107 0208 	add.w	r2, r7, #8
 8001d1e:	f107 010c 	add.w	r1, r7, #12
 8001d22:	2301      	movs	r3, #1
 8001d24:	9300      	str	r3, [sp, #0]
 8001d26:	2302      	movs	r3, #2
 8001d28:	4809      	ldr	r0, [pc, #36]	; (8001d50 <DRV8305Write+0x74>)
 8001d2a:	f003 f977 	bl	800501c <HAL_SPI_TransmitReceive>
	DRV8305Deselect();
 8001d2e:	f000 f84d 	bl	8001dcc <DRV8305Deselect>
	return (((rxdata[0] & 0x07) << 8) | rxdata[1]);
 8001d32:	7a3b      	ldrb	r3, [r7, #8]
 8001d34:	021b      	lsls	r3, r3, #8
 8001d36:	b21b      	sxth	r3, r3
 8001d38:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001d3c:	b21a      	sxth	r2, r3
 8001d3e:	7a7b      	ldrb	r3, [r7, #9]
 8001d40:	b21b      	sxth	r3, r3
 8001d42:	4313      	orrs	r3, r2
 8001d44:	b21b      	sxth	r3, r3
 8001d46:	b29b      	uxth	r3, r3
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3710      	adds	r7, #16
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	20003630 	.word	0x20003630

08001d54 <DRV8305Read>:
/*
 * Read Register
 * @param	address : DRV8305 regigster address(8bit)
 * @return	data in the designated address(11bit)
 */
uint16_t DRV8305Read(uint8_t address) {
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b086      	sub	sp, #24
 8001d58:	af02      	add	r7, sp, #8
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	71fb      	strb	r3, [r7, #7]
	uint8_t txdata[2] = {(address << 3) | 0x80, 0x00};
 8001d5e:	79fb      	ldrb	r3, [r7, #7]
 8001d60:	00db      	lsls	r3, r3, #3
 8001d62:	b25b      	sxtb	r3, r3
 8001d64:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d68:	b25b      	sxtb	r3, r3
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	733b      	strb	r3, [r7, #12]
 8001d6e:	2300      	movs	r3, #0
 8001d70:	737b      	strb	r3, [r7, #13]
	uint8_t rxdata[2] = {};
 8001d72:	2300      	movs	r3, #0
 8001d74:	813b      	strh	r3, [r7, #8]
	DRV8305Select();
 8001d76:	f000 f81d 	bl	8001db4 <DRV8305Select>
	HAL_SPI_TransmitReceive(&DRV8305_SPI_HANDLER, txdata, rxdata, 2, 1);
 8001d7a:	f107 0208 	add.w	r2, r7, #8
 8001d7e:	f107 010c 	add.w	r1, r7, #12
 8001d82:	2301      	movs	r3, #1
 8001d84:	9300      	str	r3, [sp, #0]
 8001d86:	2302      	movs	r3, #2
 8001d88:	4809      	ldr	r0, [pc, #36]	; (8001db0 <DRV8305Read+0x5c>)
 8001d8a:	f003 f947 	bl	800501c <HAL_SPI_TransmitReceive>
	DRV8305Deselect();
 8001d8e:	f000 f81d 	bl	8001dcc <DRV8305Deselect>
	return (((rxdata[0] & 0x07) << 8) | rxdata[1]);
 8001d92:	7a3b      	ldrb	r3, [r7, #8]
 8001d94:	021b      	lsls	r3, r3, #8
 8001d96:	b21b      	sxth	r3, r3
 8001d98:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001d9c:	b21a      	sxth	r2, r3
 8001d9e:	7a7b      	ldrb	r3, [r7, #9]
 8001da0:	b21b      	sxth	r3, r3
 8001da2:	4313      	orrs	r3, r2
 8001da4:	b21b      	sxth	r3, r3
 8001da6:	b29b      	uxth	r3, r3
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3710      	adds	r7, #16
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	20003630 	.word	0x20003630

08001db4 <DRV8305Select>:
/*
 * Select
 * @param
 * @return
 */
static void DRV8305Select(void) {
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DRV8305_CS_PORT, DRV8305_CS_PIN, GPIO_PIN_RESET);
 8001db8:	2200      	movs	r2, #0
 8001dba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dbe:	4802      	ldr	r0, [pc, #8]	; (8001dc8 <DRV8305Select+0x14>)
 8001dc0:	f002 fc58 	bl	8004674 <HAL_GPIO_WritePin>
}
 8001dc4:	bf00      	nop
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	40020400 	.word	0x40020400

08001dcc <DRV8305Deselect>:
/*
 * Deselect
 * @param
 * @return
 */
static void DRV8305Deselect(void) {
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DRV8305_CS_PORT, DRV8305_CS_PIN, GPIO_PIN_SET);
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dd6:	4802      	ldr	r0, [pc, #8]	; (8001de0 <DRV8305Deselect+0x14>)
 8001dd8:	f002 fc4c 	bl	8004674 <HAL_GPIO_WritePin>
}
 8001ddc:	bf00      	nop
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40020400 	.word	0x40020400

08001de4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b088      	sub	sp, #32
 8001de8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dea:	f107 030c 	add.w	r3, r7, #12
 8001dee:	2200      	movs	r2, #0
 8001df0:	601a      	str	r2, [r3, #0]
 8001df2:	605a      	str	r2, [r3, #4]
 8001df4:	609a      	str	r2, [r3, #8]
 8001df6:	60da      	str	r2, [r3, #12]
 8001df8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60bb      	str	r3, [r7, #8]
 8001dfe:	4b45      	ldr	r3, [pc, #276]	; (8001f14 <MX_GPIO_Init+0x130>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	4a44      	ldr	r2, [pc, #272]	; (8001f14 <MX_GPIO_Init+0x130>)
 8001e04:	f043 0304 	orr.w	r3, r3, #4
 8001e08:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0a:	4b42      	ldr	r3, [pc, #264]	; (8001f14 <MX_GPIO_Init+0x130>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	f003 0304 	and.w	r3, r3, #4
 8001e12:	60bb      	str	r3, [r7, #8]
 8001e14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e16:	2300      	movs	r3, #0
 8001e18:	607b      	str	r3, [r7, #4]
 8001e1a:	4b3e      	ldr	r3, [pc, #248]	; (8001f14 <MX_GPIO_Init+0x130>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1e:	4a3d      	ldr	r2, [pc, #244]	; (8001f14 <MX_GPIO_Init+0x130>)
 8001e20:	f043 0301 	orr.w	r3, r3, #1
 8001e24:	6313      	str	r3, [r2, #48]	; 0x30
 8001e26:	4b3b      	ldr	r3, [pc, #236]	; (8001f14 <MX_GPIO_Init+0x130>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	607b      	str	r3, [r7, #4]
 8001e30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e32:	2300      	movs	r3, #0
 8001e34:	603b      	str	r3, [r7, #0]
 8001e36:	4b37      	ldr	r3, [pc, #220]	; (8001f14 <MX_GPIO_Init+0x130>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3a:	4a36      	ldr	r2, [pc, #216]	; (8001f14 <MX_GPIO_Init+0x130>)
 8001e3c:	f043 0302 	orr.w	r3, r3, #2
 8001e40:	6313      	str	r3, [r2, #48]	; 0x30
 8001e42:	4b34      	ldr	r3, [pc, #208]	; (8001f14 <MX_GPIO_Init+0x130>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	603b      	str	r3, [r7, #0]
 8001e4c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f248 11d0 	movw	r1, #33232	; 0x81d0
 8001e54:	4830      	ldr	r0, [pc, #192]	; (8001f18 <MX_GPIO_Init+0x134>)
 8001e56:	f002 fc0d 	bl	8004674 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12, GPIO_PIN_RESET);
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f241 0103 	movw	r1, #4099	; 0x1003
 8001e60:	482e      	ldr	r0, [pc, #184]	; (8001f1c <MX_GPIO_Init+0x138>)
 8001e62:	f002 fc07 	bl	8004674 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA6 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_8;
 8001e66:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001e6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e70:	2300      	movs	r3, #0
 8001e72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e74:	2300      	movs	r3, #0
 8001e76:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e78:	f107 030c 	add.w	r3, r7, #12
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	4826      	ldr	r0, [pc, #152]	; (8001f18 <MX_GPIO_Init+0x134>)
 8001e80:	f002 fa46 	bl	8004310 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA7 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_15;
 8001e84:	f248 0380 	movw	r3, #32896	; 0x8080
 8001e88:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e92:	2303      	movs	r3, #3
 8001e94:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e96:	f107 030c 	add.w	r3, r7, #12
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	481e      	ldr	r0, [pc, #120]	; (8001f18 <MX_GPIO_Init+0x134>)
 8001e9e:	f002 fa37 	bl	8004310 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12;
 8001ea2:	f241 0303 	movw	r3, #4099	; 0x1003
 8001ea6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eac:	2300      	movs	r3, #0
 8001eae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eb4:	f107 030c 	add.w	r3, r7, #12
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4818      	ldr	r0, [pc, #96]	; (8001f1c <MX_GPIO_Init+0x138>)
 8001ebc:	f002 fa28 	bl	8004310 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001ec0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ec4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ece:	f107 030c 	add.w	r3, r7, #12
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	4811      	ldr	r0, [pc, #68]	; (8001f1c <MX_GPIO_Init+0x138>)
 8001ed6:	f002 fa1b 	bl	8004310 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001eda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ede:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ee8:	f107 030c 	add.w	r3, r7, #12
 8001eec:	4619      	mov	r1, r3
 8001eee:	480c      	ldr	r0, [pc, #48]	; (8001f20 <MX_GPIO_Init+0x13c>)
 8001ef0:	f002 fa0e 	bl	8004310 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001ef4:	2380      	movs	r3, #128	; 0x80
 8001ef6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efc:	2300      	movs	r3, #0
 8001efe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f00:	f107 030c 	add.w	r3, r7, #12
 8001f04:	4619      	mov	r1, r3
 8001f06:	4805      	ldr	r0, [pc, #20]	; (8001f1c <MX_GPIO_Init+0x138>)
 8001f08:	f002 fa02 	bl	8004310 <HAL_GPIO_Init>

}
 8001f0c:	bf00      	nop
 8001f0e:	3720      	adds	r7, #32
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	40023800 	.word	0x40023800
 8001f18:	40020000 	.word	0x40020000
 8001f1c:	40020400 	.word	0x40020400
 8001f20:	40020800 	.word	0x40020800

08001f24 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6) {
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a0f      	ldr	r2, [pc, #60]	; (8001f70 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d118      	bne.n	8001f68 <HAL_TIM_PeriodElapsedCallback+0x44>
		static int32_t t = 0;

		BLDCVqConstControl(0, 2.0f);
 8001f36:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001f3a:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8001f74 <HAL_TIM_PeriodElapsedCallback+0x50>
 8001f3e:	f7ff fa17 	bl	8001370 <BLDCVqConstControl>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);

		}
		*/

		if (t >= 5000) {
 8001f42:	4b0d      	ldr	r3, [pc, #52]	; (8001f78 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f241 3287 	movw	r2, #4999	; 0x1387
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	dd07      	ble.n	8001f5e <HAL_TIM_PeriodElapsedCallback+0x3a>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8001f4e:	2140      	movs	r1, #64	; 0x40
 8001f50:	480a      	ldr	r0, [pc, #40]	; (8001f7c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001f52:	f002 fba8 	bl	80046a6 <HAL_GPIO_TogglePin>
			t = 0;
 8001f56:	4b08      	ldr	r3, [pc, #32]	; (8001f78 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	601a      	str	r2, [r3, #0]
		} else {
			t++;
		}
	}
}
 8001f5c:	e004      	b.n	8001f68 <HAL_TIM_PeriodElapsedCallback+0x44>
			t++;
 8001f5e:	4b06      	ldr	r3, [pc, #24]	; (8001f78 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	3301      	adds	r3, #1
 8001f64:	4a04      	ldr	r2, [pc, #16]	; (8001f78 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001f66:	6013      	str	r3, [r2, #0]
}
 8001f68:	bf00      	nop
 8001f6a:	3708      	adds	r7, #8
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	40001000 	.word	0x40001000
 8001f74:	00000000 	.word	0x00000000
 8001f78:	20000234 	.word	0x20000234
 8001f7c:	40020000 	.word	0x40020000

08001f80 <__io_putchar>:
#ifdef __GNUC__
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
void __io_putchar(uint8_t ch) {
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	4603      	mov	r3, r0
 8001f88:	71fb      	strb	r3, [r7, #7]
	dma_printf_putc(ch);
 8001f8a:	79fb      	ldrb	r3, [r7, #7]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff fd7b 	bl	8001a88 <dma_printf_putc>
}
 8001f92:	bf00      	nop
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
	...

08001f9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f9c:	b590      	push	{r4, r7, lr}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fa2:	f000 ff37 	bl	8002e14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fa6:	f000 f88d 	bl	80020c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001faa:	f7ff ff1b 	bl	8001de4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001fae:	f7ff fd21 	bl	80019f4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001fb2:	f000 fe25 	bl	8002c00 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8001fb6:	f000 f91b 	bl	80021f0 <MX_SPI2_Init>
  MX_TIM8_Init();
 8001fba:	f000 fc05 	bl	80027c8 <MX_TIM8_Init>
  MX_SPI3_Init();
 8001fbe:	f000 f94d 	bl	800225c <MX_SPI3_Init>
  MX_TIM6_Init();
 8001fc2:	f000 fbcb 	bl	800275c <MX_TIM6_Init>
  MX_ADC1_Init();
 8001fc6:	f7fe ffbf 	bl	8000f48 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001fca:	f000 fb43 	bl	8002654 <MX_TIM2_Init>
  MX_ADC2_Init();
 8001fce:	f7ff f829 	bl	8001024 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  //wait after power on
  HAL_Delay(10);
 8001fd2:	200a      	movs	r0, #10
 8001fd4:	f000 ff90 	bl	8002ef8 <HAL_Delay>

  //printf settings
  dma_printf_init(&huart1);
 8001fd8:	4831      	ldr	r0, [pc, #196]	; (80020a0 <main+0x104>)
 8001fda:	f7ff fd3b 	bl	8001a54 <dma_printf_init>
  setbuf(stdin, NULL);
 8001fde:	4b31      	ldr	r3, [pc, #196]	; (80020a4 <main+0x108>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f005 fe1e 	bl	8007c28 <setbuf>
  setbuf(stdout, NULL);
 8001fec:	4b2d      	ldr	r3, [pc, #180]	; (80020a4 <main+0x108>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f005 fe17 	bl	8007c28 <setbuf>
  setbuf(stderr, NULL);
 8001ffa:	4b2a      	ldr	r3, [pc, #168]	; (80020a4 <main+0x108>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	2100      	movs	r1, #0
 8002002:	4618      	mov	r0, r3
 8002004:	f005 fe10 	bl	8007c28 <setbuf>
  printf("Hello BLDCDriver_v1!\n");
 8002008:	4827      	ldr	r0, [pc, #156]	; (80020a8 <main+0x10c>)
 800200a:	f005 fe05 	bl	8007c18 <puts>

  //dummy spi com(to avoid error at the first com)
  AS5147Read(AS5147_ANGLECOM);
 800200e:	f643 70ff 	movw	r0, #16383	; 0x3fff
 8002012:	f7ff f92d 	bl	8001270 <AS5147Read>
  DRV8305Read(DRV8305_WARNING_WATCHDOG_RESET);
 8002016:	2001      	movs	r0, #1
 8002018:	f7ff fe9c 	bl	8001d54 <DRV8305Read>

  //current sense
  BLDCStartCurrentSense();
 800201c:	f7ff fcaa 	bl	8001974 <BLDCStartCurrentSense>

  //Enable BLDC
  DRV8305Init();
 8002020:	f7ff fe48 	bl	8001cb4 <DRV8305Init>
  BLDCEnable();
 8002024:	f7ff fcb4 	bl	8001990 <BLDCEnable>

  while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_RESET);
 8002028:	bf00      	nop
 800202a:	2180      	movs	r1, #128	; 0x80
 800202c:	481f      	ldr	r0, [pc, #124]	; (80020ac <main+0x110>)
 800202e:	f002 fb09 	bl	8004644 <HAL_GPIO_ReadPin>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d0f8      	beq.n	800202a <main+0x8e>
//  BLDCCalibZeroPos();


  //start timer interrupt
  HAL_TIM_Base_Start_IT(&htim6);
 8002038:	481d      	ldr	r0, [pc, #116]	; (80020b0 <main+0x114>)
 800203a:	f003 fa68 	bl	800550e <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (idx == 3000) {
 800203e:	4b1d      	ldr	r3, [pc, #116]	; (80020b4 <main+0x118>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002046:	4293      	cmp	r3, r2
 8002048:	d120      	bne.n	800208c <main+0xf0>
		  for (int32_t i = 0; i < 3000; i++) {
 800204a:	2300      	movs	r3, #0
 800204c:	607b      	str	r3, [r7, #4]
 800204e:	e014      	b.n	800207a <main+0xde>
			  printf("%f\n", g_curt[i]);
 8002050:	4a19      	ldr	r2, [pc, #100]	; (80020b8 <main+0x11c>)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	4413      	add	r3, r2
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4618      	mov	r0, r3
 800205c:	f7fe fa74 	bl	8000548 <__aeabi_f2d>
 8002060:	4603      	mov	r3, r0
 8002062:	460c      	mov	r4, r1
 8002064:	461a      	mov	r2, r3
 8002066:	4623      	mov	r3, r4
 8002068:	4814      	ldr	r0, [pc, #80]	; (80020bc <main+0x120>)
 800206a:	f005 fd61 	bl	8007b30 <iprintf>
			  HAL_Delay(1);
 800206e:	2001      	movs	r0, #1
 8002070:	f000 ff42 	bl	8002ef8 <HAL_Delay>
		  for (int32_t i = 0; i < 3000; i++) {
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	3301      	adds	r3, #1
 8002078:	607b      	str	r3, [r7, #4]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8002080:	4293      	cmp	r3, r2
 8002082:	dde5      	ble.n	8002050 <main+0xb4>
		  }
		  idx = 3001;
 8002084:	4b0b      	ldr	r3, [pc, #44]	; (80020b4 <main+0x118>)
 8002086:	f640 32b9 	movw	r2, #3001	; 0xbb9
 800208a:	601a      	str	r2, [r3, #0]
	  }
	  //LED
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 800208c:	2110      	movs	r1, #16
 800208e:	480c      	ldr	r0, [pc, #48]	; (80020c0 <main+0x124>)
 8002090:	f002 fb09 	bl	80046a6 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8002094:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002098:	f000 ff2e 	bl	8002ef8 <HAL_Delay>
	  if (idx == 3000) {
 800209c:	e7cf      	b.n	800203e <main+0xa2>
 800209e:	bf00      	nop
 80020a0:	20003984 	.word	0x20003984
 80020a4:	20000014 	.word	0x20000014
 80020a8:	0800a8ac 	.word	0x0800a8ac
 80020ac:	40020400 	.word	0x40020400
 80020b0:	20003720 	.word	0x20003720
 80020b4:	20000204 	.word	0x20000204
 80020b8:	2000033c 	.word	0x2000033c
 80020bc:	0800a8c4 	.word	0x0800a8c4
 80020c0:	40020000 	.word	0x40020000

080020c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b094      	sub	sp, #80	; 0x50
 80020c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020ca:	f107 0320 	add.w	r3, r7, #32
 80020ce:	2230      	movs	r2, #48	; 0x30
 80020d0:	2100      	movs	r1, #0
 80020d2:	4618      	mov	r0, r3
 80020d4:	f005 f8c8 	bl	8007268 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020d8:	f107 030c 	add.w	r3, r7, #12
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]
 80020e0:	605a      	str	r2, [r3, #4]
 80020e2:	609a      	str	r2, [r3, #8]
 80020e4:	60da      	str	r2, [r3, #12]
 80020e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80020e8:	2300      	movs	r3, #0
 80020ea:	60bb      	str	r3, [r7, #8]
 80020ec:	4b28      	ldr	r3, [pc, #160]	; (8002190 <SystemClock_Config+0xcc>)
 80020ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f0:	4a27      	ldr	r2, [pc, #156]	; (8002190 <SystemClock_Config+0xcc>)
 80020f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020f6:	6413      	str	r3, [r2, #64]	; 0x40
 80020f8:	4b25      	ldr	r3, [pc, #148]	; (8002190 <SystemClock_Config+0xcc>)
 80020fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002100:	60bb      	str	r3, [r7, #8]
 8002102:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002104:	2300      	movs	r3, #0
 8002106:	607b      	str	r3, [r7, #4]
 8002108:	4b22      	ldr	r3, [pc, #136]	; (8002194 <SystemClock_Config+0xd0>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a21      	ldr	r2, [pc, #132]	; (8002194 <SystemClock_Config+0xd0>)
 800210e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002112:	6013      	str	r3, [r2, #0]
 8002114:	4b1f      	ldr	r3, [pc, #124]	; (8002194 <SystemClock_Config+0xd0>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800211c:	607b      	str	r3, [r7, #4]
 800211e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002120:	2302      	movs	r3, #2
 8002122:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002124:	2301      	movs	r3, #1
 8002126:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002128:	2310      	movs	r3, #16
 800212a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800212c:	2302      	movs	r3, #2
 800212e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002130:	2300      	movs	r3, #0
 8002132:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002134:	2308      	movs	r3, #8
 8002136:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002138:	2364      	movs	r3, #100	; 0x64
 800213a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800213c:	2302      	movs	r3, #2
 800213e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002140:	2304      	movs	r3, #4
 8002142:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002144:	f107 0320 	add.w	r3, r7, #32
 8002148:	4618      	mov	r0, r3
 800214a:	f002 fac7 	bl	80046dc <HAL_RCC_OscConfig>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002154:	f000 f844 	bl	80021e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002158:	230f      	movs	r3, #15
 800215a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800215c:	2302      	movs	r3, #2
 800215e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002160:	2300      	movs	r3, #0
 8002162:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002164:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002168:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800216a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800216e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002170:	f107 030c 	add.w	r3, r7, #12
 8002174:	2103      	movs	r1, #3
 8002176:	4618      	mov	r0, r3
 8002178:	f002 fd20 	bl	8004bbc <HAL_RCC_ClockConfig>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002182:	f000 f82d 	bl	80021e0 <Error_Handler>
  }
}
 8002186:	bf00      	nop
 8002188:	3750      	adds	r7, #80	; 0x50
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	40023800 	.word	0x40023800
 8002194:	40007000 	.word	0x40007000

08002198 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
//UART Callback for printf(...)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle) {
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
	uart_flag=1;
 80021a0:	4b05      	ldr	r3, [pc, #20]	; (80021b8 <HAL_UART_RxCpltCallback+0x20>)
 80021a2:	2201      	movs	r2, #1
 80021a4:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart1, uart_buf, 4);
 80021a6:	2204      	movs	r2, #4
 80021a8:	4904      	ldr	r1, [pc, #16]	; (80021bc <HAL_UART_RxCpltCallback+0x24>)
 80021aa:	4805      	ldr	r0, [pc, #20]	; (80021c0 <HAL_UART_RxCpltCallback+0x28>)
 80021ac:	f004 f929 	bl	8006402 <HAL_UART_Receive_IT>
}
 80021b0:	bf00      	nop
 80021b2:	3708      	adds	r7, #8
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	20000230 	.word	0x20000230
 80021bc:	20000000 	.word	0x20000000
 80021c0:	20003984 	.word	0x20003984

080021c4 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
    uart_com_send_it(huart);
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f000 fc61 	bl	8002a94 <uart_com_send_it>
    dma_printf_send_it(huart);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f7ff fc8a 	bl	8001aec <dma_printf_send_it>
}
 80021d8:	bf00      	nop
 80021da:	3708      	adds	r7, #8
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80021e4:	bf00      	nop
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
	...

080021f0 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 80021f4:	4b17      	ldr	r3, [pc, #92]	; (8002254 <MX_SPI2_Init+0x64>)
 80021f6:	4a18      	ldr	r2, [pc, #96]	; (8002258 <MX_SPI2_Init+0x68>)
 80021f8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80021fa:	4b16      	ldr	r3, [pc, #88]	; (8002254 <MX_SPI2_Init+0x64>)
 80021fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002200:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002202:	4b14      	ldr	r3, [pc, #80]	; (8002254 <MX_SPI2_Init+0x64>)
 8002204:	2200      	movs	r2, #0
 8002206:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002208:	4b12      	ldr	r3, [pc, #72]	; (8002254 <MX_SPI2_Init+0x64>)
 800220a:	2200      	movs	r2, #0
 800220c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800220e:	4b11      	ldr	r3, [pc, #68]	; (8002254 <MX_SPI2_Init+0x64>)
 8002210:	2200      	movs	r2, #0
 8002212:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002214:	4b0f      	ldr	r3, [pc, #60]	; (8002254 <MX_SPI2_Init+0x64>)
 8002216:	2201      	movs	r2, #1
 8002218:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800221a:	4b0e      	ldr	r3, [pc, #56]	; (8002254 <MX_SPI2_Init+0x64>)
 800221c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002220:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002222:	4b0c      	ldr	r3, [pc, #48]	; (8002254 <MX_SPI2_Init+0x64>)
 8002224:	2218      	movs	r2, #24
 8002226:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002228:	4b0a      	ldr	r3, [pc, #40]	; (8002254 <MX_SPI2_Init+0x64>)
 800222a:	2200      	movs	r2, #0
 800222c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800222e:	4b09      	ldr	r3, [pc, #36]	; (8002254 <MX_SPI2_Init+0x64>)
 8002230:	2200      	movs	r2, #0
 8002232:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002234:	4b07      	ldr	r3, [pc, #28]	; (8002254 <MX_SPI2_Init+0x64>)
 8002236:	2200      	movs	r2, #0
 8002238:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800223a:	4b06      	ldr	r3, [pc, #24]	; (8002254 <MX_SPI2_Init+0x64>)
 800223c:	220a      	movs	r2, #10
 800223e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002240:	4804      	ldr	r0, [pc, #16]	; (8002254 <MX_SPI2_Init+0x64>)
 8002242:	f002 fe87 	bl	8004f54 <HAL_SPI_Init>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800224c:	f7ff ffc8 	bl	80021e0 <Error_Handler>
  }

}
 8002250:	bf00      	nop
 8002252:	bd80      	pop	{r7, pc}
 8002254:	20003630 	.word	0x20003630
 8002258:	40003800 	.word	0x40003800

0800225c <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8002260:	4b17      	ldr	r3, [pc, #92]	; (80022c0 <MX_SPI3_Init+0x64>)
 8002262:	4a18      	ldr	r2, [pc, #96]	; (80022c4 <MX_SPI3_Init+0x68>)
 8002264:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002266:	4b16      	ldr	r3, [pc, #88]	; (80022c0 <MX_SPI3_Init+0x64>)
 8002268:	f44f 7282 	mov.w	r2, #260	; 0x104
 800226c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800226e:	4b14      	ldr	r3, [pc, #80]	; (80022c0 <MX_SPI3_Init+0x64>)
 8002270:	2200      	movs	r2, #0
 8002272:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002274:	4b12      	ldr	r3, [pc, #72]	; (80022c0 <MX_SPI3_Init+0x64>)
 8002276:	2200      	movs	r2, #0
 8002278:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800227a:	4b11      	ldr	r3, [pc, #68]	; (80022c0 <MX_SPI3_Init+0x64>)
 800227c:	2200      	movs	r2, #0
 800227e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002280:	4b0f      	ldr	r3, [pc, #60]	; (80022c0 <MX_SPI3_Init+0x64>)
 8002282:	2201      	movs	r2, #1
 8002284:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002286:	4b0e      	ldr	r3, [pc, #56]	; (80022c0 <MX_SPI3_Init+0x64>)
 8002288:	f44f 7200 	mov.w	r2, #512	; 0x200
 800228c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800228e:	4b0c      	ldr	r3, [pc, #48]	; (80022c0 <MX_SPI3_Init+0x64>)
 8002290:	2208      	movs	r2, #8
 8002292:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002294:	4b0a      	ldr	r3, [pc, #40]	; (80022c0 <MX_SPI3_Init+0x64>)
 8002296:	2200      	movs	r2, #0
 8002298:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800229a:	4b09      	ldr	r3, [pc, #36]	; (80022c0 <MX_SPI3_Init+0x64>)
 800229c:	2200      	movs	r2, #0
 800229e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022a0:	4b07      	ldr	r3, [pc, #28]	; (80022c0 <MX_SPI3_Init+0x64>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80022a6:	4b06      	ldr	r3, [pc, #24]	; (80022c0 <MX_SPI3_Init+0x64>)
 80022a8:	220a      	movs	r2, #10
 80022aa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80022ac:	4804      	ldr	r0, [pc, #16]	; (80022c0 <MX_SPI3_Init+0x64>)
 80022ae:	f002 fe51 	bl	8004f54 <HAL_SPI_Init>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80022b8:	f7ff ff92 	bl	80021e0 <Error_Handler>
  }

}
 80022bc:	bf00      	nop
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	20003688 	.word	0x20003688
 80022c4:	40003c00 	.word	0x40003c00

080022c8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b08c      	sub	sp, #48	; 0x30
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d0:	f107 031c 	add.w	r3, r7, #28
 80022d4:	2200      	movs	r2, #0
 80022d6:	601a      	str	r2, [r3, #0]
 80022d8:	605a      	str	r2, [r3, #4]
 80022da:	609a      	str	r2, [r3, #8]
 80022dc:	60da      	str	r2, [r3, #12]
 80022de:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a33      	ldr	r2, [pc, #204]	; (80023b4 <HAL_SPI_MspInit+0xec>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d12d      	bne.n	8002346 <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80022ea:	2300      	movs	r3, #0
 80022ec:	61bb      	str	r3, [r7, #24]
 80022ee:	4b32      	ldr	r3, [pc, #200]	; (80023b8 <HAL_SPI_MspInit+0xf0>)
 80022f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f2:	4a31      	ldr	r2, [pc, #196]	; (80023b8 <HAL_SPI_MspInit+0xf0>)
 80022f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022f8:	6413      	str	r3, [r2, #64]	; 0x40
 80022fa:	4b2f      	ldr	r3, [pc, #188]	; (80023b8 <HAL_SPI_MspInit+0xf0>)
 80022fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002302:	61bb      	str	r3, [r7, #24]
 8002304:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002306:	2300      	movs	r3, #0
 8002308:	617b      	str	r3, [r7, #20]
 800230a:	4b2b      	ldr	r3, [pc, #172]	; (80023b8 <HAL_SPI_MspInit+0xf0>)
 800230c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230e:	4a2a      	ldr	r2, [pc, #168]	; (80023b8 <HAL_SPI_MspInit+0xf0>)
 8002310:	f043 0302 	orr.w	r3, r3, #2
 8002314:	6313      	str	r3, [r2, #48]	; 0x30
 8002316:	4b28      	ldr	r3, [pc, #160]	; (80023b8 <HAL_SPI_MspInit+0xf0>)
 8002318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	617b      	str	r3, [r7, #20]
 8002320:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002322:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002326:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002328:	2302      	movs	r3, #2
 800232a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232c:	2300      	movs	r3, #0
 800232e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002330:	2303      	movs	r3, #3
 8002332:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002334:	2305      	movs	r3, #5
 8002336:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002338:	f107 031c 	add.w	r3, r7, #28
 800233c:	4619      	mov	r1, r3
 800233e:	481f      	ldr	r0, [pc, #124]	; (80023bc <HAL_SPI_MspInit+0xf4>)
 8002340:	f001 ffe6 	bl	8004310 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8002344:	e031      	b.n	80023aa <HAL_SPI_MspInit+0xe2>
  else if(spiHandle->Instance==SPI3)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a1d      	ldr	r2, [pc, #116]	; (80023c0 <HAL_SPI_MspInit+0xf8>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d12c      	bne.n	80023aa <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002350:	2300      	movs	r3, #0
 8002352:	613b      	str	r3, [r7, #16]
 8002354:	4b18      	ldr	r3, [pc, #96]	; (80023b8 <HAL_SPI_MspInit+0xf0>)
 8002356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002358:	4a17      	ldr	r2, [pc, #92]	; (80023b8 <HAL_SPI_MspInit+0xf0>)
 800235a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800235e:	6413      	str	r3, [r2, #64]	; 0x40
 8002360:	4b15      	ldr	r3, [pc, #84]	; (80023b8 <HAL_SPI_MspInit+0xf0>)
 8002362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002364:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002368:	613b      	str	r3, [r7, #16]
 800236a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800236c:	2300      	movs	r3, #0
 800236e:	60fb      	str	r3, [r7, #12]
 8002370:	4b11      	ldr	r3, [pc, #68]	; (80023b8 <HAL_SPI_MspInit+0xf0>)
 8002372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002374:	4a10      	ldr	r2, [pc, #64]	; (80023b8 <HAL_SPI_MspInit+0xf0>)
 8002376:	f043 0304 	orr.w	r3, r3, #4
 800237a:	6313      	str	r3, [r2, #48]	; 0x30
 800237c:	4b0e      	ldr	r3, [pc, #56]	; (80023b8 <HAL_SPI_MspInit+0xf0>)
 800237e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002380:	f003 0304 	and.w	r3, r3, #4
 8002384:	60fb      	str	r3, [r7, #12]
 8002386:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002388:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800238c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800238e:	2302      	movs	r3, #2
 8002390:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002392:	2300      	movs	r3, #0
 8002394:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002396:	2303      	movs	r3, #3
 8002398:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800239a:	2306      	movs	r3, #6
 800239c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800239e:	f107 031c 	add.w	r3, r7, #28
 80023a2:	4619      	mov	r1, r3
 80023a4:	4807      	ldr	r0, [pc, #28]	; (80023c4 <HAL_SPI_MspInit+0xfc>)
 80023a6:	f001 ffb3 	bl	8004310 <HAL_GPIO_Init>
}
 80023aa:	bf00      	nop
 80023ac:	3730      	adds	r7, #48	; 0x30
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	40003800 	.word	0x40003800
 80023b8:	40023800 	.word	0x40023800
 80023bc:	40020400 	.word	0x40020400
 80023c0:	40003c00 	.word	0x40003c00
 80023c4:	40020800 	.word	0x40020800

080023c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ce:	2300      	movs	r3, #0
 80023d0:	607b      	str	r3, [r7, #4]
 80023d2:	4b10      	ldr	r3, [pc, #64]	; (8002414 <HAL_MspInit+0x4c>)
 80023d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d6:	4a0f      	ldr	r2, [pc, #60]	; (8002414 <HAL_MspInit+0x4c>)
 80023d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023dc:	6453      	str	r3, [r2, #68]	; 0x44
 80023de:	4b0d      	ldr	r3, [pc, #52]	; (8002414 <HAL_MspInit+0x4c>)
 80023e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023e6:	607b      	str	r3, [r7, #4]
 80023e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023ea:	2300      	movs	r3, #0
 80023ec:	603b      	str	r3, [r7, #0]
 80023ee:	4b09      	ldr	r3, [pc, #36]	; (8002414 <HAL_MspInit+0x4c>)
 80023f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f2:	4a08      	ldr	r2, [pc, #32]	; (8002414 <HAL_MspInit+0x4c>)
 80023f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023f8:	6413      	str	r3, [r2, #64]	; 0x40
 80023fa:	4b06      	ldr	r3, [pc, #24]	; (8002414 <HAL_MspInit+0x4c>)
 80023fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002402:	603b      	str	r3, [r7, #0]
 8002404:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002406:	bf00      	nop
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	40023800 	.word	0x40023800

08002418 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800241c:	bf00      	nop
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr

08002426 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002426:	b480      	push	{r7}
 8002428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800242a:	e7fe      	b.n	800242a <HardFault_Handler+0x4>

0800242c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002430:	e7fe      	b.n	8002430 <MemManage_Handler+0x4>

08002432 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002432:	b480      	push	{r7}
 8002434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002436:	e7fe      	b.n	8002436 <BusFault_Handler+0x4>

08002438 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800243c:	e7fe      	b.n	800243c <UsageFault_Handler+0x4>

0800243e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800243e:	b480      	push	{r7}
 8002440:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002442:	bf00      	nop
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002450:	bf00      	nop
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr

0800245a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800245a:	b480      	push	{r7}
 800245c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800245e:	bf00      	nop
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800246c:	f000 fd24 	bl	8002eb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002470:	bf00      	nop
 8002472:	bd80      	pop	{r7, pc}

08002474 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002478:	4803      	ldr	r0, [pc, #12]	; (8002488 <ADC_IRQHandler+0x14>)
 800247a:	f000 fda2 	bl	8002fc2 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800247e:	4803      	ldr	r0, [pc, #12]	; (800248c <ADC_IRQHandler+0x18>)
 8002480:	f000 fd9f 	bl	8002fc2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002484:	bf00      	nop
 8002486:	bd80      	pop	{r7, pc}
 8002488:	20000294 	.word	0x20000294
 800248c:	2000024c 	.word	0x2000024c

08002490 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002494:	4802      	ldr	r0, [pc, #8]	; (80024a0 <USART1_IRQHandler+0x10>)
 8002496:	f004 f875 	bl	8006584 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800249a:	bf00      	nop
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	20003984 	.word	0x20003984

080024a4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80024a8:	4802      	ldr	r0, [pc, #8]	; (80024b4 <TIM6_DAC_IRQHandler+0x10>)
 80024aa:	f003 f8bd 	bl	8005628 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80024ae:	bf00      	nop
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	20003720 	.word	0x20003720

080024b8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80024bc:	4802      	ldr	r0, [pc, #8]	; (80024c8 <DMA2_Stream0_IRQHandler+0x10>)
 80024be:	f001 fcbf 	bl	8003e40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80024c2:	bf00      	nop
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	200002dc 	.word	0x200002dc

080024cc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80024d0:	4802      	ldr	r0, [pc, #8]	; (80024dc <DMA2_Stream2_IRQHandler+0x10>)
 80024d2:	f001 fcb5 	bl	8003e40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80024d6:	bf00      	nop
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	20003924 	.word	0x20003924

080024e0 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80024e4:	4802      	ldr	r0, [pc, #8]	; (80024f0 <DMA2_Stream7_IRQHandler+0x10>)
 80024e6:	f001 fcab 	bl	8003e40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80024ea:	bf00      	nop
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	200038c4 	.word	0x200038c4

080024f4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002500:	2300      	movs	r3, #0
 8002502:	617b      	str	r3, [r7, #20]
 8002504:	e00a      	b.n	800251c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002506:	f3af 8000 	nop.w
 800250a:	4601      	mov	r1, r0
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	1c5a      	adds	r2, r3, #1
 8002510:	60ba      	str	r2, [r7, #8]
 8002512:	b2ca      	uxtb	r2, r1
 8002514:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	3301      	adds	r3, #1
 800251a:	617b      	str	r3, [r7, #20]
 800251c:	697a      	ldr	r2, [r7, #20]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	429a      	cmp	r2, r3
 8002522:	dbf0      	blt.n	8002506 <_read+0x12>
	}

return len;
 8002524:	687b      	ldr	r3, [r7, #4]
}
 8002526:	4618      	mov	r0, r3
 8002528:	3718      	adds	r7, #24
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	b086      	sub	sp, #24
 8002532:	af00      	add	r7, sp, #0
 8002534:	60f8      	str	r0, [r7, #12]
 8002536:	60b9      	str	r1, [r7, #8]
 8002538:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800253a:	2300      	movs	r3, #0
 800253c:	617b      	str	r3, [r7, #20]
 800253e:	e009      	b.n	8002554 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	1c5a      	adds	r2, r3, #1
 8002544:	60ba      	str	r2, [r7, #8]
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	4618      	mov	r0, r3
 800254a:	f7ff fd19 	bl	8001f80 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	3301      	adds	r3, #1
 8002552:	617b      	str	r3, [r7, #20]
 8002554:	697a      	ldr	r2, [r7, #20]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	429a      	cmp	r2, r3
 800255a:	dbf1      	blt.n	8002540 <_write+0x12>
	}
	return len;
 800255c:	687b      	ldr	r3, [r7, #4]
}
 800255e:	4618      	mov	r0, r3
 8002560:	3718      	adds	r7, #24
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}

08002566 <_close>:

int _close(int file)
{
 8002566:	b480      	push	{r7}
 8002568:	b083      	sub	sp, #12
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
	return -1;
 800256e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002572:	4618      	mov	r0, r3
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr

0800257e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800257e:	b480      	push	{r7}
 8002580:	b083      	sub	sp, #12
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
 8002586:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800258e:	605a      	str	r2, [r3, #4]
	return 0;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	370c      	adds	r7, #12
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr

0800259e <_isatty>:

int _isatty(int file)
{
 800259e:	b480      	push	{r7}
 80025a0:	b083      	sub	sp, #12
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
	return 1;
 80025a6:	2301      	movs	r3, #1
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr

080025b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b085      	sub	sp, #20
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]
	return 0;
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3714      	adds	r7, #20
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
	...

080025d0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80025d8:	4b11      	ldr	r3, [pc, #68]	; (8002620 <_sbrk+0x50>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d102      	bne.n	80025e6 <_sbrk+0x16>
		heap_end = &end;
 80025e0:	4b0f      	ldr	r3, [pc, #60]	; (8002620 <_sbrk+0x50>)
 80025e2:	4a10      	ldr	r2, [pc, #64]	; (8002624 <_sbrk+0x54>)
 80025e4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80025e6:	4b0e      	ldr	r3, [pc, #56]	; (8002620 <_sbrk+0x50>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80025ec:	4b0c      	ldr	r3, [pc, #48]	; (8002620 <_sbrk+0x50>)
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	4413      	add	r3, r2
 80025f4:	466a      	mov	r2, sp
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d907      	bls.n	800260a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80025fa:	f004 fe0b 	bl	8007214 <__errno>
 80025fe:	4602      	mov	r2, r0
 8002600:	230c      	movs	r3, #12
 8002602:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002604:	f04f 33ff 	mov.w	r3, #4294967295
 8002608:	e006      	b.n	8002618 <_sbrk+0x48>
	}

	heap_end += incr;
 800260a:	4b05      	ldr	r3, [pc, #20]	; (8002620 <_sbrk+0x50>)
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4413      	add	r3, r2
 8002612:	4a03      	ldr	r2, [pc, #12]	; (8002620 <_sbrk+0x50>)
 8002614:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002616:	68fb      	ldr	r3, [r7, #12]
}
 8002618:	4618      	mov	r0, r3
 800261a:	3710      	adds	r7, #16
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	20000238 	.word	0x20000238
 8002624:	200039d0 	.word	0x200039d0

08002628 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800262c:	4b08      	ldr	r3, [pc, #32]	; (8002650 <SystemInit+0x28>)
 800262e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002632:	4a07      	ldr	r2, [pc, #28]	; (8002650 <SystemInit+0x28>)
 8002634:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002638:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800263c:	4b04      	ldr	r3, [pc, #16]	; (8002650 <SystemInit+0x28>)
 800263e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002642:	609a      	str	r2, [r3, #8]
#endif
}
 8002644:	bf00      	nop
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	e000ed00 	.word	0xe000ed00

08002654 <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b08e      	sub	sp, #56	; 0x38
 8002658:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800265a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800265e:	2200      	movs	r2, #0
 8002660:	601a      	str	r2, [r3, #0]
 8002662:	605a      	str	r2, [r3, #4]
 8002664:	609a      	str	r2, [r3, #8]
 8002666:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002668:	f107 0320 	add.w	r3, r7, #32
 800266c:	2200      	movs	r2, #0
 800266e:	601a      	str	r2, [r3, #0]
 8002670:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002672:	1d3b      	adds	r3, r7, #4
 8002674:	2200      	movs	r2, #0
 8002676:	601a      	str	r2, [r3, #0]
 8002678:	605a      	str	r2, [r3, #4]
 800267a:	609a      	str	r2, [r3, #8]
 800267c:	60da      	str	r2, [r3, #12]
 800267e:	611a      	str	r2, [r3, #16]
 8002680:	615a      	str	r2, [r3, #20]
 8002682:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8002684:	4b34      	ldr	r3, [pc, #208]	; (8002758 <MX_TIM2_Init+0x104>)
 8002686:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800268a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 50000-1;
 800268c:	4b32      	ldr	r3, [pc, #200]	; (8002758 <MX_TIM2_Init+0x104>)
 800268e:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8002692:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8002694:	4b30      	ldr	r3, [pc, #192]	; (8002758 <MX_TIM2_Init+0x104>)
 8002696:	2220      	movs	r2, #32
 8002698:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 500-1;
 800269a:	4b2f      	ldr	r3, [pc, #188]	; (8002758 <MX_TIM2_Init+0x104>)
 800269c:	f240 12f3 	movw	r2, #499	; 0x1f3
 80026a0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026a2:	4b2d      	ldr	r3, [pc, #180]	; (8002758 <MX_TIM2_Init+0x104>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80026a8:	4b2b      	ldr	r3, [pc, #172]	; (8002758 <MX_TIM2_Init+0x104>)
 80026aa:	2280      	movs	r2, #128	; 0x80
 80026ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80026ae:	482a      	ldr	r0, [pc, #168]	; (8002758 <MX_TIM2_Init+0x104>)
 80026b0:	f002 ff02 	bl	80054b8 <HAL_TIM_Base_Init>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80026ba:	f7ff fd91 	bl	80021e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026c2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80026c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026c8:	4619      	mov	r1, r3
 80026ca:	4823      	ldr	r0, [pc, #140]	; (8002758 <MX_TIM2_Init+0x104>)
 80026cc:	f003 f97a 	bl	80059c4 <HAL_TIM_ConfigClockSource>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80026d6:	f7ff fd83 	bl	80021e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80026da:	481f      	ldr	r0, [pc, #124]	; (8002758 <MX_TIM2_Init+0x104>)
 80026dc:	f002 ff3b 	bl	8005556 <HAL_TIM_PWM_Init>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80026e6:	f7ff fd7b 	bl	80021e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 80026ea:	2350      	movs	r3, #80	; 0x50
 80026ec:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026ee:	2300      	movs	r3, #0
 80026f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80026f2:	f107 0320 	add.w	r3, r7, #32
 80026f6:	4619      	mov	r1, r3
 80026f8:	4817      	ldr	r0, [pc, #92]	; (8002758 <MX_TIM2_Init+0x104>)
 80026fa:	f003 fd53 	bl	80061a4 <HAL_TIMEx_MasterConfigSynchronization>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002704:	f7ff fd6c 	bl	80021e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002708:	2360      	movs	r3, #96	; 0x60
 800270a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800270c:	2300      	movs	r3, #0
 800270e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002710:	2300      	movs	r3, #0
 8002712:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002714:	2300      	movs	r3, #0
 8002716:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002718:	1d3b      	adds	r3, r7, #4
 800271a:	2200      	movs	r2, #0
 800271c:	4619      	mov	r1, r3
 800271e:	480e      	ldr	r0, [pc, #56]	; (8002758 <MX_TIM2_Init+0x104>)
 8002720:	f003 f88a 	bl	8005838 <HAL_TIM_PWM_ConfigChannel>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800272a:	f7ff fd59 	bl	80021e0 <Error_Handler>
  }
  sConfigOC.Pulse = 498;
 800272e:	f44f 73f9 	mov.w	r3, #498	; 0x1f2
 8002732:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002734:	1d3b      	adds	r3, r7, #4
 8002736:	2204      	movs	r2, #4
 8002738:	4619      	mov	r1, r3
 800273a:	4807      	ldr	r0, [pc, #28]	; (8002758 <MX_TIM2_Init+0x104>)
 800273c:	f003 f87c 	bl	8005838 <HAL_TIM_PWM_ConfigChannel>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <MX_TIM2_Init+0xf6>
  {
    Error_Handler();
 8002746:	f7ff fd4b 	bl	80021e0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 800274a:	4803      	ldr	r0, [pc, #12]	; (8002758 <MX_TIM2_Init+0x104>)
 800274c:	f000 f942 	bl	80029d4 <HAL_TIM_MspPostInit>

}
 8002750:	bf00      	nop
 8002752:	3738      	adds	r7, #56	; 0x38
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	20003760 	.word	0x20003760

0800275c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002762:	463b      	mov	r3, r7
 8002764:	2200      	movs	r2, #0
 8002766:	601a      	str	r2, [r3, #0]
 8002768:	605a      	str	r2, [r3, #4]

  htim6.Instance = TIM6;
 800276a:	4b15      	ldr	r3, [pc, #84]	; (80027c0 <MX_TIM6_Init+0x64>)
 800276c:	4a15      	ldr	r2, [pc, #84]	; (80027c4 <MX_TIM6_Init+0x68>)
 800276e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8002770:	4b13      	ldr	r3, [pc, #76]	; (80027c0 <MX_TIM6_Init+0x64>)
 8002772:	2200      	movs	r2, #0
 8002774:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002776:	4b12      	ldr	r3, [pc, #72]	; (80027c0 <MX_TIM6_Init+0x64>)
 8002778:	2200      	movs	r2, #0
 800277a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 5000;
 800277c:	4b10      	ldr	r3, [pc, #64]	; (80027c0 <MX_TIM6_Init+0x64>)
 800277e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002782:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002784:	4b0e      	ldr	r3, [pc, #56]	; (80027c0 <MX_TIM6_Init+0x64>)
 8002786:	2200      	movs	r2, #0
 8002788:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800278a:	480d      	ldr	r0, [pc, #52]	; (80027c0 <MX_TIM6_Init+0x64>)
 800278c:	f002 fe94 	bl	80054b8 <HAL_TIM_Base_Init>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002796:	f7ff fd23 	bl	80021e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800279a:	2300      	movs	r3, #0
 800279c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800279e:	2300      	movs	r3, #0
 80027a0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80027a2:	463b      	mov	r3, r7
 80027a4:	4619      	mov	r1, r3
 80027a6:	4806      	ldr	r0, [pc, #24]	; (80027c0 <MX_TIM6_Init+0x64>)
 80027a8:	f003 fcfc 	bl	80061a4 <HAL_TIMEx_MasterConfigSynchronization>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80027b2:	f7ff fd15 	bl	80021e0 <Error_Handler>
  }

}
 80027b6:	bf00      	nop
 80027b8:	3708      	adds	r7, #8
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	20003720 	.word	0x20003720
 80027c4:	40001000 	.word	0x40001000

080027c8 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b092      	sub	sp, #72	; 0x48
 80027cc:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027ce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80027d2:	2200      	movs	r2, #0
 80027d4:	601a      	str	r2, [r3, #0]
 80027d6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]
 80027e0:	605a      	str	r2, [r3, #4]
 80027e2:	609a      	str	r2, [r3, #8]
 80027e4:	60da      	str	r2, [r3, #12]
 80027e6:	611a      	str	r2, [r3, #16]
 80027e8:	615a      	str	r2, [r3, #20]
 80027ea:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80027ec:	1d3b      	adds	r3, r7, #4
 80027ee:	2220      	movs	r2, #32
 80027f0:	2100      	movs	r1, #0
 80027f2:	4618      	mov	r0, r3
 80027f4:	f004 fd38 	bl	8007268 <memset>

  htim8.Instance = TIM8;
 80027f8:	4b45      	ldr	r3, [pc, #276]	; (8002910 <MX_TIM8_Init+0x148>)
 80027fa:	4a46      	ldr	r2, [pc, #280]	; (8002914 <MX_TIM8_Init+0x14c>)
 80027fc:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80027fe:	4b44      	ldr	r3, [pc, #272]	; (8002910 <MX_TIM8_Init+0x148>)
 8002800:	2200      	movs	r2, #0
 8002802:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8002804:	4b42      	ldr	r3, [pc, #264]	; (8002910 <MX_TIM8_Init+0x148>)
 8002806:	2220      	movs	r2, #32
 8002808:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1250-1;
 800280a:	4b41      	ldr	r3, [pc, #260]	; (8002910 <MX_TIM8_Init+0x148>)
 800280c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8002810:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002812:	4b3f      	ldr	r3, [pc, #252]	; (8002910 <MX_TIM8_Init+0x148>)
 8002814:	2200      	movs	r2, #0
 8002816:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002818:	4b3d      	ldr	r3, [pc, #244]	; (8002910 <MX_TIM8_Init+0x148>)
 800281a:	2200      	movs	r2, #0
 800281c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800281e:	4b3c      	ldr	r3, [pc, #240]	; (8002910 <MX_TIM8_Init+0x148>)
 8002820:	2200      	movs	r2, #0
 8002822:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002824:	483a      	ldr	r0, [pc, #232]	; (8002910 <MX_TIM8_Init+0x148>)
 8002826:	f002 fe96 	bl	8005556 <HAL_TIM_PWM_Init>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d001      	beq.n	8002834 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8002830:	f7ff fcd6 	bl	80021e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8002834:	2370      	movs	r3, #112	; 0x70
 8002836:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002838:	2300      	movs	r3, #0
 800283a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800283c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002840:	4619      	mov	r1, r3
 8002842:	4833      	ldr	r0, [pc, #204]	; (8002910 <MX_TIM8_Init+0x148>)
 8002844:	f003 fcae 	bl	80061a4 <HAL_TIMEx_MasterConfigSynchronization>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 800284e:	f7ff fcc7 	bl	80021e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002852:	2360      	movs	r3, #96	; 0x60
 8002854:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002856:	2300      	movs	r3, #0
 8002858:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800285a:	2300      	movs	r3, #0
 800285c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800285e:	2300      	movs	r3, #0
 8002860:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002862:	2300      	movs	r3, #0
 8002864:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002866:	2300      	movs	r3, #0
 8002868:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800286a:	2300      	movs	r3, #0
 800286c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800286e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002872:	2200      	movs	r2, #0
 8002874:	4619      	mov	r1, r3
 8002876:	4826      	ldr	r0, [pc, #152]	; (8002910 <MX_TIM8_Init+0x148>)
 8002878:	f002 ffde 	bl	8005838 <HAL_TIM_PWM_ConfigChannel>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8002882:	f7ff fcad 	bl	80021e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002886:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800288a:	2204      	movs	r2, #4
 800288c:	4619      	mov	r1, r3
 800288e:	4820      	ldr	r0, [pc, #128]	; (8002910 <MX_TIM8_Init+0x148>)
 8002890:	f002 ffd2 	bl	8005838 <HAL_TIM_PWM_ConfigChannel>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 800289a:	f7ff fca1 	bl	80021e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800289e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028a2:	2208      	movs	r2, #8
 80028a4:	4619      	mov	r1, r3
 80028a6:	481a      	ldr	r0, [pc, #104]	; (8002910 <MX_TIM8_Init+0x148>)
 80028a8:	f002 ffc6 	bl	8005838 <HAL_TIM_PWM_ConfigChannel>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <MX_TIM8_Init+0xee>
  {
    Error_Handler();
 80028b2:	f7ff fc95 	bl	80021e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80028b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028ba:	220c      	movs	r2, #12
 80028bc:	4619      	mov	r1, r3
 80028be:	4814      	ldr	r0, [pc, #80]	; (8002910 <MX_TIM8_Init+0x148>)
 80028c0:	f002 ffba 	bl	8005838 <HAL_TIM_PWM_ConfigChannel>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <MX_TIM8_Init+0x106>
  {
    Error_Handler();
 80028ca:	f7ff fc89 	bl	80021e0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80028ce:	2300      	movs	r3, #0
 80028d0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80028d2:	2300      	movs	r3, #0
 80028d4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80028d6:	2300      	movs	r3, #0
 80028d8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80028da:	2300      	movs	r3, #0
 80028dc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80028de:	2300      	movs	r3, #0
 80028e0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80028e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028e6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80028e8:	2300      	movs	r3, #0
 80028ea:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80028ec:	1d3b      	adds	r3, r7, #4
 80028ee:	4619      	mov	r1, r3
 80028f0:	4807      	ldr	r0, [pc, #28]	; (8002910 <MX_TIM8_Init+0x148>)
 80028f2:	f003 fcd3 	bl	800629c <HAL_TIMEx_ConfigBreakDeadTime>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d001      	beq.n	8002900 <MX_TIM8_Init+0x138>
  {
    Error_Handler();
 80028fc:	f7ff fc70 	bl	80021e0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 8002900:	4803      	ldr	r0, [pc, #12]	; (8002910 <MX_TIM8_Init+0x148>)
 8002902:	f000 f867 	bl	80029d4 <HAL_TIM_MspPostInit>

}
 8002906:	bf00      	nop
 8002908:	3748      	adds	r7, #72	; 0x48
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	200036e0 	.word	0x200036e0
 8002914:	40010400 	.word	0x40010400

08002918 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002928:	d10e      	bne.n	8002948 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800292a:	2300      	movs	r3, #0
 800292c:	60fb      	str	r3, [r7, #12]
 800292e:	4b16      	ldr	r3, [pc, #88]	; (8002988 <HAL_TIM_Base_MspInit+0x70>)
 8002930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002932:	4a15      	ldr	r2, [pc, #84]	; (8002988 <HAL_TIM_Base_MspInit+0x70>)
 8002934:	f043 0301 	orr.w	r3, r3, #1
 8002938:	6413      	str	r3, [r2, #64]	; 0x40
 800293a:	4b13      	ldr	r3, [pc, #76]	; (8002988 <HAL_TIM_Base_MspInit+0x70>)
 800293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	60fb      	str	r3, [r7, #12]
 8002944:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8002946:	e01a      	b.n	800297e <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM6)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a0f      	ldr	r2, [pc, #60]	; (800298c <HAL_TIM_Base_MspInit+0x74>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d115      	bne.n	800297e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002952:	2300      	movs	r3, #0
 8002954:	60bb      	str	r3, [r7, #8]
 8002956:	4b0c      	ldr	r3, [pc, #48]	; (8002988 <HAL_TIM_Base_MspInit+0x70>)
 8002958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295a:	4a0b      	ldr	r2, [pc, #44]	; (8002988 <HAL_TIM_Base_MspInit+0x70>)
 800295c:	f043 0310 	orr.w	r3, r3, #16
 8002960:	6413      	str	r3, [r2, #64]	; 0x40
 8002962:	4b09      	ldr	r3, [pc, #36]	; (8002988 <HAL_TIM_Base_MspInit+0x70>)
 8002964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002966:	f003 0310 	and.w	r3, r3, #16
 800296a:	60bb      	str	r3, [r7, #8]
 800296c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800296e:	2200      	movs	r2, #0
 8002970:	2100      	movs	r1, #0
 8002972:	2036      	movs	r0, #54	; 0x36
 8002974:	f001 f905 	bl	8003b82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002978:	2036      	movs	r0, #54	; 0x36
 800297a:	f001 f91e 	bl	8003bba <HAL_NVIC_EnableIRQ>
}
 800297e:	bf00      	nop
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	40023800 	.word	0x40023800
 800298c:	40001000 	.word	0x40001000

08002990 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002990:	b480      	push	{r7}
 8002992:	b085      	sub	sp, #20
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM8)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a0b      	ldr	r2, [pc, #44]	; (80029cc <HAL_TIM_PWM_MspInit+0x3c>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d10d      	bne.n	80029be <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80029a2:	2300      	movs	r3, #0
 80029a4:	60fb      	str	r3, [r7, #12]
 80029a6:	4b0a      	ldr	r3, [pc, #40]	; (80029d0 <HAL_TIM_PWM_MspInit+0x40>)
 80029a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029aa:	4a09      	ldr	r2, [pc, #36]	; (80029d0 <HAL_TIM_PWM_MspInit+0x40>)
 80029ac:	f043 0302 	orr.w	r3, r3, #2
 80029b0:	6453      	str	r3, [r2, #68]	; 0x44
 80029b2:	4b07      	ldr	r3, [pc, #28]	; (80029d0 <HAL_TIM_PWM_MspInit+0x40>)
 80029b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	60fb      	str	r3, [r7, #12]
 80029bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80029be:	bf00      	nop
 80029c0:	3714      	adds	r7, #20
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	40010400 	.word	0x40010400
 80029d0:	40023800 	.word	0x40023800

080029d4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b08a      	sub	sp, #40	; 0x28
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029dc:	f107 0314 	add.w	r3, r7, #20
 80029e0:	2200      	movs	r2, #0
 80029e2:	601a      	str	r2, [r3, #0]
 80029e4:	605a      	str	r2, [r3, #4]
 80029e6:	609a      	str	r2, [r3, #8]
 80029e8:	60da      	str	r2, [r3, #12]
 80029ea:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029f4:	d11e      	bne.n	8002a34 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029f6:	2300      	movs	r3, #0
 80029f8:	613b      	str	r3, [r7, #16]
 80029fa:	4b22      	ldr	r3, [pc, #136]	; (8002a84 <HAL_TIM_MspPostInit+0xb0>)
 80029fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fe:	4a21      	ldr	r2, [pc, #132]	; (8002a84 <HAL_TIM_MspPostInit+0xb0>)
 8002a00:	f043 0301 	orr.w	r3, r3, #1
 8002a04:	6313      	str	r3, [r2, #48]	; 0x30
 8002a06:	4b1f      	ldr	r3, [pc, #124]	; (8002a84 <HAL_TIM_MspPostInit+0xb0>)
 8002a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	613b      	str	r3, [r7, #16]
 8002a10:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA5     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002a12:	2320      	movs	r3, #32
 8002a14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a16:	2302      	movs	r3, #2
 8002a18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002a22:	2301      	movs	r3, #1
 8002a24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a26:	f107 0314 	add.w	r3, r7, #20
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	4816      	ldr	r0, [pc, #88]	; (8002a88 <HAL_TIM_MspPostInit+0xb4>)
 8002a2e:	f001 fc6f 	bl	8004310 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002a32:	e023      	b.n	8002a7c <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM8)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a14      	ldr	r2, [pc, #80]	; (8002a8c <HAL_TIM_MspPostInit+0xb8>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d11e      	bne.n	8002a7c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a3e:	2300      	movs	r3, #0
 8002a40:	60fb      	str	r3, [r7, #12]
 8002a42:	4b10      	ldr	r3, [pc, #64]	; (8002a84 <HAL_TIM_MspPostInit+0xb0>)
 8002a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a46:	4a0f      	ldr	r2, [pc, #60]	; (8002a84 <HAL_TIM_MspPostInit+0xb0>)
 8002a48:	f043 0304 	orr.w	r3, r3, #4
 8002a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a4e:	4b0d      	ldr	r3, [pc, #52]	; (8002a84 <HAL_TIM_MspPostInit+0xb0>)
 8002a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a52:	f003 0304 	and.w	r3, r3, #4
 8002a56:	60fb      	str	r3, [r7, #12]
 8002a58:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8002a5a:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002a5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a60:	2302      	movs	r3, #2
 8002a62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a64:	2300      	movs	r3, #0
 8002a66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a70:	f107 0314 	add.w	r3, r7, #20
 8002a74:	4619      	mov	r1, r3
 8002a76:	4806      	ldr	r0, [pc, #24]	; (8002a90 <HAL_TIM_MspPostInit+0xbc>)
 8002a78:	f001 fc4a 	bl	8004310 <HAL_GPIO_Init>
}
 8002a7c:	bf00      	nop
 8002a7e:	3728      	adds	r7, #40	; 0x28
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	40023800 	.word	0x40023800
 8002a88:	40020000 	.word	0x40020000
 8002a8c:	40010400 	.word	0x40010400
 8002a90:	40020800 	.word	0x40020800

08002a94 <uart_com_send_it>:
    uart_com_putc(value.u32_val&0xFF);
    uart_com_putc(UART_COM_END_0);
    uart_com_putc(UART_COM_END_1);
}

void uart_com_send_it(UART_HandleTypeDef *huart) {
 8002a94:	b590      	push	{r4, r7, lr}
 8002a96:	b085      	sub	sp, #20
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
    if(uart_com_ring_tx.huart != huart) return;
 8002a9c:	4b18      	ldr	r3, [pc, #96]	; (8002b00 <uart_com_send_it+0x6c>)
 8002a9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d127      	bne.n	8002af8 <uart_com_send_it+0x64>

    uart_com_ring_forward_r_ptr(&uart_com_ring_tx, previous_send_len);
 8002aa8:	4b16      	ldr	r3, [pc, #88]	; (8002b04 <uart_com_send_it+0x70>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4619      	mov	r1, r3
 8002aae:	4814      	ldr	r0, [pc, #80]	; (8002b00 <uart_com_send_it+0x6c>)
 8002ab0:	f000 f87c 	bl	8002bac <uart_com_ring_forward_r_ptr>
    uint16_t len = (uint16_t)uart_com_ring_available_linear(&uart_com_ring_tx);
 8002ab4:	4812      	ldr	r0, [pc, #72]	; (8002b00 <uart_com_send_it+0x6c>)
 8002ab6:	f000 f847 	bl	8002b48 <uart_com_ring_available_linear>
 8002aba:	4603      	mov	r3, r0
 8002abc:	81fb      	strh	r3, [r7, #14]
    if (len > 0 ) {
 8002abe:	89fb      	ldrh	r3, [r7, #14]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d015      	beq.n	8002af0 <uart_com_send_it+0x5c>
        previous_send_len = len;
 8002ac4:	89fb      	ldrh	r3, [r7, #14]
 8002ac6:	4a0f      	ldr	r2, [pc, #60]	; (8002b04 <uart_com_send_it+0x70>)
 8002ac8:	6013      	str	r3, [r2, #0]
        send_lock = 1;
 8002aca:	4b0f      	ldr	r3, [pc, #60]	; (8002b08 <uart_com_send_it+0x74>)
 8002acc:	2201      	movs	r2, #1
 8002ace:	601a      	str	r2, [r3, #0]
        HAL_UART_Transmit_DMA(uart_com_ring_tx.huart, uart_com_ring_tx.buf+uart_com_ring_get_r_ptr(&uart_com_ring_tx), len);
 8002ad0:	4b0b      	ldr	r3, [pc, #44]	; (8002b00 <uart_com_send_it+0x6c>)
 8002ad2:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 8002ad6:	480a      	ldr	r0, [pc, #40]	; (8002b00 <uart_com_send_it+0x6c>)
 8002ad8:	f000 f85a 	bl	8002b90 <uart_com_ring_get_r_ptr>
 8002adc:	4603      	mov	r3, r0
 8002ade:	461a      	mov	r2, r3
 8002ae0:	4b07      	ldr	r3, [pc, #28]	; (8002b00 <uart_com_send_it+0x6c>)
 8002ae2:	4413      	add	r3, r2
 8002ae4:	89fa      	ldrh	r2, [r7, #14]
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	4620      	mov	r0, r4
 8002aea:	f003 fcdf 	bl	80064ac <HAL_UART_Transmit_DMA>
 8002aee:	e004      	b.n	8002afa <uart_com_send_it+0x66>
    }else{
        send_lock = 0;
 8002af0:	4b05      	ldr	r3, [pc, #20]	; (8002b08 <uart_com_send_it+0x74>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	601a      	str	r2, [r3, #0]
 8002af6:	e000      	b.n	8002afa <uart_com_send_it+0x66>
    if(uart_com_ring_tx.huart != huart) return;
 8002af8:	bf00      	nop
    }
}
 8002afa:	3714      	adds	r7, #20
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd90      	pop	{r4, r7, pc}
 8002b00:	200037a4 	.word	0x200037a4
 8002b04:	20000240 	.word	0x20000240
 8002b08:	2000023c 	.word	0x2000023c

08002b0c <update_w_ptr>:
#include "main.h"
#include <stdio.h>

static void update_w_ptr(struct ring_buf *ring){
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
    if(ring->type == RING_TYPE_RX_CIRCULAR){
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d10e      	bne.n	8002b3c <update_w_ptr+0x30>
        ring->w_ptr = (uint16_t) ((ring->buf_size - ring->huart->hdmarx->Instance->W_PTR) & 0xFFFF);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f8b3 2080 	ldrh.w	r2, [r3, #128]	; 0x80
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	b29a      	uxth	r2, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
    }
}
 8002b3c:	bf00      	nop
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr

08002b48 <uart_com_ring_available_linear>:
    }else{
        return ring->buf_size + ring->w_ptr - ring->r_ptr;
    }
}

int uart_com_ring_available_linear(struct ring_buf *ring){
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
    update_w_ptr(ring);
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f7ff ffdb 	bl	8002b0c <update_w_ptr>

    if(ring->w_ptr >= ring->r_ptr){
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d308      	bcc.n	8002b78 <uart_com_ring_available_linear+0x30>
        return ring->w_ptr - ring->r_ptr;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	e007      	b.n	8002b88 <uart_com_ring_available_linear+0x40>
    }else{
        return ring->buf_size - ring->r_ptr;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8002b7e:	461a      	mov	r2, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8002b86:	1ad3      	subs	r3, r2, r3
    }
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3708      	adds	r7, #8
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <uart_com_ring_get_r_ptr>:
    update_w_ptr(ring);

    return ring->w_ptr;
}

uint16_t uart_com_ring_get_r_ptr(struct ring_buf *ring){
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
    update_w_ptr(ring);
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f7ff ffb7 	bl	8002b0c <update_w_ptr>

    return ring->r_ptr;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3708      	adds	r7, #8
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <uart_com_ring_forward_r_ptr>:

void uart_com_ring_forward_r_ptr(struct ring_buf *ring, int len){
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
    update_w_ptr(ring);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f7ff ffa8 	bl	8002b0c <update_w_ptr>

    while(len > 0){
 8002bbc:	e018      	b.n	8002bf0 <uart_com_ring_forward_r_ptr+0x44>
        if(ring->r_ptr+1 >= ring->buf_size){
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	f8b2 2080 	ldrh.w	r2, [r2, #128]	; 0x80
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	db04      	blt.n	8002bda <uart_com_ring_forward_r_ptr+0x2e>
            ring->r_ptr = 0;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 8002bd8:	e007      	b.n	8002bea <uart_com_ring_forward_r_ptr+0x3e>
        }else{
            ring->r_ptr += 1;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8002be0:	3301      	adds	r3, #1
 8002be2:	b29a      	uxth	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
        }
        len--;
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	3b01      	subs	r3, #1
 8002bee:	603b      	str	r3, [r7, #0]
    while(len > 0){
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	dce3      	bgt.n	8002bbe <uart_com_ring_forward_r_ptr+0x12>
    }
}
 8002bf6:	bf00      	nop
 8002bf8:	3708      	adds	r7, #8
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
	...

08002c00 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8002c04:	4b11      	ldr	r3, [pc, #68]	; (8002c4c <MX_USART1_UART_Init+0x4c>)
 8002c06:	4a12      	ldr	r2, [pc, #72]	; (8002c50 <MX_USART1_UART_Init+0x50>)
 8002c08:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002c0a:	4b10      	ldr	r3, [pc, #64]	; (8002c4c <MX_USART1_UART_Init+0x4c>)
 8002c0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c10:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c12:	4b0e      	ldr	r3, [pc, #56]	; (8002c4c <MX_USART1_UART_Init+0x4c>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002c18:	4b0c      	ldr	r3, [pc, #48]	; (8002c4c <MX_USART1_UART_Init+0x4c>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002c1e:	4b0b      	ldr	r3, [pc, #44]	; (8002c4c <MX_USART1_UART_Init+0x4c>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c24:	4b09      	ldr	r3, [pc, #36]	; (8002c4c <MX_USART1_UART_Init+0x4c>)
 8002c26:	220c      	movs	r2, #12
 8002c28:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c2a:	4b08      	ldr	r3, [pc, #32]	; (8002c4c <MX_USART1_UART_Init+0x4c>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c30:	4b06      	ldr	r3, [pc, #24]	; (8002c4c <MX_USART1_UART_Init+0x4c>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c36:	4805      	ldr	r0, [pc, #20]	; (8002c4c <MX_USART1_UART_Init+0x4c>)
 8002c38:	f003 fb96 	bl	8006368 <HAL_UART_Init>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002c42:	f7ff facd 	bl	80021e0 <Error_Handler>
  }

}
 8002c46:	bf00      	nop
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	20003984 	.word	0x20003984
 8002c50:	40011000 	.word	0x40011000

08002c54 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b08a      	sub	sp, #40	; 0x28
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c5c:	f107 0314 	add.w	r3, r7, #20
 8002c60:	2200      	movs	r2, #0
 8002c62:	601a      	str	r2, [r3, #0]
 8002c64:	605a      	str	r2, [r3, #4]
 8002c66:	609a      	str	r2, [r3, #8]
 8002c68:	60da      	str	r2, [r3, #12]
 8002c6a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a4c      	ldr	r2, [pc, #304]	; (8002da4 <HAL_UART_MspInit+0x150>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	f040 8092 	bne.w	8002d9c <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c78:	2300      	movs	r3, #0
 8002c7a:	613b      	str	r3, [r7, #16]
 8002c7c:	4b4a      	ldr	r3, [pc, #296]	; (8002da8 <HAL_UART_MspInit+0x154>)
 8002c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c80:	4a49      	ldr	r2, [pc, #292]	; (8002da8 <HAL_UART_MspInit+0x154>)
 8002c82:	f043 0310 	orr.w	r3, r3, #16
 8002c86:	6453      	str	r3, [r2, #68]	; 0x44
 8002c88:	4b47      	ldr	r3, [pc, #284]	; (8002da8 <HAL_UART_MspInit+0x154>)
 8002c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c8c:	f003 0310 	and.w	r3, r3, #16
 8002c90:	613b      	str	r3, [r7, #16]
 8002c92:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c94:	2300      	movs	r3, #0
 8002c96:	60fb      	str	r3, [r7, #12]
 8002c98:	4b43      	ldr	r3, [pc, #268]	; (8002da8 <HAL_UART_MspInit+0x154>)
 8002c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9c:	4a42      	ldr	r2, [pc, #264]	; (8002da8 <HAL_UART_MspInit+0x154>)
 8002c9e:	f043 0301 	orr.w	r3, r3, #1
 8002ca2:	6313      	str	r3, [r2, #48]	; 0x30
 8002ca4:	4b40      	ldr	r3, [pc, #256]	; (8002da8 <HAL_UART_MspInit+0x154>)
 8002ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca8:	f003 0301 	and.w	r3, r3, #1
 8002cac:	60fb      	str	r3, [r7, #12]
 8002cae:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002cb0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002cb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002cc2:	2307      	movs	r3, #7
 8002cc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cc6:	f107 0314 	add.w	r3, r7, #20
 8002cca:	4619      	mov	r1, r3
 8002ccc:	4837      	ldr	r0, [pc, #220]	; (8002dac <HAL_UART_MspInit+0x158>)
 8002cce:	f001 fb1f 	bl	8004310 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002cd2:	4b37      	ldr	r3, [pc, #220]	; (8002db0 <HAL_UART_MspInit+0x15c>)
 8002cd4:	4a37      	ldr	r2, [pc, #220]	; (8002db4 <HAL_UART_MspInit+0x160>)
 8002cd6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002cd8:	4b35      	ldr	r3, [pc, #212]	; (8002db0 <HAL_UART_MspInit+0x15c>)
 8002cda:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002cde:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ce0:	4b33      	ldr	r3, [pc, #204]	; (8002db0 <HAL_UART_MspInit+0x15c>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ce6:	4b32      	ldr	r3, [pc, #200]	; (8002db0 <HAL_UART_MspInit+0x15c>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002cec:	4b30      	ldr	r3, [pc, #192]	; (8002db0 <HAL_UART_MspInit+0x15c>)
 8002cee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cf2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002cf4:	4b2e      	ldr	r3, [pc, #184]	; (8002db0 <HAL_UART_MspInit+0x15c>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002cfa:	4b2d      	ldr	r3, [pc, #180]	; (8002db0 <HAL_UART_MspInit+0x15c>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002d00:	4b2b      	ldr	r3, [pc, #172]	; (8002db0 <HAL_UART_MspInit+0x15c>)
 8002d02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d06:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002d08:	4b29      	ldr	r3, [pc, #164]	; (8002db0 <HAL_UART_MspInit+0x15c>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d0e:	4b28      	ldr	r3, [pc, #160]	; (8002db0 <HAL_UART_MspInit+0x15c>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002d14:	4826      	ldr	r0, [pc, #152]	; (8002db0 <HAL_UART_MspInit+0x15c>)
 8002d16:	f000 ff6b 	bl	8003bf0 <HAL_DMA_Init>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d001      	beq.n	8002d24 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8002d20:	f7ff fa5e 	bl	80021e0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4a22      	ldr	r2, [pc, #136]	; (8002db0 <HAL_UART_MspInit+0x15c>)
 8002d28:	635a      	str	r2, [r3, #52]	; 0x34
 8002d2a:	4a21      	ldr	r2, [pc, #132]	; (8002db0 <HAL_UART_MspInit+0x15c>)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002d30:	4b21      	ldr	r3, [pc, #132]	; (8002db8 <HAL_UART_MspInit+0x164>)
 8002d32:	4a22      	ldr	r2, [pc, #136]	; (8002dbc <HAL_UART_MspInit+0x168>)
 8002d34:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002d36:	4b20      	ldr	r3, [pc, #128]	; (8002db8 <HAL_UART_MspInit+0x164>)
 8002d38:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d3c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d3e:	4b1e      	ldr	r3, [pc, #120]	; (8002db8 <HAL_UART_MspInit+0x164>)
 8002d40:	2240      	movs	r2, #64	; 0x40
 8002d42:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d44:	4b1c      	ldr	r3, [pc, #112]	; (8002db8 <HAL_UART_MspInit+0x164>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002d4a:	4b1b      	ldr	r3, [pc, #108]	; (8002db8 <HAL_UART_MspInit+0x164>)
 8002d4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d50:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d52:	4b19      	ldr	r3, [pc, #100]	; (8002db8 <HAL_UART_MspInit+0x164>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d58:	4b17      	ldr	r3, [pc, #92]	; (8002db8 <HAL_UART_MspInit+0x164>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002d5e:	4b16      	ldr	r3, [pc, #88]	; (8002db8 <HAL_UART_MspInit+0x164>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002d64:	4b14      	ldr	r3, [pc, #80]	; (8002db8 <HAL_UART_MspInit+0x164>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d6a:	4b13      	ldr	r3, [pc, #76]	; (8002db8 <HAL_UART_MspInit+0x164>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002d70:	4811      	ldr	r0, [pc, #68]	; (8002db8 <HAL_UART_MspInit+0x164>)
 8002d72:	f000 ff3d 	bl	8003bf0 <HAL_DMA_Init>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d001      	beq.n	8002d80 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 8002d7c:	f7ff fa30 	bl	80021e0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	4a0d      	ldr	r2, [pc, #52]	; (8002db8 <HAL_UART_MspInit+0x164>)
 8002d84:	631a      	str	r2, [r3, #48]	; 0x30
 8002d86:	4a0c      	ldr	r2, [pc, #48]	; (8002db8 <HAL_UART_MspInit+0x164>)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	2100      	movs	r1, #0
 8002d90:	2025      	movs	r0, #37	; 0x25
 8002d92:	f000 fef6 	bl	8003b82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002d96:	2025      	movs	r0, #37	; 0x25
 8002d98:	f000 ff0f 	bl	8003bba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002d9c:	bf00      	nop
 8002d9e:	3728      	adds	r7, #40	; 0x28
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	40011000 	.word	0x40011000
 8002da8:	40023800 	.word	0x40023800
 8002dac:	40020000 	.word	0x40020000
 8002db0:	20003924 	.word	0x20003924
 8002db4:	40026440 	.word	0x40026440
 8002db8:	200038c4 	.word	0x200038c4
 8002dbc:	400264b8 	.word	0x400264b8

08002dc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002dc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002df8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002dc4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002dc6:	e003      	b.n	8002dd0 <LoopCopyDataInit>

08002dc8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002dc8:	4b0c      	ldr	r3, [pc, #48]	; (8002dfc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002dca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002dcc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002dce:	3104      	adds	r1, #4

08002dd0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002dd0:	480b      	ldr	r0, [pc, #44]	; (8002e00 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002dd2:	4b0c      	ldr	r3, [pc, #48]	; (8002e04 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002dd4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002dd6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002dd8:	d3f6      	bcc.n	8002dc8 <CopyDataInit>
  ldr  r2, =_sbss
 8002dda:	4a0b      	ldr	r2, [pc, #44]	; (8002e08 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002ddc:	e002      	b.n	8002de4 <LoopFillZerobss>

08002dde <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002dde:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002de0:	f842 3b04 	str.w	r3, [r2], #4

08002de4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002de4:	4b09      	ldr	r3, [pc, #36]	; (8002e0c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002de6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002de8:	d3f9      	bcc.n	8002dde <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002dea:	f7ff fc1d 	bl	8002628 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002dee:	f004 fa17 	bl	8007220 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002df2:	f7ff f8d3 	bl	8001f9c <main>
  bx  lr    
 8002df6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002df8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002dfc:	0800af98 	.word	0x0800af98
  ldr  r0, =_sdata
 8002e00:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002e04:	200001e8 	.word	0x200001e8
  ldr  r2, =_sbss
 8002e08:	200001e8 	.word	0x200001e8
  ldr  r3, = _ebss
 8002e0c:	200039cc 	.word	0x200039cc

08002e10 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e10:	e7fe      	b.n	8002e10 <CAN1_RX0_IRQHandler>
	...

08002e14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e18:	4b0e      	ldr	r3, [pc, #56]	; (8002e54 <HAL_Init+0x40>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a0d      	ldr	r2, [pc, #52]	; (8002e54 <HAL_Init+0x40>)
 8002e1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e24:	4b0b      	ldr	r3, [pc, #44]	; (8002e54 <HAL_Init+0x40>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a0a      	ldr	r2, [pc, #40]	; (8002e54 <HAL_Init+0x40>)
 8002e2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e30:	4b08      	ldr	r3, [pc, #32]	; (8002e54 <HAL_Init+0x40>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a07      	ldr	r2, [pc, #28]	; (8002e54 <HAL_Init+0x40>)
 8002e36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e3c:	2003      	movs	r0, #3
 8002e3e:	f000 fe95 	bl	8003b6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e42:	2000      	movs	r0, #0
 8002e44:	f000 f808 	bl	8002e58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e48:	f7ff fabe 	bl	80023c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	40023c00 	.word	0x40023c00

08002e58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e60:	4b12      	ldr	r3, [pc, #72]	; (8002eac <HAL_InitTick+0x54>)
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	4b12      	ldr	r3, [pc, #72]	; (8002eb0 <HAL_InitTick+0x58>)
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	4619      	mov	r1, r3
 8002e6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e76:	4618      	mov	r0, r3
 8002e78:	f000 fead 	bl	8003bd6 <HAL_SYSTICK_Config>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d001      	beq.n	8002e86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e00e      	b.n	8002ea4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2b0f      	cmp	r3, #15
 8002e8a:	d80a      	bhi.n	8002ea2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	6879      	ldr	r1, [r7, #4]
 8002e90:	f04f 30ff 	mov.w	r0, #4294967295
 8002e94:	f000 fe75 	bl	8003b82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e98:	4a06      	ldr	r2, [pc, #24]	; (8002eb4 <HAL_InitTick+0x5c>)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	e000      	b.n	8002ea4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3708      	adds	r7, #8
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	20000008 	.word	0x20000008
 8002eb0:	20000010 	.word	0x20000010
 8002eb4:	2000000c 	.word	0x2000000c

08002eb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ebc:	4b06      	ldr	r3, [pc, #24]	; (8002ed8 <HAL_IncTick+0x20>)
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	4b06      	ldr	r3, [pc, #24]	; (8002edc <HAL_IncTick+0x24>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	4a04      	ldr	r2, [pc, #16]	; (8002edc <HAL_IncTick+0x24>)
 8002eca:	6013      	str	r3, [r2, #0]
}
 8002ecc:	bf00      	nop
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop
 8002ed8:	20000010 	.word	0x20000010
 8002edc:	200039c4 	.word	0x200039c4

08002ee0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ee4:	4b03      	ldr	r3, [pc, #12]	; (8002ef4 <HAL_GetTick+0x14>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	200039c4 	.word	0x200039c4

08002ef8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f00:	f7ff ffee 	bl	8002ee0 <HAL_GetTick>
 8002f04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f10:	d005      	beq.n	8002f1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f12:	4b09      	ldr	r3, [pc, #36]	; (8002f38 <HAL_Delay+0x40>)
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	461a      	mov	r2, r3
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f1e:	bf00      	nop
 8002f20:	f7ff ffde 	bl	8002ee0 <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	68fa      	ldr	r2, [r7, #12]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d8f7      	bhi.n	8002f20 <HAL_Delay+0x28>
  {
  }
}
 8002f30:	bf00      	nop
 8002f32:	3710      	adds	r7, #16
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	20000010 	.word	0x20000010

08002f3c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f44:	2300      	movs	r3, #0
 8002f46:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d101      	bne.n	8002f52 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e033      	b.n	8002fba <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d109      	bne.n	8002f6e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f7fe f8b4 	bl	80010c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f72:	f003 0310 	and.w	r3, r3, #16
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d118      	bne.n	8002fac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f82:	f023 0302 	bic.w	r3, r3, #2
 8002f86:	f043 0202 	orr.w	r2, r3, #2
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f000 fb94 	bl	80036bc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9e:	f023 0303 	bic.w	r3, r3, #3
 8002fa2:	f043 0201 	orr.w	r2, r3, #1
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	641a      	str	r2, [r3, #64]	; 0x40
 8002faa:	e001      	b.n	8002fb0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3710      	adds	r7, #16
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}

08002fc2 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002fc2:	b580      	push	{r7, lr}
 8002fc4:	b084      	sub	sp, #16
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	60fb      	str	r3, [r7, #12]
 8002fce:	2300      	movs	r3, #0
 8002fd0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0302 	and.w	r3, r3, #2
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	bf0c      	ite	eq
 8002fe0:	2301      	moveq	r3, #1
 8002fe2:	2300      	movne	r3, #0
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f003 0320 	and.w	r3, r3, #32
 8002ff2:	2b20      	cmp	r3, #32
 8002ff4:	bf0c      	ite	eq
 8002ff6:	2301      	moveq	r3, #1
 8002ff8:	2300      	movne	r3, #0
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d049      	beq.n	8003098 <HAL_ADC_IRQHandler+0xd6>
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d046      	beq.n	8003098 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300e:	f003 0310 	and.w	r3, r3, #16
 8003012:	2b00      	cmp	r3, #0
 8003014:	d105      	bne.n	8003022 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d12b      	bne.n	8003088 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003034:	2b00      	cmp	r3, #0
 8003036:	d127      	bne.n	8003088 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003042:	2b00      	cmp	r3, #0
 8003044:	d006      	beq.n	8003054 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003050:	2b00      	cmp	r3, #0
 8003052:	d119      	bne.n	8003088 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	685a      	ldr	r2, [r3, #4]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f022 0220 	bic.w	r2, r2, #32
 8003062:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003068:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003074:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d105      	bne.n	8003088 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003080:	f043 0201 	orr.w	r2, r3, #1
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f000 f9cd 	bl	8003428 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f06f 0212 	mvn.w	r2, #18
 8003096:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0304 	and.w	r3, r3, #4
 80030a2:	2b04      	cmp	r3, #4
 80030a4:	bf0c      	ite	eq
 80030a6:	2301      	moveq	r3, #1
 80030a8:	2300      	movne	r3, #0
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030b8:	2b80      	cmp	r3, #128	; 0x80
 80030ba:	bf0c      	ite	eq
 80030bc:	2301      	moveq	r3, #1
 80030be:	2300      	movne	r3, #0
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d057      	beq.n	800317a <HAL_ADC_IRQHandler+0x1b8>
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d054      	beq.n	800317a <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d4:	f003 0310 	and.w	r3, r3, #16
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d105      	bne.n	80030e8 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d139      	bne.n	800316a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030fc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003100:	2b00      	cmp	r3, #0
 8003102:	d006      	beq.n	8003112 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800310e:	2b00      	cmp	r3, #0
 8003110:	d12b      	bne.n	800316a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800311c:	2b00      	cmp	r3, #0
 800311e:	d124      	bne.n	800316a <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800312a:	2b00      	cmp	r3, #0
 800312c:	d11d      	bne.n	800316a <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003132:	2b00      	cmp	r3, #0
 8003134:	d119      	bne.n	800316a <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	685a      	ldr	r2, [r3, #4]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003144:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800315a:	2b00      	cmp	r3, #0
 800315c:	d105      	bne.n	800316a <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003162:	f043 0201 	orr.w	r2, r3, #1
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 fc24 	bl	80039b8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f06f 020c 	mvn.w	r2, #12
 8003178:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0301 	and.w	r3, r3, #1
 8003184:	2b01      	cmp	r3, #1
 8003186:	bf0c      	ite	eq
 8003188:	2301      	moveq	r3, #1
 800318a:	2300      	movne	r3, #0
 800318c:	b2db      	uxtb	r3, r3
 800318e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800319a:	2b40      	cmp	r3, #64	; 0x40
 800319c:	bf0c      	ite	eq
 800319e:	2301      	moveq	r3, #1
 80031a0:	2300      	movne	r3, #0
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d017      	beq.n	80031dc <HAL_ADC_IRQHandler+0x21a>
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d014      	beq.n	80031dc <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0301 	and.w	r3, r3, #1
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d10d      	bne.n	80031dc <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f000 f93f 	bl	8003450 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f06f 0201 	mvn.w	r2, #1
 80031da:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0320 	and.w	r3, r3, #32
 80031e6:	2b20      	cmp	r3, #32
 80031e8:	bf0c      	ite	eq
 80031ea:	2301      	moveq	r3, #1
 80031ec:	2300      	movne	r3, #0
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80031fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003200:	bf0c      	ite	eq
 8003202:	2301      	moveq	r3, #1
 8003204:	2300      	movne	r3, #0
 8003206:	b2db      	uxtb	r3, r3
 8003208:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d015      	beq.n	800323c <HAL_ADC_IRQHandler+0x27a>
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d012      	beq.n	800323c <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800321a:	f043 0202 	orr.w	r2, r3, #2
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f06f 0220 	mvn.w	r2, #32
 800322a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f000 f919 	bl	8003464 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f06f 0220 	mvn.w	r2, #32
 800323a:	601a      	str	r2, [r3, #0]
  }
}
 800323c:	bf00      	nop
 800323e:	3710      	adds	r7, #16
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b086      	sub	sp, #24
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003250:	2300      	movs	r3, #0
 8003252:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800325a:	2b01      	cmp	r3, #1
 800325c:	d101      	bne.n	8003262 <HAL_ADC_Start_DMA+0x1e>
 800325e:	2302      	movs	r3, #2
 8003260:	e0cc      	b.n	80033fc <HAL_ADC_Start_DMA+0x1b8>
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2201      	movs	r2, #1
 8003266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f003 0301 	and.w	r3, r3, #1
 8003274:	2b01      	cmp	r3, #1
 8003276:	d018      	beq.n	80032aa <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	689a      	ldr	r2, [r3, #8]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f042 0201 	orr.w	r2, r2, #1
 8003286:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003288:	4b5e      	ldr	r3, [pc, #376]	; (8003404 <HAL_ADC_Start_DMA+0x1c0>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a5e      	ldr	r2, [pc, #376]	; (8003408 <HAL_ADC_Start_DMA+0x1c4>)
 800328e:	fba2 2303 	umull	r2, r3, r2, r3
 8003292:	0c9a      	lsrs	r2, r3, #18
 8003294:	4613      	mov	r3, r2
 8003296:	005b      	lsls	r3, r3, #1
 8003298:	4413      	add	r3, r2
 800329a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800329c:	e002      	b.n	80032a4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	3b01      	subs	r3, #1
 80032a2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d1f9      	bne.n	800329e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f003 0301 	and.w	r3, r3, #1
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	f040 80a0 	bne.w	80033fa <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032be:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80032c2:	f023 0301 	bic.w	r3, r3, #1
 80032c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d007      	beq.n	80032ec <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80032e4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032f8:	d106      	bne.n	8003308 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032fe:	f023 0206 	bic.w	r2, r3, #6
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	645a      	str	r2, [r3, #68]	; 0x44
 8003306:	e002      	b.n	800330e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2200      	movs	r2, #0
 800330c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003316:	4b3d      	ldr	r3, [pc, #244]	; (800340c <HAL_ADC_Start_DMA+0x1c8>)
 8003318:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800331e:	4a3c      	ldr	r2, [pc, #240]	; (8003410 <HAL_ADC_Start_DMA+0x1cc>)
 8003320:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003326:	4a3b      	ldr	r2, [pc, #236]	; (8003414 <HAL_ADC_Start_DMA+0x1d0>)
 8003328:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800332e:	4a3a      	ldr	r2, [pc, #232]	; (8003418 <HAL_ADC_Start_DMA+0x1d4>)
 8003330:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800333a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	685a      	ldr	r2, [r3, #4]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800334a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	689a      	ldr	r2, [r3, #8]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800335a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	334c      	adds	r3, #76	; 0x4c
 8003366:	4619      	mov	r1, r3
 8003368:	68ba      	ldr	r2, [r7, #8]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f000 fcee 	bl	8003d4c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f003 031f 	and.w	r3, r3, #31
 8003378:	2b00      	cmp	r3, #0
 800337a:	d12a      	bne.n	80033d2 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a26      	ldr	r2, [pc, #152]	; (800341c <HAL_ADC_Start_DMA+0x1d8>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d015      	beq.n	80033b2 <HAL_ADC_Start_DMA+0x16e>
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a25      	ldr	r2, [pc, #148]	; (8003420 <HAL_ADC_Start_DMA+0x1dc>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d105      	bne.n	800339c <HAL_ADC_Start_DMA+0x158>
 8003390:	4b1e      	ldr	r3, [pc, #120]	; (800340c <HAL_ADC_Start_DMA+0x1c8>)
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f003 031f 	and.w	r3, r3, #31
 8003398:	2b00      	cmp	r3, #0
 800339a:	d00a      	beq.n	80033b2 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a20      	ldr	r2, [pc, #128]	; (8003424 <HAL_ADC_Start_DMA+0x1e0>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d129      	bne.n	80033fa <HAL_ADC_Start_DMA+0x1b6>
 80033a6:	4b19      	ldr	r3, [pc, #100]	; (800340c <HAL_ADC_Start_DMA+0x1c8>)
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f003 031f 	and.w	r3, r3, #31
 80033ae:	2b0f      	cmp	r3, #15
 80033b0:	d823      	bhi.n	80033fa <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d11c      	bne.n	80033fa <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	689a      	ldr	r2, [r3, #8]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80033ce:	609a      	str	r2, [r3, #8]
 80033d0:	e013      	b.n	80033fa <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a11      	ldr	r2, [pc, #68]	; (800341c <HAL_ADC_Start_DMA+0x1d8>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d10e      	bne.n	80033fa <HAL_ADC_Start_DMA+0x1b6>
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d107      	bne.n	80033fa <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	689a      	ldr	r2, [r3, #8]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80033f8:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80033fa:	2300      	movs	r3, #0
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3718      	adds	r7, #24
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	20000008 	.word	0x20000008
 8003408:	431bde83 	.word	0x431bde83
 800340c:	40012300 	.word	0x40012300
 8003410:	080038b5 	.word	0x080038b5
 8003414:	0800396f 	.word	0x0800396f
 8003418:	0800398b 	.word	0x0800398b
 800341c:	40012000 	.word	0x40012000
 8003420:	40012100 	.word	0x40012100
 8003424:	40012200 	.word	0x40012200

08003428 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003430:	bf00      	nop
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003444:	bf00      	nop
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003458:	bf00      	nop
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800346c:	bf00      	nop
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003478:	b480      	push	{r7}
 800347a:	b085      	sub	sp, #20
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003482:	2300      	movs	r3, #0
 8003484:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800348c:	2b01      	cmp	r3, #1
 800348e:	d101      	bne.n	8003494 <HAL_ADC_ConfigChannel+0x1c>
 8003490:	2302      	movs	r3, #2
 8003492:	e105      	b.n	80036a0 <HAL_ADC_ConfigChannel+0x228>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2b09      	cmp	r3, #9
 80034a2:	d925      	bls.n	80034f0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	68d9      	ldr	r1, [r3, #12]
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	461a      	mov	r2, r3
 80034b2:	4613      	mov	r3, r2
 80034b4:	005b      	lsls	r3, r3, #1
 80034b6:	4413      	add	r3, r2
 80034b8:	3b1e      	subs	r3, #30
 80034ba:	2207      	movs	r2, #7
 80034bc:	fa02 f303 	lsl.w	r3, r2, r3
 80034c0:	43da      	mvns	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	400a      	ands	r2, r1
 80034c8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68d9      	ldr	r1, [r3, #12]
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	689a      	ldr	r2, [r3, #8]
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	b29b      	uxth	r3, r3
 80034da:	4618      	mov	r0, r3
 80034dc:	4603      	mov	r3, r0
 80034de:	005b      	lsls	r3, r3, #1
 80034e0:	4403      	add	r3, r0
 80034e2:	3b1e      	subs	r3, #30
 80034e4:	409a      	lsls	r2, r3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	430a      	orrs	r2, r1
 80034ec:	60da      	str	r2, [r3, #12]
 80034ee:	e022      	b.n	8003536 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	6919      	ldr	r1, [r3, #16]
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	461a      	mov	r2, r3
 80034fe:	4613      	mov	r3, r2
 8003500:	005b      	lsls	r3, r3, #1
 8003502:	4413      	add	r3, r2
 8003504:	2207      	movs	r2, #7
 8003506:	fa02 f303 	lsl.w	r3, r2, r3
 800350a:	43da      	mvns	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	400a      	ands	r2, r1
 8003512:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	6919      	ldr	r1, [r3, #16]
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	689a      	ldr	r2, [r3, #8]
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	b29b      	uxth	r3, r3
 8003524:	4618      	mov	r0, r3
 8003526:	4603      	mov	r3, r0
 8003528:	005b      	lsls	r3, r3, #1
 800352a:	4403      	add	r3, r0
 800352c:	409a      	lsls	r2, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	430a      	orrs	r2, r1
 8003534:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	2b06      	cmp	r3, #6
 800353c:	d824      	bhi.n	8003588 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	685a      	ldr	r2, [r3, #4]
 8003548:	4613      	mov	r3, r2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	4413      	add	r3, r2
 800354e:	3b05      	subs	r3, #5
 8003550:	221f      	movs	r2, #31
 8003552:	fa02 f303 	lsl.w	r3, r2, r3
 8003556:	43da      	mvns	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	400a      	ands	r2, r1
 800355e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	b29b      	uxth	r3, r3
 800356c:	4618      	mov	r0, r3
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	685a      	ldr	r2, [r3, #4]
 8003572:	4613      	mov	r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	4413      	add	r3, r2
 8003578:	3b05      	subs	r3, #5
 800357a:	fa00 f203 	lsl.w	r2, r0, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	430a      	orrs	r2, r1
 8003584:	635a      	str	r2, [r3, #52]	; 0x34
 8003586:	e04c      	b.n	8003622 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	2b0c      	cmp	r3, #12
 800358e:	d824      	bhi.n	80035da <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	685a      	ldr	r2, [r3, #4]
 800359a:	4613      	mov	r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	4413      	add	r3, r2
 80035a0:	3b23      	subs	r3, #35	; 0x23
 80035a2:	221f      	movs	r2, #31
 80035a4:	fa02 f303 	lsl.w	r3, r2, r3
 80035a8:	43da      	mvns	r2, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	400a      	ands	r2, r1
 80035b0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	b29b      	uxth	r3, r3
 80035be:	4618      	mov	r0, r3
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	685a      	ldr	r2, [r3, #4]
 80035c4:	4613      	mov	r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	4413      	add	r3, r2
 80035ca:	3b23      	subs	r3, #35	; 0x23
 80035cc:	fa00 f203 	lsl.w	r2, r0, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	430a      	orrs	r2, r1
 80035d6:	631a      	str	r2, [r3, #48]	; 0x30
 80035d8:	e023      	b.n	8003622 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	685a      	ldr	r2, [r3, #4]
 80035e4:	4613      	mov	r3, r2
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	4413      	add	r3, r2
 80035ea:	3b41      	subs	r3, #65	; 0x41
 80035ec:	221f      	movs	r2, #31
 80035ee:	fa02 f303 	lsl.w	r3, r2, r3
 80035f2:	43da      	mvns	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	400a      	ands	r2, r1
 80035fa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	b29b      	uxth	r3, r3
 8003608:	4618      	mov	r0, r3
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	685a      	ldr	r2, [r3, #4]
 800360e:	4613      	mov	r3, r2
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	4413      	add	r3, r2
 8003614:	3b41      	subs	r3, #65	; 0x41
 8003616:	fa00 f203 	lsl.w	r2, r0, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	430a      	orrs	r2, r1
 8003620:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003622:	4b22      	ldr	r3, [pc, #136]	; (80036ac <HAL_ADC_ConfigChannel+0x234>)
 8003624:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a21      	ldr	r2, [pc, #132]	; (80036b0 <HAL_ADC_ConfigChannel+0x238>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d109      	bne.n	8003644 <HAL_ADC_ConfigChannel+0x1cc>
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2b12      	cmp	r3, #18
 8003636:	d105      	bne.n	8003644 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a19      	ldr	r2, [pc, #100]	; (80036b0 <HAL_ADC_ConfigChannel+0x238>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d123      	bne.n	8003696 <HAL_ADC_ConfigChannel+0x21e>
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2b10      	cmp	r3, #16
 8003654:	d003      	beq.n	800365e <HAL_ADC_ConfigChannel+0x1e6>
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2b11      	cmp	r3, #17
 800365c:	d11b      	bne.n	8003696 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2b10      	cmp	r3, #16
 8003670:	d111      	bne.n	8003696 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003672:	4b10      	ldr	r3, [pc, #64]	; (80036b4 <HAL_ADC_ConfigChannel+0x23c>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a10      	ldr	r2, [pc, #64]	; (80036b8 <HAL_ADC_ConfigChannel+0x240>)
 8003678:	fba2 2303 	umull	r2, r3, r2, r3
 800367c:	0c9a      	lsrs	r2, r3, #18
 800367e:	4613      	mov	r3, r2
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	4413      	add	r3, r2
 8003684:	005b      	lsls	r3, r3, #1
 8003686:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003688:	e002      	b.n	8003690 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	3b01      	subs	r3, #1
 800368e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1f9      	bne.n	800368a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800369e:	2300      	movs	r3, #0
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3714      	adds	r7, #20
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr
 80036ac:	40012300 	.word	0x40012300
 80036b0:	40012000 	.word	0x40012000
 80036b4:	20000008 	.word	0x20000008
 80036b8:	431bde83 	.word	0x431bde83

080036bc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80036bc:	b480      	push	{r7}
 80036be:	b085      	sub	sp, #20
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80036c4:	4b79      	ldr	r3, [pc, #484]	; (80038ac <ADC_Init+0x1f0>)
 80036c6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	685a      	ldr	r2, [r3, #4]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	431a      	orrs	r2, r3
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	685a      	ldr	r2, [r3, #4]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	6859      	ldr	r1, [r3, #4]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	691b      	ldr	r3, [r3, #16]
 80036fc:	021a      	lsls	r2, r3, #8
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	430a      	orrs	r2, r1
 8003704:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	685a      	ldr	r2, [r3, #4]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003714:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	6859      	ldr	r1, [r3, #4]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	689a      	ldr	r2, [r3, #8]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	430a      	orrs	r2, r1
 8003726:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	689a      	ldr	r2, [r3, #8]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003736:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	6899      	ldr	r1, [r3, #8]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	68da      	ldr	r2, [r3, #12]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	430a      	orrs	r2, r1
 8003748:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800374e:	4a58      	ldr	r2, [pc, #352]	; (80038b0 <ADC_Init+0x1f4>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d022      	beq.n	800379a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	689a      	ldr	r2, [r3, #8]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003762:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	6899      	ldr	r1, [r3, #8]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	430a      	orrs	r2, r1
 8003774:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	689a      	ldr	r2, [r3, #8]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003784:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	6899      	ldr	r1, [r3, #8]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	430a      	orrs	r2, r1
 8003796:	609a      	str	r2, [r3, #8]
 8003798:	e00f      	b.n	80037ba <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	689a      	ldr	r2, [r3, #8]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80037a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	689a      	ldr	r2, [r3, #8]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80037b8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	689a      	ldr	r2, [r3, #8]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f022 0202 	bic.w	r2, r2, #2
 80037c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	6899      	ldr	r1, [r3, #8]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	7e1b      	ldrb	r3, [r3, #24]
 80037d4:	005a      	lsls	r2, r3, #1
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	430a      	orrs	r2, r1
 80037dc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d01b      	beq.n	8003820 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	685a      	ldr	r2, [r3, #4]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037f6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	685a      	ldr	r2, [r3, #4]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003806:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	6859      	ldr	r1, [r3, #4]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003812:	3b01      	subs	r3, #1
 8003814:	035a      	lsls	r2, r3, #13
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	430a      	orrs	r2, r1
 800381c:	605a      	str	r2, [r3, #4]
 800381e:	e007      	b.n	8003830 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	685a      	ldr	r2, [r3, #4]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800382e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800383e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	69db      	ldr	r3, [r3, #28]
 800384a:	3b01      	subs	r3, #1
 800384c:	051a      	lsls	r2, r3, #20
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	430a      	orrs	r2, r1
 8003854:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	689a      	ldr	r2, [r3, #8]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003864:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	6899      	ldr	r1, [r3, #8]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003872:	025a      	lsls	r2, r3, #9
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	430a      	orrs	r2, r1
 800387a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	689a      	ldr	r2, [r3, #8]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800388a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	6899      	ldr	r1, [r3, #8]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	695b      	ldr	r3, [r3, #20]
 8003896:	029a      	lsls	r2, r3, #10
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	430a      	orrs	r2, r1
 800389e:	609a      	str	r2, [r3, #8]
}
 80038a0:	bf00      	nop
 80038a2:	3714      	adds	r7, #20
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr
 80038ac:	40012300 	.word	0x40012300
 80038b0:	0f000001 	.word	0x0f000001

080038b4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d13c      	bne.n	8003948 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d12b      	bne.n	8003940 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d127      	bne.n	8003940 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d006      	beq.n	800390c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003908:	2b00      	cmp	r3, #0
 800390a:	d119      	bne.n	8003940 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	685a      	ldr	r2, [r3, #4]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f022 0220 	bic.w	r2, r2, #32
 800391a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003920:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d105      	bne.n	8003940 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003938:	f043 0201 	orr.w	r2, r3, #1
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003940:	68f8      	ldr	r0, [r7, #12]
 8003942:	f7ff fd71 	bl	8003428 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003946:	e00e      	b.n	8003966 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394c:	f003 0310 	and.w	r3, r3, #16
 8003950:	2b00      	cmp	r3, #0
 8003952:	d003      	beq.n	800395c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003954:	68f8      	ldr	r0, [r7, #12]
 8003956:	f7ff fd85 	bl	8003464 <HAL_ADC_ErrorCallback>
}
 800395a:	e004      	b.n	8003966 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	4798      	blx	r3
}
 8003966:	bf00      	nop
 8003968:	3710      	adds	r7, #16
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800396e:	b580      	push	{r7, lr}
 8003970:	b084      	sub	sp, #16
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800397a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800397c:	68f8      	ldr	r0, [r7, #12]
 800397e:	f7ff fd5d 	bl	800343c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003982:	bf00      	nop
 8003984:	3710      	adds	r7, #16
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}

0800398a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800398a:	b580      	push	{r7, lr}
 800398c:	b084      	sub	sp, #16
 800398e:	af00      	add	r7, sp, #0
 8003990:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003996:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2240      	movs	r2, #64	; 0x40
 800399c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a2:	f043 0204 	orr.w	r2, r3, #4
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80039aa:	68f8      	ldr	r0, [r7, #12]
 80039ac:	f7ff fd5a 	bl	8003464 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80039b0:	bf00      	nop
 80039b2:	3710      	adds	r7, #16
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80039c0:	bf00      	nop
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b085      	sub	sp, #20
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f003 0307 	and.w	r3, r3, #7
 80039da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039dc:	4b0c      	ldr	r3, [pc, #48]	; (8003a10 <__NVIC_SetPriorityGrouping+0x44>)
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039e2:	68ba      	ldr	r2, [r7, #8]
 80039e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80039e8:	4013      	ands	r3, r2
 80039ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80039f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039fe:	4a04      	ldr	r2, [pc, #16]	; (8003a10 <__NVIC_SetPriorityGrouping+0x44>)
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	60d3      	str	r3, [r2, #12]
}
 8003a04:	bf00      	nop
 8003a06:	3714      	adds	r7, #20
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr
 8003a10:	e000ed00 	.word	0xe000ed00

08003a14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a14:	b480      	push	{r7}
 8003a16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a18:	4b04      	ldr	r3, [pc, #16]	; (8003a2c <__NVIC_GetPriorityGrouping+0x18>)
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	0a1b      	lsrs	r3, r3, #8
 8003a1e:	f003 0307 	and.w	r3, r3, #7
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr
 8003a2c:	e000ed00 	.word	0xe000ed00

08003a30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	4603      	mov	r3, r0
 8003a38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	db0b      	blt.n	8003a5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a42:	79fb      	ldrb	r3, [r7, #7]
 8003a44:	f003 021f 	and.w	r2, r3, #31
 8003a48:	4907      	ldr	r1, [pc, #28]	; (8003a68 <__NVIC_EnableIRQ+0x38>)
 8003a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a4e:	095b      	lsrs	r3, r3, #5
 8003a50:	2001      	movs	r0, #1
 8003a52:	fa00 f202 	lsl.w	r2, r0, r2
 8003a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003a5a:	bf00      	nop
 8003a5c:	370c      	adds	r7, #12
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop
 8003a68:	e000e100 	.word	0xe000e100

08003a6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	4603      	mov	r3, r0
 8003a74:	6039      	str	r1, [r7, #0]
 8003a76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	db0a      	blt.n	8003a96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	b2da      	uxtb	r2, r3
 8003a84:	490c      	ldr	r1, [pc, #48]	; (8003ab8 <__NVIC_SetPriority+0x4c>)
 8003a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a8a:	0112      	lsls	r2, r2, #4
 8003a8c:	b2d2      	uxtb	r2, r2
 8003a8e:	440b      	add	r3, r1
 8003a90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a94:	e00a      	b.n	8003aac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	b2da      	uxtb	r2, r3
 8003a9a:	4908      	ldr	r1, [pc, #32]	; (8003abc <__NVIC_SetPriority+0x50>)
 8003a9c:	79fb      	ldrb	r3, [r7, #7]
 8003a9e:	f003 030f 	and.w	r3, r3, #15
 8003aa2:	3b04      	subs	r3, #4
 8003aa4:	0112      	lsls	r2, r2, #4
 8003aa6:	b2d2      	uxtb	r2, r2
 8003aa8:	440b      	add	r3, r1
 8003aaa:	761a      	strb	r2, [r3, #24]
}
 8003aac:	bf00      	nop
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr
 8003ab8:	e000e100 	.word	0xe000e100
 8003abc:	e000ed00 	.word	0xe000ed00

08003ac0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b089      	sub	sp, #36	; 0x24
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f003 0307 	and.w	r3, r3, #7
 8003ad2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	f1c3 0307 	rsb	r3, r3, #7
 8003ada:	2b04      	cmp	r3, #4
 8003adc:	bf28      	it	cs
 8003ade:	2304      	movcs	r3, #4
 8003ae0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	3304      	adds	r3, #4
 8003ae6:	2b06      	cmp	r3, #6
 8003ae8:	d902      	bls.n	8003af0 <NVIC_EncodePriority+0x30>
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	3b03      	subs	r3, #3
 8003aee:	e000      	b.n	8003af2 <NVIC_EncodePriority+0x32>
 8003af0:	2300      	movs	r3, #0
 8003af2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003af4:	f04f 32ff 	mov.w	r2, #4294967295
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	fa02 f303 	lsl.w	r3, r2, r3
 8003afe:	43da      	mvns	r2, r3
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	401a      	ands	r2, r3
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b08:	f04f 31ff 	mov.w	r1, #4294967295
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b12:	43d9      	mvns	r1, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b18:	4313      	orrs	r3, r2
         );
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3724      	adds	r7, #36	; 0x24
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr
	...

08003b28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	3b01      	subs	r3, #1
 8003b34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b38:	d301      	bcc.n	8003b3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e00f      	b.n	8003b5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b3e:	4a0a      	ldr	r2, [pc, #40]	; (8003b68 <SysTick_Config+0x40>)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	3b01      	subs	r3, #1
 8003b44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b46:	210f      	movs	r1, #15
 8003b48:	f04f 30ff 	mov.w	r0, #4294967295
 8003b4c:	f7ff ff8e 	bl	8003a6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b50:	4b05      	ldr	r3, [pc, #20]	; (8003b68 <SysTick_Config+0x40>)
 8003b52:	2200      	movs	r2, #0
 8003b54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b56:	4b04      	ldr	r3, [pc, #16]	; (8003b68 <SysTick_Config+0x40>)
 8003b58:	2207      	movs	r2, #7
 8003b5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3708      	adds	r7, #8
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	e000e010 	.word	0xe000e010

08003b6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f7ff ff29 	bl	80039cc <__NVIC_SetPriorityGrouping>
}
 8003b7a:	bf00      	nop
 8003b7c:	3708      	adds	r7, #8
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b82:	b580      	push	{r7, lr}
 8003b84:	b086      	sub	sp, #24
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	4603      	mov	r3, r0
 8003b8a:	60b9      	str	r1, [r7, #8]
 8003b8c:	607a      	str	r2, [r7, #4]
 8003b8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b90:	2300      	movs	r3, #0
 8003b92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b94:	f7ff ff3e 	bl	8003a14 <__NVIC_GetPriorityGrouping>
 8003b98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	68b9      	ldr	r1, [r7, #8]
 8003b9e:	6978      	ldr	r0, [r7, #20]
 8003ba0:	f7ff ff8e 	bl	8003ac0 <NVIC_EncodePriority>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003baa:	4611      	mov	r1, r2
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7ff ff5d 	bl	8003a6c <__NVIC_SetPriority>
}
 8003bb2:	bf00      	nop
 8003bb4:	3718      	adds	r7, #24
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}

08003bba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bba:	b580      	push	{r7, lr}
 8003bbc:	b082      	sub	sp, #8
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f7ff ff31 	bl	8003a30 <__NVIC_EnableIRQ>
}
 8003bce:	bf00      	nop
 8003bd0:	3708      	adds	r7, #8
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}

08003bd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003bd6:	b580      	push	{r7, lr}
 8003bd8:	b082      	sub	sp, #8
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f7ff ffa2 	bl	8003b28 <SysTick_Config>
 8003be4:	4603      	mov	r3, r0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3708      	adds	r7, #8
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
	...

08003bf0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b086      	sub	sp, #24
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003bfc:	f7ff f970 	bl	8002ee0 <HAL_GetTick>
 8003c00:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d101      	bne.n	8003c0c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e099      	b.n	8003d40 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2202      	movs	r2, #2
 8003c18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f022 0201 	bic.w	r2, r2, #1
 8003c2a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c2c:	e00f      	b.n	8003c4e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c2e:	f7ff f957 	bl	8002ee0 <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	2b05      	cmp	r3, #5
 8003c3a:	d908      	bls.n	8003c4e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2220      	movs	r2, #32
 8003c40:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2203      	movs	r2, #3
 8003c46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e078      	b.n	8003d40 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0301 	and.w	r3, r3, #1
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d1e8      	bne.n	8003c2e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003c64:	697a      	ldr	r2, [r7, #20]
 8003c66:	4b38      	ldr	r3, [pc, #224]	; (8003d48 <HAL_DMA_Init+0x158>)
 8003c68:	4013      	ands	r3, r2
 8003c6a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685a      	ldr	r2, [r3, #4]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	691b      	ldr	r3, [r3, #16]
 8003c80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c86:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	699b      	ldr	r3, [r3, #24]
 8003c8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c92:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a1b      	ldr	r3, [r3, #32]
 8003c98:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c9a:	697a      	ldr	r2, [r7, #20]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca4:	2b04      	cmp	r3, #4
 8003ca6:	d107      	bne.n	8003cb8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	697a      	ldr	r2, [r7, #20]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	697a      	ldr	r2, [r7, #20]
 8003cbe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	695b      	ldr	r3, [r3, #20]
 8003cc6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	f023 0307 	bic.w	r3, r3, #7
 8003cce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd4:	697a      	ldr	r2, [r7, #20]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cde:	2b04      	cmp	r3, #4
 8003ce0:	d117      	bne.n	8003d12 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce6:	697a      	ldr	r2, [r7, #20]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00e      	beq.n	8003d12 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f000 fa91 	bl	800421c <DMA_CheckFifoParam>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d008      	beq.n	8003d12 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2240      	movs	r2, #64	; 0x40
 8003d04:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2201      	movs	r2, #1
 8003d0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e016      	b.n	8003d40 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	697a      	ldr	r2, [r7, #20]
 8003d18:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 fa48 	bl	80041b0 <DMA_CalcBaseAndBitshift>
 8003d20:	4603      	mov	r3, r0
 8003d22:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d28:	223f      	movs	r2, #63	; 0x3f
 8003d2a:	409a      	lsls	r2, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2201      	movs	r2, #1
 8003d3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003d3e:	2300      	movs	r3, #0
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3718      	adds	r7, #24
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	f010803f 	.word	0xf010803f

08003d4c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b086      	sub	sp, #24
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	607a      	str	r2, [r7, #4]
 8003d58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d62:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d101      	bne.n	8003d72 <HAL_DMA_Start_IT+0x26>
 8003d6e:	2302      	movs	r3, #2
 8003d70:	e040      	b.n	8003df4 <HAL_DMA_Start_IT+0xa8>
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2201      	movs	r2, #1
 8003d76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d12f      	bne.n	8003de6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2202      	movs	r2, #2
 8003d8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2200      	movs	r2, #0
 8003d92:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	68b9      	ldr	r1, [r7, #8]
 8003d9a:	68f8      	ldr	r0, [r7, #12]
 8003d9c:	f000 f9da 	bl	8004154 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003da4:	223f      	movs	r2, #63	; 0x3f
 8003da6:	409a      	lsls	r2, r3
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f042 0216 	orr.w	r2, r2, #22
 8003dba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d007      	beq.n	8003dd4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f042 0208 	orr.w	r2, r2, #8
 8003dd2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f042 0201 	orr.w	r2, r2, #1
 8003de2:	601a      	str	r2, [r3, #0]
 8003de4:	e005      	b.n	8003df2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003dee:	2302      	movs	r3, #2
 8003df0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003df2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3718      	adds	r7, #24
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d004      	beq.n	8003e1a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2280      	movs	r2, #128	; 0x80
 8003e14:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e00c      	b.n	8003e34 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2205      	movs	r2, #5
 8003e1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f022 0201 	bic.w	r2, r2, #1
 8003e30:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003e32:	2300      	movs	r3, #0
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr

08003e40 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b086      	sub	sp, #24
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003e4c:	4b92      	ldr	r3, [pc, #584]	; (8004098 <HAL_DMA_IRQHandler+0x258>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a92      	ldr	r2, [pc, #584]	; (800409c <HAL_DMA_IRQHandler+0x25c>)
 8003e52:	fba2 2303 	umull	r2, r3, r2, r3
 8003e56:	0a9b      	lsrs	r3, r3, #10
 8003e58:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e5e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e6a:	2208      	movs	r2, #8
 8003e6c:	409a      	lsls	r2, r3
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	4013      	ands	r3, r2
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d01a      	beq.n	8003eac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0304 	and.w	r3, r3, #4
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d013      	beq.n	8003eac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f022 0204 	bic.w	r2, r2, #4
 8003e92:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e98:	2208      	movs	r2, #8
 8003e9a:	409a      	lsls	r2, r3
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ea4:	f043 0201 	orr.w	r2, r3, #1
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	409a      	lsls	r2, r3
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d012      	beq.n	8003ee2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	695b      	ldr	r3, [r3, #20]
 8003ec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00b      	beq.n	8003ee2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ece:	2201      	movs	r2, #1
 8003ed0:	409a      	lsls	r2, r3
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eda:	f043 0202 	orr.w	r2, r3, #2
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ee6:	2204      	movs	r2, #4
 8003ee8:	409a      	lsls	r2, r3
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	4013      	ands	r3, r2
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d012      	beq.n	8003f18 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0302 	and.w	r3, r3, #2
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d00b      	beq.n	8003f18 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f04:	2204      	movs	r2, #4
 8003f06:	409a      	lsls	r2, r3
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f10:	f043 0204 	orr.w	r2, r3, #4
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f1c:	2210      	movs	r2, #16
 8003f1e:	409a      	lsls	r2, r3
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	4013      	ands	r3, r2
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d043      	beq.n	8003fb0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0308 	and.w	r3, r3, #8
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d03c      	beq.n	8003fb0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f3a:	2210      	movs	r2, #16
 8003f3c:	409a      	lsls	r2, r3
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d018      	beq.n	8003f82 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d108      	bne.n	8003f70 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d024      	beq.n	8003fb0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	4798      	blx	r3
 8003f6e:	e01f      	b.n	8003fb0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d01b      	beq.n	8003fb0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	4798      	blx	r3
 8003f80:	e016      	b.n	8003fb0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d107      	bne.n	8003fa0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f022 0208 	bic.w	r2, r2, #8
 8003f9e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d003      	beq.n	8003fb0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fb4:	2220      	movs	r2, #32
 8003fb6:	409a      	lsls	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	4013      	ands	r3, r2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	f000 808e 	beq.w	80040de <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0310 	and.w	r3, r3, #16
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	f000 8086 	beq.w	80040de <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fd6:	2220      	movs	r2, #32
 8003fd8:	409a      	lsls	r2, r3
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	2b05      	cmp	r3, #5
 8003fe8:	d136      	bne.n	8004058 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f022 0216 	bic.w	r2, r2, #22
 8003ff8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	695a      	ldr	r2, [r3, #20]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004008:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400e:	2b00      	cmp	r3, #0
 8004010:	d103      	bne.n	800401a <HAL_DMA_IRQHandler+0x1da>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004016:	2b00      	cmp	r3, #0
 8004018:	d007      	beq.n	800402a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f022 0208 	bic.w	r2, r2, #8
 8004028:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800402e:	223f      	movs	r2, #63	; 0x3f
 8004030:	409a      	lsls	r2, r3
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2201      	movs	r2, #1
 8004042:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800404a:	2b00      	cmp	r3, #0
 800404c:	d07d      	beq.n	800414a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	4798      	blx	r3
        }
        return;
 8004056:	e078      	b.n	800414a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d01c      	beq.n	80040a0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d108      	bne.n	8004086 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004078:	2b00      	cmp	r3, #0
 800407a:	d030      	beq.n	80040de <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	4798      	blx	r3
 8004084:	e02b      	b.n	80040de <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800408a:	2b00      	cmp	r3, #0
 800408c:	d027      	beq.n	80040de <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	4798      	blx	r3
 8004096:	e022      	b.n	80040de <HAL_DMA_IRQHandler+0x29e>
 8004098:	20000008 	.word	0x20000008
 800409c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d10f      	bne.n	80040ce <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f022 0210 	bic.w	r2, r2, #16
 80040bc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2201      	movs	r2, #1
 80040ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d003      	beq.n	80040de <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d032      	beq.n	800414c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ea:	f003 0301 	and.w	r3, r3, #1
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d022      	beq.n	8004138 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2205      	movs	r2, #5
 80040f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f022 0201 	bic.w	r2, r2, #1
 8004108:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	3301      	adds	r3, #1
 800410e:	60bb      	str	r3, [r7, #8]
 8004110:	697a      	ldr	r2, [r7, #20]
 8004112:	429a      	cmp	r2, r3
 8004114:	d307      	bcc.n	8004126 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0301 	and.w	r3, r3, #1
 8004120:	2b00      	cmp	r3, #0
 8004122:	d1f2      	bne.n	800410a <HAL_DMA_IRQHandler+0x2ca>
 8004124:	e000      	b.n	8004128 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004126:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800413c:	2b00      	cmp	r3, #0
 800413e:	d005      	beq.n	800414c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	4798      	blx	r3
 8004148:	e000      	b.n	800414c <HAL_DMA_IRQHandler+0x30c>
        return;
 800414a:	bf00      	nop
    }
  }
}
 800414c:	3718      	adds	r7, #24
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop

08004154 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004154:	b480      	push	{r7}
 8004156:	b085      	sub	sp, #20
 8004158:	af00      	add	r7, sp, #0
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	60b9      	str	r1, [r7, #8]
 800415e:	607a      	str	r2, [r7, #4]
 8004160:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004170:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	683a      	ldr	r2, [r7, #0]
 8004178:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	2b40      	cmp	r3, #64	; 0x40
 8004180:	d108      	bne.n	8004194 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68ba      	ldr	r2, [r7, #8]
 8004190:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004192:	e007      	b.n	80041a4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	68ba      	ldr	r2, [r7, #8]
 800419a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	60da      	str	r2, [r3, #12]
}
 80041a4:	bf00      	nop
 80041a6:	3714      	adds	r7, #20
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b085      	sub	sp, #20
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	3b10      	subs	r3, #16
 80041c0:	4a14      	ldr	r2, [pc, #80]	; (8004214 <DMA_CalcBaseAndBitshift+0x64>)
 80041c2:	fba2 2303 	umull	r2, r3, r2, r3
 80041c6:	091b      	lsrs	r3, r3, #4
 80041c8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80041ca:	4a13      	ldr	r2, [pc, #76]	; (8004218 <DMA_CalcBaseAndBitshift+0x68>)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	4413      	add	r3, r2
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	461a      	mov	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2b03      	cmp	r3, #3
 80041dc:	d909      	bls.n	80041f2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80041e6:	f023 0303 	bic.w	r3, r3, #3
 80041ea:	1d1a      	adds	r2, r3, #4
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	659a      	str	r2, [r3, #88]	; 0x58
 80041f0:	e007      	b.n	8004202 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80041fa:	f023 0303 	bic.w	r3, r3, #3
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004206:	4618      	mov	r0, r3
 8004208:	3714      	adds	r7, #20
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr
 8004212:	bf00      	nop
 8004214:	aaaaaaab 	.word	0xaaaaaaab
 8004218:	0800a8e0 	.word	0x0800a8e0

0800421c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800421c:	b480      	push	{r7}
 800421e:	b085      	sub	sp, #20
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004224:	2300      	movs	r3, #0
 8004226:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800422c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	699b      	ldr	r3, [r3, #24]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d11f      	bne.n	8004276 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	2b03      	cmp	r3, #3
 800423a:	d855      	bhi.n	80042e8 <DMA_CheckFifoParam+0xcc>
 800423c:	a201      	add	r2, pc, #4	; (adr r2, 8004244 <DMA_CheckFifoParam+0x28>)
 800423e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004242:	bf00      	nop
 8004244:	08004255 	.word	0x08004255
 8004248:	08004267 	.word	0x08004267
 800424c:	08004255 	.word	0x08004255
 8004250:	080042e9 	.word	0x080042e9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004258:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800425c:	2b00      	cmp	r3, #0
 800425e:	d045      	beq.n	80042ec <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004264:	e042      	b.n	80042ec <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800426a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800426e:	d13f      	bne.n	80042f0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004274:	e03c      	b.n	80042f0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	699b      	ldr	r3, [r3, #24]
 800427a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800427e:	d121      	bne.n	80042c4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	2b03      	cmp	r3, #3
 8004284:	d836      	bhi.n	80042f4 <DMA_CheckFifoParam+0xd8>
 8004286:	a201      	add	r2, pc, #4	; (adr r2, 800428c <DMA_CheckFifoParam+0x70>)
 8004288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800428c:	0800429d 	.word	0x0800429d
 8004290:	080042a3 	.word	0x080042a3
 8004294:	0800429d 	.word	0x0800429d
 8004298:	080042b5 	.word	0x080042b5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	73fb      	strb	r3, [r7, #15]
      break;
 80042a0:	e02f      	b.n	8004302 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d024      	beq.n	80042f8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042b2:	e021      	b.n	80042f8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80042bc:	d11e      	bne.n	80042fc <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80042c2:	e01b      	b.n	80042fc <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d902      	bls.n	80042d0 <DMA_CheckFifoParam+0xb4>
 80042ca:	2b03      	cmp	r3, #3
 80042cc:	d003      	beq.n	80042d6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80042ce:	e018      	b.n	8004302 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	73fb      	strb	r3, [r7, #15]
      break;
 80042d4:	e015      	b.n	8004302 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d00e      	beq.n	8004300 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	73fb      	strb	r3, [r7, #15]
      break;
 80042e6:	e00b      	b.n	8004300 <DMA_CheckFifoParam+0xe4>
      break;
 80042e8:	bf00      	nop
 80042ea:	e00a      	b.n	8004302 <DMA_CheckFifoParam+0xe6>
      break;
 80042ec:	bf00      	nop
 80042ee:	e008      	b.n	8004302 <DMA_CheckFifoParam+0xe6>
      break;
 80042f0:	bf00      	nop
 80042f2:	e006      	b.n	8004302 <DMA_CheckFifoParam+0xe6>
      break;
 80042f4:	bf00      	nop
 80042f6:	e004      	b.n	8004302 <DMA_CheckFifoParam+0xe6>
      break;
 80042f8:	bf00      	nop
 80042fa:	e002      	b.n	8004302 <DMA_CheckFifoParam+0xe6>
      break;   
 80042fc:	bf00      	nop
 80042fe:	e000      	b.n	8004302 <DMA_CheckFifoParam+0xe6>
      break;
 8004300:	bf00      	nop
    }
  } 
  
  return status; 
 8004302:	7bfb      	ldrb	r3, [r7, #15]
}
 8004304:	4618      	mov	r0, r3
 8004306:	3714      	adds	r7, #20
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr

08004310 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004310:	b480      	push	{r7}
 8004312:	b089      	sub	sp, #36	; 0x24
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800431a:	2300      	movs	r3, #0
 800431c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800431e:	2300      	movs	r3, #0
 8004320:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004322:	2300      	movs	r3, #0
 8004324:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004326:	2300      	movs	r3, #0
 8004328:	61fb      	str	r3, [r7, #28]
 800432a:	e16b      	b.n	8004604 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800432c:	2201      	movs	r2, #1
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	fa02 f303 	lsl.w	r3, r2, r3
 8004334:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	697a      	ldr	r2, [r7, #20]
 800433c:	4013      	ands	r3, r2
 800433e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004340:	693a      	ldr	r2, [r7, #16]
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	429a      	cmp	r2, r3
 8004346:	f040 815a 	bne.w	80045fe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	2b01      	cmp	r3, #1
 8004350:	d00b      	beq.n	800436a <HAL_GPIO_Init+0x5a>
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	2b02      	cmp	r3, #2
 8004358:	d007      	beq.n	800436a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800435e:	2b11      	cmp	r3, #17
 8004360:	d003      	beq.n	800436a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	2b12      	cmp	r3, #18
 8004368:	d130      	bne.n	80043cc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	005b      	lsls	r3, r3, #1
 8004374:	2203      	movs	r2, #3
 8004376:	fa02 f303 	lsl.w	r3, r2, r3
 800437a:	43db      	mvns	r3, r3
 800437c:	69ba      	ldr	r2, [r7, #24]
 800437e:	4013      	ands	r3, r2
 8004380:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	68da      	ldr	r2, [r3, #12]
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	005b      	lsls	r3, r3, #1
 800438a:	fa02 f303 	lsl.w	r3, r2, r3
 800438e:	69ba      	ldr	r2, [r7, #24]
 8004390:	4313      	orrs	r3, r2
 8004392:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	69ba      	ldr	r2, [r7, #24]
 8004398:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80043a0:	2201      	movs	r2, #1
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	fa02 f303 	lsl.w	r3, r2, r3
 80043a8:	43db      	mvns	r3, r3
 80043aa:	69ba      	ldr	r2, [r7, #24]
 80043ac:	4013      	ands	r3, r2
 80043ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	091b      	lsrs	r3, r3, #4
 80043b6:	f003 0201 	and.w	r2, r3, #1
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	fa02 f303 	lsl.w	r3, r2, r3
 80043c0:	69ba      	ldr	r2, [r7, #24]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	69ba      	ldr	r2, [r7, #24]
 80043ca:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	005b      	lsls	r3, r3, #1
 80043d6:	2203      	movs	r2, #3
 80043d8:	fa02 f303 	lsl.w	r3, r2, r3
 80043dc:	43db      	mvns	r3, r3
 80043de:	69ba      	ldr	r2, [r7, #24]
 80043e0:	4013      	ands	r3, r2
 80043e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	689a      	ldr	r2, [r3, #8]
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	005b      	lsls	r3, r3, #1
 80043ec:	fa02 f303 	lsl.w	r3, r2, r3
 80043f0:	69ba      	ldr	r2, [r7, #24]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	69ba      	ldr	r2, [r7, #24]
 80043fa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	2b02      	cmp	r3, #2
 8004402:	d003      	beq.n	800440c <HAL_GPIO_Init+0xfc>
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	2b12      	cmp	r3, #18
 800440a:	d123      	bne.n	8004454 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	08da      	lsrs	r2, r3, #3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	3208      	adds	r2, #8
 8004414:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004418:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	f003 0307 	and.w	r3, r3, #7
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	220f      	movs	r2, #15
 8004424:	fa02 f303 	lsl.w	r3, r2, r3
 8004428:	43db      	mvns	r3, r3
 800442a:	69ba      	ldr	r2, [r7, #24]
 800442c:	4013      	ands	r3, r2
 800442e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	691a      	ldr	r2, [r3, #16]
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	f003 0307 	and.w	r3, r3, #7
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	fa02 f303 	lsl.w	r3, r2, r3
 8004440:	69ba      	ldr	r2, [r7, #24]
 8004442:	4313      	orrs	r3, r2
 8004444:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	08da      	lsrs	r2, r3, #3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	3208      	adds	r2, #8
 800444e:	69b9      	ldr	r1, [r7, #24]
 8004450:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	005b      	lsls	r3, r3, #1
 800445e:	2203      	movs	r2, #3
 8004460:	fa02 f303 	lsl.w	r3, r2, r3
 8004464:	43db      	mvns	r3, r3
 8004466:	69ba      	ldr	r2, [r7, #24]
 8004468:	4013      	ands	r3, r2
 800446a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	f003 0203 	and.w	r2, r3, #3
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	005b      	lsls	r3, r3, #1
 8004478:	fa02 f303 	lsl.w	r3, r2, r3
 800447c:	69ba      	ldr	r2, [r7, #24]
 800447e:	4313      	orrs	r3, r2
 8004480:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	69ba      	ldr	r2, [r7, #24]
 8004486:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004490:	2b00      	cmp	r3, #0
 8004492:	f000 80b4 	beq.w	80045fe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004496:	2300      	movs	r3, #0
 8004498:	60fb      	str	r3, [r7, #12]
 800449a:	4b5f      	ldr	r3, [pc, #380]	; (8004618 <HAL_GPIO_Init+0x308>)
 800449c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800449e:	4a5e      	ldr	r2, [pc, #376]	; (8004618 <HAL_GPIO_Init+0x308>)
 80044a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044a4:	6453      	str	r3, [r2, #68]	; 0x44
 80044a6:	4b5c      	ldr	r3, [pc, #368]	; (8004618 <HAL_GPIO_Init+0x308>)
 80044a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044ae:	60fb      	str	r3, [r7, #12]
 80044b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80044b2:	4a5a      	ldr	r2, [pc, #360]	; (800461c <HAL_GPIO_Init+0x30c>)
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	089b      	lsrs	r3, r3, #2
 80044b8:	3302      	adds	r3, #2
 80044ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	f003 0303 	and.w	r3, r3, #3
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	220f      	movs	r2, #15
 80044ca:	fa02 f303 	lsl.w	r3, r2, r3
 80044ce:	43db      	mvns	r3, r3
 80044d0:	69ba      	ldr	r2, [r7, #24]
 80044d2:	4013      	ands	r3, r2
 80044d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a51      	ldr	r2, [pc, #324]	; (8004620 <HAL_GPIO_Init+0x310>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d02b      	beq.n	8004536 <HAL_GPIO_Init+0x226>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a50      	ldr	r2, [pc, #320]	; (8004624 <HAL_GPIO_Init+0x314>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d025      	beq.n	8004532 <HAL_GPIO_Init+0x222>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a4f      	ldr	r2, [pc, #316]	; (8004628 <HAL_GPIO_Init+0x318>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d01f      	beq.n	800452e <HAL_GPIO_Init+0x21e>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a4e      	ldr	r2, [pc, #312]	; (800462c <HAL_GPIO_Init+0x31c>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d019      	beq.n	800452a <HAL_GPIO_Init+0x21a>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a4d      	ldr	r2, [pc, #308]	; (8004630 <HAL_GPIO_Init+0x320>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d013      	beq.n	8004526 <HAL_GPIO_Init+0x216>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a4c      	ldr	r2, [pc, #304]	; (8004634 <HAL_GPIO_Init+0x324>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d00d      	beq.n	8004522 <HAL_GPIO_Init+0x212>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a4b      	ldr	r2, [pc, #300]	; (8004638 <HAL_GPIO_Init+0x328>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d007      	beq.n	800451e <HAL_GPIO_Init+0x20e>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a4a      	ldr	r2, [pc, #296]	; (800463c <HAL_GPIO_Init+0x32c>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d101      	bne.n	800451a <HAL_GPIO_Init+0x20a>
 8004516:	2307      	movs	r3, #7
 8004518:	e00e      	b.n	8004538 <HAL_GPIO_Init+0x228>
 800451a:	2308      	movs	r3, #8
 800451c:	e00c      	b.n	8004538 <HAL_GPIO_Init+0x228>
 800451e:	2306      	movs	r3, #6
 8004520:	e00a      	b.n	8004538 <HAL_GPIO_Init+0x228>
 8004522:	2305      	movs	r3, #5
 8004524:	e008      	b.n	8004538 <HAL_GPIO_Init+0x228>
 8004526:	2304      	movs	r3, #4
 8004528:	e006      	b.n	8004538 <HAL_GPIO_Init+0x228>
 800452a:	2303      	movs	r3, #3
 800452c:	e004      	b.n	8004538 <HAL_GPIO_Init+0x228>
 800452e:	2302      	movs	r3, #2
 8004530:	e002      	b.n	8004538 <HAL_GPIO_Init+0x228>
 8004532:	2301      	movs	r3, #1
 8004534:	e000      	b.n	8004538 <HAL_GPIO_Init+0x228>
 8004536:	2300      	movs	r3, #0
 8004538:	69fa      	ldr	r2, [r7, #28]
 800453a:	f002 0203 	and.w	r2, r2, #3
 800453e:	0092      	lsls	r2, r2, #2
 8004540:	4093      	lsls	r3, r2
 8004542:	69ba      	ldr	r2, [r7, #24]
 8004544:	4313      	orrs	r3, r2
 8004546:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004548:	4934      	ldr	r1, [pc, #208]	; (800461c <HAL_GPIO_Init+0x30c>)
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	089b      	lsrs	r3, r3, #2
 800454e:	3302      	adds	r3, #2
 8004550:	69ba      	ldr	r2, [r7, #24]
 8004552:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004556:	4b3a      	ldr	r3, [pc, #232]	; (8004640 <HAL_GPIO_Init+0x330>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	43db      	mvns	r3, r3
 8004560:	69ba      	ldr	r2, [r7, #24]
 8004562:	4013      	ands	r3, r2
 8004564:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d003      	beq.n	800457a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004572:	69ba      	ldr	r2, [r7, #24]
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	4313      	orrs	r3, r2
 8004578:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800457a:	4a31      	ldr	r2, [pc, #196]	; (8004640 <HAL_GPIO_Init+0x330>)
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004580:	4b2f      	ldr	r3, [pc, #188]	; (8004640 <HAL_GPIO_Init+0x330>)
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	43db      	mvns	r3, r3
 800458a:	69ba      	ldr	r2, [r7, #24]
 800458c:	4013      	ands	r3, r2
 800458e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004598:	2b00      	cmp	r3, #0
 800459a:	d003      	beq.n	80045a4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800459c:	69ba      	ldr	r2, [r7, #24]
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80045a4:	4a26      	ldr	r2, [pc, #152]	; (8004640 <HAL_GPIO_Init+0x330>)
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80045aa:	4b25      	ldr	r3, [pc, #148]	; (8004640 <HAL_GPIO_Init+0x330>)
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	43db      	mvns	r3, r3
 80045b4:	69ba      	ldr	r2, [r7, #24]
 80045b6:	4013      	ands	r3, r2
 80045b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d003      	beq.n	80045ce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80045c6:	69ba      	ldr	r2, [r7, #24]
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80045ce:	4a1c      	ldr	r2, [pc, #112]	; (8004640 <HAL_GPIO_Init+0x330>)
 80045d0:	69bb      	ldr	r3, [r7, #24]
 80045d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80045d4:	4b1a      	ldr	r3, [pc, #104]	; (8004640 <HAL_GPIO_Init+0x330>)
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	43db      	mvns	r3, r3
 80045de:	69ba      	ldr	r2, [r7, #24]
 80045e0:	4013      	ands	r3, r2
 80045e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d003      	beq.n	80045f8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80045f0:	69ba      	ldr	r2, [r7, #24]
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80045f8:	4a11      	ldr	r2, [pc, #68]	; (8004640 <HAL_GPIO_Init+0x330>)
 80045fa:	69bb      	ldr	r3, [r7, #24]
 80045fc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	3301      	adds	r3, #1
 8004602:	61fb      	str	r3, [r7, #28]
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	2b0f      	cmp	r3, #15
 8004608:	f67f ae90 	bls.w	800432c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800460c:	bf00      	nop
 800460e:	3724      	adds	r7, #36	; 0x24
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr
 8004618:	40023800 	.word	0x40023800
 800461c:	40013800 	.word	0x40013800
 8004620:	40020000 	.word	0x40020000
 8004624:	40020400 	.word	0x40020400
 8004628:	40020800 	.word	0x40020800
 800462c:	40020c00 	.word	0x40020c00
 8004630:	40021000 	.word	0x40021000
 8004634:	40021400 	.word	0x40021400
 8004638:	40021800 	.word	0x40021800
 800463c:	40021c00 	.word	0x40021c00
 8004640:	40013c00 	.word	0x40013c00

08004644 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004644:	b480      	push	{r7}
 8004646:	b085      	sub	sp, #20
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	460b      	mov	r3, r1
 800464e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	691a      	ldr	r2, [r3, #16]
 8004654:	887b      	ldrh	r3, [r7, #2]
 8004656:	4013      	ands	r3, r2
 8004658:	2b00      	cmp	r3, #0
 800465a:	d002      	beq.n	8004662 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800465c:	2301      	movs	r3, #1
 800465e:	73fb      	strb	r3, [r7, #15]
 8004660:	e001      	b.n	8004666 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004662:	2300      	movs	r3, #0
 8004664:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004666:	7bfb      	ldrb	r3, [r7, #15]
}
 8004668:	4618      	mov	r0, r3
 800466a:	3714      	adds	r7, #20
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	460b      	mov	r3, r1
 800467e:	807b      	strh	r3, [r7, #2]
 8004680:	4613      	mov	r3, r2
 8004682:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004684:	787b      	ldrb	r3, [r7, #1]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d003      	beq.n	8004692 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800468a:	887a      	ldrh	r2, [r7, #2]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004690:	e003      	b.n	800469a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004692:	887b      	ldrh	r3, [r7, #2]
 8004694:	041a      	lsls	r2, r3, #16
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	619a      	str	r2, [r3, #24]
}
 800469a:	bf00      	nop
 800469c:	370c      	adds	r7, #12
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr

080046a6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80046a6:	b480      	push	{r7}
 80046a8:	b083      	sub	sp, #12
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
 80046ae:	460b      	mov	r3, r1
 80046b0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	695a      	ldr	r2, [r3, #20]
 80046b6:	887b      	ldrh	r3, [r7, #2]
 80046b8:	401a      	ands	r2, r3
 80046ba:	887b      	ldrh	r3, [r7, #2]
 80046bc:	429a      	cmp	r2, r3
 80046be:	d104      	bne.n	80046ca <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80046c0:	887b      	ldrh	r3, [r7, #2]
 80046c2:	041a      	lsls	r2, r3, #16
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80046c8:	e002      	b.n	80046d0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80046ca:	887a      	ldrh	r2, [r7, #2]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	619a      	str	r2, [r3, #24]
}
 80046d0:	bf00      	nop
 80046d2:	370c      	adds	r7, #12
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr

080046dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b086      	sub	sp, #24
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d101      	bne.n	80046ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e25b      	b.n	8004ba6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 0301 	and.w	r3, r3, #1
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d075      	beq.n	80047e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046fa:	4ba3      	ldr	r3, [pc, #652]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	f003 030c 	and.w	r3, r3, #12
 8004702:	2b04      	cmp	r3, #4
 8004704:	d00c      	beq.n	8004720 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004706:	4ba0      	ldr	r3, [pc, #640]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800470e:	2b08      	cmp	r3, #8
 8004710:	d112      	bne.n	8004738 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004712:	4b9d      	ldr	r3, [pc, #628]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800471a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800471e:	d10b      	bne.n	8004738 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004720:	4b99      	ldr	r3, [pc, #612]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d05b      	beq.n	80047e4 <HAL_RCC_OscConfig+0x108>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d157      	bne.n	80047e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e236      	b.n	8004ba6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004740:	d106      	bne.n	8004750 <HAL_RCC_OscConfig+0x74>
 8004742:	4b91      	ldr	r3, [pc, #580]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a90      	ldr	r2, [pc, #576]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 8004748:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800474c:	6013      	str	r3, [r2, #0]
 800474e:	e01d      	b.n	800478c <HAL_RCC_OscConfig+0xb0>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004758:	d10c      	bne.n	8004774 <HAL_RCC_OscConfig+0x98>
 800475a:	4b8b      	ldr	r3, [pc, #556]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a8a      	ldr	r2, [pc, #552]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 8004760:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004764:	6013      	str	r3, [r2, #0]
 8004766:	4b88      	ldr	r3, [pc, #544]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a87      	ldr	r2, [pc, #540]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 800476c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004770:	6013      	str	r3, [r2, #0]
 8004772:	e00b      	b.n	800478c <HAL_RCC_OscConfig+0xb0>
 8004774:	4b84      	ldr	r3, [pc, #528]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a83      	ldr	r2, [pc, #524]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 800477a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800477e:	6013      	str	r3, [r2, #0]
 8004780:	4b81      	ldr	r3, [pc, #516]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a80      	ldr	r2, [pc, #512]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 8004786:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800478a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d013      	beq.n	80047bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004794:	f7fe fba4 	bl	8002ee0 <HAL_GetTick>
 8004798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800479a:	e008      	b.n	80047ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800479c:	f7fe fba0 	bl	8002ee0 <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	2b64      	cmp	r3, #100	; 0x64
 80047a8:	d901      	bls.n	80047ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e1fb      	b.n	8004ba6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047ae:	4b76      	ldr	r3, [pc, #472]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d0f0      	beq.n	800479c <HAL_RCC_OscConfig+0xc0>
 80047ba:	e014      	b.n	80047e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047bc:	f7fe fb90 	bl	8002ee0 <HAL_GetTick>
 80047c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047c2:	e008      	b.n	80047d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047c4:	f7fe fb8c 	bl	8002ee0 <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	2b64      	cmp	r3, #100	; 0x64
 80047d0:	d901      	bls.n	80047d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e1e7      	b.n	8004ba6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047d6:	4b6c      	ldr	r3, [pc, #432]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d1f0      	bne.n	80047c4 <HAL_RCC_OscConfig+0xe8>
 80047e2:	e000      	b.n	80047e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0302 	and.w	r3, r3, #2
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d063      	beq.n	80048ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047f2:	4b65      	ldr	r3, [pc, #404]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	f003 030c 	and.w	r3, r3, #12
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d00b      	beq.n	8004816 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047fe:	4b62      	ldr	r3, [pc, #392]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004806:	2b08      	cmp	r3, #8
 8004808:	d11c      	bne.n	8004844 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800480a:	4b5f      	ldr	r3, [pc, #380]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d116      	bne.n	8004844 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004816:	4b5c      	ldr	r3, [pc, #368]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0302 	and.w	r3, r3, #2
 800481e:	2b00      	cmp	r3, #0
 8004820:	d005      	beq.n	800482e <HAL_RCC_OscConfig+0x152>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	2b01      	cmp	r3, #1
 8004828:	d001      	beq.n	800482e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e1bb      	b.n	8004ba6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800482e:	4b56      	ldr	r3, [pc, #344]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	00db      	lsls	r3, r3, #3
 800483c:	4952      	ldr	r1, [pc, #328]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 800483e:	4313      	orrs	r3, r2
 8004840:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004842:	e03a      	b.n	80048ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d020      	beq.n	800488e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800484c:	4b4f      	ldr	r3, [pc, #316]	; (800498c <HAL_RCC_OscConfig+0x2b0>)
 800484e:	2201      	movs	r2, #1
 8004850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004852:	f7fe fb45 	bl	8002ee0 <HAL_GetTick>
 8004856:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004858:	e008      	b.n	800486c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800485a:	f7fe fb41 	bl	8002ee0 <HAL_GetTick>
 800485e:	4602      	mov	r2, r0
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	2b02      	cmp	r3, #2
 8004866:	d901      	bls.n	800486c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004868:	2303      	movs	r3, #3
 800486a:	e19c      	b.n	8004ba6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800486c:	4b46      	ldr	r3, [pc, #280]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0302 	and.w	r3, r3, #2
 8004874:	2b00      	cmp	r3, #0
 8004876:	d0f0      	beq.n	800485a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004878:	4b43      	ldr	r3, [pc, #268]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	00db      	lsls	r3, r3, #3
 8004886:	4940      	ldr	r1, [pc, #256]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 8004888:	4313      	orrs	r3, r2
 800488a:	600b      	str	r3, [r1, #0]
 800488c:	e015      	b.n	80048ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800488e:	4b3f      	ldr	r3, [pc, #252]	; (800498c <HAL_RCC_OscConfig+0x2b0>)
 8004890:	2200      	movs	r2, #0
 8004892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004894:	f7fe fb24 	bl	8002ee0 <HAL_GetTick>
 8004898:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800489a:	e008      	b.n	80048ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800489c:	f7fe fb20 	bl	8002ee0 <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d901      	bls.n	80048ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e17b      	b.n	8004ba6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048ae:	4b36      	ldr	r3, [pc, #216]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0302 	and.w	r3, r3, #2
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d1f0      	bne.n	800489c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0308 	and.w	r3, r3, #8
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d030      	beq.n	8004928 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	695b      	ldr	r3, [r3, #20]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d016      	beq.n	80048fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048ce:	4b30      	ldr	r3, [pc, #192]	; (8004990 <HAL_RCC_OscConfig+0x2b4>)
 80048d0:	2201      	movs	r2, #1
 80048d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048d4:	f7fe fb04 	bl	8002ee0 <HAL_GetTick>
 80048d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048da:	e008      	b.n	80048ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048dc:	f7fe fb00 	bl	8002ee0 <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d901      	bls.n	80048ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e15b      	b.n	8004ba6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048ee:	4b26      	ldr	r3, [pc, #152]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 80048f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048f2:	f003 0302 	and.w	r3, r3, #2
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d0f0      	beq.n	80048dc <HAL_RCC_OscConfig+0x200>
 80048fa:	e015      	b.n	8004928 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048fc:	4b24      	ldr	r3, [pc, #144]	; (8004990 <HAL_RCC_OscConfig+0x2b4>)
 80048fe:	2200      	movs	r2, #0
 8004900:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004902:	f7fe faed 	bl	8002ee0 <HAL_GetTick>
 8004906:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004908:	e008      	b.n	800491c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800490a:	f7fe fae9 	bl	8002ee0 <HAL_GetTick>
 800490e:	4602      	mov	r2, r0
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	1ad3      	subs	r3, r2, r3
 8004914:	2b02      	cmp	r3, #2
 8004916:	d901      	bls.n	800491c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004918:	2303      	movs	r3, #3
 800491a:	e144      	b.n	8004ba6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800491c:	4b1a      	ldr	r3, [pc, #104]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 800491e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004920:	f003 0302 	and.w	r3, r3, #2
 8004924:	2b00      	cmp	r3, #0
 8004926:	d1f0      	bne.n	800490a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0304 	and.w	r3, r3, #4
 8004930:	2b00      	cmp	r3, #0
 8004932:	f000 80a0 	beq.w	8004a76 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004936:	2300      	movs	r3, #0
 8004938:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800493a:	4b13      	ldr	r3, [pc, #76]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 800493c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004942:	2b00      	cmp	r3, #0
 8004944:	d10f      	bne.n	8004966 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004946:	2300      	movs	r3, #0
 8004948:	60bb      	str	r3, [r7, #8]
 800494a:	4b0f      	ldr	r3, [pc, #60]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 800494c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494e:	4a0e      	ldr	r2, [pc, #56]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 8004950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004954:	6413      	str	r3, [r2, #64]	; 0x40
 8004956:	4b0c      	ldr	r3, [pc, #48]	; (8004988 <HAL_RCC_OscConfig+0x2ac>)
 8004958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800495e:	60bb      	str	r3, [r7, #8]
 8004960:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004962:	2301      	movs	r3, #1
 8004964:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004966:	4b0b      	ldr	r3, [pc, #44]	; (8004994 <HAL_RCC_OscConfig+0x2b8>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800496e:	2b00      	cmp	r3, #0
 8004970:	d121      	bne.n	80049b6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004972:	4b08      	ldr	r3, [pc, #32]	; (8004994 <HAL_RCC_OscConfig+0x2b8>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a07      	ldr	r2, [pc, #28]	; (8004994 <HAL_RCC_OscConfig+0x2b8>)
 8004978:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800497c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800497e:	f7fe faaf 	bl	8002ee0 <HAL_GetTick>
 8004982:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004984:	e011      	b.n	80049aa <HAL_RCC_OscConfig+0x2ce>
 8004986:	bf00      	nop
 8004988:	40023800 	.word	0x40023800
 800498c:	42470000 	.word	0x42470000
 8004990:	42470e80 	.word	0x42470e80
 8004994:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004998:	f7fe faa2 	bl	8002ee0 <HAL_GetTick>
 800499c:	4602      	mov	r2, r0
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d901      	bls.n	80049aa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80049a6:	2303      	movs	r3, #3
 80049a8:	e0fd      	b.n	8004ba6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049aa:	4b81      	ldr	r3, [pc, #516]	; (8004bb0 <HAL_RCC_OscConfig+0x4d4>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d0f0      	beq.n	8004998 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d106      	bne.n	80049cc <HAL_RCC_OscConfig+0x2f0>
 80049be:	4b7d      	ldr	r3, [pc, #500]	; (8004bb4 <HAL_RCC_OscConfig+0x4d8>)
 80049c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049c2:	4a7c      	ldr	r2, [pc, #496]	; (8004bb4 <HAL_RCC_OscConfig+0x4d8>)
 80049c4:	f043 0301 	orr.w	r3, r3, #1
 80049c8:	6713      	str	r3, [r2, #112]	; 0x70
 80049ca:	e01c      	b.n	8004a06 <HAL_RCC_OscConfig+0x32a>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	2b05      	cmp	r3, #5
 80049d2:	d10c      	bne.n	80049ee <HAL_RCC_OscConfig+0x312>
 80049d4:	4b77      	ldr	r3, [pc, #476]	; (8004bb4 <HAL_RCC_OscConfig+0x4d8>)
 80049d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049d8:	4a76      	ldr	r2, [pc, #472]	; (8004bb4 <HAL_RCC_OscConfig+0x4d8>)
 80049da:	f043 0304 	orr.w	r3, r3, #4
 80049de:	6713      	str	r3, [r2, #112]	; 0x70
 80049e0:	4b74      	ldr	r3, [pc, #464]	; (8004bb4 <HAL_RCC_OscConfig+0x4d8>)
 80049e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049e4:	4a73      	ldr	r2, [pc, #460]	; (8004bb4 <HAL_RCC_OscConfig+0x4d8>)
 80049e6:	f043 0301 	orr.w	r3, r3, #1
 80049ea:	6713      	str	r3, [r2, #112]	; 0x70
 80049ec:	e00b      	b.n	8004a06 <HAL_RCC_OscConfig+0x32a>
 80049ee:	4b71      	ldr	r3, [pc, #452]	; (8004bb4 <HAL_RCC_OscConfig+0x4d8>)
 80049f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049f2:	4a70      	ldr	r2, [pc, #448]	; (8004bb4 <HAL_RCC_OscConfig+0x4d8>)
 80049f4:	f023 0301 	bic.w	r3, r3, #1
 80049f8:	6713      	str	r3, [r2, #112]	; 0x70
 80049fa:	4b6e      	ldr	r3, [pc, #440]	; (8004bb4 <HAL_RCC_OscConfig+0x4d8>)
 80049fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049fe:	4a6d      	ldr	r2, [pc, #436]	; (8004bb4 <HAL_RCC_OscConfig+0x4d8>)
 8004a00:	f023 0304 	bic.w	r3, r3, #4
 8004a04:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d015      	beq.n	8004a3a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a0e:	f7fe fa67 	bl	8002ee0 <HAL_GetTick>
 8004a12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a14:	e00a      	b.n	8004a2c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a16:	f7fe fa63 	bl	8002ee0 <HAL_GetTick>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d901      	bls.n	8004a2c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004a28:	2303      	movs	r3, #3
 8004a2a:	e0bc      	b.n	8004ba6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a2c:	4b61      	ldr	r3, [pc, #388]	; (8004bb4 <HAL_RCC_OscConfig+0x4d8>)
 8004a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a30:	f003 0302 	and.w	r3, r3, #2
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d0ee      	beq.n	8004a16 <HAL_RCC_OscConfig+0x33a>
 8004a38:	e014      	b.n	8004a64 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a3a:	f7fe fa51 	bl	8002ee0 <HAL_GetTick>
 8004a3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a40:	e00a      	b.n	8004a58 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a42:	f7fe fa4d 	bl	8002ee0 <HAL_GetTick>
 8004a46:	4602      	mov	r2, r0
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	1ad3      	subs	r3, r2, r3
 8004a4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d901      	bls.n	8004a58 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004a54:	2303      	movs	r3, #3
 8004a56:	e0a6      	b.n	8004ba6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a58:	4b56      	ldr	r3, [pc, #344]	; (8004bb4 <HAL_RCC_OscConfig+0x4d8>)
 8004a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a5c:	f003 0302 	and.w	r3, r3, #2
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d1ee      	bne.n	8004a42 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a64:	7dfb      	ldrb	r3, [r7, #23]
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d105      	bne.n	8004a76 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a6a:	4b52      	ldr	r3, [pc, #328]	; (8004bb4 <HAL_RCC_OscConfig+0x4d8>)
 8004a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6e:	4a51      	ldr	r2, [pc, #324]	; (8004bb4 <HAL_RCC_OscConfig+0x4d8>)
 8004a70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a74:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	699b      	ldr	r3, [r3, #24]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	f000 8092 	beq.w	8004ba4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a80:	4b4c      	ldr	r3, [pc, #304]	; (8004bb4 <HAL_RCC_OscConfig+0x4d8>)
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	f003 030c 	and.w	r3, r3, #12
 8004a88:	2b08      	cmp	r3, #8
 8004a8a:	d05c      	beq.n	8004b46 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	699b      	ldr	r3, [r3, #24]
 8004a90:	2b02      	cmp	r3, #2
 8004a92:	d141      	bne.n	8004b18 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a94:	4b48      	ldr	r3, [pc, #288]	; (8004bb8 <HAL_RCC_OscConfig+0x4dc>)
 8004a96:	2200      	movs	r2, #0
 8004a98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a9a:	f7fe fa21 	bl	8002ee0 <HAL_GetTick>
 8004a9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aa0:	e008      	b.n	8004ab4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004aa2:	f7fe fa1d 	bl	8002ee0 <HAL_GetTick>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	d901      	bls.n	8004ab4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	e078      	b.n	8004ba6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ab4:	4b3f      	ldr	r3, [pc, #252]	; (8004bb4 <HAL_RCC_OscConfig+0x4d8>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d1f0      	bne.n	8004aa2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	69da      	ldr	r2, [r3, #28]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6a1b      	ldr	r3, [r3, #32]
 8004ac8:	431a      	orrs	r2, r3
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ace:	019b      	lsls	r3, r3, #6
 8004ad0:	431a      	orrs	r2, r3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad6:	085b      	lsrs	r3, r3, #1
 8004ad8:	3b01      	subs	r3, #1
 8004ada:	041b      	lsls	r3, r3, #16
 8004adc:	431a      	orrs	r2, r3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae2:	061b      	lsls	r3, r3, #24
 8004ae4:	4933      	ldr	r1, [pc, #204]	; (8004bb4 <HAL_RCC_OscConfig+0x4d8>)
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004aea:	4b33      	ldr	r3, [pc, #204]	; (8004bb8 <HAL_RCC_OscConfig+0x4dc>)
 8004aec:	2201      	movs	r2, #1
 8004aee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004af0:	f7fe f9f6 	bl	8002ee0 <HAL_GetTick>
 8004af4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004af6:	e008      	b.n	8004b0a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004af8:	f7fe f9f2 	bl	8002ee0 <HAL_GetTick>
 8004afc:	4602      	mov	r2, r0
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	2b02      	cmp	r3, #2
 8004b04:	d901      	bls.n	8004b0a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	e04d      	b.n	8004ba6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b0a:	4b2a      	ldr	r3, [pc, #168]	; (8004bb4 <HAL_RCC_OscConfig+0x4d8>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d0f0      	beq.n	8004af8 <HAL_RCC_OscConfig+0x41c>
 8004b16:	e045      	b.n	8004ba4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b18:	4b27      	ldr	r3, [pc, #156]	; (8004bb8 <HAL_RCC_OscConfig+0x4dc>)
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b1e:	f7fe f9df 	bl	8002ee0 <HAL_GetTick>
 8004b22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b24:	e008      	b.n	8004b38 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b26:	f7fe f9db 	bl	8002ee0 <HAL_GetTick>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	2b02      	cmp	r3, #2
 8004b32:	d901      	bls.n	8004b38 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004b34:	2303      	movs	r3, #3
 8004b36:	e036      	b.n	8004ba6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b38:	4b1e      	ldr	r3, [pc, #120]	; (8004bb4 <HAL_RCC_OscConfig+0x4d8>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d1f0      	bne.n	8004b26 <HAL_RCC_OscConfig+0x44a>
 8004b44:	e02e      	b.n	8004ba4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	699b      	ldr	r3, [r3, #24]
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d101      	bne.n	8004b52 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e029      	b.n	8004ba6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b52:	4b18      	ldr	r3, [pc, #96]	; (8004bb4 <HAL_RCC_OscConfig+0x4d8>)
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	69db      	ldr	r3, [r3, #28]
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d11c      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d115      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004b74:	68fa      	ldr	r2, [r7, #12]
 8004b76:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d10d      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d106      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d001      	beq.n	8004ba4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e000      	b.n	8004ba6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3718      	adds	r7, #24
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	bf00      	nop
 8004bb0:	40007000 	.word	0x40007000
 8004bb4:	40023800 	.word	0x40023800
 8004bb8:	42470060 	.word	0x42470060

08004bbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d101      	bne.n	8004bd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e0cc      	b.n	8004d6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004bd0:	4b68      	ldr	r3, [pc, #416]	; (8004d74 <HAL_RCC_ClockConfig+0x1b8>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 030f 	and.w	r3, r3, #15
 8004bd8:	683a      	ldr	r2, [r7, #0]
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d90c      	bls.n	8004bf8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bde:	4b65      	ldr	r3, [pc, #404]	; (8004d74 <HAL_RCC_ClockConfig+0x1b8>)
 8004be0:	683a      	ldr	r2, [r7, #0]
 8004be2:	b2d2      	uxtb	r2, r2
 8004be4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004be6:	4b63      	ldr	r3, [pc, #396]	; (8004d74 <HAL_RCC_ClockConfig+0x1b8>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 030f 	and.w	r3, r3, #15
 8004bee:	683a      	ldr	r2, [r7, #0]
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d001      	beq.n	8004bf8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e0b8      	b.n	8004d6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0302 	and.w	r3, r3, #2
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d020      	beq.n	8004c46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 0304 	and.w	r3, r3, #4
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d005      	beq.n	8004c1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c10:	4b59      	ldr	r3, [pc, #356]	; (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	4a58      	ldr	r2, [pc, #352]	; (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004c16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004c1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0308 	and.w	r3, r3, #8
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d005      	beq.n	8004c34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c28:	4b53      	ldr	r3, [pc, #332]	; (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	4a52      	ldr	r2, [pc, #328]	; (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004c2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c34:	4b50      	ldr	r3, [pc, #320]	; (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	494d      	ldr	r1, [pc, #308]	; (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004c42:	4313      	orrs	r3, r2
 8004c44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0301 	and.w	r3, r3, #1
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d044      	beq.n	8004cdc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d107      	bne.n	8004c6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c5a:	4b47      	ldr	r3, [pc, #284]	; (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d119      	bne.n	8004c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e07f      	b.n	8004d6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d003      	beq.n	8004c7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c76:	2b03      	cmp	r3, #3
 8004c78:	d107      	bne.n	8004c8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c7a:	4b3f      	ldr	r3, [pc, #252]	; (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d109      	bne.n	8004c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e06f      	b.n	8004d6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c8a:	4b3b      	ldr	r3, [pc, #236]	; (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0302 	and.w	r3, r3, #2
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d101      	bne.n	8004c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e067      	b.n	8004d6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c9a:	4b37      	ldr	r3, [pc, #220]	; (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	f023 0203 	bic.w	r2, r3, #3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	4934      	ldr	r1, [pc, #208]	; (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004cac:	f7fe f918 	bl	8002ee0 <HAL_GetTick>
 8004cb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cb2:	e00a      	b.n	8004cca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cb4:	f7fe f914 	bl	8002ee0 <HAL_GetTick>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d901      	bls.n	8004cca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	e04f      	b.n	8004d6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cca:	4b2b      	ldr	r3, [pc, #172]	; (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	f003 020c 	and.w	r2, r3, #12
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d1eb      	bne.n	8004cb4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004cdc:	4b25      	ldr	r3, [pc, #148]	; (8004d74 <HAL_RCC_ClockConfig+0x1b8>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 030f 	and.w	r3, r3, #15
 8004ce4:	683a      	ldr	r2, [r7, #0]
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d20c      	bcs.n	8004d04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cea:	4b22      	ldr	r3, [pc, #136]	; (8004d74 <HAL_RCC_ClockConfig+0x1b8>)
 8004cec:	683a      	ldr	r2, [r7, #0]
 8004cee:	b2d2      	uxtb	r2, r2
 8004cf0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cf2:	4b20      	ldr	r3, [pc, #128]	; (8004d74 <HAL_RCC_ClockConfig+0x1b8>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 030f 	and.w	r3, r3, #15
 8004cfa:	683a      	ldr	r2, [r7, #0]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d001      	beq.n	8004d04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e032      	b.n	8004d6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0304 	and.w	r3, r3, #4
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d008      	beq.n	8004d22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d10:	4b19      	ldr	r3, [pc, #100]	; (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	4916      	ldr	r1, [pc, #88]	; (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0308 	and.w	r3, r3, #8
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d009      	beq.n	8004d42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d2e:	4b12      	ldr	r3, [pc, #72]	; (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	691b      	ldr	r3, [r3, #16]
 8004d3a:	00db      	lsls	r3, r3, #3
 8004d3c:	490e      	ldr	r1, [pc, #56]	; (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d42:	f000 f821 	bl	8004d88 <HAL_RCC_GetSysClockFreq>
 8004d46:	4601      	mov	r1, r0
 8004d48:	4b0b      	ldr	r3, [pc, #44]	; (8004d78 <HAL_RCC_ClockConfig+0x1bc>)
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	091b      	lsrs	r3, r3, #4
 8004d4e:	f003 030f 	and.w	r3, r3, #15
 8004d52:	4a0a      	ldr	r2, [pc, #40]	; (8004d7c <HAL_RCC_ClockConfig+0x1c0>)
 8004d54:	5cd3      	ldrb	r3, [r2, r3]
 8004d56:	fa21 f303 	lsr.w	r3, r1, r3
 8004d5a:	4a09      	ldr	r2, [pc, #36]	; (8004d80 <HAL_RCC_ClockConfig+0x1c4>)
 8004d5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004d5e:	4b09      	ldr	r3, [pc, #36]	; (8004d84 <HAL_RCC_ClockConfig+0x1c8>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4618      	mov	r0, r3
 8004d64:	f7fe f878 	bl	8002e58 <HAL_InitTick>

  return HAL_OK;
 8004d68:	2300      	movs	r3, #0
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3710      	adds	r7, #16
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	40023c00 	.word	0x40023c00
 8004d78:	40023800 	.word	0x40023800
 8004d7c:	0800a8c8 	.word	0x0800a8c8
 8004d80:	20000008 	.word	0x20000008
 8004d84:	2000000c 	.word	0x2000000c

08004d88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d8a:	b085      	sub	sp, #20
 8004d8c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	607b      	str	r3, [r7, #4]
 8004d92:	2300      	movs	r3, #0
 8004d94:	60fb      	str	r3, [r7, #12]
 8004d96:	2300      	movs	r3, #0
 8004d98:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d9e:	4b50      	ldr	r3, [pc, #320]	; (8004ee0 <HAL_RCC_GetSysClockFreq+0x158>)
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	f003 030c 	and.w	r3, r3, #12
 8004da6:	2b04      	cmp	r3, #4
 8004da8:	d007      	beq.n	8004dba <HAL_RCC_GetSysClockFreq+0x32>
 8004daa:	2b08      	cmp	r3, #8
 8004dac:	d008      	beq.n	8004dc0 <HAL_RCC_GetSysClockFreq+0x38>
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	f040 808d 	bne.w	8004ece <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004db4:	4b4b      	ldr	r3, [pc, #300]	; (8004ee4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004db6:	60bb      	str	r3, [r7, #8]
       break;
 8004db8:	e08c      	b.n	8004ed4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004dba:	4b4b      	ldr	r3, [pc, #300]	; (8004ee8 <HAL_RCC_GetSysClockFreq+0x160>)
 8004dbc:	60bb      	str	r3, [r7, #8]
      break;
 8004dbe:	e089      	b.n	8004ed4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004dc0:	4b47      	ldr	r3, [pc, #284]	; (8004ee0 <HAL_RCC_GetSysClockFreq+0x158>)
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004dc8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004dca:	4b45      	ldr	r3, [pc, #276]	; (8004ee0 <HAL_RCC_GetSysClockFreq+0x158>)
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d023      	beq.n	8004e1e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dd6:	4b42      	ldr	r3, [pc, #264]	; (8004ee0 <HAL_RCC_GetSysClockFreq+0x158>)
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	099b      	lsrs	r3, r3, #6
 8004ddc:	f04f 0400 	mov.w	r4, #0
 8004de0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004de4:	f04f 0200 	mov.w	r2, #0
 8004de8:	ea03 0501 	and.w	r5, r3, r1
 8004dec:	ea04 0602 	and.w	r6, r4, r2
 8004df0:	4a3d      	ldr	r2, [pc, #244]	; (8004ee8 <HAL_RCC_GetSysClockFreq+0x160>)
 8004df2:	fb02 f106 	mul.w	r1, r2, r6
 8004df6:	2200      	movs	r2, #0
 8004df8:	fb02 f205 	mul.w	r2, r2, r5
 8004dfc:	440a      	add	r2, r1
 8004dfe:	493a      	ldr	r1, [pc, #232]	; (8004ee8 <HAL_RCC_GetSysClockFreq+0x160>)
 8004e00:	fba5 0101 	umull	r0, r1, r5, r1
 8004e04:	1853      	adds	r3, r2, r1
 8004e06:	4619      	mov	r1, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f04f 0400 	mov.w	r4, #0
 8004e0e:	461a      	mov	r2, r3
 8004e10:	4623      	mov	r3, r4
 8004e12:	f7fb ff19 	bl	8000c48 <__aeabi_uldivmod>
 8004e16:	4603      	mov	r3, r0
 8004e18:	460c      	mov	r4, r1
 8004e1a:	60fb      	str	r3, [r7, #12]
 8004e1c:	e049      	b.n	8004eb2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e1e:	4b30      	ldr	r3, [pc, #192]	; (8004ee0 <HAL_RCC_GetSysClockFreq+0x158>)
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	099b      	lsrs	r3, r3, #6
 8004e24:	f04f 0400 	mov.w	r4, #0
 8004e28:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004e2c:	f04f 0200 	mov.w	r2, #0
 8004e30:	ea03 0501 	and.w	r5, r3, r1
 8004e34:	ea04 0602 	and.w	r6, r4, r2
 8004e38:	4629      	mov	r1, r5
 8004e3a:	4632      	mov	r2, r6
 8004e3c:	f04f 0300 	mov.w	r3, #0
 8004e40:	f04f 0400 	mov.w	r4, #0
 8004e44:	0154      	lsls	r4, r2, #5
 8004e46:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004e4a:	014b      	lsls	r3, r1, #5
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	4622      	mov	r2, r4
 8004e50:	1b49      	subs	r1, r1, r5
 8004e52:	eb62 0206 	sbc.w	r2, r2, r6
 8004e56:	f04f 0300 	mov.w	r3, #0
 8004e5a:	f04f 0400 	mov.w	r4, #0
 8004e5e:	0194      	lsls	r4, r2, #6
 8004e60:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004e64:	018b      	lsls	r3, r1, #6
 8004e66:	1a5b      	subs	r3, r3, r1
 8004e68:	eb64 0402 	sbc.w	r4, r4, r2
 8004e6c:	f04f 0100 	mov.w	r1, #0
 8004e70:	f04f 0200 	mov.w	r2, #0
 8004e74:	00e2      	lsls	r2, r4, #3
 8004e76:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004e7a:	00d9      	lsls	r1, r3, #3
 8004e7c:	460b      	mov	r3, r1
 8004e7e:	4614      	mov	r4, r2
 8004e80:	195b      	adds	r3, r3, r5
 8004e82:	eb44 0406 	adc.w	r4, r4, r6
 8004e86:	f04f 0100 	mov.w	r1, #0
 8004e8a:	f04f 0200 	mov.w	r2, #0
 8004e8e:	02a2      	lsls	r2, r4, #10
 8004e90:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004e94:	0299      	lsls	r1, r3, #10
 8004e96:	460b      	mov	r3, r1
 8004e98:	4614      	mov	r4, r2
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	4621      	mov	r1, r4
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f04f 0400 	mov.w	r4, #0
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	4623      	mov	r3, r4
 8004ea8:	f7fb fece 	bl	8000c48 <__aeabi_uldivmod>
 8004eac:	4603      	mov	r3, r0
 8004eae:	460c      	mov	r4, r1
 8004eb0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004eb2:	4b0b      	ldr	r3, [pc, #44]	; (8004ee0 <HAL_RCC_GetSysClockFreq+0x158>)
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	0c1b      	lsrs	r3, r3, #16
 8004eb8:	f003 0303 	and.w	r3, r3, #3
 8004ebc:	3301      	adds	r3, #1
 8004ebe:	005b      	lsls	r3, r3, #1
 8004ec0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004ec2:	68fa      	ldr	r2, [r7, #12]
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eca:	60bb      	str	r3, [r7, #8]
      break;
 8004ecc:	e002      	b.n	8004ed4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ece:	4b05      	ldr	r3, [pc, #20]	; (8004ee4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004ed0:	60bb      	str	r3, [r7, #8]
      break;
 8004ed2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ed4:	68bb      	ldr	r3, [r7, #8]
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3714      	adds	r7, #20
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	40023800 	.word	0x40023800
 8004ee4:	00f42400 	.word	0x00f42400
 8004ee8:	017d7840 	.word	0x017d7840

08004eec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004eec:	b480      	push	{r7}
 8004eee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ef0:	4b03      	ldr	r3, [pc, #12]	; (8004f00 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr
 8004efe:	bf00      	nop
 8004f00:	20000008 	.word	0x20000008

08004f04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004f08:	f7ff fff0 	bl	8004eec <HAL_RCC_GetHCLKFreq>
 8004f0c:	4601      	mov	r1, r0
 8004f0e:	4b05      	ldr	r3, [pc, #20]	; (8004f24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	0a9b      	lsrs	r3, r3, #10
 8004f14:	f003 0307 	and.w	r3, r3, #7
 8004f18:	4a03      	ldr	r2, [pc, #12]	; (8004f28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f1a:	5cd3      	ldrb	r3, [r2, r3]
 8004f1c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	bd80      	pop	{r7, pc}
 8004f24:	40023800 	.word	0x40023800
 8004f28:	0800a8d8 	.word	0x0800a8d8

08004f2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004f30:	f7ff ffdc 	bl	8004eec <HAL_RCC_GetHCLKFreq>
 8004f34:	4601      	mov	r1, r0
 8004f36:	4b05      	ldr	r3, [pc, #20]	; (8004f4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	0b5b      	lsrs	r3, r3, #13
 8004f3c:	f003 0307 	and.w	r3, r3, #7
 8004f40:	4a03      	ldr	r2, [pc, #12]	; (8004f50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f42:	5cd3      	ldrb	r3, [r2, r3]
 8004f44:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	40023800 	.word	0x40023800
 8004f50:	0800a8d8 	.word	0x0800a8d8

08004f54 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b082      	sub	sp, #8
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d101      	bne.n	8004f66 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e056      	b.n	8005014 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d106      	bne.n	8004f86 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f7fd f9a1 	bl	80022c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2202      	movs	r2, #2
 8004f8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f9c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	685a      	ldr	r2, [r3, #4]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	431a      	orrs	r2, r3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	431a      	orrs	r2, r3
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	691b      	ldr	r3, [r3, #16]
 8004fb2:	431a      	orrs	r2, r3
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	695b      	ldr	r3, [r3, #20]
 8004fb8:	431a      	orrs	r2, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	699b      	ldr	r3, [r3, #24]
 8004fbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fc2:	431a      	orrs	r2, r3
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	69db      	ldr	r3, [r3, #28]
 8004fc8:	431a      	orrs	r2, r3
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a1b      	ldr	r3, [r3, #32]
 8004fce:	ea42 0103 	orr.w	r1, r2, r3
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	430a      	orrs	r2, r1
 8004fdc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	699b      	ldr	r3, [r3, #24]
 8004fe2:	0c1b      	lsrs	r3, r3, #16
 8004fe4:	f003 0104 	and.w	r1, r3, #4
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	430a      	orrs	r2, r1
 8004ff2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	69da      	ldr	r2, [r3, #28]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005002:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2201      	movs	r2, #1
 800500e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005012:	2300      	movs	r3, #0
}
 8005014:	4618      	mov	r0, r3
 8005016:	3708      	adds	r7, #8
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}

0800501c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b08c      	sub	sp, #48	; 0x30
 8005020:	af00      	add	r7, sp, #0
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	60b9      	str	r1, [r7, #8]
 8005026:	607a      	str	r2, [r7, #4]
 8005028:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800502a:	2301      	movs	r3, #1
 800502c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800502e:	2300      	movs	r3, #0
 8005030:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800503a:	2b01      	cmp	r3, #1
 800503c:	d101      	bne.n	8005042 <HAL_SPI_TransmitReceive+0x26>
 800503e:	2302      	movs	r3, #2
 8005040:	e18a      	b.n	8005358 <HAL_SPI_TransmitReceive+0x33c>
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2201      	movs	r2, #1
 8005046:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800504a:	f7fd ff49 	bl	8002ee0 <HAL_GetTick>
 800504e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005056:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005060:	887b      	ldrh	r3, [r7, #2]
 8005062:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005064:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005068:	2b01      	cmp	r3, #1
 800506a:	d00f      	beq.n	800508c <HAL_SPI_TransmitReceive+0x70>
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005072:	d107      	bne.n	8005084 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d103      	bne.n	8005084 <HAL_SPI_TransmitReceive+0x68>
 800507c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005080:	2b04      	cmp	r3, #4
 8005082:	d003      	beq.n	800508c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005084:	2302      	movs	r3, #2
 8005086:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800508a:	e15b      	b.n	8005344 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d005      	beq.n	800509e <HAL_SPI_TransmitReceive+0x82>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d002      	beq.n	800509e <HAL_SPI_TransmitReceive+0x82>
 8005098:	887b      	ldrh	r3, [r7, #2]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d103      	bne.n	80050a6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80050a4:	e14e      	b.n	8005344 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	2b04      	cmp	r3, #4
 80050b0:	d003      	beq.n	80050ba <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2205      	movs	r2, #5
 80050b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2200      	movs	r2, #0
 80050be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	887a      	ldrh	r2, [r7, #2]
 80050ca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	887a      	ldrh	r2, [r7, #2]
 80050d0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	68ba      	ldr	r2, [r7, #8]
 80050d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	887a      	ldrh	r2, [r7, #2]
 80050dc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	887a      	ldrh	r2, [r7, #2]
 80050e2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2200      	movs	r2, #0
 80050e8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2200      	movs	r2, #0
 80050ee:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050fa:	2b40      	cmp	r3, #64	; 0x40
 80050fc:	d007      	beq.n	800510e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800510c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005116:	d178      	bne.n	800520a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d002      	beq.n	8005126 <HAL_SPI_TransmitReceive+0x10a>
 8005120:	8b7b      	ldrh	r3, [r7, #26]
 8005122:	2b01      	cmp	r3, #1
 8005124:	d166      	bne.n	80051f4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800512a:	881a      	ldrh	r2, [r3, #0]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005136:	1c9a      	adds	r2, r3, #2
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005140:	b29b      	uxth	r3, r3
 8005142:	3b01      	subs	r3, #1
 8005144:	b29a      	uxth	r2, r3
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800514a:	e053      	b.n	80051f4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	f003 0302 	and.w	r3, r3, #2
 8005156:	2b02      	cmp	r3, #2
 8005158:	d11b      	bne.n	8005192 <HAL_SPI_TransmitReceive+0x176>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800515e:	b29b      	uxth	r3, r3
 8005160:	2b00      	cmp	r3, #0
 8005162:	d016      	beq.n	8005192 <HAL_SPI_TransmitReceive+0x176>
 8005164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005166:	2b01      	cmp	r3, #1
 8005168:	d113      	bne.n	8005192 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800516e:	881a      	ldrh	r2, [r3, #0]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800517a:	1c9a      	adds	r2, r3, #2
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005184:	b29b      	uxth	r3, r3
 8005186:	3b01      	subs	r3, #1
 8005188:	b29a      	uxth	r2, r3
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800518e:	2300      	movs	r3, #0
 8005190:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	f003 0301 	and.w	r3, r3, #1
 800519c:	2b01      	cmp	r3, #1
 800519e:	d119      	bne.n	80051d4 <HAL_SPI_TransmitReceive+0x1b8>
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d014      	beq.n	80051d4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	68da      	ldr	r2, [r3, #12]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b4:	b292      	uxth	r2, r2
 80051b6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051bc:	1c9a      	adds	r2, r3, #2
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	3b01      	subs	r3, #1
 80051ca:	b29a      	uxth	r2, r3
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80051d0:	2301      	movs	r3, #1
 80051d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80051d4:	f7fd fe84 	bl	8002ee0 <HAL_GetTick>
 80051d8:	4602      	mov	r2, r0
 80051da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d807      	bhi.n	80051f4 <HAL_SPI_TransmitReceive+0x1d8>
 80051e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ea:	d003      	beq.n	80051f4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80051ec:	2303      	movs	r3, #3
 80051ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80051f2:	e0a7      	b.n	8005344 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d1a6      	bne.n	800514c <HAL_SPI_TransmitReceive+0x130>
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005202:	b29b      	uxth	r3, r3
 8005204:	2b00      	cmp	r3, #0
 8005206:	d1a1      	bne.n	800514c <HAL_SPI_TransmitReceive+0x130>
 8005208:	e07c      	b.n	8005304 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d002      	beq.n	8005218 <HAL_SPI_TransmitReceive+0x1fc>
 8005212:	8b7b      	ldrh	r3, [r7, #26]
 8005214:	2b01      	cmp	r3, #1
 8005216:	d16b      	bne.n	80052f0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	330c      	adds	r3, #12
 8005222:	7812      	ldrb	r2, [r2, #0]
 8005224:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800522a:	1c5a      	adds	r2, r3, #1
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005234:	b29b      	uxth	r3, r3
 8005236:	3b01      	subs	r3, #1
 8005238:	b29a      	uxth	r2, r3
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800523e:	e057      	b.n	80052f0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	f003 0302 	and.w	r3, r3, #2
 800524a:	2b02      	cmp	r3, #2
 800524c:	d11c      	bne.n	8005288 <HAL_SPI_TransmitReceive+0x26c>
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005252:	b29b      	uxth	r3, r3
 8005254:	2b00      	cmp	r3, #0
 8005256:	d017      	beq.n	8005288 <HAL_SPI_TransmitReceive+0x26c>
 8005258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800525a:	2b01      	cmp	r3, #1
 800525c:	d114      	bne.n	8005288 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	330c      	adds	r3, #12
 8005268:	7812      	ldrb	r2, [r2, #0]
 800526a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005270:	1c5a      	adds	r2, r3, #1
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800527a:	b29b      	uxth	r3, r3
 800527c:	3b01      	subs	r3, #1
 800527e:	b29a      	uxth	r2, r3
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005284:	2300      	movs	r3, #0
 8005286:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	f003 0301 	and.w	r3, r3, #1
 8005292:	2b01      	cmp	r3, #1
 8005294:	d119      	bne.n	80052ca <HAL_SPI_TransmitReceive+0x2ae>
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800529a:	b29b      	uxth	r3, r3
 800529c:	2b00      	cmp	r3, #0
 800529e:	d014      	beq.n	80052ca <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	68da      	ldr	r2, [r3, #12]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052aa:	b2d2      	uxtb	r2, r2
 80052ac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b2:	1c5a      	adds	r2, r3, #1
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052bc:	b29b      	uxth	r3, r3
 80052be:	3b01      	subs	r3, #1
 80052c0:	b29a      	uxth	r2, r3
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80052c6:	2301      	movs	r3, #1
 80052c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80052ca:	f7fd fe09 	bl	8002ee0 <HAL_GetTick>
 80052ce:	4602      	mov	r2, r0
 80052d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d2:	1ad3      	subs	r3, r2, r3
 80052d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d803      	bhi.n	80052e2 <HAL_SPI_TransmitReceive+0x2c6>
 80052da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052e0:	d102      	bne.n	80052e8 <HAL_SPI_TransmitReceive+0x2cc>
 80052e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d103      	bne.n	80052f0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80052e8:	2303      	movs	r3, #3
 80052ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80052ee:	e029      	b.n	8005344 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d1a2      	bne.n	8005240 <HAL_SPI_TransmitReceive+0x224>
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052fe:	b29b      	uxth	r3, r3
 8005300:	2b00      	cmp	r3, #0
 8005302:	d19d      	bne.n	8005240 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005304:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005306:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005308:	68f8      	ldr	r0, [r7, #12]
 800530a:	f000 f893 	bl	8005434 <SPI_EndRxTxTransaction>
 800530e:	4603      	mov	r3, r0
 8005310:	2b00      	cmp	r3, #0
 8005312:	d006      	beq.n	8005322 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2220      	movs	r2, #32
 800531e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005320:	e010      	b.n	8005344 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d10b      	bne.n	8005342 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800532a:	2300      	movs	r3, #0
 800532c:	617b      	str	r3, [r7, #20]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	617b      	str	r3, [r7, #20]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	617b      	str	r3, [r7, #20]
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	e000      	b.n	8005344 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005342:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2200      	movs	r2, #0
 8005350:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005354:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005358:	4618      	mov	r0, r3
 800535a:	3730      	adds	r7, #48	; 0x30
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}

08005360 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
 8005366:	60f8      	str	r0, [r7, #12]
 8005368:	60b9      	str	r1, [r7, #8]
 800536a:	603b      	str	r3, [r7, #0]
 800536c:	4613      	mov	r3, r2
 800536e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005370:	e04c      	b.n	800540c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005378:	d048      	beq.n	800540c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800537a:	f7fd fdb1 	bl	8002ee0 <HAL_GetTick>
 800537e:	4602      	mov	r2, r0
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	1ad3      	subs	r3, r2, r3
 8005384:	683a      	ldr	r2, [r7, #0]
 8005386:	429a      	cmp	r2, r3
 8005388:	d902      	bls.n	8005390 <SPI_WaitFlagStateUntilTimeout+0x30>
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d13d      	bne.n	800540c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	685a      	ldr	r2, [r3, #4]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800539e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053a8:	d111      	bne.n	80053ce <SPI_WaitFlagStateUntilTimeout+0x6e>
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053b2:	d004      	beq.n	80053be <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053bc:	d107      	bne.n	80053ce <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053cc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053d6:	d10f      	bne.n	80053f8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053e6:	601a      	str	r2, [r3, #0]
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053f6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2200      	movs	r2, #0
 8005404:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005408:	2303      	movs	r3, #3
 800540a:	e00f      	b.n	800542c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	689a      	ldr	r2, [r3, #8]
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	4013      	ands	r3, r2
 8005416:	68ba      	ldr	r2, [r7, #8]
 8005418:	429a      	cmp	r2, r3
 800541a:	bf0c      	ite	eq
 800541c:	2301      	moveq	r3, #1
 800541e:	2300      	movne	r3, #0
 8005420:	b2db      	uxtb	r3, r3
 8005422:	461a      	mov	r2, r3
 8005424:	79fb      	ldrb	r3, [r7, #7]
 8005426:	429a      	cmp	r2, r3
 8005428:	d1a3      	bne.n	8005372 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800542a:	2300      	movs	r3, #0
}
 800542c:	4618      	mov	r0, r3
 800542e:	3710      	adds	r7, #16
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b088      	sub	sp, #32
 8005438:	af02      	add	r7, sp, #8
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005440:	4b1b      	ldr	r3, [pc, #108]	; (80054b0 <SPI_EndRxTxTransaction+0x7c>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a1b      	ldr	r2, [pc, #108]	; (80054b4 <SPI_EndRxTxTransaction+0x80>)
 8005446:	fba2 2303 	umull	r2, r3, r2, r3
 800544a:	0d5b      	lsrs	r3, r3, #21
 800544c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005450:	fb02 f303 	mul.w	r3, r2, r3
 8005454:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800545e:	d112      	bne.n	8005486 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	9300      	str	r3, [sp, #0]
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	2200      	movs	r2, #0
 8005468:	2180      	movs	r1, #128	; 0x80
 800546a:	68f8      	ldr	r0, [r7, #12]
 800546c:	f7ff ff78 	bl	8005360 <SPI_WaitFlagStateUntilTimeout>
 8005470:	4603      	mov	r3, r0
 8005472:	2b00      	cmp	r3, #0
 8005474:	d016      	beq.n	80054a4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800547a:	f043 0220 	orr.w	r2, r3, #32
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	e00f      	b.n	80054a6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d00a      	beq.n	80054a2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	3b01      	subs	r3, #1
 8005490:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800549c:	2b80      	cmp	r3, #128	; 0x80
 800549e:	d0f2      	beq.n	8005486 <SPI_EndRxTxTransaction+0x52>
 80054a0:	e000      	b.n	80054a4 <SPI_EndRxTxTransaction+0x70>
        break;
 80054a2:	bf00      	nop
  }

  return HAL_OK;
 80054a4:	2300      	movs	r3, #0
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3718      	adds	r7, #24
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	20000008 	.word	0x20000008
 80054b4:	165e9f81 	.word	0x165e9f81

080054b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b082      	sub	sp, #8
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d101      	bne.n	80054ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e01d      	b.n	8005506 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d106      	bne.n	80054e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f7fd fa1a 	bl	8002918 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2202      	movs	r2, #2
 80054e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	3304      	adds	r3, #4
 80054f4:	4619      	mov	r1, r3
 80054f6:	4610      	mov	r0, r2
 80054f8:	f000 fb44 	bl	8005b84 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005504:	2300      	movs	r3, #0
}
 8005506:	4618      	mov	r0, r3
 8005508:	3708      	adds	r7, #8
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}

0800550e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800550e:	b480      	push	{r7}
 8005510:	b085      	sub	sp, #20
 8005512:	af00      	add	r7, sp, #0
 8005514:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	68da      	ldr	r2, [r3, #12]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f042 0201 	orr.w	r2, r2, #1
 8005524:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	f003 0307 	and.w	r3, r3, #7
 8005530:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2b06      	cmp	r3, #6
 8005536:	d007      	beq.n	8005548 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f042 0201 	orr.w	r2, r2, #1
 8005546:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	3714      	adds	r7, #20
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr

08005556 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005556:	b580      	push	{r7, lr}
 8005558:	b082      	sub	sp, #8
 800555a:	af00      	add	r7, sp, #0
 800555c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d101      	bne.n	8005568 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	e01d      	b.n	80055a4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800556e:	b2db      	uxtb	r3, r3
 8005570:	2b00      	cmp	r3, #0
 8005572:	d106      	bne.n	8005582 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2200      	movs	r2, #0
 8005578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f7fd fa07 	bl	8002990 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2202      	movs	r2, #2
 8005586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	3304      	adds	r3, #4
 8005592:	4619      	mov	r1, r3
 8005594:	4610      	mov	r0, r2
 8005596:	f000 faf5 	bl	8005b84 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2201      	movs	r2, #1
 800559e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055a2:	2300      	movs	r3, #0
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3708      	adds	r7, #8
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}

080055ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b084      	sub	sp, #16
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	2201      	movs	r2, #1
 80055bc:	6839      	ldr	r1, [r7, #0]
 80055be:	4618      	mov	r0, r3
 80055c0:	f000 fdca 	bl	8006158 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a15      	ldr	r2, [pc, #84]	; (8005620 <HAL_TIM_PWM_Start+0x74>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d004      	beq.n	80055d8 <HAL_TIM_PWM_Start+0x2c>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a14      	ldr	r2, [pc, #80]	; (8005624 <HAL_TIM_PWM_Start+0x78>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d101      	bne.n	80055dc <HAL_TIM_PWM_Start+0x30>
 80055d8:	2301      	movs	r3, #1
 80055da:	e000      	b.n	80055de <HAL_TIM_PWM_Start+0x32>
 80055dc:	2300      	movs	r3, #0
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d007      	beq.n	80055f2 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80055f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	f003 0307 	and.w	r3, r3, #7
 80055fc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2b06      	cmp	r3, #6
 8005602:	d007      	beq.n	8005614 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f042 0201 	orr.w	r2, r2, #1
 8005612:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005614:	2300      	movs	r3, #0
}
 8005616:	4618      	mov	r0, r3
 8005618:	3710      	adds	r7, #16
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	40010000 	.word	0x40010000
 8005624:	40010400 	.word	0x40010400

08005628 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	691b      	ldr	r3, [r3, #16]
 8005636:	f003 0302 	and.w	r3, r3, #2
 800563a:	2b02      	cmp	r3, #2
 800563c:	d122      	bne.n	8005684 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	f003 0302 	and.w	r3, r3, #2
 8005648:	2b02      	cmp	r3, #2
 800564a:	d11b      	bne.n	8005684 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f06f 0202 	mvn.w	r2, #2
 8005654:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2201      	movs	r2, #1
 800565a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	699b      	ldr	r3, [r3, #24]
 8005662:	f003 0303 	and.w	r3, r3, #3
 8005666:	2b00      	cmp	r3, #0
 8005668:	d003      	beq.n	8005672 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 fa6b 	bl	8005b46 <HAL_TIM_IC_CaptureCallback>
 8005670:	e005      	b.n	800567e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f000 fa5d 	bl	8005b32 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f000 fa6e 	bl	8005b5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	f003 0304 	and.w	r3, r3, #4
 800568e:	2b04      	cmp	r3, #4
 8005690:	d122      	bne.n	80056d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	f003 0304 	and.w	r3, r3, #4
 800569c:	2b04      	cmp	r3, #4
 800569e:	d11b      	bne.n	80056d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f06f 0204 	mvn.w	r2, #4
 80056a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2202      	movs	r2, #2
 80056ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	699b      	ldr	r3, [r3, #24]
 80056b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d003      	beq.n	80056c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f000 fa41 	bl	8005b46 <HAL_TIM_IC_CaptureCallback>
 80056c4:	e005      	b.n	80056d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 fa33 	bl	8005b32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f000 fa44 	bl	8005b5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	f003 0308 	and.w	r3, r3, #8
 80056e2:	2b08      	cmp	r3, #8
 80056e4:	d122      	bne.n	800572c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	f003 0308 	and.w	r3, r3, #8
 80056f0:	2b08      	cmp	r3, #8
 80056f2:	d11b      	bne.n	800572c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f06f 0208 	mvn.w	r2, #8
 80056fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2204      	movs	r2, #4
 8005702:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	69db      	ldr	r3, [r3, #28]
 800570a:	f003 0303 	and.w	r3, r3, #3
 800570e:	2b00      	cmp	r3, #0
 8005710:	d003      	beq.n	800571a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 fa17 	bl	8005b46 <HAL_TIM_IC_CaptureCallback>
 8005718:	e005      	b.n	8005726 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 fa09 	bl	8005b32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f000 fa1a 	bl	8005b5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	691b      	ldr	r3, [r3, #16]
 8005732:	f003 0310 	and.w	r3, r3, #16
 8005736:	2b10      	cmp	r3, #16
 8005738:	d122      	bne.n	8005780 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	f003 0310 	and.w	r3, r3, #16
 8005744:	2b10      	cmp	r3, #16
 8005746:	d11b      	bne.n	8005780 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f06f 0210 	mvn.w	r2, #16
 8005750:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2208      	movs	r2, #8
 8005756:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	69db      	ldr	r3, [r3, #28]
 800575e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005762:	2b00      	cmp	r3, #0
 8005764:	d003      	beq.n	800576e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f000 f9ed 	bl	8005b46 <HAL_TIM_IC_CaptureCallback>
 800576c:	e005      	b.n	800577a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f000 f9df 	bl	8005b32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f000 f9f0 	bl	8005b5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	691b      	ldr	r3, [r3, #16]
 8005786:	f003 0301 	and.w	r3, r3, #1
 800578a:	2b01      	cmp	r3, #1
 800578c:	d10e      	bne.n	80057ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	f003 0301 	and.w	r3, r3, #1
 8005798:	2b01      	cmp	r3, #1
 800579a:	d107      	bne.n	80057ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f06f 0201 	mvn.w	r2, #1
 80057a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f7fc fbbc 	bl	8001f24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057b6:	2b80      	cmp	r3, #128	; 0x80
 80057b8:	d10e      	bne.n	80057d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057c4:	2b80      	cmp	r3, #128	; 0x80
 80057c6:	d107      	bne.n	80057d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80057d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 fdbe 	bl	8006354 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057e2:	2b40      	cmp	r3, #64	; 0x40
 80057e4:	d10e      	bne.n	8005804 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057f0:	2b40      	cmp	r3, #64	; 0x40
 80057f2:	d107      	bne.n	8005804 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80057fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 f9b5 	bl	8005b6e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	f003 0320 	and.w	r3, r3, #32
 800580e:	2b20      	cmp	r3, #32
 8005810:	d10e      	bne.n	8005830 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	f003 0320 	and.w	r3, r3, #32
 800581c:	2b20      	cmp	r3, #32
 800581e:	d107      	bne.n	8005830 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f06f 0220 	mvn.w	r2, #32
 8005828:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f000 fd88 	bl	8006340 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005830:	bf00      	nop
 8005832:	3708      	adds	r7, #8
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}

08005838 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
 800583e:	60f8      	str	r0, [r7, #12]
 8005840:	60b9      	str	r1, [r7, #8]
 8005842:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800584a:	2b01      	cmp	r3, #1
 800584c:	d101      	bne.n	8005852 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800584e:	2302      	movs	r3, #2
 8005850:	e0b4      	b.n	80059bc <HAL_TIM_PWM_ConfigChannel+0x184>
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2201      	movs	r2, #1
 8005856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2202      	movs	r2, #2
 800585e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2b0c      	cmp	r3, #12
 8005866:	f200 809f 	bhi.w	80059a8 <HAL_TIM_PWM_ConfigChannel+0x170>
 800586a:	a201      	add	r2, pc, #4	; (adr r2, 8005870 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800586c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005870:	080058a5 	.word	0x080058a5
 8005874:	080059a9 	.word	0x080059a9
 8005878:	080059a9 	.word	0x080059a9
 800587c:	080059a9 	.word	0x080059a9
 8005880:	080058e5 	.word	0x080058e5
 8005884:	080059a9 	.word	0x080059a9
 8005888:	080059a9 	.word	0x080059a9
 800588c:	080059a9 	.word	0x080059a9
 8005890:	08005927 	.word	0x08005927
 8005894:	080059a9 	.word	0x080059a9
 8005898:	080059a9 	.word	0x080059a9
 800589c:	080059a9 	.word	0x080059a9
 80058a0:	08005967 	.word	0x08005967
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	68b9      	ldr	r1, [r7, #8]
 80058aa:	4618      	mov	r0, r3
 80058ac:	f000 fa0a 	bl	8005cc4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	699a      	ldr	r2, [r3, #24]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f042 0208 	orr.w	r2, r2, #8
 80058be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	699a      	ldr	r2, [r3, #24]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f022 0204 	bic.w	r2, r2, #4
 80058ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	6999      	ldr	r1, [r3, #24]
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	691a      	ldr	r2, [r3, #16]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	430a      	orrs	r2, r1
 80058e0:	619a      	str	r2, [r3, #24]
      break;
 80058e2:	e062      	b.n	80059aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	68b9      	ldr	r1, [r7, #8]
 80058ea:	4618      	mov	r0, r3
 80058ec:	f000 fa5a 	bl	8005da4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	699a      	ldr	r2, [r3, #24]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	699a      	ldr	r2, [r3, #24]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800590e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	6999      	ldr	r1, [r3, #24]
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	691b      	ldr	r3, [r3, #16]
 800591a:	021a      	lsls	r2, r3, #8
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	430a      	orrs	r2, r1
 8005922:	619a      	str	r2, [r3, #24]
      break;
 8005924:	e041      	b.n	80059aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	68b9      	ldr	r1, [r7, #8]
 800592c:	4618      	mov	r0, r3
 800592e:	f000 faaf 	bl	8005e90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	69da      	ldr	r2, [r3, #28]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f042 0208 	orr.w	r2, r2, #8
 8005940:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	69da      	ldr	r2, [r3, #28]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f022 0204 	bic.w	r2, r2, #4
 8005950:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	69d9      	ldr	r1, [r3, #28]
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	691a      	ldr	r2, [r3, #16]
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	430a      	orrs	r2, r1
 8005962:	61da      	str	r2, [r3, #28]
      break;
 8005964:	e021      	b.n	80059aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	68b9      	ldr	r1, [r7, #8]
 800596c:	4618      	mov	r0, r3
 800596e:	f000 fb03 	bl	8005f78 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	69da      	ldr	r2, [r3, #28]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005980:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	69da      	ldr	r2, [r3, #28]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005990:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	69d9      	ldr	r1, [r3, #28]
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	691b      	ldr	r3, [r3, #16]
 800599c:	021a      	lsls	r2, r3, #8
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	430a      	orrs	r2, r1
 80059a4:	61da      	str	r2, [r3, #28]
      break;
 80059a6:	e000      	b.n	80059aa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80059a8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2201      	movs	r2, #1
 80059ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2200      	movs	r2, #0
 80059b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059ba:	2300      	movs	r3, #0
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3710      	adds	r7, #16
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}

080059c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d101      	bne.n	80059dc <HAL_TIM_ConfigClockSource+0x18>
 80059d8:	2302      	movs	r3, #2
 80059da:	e0a6      	b.n	8005b2a <HAL_TIM_ConfigClockSource+0x166>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2201      	movs	r2, #1
 80059e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2202      	movs	r2, #2
 80059e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80059fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a02:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	68fa      	ldr	r2, [r7, #12]
 8005a0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	2b40      	cmp	r3, #64	; 0x40
 8005a12:	d067      	beq.n	8005ae4 <HAL_TIM_ConfigClockSource+0x120>
 8005a14:	2b40      	cmp	r3, #64	; 0x40
 8005a16:	d80b      	bhi.n	8005a30 <HAL_TIM_ConfigClockSource+0x6c>
 8005a18:	2b10      	cmp	r3, #16
 8005a1a:	d073      	beq.n	8005b04 <HAL_TIM_ConfigClockSource+0x140>
 8005a1c:	2b10      	cmp	r3, #16
 8005a1e:	d802      	bhi.n	8005a26 <HAL_TIM_ConfigClockSource+0x62>
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d06f      	beq.n	8005b04 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005a24:	e078      	b.n	8005b18 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005a26:	2b20      	cmp	r3, #32
 8005a28:	d06c      	beq.n	8005b04 <HAL_TIM_ConfigClockSource+0x140>
 8005a2a:	2b30      	cmp	r3, #48	; 0x30
 8005a2c:	d06a      	beq.n	8005b04 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005a2e:	e073      	b.n	8005b18 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005a30:	2b70      	cmp	r3, #112	; 0x70
 8005a32:	d00d      	beq.n	8005a50 <HAL_TIM_ConfigClockSource+0x8c>
 8005a34:	2b70      	cmp	r3, #112	; 0x70
 8005a36:	d804      	bhi.n	8005a42 <HAL_TIM_ConfigClockSource+0x7e>
 8005a38:	2b50      	cmp	r3, #80	; 0x50
 8005a3a:	d033      	beq.n	8005aa4 <HAL_TIM_ConfigClockSource+0xe0>
 8005a3c:	2b60      	cmp	r3, #96	; 0x60
 8005a3e:	d041      	beq.n	8005ac4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005a40:	e06a      	b.n	8005b18 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005a42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a46:	d066      	beq.n	8005b16 <HAL_TIM_ConfigClockSource+0x152>
 8005a48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a4c:	d017      	beq.n	8005a7e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005a4e:	e063      	b.n	8005b18 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6818      	ldr	r0, [r3, #0]
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	6899      	ldr	r1, [r3, #8]
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	685a      	ldr	r2, [r3, #4]
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	f000 fb5a 	bl	8006118 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005a72:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	68fa      	ldr	r2, [r7, #12]
 8005a7a:	609a      	str	r2, [r3, #8]
      break;
 8005a7c:	e04c      	b.n	8005b18 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6818      	ldr	r0, [r3, #0]
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	6899      	ldr	r1, [r3, #8]
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	685a      	ldr	r2, [r3, #4]
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	f000 fb43 	bl	8006118 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	689a      	ldr	r2, [r3, #8]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005aa0:	609a      	str	r2, [r3, #8]
      break;
 8005aa2:	e039      	b.n	8005b18 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6818      	ldr	r0, [r3, #0]
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	6859      	ldr	r1, [r3, #4]
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	461a      	mov	r2, r3
 8005ab2:	f000 fab7 	bl	8006024 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	2150      	movs	r1, #80	; 0x50
 8005abc:	4618      	mov	r0, r3
 8005abe:	f000 fb10 	bl	80060e2 <TIM_ITRx_SetConfig>
      break;
 8005ac2:	e029      	b.n	8005b18 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6818      	ldr	r0, [r3, #0]
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	6859      	ldr	r1, [r3, #4]
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	f000 fad6 	bl	8006082 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	2160      	movs	r1, #96	; 0x60
 8005adc:	4618      	mov	r0, r3
 8005ade:	f000 fb00 	bl	80060e2 <TIM_ITRx_SetConfig>
      break;
 8005ae2:	e019      	b.n	8005b18 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6818      	ldr	r0, [r3, #0]
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	6859      	ldr	r1, [r3, #4]
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	461a      	mov	r2, r3
 8005af2:	f000 fa97 	bl	8006024 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	2140      	movs	r1, #64	; 0x40
 8005afc:	4618      	mov	r0, r3
 8005afe:	f000 faf0 	bl	80060e2 <TIM_ITRx_SetConfig>
      break;
 8005b02:	e009      	b.n	8005b18 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4619      	mov	r1, r3
 8005b0e:	4610      	mov	r0, r2
 8005b10:	f000 fae7 	bl	80060e2 <TIM_ITRx_SetConfig>
      break;
 8005b14:	e000      	b.n	8005b18 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005b16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b28:	2300      	movs	r3, #0
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3710      	adds	r7, #16
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}

08005b32 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b32:	b480      	push	{r7}
 8005b34:	b083      	sub	sp, #12
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b3a:	bf00      	nop
 8005b3c:	370c      	adds	r7, #12
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b44:	4770      	bx	lr

08005b46 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b46:	b480      	push	{r7}
 8005b48:	b083      	sub	sp, #12
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b4e:	bf00      	nop
 8005b50:	370c      	adds	r7, #12
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr

08005b5a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b5a:	b480      	push	{r7}
 8005b5c:	b083      	sub	sp, #12
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b62:	bf00      	nop
 8005b64:	370c      	adds	r7, #12
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr

08005b6e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b6e:	b480      	push	{r7}
 8005b70:	b083      	sub	sp, #12
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b76:	bf00      	nop
 8005b78:	370c      	adds	r7, #12
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr
	...

08005b84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b085      	sub	sp, #20
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	4a40      	ldr	r2, [pc, #256]	; (8005c98 <TIM_Base_SetConfig+0x114>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d013      	beq.n	8005bc4 <TIM_Base_SetConfig+0x40>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ba2:	d00f      	beq.n	8005bc4 <TIM_Base_SetConfig+0x40>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	4a3d      	ldr	r2, [pc, #244]	; (8005c9c <TIM_Base_SetConfig+0x118>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d00b      	beq.n	8005bc4 <TIM_Base_SetConfig+0x40>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4a3c      	ldr	r2, [pc, #240]	; (8005ca0 <TIM_Base_SetConfig+0x11c>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d007      	beq.n	8005bc4 <TIM_Base_SetConfig+0x40>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	4a3b      	ldr	r2, [pc, #236]	; (8005ca4 <TIM_Base_SetConfig+0x120>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d003      	beq.n	8005bc4 <TIM_Base_SetConfig+0x40>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	4a3a      	ldr	r2, [pc, #232]	; (8005ca8 <TIM_Base_SetConfig+0x124>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d108      	bne.n	8005bd6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	68fa      	ldr	r2, [r7, #12]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a2f      	ldr	r2, [pc, #188]	; (8005c98 <TIM_Base_SetConfig+0x114>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d02b      	beq.n	8005c36 <TIM_Base_SetConfig+0xb2>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005be4:	d027      	beq.n	8005c36 <TIM_Base_SetConfig+0xb2>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a2c      	ldr	r2, [pc, #176]	; (8005c9c <TIM_Base_SetConfig+0x118>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d023      	beq.n	8005c36 <TIM_Base_SetConfig+0xb2>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4a2b      	ldr	r2, [pc, #172]	; (8005ca0 <TIM_Base_SetConfig+0x11c>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d01f      	beq.n	8005c36 <TIM_Base_SetConfig+0xb2>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4a2a      	ldr	r2, [pc, #168]	; (8005ca4 <TIM_Base_SetConfig+0x120>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d01b      	beq.n	8005c36 <TIM_Base_SetConfig+0xb2>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a29      	ldr	r2, [pc, #164]	; (8005ca8 <TIM_Base_SetConfig+0x124>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d017      	beq.n	8005c36 <TIM_Base_SetConfig+0xb2>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4a28      	ldr	r2, [pc, #160]	; (8005cac <TIM_Base_SetConfig+0x128>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d013      	beq.n	8005c36 <TIM_Base_SetConfig+0xb2>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	4a27      	ldr	r2, [pc, #156]	; (8005cb0 <TIM_Base_SetConfig+0x12c>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d00f      	beq.n	8005c36 <TIM_Base_SetConfig+0xb2>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a26      	ldr	r2, [pc, #152]	; (8005cb4 <TIM_Base_SetConfig+0x130>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d00b      	beq.n	8005c36 <TIM_Base_SetConfig+0xb2>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a25      	ldr	r2, [pc, #148]	; (8005cb8 <TIM_Base_SetConfig+0x134>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d007      	beq.n	8005c36 <TIM_Base_SetConfig+0xb2>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a24      	ldr	r2, [pc, #144]	; (8005cbc <TIM_Base_SetConfig+0x138>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d003      	beq.n	8005c36 <TIM_Base_SetConfig+0xb2>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4a23      	ldr	r2, [pc, #140]	; (8005cc0 <TIM_Base_SetConfig+0x13c>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d108      	bne.n	8005c48 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	68db      	ldr	r3, [r3, #12]
 8005c42:	68fa      	ldr	r2, [r7, #12]
 8005c44:	4313      	orrs	r3, r2
 8005c46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	695b      	ldr	r3, [r3, #20]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	689a      	ldr	r2, [r3, #8]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	4a0a      	ldr	r2, [pc, #40]	; (8005c98 <TIM_Base_SetConfig+0x114>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d003      	beq.n	8005c7c <TIM_Base_SetConfig+0xf8>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	4a0c      	ldr	r2, [pc, #48]	; (8005ca8 <TIM_Base_SetConfig+0x124>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d103      	bne.n	8005c84 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	691a      	ldr	r2, [r3, #16]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2201      	movs	r2, #1
 8005c88:	615a      	str	r2, [r3, #20]
}
 8005c8a:	bf00      	nop
 8005c8c:	3714      	adds	r7, #20
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr
 8005c96:	bf00      	nop
 8005c98:	40010000 	.word	0x40010000
 8005c9c:	40000400 	.word	0x40000400
 8005ca0:	40000800 	.word	0x40000800
 8005ca4:	40000c00 	.word	0x40000c00
 8005ca8:	40010400 	.word	0x40010400
 8005cac:	40014000 	.word	0x40014000
 8005cb0:	40014400 	.word	0x40014400
 8005cb4:	40014800 	.word	0x40014800
 8005cb8:	40001800 	.word	0x40001800
 8005cbc:	40001c00 	.word	0x40001c00
 8005cc0:	40002000 	.word	0x40002000

08005cc4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b087      	sub	sp, #28
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6a1b      	ldr	r3, [r3, #32]
 8005cd2:	f023 0201 	bic.w	r2, r3, #1
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6a1b      	ldr	r3, [r3, #32]
 8005cde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	699b      	ldr	r3, [r3, #24]
 8005cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f023 0303 	bic.w	r3, r3, #3
 8005cfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	68fa      	ldr	r2, [r7, #12]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	f023 0302 	bic.w	r3, r3, #2
 8005d0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	697a      	ldr	r2, [r7, #20]
 8005d14:	4313      	orrs	r3, r2
 8005d16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4a20      	ldr	r2, [pc, #128]	; (8005d9c <TIM_OC1_SetConfig+0xd8>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d003      	beq.n	8005d28 <TIM_OC1_SetConfig+0x64>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4a1f      	ldr	r2, [pc, #124]	; (8005da0 <TIM_OC1_SetConfig+0xdc>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d10c      	bne.n	8005d42 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	f023 0308 	bic.w	r3, r3, #8
 8005d2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	68db      	ldr	r3, [r3, #12]
 8005d34:	697a      	ldr	r2, [r7, #20]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	f023 0304 	bic.w	r3, r3, #4
 8005d40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4a15      	ldr	r2, [pc, #84]	; (8005d9c <TIM_OC1_SetConfig+0xd8>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d003      	beq.n	8005d52 <TIM_OC1_SetConfig+0x8e>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	4a14      	ldr	r2, [pc, #80]	; (8005da0 <TIM_OC1_SetConfig+0xdc>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d111      	bne.n	8005d76 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	695b      	ldr	r3, [r3, #20]
 8005d66:	693a      	ldr	r2, [r7, #16]
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	699b      	ldr	r3, [r3, #24]
 8005d70:	693a      	ldr	r2, [r7, #16]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	693a      	ldr	r2, [r7, #16]
 8005d7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	68fa      	ldr	r2, [r7, #12]
 8005d80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	685a      	ldr	r2, [r3, #4]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	697a      	ldr	r2, [r7, #20]
 8005d8e:	621a      	str	r2, [r3, #32]
}
 8005d90:	bf00      	nop
 8005d92:	371c      	adds	r7, #28
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr
 8005d9c:	40010000 	.word	0x40010000
 8005da0:	40010400 	.word	0x40010400

08005da4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b087      	sub	sp, #28
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6a1b      	ldr	r3, [r3, #32]
 8005db2:	f023 0210 	bic.w	r2, r3, #16
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6a1b      	ldr	r3, [r3, #32]
 8005dbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	699b      	ldr	r3, [r3, #24]
 8005dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	021b      	lsls	r3, r3, #8
 8005de2:	68fa      	ldr	r2, [r7, #12]
 8005de4:	4313      	orrs	r3, r2
 8005de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	f023 0320 	bic.w	r3, r3, #32
 8005dee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	011b      	lsls	r3, r3, #4
 8005df6:	697a      	ldr	r2, [r7, #20]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	4a22      	ldr	r2, [pc, #136]	; (8005e88 <TIM_OC2_SetConfig+0xe4>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d003      	beq.n	8005e0c <TIM_OC2_SetConfig+0x68>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	4a21      	ldr	r2, [pc, #132]	; (8005e8c <TIM_OC2_SetConfig+0xe8>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d10d      	bne.n	8005e28 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	011b      	lsls	r3, r3, #4
 8005e1a:	697a      	ldr	r2, [r7, #20]
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e26:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	4a17      	ldr	r2, [pc, #92]	; (8005e88 <TIM_OC2_SetConfig+0xe4>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d003      	beq.n	8005e38 <TIM_OC2_SetConfig+0x94>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	4a16      	ldr	r2, [pc, #88]	; (8005e8c <TIM_OC2_SetConfig+0xe8>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d113      	bne.n	8005e60 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	695b      	ldr	r3, [r3, #20]
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	693a      	ldr	r2, [r7, #16]
 8005e50:	4313      	orrs	r3, r2
 8005e52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	699b      	ldr	r3, [r3, #24]
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	693a      	ldr	r2, [r7, #16]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	693a      	ldr	r2, [r7, #16]
 8005e64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	68fa      	ldr	r2, [r7, #12]
 8005e6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	685a      	ldr	r2, [r3, #4]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	697a      	ldr	r2, [r7, #20]
 8005e78:	621a      	str	r2, [r3, #32]
}
 8005e7a:	bf00      	nop
 8005e7c:	371c      	adds	r7, #28
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr
 8005e86:	bf00      	nop
 8005e88:	40010000 	.word	0x40010000
 8005e8c:	40010400 	.word	0x40010400

08005e90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b087      	sub	sp, #28
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6a1b      	ldr	r3, [r3, #32]
 8005e9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6a1b      	ldr	r3, [r3, #32]
 8005eaa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	69db      	ldr	r3, [r3, #28]
 8005eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ebe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f023 0303 	bic.w	r3, r3, #3
 8005ec6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	68fa      	ldr	r2, [r7, #12]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ed8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	021b      	lsls	r3, r3, #8
 8005ee0:	697a      	ldr	r2, [r7, #20]
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	4a21      	ldr	r2, [pc, #132]	; (8005f70 <TIM_OC3_SetConfig+0xe0>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d003      	beq.n	8005ef6 <TIM_OC3_SetConfig+0x66>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	4a20      	ldr	r2, [pc, #128]	; (8005f74 <TIM_OC3_SetConfig+0xe4>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d10d      	bne.n	8005f12 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005efc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	68db      	ldr	r3, [r3, #12]
 8005f02:	021b      	lsls	r3, r3, #8
 8005f04:	697a      	ldr	r2, [r7, #20]
 8005f06:	4313      	orrs	r3, r2
 8005f08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	4a16      	ldr	r2, [pc, #88]	; (8005f70 <TIM_OC3_SetConfig+0xe0>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d003      	beq.n	8005f22 <TIM_OC3_SetConfig+0x92>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	4a15      	ldr	r2, [pc, #84]	; (8005f74 <TIM_OC3_SetConfig+0xe4>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d113      	bne.n	8005f4a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	695b      	ldr	r3, [r3, #20]
 8005f36:	011b      	lsls	r3, r3, #4
 8005f38:	693a      	ldr	r2, [r7, #16]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	699b      	ldr	r3, [r3, #24]
 8005f42:	011b      	lsls	r3, r3, #4
 8005f44:	693a      	ldr	r2, [r7, #16]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	693a      	ldr	r2, [r7, #16]
 8005f4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	68fa      	ldr	r2, [r7, #12]
 8005f54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	685a      	ldr	r2, [r3, #4]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	697a      	ldr	r2, [r7, #20]
 8005f62:	621a      	str	r2, [r3, #32]
}
 8005f64:	bf00      	nop
 8005f66:	371c      	adds	r7, #28
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr
 8005f70:	40010000 	.word	0x40010000
 8005f74:	40010400 	.word	0x40010400

08005f78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b087      	sub	sp, #28
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6a1b      	ldr	r3, [r3, #32]
 8005f86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6a1b      	ldr	r3, [r3, #32]
 8005f92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	69db      	ldr	r3, [r3, #28]
 8005f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	021b      	lsls	r3, r3, #8
 8005fb6:	68fa      	ldr	r2, [r7, #12]
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005fc2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	031b      	lsls	r3, r3, #12
 8005fca:	693a      	ldr	r2, [r7, #16]
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4a12      	ldr	r2, [pc, #72]	; (800601c <TIM_OC4_SetConfig+0xa4>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d003      	beq.n	8005fe0 <TIM_OC4_SetConfig+0x68>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	4a11      	ldr	r2, [pc, #68]	; (8006020 <TIM_OC4_SetConfig+0xa8>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d109      	bne.n	8005ff4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fe6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	695b      	ldr	r3, [r3, #20]
 8005fec:	019b      	lsls	r3, r3, #6
 8005fee:	697a      	ldr	r2, [r7, #20]
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	697a      	ldr	r2, [r7, #20]
 8005ff8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	68fa      	ldr	r2, [r7, #12]
 8005ffe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	685a      	ldr	r2, [r3, #4]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	693a      	ldr	r2, [r7, #16]
 800600c:	621a      	str	r2, [r3, #32]
}
 800600e:	bf00      	nop
 8006010:	371c      	adds	r7, #28
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr
 800601a:	bf00      	nop
 800601c:	40010000 	.word	0x40010000
 8006020:	40010400 	.word	0x40010400

08006024 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006024:	b480      	push	{r7}
 8006026:	b087      	sub	sp, #28
 8006028:	af00      	add	r7, sp, #0
 800602a:	60f8      	str	r0, [r7, #12]
 800602c:	60b9      	str	r1, [r7, #8]
 800602e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6a1b      	ldr	r3, [r3, #32]
 8006034:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	6a1b      	ldr	r3, [r3, #32]
 800603a:	f023 0201 	bic.w	r2, r3, #1
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	699b      	ldr	r3, [r3, #24]
 8006046:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800604e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	011b      	lsls	r3, r3, #4
 8006054:	693a      	ldr	r2, [r7, #16]
 8006056:	4313      	orrs	r3, r2
 8006058:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	f023 030a 	bic.w	r3, r3, #10
 8006060:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006062:	697a      	ldr	r2, [r7, #20]
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	4313      	orrs	r3, r2
 8006068:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	693a      	ldr	r2, [r7, #16]
 800606e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	697a      	ldr	r2, [r7, #20]
 8006074:	621a      	str	r2, [r3, #32]
}
 8006076:	bf00      	nop
 8006078:	371c      	adds	r7, #28
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr

08006082 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006082:	b480      	push	{r7}
 8006084:	b087      	sub	sp, #28
 8006086:	af00      	add	r7, sp, #0
 8006088:	60f8      	str	r0, [r7, #12]
 800608a:	60b9      	str	r1, [r7, #8]
 800608c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	6a1b      	ldr	r3, [r3, #32]
 8006092:	f023 0210 	bic.w	r2, r3, #16
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	699b      	ldr	r3, [r3, #24]
 800609e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6a1b      	ldr	r3, [r3, #32]
 80060a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	031b      	lsls	r3, r3, #12
 80060b2:	697a      	ldr	r2, [r7, #20]
 80060b4:	4313      	orrs	r3, r2
 80060b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80060be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	011b      	lsls	r3, r3, #4
 80060c4:	693a      	ldr	r2, [r7, #16]
 80060c6:	4313      	orrs	r3, r2
 80060c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	697a      	ldr	r2, [r7, #20]
 80060ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	693a      	ldr	r2, [r7, #16]
 80060d4:	621a      	str	r2, [r3, #32]
}
 80060d6:	bf00      	nop
 80060d8:	371c      	adds	r7, #28
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr

080060e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80060e2:	b480      	push	{r7}
 80060e4:	b085      	sub	sp, #20
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	6078      	str	r0, [r7, #4]
 80060ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80060fa:	683a      	ldr	r2, [r7, #0]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	4313      	orrs	r3, r2
 8006100:	f043 0307 	orr.w	r3, r3, #7
 8006104:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	68fa      	ldr	r2, [r7, #12]
 800610a:	609a      	str	r2, [r3, #8]
}
 800610c:	bf00      	nop
 800610e:	3714      	adds	r7, #20
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr

08006118 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006118:	b480      	push	{r7}
 800611a:	b087      	sub	sp, #28
 800611c:	af00      	add	r7, sp, #0
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	60b9      	str	r1, [r7, #8]
 8006122:	607a      	str	r2, [r7, #4]
 8006124:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006132:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	021a      	lsls	r2, r3, #8
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	431a      	orrs	r2, r3
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	4313      	orrs	r3, r2
 8006140:	697a      	ldr	r2, [r7, #20]
 8006142:	4313      	orrs	r3, r2
 8006144:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	697a      	ldr	r2, [r7, #20]
 800614a:	609a      	str	r2, [r3, #8]
}
 800614c:	bf00      	nop
 800614e:	371c      	adds	r7, #28
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006158:	b480      	push	{r7}
 800615a:	b087      	sub	sp, #28
 800615c:	af00      	add	r7, sp, #0
 800615e:	60f8      	str	r0, [r7, #12]
 8006160:	60b9      	str	r1, [r7, #8]
 8006162:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	f003 031f 	and.w	r3, r3, #31
 800616a:	2201      	movs	r2, #1
 800616c:	fa02 f303 	lsl.w	r3, r2, r3
 8006170:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	6a1a      	ldr	r2, [r3, #32]
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	43db      	mvns	r3, r3
 800617a:	401a      	ands	r2, r3
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	6a1a      	ldr	r2, [r3, #32]
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	f003 031f 	and.w	r3, r3, #31
 800618a:	6879      	ldr	r1, [r7, #4]
 800618c:	fa01 f303 	lsl.w	r3, r1, r3
 8006190:	431a      	orrs	r2, r3
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	621a      	str	r2, [r3, #32]
}
 8006196:	bf00      	nop
 8006198:	371c      	adds	r7, #28
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr
	...

080061a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b085      	sub	sp, #20
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d101      	bne.n	80061bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061b8:	2302      	movs	r3, #2
 80061ba:	e05a      	b.n	8006272 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2202      	movs	r2, #2
 80061c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	68fa      	ldr	r2, [r7, #12]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	68fa      	ldr	r2, [r7, #12]
 80061f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a21      	ldr	r2, [pc, #132]	; (8006280 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d022      	beq.n	8006246 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006208:	d01d      	beq.n	8006246 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a1d      	ldr	r2, [pc, #116]	; (8006284 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d018      	beq.n	8006246 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a1b      	ldr	r2, [pc, #108]	; (8006288 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d013      	beq.n	8006246 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a1a      	ldr	r2, [pc, #104]	; (800628c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d00e      	beq.n	8006246 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a18      	ldr	r2, [pc, #96]	; (8006290 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d009      	beq.n	8006246 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a17      	ldr	r2, [pc, #92]	; (8006294 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d004      	beq.n	8006246 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a15      	ldr	r2, [pc, #84]	; (8006298 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d10c      	bne.n	8006260 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800624c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	68ba      	ldr	r2, [r7, #8]
 8006254:	4313      	orrs	r3, r2
 8006256:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	68ba      	ldr	r2, [r7, #8]
 800625e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2201      	movs	r2, #1
 8006264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006270:	2300      	movs	r3, #0
}
 8006272:	4618      	mov	r0, r3
 8006274:	3714      	adds	r7, #20
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr
 800627e:	bf00      	nop
 8006280:	40010000 	.word	0x40010000
 8006284:	40000400 	.word	0x40000400
 8006288:	40000800 	.word	0x40000800
 800628c:	40000c00 	.word	0x40000c00
 8006290:	40010400 	.word	0x40010400
 8006294:	40014000 	.word	0x40014000
 8006298:	40001800 	.word	0x40001800

0800629c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800629c:	b480      	push	{r7}
 800629e:	b085      	sub	sp, #20
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80062a6:	2300      	movs	r3, #0
 80062a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d101      	bne.n	80062b8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80062b4:	2302      	movs	r3, #2
 80062b6:	e03d      	b.n	8006334 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2201      	movs	r2, #1
 80062bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	68db      	ldr	r3, [r3, #12]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	4313      	orrs	r3, r2
 80062da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	4313      	orrs	r3, r2
 80062e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4313      	orrs	r3, r2
 80062f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	691b      	ldr	r3, [r3, #16]
 8006302:	4313      	orrs	r3, r2
 8006304:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	695b      	ldr	r3, [r3, #20]
 8006310:	4313      	orrs	r3, r2
 8006312:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	69db      	ldr	r3, [r3, #28]
 800631e:	4313      	orrs	r3, r2
 8006320:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	68fa      	ldr	r2, [r7, #12]
 8006328:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2200      	movs	r2, #0
 800632e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006332:	2300      	movs	r3, #0
}
 8006334:	4618      	mov	r0, r3
 8006336:	3714      	adds	r7, #20
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr

08006340 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006340:	b480      	push	{r7}
 8006342:	b083      	sub	sp, #12
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006348:	bf00      	nop
 800634a:	370c      	adds	r7, #12
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr

08006354 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006354:	b480      	push	{r7}
 8006356:	b083      	sub	sp, #12
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800635c:	bf00      	nop
 800635e:	370c      	adds	r7, #12
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr

08006368 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b082      	sub	sp, #8
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d101      	bne.n	800637a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	e03f      	b.n	80063fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006380:	b2db      	uxtb	r3, r3
 8006382:	2b00      	cmp	r3, #0
 8006384:	d106      	bne.n	8006394 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f7fc fc60 	bl	8002c54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2224      	movs	r2, #36	; 0x24
 8006398:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	68da      	ldr	r2, [r3, #12]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80063aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f000 fbb5 	bl	8006b1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	691a      	ldr	r2, [r3, #16]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80063c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	695a      	ldr	r2, [r3, #20]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80063d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	68da      	ldr	r2, [r3, #12]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80063e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2200      	movs	r2, #0
 80063e6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2220      	movs	r2, #32
 80063ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2220      	movs	r2, #32
 80063f4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80063f8:	2300      	movs	r3, #0
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3708      	adds	r7, #8
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}

08006402 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006402:	b480      	push	{r7}
 8006404:	b085      	sub	sp, #20
 8006406:	af00      	add	r7, sp, #0
 8006408:	60f8      	str	r0, [r7, #12]
 800640a:	60b9      	str	r1, [r7, #8]
 800640c:	4613      	mov	r3, r2
 800640e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006416:	b2db      	uxtb	r3, r3
 8006418:	2b20      	cmp	r3, #32
 800641a:	d140      	bne.n	800649e <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d002      	beq.n	8006428 <HAL_UART_Receive_IT+0x26>
 8006422:	88fb      	ldrh	r3, [r7, #6]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d101      	bne.n	800642c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	e039      	b.n	80064a0 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006432:	2b01      	cmp	r3, #1
 8006434:	d101      	bne.n	800643a <HAL_UART_Receive_IT+0x38>
 8006436:	2302      	movs	r3, #2
 8006438:	e032      	b.n	80064a0 <HAL_UART_Receive_IT+0x9e>
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2201      	movs	r2, #1
 800643e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	68ba      	ldr	r2, [r7, #8]
 8006446:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	88fa      	ldrh	r2, [r7, #6]
 800644c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	88fa      	ldrh	r2, [r7, #6]
 8006452:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2200      	movs	r2, #0
 8006458:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2222      	movs	r2, #34	; 0x22
 800645e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2200      	movs	r2, #0
 8006466:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	68da      	ldr	r2, [r3, #12]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006478:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	695a      	ldr	r2, [r3, #20]
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f042 0201 	orr.w	r2, r2, #1
 8006488:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	68da      	ldr	r2, [r3, #12]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f042 0220 	orr.w	r2, r2, #32
 8006498:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800649a:	2300      	movs	r3, #0
 800649c:	e000      	b.n	80064a0 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800649e:	2302      	movs	r3, #2
  }
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3714      	adds	r7, #20
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr

080064ac <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b086      	sub	sp, #24
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	60f8      	str	r0, [r7, #12]
 80064b4:	60b9      	str	r1, [r7, #8]
 80064b6:	4613      	mov	r3, r2
 80064b8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80064c0:	b2db      	uxtb	r3, r3
 80064c2:	2b20      	cmp	r3, #32
 80064c4:	d153      	bne.n	800656e <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d002      	beq.n	80064d2 <HAL_UART_Transmit_DMA+0x26>
 80064cc:	88fb      	ldrh	r3, [r7, #6]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d101      	bne.n	80064d6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	e04c      	b.n	8006570 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d101      	bne.n	80064e4 <HAL_UART_Transmit_DMA+0x38>
 80064e0:	2302      	movs	r3, #2
 80064e2:	e045      	b.n	8006570 <HAL_UART_Transmit_DMA+0xc4>
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80064ec:	68ba      	ldr	r2, [r7, #8]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	88fa      	ldrh	r2, [r7, #6]
 80064f6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	88fa      	ldrh	r2, [r7, #6]
 80064fc:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2200      	movs	r2, #0
 8006502:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2221      	movs	r2, #33	; 0x21
 8006508:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006510:	4a19      	ldr	r2, [pc, #100]	; (8006578 <HAL_UART_Transmit_DMA+0xcc>)
 8006512:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006518:	4a18      	ldr	r2, [pc, #96]	; (800657c <HAL_UART_Transmit_DMA+0xd0>)
 800651a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006520:	4a17      	ldr	r2, [pc, #92]	; (8006580 <HAL_UART_Transmit_DMA+0xd4>)
 8006522:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006528:	2200      	movs	r2, #0
 800652a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800652c:	f107 0308 	add.w	r3, r7, #8
 8006530:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	6819      	ldr	r1, [r3, #0]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	3304      	adds	r3, #4
 8006540:	461a      	mov	r2, r3
 8006542:	88fb      	ldrh	r3, [r7, #6]
 8006544:	f7fd fc02 	bl	8003d4c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006550:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2200      	movs	r2, #0
 8006556:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	695a      	ldr	r2, [r3, #20]
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006568:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800656a:	2300      	movs	r3, #0
 800656c:	e000      	b.n	8006570 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800656e:	2302      	movs	r3, #2
  }
}
 8006570:	4618      	mov	r0, r3
 8006572:	3718      	adds	r7, #24
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}
 8006578:	080067ad 	.word	0x080067ad
 800657c:	080067ff 	.word	0x080067ff
 8006580:	0800681b 	.word	0x0800681b

08006584 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b088      	sub	sp, #32
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	68db      	ldr	r3, [r3, #12]
 800659a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	695b      	ldr	r3, [r3, #20]
 80065a2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80065a4:	2300      	movs	r3, #0
 80065a6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80065a8:	2300      	movs	r3, #0
 80065aa:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80065ac:	69fb      	ldr	r3, [r7, #28]
 80065ae:	f003 030f 	and.w	r3, r3, #15
 80065b2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d10d      	bne.n	80065d6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80065ba:	69fb      	ldr	r3, [r7, #28]
 80065bc:	f003 0320 	and.w	r3, r3, #32
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d008      	beq.n	80065d6 <HAL_UART_IRQHandler+0x52>
 80065c4:	69bb      	ldr	r3, [r7, #24]
 80065c6:	f003 0320 	and.w	r3, r3, #32
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d003      	beq.n	80065d6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f000 fa23 	bl	8006a1a <UART_Receive_IT>
      return;
 80065d4:	e0d1      	b.n	800677a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	f000 80b0 	beq.w	800673e <HAL_UART_IRQHandler+0x1ba>
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	f003 0301 	and.w	r3, r3, #1
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d105      	bne.n	80065f4 <HAL_UART_IRQHandler+0x70>
 80065e8:	69bb      	ldr	r3, [r7, #24]
 80065ea:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	f000 80a5 	beq.w	800673e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80065f4:	69fb      	ldr	r3, [r7, #28]
 80065f6:	f003 0301 	and.w	r3, r3, #1
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d00a      	beq.n	8006614 <HAL_UART_IRQHandler+0x90>
 80065fe:	69bb      	ldr	r3, [r7, #24]
 8006600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006604:	2b00      	cmp	r3, #0
 8006606:	d005      	beq.n	8006614 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800660c:	f043 0201 	orr.w	r2, r3, #1
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006614:	69fb      	ldr	r3, [r7, #28]
 8006616:	f003 0304 	and.w	r3, r3, #4
 800661a:	2b00      	cmp	r3, #0
 800661c:	d00a      	beq.n	8006634 <HAL_UART_IRQHandler+0xb0>
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	f003 0301 	and.w	r3, r3, #1
 8006624:	2b00      	cmp	r3, #0
 8006626:	d005      	beq.n	8006634 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800662c:	f043 0202 	orr.w	r2, r3, #2
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006634:	69fb      	ldr	r3, [r7, #28]
 8006636:	f003 0302 	and.w	r3, r3, #2
 800663a:	2b00      	cmp	r3, #0
 800663c:	d00a      	beq.n	8006654 <HAL_UART_IRQHandler+0xd0>
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	f003 0301 	and.w	r3, r3, #1
 8006644:	2b00      	cmp	r3, #0
 8006646:	d005      	beq.n	8006654 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800664c:	f043 0204 	orr.w	r2, r3, #4
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006654:	69fb      	ldr	r3, [r7, #28]
 8006656:	f003 0308 	and.w	r3, r3, #8
 800665a:	2b00      	cmp	r3, #0
 800665c:	d00f      	beq.n	800667e <HAL_UART_IRQHandler+0xfa>
 800665e:	69bb      	ldr	r3, [r7, #24]
 8006660:	f003 0320 	and.w	r3, r3, #32
 8006664:	2b00      	cmp	r3, #0
 8006666:	d104      	bne.n	8006672 <HAL_UART_IRQHandler+0xee>
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	f003 0301 	and.w	r3, r3, #1
 800666e:	2b00      	cmp	r3, #0
 8006670:	d005      	beq.n	800667e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006676:	f043 0208 	orr.w	r2, r3, #8
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006682:	2b00      	cmp	r3, #0
 8006684:	d078      	beq.n	8006778 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006686:	69fb      	ldr	r3, [r7, #28]
 8006688:	f003 0320 	and.w	r3, r3, #32
 800668c:	2b00      	cmp	r3, #0
 800668e:	d007      	beq.n	80066a0 <HAL_UART_IRQHandler+0x11c>
 8006690:	69bb      	ldr	r3, [r7, #24]
 8006692:	f003 0320 	and.w	r3, r3, #32
 8006696:	2b00      	cmp	r3, #0
 8006698:	d002      	beq.n	80066a0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f000 f9bd 	bl	8006a1a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	695b      	ldr	r3, [r3, #20]
 80066a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066aa:	2b40      	cmp	r3, #64	; 0x40
 80066ac:	bf0c      	ite	eq
 80066ae:	2301      	moveq	r3, #1
 80066b0:	2300      	movne	r3, #0
 80066b2:	b2db      	uxtb	r3, r3
 80066b4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066ba:	f003 0308 	and.w	r3, r3, #8
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d102      	bne.n	80066c8 <HAL_UART_IRQHandler+0x144>
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d031      	beq.n	800672c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f000 f906 	bl	80068da <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	695b      	ldr	r3, [r3, #20]
 80066d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066d8:	2b40      	cmp	r3, #64	; 0x40
 80066da:	d123      	bne.n	8006724 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	695a      	ldr	r2, [r3, #20]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066ea:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d013      	beq.n	800671c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066f8:	4a21      	ldr	r2, [pc, #132]	; (8006780 <HAL_UART_IRQHandler+0x1fc>)
 80066fa:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006700:	4618      	mov	r0, r3
 8006702:	f7fd fb7b 	bl	8003dfc <HAL_DMA_Abort_IT>
 8006706:	4603      	mov	r3, r0
 8006708:	2b00      	cmp	r3, #0
 800670a:	d016      	beq.n	800673a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006710:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006716:	4610      	mov	r0, r2
 8006718:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800671a:	e00e      	b.n	800673a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f000 f83b 	bl	8006798 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006722:	e00a      	b.n	800673a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f000 f837 	bl	8006798 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800672a:	e006      	b.n	800673a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f000 f833 	bl	8006798 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2200      	movs	r2, #0
 8006736:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006738:	e01e      	b.n	8006778 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800673a:	bf00      	nop
    return;
 800673c:	e01c      	b.n	8006778 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800673e:	69fb      	ldr	r3, [r7, #28]
 8006740:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006744:	2b00      	cmp	r3, #0
 8006746:	d008      	beq.n	800675a <HAL_UART_IRQHandler+0x1d6>
 8006748:	69bb      	ldr	r3, [r7, #24]
 800674a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800674e:	2b00      	cmp	r3, #0
 8006750:	d003      	beq.n	800675a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 f8f3 	bl	800693e <UART_Transmit_IT>
    return;
 8006758:	e00f      	b.n	800677a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800675a:	69fb      	ldr	r3, [r7, #28]
 800675c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006760:	2b00      	cmp	r3, #0
 8006762:	d00a      	beq.n	800677a <HAL_UART_IRQHandler+0x1f6>
 8006764:	69bb      	ldr	r3, [r7, #24]
 8006766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800676a:	2b00      	cmp	r3, #0
 800676c:	d005      	beq.n	800677a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f000 f93b 	bl	80069ea <UART_EndTransmit_IT>
    return;
 8006774:	bf00      	nop
 8006776:	e000      	b.n	800677a <HAL_UART_IRQHandler+0x1f6>
    return;
 8006778:	bf00      	nop
  }
}
 800677a:	3720      	adds	r7, #32
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}
 8006780:	08006917 	.word	0x08006917

08006784 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006784:	b480      	push	{r7}
 8006786:	b083      	sub	sp, #12
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800678c:	bf00      	nop
 800678e:	370c      	adds	r7, #12
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr

08006798 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006798:	b480      	push	{r7}
 800679a:	b083      	sub	sp, #12
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80067a0:	bf00      	nop
 80067a2:	370c      	adds	r7, #12
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr

080067ac <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b084      	sub	sp, #16
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067b8:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d113      	bne.n	80067f0 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2200      	movs	r2, #0
 80067cc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	695a      	ldr	r2, [r3, #20]
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80067dc:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	68da      	ldr	r2, [r3, #12]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067ec:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80067ee:	e002      	b.n	80067f6 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 80067f0:	68f8      	ldr	r0, [r7, #12]
 80067f2:	f7fb fce7 	bl	80021c4 <HAL_UART_TxCpltCallback>
}
 80067f6:	bf00      	nop
 80067f8:	3710      	adds	r7, #16
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}

080067fe <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80067fe:	b580      	push	{r7, lr}
 8006800:	b084      	sub	sp, #16
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800680a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800680c:	68f8      	ldr	r0, [r7, #12]
 800680e:	f7ff ffb9 	bl	8006784 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006812:	bf00      	nop
 8006814:	3710      	adds	r7, #16
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}

0800681a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800681a:	b580      	push	{r7, lr}
 800681c:	b084      	sub	sp, #16
 800681e:	af00      	add	r7, sp, #0
 8006820:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006822:	2300      	movs	r3, #0
 8006824:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800682a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	695b      	ldr	r3, [r3, #20]
 8006832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006836:	2b80      	cmp	r3, #128	; 0x80
 8006838:	bf0c      	ite	eq
 800683a:	2301      	moveq	r3, #1
 800683c:	2300      	movne	r3, #0
 800683e:	b2db      	uxtb	r3, r3
 8006840:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006848:	b2db      	uxtb	r3, r3
 800684a:	2b21      	cmp	r3, #33	; 0x21
 800684c:	d108      	bne.n	8006860 <UART_DMAError+0x46>
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d005      	beq.n	8006860 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	2200      	movs	r2, #0
 8006858:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800685a:	68b8      	ldr	r0, [r7, #8]
 800685c:	f000 f827 	bl	80068ae <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	695b      	ldr	r3, [r3, #20]
 8006866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800686a:	2b40      	cmp	r3, #64	; 0x40
 800686c:	bf0c      	ite	eq
 800686e:	2301      	moveq	r3, #1
 8006870:	2300      	movne	r3, #0
 8006872:	b2db      	uxtb	r3, r3
 8006874:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800687c:	b2db      	uxtb	r3, r3
 800687e:	2b22      	cmp	r3, #34	; 0x22
 8006880:	d108      	bne.n	8006894 <UART_DMAError+0x7a>
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d005      	beq.n	8006894 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	2200      	movs	r2, #0
 800688c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800688e:	68b8      	ldr	r0, [r7, #8]
 8006890:	f000 f823 	bl	80068da <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006898:	f043 0210 	orr.w	r2, r3, #16
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80068a0:	68b8      	ldr	r0, [r7, #8]
 80068a2:	f7ff ff79 	bl	8006798 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068a6:	bf00      	nop
 80068a8:	3710      	adds	r7, #16
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}

080068ae <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80068ae:	b480      	push	{r7}
 80068b0:	b083      	sub	sp, #12
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	68da      	ldr	r2, [r3, #12]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80068c4:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2220      	movs	r2, #32
 80068ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80068ce:	bf00      	nop
 80068d0:	370c      	adds	r7, #12
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr

080068da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80068da:	b480      	push	{r7}
 80068dc:	b083      	sub	sp, #12
 80068de:	af00      	add	r7, sp, #0
 80068e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	68da      	ldr	r2, [r3, #12]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80068f0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	695a      	ldr	r2, [r3, #20]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f022 0201 	bic.w	r2, r2, #1
 8006900:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2220      	movs	r2, #32
 8006906:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800690a:	bf00      	nop
 800690c:	370c      	adds	r7, #12
 800690e:	46bd      	mov	sp, r7
 8006910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006914:	4770      	bx	lr

08006916 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006916:	b580      	push	{r7, lr}
 8006918:	b084      	sub	sp, #16
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006922:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2200      	movs	r2, #0
 8006928:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2200      	movs	r2, #0
 800692e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006930:	68f8      	ldr	r0, [r7, #12]
 8006932:	f7ff ff31 	bl	8006798 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006936:	bf00      	nop
 8006938:	3710      	adds	r7, #16
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}

0800693e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800693e:	b480      	push	{r7}
 8006940:	b085      	sub	sp, #20
 8006942:	af00      	add	r7, sp, #0
 8006944:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800694c:	b2db      	uxtb	r3, r3
 800694e:	2b21      	cmp	r3, #33	; 0x21
 8006950:	d144      	bne.n	80069dc <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800695a:	d11a      	bne.n	8006992 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6a1b      	ldr	r3, [r3, #32]
 8006960:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	881b      	ldrh	r3, [r3, #0]
 8006966:	461a      	mov	r2, r3
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006970:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	691b      	ldr	r3, [r3, #16]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d105      	bne.n	8006986 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6a1b      	ldr	r3, [r3, #32]
 800697e:	1c9a      	adds	r2, r3, #2
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	621a      	str	r2, [r3, #32]
 8006984:	e00e      	b.n	80069a4 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6a1b      	ldr	r3, [r3, #32]
 800698a:	1c5a      	adds	r2, r3, #1
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	621a      	str	r2, [r3, #32]
 8006990:	e008      	b.n	80069a4 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6a1b      	ldr	r3, [r3, #32]
 8006996:	1c59      	adds	r1, r3, #1
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	6211      	str	r1, [r2, #32]
 800699c:	781a      	ldrb	r2, [r3, #0]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	3b01      	subs	r3, #1
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	4619      	mov	r1, r3
 80069b2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d10f      	bne.n	80069d8 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	68da      	ldr	r2, [r3, #12]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80069c6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	68da      	ldr	r2, [r3, #12]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069d6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80069d8:	2300      	movs	r3, #0
 80069da:	e000      	b.n	80069de <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80069dc:	2302      	movs	r3, #2
  }
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3714      	adds	r7, #20
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr

080069ea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80069ea:	b580      	push	{r7, lr}
 80069ec:	b082      	sub	sp, #8
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	68da      	ldr	r2, [r3, #12]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a00:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2220      	movs	r2, #32
 8006a06:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f7fb fbda 	bl	80021c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006a10:	2300      	movs	r3, #0
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3708      	adds	r7, #8
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}

08006a1a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006a1a:	b580      	push	{r7, lr}
 8006a1c:	b084      	sub	sp, #16
 8006a1e:	af00      	add	r7, sp, #0
 8006a20:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	2b22      	cmp	r3, #34	; 0x22
 8006a2c:	d171      	bne.n	8006b12 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a36:	d123      	bne.n	8006a80 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a3c:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	691b      	ldr	r3, [r3, #16]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d10e      	bne.n	8006a64 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a52:	b29a      	uxth	r2, r3
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a5c:	1c9a      	adds	r2, r3, #2
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	629a      	str	r2, [r3, #40]	; 0x28
 8006a62:	e029      	b.n	8006ab8 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	b2db      	uxtb	r3, r3
 8006a6e:	b29a      	uxth	r2, r3
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a78:	1c5a      	adds	r2, r3, #1
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	629a      	str	r2, [r3, #40]	; 0x28
 8006a7e:	e01b      	b.n	8006ab8 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	691b      	ldr	r3, [r3, #16]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d10a      	bne.n	8006a9e <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	6858      	ldr	r0, [r3, #4]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a92:	1c59      	adds	r1, r3, #1
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	6291      	str	r1, [r2, #40]	; 0x28
 8006a98:	b2c2      	uxtb	r2, r0
 8006a9a:	701a      	strb	r2, [r3, #0]
 8006a9c:	e00c      	b.n	8006ab8 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	b2da      	uxtb	r2, r3
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aaa:	1c58      	adds	r0, r3, #1
 8006aac:	6879      	ldr	r1, [r7, #4]
 8006aae:	6288      	str	r0, [r1, #40]	; 0x28
 8006ab0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006ab4:	b2d2      	uxtb	r2, r2
 8006ab6:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	3b01      	subs	r3, #1
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	4619      	mov	r1, r3
 8006ac6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d120      	bne.n	8006b0e <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	68da      	ldr	r2, [r3, #12]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f022 0220 	bic.w	r2, r2, #32
 8006ada:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	68da      	ldr	r2, [r3, #12]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006aea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	695a      	ldr	r2, [r3, #20]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f022 0201 	bic.w	r2, r2, #1
 8006afa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2220      	movs	r2, #32
 8006b00:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f7fb fb47 	bl	8002198 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	e002      	b.n	8006b14 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	e000      	b.n	8006b14 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006b12:	2302      	movs	r3, #2
  }
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	3710      	adds	r7, #16
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}

08006b1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b20:	b085      	sub	sp, #20
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	691b      	ldr	r3, [r3, #16]
 8006b2c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	68da      	ldr	r2, [r3, #12]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	430a      	orrs	r2, r1
 8006b3a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	689a      	ldr	r2, [r3, #8]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	691b      	ldr	r3, [r3, #16]
 8006b44:	431a      	orrs	r2, r3
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	695b      	ldr	r3, [r3, #20]
 8006b4a:	431a      	orrs	r2, r3
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	69db      	ldr	r3, [r3, #28]
 8006b50:	4313      	orrs	r3, r2
 8006b52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	68db      	ldr	r3, [r3, #12]
 8006b5a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006b5e:	f023 030c 	bic.w	r3, r3, #12
 8006b62:	687a      	ldr	r2, [r7, #4]
 8006b64:	6812      	ldr	r2, [r2, #0]
 8006b66:	68f9      	ldr	r1, [r7, #12]
 8006b68:	430b      	orrs	r3, r1
 8006b6a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	695b      	ldr	r3, [r3, #20]
 8006b72:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	699a      	ldr	r2, [r3, #24]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	430a      	orrs	r2, r1
 8006b80:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	69db      	ldr	r3, [r3, #28]
 8006b86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b8a:	f040 818b 	bne.w	8006ea4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4ac1      	ldr	r2, [pc, #772]	; (8006e98 <UART_SetConfig+0x37c>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d005      	beq.n	8006ba4 <UART_SetConfig+0x88>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4abf      	ldr	r2, [pc, #764]	; (8006e9c <UART_SetConfig+0x380>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	f040 80bd 	bne.w	8006d1e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006ba4:	f7fe f9c2 	bl	8004f2c <HAL_RCC_GetPCLK2Freq>
 8006ba8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	461d      	mov	r5, r3
 8006bae:	f04f 0600 	mov.w	r6, #0
 8006bb2:	46a8      	mov	r8, r5
 8006bb4:	46b1      	mov	r9, r6
 8006bb6:	eb18 0308 	adds.w	r3, r8, r8
 8006bba:	eb49 0409 	adc.w	r4, r9, r9
 8006bbe:	4698      	mov	r8, r3
 8006bc0:	46a1      	mov	r9, r4
 8006bc2:	eb18 0805 	adds.w	r8, r8, r5
 8006bc6:	eb49 0906 	adc.w	r9, r9, r6
 8006bca:	f04f 0100 	mov.w	r1, #0
 8006bce:	f04f 0200 	mov.w	r2, #0
 8006bd2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006bd6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006bda:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006bde:	4688      	mov	r8, r1
 8006be0:	4691      	mov	r9, r2
 8006be2:	eb18 0005 	adds.w	r0, r8, r5
 8006be6:	eb49 0106 	adc.w	r1, r9, r6
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	461d      	mov	r5, r3
 8006bf0:	f04f 0600 	mov.w	r6, #0
 8006bf4:	196b      	adds	r3, r5, r5
 8006bf6:	eb46 0406 	adc.w	r4, r6, r6
 8006bfa:	461a      	mov	r2, r3
 8006bfc:	4623      	mov	r3, r4
 8006bfe:	f7fa f823 	bl	8000c48 <__aeabi_uldivmod>
 8006c02:	4603      	mov	r3, r0
 8006c04:	460c      	mov	r4, r1
 8006c06:	461a      	mov	r2, r3
 8006c08:	4ba5      	ldr	r3, [pc, #660]	; (8006ea0 <UART_SetConfig+0x384>)
 8006c0a:	fba3 2302 	umull	r2, r3, r3, r2
 8006c0e:	095b      	lsrs	r3, r3, #5
 8006c10:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	461d      	mov	r5, r3
 8006c18:	f04f 0600 	mov.w	r6, #0
 8006c1c:	46a9      	mov	r9, r5
 8006c1e:	46b2      	mov	sl, r6
 8006c20:	eb19 0309 	adds.w	r3, r9, r9
 8006c24:	eb4a 040a 	adc.w	r4, sl, sl
 8006c28:	4699      	mov	r9, r3
 8006c2a:	46a2      	mov	sl, r4
 8006c2c:	eb19 0905 	adds.w	r9, r9, r5
 8006c30:	eb4a 0a06 	adc.w	sl, sl, r6
 8006c34:	f04f 0100 	mov.w	r1, #0
 8006c38:	f04f 0200 	mov.w	r2, #0
 8006c3c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c40:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006c44:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006c48:	4689      	mov	r9, r1
 8006c4a:	4692      	mov	sl, r2
 8006c4c:	eb19 0005 	adds.w	r0, r9, r5
 8006c50:	eb4a 0106 	adc.w	r1, sl, r6
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	461d      	mov	r5, r3
 8006c5a:	f04f 0600 	mov.w	r6, #0
 8006c5e:	196b      	adds	r3, r5, r5
 8006c60:	eb46 0406 	adc.w	r4, r6, r6
 8006c64:	461a      	mov	r2, r3
 8006c66:	4623      	mov	r3, r4
 8006c68:	f7f9 ffee 	bl	8000c48 <__aeabi_uldivmod>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	460c      	mov	r4, r1
 8006c70:	461a      	mov	r2, r3
 8006c72:	4b8b      	ldr	r3, [pc, #556]	; (8006ea0 <UART_SetConfig+0x384>)
 8006c74:	fba3 1302 	umull	r1, r3, r3, r2
 8006c78:	095b      	lsrs	r3, r3, #5
 8006c7a:	2164      	movs	r1, #100	; 0x64
 8006c7c:	fb01 f303 	mul.w	r3, r1, r3
 8006c80:	1ad3      	subs	r3, r2, r3
 8006c82:	00db      	lsls	r3, r3, #3
 8006c84:	3332      	adds	r3, #50	; 0x32
 8006c86:	4a86      	ldr	r2, [pc, #536]	; (8006ea0 <UART_SetConfig+0x384>)
 8006c88:	fba2 2303 	umull	r2, r3, r2, r3
 8006c8c:	095b      	lsrs	r3, r3, #5
 8006c8e:	005b      	lsls	r3, r3, #1
 8006c90:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006c94:	4498      	add	r8, r3
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	461d      	mov	r5, r3
 8006c9a:	f04f 0600 	mov.w	r6, #0
 8006c9e:	46a9      	mov	r9, r5
 8006ca0:	46b2      	mov	sl, r6
 8006ca2:	eb19 0309 	adds.w	r3, r9, r9
 8006ca6:	eb4a 040a 	adc.w	r4, sl, sl
 8006caa:	4699      	mov	r9, r3
 8006cac:	46a2      	mov	sl, r4
 8006cae:	eb19 0905 	adds.w	r9, r9, r5
 8006cb2:	eb4a 0a06 	adc.w	sl, sl, r6
 8006cb6:	f04f 0100 	mov.w	r1, #0
 8006cba:	f04f 0200 	mov.w	r2, #0
 8006cbe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006cc2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006cc6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006cca:	4689      	mov	r9, r1
 8006ccc:	4692      	mov	sl, r2
 8006cce:	eb19 0005 	adds.w	r0, r9, r5
 8006cd2:	eb4a 0106 	adc.w	r1, sl, r6
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	461d      	mov	r5, r3
 8006cdc:	f04f 0600 	mov.w	r6, #0
 8006ce0:	196b      	adds	r3, r5, r5
 8006ce2:	eb46 0406 	adc.w	r4, r6, r6
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	4623      	mov	r3, r4
 8006cea:	f7f9 ffad 	bl	8000c48 <__aeabi_uldivmod>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	460c      	mov	r4, r1
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	4b6a      	ldr	r3, [pc, #424]	; (8006ea0 <UART_SetConfig+0x384>)
 8006cf6:	fba3 1302 	umull	r1, r3, r3, r2
 8006cfa:	095b      	lsrs	r3, r3, #5
 8006cfc:	2164      	movs	r1, #100	; 0x64
 8006cfe:	fb01 f303 	mul.w	r3, r1, r3
 8006d02:	1ad3      	subs	r3, r2, r3
 8006d04:	00db      	lsls	r3, r3, #3
 8006d06:	3332      	adds	r3, #50	; 0x32
 8006d08:	4a65      	ldr	r2, [pc, #404]	; (8006ea0 <UART_SetConfig+0x384>)
 8006d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d0e:	095b      	lsrs	r3, r3, #5
 8006d10:	f003 0207 	and.w	r2, r3, #7
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4442      	add	r2, r8
 8006d1a:	609a      	str	r2, [r3, #8]
 8006d1c:	e26f      	b.n	80071fe <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006d1e:	f7fe f8f1 	bl	8004f04 <HAL_RCC_GetPCLK1Freq>
 8006d22:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	461d      	mov	r5, r3
 8006d28:	f04f 0600 	mov.w	r6, #0
 8006d2c:	46a8      	mov	r8, r5
 8006d2e:	46b1      	mov	r9, r6
 8006d30:	eb18 0308 	adds.w	r3, r8, r8
 8006d34:	eb49 0409 	adc.w	r4, r9, r9
 8006d38:	4698      	mov	r8, r3
 8006d3a:	46a1      	mov	r9, r4
 8006d3c:	eb18 0805 	adds.w	r8, r8, r5
 8006d40:	eb49 0906 	adc.w	r9, r9, r6
 8006d44:	f04f 0100 	mov.w	r1, #0
 8006d48:	f04f 0200 	mov.w	r2, #0
 8006d4c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006d50:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006d54:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006d58:	4688      	mov	r8, r1
 8006d5a:	4691      	mov	r9, r2
 8006d5c:	eb18 0005 	adds.w	r0, r8, r5
 8006d60:	eb49 0106 	adc.w	r1, r9, r6
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	461d      	mov	r5, r3
 8006d6a:	f04f 0600 	mov.w	r6, #0
 8006d6e:	196b      	adds	r3, r5, r5
 8006d70:	eb46 0406 	adc.w	r4, r6, r6
 8006d74:	461a      	mov	r2, r3
 8006d76:	4623      	mov	r3, r4
 8006d78:	f7f9 ff66 	bl	8000c48 <__aeabi_uldivmod>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	460c      	mov	r4, r1
 8006d80:	461a      	mov	r2, r3
 8006d82:	4b47      	ldr	r3, [pc, #284]	; (8006ea0 <UART_SetConfig+0x384>)
 8006d84:	fba3 2302 	umull	r2, r3, r3, r2
 8006d88:	095b      	lsrs	r3, r3, #5
 8006d8a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	461d      	mov	r5, r3
 8006d92:	f04f 0600 	mov.w	r6, #0
 8006d96:	46a9      	mov	r9, r5
 8006d98:	46b2      	mov	sl, r6
 8006d9a:	eb19 0309 	adds.w	r3, r9, r9
 8006d9e:	eb4a 040a 	adc.w	r4, sl, sl
 8006da2:	4699      	mov	r9, r3
 8006da4:	46a2      	mov	sl, r4
 8006da6:	eb19 0905 	adds.w	r9, r9, r5
 8006daa:	eb4a 0a06 	adc.w	sl, sl, r6
 8006dae:	f04f 0100 	mov.w	r1, #0
 8006db2:	f04f 0200 	mov.w	r2, #0
 8006db6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006dba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006dbe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006dc2:	4689      	mov	r9, r1
 8006dc4:	4692      	mov	sl, r2
 8006dc6:	eb19 0005 	adds.w	r0, r9, r5
 8006dca:	eb4a 0106 	adc.w	r1, sl, r6
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	461d      	mov	r5, r3
 8006dd4:	f04f 0600 	mov.w	r6, #0
 8006dd8:	196b      	adds	r3, r5, r5
 8006dda:	eb46 0406 	adc.w	r4, r6, r6
 8006dde:	461a      	mov	r2, r3
 8006de0:	4623      	mov	r3, r4
 8006de2:	f7f9 ff31 	bl	8000c48 <__aeabi_uldivmod>
 8006de6:	4603      	mov	r3, r0
 8006de8:	460c      	mov	r4, r1
 8006dea:	461a      	mov	r2, r3
 8006dec:	4b2c      	ldr	r3, [pc, #176]	; (8006ea0 <UART_SetConfig+0x384>)
 8006dee:	fba3 1302 	umull	r1, r3, r3, r2
 8006df2:	095b      	lsrs	r3, r3, #5
 8006df4:	2164      	movs	r1, #100	; 0x64
 8006df6:	fb01 f303 	mul.w	r3, r1, r3
 8006dfa:	1ad3      	subs	r3, r2, r3
 8006dfc:	00db      	lsls	r3, r3, #3
 8006dfe:	3332      	adds	r3, #50	; 0x32
 8006e00:	4a27      	ldr	r2, [pc, #156]	; (8006ea0 <UART_SetConfig+0x384>)
 8006e02:	fba2 2303 	umull	r2, r3, r2, r3
 8006e06:	095b      	lsrs	r3, r3, #5
 8006e08:	005b      	lsls	r3, r3, #1
 8006e0a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006e0e:	4498      	add	r8, r3
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	461d      	mov	r5, r3
 8006e14:	f04f 0600 	mov.w	r6, #0
 8006e18:	46a9      	mov	r9, r5
 8006e1a:	46b2      	mov	sl, r6
 8006e1c:	eb19 0309 	adds.w	r3, r9, r9
 8006e20:	eb4a 040a 	adc.w	r4, sl, sl
 8006e24:	4699      	mov	r9, r3
 8006e26:	46a2      	mov	sl, r4
 8006e28:	eb19 0905 	adds.w	r9, r9, r5
 8006e2c:	eb4a 0a06 	adc.w	sl, sl, r6
 8006e30:	f04f 0100 	mov.w	r1, #0
 8006e34:	f04f 0200 	mov.w	r2, #0
 8006e38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006e3c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006e40:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006e44:	4689      	mov	r9, r1
 8006e46:	4692      	mov	sl, r2
 8006e48:	eb19 0005 	adds.w	r0, r9, r5
 8006e4c:	eb4a 0106 	adc.w	r1, sl, r6
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	461d      	mov	r5, r3
 8006e56:	f04f 0600 	mov.w	r6, #0
 8006e5a:	196b      	adds	r3, r5, r5
 8006e5c:	eb46 0406 	adc.w	r4, r6, r6
 8006e60:	461a      	mov	r2, r3
 8006e62:	4623      	mov	r3, r4
 8006e64:	f7f9 fef0 	bl	8000c48 <__aeabi_uldivmod>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	460c      	mov	r4, r1
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	4b0c      	ldr	r3, [pc, #48]	; (8006ea0 <UART_SetConfig+0x384>)
 8006e70:	fba3 1302 	umull	r1, r3, r3, r2
 8006e74:	095b      	lsrs	r3, r3, #5
 8006e76:	2164      	movs	r1, #100	; 0x64
 8006e78:	fb01 f303 	mul.w	r3, r1, r3
 8006e7c:	1ad3      	subs	r3, r2, r3
 8006e7e:	00db      	lsls	r3, r3, #3
 8006e80:	3332      	adds	r3, #50	; 0x32
 8006e82:	4a07      	ldr	r2, [pc, #28]	; (8006ea0 <UART_SetConfig+0x384>)
 8006e84:	fba2 2303 	umull	r2, r3, r2, r3
 8006e88:	095b      	lsrs	r3, r3, #5
 8006e8a:	f003 0207 	and.w	r2, r3, #7
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4442      	add	r2, r8
 8006e94:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006e96:	e1b2      	b.n	80071fe <UART_SetConfig+0x6e2>
 8006e98:	40011000 	.word	0x40011000
 8006e9c:	40011400 	.word	0x40011400
 8006ea0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4ad7      	ldr	r2, [pc, #860]	; (8007208 <UART_SetConfig+0x6ec>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d005      	beq.n	8006eba <UART_SetConfig+0x39e>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4ad6      	ldr	r2, [pc, #856]	; (800720c <UART_SetConfig+0x6f0>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	f040 80d1 	bne.w	800705c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006eba:	f7fe f837 	bl	8004f2c <HAL_RCC_GetPCLK2Freq>
 8006ebe:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	469a      	mov	sl, r3
 8006ec4:	f04f 0b00 	mov.w	fp, #0
 8006ec8:	46d0      	mov	r8, sl
 8006eca:	46d9      	mov	r9, fp
 8006ecc:	eb18 0308 	adds.w	r3, r8, r8
 8006ed0:	eb49 0409 	adc.w	r4, r9, r9
 8006ed4:	4698      	mov	r8, r3
 8006ed6:	46a1      	mov	r9, r4
 8006ed8:	eb18 080a 	adds.w	r8, r8, sl
 8006edc:	eb49 090b 	adc.w	r9, r9, fp
 8006ee0:	f04f 0100 	mov.w	r1, #0
 8006ee4:	f04f 0200 	mov.w	r2, #0
 8006ee8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006eec:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006ef0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006ef4:	4688      	mov	r8, r1
 8006ef6:	4691      	mov	r9, r2
 8006ef8:	eb1a 0508 	adds.w	r5, sl, r8
 8006efc:	eb4b 0609 	adc.w	r6, fp, r9
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	4619      	mov	r1, r3
 8006f06:	f04f 0200 	mov.w	r2, #0
 8006f0a:	f04f 0300 	mov.w	r3, #0
 8006f0e:	f04f 0400 	mov.w	r4, #0
 8006f12:	0094      	lsls	r4, r2, #2
 8006f14:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006f18:	008b      	lsls	r3, r1, #2
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	4623      	mov	r3, r4
 8006f1e:	4628      	mov	r0, r5
 8006f20:	4631      	mov	r1, r6
 8006f22:	f7f9 fe91 	bl	8000c48 <__aeabi_uldivmod>
 8006f26:	4603      	mov	r3, r0
 8006f28:	460c      	mov	r4, r1
 8006f2a:	461a      	mov	r2, r3
 8006f2c:	4bb8      	ldr	r3, [pc, #736]	; (8007210 <UART_SetConfig+0x6f4>)
 8006f2e:	fba3 2302 	umull	r2, r3, r3, r2
 8006f32:	095b      	lsrs	r3, r3, #5
 8006f34:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	469b      	mov	fp, r3
 8006f3c:	f04f 0c00 	mov.w	ip, #0
 8006f40:	46d9      	mov	r9, fp
 8006f42:	46e2      	mov	sl, ip
 8006f44:	eb19 0309 	adds.w	r3, r9, r9
 8006f48:	eb4a 040a 	adc.w	r4, sl, sl
 8006f4c:	4699      	mov	r9, r3
 8006f4e:	46a2      	mov	sl, r4
 8006f50:	eb19 090b 	adds.w	r9, r9, fp
 8006f54:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006f58:	f04f 0100 	mov.w	r1, #0
 8006f5c:	f04f 0200 	mov.w	r2, #0
 8006f60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006f64:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006f68:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006f6c:	4689      	mov	r9, r1
 8006f6e:	4692      	mov	sl, r2
 8006f70:	eb1b 0509 	adds.w	r5, fp, r9
 8006f74:	eb4c 060a 	adc.w	r6, ip, sl
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	4619      	mov	r1, r3
 8006f7e:	f04f 0200 	mov.w	r2, #0
 8006f82:	f04f 0300 	mov.w	r3, #0
 8006f86:	f04f 0400 	mov.w	r4, #0
 8006f8a:	0094      	lsls	r4, r2, #2
 8006f8c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006f90:	008b      	lsls	r3, r1, #2
 8006f92:	461a      	mov	r2, r3
 8006f94:	4623      	mov	r3, r4
 8006f96:	4628      	mov	r0, r5
 8006f98:	4631      	mov	r1, r6
 8006f9a:	f7f9 fe55 	bl	8000c48 <__aeabi_uldivmod>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	460c      	mov	r4, r1
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	4b9a      	ldr	r3, [pc, #616]	; (8007210 <UART_SetConfig+0x6f4>)
 8006fa6:	fba3 1302 	umull	r1, r3, r3, r2
 8006faa:	095b      	lsrs	r3, r3, #5
 8006fac:	2164      	movs	r1, #100	; 0x64
 8006fae:	fb01 f303 	mul.w	r3, r1, r3
 8006fb2:	1ad3      	subs	r3, r2, r3
 8006fb4:	011b      	lsls	r3, r3, #4
 8006fb6:	3332      	adds	r3, #50	; 0x32
 8006fb8:	4a95      	ldr	r2, [pc, #596]	; (8007210 <UART_SetConfig+0x6f4>)
 8006fba:	fba2 2303 	umull	r2, r3, r2, r3
 8006fbe:	095b      	lsrs	r3, r3, #5
 8006fc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006fc4:	4498      	add	r8, r3
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	469b      	mov	fp, r3
 8006fca:	f04f 0c00 	mov.w	ip, #0
 8006fce:	46d9      	mov	r9, fp
 8006fd0:	46e2      	mov	sl, ip
 8006fd2:	eb19 0309 	adds.w	r3, r9, r9
 8006fd6:	eb4a 040a 	adc.w	r4, sl, sl
 8006fda:	4699      	mov	r9, r3
 8006fdc:	46a2      	mov	sl, r4
 8006fde:	eb19 090b 	adds.w	r9, r9, fp
 8006fe2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006fe6:	f04f 0100 	mov.w	r1, #0
 8006fea:	f04f 0200 	mov.w	r2, #0
 8006fee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ff2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006ff6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006ffa:	4689      	mov	r9, r1
 8006ffc:	4692      	mov	sl, r2
 8006ffe:	eb1b 0509 	adds.w	r5, fp, r9
 8007002:	eb4c 060a 	adc.w	r6, ip, sl
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	4619      	mov	r1, r3
 800700c:	f04f 0200 	mov.w	r2, #0
 8007010:	f04f 0300 	mov.w	r3, #0
 8007014:	f04f 0400 	mov.w	r4, #0
 8007018:	0094      	lsls	r4, r2, #2
 800701a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800701e:	008b      	lsls	r3, r1, #2
 8007020:	461a      	mov	r2, r3
 8007022:	4623      	mov	r3, r4
 8007024:	4628      	mov	r0, r5
 8007026:	4631      	mov	r1, r6
 8007028:	f7f9 fe0e 	bl	8000c48 <__aeabi_uldivmod>
 800702c:	4603      	mov	r3, r0
 800702e:	460c      	mov	r4, r1
 8007030:	461a      	mov	r2, r3
 8007032:	4b77      	ldr	r3, [pc, #476]	; (8007210 <UART_SetConfig+0x6f4>)
 8007034:	fba3 1302 	umull	r1, r3, r3, r2
 8007038:	095b      	lsrs	r3, r3, #5
 800703a:	2164      	movs	r1, #100	; 0x64
 800703c:	fb01 f303 	mul.w	r3, r1, r3
 8007040:	1ad3      	subs	r3, r2, r3
 8007042:	011b      	lsls	r3, r3, #4
 8007044:	3332      	adds	r3, #50	; 0x32
 8007046:	4a72      	ldr	r2, [pc, #456]	; (8007210 <UART_SetConfig+0x6f4>)
 8007048:	fba2 2303 	umull	r2, r3, r2, r3
 800704c:	095b      	lsrs	r3, r3, #5
 800704e:	f003 020f 	and.w	r2, r3, #15
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4442      	add	r2, r8
 8007058:	609a      	str	r2, [r3, #8]
 800705a:	e0d0      	b.n	80071fe <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800705c:	f7fd ff52 	bl	8004f04 <HAL_RCC_GetPCLK1Freq>
 8007060:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	469a      	mov	sl, r3
 8007066:	f04f 0b00 	mov.w	fp, #0
 800706a:	46d0      	mov	r8, sl
 800706c:	46d9      	mov	r9, fp
 800706e:	eb18 0308 	adds.w	r3, r8, r8
 8007072:	eb49 0409 	adc.w	r4, r9, r9
 8007076:	4698      	mov	r8, r3
 8007078:	46a1      	mov	r9, r4
 800707a:	eb18 080a 	adds.w	r8, r8, sl
 800707e:	eb49 090b 	adc.w	r9, r9, fp
 8007082:	f04f 0100 	mov.w	r1, #0
 8007086:	f04f 0200 	mov.w	r2, #0
 800708a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800708e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007092:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007096:	4688      	mov	r8, r1
 8007098:	4691      	mov	r9, r2
 800709a:	eb1a 0508 	adds.w	r5, sl, r8
 800709e:	eb4b 0609 	adc.w	r6, fp, r9
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	4619      	mov	r1, r3
 80070a8:	f04f 0200 	mov.w	r2, #0
 80070ac:	f04f 0300 	mov.w	r3, #0
 80070b0:	f04f 0400 	mov.w	r4, #0
 80070b4:	0094      	lsls	r4, r2, #2
 80070b6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80070ba:	008b      	lsls	r3, r1, #2
 80070bc:	461a      	mov	r2, r3
 80070be:	4623      	mov	r3, r4
 80070c0:	4628      	mov	r0, r5
 80070c2:	4631      	mov	r1, r6
 80070c4:	f7f9 fdc0 	bl	8000c48 <__aeabi_uldivmod>
 80070c8:	4603      	mov	r3, r0
 80070ca:	460c      	mov	r4, r1
 80070cc:	461a      	mov	r2, r3
 80070ce:	4b50      	ldr	r3, [pc, #320]	; (8007210 <UART_SetConfig+0x6f4>)
 80070d0:	fba3 2302 	umull	r2, r3, r3, r2
 80070d4:	095b      	lsrs	r3, r3, #5
 80070d6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	469b      	mov	fp, r3
 80070de:	f04f 0c00 	mov.w	ip, #0
 80070e2:	46d9      	mov	r9, fp
 80070e4:	46e2      	mov	sl, ip
 80070e6:	eb19 0309 	adds.w	r3, r9, r9
 80070ea:	eb4a 040a 	adc.w	r4, sl, sl
 80070ee:	4699      	mov	r9, r3
 80070f0:	46a2      	mov	sl, r4
 80070f2:	eb19 090b 	adds.w	r9, r9, fp
 80070f6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80070fa:	f04f 0100 	mov.w	r1, #0
 80070fe:	f04f 0200 	mov.w	r2, #0
 8007102:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007106:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800710a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800710e:	4689      	mov	r9, r1
 8007110:	4692      	mov	sl, r2
 8007112:	eb1b 0509 	adds.w	r5, fp, r9
 8007116:	eb4c 060a 	adc.w	r6, ip, sl
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	4619      	mov	r1, r3
 8007120:	f04f 0200 	mov.w	r2, #0
 8007124:	f04f 0300 	mov.w	r3, #0
 8007128:	f04f 0400 	mov.w	r4, #0
 800712c:	0094      	lsls	r4, r2, #2
 800712e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007132:	008b      	lsls	r3, r1, #2
 8007134:	461a      	mov	r2, r3
 8007136:	4623      	mov	r3, r4
 8007138:	4628      	mov	r0, r5
 800713a:	4631      	mov	r1, r6
 800713c:	f7f9 fd84 	bl	8000c48 <__aeabi_uldivmod>
 8007140:	4603      	mov	r3, r0
 8007142:	460c      	mov	r4, r1
 8007144:	461a      	mov	r2, r3
 8007146:	4b32      	ldr	r3, [pc, #200]	; (8007210 <UART_SetConfig+0x6f4>)
 8007148:	fba3 1302 	umull	r1, r3, r3, r2
 800714c:	095b      	lsrs	r3, r3, #5
 800714e:	2164      	movs	r1, #100	; 0x64
 8007150:	fb01 f303 	mul.w	r3, r1, r3
 8007154:	1ad3      	subs	r3, r2, r3
 8007156:	011b      	lsls	r3, r3, #4
 8007158:	3332      	adds	r3, #50	; 0x32
 800715a:	4a2d      	ldr	r2, [pc, #180]	; (8007210 <UART_SetConfig+0x6f4>)
 800715c:	fba2 2303 	umull	r2, r3, r2, r3
 8007160:	095b      	lsrs	r3, r3, #5
 8007162:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007166:	4498      	add	r8, r3
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	469b      	mov	fp, r3
 800716c:	f04f 0c00 	mov.w	ip, #0
 8007170:	46d9      	mov	r9, fp
 8007172:	46e2      	mov	sl, ip
 8007174:	eb19 0309 	adds.w	r3, r9, r9
 8007178:	eb4a 040a 	adc.w	r4, sl, sl
 800717c:	4699      	mov	r9, r3
 800717e:	46a2      	mov	sl, r4
 8007180:	eb19 090b 	adds.w	r9, r9, fp
 8007184:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007188:	f04f 0100 	mov.w	r1, #0
 800718c:	f04f 0200 	mov.w	r2, #0
 8007190:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007194:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007198:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800719c:	4689      	mov	r9, r1
 800719e:	4692      	mov	sl, r2
 80071a0:	eb1b 0509 	adds.w	r5, fp, r9
 80071a4:	eb4c 060a 	adc.w	r6, ip, sl
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	4619      	mov	r1, r3
 80071ae:	f04f 0200 	mov.w	r2, #0
 80071b2:	f04f 0300 	mov.w	r3, #0
 80071b6:	f04f 0400 	mov.w	r4, #0
 80071ba:	0094      	lsls	r4, r2, #2
 80071bc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80071c0:	008b      	lsls	r3, r1, #2
 80071c2:	461a      	mov	r2, r3
 80071c4:	4623      	mov	r3, r4
 80071c6:	4628      	mov	r0, r5
 80071c8:	4631      	mov	r1, r6
 80071ca:	f7f9 fd3d 	bl	8000c48 <__aeabi_uldivmod>
 80071ce:	4603      	mov	r3, r0
 80071d0:	460c      	mov	r4, r1
 80071d2:	461a      	mov	r2, r3
 80071d4:	4b0e      	ldr	r3, [pc, #56]	; (8007210 <UART_SetConfig+0x6f4>)
 80071d6:	fba3 1302 	umull	r1, r3, r3, r2
 80071da:	095b      	lsrs	r3, r3, #5
 80071dc:	2164      	movs	r1, #100	; 0x64
 80071de:	fb01 f303 	mul.w	r3, r1, r3
 80071e2:	1ad3      	subs	r3, r2, r3
 80071e4:	011b      	lsls	r3, r3, #4
 80071e6:	3332      	adds	r3, #50	; 0x32
 80071e8:	4a09      	ldr	r2, [pc, #36]	; (8007210 <UART_SetConfig+0x6f4>)
 80071ea:	fba2 2303 	umull	r2, r3, r2, r3
 80071ee:	095b      	lsrs	r3, r3, #5
 80071f0:	f003 020f 	and.w	r2, r3, #15
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4442      	add	r2, r8
 80071fa:	609a      	str	r2, [r3, #8]
}
 80071fc:	e7ff      	b.n	80071fe <UART_SetConfig+0x6e2>
 80071fe:	bf00      	nop
 8007200:	3714      	adds	r7, #20
 8007202:	46bd      	mov	sp, r7
 8007204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007208:	40011000 	.word	0x40011000
 800720c:	40011400 	.word	0x40011400
 8007210:	51eb851f 	.word	0x51eb851f

08007214 <__errno>:
 8007214:	4b01      	ldr	r3, [pc, #4]	; (800721c <__errno+0x8>)
 8007216:	6818      	ldr	r0, [r3, #0]
 8007218:	4770      	bx	lr
 800721a:	bf00      	nop
 800721c:	20000014 	.word	0x20000014

08007220 <__libc_init_array>:
 8007220:	b570      	push	{r4, r5, r6, lr}
 8007222:	4e0d      	ldr	r6, [pc, #52]	; (8007258 <__libc_init_array+0x38>)
 8007224:	4c0d      	ldr	r4, [pc, #52]	; (800725c <__libc_init_array+0x3c>)
 8007226:	1ba4      	subs	r4, r4, r6
 8007228:	10a4      	asrs	r4, r4, #2
 800722a:	2500      	movs	r5, #0
 800722c:	42a5      	cmp	r5, r4
 800722e:	d109      	bne.n	8007244 <__libc_init_array+0x24>
 8007230:	4e0b      	ldr	r6, [pc, #44]	; (8007260 <__libc_init_array+0x40>)
 8007232:	4c0c      	ldr	r4, [pc, #48]	; (8007264 <__libc_init_array+0x44>)
 8007234:	f003 fb26 	bl	800a884 <_init>
 8007238:	1ba4      	subs	r4, r4, r6
 800723a:	10a4      	asrs	r4, r4, #2
 800723c:	2500      	movs	r5, #0
 800723e:	42a5      	cmp	r5, r4
 8007240:	d105      	bne.n	800724e <__libc_init_array+0x2e>
 8007242:	bd70      	pop	{r4, r5, r6, pc}
 8007244:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007248:	4798      	blx	r3
 800724a:	3501      	adds	r5, #1
 800724c:	e7ee      	b.n	800722c <__libc_init_array+0xc>
 800724e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007252:	4798      	blx	r3
 8007254:	3501      	adds	r5, #1
 8007256:	e7f2      	b.n	800723e <__libc_init_array+0x1e>
 8007258:	0800af90 	.word	0x0800af90
 800725c:	0800af90 	.word	0x0800af90
 8007260:	0800af90 	.word	0x0800af90
 8007264:	0800af94 	.word	0x0800af94

08007268 <memset>:
 8007268:	4402      	add	r2, r0
 800726a:	4603      	mov	r3, r0
 800726c:	4293      	cmp	r3, r2
 800726e:	d100      	bne.n	8007272 <memset+0xa>
 8007270:	4770      	bx	lr
 8007272:	f803 1b01 	strb.w	r1, [r3], #1
 8007276:	e7f9      	b.n	800726c <memset+0x4>

08007278 <__cvt>:
 8007278:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800727c:	ec55 4b10 	vmov	r4, r5, d0
 8007280:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8007282:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007286:	2d00      	cmp	r5, #0
 8007288:	460e      	mov	r6, r1
 800728a:	4691      	mov	r9, r2
 800728c:	4619      	mov	r1, r3
 800728e:	bfb8      	it	lt
 8007290:	4622      	movlt	r2, r4
 8007292:	462b      	mov	r3, r5
 8007294:	f027 0720 	bic.w	r7, r7, #32
 8007298:	bfbb      	ittet	lt
 800729a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800729e:	461d      	movlt	r5, r3
 80072a0:	2300      	movge	r3, #0
 80072a2:	232d      	movlt	r3, #45	; 0x2d
 80072a4:	bfb8      	it	lt
 80072a6:	4614      	movlt	r4, r2
 80072a8:	2f46      	cmp	r7, #70	; 0x46
 80072aa:	700b      	strb	r3, [r1, #0]
 80072ac:	d004      	beq.n	80072b8 <__cvt+0x40>
 80072ae:	2f45      	cmp	r7, #69	; 0x45
 80072b0:	d100      	bne.n	80072b4 <__cvt+0x3c>
 80072b2:	3601      	adds	r6, #1
 80072b4:	2102      	movs	r1, #2
 80072b6:	e000      	b.n	80072ba <__cvt+0x42>
 80072b8:	2103      	movs	r1, #3
 80072ba:	ab03      	add	r3, sp, #12
 80072bc:	9301      	str	r3, [sp, #4]
 80072be:	ab02      	add	r3, sp, #8
 80072c0:	9300      	str	r3, [sp, #0]
 80072c2:	4632      	mov	r2, r6
 80072c4:	4653      	mov	r3, sl
 80072c6:	ec45 4b10 	vmov	d0, r4, r5
 80072ca:	f000 feb1 	bl	8008030 <_dtoa_r>
 80072ce:	2f47      	cmp	r7, #71	; 0x47
 80072d0:	4680      	mov	r8, r0
 80072d2:	d102      	bne.n	80072da <__cvt+0x62>
 80072d4:	f019 0f01 	tst.w	r9, #1
 80072d8:	d026      	beq.n	8007328 <__cvt+0xb0>
 80072da:	2f46      	cmp	r7, #70	; 0x46
 80072dc:	eb08 0906 	add.w	r9, r8, r6
 80072e0:	d111      	bne.n	8007306 <__cvt+0x8e>
 80072e2:	f898 3000 	ldrb.w	r3, [r8]
 80072e6:	2b30      	cmp	r3, #48	; 0x30
 80072e8:	d10a      	bne.n	8007300 <__cvt+0x88>
 80072ea:	2200      	movs	r2, #0
 80072ec:	2300      	movs	r3, #0
 80072ee:	4620      	mov	r0, r4
 80072f0:	4629      	mov	r1, r5
 80072f2:	f7f9 fbe9 	bl	8000ac8 <__aeabi_dcmpeq>
 80072f6:	b918      	cbnz	r0, 8007300 <__cvt+0x88>
 80072f8:	f1c6 0601 	rsb	r6, r6, #1
 80072fc:	f8ca 6000 	str.w	r6, [sl]
 8007300:	f8da 3000 	ldr.w	r3, [sl]
 8007304:	4499      	add	r9, r3
 8007306:	2200      	movs	r2, #0
 8007308:	2300      	movs	r3, #0
 800730a:	4620      	mov	r0, r4
 800730c:	4629      	mov	r1, r5
 800730e:	f7f9 fbdb 	bl	8000ac8 <__aeabi_dcmpeq>
 8007312:	b938      	cbnz	r0, 8007324 <__cvt+0xac>
 8007314:	2230      	movs	r2, #48	; 0x30
 8007316:	9b03      	ldr	r3, [sp, #12]
 8007318:	454b      	cmp	r3, r9
 800731a:	d205      	bcs.n	8007328 <__cvt+0xb0>
 800731c:	1c59      	adds	r1, r3, #1
 800731e:	9103      	str	r1, [sp, #12]
 8007320:	701a      	strb	r2, [r3, #0]
 8007322:	e7f8      	b.n	8007316 <__cvt+0x9e>
 8007324:	f8cd 900c 	str.w	r9, [sp, #12]
 8007328:	9b03      	ldr	r3, [sp, #12]
 800732a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800732c:	eba3 0308 	sub.w	r3, r3, r8
 8007330:	4640      	mov	r0, r8
 8007332:	6013      	str	r3, [r2, #0]
 8007334:	b004      	add	sp, #16
 8007336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800733a <__exponent>:
 800733a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800733c:	2900      	cmp	r1, #0
 800733e:	4604      	mov	r4, r0
 8007340:	bfba      	itte	lt
 8007342:	4249      	neglt	r1, r1
 8007344:	232d      	movlt	r3, #45	; 0x2d
 8007346:	232b      	movge	r3, #43	; 0x2b
 8007348:	2909      	cmp	r1, #9
 800734a:	f804 2b02 	strb.w	r2, [r4], #2
 800734e:	7043      	strb	r3, [r0, #1]
 8007350:	dd20      	ble.n	8007394 <__exponent+0x5a>
 8007352:	f10d 0307 	add.w	r3, sp, #7
 8007356:	461f      	mov	r7, r3
 8007358:	260a      	movs	r6, #10
 800735a:	fb91 f5f6 	sdiv	r5, r1, r6
 800735e:	fb06 1115 	mls	r1, r6, r5, r1
 8007362:	3130      	adds	r1, #48	; 0x30
 8007364:	2d09      	cmp	r5, #9
 8007366:	f803 1c01 	strb.w	r1, [r3, #-1]
 800736a:	f103 32ff 	add.w	r2, r3, #4294967295
 800736e:	4629      	mov	r1, r5
 8007370:	dc09      	bgt.n	8007386 <__exponent+0x4c>
 8007372:	3130      	adds	r1, #48	; 0x30
 8007374:	3b02      	subs	r3, #2
 8007376:	f802 1c01 	strb.w	r1, [r2, #-1]
 800737a:	42bb      	cmp	r3, r7
 800737c:	4622      	mov	r2, r4
 800737e:	d304      	bcc.n	800738a <__exponent+0x50>
 8007380:	1a10      	subs	r0, r2, r0
 8007382:	b003      	add	sp, #12
 8007384:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007386:	4613      	mov	r3, r2
 8007388:	e7e7      	b.n	800735a <__exponent+0x20>
 800738a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800738e:	f804 2b01 	strb.w	r2, [r4], #1
 8007392:	e7f2      	b.n	800737a <__exponent+0x40>
 8007394:	2330      	movs	r3, #48	; 0x30
 8007396:	4419      	add	r1, r3
 8007398:	7083      	strb	r3, [r0, #2]
 800739a:	1d02      	adds	r2, r0, #4
 800739c:	70c1      	strb	r1, [r0, #3]
 800739e:	e7ef      	b.n	8007380 <__exponent+0x46>

080073a0 <_printf_float>:
 80073a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073a4:	b08d      	sub	sp, #52	; 0x34
 80073a6:	460c      	mov	r4, r1
 80073a8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80073ac:	4616      	mov	r6, r2
 80073ae:	461f      	mov	r7, r3
 80073b0:	4605      	mov	r5, r0
 80073b2:	f001 fd6f 	bl	8008e94 <_localeconv_r>
 80073b6:	6803      	ldr	r3, [r0, #0]
 80073b8:	9304      	str	r3, [sp, #16]
 80073ba:	4618      	mov	r0, r3
 80073bc:	f7f8 ff08 	bl	80001d0 <strlen>
 80073c0:	2300      	movs	r3, #0
 80073c2:	930a      	str	r3, [sp, #40]	; 0x28
 80073c4:	f8d8 3000 	ldr.w	r3, [r8]
 80073c8:	9005      	str	r0, [sp, #20]
 80073ca:	3307      	adds	r3, #7
 80073cc:	f023 0307 	bic.w	r3, r3, #7
 80073d0:	f103 0208 	add.w	r2, r3, #8
 80073d4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80073d8:	f8d4 b000 	ldr.w	fp, [r4]
 80073dc:	f8c8 2000 	str.w	r2, [r8]
 80073e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80073e8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80073ec:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80073f0:	9307      	str	r3, [sp, #28]
 80073f2:	f8cd 8018 	str.w	r8, [sp, #24]
 80073f6:	f04f 32ff 	mov.w	r2, #4294967295
 80073fa:	4ba7      	ldr	r3, [pc, #668]	; (8007698 <_printf_float+0x2f8>)
 80073fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007400:	f7f9 fb94 	bl	8000b2c <__aeabi_dcmpun>
 8007404:	bb70      	cbnz	r0, 8007464 <_printf_float+0xc4>
 8007406:	f04f 32ff 	mov.w	r2, #4294967295
 800740a:	4ba3      	ldr	r3, [pc, #652]	; (8007698 <_printf_float+0x2f8>)
 800740c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007410:	f7f9 fb6e 	bl	8000af0 <__aeabi_dcmple>
 8007414:	bb30      	cbnz	r0, 8007464 <_printf_float+0xc4>
 8007416:	2200      	movs	r2, #0
 8007418:	2300      	movs	r3, #0
 800741a:	4640      	mov	r0, r8
 800741c:	4649      	mov	r1, r9
 800741e:	f7f9 fb5d 	bl	8000adc <__aeabi_dcmplt>
 8007422:	b110      	cbz	r0, 800742a <_printf_float+0x8a>
 8007424:	232d      	movs	r3, #45	; 0x2d
 8007426:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800742a:	4a9c      	ldr	r2, [pc, #624]	; (800769c <_printf_float+0x2fc>)
 800742c:	4b9c      	ldr	r3, [pc, #624]	; (80076a0 <_printf_float+0x300>)
 800742e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007432:	bf8c      	ite	hi
 8007434:	4690      	movhi	r8, r2
 8007436:	4698      	movls	r8, r3
 8007438:	2303      	movs	r3, #3
 800743a:	f02b 0204 	bic.w	r2, fp, #4
 800743e:	6123      	str	r3, [r4, #16]
 8007440:	6022      	str	r2, [r4, #0]
 8007442:	f04f 0900 	mov.w	r9, #0
 8007446:	9700      	str	r7, [sp, #0]
 8007448:	4633      	mov	r3, r6
 800744a:	aa0b      	add	r2, sp, #44	; 0x2c
 800744c:	4621      	mov	r1, r4
 800744e:	4628      	mov	r0, r5
 8007450:	f000 f9e6 	bl	8007820 <_printf_common>
 8007454:	3001      	adds	r0, #1
 8007456:	f040 808d 	bne.w	8007574 <_printf_float+0x1d4>
 800745a:	f04f 30ff 	mov.w	r0, #4294967295
 800745e:	b00d      	add	sp, #52	; 0x34
 8007460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007464:	4642      	mov	r2, r8
 8007466:	464b      	mov	r3, r9
 8007468:	4640      	mov	r0, r8
 800746a:	4649      	mov	r1, r9
 800746c:	f7f9 fb5e 	bl	8000b2c <__aeabi_dcmpun>
 8007470:	b110      	cbz	r0, 8007478 <_printf_float+0xd8>
 8007472:	4a8c      	ldr	r2, [pc, #560]	; (80076a4 <_printf_float+0x304>)
 8007474:	4b8c      	ldr	r3, [pc, #560]	; (80076a8 <_printf_float+0x308>)
 8007476:	e7da      	b.n	800742e <_printf_float+0x8e>
 8007478:	6861      	ldr	r1, [r4, #4]
 800747a:	1c4b      	adds	r3, r1, #1
 800747c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8007480:	a80a      	add	r0, sp, #40	; 0x28
 8007482:	d13e      	bne.n	8007502 <_printf_float+0x162>
 8007484:	2306      	movs	r3, #6
 8007486:	6063      	str	r3, [r4, #4]
 8007488:	2300      	movs	r3, #0
 800748a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800748e:	ab09      	add	r3, sp, #36	; 0x24
 8007490:	9300      	str	r3, [sp, #0]
 8007492:	ec49 8b10 	vmov	d0, r8, r9
 8007496:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800749a:	6022      	str	r2, [r4, #0]
 800749c:	f8cd a004 	str.w	sl, [sp, #4]
 80074a0:	6861      	ldr	r1, [r4, #4]
 80074a2:	4628      	mov	r0, r5
 80074a4:	f7ff fee8 	bl	8007278 <__cvt>
 80074a8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80074ac:	2b47      	cmp	r3, #71	; 0x47
 80074ae:	4680      	mov	r8, r0
 80074b0:	d109      	bne.n	80074c6 <_printf_float+0x126>
 80074b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074b4:	1cd8      	adds	r0, r3, #3
 80074b6:	db02      	blt.n	80074be <_printf_float+0x11e>
 80074b8:	6862      	ldr	r2, [r4, #4]
 80074ba:	4293      	cmp	r3, r2
 80074bc:	dd47      	ble.n	800754e <_printf_float+0x1ae>
 80074be:	f1aa 0a02 	sub.w	sl, sl, #2
 80074c2:	fa5f fa8a 	uxtb.w	sl, sl
 80074c6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80074ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 80074cc:	d824      	bhi.n	8007518 <_printf_float+0x178>
 80074ce:	3901      	subs	r1, #1
 80074d0:	4652      	mov	r2, sl
 80074d2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80074d6:	9109      	str	r1, [sp, #36]	; 0x24
 80074d8:	f7ff ff2f 	bl	800733a <__exponent>
 80074dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80074de:	1813      	adds	r3, r2, r0
 80074e0:	2a01      	cmp	r2, #1
 80074e2:	4681      	mov	r9, r0
 80074e4:	6123      	str	r3, [r4, #16]
 80074e6:	dc02      	bgt.n	80074ee <_printf_float+0x14e>
 80074e8:	6822      	ldr	r2, [r4, #0]
 80074ea:	07d1      	lsls	r1, r2, #31
 80074ec:	d501      	bpl.n	80074f2 <_printf_float+0x152>
 80074ee:	3301      	adds	r3, #1
 80074f0:	6123      	str	r3, [r4, #16]
 80074f2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d0a5      	beq.n	8007446 <_printf_float+0xa6>
 80074fa:	232d      	movs	r3, #45	; 0x2d
 80074fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007500:	e7a1      	b.n	8007446 <_printf_float+0xa6>
 8007502:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8007506:	f000 8177 	beq.w	80077f8 <_printf_float+0x458>
 800750a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800750e:	d1bb      	bne.n	8007488 <_printf_float+0xe8>
 8007510:	2900      	cmp	r1, #0
 8007512:	d1b9      	bne.n	8007488 <_printf_float+0xe8>
 8007514:	2301      	movs	r3, #1
 8007516:	e7b6      	b.n	8007486 <_printf_float+0xe6>
 8007518:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800751c:	d119      	bne.n	8007552 <_printf_float+0x1b2>
 800751e:	2900      	cmp	r1, #0
 8007520:	6863      	ldr	r3, [r4, #4]
 8007522:	dd0c      	ble.n	800753e <_printf_float+0x19e>
 8007524:	6121      	str	r1, [r4, #16]
 8007526:	b913      	cbnz	r3, 800752e <_printf_float+0x18e>
 8007528:	6822      	ldr	r2, [r4, #0]
 800752a:	07d2      	lsls	r2, r2, #31
 800752c:	d502      	bpl.n	8007534 <_printf_float+0x194>
 800752e:	3301      	adds	r3, #1
 8007530:	440b      	add	r3, r1
 8007532:	6123      	str	r3, [r4, #16]
 8007534:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007536:	65a3      	str	r3, [r4, #88]	; 0x58
 8007538:	f04f 0900 	mov.w	r9, #0
 800753c:	e7d9      	b.n	80074f2 <_printf_float+0x152>
 800753e:	b913      	cbnz	r3, 8007546 <_printf_float+0x1a6>
 8007540:	6822      	ldr	r2, [r4, #0]
 8007542:	07d0      	lsls	r0, r2, #31
 8007544:	d501      	bpl.n	800754a <_printf_float+0x1aa>
 8007546:	3302      	adds	r3, #2
 8007548:	e7f3      	b.n	8007532 <_printf_float+0x192>
 800754a:	2301      	movs	r3, #1
 800754c:	e7f1      	b.n	8007532 <_printf_float+0x192>
 800754e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8007552:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007556:	4293      	cmp	r3, r2
 8007558:	db05      	blt.n	8007566 <_printf_float+0x1c6>
 800755a:	6822      	ldr	r2, [r4, #0]
 800755c:	6123      	str	r3, [r4, #16]
 800755e:	07d1      	lsls	r1, r2, #31
 8007560:	d5e8      	bpl.n	8007534 <_printf_float+0x194>
 8007562:	3301      	adds	r3, #1
 8007564:	e7e5      	b.n	8007532 <_printf_float+0x192>
 8007566:	2b00      	cmp	r3, #0
 8007568:	bfd4      	ite	le
 800756a:	f1c3 0302 	rsble	r3, r3, #2
 800756e:	2301      	movgt	r3, #1
 8007570:	4413      	add	r3, r2
 8007572:	e7de      	b.n	8007532 <_printf_float+0x192>
 8007574:	6823      	ldr	r3, [r4, #0]
 8007576:	055a      	lsls	r2, r3, #21
 8007578:	d407      	bmi.n	800758a <_printf_float+0x1ea>
 800757a:	6923      	ldr	r3, [r4, #16]
 800757c:	4642      	mov	r2, r8
 800757e:	4631      	mov	r1, r6
 8007580:	4628      	mov	r0, r5
 8007582:	47b8      	blx	r7
 8007584:	3001      	adds	r0, #1
 8007586:	d12b      	bne.n	80075e0 <_printf_float+0x240>
 8007588:	e767      	b.n	800745a <_printf_float+0xba>
 800758a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800758e:	f240 80dc 	bls.w	800774a <_printf_float+0x3aa>
 8007592:	2200      	movs	r2, #0
 8007594:	2300      	movs	r3, #0
 8007596:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800759a:	f7f9 fa95 	bl	8000ac8 <__aeabi_dcmpeq>
 800759e:	2800      	cmp	r0, #0
 80075a0:	d033      	beq.n	800760a <_printf_float+0x26a>
 80075a2:	2301      	movs	r3, #1
 80075a4:	4a41      	ldr	r2, [pc, #260]	; (80076ac <_printf_float+0x30c>)
 80075a6:	4631      	mov	r1, r6
 80075a8:	4628      	mov	r0, r5
 80075aa:	47b8      	blx	r7
 80075ac:	3001      	adds	r0, #1
 80075ae:	f43f af54 	beq.w	800745a <_printf_float+0xba>
 80075b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80075b6:	429a      	cmp	r2, r3
 80075b8:	db02      	blt.n	80075c0 <_printf_float+0x220>
 80075ba:	6823      	ldr	r3, [r4, #0]
 80075bc:	07d8      	lsls	r0, r3, #31
 80075be:	d50f      	bpl.n	80075e0 <_printf_float+0x240>
 80075c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80075c4:	4631      	mov	r1, r6
 80075c6:	4628      	mov	r0, r5
 80075c8:	47b8      	blx	r7
 80075ca:	3001      	adds	r0, #1
 80075cc:	f43f af45 	beq.w	800745a <_printf_float+0xba>
 80075d0:	f04f 0800 	mov.w	r8, #0
 80075d4:	f104 091a 	add.w	r9, r4, #26
 80075d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075da:	3b01      	subs	r3, #1
 80075dc:	4543      	cmp	r3, r8
 80075de:	dc09      	bgt.n	80075f4 <_printf_float+0x254>
 80075e0:	6823      	ldr	r3, [r4, #0]
 80075e2:	079b      	lsls	r3, r3, #30
 80075e4:	f100 8103 	bmi.w	80077ee <_printf_float+0x44e>
 80075e8:	68e0      	ldr	r0, [r4, #12]
 80075ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075ec:	4298      	cmp	r0, r3
 80075ee:	bfb8      	it	lt
 80075f0:	4618      	movlt	r0, r3
 80075f2:	e734      	b.n	800745e <_printf_float+0xbe>
 80075f4:	2301      	movs	r3, #1
 80075f6:	464a      	mov	r2, r9
 80075f8:	4631      	mov	r1, r6
 80075fa:	4628      	mov	r0, r5
 80075fc:	47b8      	blx	r7
 80075fe:	3001      	adds	r0, #1
 8007600:	f43f af2b 	beq.w	800745a <_printf_float+0xba>
 8007604:	f108 0801 	add.w	r8, r8, #1
 8007608:	e7e6      	b.n	80075d8 <_printf_float+0x238>
 800760a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800760c:	2b00      	cmp	r3, #0
 800760e:	dc2b      	bgt.n	8007668 <_printf_float+0x2c8>
 8007610:	2301      	movs	r3, #1
 8007612:	4a26      	ldr	r2, [pc, #152]	; (80076ac <_printf_float+0x30c>)
 8007614:	4631      	mov	r1, r6
 8007616:	4628      	mov	r0, r5
 8007618:	47b8      	blx	r7
 800761a:	3001      	adds	r0, #1
 800761c:	f43f af1d 	beq.w	800745a <_printf_float+0xba>
 8007620:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007622:	b923      	cbnz	r3, 800762e <_printf_float+0x28e>
 8007624:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007626:	b913      	cbnz	r3, 800762e <_printf_float+0x28e>
 8007628:	6823      	ldr	r3, [r4, #0]
 800762a:	07d9      	lsls	r1, r3, #31
 800762c:	d5d8      	bpl.n	80075e0 <_printf_float+0x240>
 800762e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007632:	4631      	mov	r1, r6
 8007634:	4628      	mov	r0, r5
 8007636:	47b8      	blx	r7
 8007638:	3001      	adds	r0, #1
 800763a:	f43f af0e 	beq.w	800745a <_printf_float+0xba>
 800763e:	f04f 0900 	mov.w	r9, #0
 8007642:	f104 0a1a 	add.w	sl, r4, #26
 8007646:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007648:	425b      	negs	r3, r3
 800764a:	454b      	cmp	r3, r9
 800764c:	dc01      	bgt.n	8007652 <_printf_float+0x2b2>
 800764e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007650:	e794      	b.n	800757c <_printf_float+0x1dc>
 8007652:	2301      	movs	r3, #1
 8007654:	4652      	mov	r2, sl
 8007656:	4631      	mov	r1, r6
 8007658:	4628      	mov	r0, r5
 800765a:	47b8      	blx	r7
 800765c:	3001      	adds	r0, #1
 800765e:	f43f aefc 	beq.w	800745a <_printf_float+0xba>
 8007662:	f109 0901 	add.w	r9, r9, #1
 8007666:	e7ee      	b.n	8007646 <_printf_float+0x2a6>
 8007668:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800766a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800766c:	429a      	cmp	r2, r3
 800766e:	bfa8      	it	ge
 8007670:	461a      	movge	r2, r3
 8007672:	2a00      	cmp	r2, #0
 8007674:	4691      	mov	r9, r2
 8007676:	dd07      	ble.n	8007688 <_printf_float+0x2e8>
 8007678:	4613      	mov	r3, r2
 800767a:	4631      	mov	r1, r6
 800767c:	4642      	mov	r2, r8
 800767e:	4628      	mov	r0, r5
 8007680:	47b8      	blx	r7
 8007682:	3001      	adds	r0, #1
 8007684:	f43f aee9 	beq.w	800745a <_printf_float+0xba>
 8007688:	f104 031a 	add.w	r3, r4, #26
 800768c:	f04f 0b00 	mov.w	fp, #0
 8007690:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007694:	9306      	str	r3, [sp, #24]
 8007696:	e015      	b.n	80076c4 <_printf_float+0x324>
 8007698:	7fefffff 	.word	0x7fefffff
 800769c:	0800a8f0 	.word	0x0800a8f0
 80076a0:	0800a8ec 	.word	0x0800a8ec
 80076a4:	0800a8f8 	.word	0x0800a8f8
 80076a8:	0800a8f4 	.word	0x0800a8f4
 80076ac:	0800a8fc 	.word	0x0800a8fc
 80076b0:	2301      	movs	r3, #1
 80076b2:	9a06      	ldr	r2, [sp, #24]
 80076b4:	4631      	mov	r1, r6
 80076b6:	4628      	mov	r0, r5
 80076b8:	47b8      	blx	r7
 80076ba:	3001      	adds	r0, #1
 80076bc:	f43f aecd 	beq.w	800745a <_printf_float+0xba>
 80076c0:	f10b 0b01 	add.w	fp, fp, #1
 80076c4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80076c8:	ebaa 0309 	sub.w	r3, sl, r9
 80076cc:	455b      	cmp	r3, fp
 80076ce:	dcef      	bgt.n	80076b0 <_printf_float+0x310>
 80076d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80076d4:	429a      	cmp	r2, r3
 80076d6:	44d0      	add	r8, sl
 80076d8:	db15      	blt.n	8007706 <_printf_float+0x366>
 80076da:	6823      	ldr	r3, [r4, #0]
 80076dc:	07da      	lsls	r2, r3, #31
 80076de:	d412      	bmi.n	8007706 <_printf_float+0x366>
 80076e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80076e4:	eba3 020a 	sub.w	r2, r3, sl
 80076e8:	eba3 0a01 	sub.w	sl, r3, r1
 80076ec:	4592      	cmp	sl, r2
 80076ee:	bfa8      	it	ge
 80076f0:	4692      	movge	sl, r2
 80076f2:	f1ba 0f00 	cmp.w	sl, #0
 80076f6:	dc0e      	bgt.n	8007716 <_printf_float+0x376>
 80076f8:	f04f 0800 	mov.w	r8, #0
 80076fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007700:	f104 091a 	add.w	r9, r4, #26
 8007704:	e019      	b.n	800773a <_printf_float+0x39a>
 8007706:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800770a:	4631      	mov	r1, r6
 800770c:	4628      	mov	r0, r5
 800770e:	47b8      	blx	r7
 8007710:	3001      	adds	r0, #1
 8007712:	d1e5      	bne.n	80076e0 <_printf_float+0x340>
 8007714:	e6a1      	b.n	800745a <_printf_float+0xba>
 8007716:	4653      	mov	r3, sl
 8007718:	4642      	mov	r2, r8
 800771a:	4631      	mov	r1, r6
 800771c:	4628      	mov	r0, r5
 800771e:	47b8      	blx	r7
 8007720:	3001      	adds	r0, #1
 8007722:	d1e9      	bne.n	80076f8 <_printf_float+0x358>
 8007724:	e699      	b.n	800745a <_printf_float+0xba>
 8007726:	2301      	movs	r3, #1
 8007728:	464a      	mov	r2, r9
 800772a:	4631      	mov	r1, r6
 800772c:	4628      	mov	r0, r5
 800772e:	47b8      	blx	r7
 8007730:	3001      	adds	r0, #1
 8007732:	f43f ae92 	beq.w	800745a <_printf_float+0xba>
 8007736:	f108 0801 	add.w	r8, r8, #1
 800773a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800773e:	1a9b      	subs	r3, r3, r2
 8007740:	eba3 030a 	sub.w	r3, r3, sl
 8007744:	4543      	cmp	r3, r8
 8007746:	dcee      	bgt.n	8007726 <_printf_float+0x386>
 8007748:	e74a      	b.n	80075e0 <_printf_float+0x240>
 800774a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800774c:	2a01      	cmp	r2, #1
 800774e:	dc01      	bgt.n	8007754 <_printf_float+0x3b4>
 8007750:	07db      	lsls	r3, r3, #31
 8007752:	d53a      	bpl.n	80077ca <_printf_float+0x42a>
 8007754:	2301      	movs	r3, #1
 8007756:	4642      	mov	r2, r8
 8007758:	4631      	mov	r1, r6
 800775a:	4628      	mov	r0, r5
 800775c:	47b8      	blx	r7
 800775e:	3001      	adds	r0, #1
 8007760:	f43f ae7b 	beq.w	800745a <_printf_float+0xba>
 8007764:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007768:	4631      	mov	r1, r6
 800776a:	4628      	mov	r0, r5
 800776c:	47b8      	blx	r7
 800776e:	3001      	adds	r0, #1
 8007770:	f108 0801 	add.w	r8, r8, #1
 8007774:	f43f ae71 	beq.w	800745a <_printf_float+0xba>
 8007778:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800777a:	2200      	movs	r2, #0
 800777c:	f103 3aff 	add.w	sl, r3, #4294967295
 8007780:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007784:	2300      	movs	r3, #0
 8007786:	f7f9 f99f 	bl	8000ac8 <__aeabi_dcmpeq>
 800778a:	b9c8      	cbnz	r0, 80077c0 <_printf_float+0x420>
 800778c:	4653      	mov	r3, sl
 800778e:	4642      	mov	r2, r8
 8007790:	4631      	mov	r1, r6
 8007792:	4628      	mov	r0, r5
 8007794:	47b8      	blx	r7
 8007796:	3001      	adds	r0, #1
 8007798:	d10e      	bne.n	80077b8 <_printf_float+0x418>
 800779a:	e65e      	b.n	800745a <_printf_float+0xba>
 800779c:	2301      	movs	r3, #1
 800779e:	4652      	mov	r2, sl
 80077a0:	4631      	mov	r1, r6
 80077a2:	4628      	mov	r0, r5
 80077a4:	47b8      	blx	r7
 80077a6:	3001      	adds	r0, #1
 80077a8:	f43f ae57 	beq.w	800745a <_printf_float+0xba>
 80077ac:	f108 0801 	add.w	r8, r8, #1
 80077b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077b2:	3b01      	subs	r3, #1
 80077b4:	4543      	cmp	r3, r8
 80077b6:	dcf1      	bgt.n	800779c <_printf_float+0x3fc>
 80077b8:	464b      	mov	r3, r9
 80077ba:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80077be:	e6de      	b.n	800757e <_printf_float+0x1de>
 80077c0:	f04f 0800 	mov.w	r8, #0
 80077c4:	f104 0a1a 	add.w	sl, r4, #26
 80077c8:	e7f2      	b.n	80077b0 <_printf_float+0x410>
 80077ca:	2301      	movs	r3, #1
 80077cc:	e7df      	b.n	800778e <_printf_float+0x3ee>
 80077ce:	2301      	movs	r3, #1
 80077d0:	464a      	mov	r2, r9
 80077d2:	4631      	mov	r1, r6
 80077d4:	4628      	mov	r0, r5
 80077d6:	47b8      	blx	r7
 80077d8:	3001      	adds	r0, #1
 80077da:	f43f ae3e 	beq.w	800745a <_printf_float+0xba>
 80077de:	f108 0801 	add.w	r8, r8, #1
 80077e2:	68e3      	ldr	r3, [r4, #12]
 80077e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80077e6:	1a9b      	subs	r3, r3, r2
 80077e8:	4543      	cmp	r3, r8
 80077ea:	dcf0      	bgt.n	80077ce <_printf_float+0x42e>
 80077ec:	e6fc      	b.n	80075e8 <_printf_float+0x248>
 80077ee:	f04f 0800 	mov.w	r8, #0
 80077f2:	f104 0919 	add.w	r9, r4, #25
 80077f6:	e7f4      	b.n	80077e2 <_printf_float+0x442>
 80077f8:	2900      	cmp	r1, #0
 80077fa:	f43f ae8b 	beq.w	8007514 <_printf_float+0x174>
 80077fe:	2300      	movs	r3, #0
 8007800:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007804:	ab09      	add	r3, sp, #36	; 0x24
 8007806:	9300      	str	r3, [sp, #0]
 8007808:	ec49 8b10 	vmov	d0, r8, r9
 800780c:	6022      	str	r2, [r4, #0]
 800780e:	f8cd a004 	str.w	sl, [sp, #4]
 8007812:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007816:	4628      	mov	r0, r5
 8007818:	f7ff fd2e 	bl	8007278 <__cvt>
 800781c:	4680      	mov	r8, r0
 800781e:	e648      	b.n	80074b2 <_printf_float+0x112>

08007820 <_printf_common>:
 8007820:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007824:	4691      	mov	r9, r2
 8007826:	461f      	mov	r7, r3
 8007828:	688a      	ldr	r2, [r1, #8]
 800782a:	690b      	ldr	r3, [r1, #16]
 800782c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007830:	4293      	cmp	r3, r2
 8007832:	bfb8      	it	lt
 8007834:	4613      	movlt	r3, r2
 8007836:	f8c9 3000 	str.w	r3, [r9]
 800783a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800783e:	4606      	mov	r6, r0
 8007840:	460c      	mov	r4, r1
 8007842:	b112      	cbz	r2, 800784a <_printf_common+0x2a>
 8007844:	3301      	adds	r3, #1
 8007846:	f8c9 3000 	str.w	r3, [r9]
 800784a:	6823      	ldr	r3, [r4, #0]
 800784c:	0699      	lsls	r1, r3, #26
 800784e:	bf42      	ittt	mi
 8007850:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007854:	3302      	addmi	r3, #2
 8007856:	f8c9 3000 	strmi.w	r3, [r9]
 800785a:	6825      	ldr	r5, [r4, #0]
 800785c:	f015 0506 	ands.w	r5, r5, #6
 8007860:	d107      	bne.n	8007872 <_printf_common+0x52>
 8007862:	f104 0a19 	add.w	sl, r4, #25
 8007866:	68e3      	ldr	r3, [r4, #12]
 8007868:	f8d9 2000 	ldr.w	r2, [r9]
 800786c:	1a9b      	subs	r3, r3, r2
 800786e:	42ab      	cmp	r3, r5
 8007870:	dc28      	bgt.n	80078c4 <_printf_common+0xa4>
 8007872:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007876:	6822      	ldr	r2, [r4, #0]
 8007878:	3300      	adds	r3, #0
 800787a:	bf18      	it	ne
 800787c:	2301      	movne	r3, #1
 800787e:	0692      	lsls	r2, r2, #26
 8007880:	d42d      	bmi.n	80078de <_printf_common+0xbe>
 8007882:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007886:	4639      	mov	r1, r7
 8007888:	4630      	mov	r0, r6
 800788a:	47c0      	blx	r8
 800788c:	3001      	adds	r0, #1
 800788e:	d020      	beq.n	80078d2 <_printf_common+0xb2>
 8007890:	6823      	ldr	r3, [r4, #0]
 8007892:	68e5      	ldr	r5, [r4, #12]
 8007894:	f8d9 2000 	ldr.w	r2, [r9]
 8007898:	f003 0306 	and.w	r3, r3, #6
 800789c:	2b04      	cmp	r3, #4
 800789e:	bf08      	it	eq
 80078a0:	1aad      	subeq	r5, r5, r2
 80078a2:	68a3      	ldr	r3, [r4, #8]
 80078a4:	6922      	ldr	r2, [r4, #16]
 80078a6:	bf0c      	ite	eq
 80078a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80078ac:	2500      	movne	r5, #0
 80078ae:	4293      	cmp	r3, r2
 80078b0:	bfc4      	itt	gt
 80078b2:	1a9b      	subgt	r3, r3, r2
 80078b4:	18ed      	addgt	r5, r5, r3
 80078b6:	f04f 0900 	mov.w	r9, #0
 80078ba:	341a      	adds	r4, #26
 80078bc:	454d      	cmp	r5, r9
 80078be:	d11a      	bne.n	80078f6 <_printf_common+0xd6>
 80078c0:	2000      	movs	r0, #0
 80078c2:	e008      	b.n	80078d6 <_printf_common+0xb6>
 80078c4:	2301      	movs	r3, #1
 80078c6:	4652      	mov	r2, sl
 80078c8:	4639      	mov	r1, r7
 80078ca:	4630      	mov	r0, r6
 80078cc:	47c0      	blx	r8
 80078ce:	3001      	adds	r0, #1
 80078d0:	d103      	bne.n	80078da <_printf_common+0xba>
 80078d2:	f04f 30ff 	mov.w	r0, #4294967295
 80078d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078da:	3501      	adds	r5, #1
 80078dc:	e7c3      	b.n	8007866 <_printf_common+0x46>
 80078de:	18e1      	adds	r1, r4, r3
 80078e0:	1c5a      	adds	r2, r3, #1
 80078e2:	2030      	movs	r0, #48	; 0x30
 80078e4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80078e8:	4422      	add	r2, r4
 80078ea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80078ee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80078f2:	3302      	adds	r3, #2
 80078f4:	e7c5      	b.n	8007882 <_printf_common+0x62>
 80078f6:	2301      	movs	r3, #1
 80078f8:	4622      	mov	r2, r4
 80078fa:	4639      	mov	r1, r7
 80078fc:	4630      	mov	r0, r6
 80078fe:	47c0      	blx	r8
 8007900:	3001      	adds	r0, #1
 8007902:	d0e6      	beq.n	80078d2 <_printf_common+0xb2>
 8007904:	f109 0901 	add.w	r9, r9, #1
 8007908:	e7d8      	b.n	80078bc <_printf_common+0x9c>
	...

0800790c <_printf_i>:
 800790c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007910:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007914:	460c      	mov	r4, r1
 8007916:	7e09      	ldrb	r1, [r1, #24]
 8007918:	b085      	sub	sp, #20
 800791a:	296e      	cmp	r1, #110	; 0x6e
 800791c:	4617      	mov	r7, r2
 800791e:	4606      	mov	r6, r0
 8007920:	4698      	mov	r8, r3
 8007922:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007924:	f000 80b3 	beq.w	8007a8e <_printf_i+0x182>
 8007928:	d822      	bhi.n	8007970 <_printf_i+0x64>
 800792a:	2963      	cmp	r1, #99	; 0x63
 800792c:	d036      	beq.n	800799c <_printf_i+0x90>
 800792e:	d80a      	bhi.n	8007946 <_printf_i+0x3a>
 8007930:	2900      	cmp	r1, #0
 8007932:	f000 80b9 	beq.w	8007aa8 <_printf_i+0x19c>
 8007936:	2958      	cmp	r1, #88	; 0x58
 8007938:	f000 8083 	beq.w	8007a42 <_printf_i+0x136>
 800793c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007940:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007944:	e032      	b.n	80079ac <_printf_i+0xa0>
 8007946:	2964      	cmp	r1, #100	; 0x64
 8007948:	d001      	beq.n	800794e <_printf_i+0x42>
 800794a:	2969      	cmp	r1, #105	; 0x69
 800794c:	d1f6      	bne.n	800793c <_printf_i+0x30>
 800794e:	6820      	ldr	r0, [r4, #0]
 8007950:	6813      	ldr	r3, [r2, #0]
 8007952:	0605      	lsls	r5, r0, #24
 8007954:	f103 0104 	add.w	r1, r3, #4
 8007958:	d52a      	bpl.n	80079b0 <_printf_i+0xa4>
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	6011      	str	r1, [r2, #0]
 800795e:	2b00      	cmp	r3, #0
 8007960:	da03      	bge.n	800796a <_printf_i+0x5e>
 8007962:	222d      	movs	r2, #45	; 0x2d
 8007964:	425b      	negs	r3, r3
 8007966:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800796a:	486f      	ldr	r0, [pc, #444]	; (8007b28 <_printf_i+0x21c>)
 800796c:	220a      	movs	r2, #10
 800796e:	e039      	b.n	80079e4 <_printf_i+0xd8>
 8007970:	2973      	cmp	r1, #115	; 0x73
 8007972:	f000 809d 	beq.w	8007ab0 <_printf_i+0x1a4>
 8007976:	d808      	bhi.n	800798a <_printf_i+0x7e>
 8007978:	296f      	cmp	r1, #111	; 0x6f
 800797a:	d020      	beq.n	80079be <_printf_i+0xb2>
 800797c:	2970      	cmp	r1, #112	; 0x70
 800797e:	d1dd      	bne.n	800793c <_printf_i+0x30>
 8007980:	6823      	ldr	r3, [r4, #0]
 8007982:	f043 0320 	orr.w	r3, r3, #32
 8007986:	6023      	str	r3, [r4, #0]
 8007988:	e003      	b.n	8007992 <_printf_i+0x86>
 800798a:	2975      	cmp	r1, #117	; 0x75
 800798c:	d017      	beq.n	80079be <_printf_i+0xb2>
 800798e:	2978      	cmp	r1, #120	; 0x78
 8007990:	d1d4      	bne.n	800793c <_printf_i+0x30>
 8007992:	2378      	movs	r3, #120	; 0x78
 8007994:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007998:	4864      	ldr	r0, [pc, #400]	; (8007b2c <_printf_i+0x220>)
 800799a:	e055      	b.n	8007a48 <_printf_i+0x13c>
 800799c:	6813      	ldr	r3, [r2, #0]
 800799e:	1d19      	adds	r1, r3, #4
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	6011      	str	r1, [r2, #0]
 80079a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80079a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80079ac:	2301      	movs	r3, #1
 80079ae:	e08c      	b.n	8007aca <_printf_i+0x1be>
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	6011      	str	r1, [r2, #0]
 80079b4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80079b8:	bf18      	it	ne
 80079ba:	b21b      	sxthne	r3, r3
 80079bc:	e7cf      	b.n	800795e <_printf_i+0x52>
 80079be:	6813      	ldr	r3, [r2, #0]
 80079c0:	6825      	ldr	r5, [r4, #0]
 80079c2:	1d18      	adds	r0, r3, #4
 80079c4:	6010      	str	r0, [r2, #0]
 80079c6:	0628      	lsls	r0, r5, #24
 80079c8:	d501      	bpl.n	80079ce <_printf_i+0xc2>
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	e002      	b.n	80079d4 <_printf_i+0xc8>
 80079ce:	0668      	lsls	r0, r5, #25
 80079d0:	d5fb      	bpl.n	80079ca <_printf_i+0xbe>
 80079d2:	881b      	ldrh	r3, [r3, #0]
 80079d4:	4854      	ldr	r0, [pc, #336]	; (8007b28 <_printf_i+0x21c>)
 80079d6:	296f      	cmp	r1, #111	; 0x6f
 80079d8:	bf14      	ite	ne
 80079da:	220a      	movne	r2, #10
 80079dc:	2208      	moveq	r2, #8
 80079de:	2100      	movs	r1, #0
 80079e0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80079e4:	6865      	ldr	r5, [r4, #4]
 80079e6:	60a5      	str	r5, [r4, #8]
 80079e8:	2d00      	cmp	r5, #0
 80079ea:	f2c0 8095 	blt.w	8007b18 <_printf_i+0x20c>
 80079ee:	6821      	ldr	r1, [r4, #0]
 80079f0:	f021 0104 	bic.w	r1, r1, #4
 80079f4:	6021      	str	r1, [r4, #0]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d13d      	bne.n	8007a76 <_printf_i+0x16a>
 80079fa:	2d00      	cmp	r5, #0
 80079fc:	f040 808e 	bne.w	8007b1c <_printf_i+0x210>
 8007a00:	4665      	mov	r5, ip
 8007a02:	2a08      	cmp	r2, #8
 8007a04:	d10b      	bne.n	8007a1e <_printf_i+0x112>
 8007a06:	6823      	ldr	r3, [r4, #0]
 8007a08:	07db      	lsls	r3, r3, #31
 8007a0a:	d508      	bpl.n	8007a1e <_printf_i+0x112>
 8007a0c:	6923      	ldr	r3, [r4, #16]
 8007a0e:	6862      	ldr	r2, [r4, #4]
 8007a10:	429a      	cmp	r2, r3
 8007a12:	bfde      	ittt	le
 8007a14:	2330      	movle	r3, #48	; 0x30
 8007a16:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007a1a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007a1e:	ebac 0305 	sub.w	r3, ip, r5
 8007a22:	6123      	str	r3, [r4, #16]
 8007a24:	f8cd 8000 	str.w	r8, [sp]
 8007a28:	463b      	mov	r3, r7
 8007a2a:	aa03      	add	r2, sp, #12
 8007a2c:	4621      	mov	r1, r4
 8007a2e:	4630      	mov	r0, r6
 8007a30:	f7ff fef6 	bl	8007820 <_printf_common>
 8007a34:	3001      	adds	r0, #1
 8007a36:	d14d      	bne.n	8007ad4 <_printf_i+0x1c8>
 8007a38:	f04f 30ff 	mov.w	r0, #4294967295
 8007a3c:	b005      	add	sp, #20
 8007a3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a42:	4839      	ldr	r0, [pc, #228]	; (8007b28 <_printf_i+0x21c>)
 8007a44:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007a48:	6813      	ldr	r3, [r2, #0]
 8007a4a:	6821      	ldr	r1, [r4, #0]
 8007a4c:	1d1d      	adds	r5, r3, #4
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	6015      	str	r5, [r2, #0]
 8007a52:	060a      	lsls	r2, r1, #24
 8007a54:	d50b      	bpl.n	8007a6e <_printf_i+0x162>
 8007a56:	07ca      	lsls	r2, r1, #31
 8007a58:	bf44      	itt	mi
 8007a5a:	f041 0120 	orrmi.w	r1, r1, #32
 8007a5e:	6021      	strmi	r1, [r4, #0]
 8007a60:	b91b      	cbnz	r3, 8007a6a <_printf_i+0x15e>
 8007a62:	6822      	ldr	r2, [r4, #0]
 8007a64:	f022 0220 	bic.w	r2, r2, #32
 8007a68:	6022      	str	r2, [r4, #0]
 8007a6a:	2210      	movs	r2, #16
 8007a6c:	e7b7      	b.n	80079de <_printf_i+0xd2>
 8007a6e:	064d      	lsls	r5, r1, #25
 8007a70:	bf48      	it	mi
 8007a72:	b29b      	uxthmi	r3, r3
 8007a74:	e7ef      	b.n	8007a56 <_printf_i+0x14a>
 8007a76:	4665      	mov	r5, ip
 8007a78:	fbb3 f1f2 	udiv	r1, r3, r2
 8007a7c:	fb02 3311 	mls	r3, r2, r1, r3
 8007a80:	5cc3      	ldrb	r3, [r0, r3]
 8007a82:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007a86:	460b      	mov	r3, r1
 8007a88:	2900      	cmp	r1, #0
 8007a8a:	d1f5      	bne.n	8007a78 <_printf_i+0x16c>
 8007a8c:	e7b9      	b.n	8007a02 <_printf_i+0xf6>
 8007a8e:	6813      	ldr	r3, [r2, #0]
 8007a90:	6825      	ldr	r5, [r4, #0]
 8007a92:	6961      	ldr	r1, [r4, #20]
 8007a94:	1d18      	adds	r0, r3, #4
 8007a96:	6010      	str	r0, [r2, #0]
 8007a98:	0628      	lsls	r0, r5, #24
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	d501      	bpl.n	8007aa2 <_printf_i+0x196>
 8007a9e:	6019      	str	r1, [r3, #0]
 8007aa0:	e002      	b.n	8007aa8 <_printf_i+0x19c>
 8007aa2:	066a      	lsls	r2, r5, #25
 8007aa4:	d5fb      	bpl.n	8007a9e <_printf_i+0x192>
 8007aa6:	8019      	strh	r1, [r3, #0]
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	6123      	str	r3, [r4, #16]
 8007aac:	4665      	mov	r5, ip
 8007aae:	e7b9      	b.n	8007a24 <_printf_i+0x118>
 8007ab0:	6813      	ldr	r3, [r2, #0]
 8007ab2:	1d19      	adds	r1, r3, #4
 8007ab4:	6011      	str	r1, [r2, #0]
 8007ab6:	681d      	ldr	r5, [r3, #0]
 8007ab8:	6862      	ldr	r2, [r4, #4]
 8007aba:	2100      	movs	r1, #0
 8007abc:	4628      	mov	r0, r5
 8007abe:	f7f8 fb8f 	bl	80001e0 <memchr>
 8007ac2:	b108      	cbz	r0, 8007ac8 <_printf_i+0x1bc>
 8007ac4:	1b40      	subs	r0, r0, r5
 8007ac6:	6060      	str	r0, [r4, #4]
 8007ac8:	6863      	ldr	r3, [r4, #4]
 8007aca:	6123      	str	r3, [r4, #16]
 8007acc:	2300      	movs	r3, #0
 8007ace:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ad2:	e7a7      	b.n	8007a24 <_printf_i+0x118>
 8007ad4:	6923      	ldr	r3, [r4, #16]
 8007ad6:	462a      	mov	r2, r5
 8007ad8:	4639      	mov	r1, r7
 8007ada:	4630      	mov	r0, r6
 8007adc:	47c0      	blx	r8
 8007ade:	3001      	adds	r0, #1
 8007ae0:	d0aa      	beq.n	8007a38 <_printf_i+0x12c>
 8007ae2:	6823      	ldr	r3, [r4, #0]
 8007ae4:	079b      	lsls	r3, r3, #30
 8007ae6:	d413      	bmi.n	8007b10 <_printf_i+0x204>
 8007ae8:	68e0      	ldr	r0, [r4, #12]
 8007aea:	9b03      	ldr	r3, [sp, #12]
 8007aec:	4298      	cmp	r0, r3
 8007aee:	bfb8      	it	lt
 8007af0:	4618      	movlt	r0, r3
 8007af2:	e7a3      	b.n	8007a3c <_printf_i+0x130>
 8007af4:	2301      	movs	r3, #1
 8007af6:	464a      	mov	r2, r9
 8007af8:	4639      	mov	r1, r7
 8007afa:	4630      	mov	r0, r6
 8007afc:	47c0      	blx	r8
 8007afe:	3001      	adds	r0, #1
 8007b00:	d09a      	beq.n	8007a38 <_printf_i+0x12c>
 8007b02:	3501      	adds	r5, #1
 8007b04:	68e3      	ldr	r3, [r4, #12]
 8007b06:	9a03      	ldr	r2, [sp, #12]
 8007b08:	1a9b      	subs	r3, r3, r2
 8007b0a:	42ab      	cmp	r3, r5
 8007b0c:	dcf2      	bgt.n	8007af4 <_printf_i+0x1e8>
 8007b0e:	e7eb      	b.n	8007ae8 <_printf_i+0x1dc>
 8007b10:	2500      	movs	r5, #0
 8007b12:	f104 0919 	add.w	r9, r4, #25
 8007b16:	e7f5      	b.n	8007b04 <_printf_i+0x1f8>
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d1ac      	bne.n	8007a76 <_printf_i+0x16a>
 8007b1c:	7803      	ldrb	r3, [r0, #0]
 8007b1e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b22:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b26:	e76c      	b.n	8007a02 <_printf_i+0xf6>
 8007b28:	0800a8fe 	.word	0x0800a8fe
 8007b2c:	0800a90f 	.word	0x0800a90f

08007b30 <iprintf>:
 8007b30:	b40f      	push	{r0, r1, r2, r3}
 8007b32:	4b0a      	ldr	r3, [pc, #40]	; (8007b5c <iprintf+0x2c>)
 8007b34:	b513      	push	{r0, r1, r4, lr}
 8007b36:	681c      	ldr	r4, [r3, #0]
 8007b38:	b124      	cbz	r4, 8007b44 <iprintf+0x14>
 8007b3a:	69a3      	ldr	r3, [r4, #24]
 8007b3c:	b913      	cbnz	r3, 8007b44 <iprintf+0x14>
 8007b3e:	4620      	mov	r0, r4
 8007b40:	f001 f91e 	bl	8008d80 <__sinit>
 8007b44:	ab05      	add	r3, sp, #20
 8007b46:	9a04      	ldr	r2, [sp, #16]
 8007b48:	68a1      	ldr	r1, [r4, #8]
 8007b4a:	9301      	str	r3, [sp, #4]
 8007b4c:	4620      	mov	r0, r4
 8007b4e:	f001 fde1 	bl	8009714 <_vfiprintf_r>
 8007b52:	b002      	add	sp, #8
 8007b54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b58:	b004      	add	sp, #16
 8007b5a:	4770      	bx	lr
 8007b5c:	20000014 	.word	0x20000014

08007b60 <_puts_r>:
 8007b60:	b570      	push	{r4, r5, r6, lr}
 8007b62:	460e      	mov	r6, r1
 8007b64:	4605      	mov	r5, r0
 8007b66:	b118      	cbz	r0, 8007b70 <_puts_r+0x10>
 8007b68:	6983      	ldr	r3, [r0, #24]
 8007b6a:	b90b      	cbnz	r3, 8007b70 <_puts_r+0x10>
 8007b6c:	f001 f908 	bl	8008d80 <__sinit>
 8007b70:	69ab      	ldr	r3, [r5, #24]
 8007b72:	68ac      	ldr	r4, [r5, #8]
 8007b74:	b913      	cbnz	r3, 8007b7c <_puts_r+0x1c>
 8007b76:	4628      	mov	r0, r5
 8007b78:	f001 f902 	bl	8008d80 <__sinit>
 8007b7c:	4b23      	ldr	r3, [pc, #140]	; (8007c0c <_puts_r+0xac>)
 8007b7e:	429c      	cmp	r4, r3
 8007b80:	d117      	bne.n	8007bb2 <_puts_r+0x52>
 8007b82:	686c      	ldr	r4, [r5, #4]
 8007b84:	89a3      	ldrh	r3, [r4, #12]
 8007b86:	071b      	lsls	r3, r3, #28
 8007b88:	d51d      	bpl.n	8007bc6 <_puts_r+0x66>
 8007b8a:	6923      	ldr	r3, [r4, #16]
 8007b8c:	b1db      	cbz	r3, 8007bc6 <_puts_r+0x66>
 8007b8e:	3e01      	subs	r6, #1
 8007b90:	68a3      	ldr	r3, [r4, #8]
 8007b92:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007b96:	3b01      	subs	r3, #1
 8007b98:	60a3      	str	r3, [r4, #8]
 8007b9a:	b9e9      	cbnz	r1, 8007bd8 <_puts_r+0x78>
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	da2e      	bge.n	8007bfe <_puts_r+0x9e>
 8007ba0:	4622      	mov	r2, r4
 8007ba2:	210a      	movs	r1, #10
 8007ba4:	4628      	mov	r0, r5
 8007ba6:	f000 f8f5 	bl	8007d94 <__swbuf_r>
 8007baa:	3001      	adds	r0, #1
 8007bac:	d011      	beq.n	8007bd2 <_puts_r+0x72>
 8007bae:	200a      	movs	r0, #10
 8007bb0:	e011      	b.n	8007bd6 <_puts_r+0x76>
 8007bb2:	4b17      	ldr	r3, [pc, #92]	; (8007c10 <_puts_r+0xb0>)
 8007bb4:	429c      	cmp	r4, r3
 8007bb6:	d101      	bne.n	8007bbc <_puts_r+0x5c>
 8007bb8:	68ac      	ldr	r4, [r5, #8]
 8007bba:	e7e3      	b.n	8007b84 <_puts_r+0x24>
 8007bbc:	4b15      	ldr	r3, [pc, #84]	; (8007c14 <_puts_r+0xb4>)
 8007bbe:	429c      	cmp	r4, r3
 8007bc0:	bf08      	it	eq
 8007bc2:	68ec      	ldreq	r4, [r5, #12]
 8007bc4:	e7de      	b.n	8007b84 <_puts_r+0x24>
 8007bc6:	4621      	mov	r1, r4
 8007bc8:	4628      	mov	r0, r5
 8007bca:	f000 f935 	bl	8007e38 <__swsetup_r>
 8007bce:	2800      	cmp	r0, #0
 8007bd0:	d0dd      	beq.n	8007b8e <_puts_r+0x2e>
 8007bd2:	f04f 30ff 	mov.w	r0, #4294967295
 8007bd6:	bd70      	pop	{r4, r5, r6, pc}
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	da04      	bge.n	8007be6 <_puts_r+0x86>
 8007bdc:	69a2      	ldr	r2, [r4, #24]
 8007bde:	429a      	cmp	r2, r3
 8007be0:	dc06      	bgt.n	8007bf0 <_puts_r+0x90>
 8007be2:	290a      	cmp	r1, #10
 8007be4:	d004      	beq.n	8007bf0 <_puts_r+0x90>
 8007be6:	6823      	ldr	r3, [r4, #0]
 8007be8:	1c5a      	adds	r2, r3, #1
 8007bea:	6022      	str	r2, [r4, #0]
 8007bec:	7019      	strb	r1, [r3, #0]
 8007bee:	e7cf      	b.n	8007b90 <_puts_r+0x30>
 8007bf0:	4622      	mov	r2, r4
 8007bf2:	4628      	mov	r0, r5
 8007bf4:	f000 f8ce 	bl	8007d94 <__swbuf_r>
 8007bf8:	3001      	adds	r0, #1
 8007bfa:	d1c9      	bne.n	8007b90 <_puts_r+0x30>
 8007bfc:	e7e9      	b.n	8007bd2 <_puts_r+0x72>
 8007bfe:	6823      	ldr	r3, [r4, #0]
 8007c00:	200a      	movs	r0, #10
 8007c02:	1c5a      	adds	r2, r3, #1
 8007c04:	6022      	str	r2, [r4, #0]
 8007c06:	7018      	strb	r0, [r3, #0]
 8007c08:	e7e5      	b.n	8007bd6 <_puts_r+0x76>
 8007c0a:	bf00      	nop
 8007c0c:	0800a950 	.word	0x0800a950
 8007c10:	0800a970 	.word	0x0800a970
 8007c14:	0800a930 	.word	0x0800a930

08007c18 <puts>:
 8007c18:	4b02      	ldr	r3, [pc, #8]	; (8007c24 <puts+0xc>)
 8007c1a:	4601      	mov	r1, r0
 8007c1c:	6818      	ldr	r0, [r3, #0]
 8007c1e:	f7ff bf9f 	b.w	8007b60 <_puts_r>
 8007c22:	bf00      	nop
 8007c24:	20000014 	.word	0x20000014

08007c28 <setbuf>:
 8007c28:	2900      	cmp	r1, #0
 8007c2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c2e:	bf0c      	ite	eq
 8007c30:	2202      	moveq	r2, #2
 8007c32:	2200      	movne	r2, #0
 8007c34:	f000 b800 	b.w	8007c38 <setvbuf>

08007c38 <setvbuf>:
 8007c38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007c3c:	461d      	mov	r5, r3
 8007c3e:	4b51      	ldr	r3, [pc, #324]	; (8007d84 <setvbuf+0x14c>)
 8007c40:	681e      	ldr	r6, [r3, #0]
 8007c42:	4604      	mov	r4, r0
 8007c44:	460f      	mov	r7, r1
 8007c46:	4690      	mov	r8, r2
 8007c48:	b126      	cbz	r6, 8007c54 <setvbuf+0x1c>
 8007c4a:	69b3      	ldr	r3, [r6, #24]
 8007c4c:	b913      	cbnz	r3, 8007c54 <setvbuf+0x1c>
 8007c4e:	4630      	mov	r0, r6
 8007c50:	f001 f896 	bl	8008d80 <__sinit>
 8007c54:	4b4c      	ldr	r3, [pc, #304]	; (8007d88 <setvbuf+0x150>)
 8007c56:	429c      	cmp	r4, r3
 8007c58:	d152      	bne.n	8007d00 <setvbuf+0xc8>
 8007c5a:	6874      	ldr	r4, [r6, #4]
 8007c5c:	f1b8 0f02 	cmp.w	r8, #2
 8007c60:	d006      	beq.n	8007c70 <setvbuf+0x38>
 8007c62:	f1b8 0f01 	cmp.w	r8, #1
 8007c66:	f200 8089 	bhi.w	8007d7c <setvbuf+0x144>
 8007c6a:	2d00      	cmp	r5, #0
 8007c6c:	f2c0 8086 	blt.w	8007d7c <setvbuf+0x144>
 8007c70:	4621      	mov	r1, r4
 8007c72:	4630      	mov	r0, r6
 8007c74:	f001 f81a 	bl	8008cac <_fflush_r>
 8007c78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c7a:	b141      	cbz	r1, 8007c8e <setvbuf+0x56>
 8007c7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c80:	4299      	cmp	r1, r3
 8007c82:	d002      	beq.n	8007c8a <setvbuf+0x52>
 8007c84:	4630      	mov	r0, r6
 8007c86:	f001 fc73 	bl	8009570 <_free_r>
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	6363      	str	r3, [r4, #52]	; 0x34
 8007c8e:	2300      	movs	r3, #0
 8007c90:	61a3      	str	r3, [r4, #24]
 8007c92:	6063      	str	r3, [r4, #4]
 8007c94:	89a3      	ldrh	r3, [r4, #12]
 8007c96:	061b      	lsls	r3, r3, #24
 8007c98:	d503      	bpl.n	8007ca2 <setvbuf+0x6a>
 8007c9a:	6921      	ldr	r1, [r4, #16]
 8007c9c:	4630      	mov	r0, r6
 8007c9e:	f001 fc67 	bl	8009570 <_free_r>
 8007ca2:	89a3      	ldrh	r3, [r4, #12]
 8007ca4:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8007ca8:	f023 0303 	bic.w	r3, r3, #3
 8007cac:	f1b8 0f02 	cmp.w	r8, #2
 8007cb0:	81a3      	strh	r3, [r4, #12]
 8007cb2:	d05d      	beq.n	8007d70 <setvbuf+0x138>
 8007cb4:	ab01      	add	r3, sp, #4
 8007cb6:	466a      	mov	r2, sp
 8007cb8:	4621      	mov	r1, r4
 8007cba:	4630      	mov	r0, r6
 8007cbc:	f001 f8f8 	bl	8008eb0 <__swhatbuf_r>
 8007cc0:	89a3      	ldrh	r3, [r4, #12]
 8007cc2:	4318      	orrs	r0, r3
 8007cc4:	81a0      	strh	r0, [r4, #12]
 8007cc6:	bb2d      	cbnz	r5, 8007d14 <setvbuf+0xdc>
 8007cc8:	9d00      	ldr	r5, [sp, #0]
 8007cca:	4628      	mov	r0, r5
 8007ccc:	f001 f954 	bl	8008f78 <malloc>
 8007cd0:	4607      	mov	r7, r0
 8007cd2:	2800      	cmp	r0, #0
 8007cd4:	d14e      	bne.n	8007d74 <setvbuf+0x13c>
 8007cd6:	f8dd 9000 	ldr.w	r9, [sp]
 8007cda:	45a9      	cmp	r9, r5
 8007cdc:	d13c      	bne.n	8007d58 <setvbuf+0x120>
 8007cde:	f04f 30ff 	mov.w	r0, #4294967295
 8007ce2:	89a3      	ldrh	r3, [r4, #12]
 8007ce4:	f043 0302 	orr.w	r3, r3, #2
 8007ce8:	81a3      	strh	r3, [r4, #12]
 8007cea:	2300      	movs	r3, #0
 8007cec:	60a3      	str	r3, [r4, #8]
 8007cee:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007cf2:	6023      	str	r3, [r4, #0]
 8007cf4:	6123      	str	r3, [r4, #16]
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	6163      	str	r3, [r4, #20]
 8007cfa:	b003      	add	sp, #12
 8007cfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007d00:	4b22      	ldr	r3, [pc, #136]	; (8007d8c <setvbuf+0x154>)
 8007d02:	429c      	cmp	r4, r3
 8007d04:	d101      	bne.n	8007d0a <setvbuf+0xd2>
 8007d06:	68b4      	ldr	r4, [r6, #8]
 8007d08:	e7a8      	b.n	8007c5c <setvbuf+0x24>
 8007d0a:	4b21      	ldr	r3, [pc, #132]	; (8007d90 <setvbuf+0x158>)
 8007d0c:	429c      	cmp	r4, r3
 8007d0e:	bf08      	it	eq
 8007d10:	68f4      	ldreq	r4, [r6, #12]
 8007d12:	e7a3      	b.n	8007c5c <setvbuf+0x24>
 8007d14:	2f00      	cmp	r7, #0
 8007d16:	d0d8      	beq.n	8007cca <setvbuf+0x92>
 8007d18:	69b3      	ldr	r3, [r6, #24]
 8007d1a:	b913      	cbnz	r3, 8007d22 <setvbuf+0xea>
 8007d1c:	4630      	mov	r0, r6
 8007d1e:	f001 f82f 	bl	8008d80 <__sinit>
 8007d22:	f1b8 0f01 	cmp.w	r8, #1
 8007d26:	bf08      	it	eq
 8007d28:	89a3      	ldrheq	r3, [r4, #12]
 8007d2a:	6027      	str	r7, [r4, #0]
 8007d2c:	bf04      	itt	eq
 8007d2e:	f043 0301 	orreq.w	r3, r3, #1
 8007d32:	81a3      	strheq	r3, [r4, #12]
 8007d34:	89a3      	ldrh	r3, [r4, #12]
 8007d36:	f013 0008 	ands.w	r0, r3, #8
 8007d3a:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8007d3e:	d01b      	beq.n	8007d78 <setvbuf+0x140>
 8007d40:	f013 0001 	ands.w	r0, r3, #1
 8007d44:	bf18      	it	ne
 8007d46:	426d      	negne	r5, r5
 8007d48:	f04f 0300 	mov.w	r3, #0
 8007d4c:	bf1d      	ittte	ne
 8007d4e:	60a3      	strne	r3, [r4, #8]
 8007d50:	61a5      	strne	r5, [r4, #24]
 8007d52:	4618      	movne	r0, r3
 8007d54:	60a5      	streq	r5, [r4, #8]
 8007d56:	e7d0      	b.n	8007cfa <setvbuf+0xc2>
 8007d58:	4648      	mov	r0, r9
 8007d5a:	f001 f90d 	bl	8008f78 <malloc>
 8007d5e:	4607      	mov	r7, r0
 8007d60:	2800      	cmp	r0, #0
 8007d62:	d0bc      	beq.n	8007cde <setvbuf+0xa6>
 8007d64:	89a3      	ldrh	r3, [r4, #12]
 8007d66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d6a:	81a3      	strh	r3, [r4, #12]
 8007d6c:	464d      	mov	r5, r9
 8007d6e:	e7d3      	b.n	8007d18 <setvbuf+0xe0>
 8007d70:	2000      	movs	r0, #0
 8007d72:	e7b6      	b.n	8007ce2 <setvbuf+0xaa>
 8007d74:	46a9      	mov	r9, r5
 8007d76:	e7f5      	b.n	8007d64 <setvbuf+0x12c>
 8007d78:	60a0      	str	r0, [r4, #8]
 8007d7a:	e7be      	b.n	8007cfa <setvbuf+0xc2>
 8007d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d80:	e7bb      	b.n	8007cfa <setvbuf+0xc2>
 8007d82:	bf00      	nop
 8007d84:	20000014 	.word	0x20000014
 8007d88:	0800a950 	.word	0x0800a950
 8007d8c:	0800a970 	.word	0x0800a970
 8007d90:	0800a930 	.word	0x0800a930

08007d94 <__swbuf_r>:
 8007d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d96:	460e      	mov	r6, r1
 8007d98:	4614      	mov	r4, r2
 8007d9a:	4605      	mov	r5, r0
 8007d9c:	b118      	cbz	r0, 8007da6 <__swbuf_r+0x12>
 8007d9e:	6983      	ldr	r3, [r0, #24]
 8007da0:	b90b      	cbnz	r3, 8007da6 <__swbuf_r+0x12>
 8007da2:	f000 ffed 	bl	8008d80 <__sinit>
 8007da6:	4b21      	ldr	r3, [pc, #132]	; (8007e2c <__swbuf_r+0x98>)
 8007da8:	429c      	cmp	r4, r3
 8007daa:	d12a      	bne.n	8007e02 <__swbuf_r+0x6e>
 8007dac:	686c      	ldr	r4, [r5, #4]
 8007dae:	69a3      	ldr	r3, [r4, #24]
 8007db0:	60a3      	str	r3, [r4, #8]
 8007db2:	89a3      	ldrh	r3, [r4, #12]
 8007db4:	071a      	lsls	r2, r3, #28
 8007db6:	d52e      	bpl.n	8007e16 <__swbuf_r+0x82>
 8007db8:	6923      	ldr	r3, [r4, #16]
 8007dba:	b363      	cbz	r3, 8007e16 <__swbuf_r+0x82>
 8007dbc:	6923      	ldr	r3, [r4, #16]
 8007dbe:	6820      	ldr	r0, [r4, #0]
 8007dc0:	1ac0      	subs	r0, r0, r3
 8007dc2:	6963      	ldr	r3, [r4, #20]
 8007dc4:	b2f6      	uxtb	r6, r6
 8007dc6:	4283      	cmp	r3, r0
 8007dc8:	4637      	mov	r7, r6
 8007dca:	dc04      	bgt.n	8007dd6 <__swbuf_r+0x42>
 8007dcc:	4621      	mov	r1, r4
 8007dce:	4628      	mov	r0, r5
 8007dd0:	f000 ff6c 	bl	8008cac <_fflush_r>
 8007dd4:	bb28      	cbnz	r0, 8007e22 <__swbuf_r+0x8e>
 8007dd6:	68a3      	ldr	r3, [r4, #8]
 8007dd8:	3b01      	subs	r3, #1
 8007dda:	60a3      	str	r3, [r4, #8]
 8007ddc:	6823      	ldr	r3, [r4, #0]
 8007dde:	1c5a      	adds	r2, r3, #1
 8007de0:	6022      	str	r2, [r4, #0]
 8007de2:	701e      	strb	r6, [r3, #0]
 8007de4:	6963      	ldr	r3, [r4, #20]
 8007de6:	3001      	adds	r0, #1
 8007de8:	4283      	cmp	r3, r0
 8007dea:	d004      	beq.n	8007df6 <__swbuf_r+0x62>
 8007dec:	89a3      	ldrh	r3, [r4, #12]
 8007dee:	07db      	lsls	r3, r3, #31
 8007df0:	d519      	bpl.n	8007e26 <__swbuf_r+0x92>
 8007df2:	2e0a      	cmp	r6, #10
 8007df4:	d117      	bne.n	8007e26 <__swbuf_r+0x92>
 8007df6:	4621      	mov	r1, r4
 8007df8:	4628      	mov	r0, r5
 8007dfa:	f000 ff57 	bl	8008cac <_fflush_r>
 8007dfe:	b190      	cbz	r0, 8007e26 <__swbuf_r+0x92>
 8007e00:	e00f      	b.n	8007e22 <__swbuf_r+0x8e>
 8007e02:	4b0b      	ldr	r3, [pc, #44]	; (8007e30 <__swbuf_r+0x9c>)
 8007e04:	429c      	cmp	r4, r3
 8007e06:	d101      	bne.n	8007e0c <__swbuf_r+0x78>
 8007e08:	68ac      	ldr	r4, [r5, #8]
 8007e0a:	e7d0      	b.n	8007dae <__swbuf_r+0x1a>
 8007e0c:	4b09      	ldr	r3, [pc, #36]	; (8007e34 <__swbuf_r+0xa0>)
 8007e0e:	429c      	cmp	r4, r3
 8007e10:	bf08      	it	eq
 8007e12:	68ec      	ldreq	r4, [r5, #12]
 8007e14:	e7cb      	b.n	8007dae <__swbuf_r+0x1a>
 8007e16:	4621      	mov	r1, r4
 8007e18:	4628      	mov	r0, r5
 8007e1a:	f000 f80d 	bl	8007e38 <__swsetup_r>
 8007e1e:	2800      	cmp	r0, #0
 8007e20:	d0cc      	beq.n	8007dbc <__swbuf_r+0x28>
 8007e22:	f04f 37ff 	mov.w	r7, #4294967295
 8007e26:	4638      	mov	r0, r7
 8007e28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e2a:	bf00      	nop
 8007e2c:	0800a950 	.word	0x0800a950
 8007e30:	0800a970 	.word	0x0800a970
 8007e34:	0800a930 	.word	0x0800a930

08007e38 <__swsetup_r>:
 8007e38:	4b32      	ldr	r3, [pc, #200]	; (8007f04 <__swsetup_r+0xcc>)
 8007e3a:	b570      	push	{r4, r5, r6, lr}
 8007e3c:	681d      	ldr	r5, [r3, #0]
 8007e3e:	4606      	mov	r6, r0
 8007e40:	460c      	mov	r4, r1
 8007e42:	b125      	cbz	r5, 8007e4e <__swsetup_r+0x16>
 8007e44:	69ab      	ldr	r3, [r5, #24]
 8007e46:	b913      	cbnz	r3, 8007e4e <__swsetup_r+0x16>
 8007e48:	4628      	mov	r0, r5
 8007e4a:	f000 ff99 	bl	8008d80 <__sinit>
 8007e4e:	4b2e      	ldr	r3, [pc, #184]	; (8007f08 <__swsetup_r+0xd0>)
 8007e50:	429c      	cmp	r4, r3
 8007e52:	d10f      	bne.n	8007e74 <__swsetup_r+0x3c>
 8007e54:	686c      	ldr	r4, [r5, #4]
 8007e56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e5a:	b29a      	uxth	r2, r3
 8007e5c:	0715      	lsls	r5, r2, #28
 8007e5e:	d42c      	bmi.n	8007eba <__swsetup_r+0x82>
 8007e60:	06d0      	lsls	r0, r2, #27
 8007e62:	d411      	bmi.n	8007e88 <__swsetup_r+0x50>
 8007e64:	2209      	movs	r2, #9
 8007e66:	6032      	str	r2, [r6, #0]
 8007e68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e6c:	81a3      	strh	r3, [r4, #12]
 8007e6e:	f04f 30ff 	mov.w	r0, #4294967295
 8007e72:	e03e      	b.n	8007ef2 <__swsetup_r+0xba>
 8007e74:	4b25      	ldr	r3, [pc, #148]	; (8007f0c <__swsetup_r+0xd4>)
 8007e76:	429c      	cmp	r4, r3
 8007e78:	d101      	bne.n	8007e7e <__swsetup_r+0x46>
 8007e7a:	68ac      	ldr	r4, [r5, #8]
 8007e7c:	e7eb      	b.n	8007e56 <__swsetup_r+0x1e>
 8007e7e:	4b24      	ldr	r3, [pc, #144]	; (8007f10 <__swsetup_r+0xd8>)
 8007e80:	429c      	cmp	r4, r3
 8007e82:	bf08      	it	eq
 8007e84:	68ec      	ldreq	r4, [r5, #12]
 8007e86:	e7e6      	b.n	8007e56 <__swsetup_r+0x1e>
 8007e88:	0751      	lsls	r1, r2, #29
 8007e8a:	d512      	bpl.n	8007eb2 <__swsetup_r+0x7a>
 8007e8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e8e:	b141      	cbz	r1, 8007ea2 <__swsetup_r+0x6a>
 8007e90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e94:	4299      	cmp	r1, r3
 8007e96:	d002      	beq.n	8007e9e <__swsetup_r+0x66>
 8007e98:	4630      	mov	r0, r6
 8007e9a:	f001 fb69 	bl	8009570 <_free_r>
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	6363      	str	r3, [r4, #52]	; 0x34
 8007ea2:	89a3      	ldrh	r3, [r4, #12]
 8007ea4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007ea8:	81a3      	strh	r3, [r4, #12]
 8007eaa:	2300      	movs	r3, #0
 8007eac:	6063      	str	r3, [r4, #4]
 8007eae:	6923      	ldr	r3, [r4, #16]
 8007eb0:	6023      	str	r3, [r4, #0]
 8007eb2:	89a3      	ldrh	r3, [r4, #12]
 8007eb4:	f043 0308 	orr.w	r3, r3, #8
 8007eb8:	81a3      	strh	r3, [r4, #12]
 8007eba:	6923      	ldr	r3, [r4, #16]
 8007ebc:	b94b      	cbnz	r3, 8007ed2 <__swsetup_r+0x9a>
 8007ebe:	89a3      	ldrh	r3, [r4, #12]
 8007ec0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007ec4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ec8:	d003      	beq.n	8007ed2 <__swsetup_r+0x9a>
 8007eca:	4621      	mov	r1, r4
 8007ecc:	4630      	mov	r0, r6
 8007ece:	f001 f813 	bl	8008ef8 <__smakebuf_r>
 8007ed2:	89a2      	ldrh	r2, [r4, #12]
 8007ed4:	f012 0301 	ands.w	r3, r2, #1
 8007ed8:	d00c      	beq.n	8007ef4 <__swsetup_r+0xbc>
 8007eda:	2300      	movs	r3, #0
 8007edc:	60a3      	str	r3, [r4, #8]
 8007ede:	6963      	ldr	r3, [r4, #20]
 8007ee0:	425b      	negs	r3, r3
 8007ee2:	61a3      	str	r3, [r4, #24]
 8007ee4:	6923      	ldr	r3, [r4, #16]
 8007ee6:	b953      	cbnz	r3, 8007efe <__swsetup_r+0xc6>
 8007ee8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007eec:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007ef0:	d1ba      	bne.n	8007e68 <__swsetup_r+0x30>
 8007ef2:	bd70      	pop	{r4, r5, r6, pc}
 8007ef4:	0792      	lsls	r2, r2, #30
 8007ef6:	bf58      	it	pl
 8007ef8:	6963      	ldrpl	r3, [r4, #20]
 8007efa:	60a3      	str	r3, [r4, #8]
 8007efc:	e7f2      	b.n	8007ee4 <__swsetup_r+0xac>
 8007efe:	2000      	movs	r0, #0
 8007f00:	e7f7      	b.n	8007ef2 <__swsetup_r+0xba>
 8007f02:	bf00      	nop
 8007f04:	20000014 	.word	0x20000014
 8007f08:	0800a950 	.word	0x0800a950
 8007f0c:	0800a970 	.word	0x0800a970
 8007f10:	0800a930 	.word	0x0800a930

08007f14 <quorem>:
 8007f14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f18:	6903      	ldr	r3, [r0, #16]
 8007f1a:	690c      	ldr	r4, [r1, #16]
 8007f1c:	42a3      	cmp	r3, r4
 8007f1e:	4680      	mov	r8, r0
 8007f20:	f2c0 8082 	blt.w	8008028 <quorem+0x114>
 8007f24:	3c01      	subs	r4, #1
 8007f26:	f101 0714 	add.w	r7, r1, #20
 8007f2a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8007f2e:	f100 0614 	add.w	r6, r0, #20
 8007f32:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8007f36:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8007f3a:	eb06 030c 	add.w	r3, r6, ip
 8007f3e:	3501      	adds	r5, #1
 8007f40:	eb07 090c 	add.w	r9, r7, ip
 8007f44:	9301      	str	r3, [sp, #4]
 8007f46:	fbb0 f5f5 	udiv	r5, r0, r5
 8007f4a:	b395      	cbz	r5, 8007fb2 <quorem+0x9e>
 8007f4c:	f04f 0a00 	mov.w	sl, #0
 8007f50:	4638      	mov	r0, r7
 8007f52:	46b6      	mov	lr, r6
 8007f54:	46d3      	mov	fp, sl
 8007f56:	f850 2b04 	ldr.w	r2, [r0], #4
 8007f5a:	b293      	uxth	r3, r2
 8007f5c:	fb05 a303 	mla	r3, r5, r3, sl
 8007f60:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007f64:	b29b      	uxth	r3, r3
 8007f66:	ebab 0303 	sub.w	r3, fp, r3
 8007f6a:	0c12      	lsrs	r2, r2, #16
 8007f6c:	f8de b000 	ldr.w	fp, [lr]
 8007f70:	fb05 a202 	mla	r2, r5, r2, sl
 8007f74:	fa13 f38b 	uxtah	r3, r3, fp
 8007f78:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007f7c:	fa1f fb82 	uxth.w	fp, r2
 8007f80:	f8de 2000 	ldr.w	r2, [lr]
 8007f84:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007f88:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007f8c:	b29b      	uxth	r3, r3
 8007f8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f92:	4581      	cmp	r9, r0
 8007f94:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007f98:	f84e 3b04 	str.w	r3, [lr], #4
 8007f9c:	d2db      	bcs.n	8007f56 <quorem+0x42>
 8007f9e:	f856 300c 	ldr.w	r3, [r6, ip]
 8007fa2:	b933      	cbnz	r3, 8007fb2 <quorem+0x9e>
 8007fa4:	9b01      	ldr	r3, [sp, #4]
 8007fa6:	3b04      	subs	r3, #4
 8007fa8:	429e      	cmp	r6, r3
 8007faa:	461a      	mov	r2, r3
 8007fac:	d330      	bcc.n	8008010 <quorem+0xfc>
 8007fae:	f8c8 4010 	str.w	r4, [r8, #16]
 8007fb2:	4640      	mov	r0, r8
 8007fb4:	f001 fa08 	bl	80093c8 <__mcmp>
 8007fb8:	2800      	cmp	r0, #0
 8007fba:	db25      	blt.n	8008008 <quorem+0xf4>
 8007fbc:	3501      	adds	r5, #1
 8007fbe:	4630      	mov	r0, r6
 8007fc0:	f04f 0c00 	mov.w	ip, #0
 8007fc4:	f857 2b04 	ldr.w	r2, [r7], #4
 8007fc8:	f8d0 e000 	ldr.w	lr, [r0]
 8007fcc:	b293      	uxth	r3, r2
 8007fce:	ebac 0303 	sub.w	r3, ip, r3
 8007fd2:	0c12      	lsrs	r2, r2, #16
 8007fd4:	fa13 f38e 	uxtah	r3, r3, lr
 8007fd8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007fdc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007fe6:	45b9      	cmp	r9, r7
 8007fe8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007fec:	f840 3b04 	str.w	r3, [r0], #4
 8007ff0:	d2e8      	bcs.n	8007fc4 <quorem+0xb0>
 8007ff2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007ff6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007ffa:	b92a      	cbnz	r2, 8008008 <quorem+0xf4>
 8007ffc:	3b04      	subs	r3, #4
 8007ffe:	429e      	cmp	r6, r3
 8008000:	461a      	mov	r2, r3
 8008002:	d30b      	bcc.n	800801c <quorem+0x108>
 8008004:	f8c8 4010 	str.w	r4, [r8, #16]
 8008008:	4628      	mov	r0, r5
 800800a:	b003      	add	sp, #12
 800800c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008010:	6812      	ldr	r2, [r2, #0]
 8008012:	3b04      	subs	r3, #4
 8008014:	2a00      	cmp	r2, #0
 8008016:	d1ca      	bne.n	8007fae <quorem+0x9a>
 8008018:	3c01      	subs	r4, #1
 800801a:	e7c5      	b.n	8007fa8 <quorem+0x94>
 800801c:	6812      	ldr	r2, [r2, #0]
 800801e:	3b04      	subs	r3, #4
 8008020:	2a00      	cmp	r2, #0
 8008022:	d1ef      	bne.n	8008004 <quorem+0xf0>
 8008024:	3c01      	subs	r4, #1
 8008026:	e7ea      	b.n	8007ffe <quorem+0xea>
 8008028:	2000      	movs	r0, #0
 800802a:	e7ee      	b.n	800800a <quorem+0xf6>
 800802c:	0000      	movs	r0, r0
	...

08008030 <_dtoa_r>:
 8008030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008034:	ec57 6b10 	vmov	r6, r7, d0
 8008038:	b097      	sub	sp, #92	; 0x5c
 800803a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800803c:	9106      	str	r1, [sp, #24]
 800803e:	4604      	mov	r4, r0
 8008040:	920b      	str	r2, [sp, #44]	; 0x2c
 8008042:	9312      	str	r3, [sp, #72]	; 0x48
 8008044:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008048:	e9cd 6700 	strd	r6, r7, [sp]
 800804c:	b93d      	cbnz	r5, 800805e <_dtoa_r+0x2e>
 800804e:	2010      	movs	r0, #16
 8008050:	f000 ff92 	bl	8008f78 <malloc>
 8008054:	6260      	str	r0, [r4, #36]	; 0x24
 8008056:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800805a:	6005      	str	r5, [r0, #0]
 800805c:	60c5      	str	r5, [r0, #12]
 800805e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008060:	6819      	ldr	r1, [r3, #0]
 8008062:	b151      	cbz	r1, 800807a <_dtoa_r+0x4a>
 8008064:	685a      	ldr	r2, [r3, #4]
 8008066:	604a      	str	r2, [r1, #4]
 8008068:	2301      	movs	r3, #1
 800806a:	4093      	lsls	r3, r2
 800806c:	608b      	str	r3, [r1, #8]
 800806e:	4620      	mov	r0, r4
 8008070:	f000 ffc9 	bl	8009006 <_Bfree>
 8008074:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008076:	2200      	movs	r2, #0
 8008078:	601a      	str	r2, [r3, #0]
 800807a:	1e3b      	subs	r3, r7, #0
 800807c:	bfbb      	ittet	lt
 800807e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008082:	9301      	strlt	r3, [sp, #4]
 8008084:	2300      	movge	r3, #0
 8008086:	2201      	movlt	r2, #1
 8008088:	bfac      	ite	ge
 800808a:	f8c8 3000 	strge.w	r3, [r8]
 800808e:	f8c8 2000 	strlt.w	r2, [r8]
 8008092:	4baf      	ldr	r3, [pc, #700]	; (8008350 <_dtoa_r+0x320>)
 8008094:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008098:	ea33 0308 	bics.w	r3, r3, r8
 800809c:	d114      	bne.n	80080c8 <_dtoa_r+0x98>
 800809e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80080a0:	f242 730f 	movw	r3, #9999	; 0x270f
 80080a4:	6013      	str	r3, [r2, #0]
 80080a6:	9b00      	ldr	r3, [sp, #0]
 80080a8:	b923      	cbnz	r3, 80080b4 <_dtoa_r+0x84>
 80080aa:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80080ae:	2800      	cmp	r0, #0
 80080b0:	f000 8542 	beq.w	8008b38 <_dtoa_r+0xb08>
 80080b4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80080b6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8008364 <_dtoa_r+0x334>
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	f000 8544 	beq.w	8008b48 <_dtoa_r+0xb18>
 80080c0:	f10b 0303 	add.w	r3, fp, #3
 80080c4:	f000 bd3e 	b.w	8008b44 <_dtoa_r+0xb14>
 80080c8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80080cc:	2200      	movs	r2, #0
 80080ce:	2300      	movs	r3, #0
 80080d0:	4630      	mov	r0, r6
 80080d2:	4639      	mov	r1, r7
 80080d4:	f7f8 fcf8 	bl	8000ac8 <__aeabi_dcmpeq>
 80080d8:	4681      	mov	r9, r0
 80080da:	b168      	cbz	r0, 80080f8 <_dtoa_r+0xc8>
 80080dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80080de:	2301      	movs	r3, #1
 80080e0:	6013      	str	r3, [r2, #0]
 80080e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	f000 8524 	beq.w	8008b32 <_dtoa_r+0xb02>
 80080ea:	4b9a      	ldr	r3, [pc, #616]	; (8008354 <_dtoa_r+0x324>)
 80080ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80080ee:	f103 3bff 	add.w	fp, r3, #4294967295
 80080f2:	6013      	str	r3, [r2, #0]
 80080f4:	f000 bd28 	b.w	8008b48 <_dtoa_r+0xb18>
 80080f8:	aa14      	add	r2, sp, #80	; 0x50
 80080fa:	a915      	add	r1, sp, #84	; 0x54
 80080fc:	ec47 6b10 	vmov	d0, r6, r7
 8008100:	4620      	mov	r0, r4
 8008102:	f001 f9d8 	bl	80094b6 <__d2b>
 8008106:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800810a:	9004      	str	r0, [sp, #16]
 800810c:	2d00      	cmp	r5, #0
 800810e:	d07c      	beq.n	800820a <_dtoa_r+0x1da>
 8008110:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008114:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8008118:	46b2      	mov	sl, r6
 800811a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800811e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008122:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8008126:	2200      	movs	r2, #0
 8008128:	4b8b      	ldr	r3, [pc, #556]	; (8008358 <_dtoa_r+0x328>)
 800812a:	4650      	mov	r0, sl
 800812c:	4659      	mov	r1, fp
 800812e:	f7f8 f8ab 	bl	8000288 <__aeabi_dsub>
 8008132:	a381      	add	r3, pc, #516	; (adr r3, 8008338 <_dtoa_r+0x308>)
 8008134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008138:	f7f8 fa5e 	bl	80005f8 <__aeabi_dmul>
 800813c:	a380      	add	r3, pc, #512	; (adr r3, 8008340 <_dtoa_r+0x310>)
 800813e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008142:	f7f8 f8a3 	bl	800028c <__adddf3>
 8008146:	4606      	mov	r6, r0
 8008148:	4628      	mov	r0, r5
 800814a:	460f      	mov	r7, r1
 800814c:	f7f8 f9ea 	bl	8000524 <__aeabi_i2d>
 8008150:	a37d      	add	r3, pc, #500	; (adr r3, 8008348 <_dtoa_r+0x318>)
 8008152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008156:	f7f8 fa4f 	bl	80005f8 <__aeabi_dmul>
 800815a:	4602      	mov	r2, r0
 800815c:	460b      	mov	r3, r1
 800815e:	4630      	mov	r0, r6
 8008160:	4639      	mov	r1, r7
 8008162:	f7f8 f893 	bl	800028c <__adddf3>
 8008166:	4606      	mov	r6, r0
 8008168:	460f      	mov	r7, r1
 800816a:	f7f8 fcf5 	bl	8000b58 <__aeabi_d2iz>
 800816e:	2200      	movs	r2, #0
 8008170:	4682      	mov	sl, r0
 8008172:	2300      	movs	r3, #0
 8008174:	4630      	mov	r0, r6
 8008176:	4639      	mov	r1, r7
 8008178:	f7f8 fcb0 	bl	8000adc <__aeabi_dcmplt>
 800817c:	b148      	cbz	r0, 8008192 <_dtoa_r+0x162>
 800817e:	4650      	mov	r0, sl
 8008180:	f7f8 f9d0 	bl	8000524 <__aeabi_i2d>
 8008184:	4632      	mov	r2, r6
 8008186:	463b      	mov	r3, r7
 8008188:	f7f8 fc9e 	bl	8000ac8 <__aeabi_dcmpeq>
 800818c:	b908      	cbnz	r0, 8008192 <_dtoa_r+0x162>
 800818e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008192:	f1ba 0f16 	cmp.w	sl, #22
 8008196:	d859      	bhi.n	800824c <_dtoa_r+0x21c>
 8008198:	4970      	ldr	r1, [pc, #448]	; (800835c <_dtoa_r+0x32c>)
 800819a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800819e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80081a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081a6:	f7f8 fcb7 	bl	8000b18 <__aeabi_dcmpgt>
 80081aa:	2800      	cmp	r0, #0
 80081ac:	d050      	beq.n	8008250 <_dtoa_r+0x220>
 80081ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 80081b2:	2300      	movs	r3, #0
 80081b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80081b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80081b8:	1b5d      	subs	r5, r3, r5
 80081ba:	f1b5 0801 	subs.w	r8, r5, #1
 80081be:	bf49      	itett	mi
 80081c0:	f1c5 0301 	rsbmi	r3, r5, #1
 80081c4:	2300      	movpl	r3, #0
 80081c6:	9305      	strmi	r3, [sp, #20]
 80081c8:	f04f 0800 	movmi.w	r8, #0
 80081cc:	bf58      	it	pl
 80081ce:	9305      	strpl	r3, [sp, #20]
 80081d0:	f1ba 0f00 	cmp.w	sl, #0
 80081d4:	db3e      	blt.n	8008254 <_dtoa_r+0x224>
 80081d6:	2300      	movs	r3, #0
 80081d8:	44d0      	add	r8, sl
 80081da:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80081de:	9307      	str	r3, [sp, #28]
 80081e0:	9b06      	ldr	r3, [sp, #24]
 80081e2:	2b09      	cmp	r3, #9
 80081e4:	f200 8090 	bhi.w	8008308 <_dtoa_r+0x2d8>
 80081e8:	2b05      	cmp	r3, #5
 80081ea:	bfc4      	itt	gt
 80081ec:	3b04      	subgt	r3, #4
 80081ee:	9306      	strgt	r3, [sp, #24]
 80081f0:	9b06      	ldr	r3, [sp, #24]
 80081f2:	f1a3 0302 	sub.w	r3, r3, #2
 80081f6:	bfcc      	ite	gt
 80081f8:	2500      	movgt	r5, #0
 80081fa:	2501      	movle	r5, #1
 80081fc:	2b03      	cmp	r3, #3
 80081fe:	f200 808f 	bhi.w	8008320 <_dtoa_r+0x2f0>
 8008202:	e8df f003 	tbb	[pc, r3]
 8008206:	7f7d      	.short	0x7f7d
 8008208:	7131      	.short	0x7131
 800820a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800820e:	441d      	add	r5, r3
 8008210:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8008214:	2820      	cmp	r0, #32
 8008216:	dd13      	ble.n	8008240 <_dtoa_r+0x210>
 8008218:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800821c:	9b00      	ldr	r3, [sp, #0]
 800821e:	fa08 f800 	lsl.w	r8, r8, r0
 8008222:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8008226:	fa23 f000 	lsr.w	r0, r3, r0
 800822a:	ea48 0000 	orr.w	r0, r8, r0
 800822e:	f7f8 f969 	bl	8000504 <__aeabi_ui2d>
 8008232:	2301      	movs	r3, #1
 8008234:	4682      	mov	sl, r0
 8008236:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800823a:	3d01      	subs	r5, #1
 800823c:	9313      	str	r3, [sp, #76]	; 0x4c
 800823e:	e772      	b.n	8008126 <_dtoa_r+0xf6>
 8008240:	9b00      	ldr	r3, [sp, #0]
 8008242:	f1c0 0020 	rsb	r0, r0, #32
 8008246:	fa03 f000 	lsl.w	r0, r3, r0
 800824a:	e7f0      	b.n	800822e <_dtoa_r+0x1fe>
 800824c:	2301      	movs	r3, #1
 800824e:	e7b1      	b.n	80081b4 <_dtoa_r+0x184>
 8008250:	900f      	str	r0, [sp, #60]	; 0x3c
 8008252:	e7b0      	b.n	80081b6 <_dtoa_r+0x186>
 8008254:	9b05      	ldr	r3, [sp, #20]
 8008256:	eba3 030a 	sub.w	r3, r3, sl
 800825a:	9305      	str	r3, [sp, #20]
 800825c:	f1ca 0300 	rsb	r3, sl, #0
 8008260:	9307      	str	r3, [sp, #28]
 8008262:	2300      	movs	r3, #0
 8008264:	930e      	str	r3, [sp, #56]	; 0x38
 8008266:	e7bb      	b.n	80081e0 <_dtoa_r+0x1b0>
 8008268:	2301      	movs	r3, #1
 800826a:	930a      	str	r3, [sp, #40]	; 0x28
 800826c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800826e:	2b00      	cmp	r3, #0
 8008270:	dd59      	ble.n	8008326 <_dtoa_r+0x2f6>
 8008272:	9302      	str	r3, [sp, #8]
 8008274:	4699      	mov	r9, r3
 8008276:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008278:	2200      	movs	r2, #0
 800827a:	6072      	str	r2, [r6, #4]
 800827c:	2204      	movs	r2, #4
 800827e:	f102 0014 	add.w	r0, r2, #20
 8008282:	4298      	cmp	r0, r3
 8008284:	6871      	ldr	r1, [r6, #4]
 8008286:	d953      	bls.n	8008330 <_dtoa_r+0x300>
 8008288:	4620      	mov	r0, r4
 800828a:	f000 fe88 	bl	8008f9e <_Balloc>
 800828e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008290:	6030      	str	r0, [r6, #0]
 8008292:	f1b9 0f0e 	cmp.w	r9, #14
 8008296:	f8d3 b000 	ldr.w	fp, [r3]
 800829a:	f200 80e6 	bhi.w	800846a <_dtoa_r+0x43a>
 800829e:	2d00      	cmp	r5, #0
 80082a0:	f000 80e3 	beq.w	800846a <_dtoa_r+0x43a>
 80082a4:	ed9d 7b00 	vldr	d7, [sp]
 80082a8:	f1ba 0f00 	cmp.w	sl, #0
 80082ac:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80082b0:	dd74      	ble.n	800839c <_dtoa_r+0x36c>
 80082b2:	4a2a      	ldr	r2, [pc, #168]	; (800835c <_dtoa_r+0x32c>)
 80082b4:	f00a 030f 	and.w	r3, sl, #15
 80082b8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80082bc:	ed93 7b00 	vldr	d7, [r3]
 80082c0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80082c4:	06f0      	lsls	r0, r6, #27
 80082c6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80082ca:	d565      	bpl.n	8008398 <_dtoa_r+0x368>
 80082cc:	4b24      	ldr	r3, [pc, #144]	; (8008360 <_dtoa_r+0x330>)
 80082ce:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80082d2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80082d6:	f7f8 fab9 	bl	800084c <__aeabi_ddiv>
 80082da:	e9cd 0100 	strd	r0, r1, [sp]
 80082de:	f006 060f 	and.w	r6, r6, #15
 80082e2:	2503      	movs	r5, #3
 80082e4:	4f1e      	ldr	r7, [pc, #120]	; (8008360 <_dtoa_r+0x330>)
 80082e6:	e04c      	b.n	8008382 <_dtoa_r+0x352>
 80082e8:	2301      	movs	r3, #1
 80082ea:	930a      	str	r3, [sp, #40]	; 0x28
 80082ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082ee:	4453      	add	r3, sl
 80082f0:	f103 0901 	add.w	r9, r3, #1
 80082f4:	9302      	str	r3, [sp, #8]
 80082f6:	464b      	mov	r3, r9
 80082f8:	2b01      	cmp	r3, #1
 80082fa:	bfb8      	it	lt
 80082fc:	2301      	movlt	r3, #1
 80082fe:	e7ba      	b.n	8008276 <_dtoa_r+0x246>
 8008300:	2300      	movs	r3, #0
 8008302:	e7b2      	b.n	800826a <_dtoa_r+0x23a>
 8008304:	2300      	movs	r3, #0
 8008306:	e7f0      	b.n	80082ea <_dtoa_r+0x2ba>
 8008308:	2501      	movs	r5, #1
 800830a:	2300      	movs	r3, #0
 800830c:	9306      	str	r3, [sp, #24]
 800830e:	950a      	str	r5, [sp, #40]	; 0x28
 8008310:	f04f 33ff 	mov.w	r3, #4294967295
 8008314:	9302      	str	r3, [sp, #8]
 8008316:	4699      	mov	r9, r3
 8008318:	2200      	movs	r2, #0
 800831a:	2312      	movs	r3, #18
 800831c:	920b      	str	r2, [sp, #44]	; 0x2c
 800831e:	e7aa      	b.n	8008276 <_dtoa_r+0x246>
 8008320:	2301      	movs	r3, #1
 8008322:	930a      	str	r3, [sp, #40]	; 0x28
 8008324:	e7f4      	b.n	8008310 <_dtoa_r+0x2e0>
 8008326:	2301      	movs	r3, #1
 8008328:	9302      	str	r3, [sp, #8]
 800832a:	4699      	mov	r9, r3
 800832c:	461a      	mov	r2, r3
 800832e:	e7f5      	b.n	800831c <_dtoa_r+0x2ec>
 8008330:	3101      	adds	r1, #1
 8008332:	6071      	str	r1, [r6, #4]
 8008334:	0052      	lsls	r2, r2, #1
 8008336:	e7a2      	b.n	800827e <_dtoa_r+0x24e>
 8008338:	636f4361 	.word	0x636f4361
 800833c:	3fd287a7 	.word	0x3fd287a7
 8008340:	8b60c8b3 	.word	0x8b60c8b3
 8008344:	3fc68a28 	.word	0x3fc68a28
 8008348:	509f79fb 	.word	0x509f79fb
 800834c:	3fd34413 	.word	0x3fd34413
 8008350:	7ff00000 	.word	0x7ff00000
 8008354:	0800a8fd 	.word	0x0800a8fd
 8008358:	3ff80000 	.word	0x3ff80000
 800835c:	0800a9b8 	.word	0x0800a9b8
 8008360:	0800a990 	.word	0x0800a990
 8008364:	0800a929 	.word	0x0800a929
 8008368:	07f1      	lsls	r1, r6, #31
 800836a:	d508      	bpl.n	800837e <_dtoa_r+0x34e>
 800836c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008370:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008374:	f7f8 f940 	bl	80005f8 <__aeabi_dmul>
 8008378:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800837c:	3501      	adds	r5, #1
 800837e:	1076      	asrs	r6, r6, #1
 8008380:	3708      	adds	r7, #8
 8008382:	2e00      	cmp	r6, #0
 8008384:	d1f0      	bne.n	8008368 <_dtoa_r+0x338>
 8008386:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800838a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800838e:	f7f8 fa5d 	bl	800084c <__aeabi_ddiv>
 8008392:	e9cd 0100 	strd	r0, r1, [sp]
 8008396:	e01a      	b.n	80083ce <_dtoa_r+0x39e>
 8008398:	2502      	movs	r5, #2
 800839a:	e7a3      	b.n	80082e4 <_dtoa_r+0x2b4>
 800839c:	f000 80a0 	beq.w	80084e0 <_dtoa_r+0x4b0>
 80083a0:	f1ca 0600 	rsb	r6, sl, #0
 80083a4:	4b9f      	ldr	r3, [pc, #636]	; (8008624 <_dtoa_r+0x5f4>)
 80083a6:	4fa0      	ldr	r7, [pc, #640]	; (8008628 <_dtoa_r+0x5f8>)
 80083a8:	f006 020f 	and.w	r2, r6, #15
 80083ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80083b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083b4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80083b8:	f7f8 f91e 	bl	80005f8 <__aeabi_dmul>
 80083bc:	e9cd 0100 	strd	r0, r1, [sp]
 80083c0:	1136      	asrs	r6, r6, #4
 80083c2:	2300      	movs	r3, #0
 80083c4:	2502      	movs	r5, #2
 80083c6:	2e00      	cmp	r6, #0
 80083c8:	d17f      	bne.n	80084ca <_dtoa_r+0x49a>
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d1e1      	bne.n	8008392 <_dtoa_r+0x362>
 80083ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	f000 8087 	beq.w	80084e4 <_dtoa_r+0x4b4>
 80083d6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80083da:	2200      	movs	r2, #0
 80083dc:	4b93      	ldr	r3, [pc, #588]	; (800862c <_dtoa_r+0x5fc>)
 80083de:	4630      	mov	r0, r6
 80083e0:	4639      	mov	r1, r7
 80083e2:	f7f8 fb7b 	bl	8000adc <__aeabi_dcmplt>
 80083e6:	2800      	cmp	r0, #0
 80083e8:	d07c      	beq.n	80084e4 <_dtoa_r+0x4b4>
 80083ea:	f1b9 0f00 	cmp.w	r9, #0
 80083ee:	d079      	beq.n	80084e4 <_dtoa_r+0x4b4>
 80083f0:	9b02      	ldr	r3, [sp, #8]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	dd35      	ble.n	8008462 <_dtoa_r+0x432>
 80083f6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80083fa:	9308      	str	r3, [sp, #32]
 80083fc:	4639      	mov	r1, r7
 80083fe:	2200      	movs	r2, #0
 8008400:	4b8b      	ldr	r3, [pc, #556]	; (8008630 <_dtoa_r+0x600>)
 8008402:	4630      	mov	r0, r6
 8008404:	f7f8 f8f8 	bl	80005f8 <__aeabi_dmul>
 8008408:	e9cd 0100 	strd	r0, r1, [sp]
 800840c:	9f02      	ldr	r7, [sp, #8]
 800840e:	3501      	adds	r5, #1
 8008410:	4628      	mov	r0, r5
 8008412:	f7f8 f887 	bl	8000524 <__aeabi_i2d>
 8008416:	e9dd 2300 	ldrd	r2, r3, [sp]
 800841a:	f7f8 f8ed 	bl	80005f8 <__aeabi_dmul>
 800841e:	2200      	movs	r2, #0
 8008420:	4b84      	ldr	r3, [pc, #528]	; (8008634 <_dtoa_r+0x604>)
 8008422:	f7f7 ff33 	bl	800028c <__adddf3>
 8008426:	4605      	mov	r5, r0
 8008428:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800842c:	2f00      	cmp	r7, #0
 800842e:	d15d      	bne.n	80084ec <_dtoa_r+0x4bc>
 8008430:	2200      	movs	r2, #0
 8008432:	4b81      	ldr	r3, [pc, #516]	; (8008638 <_dtoa_r+0x608>)
 8008434:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008438:	f7f7 ff26 	bl	8000288 <__aeabi_dsub>
 800843c:	462a      	mov	r2, r5
 800843e:	4633      	mov	r3, r6
 8008440:	e9cd 0100 	strd	r0, r1, [sp]
 8008444:	f7f8 fb68 	bl	8000b18 <__aeabi_dcmpgt>
 8008448:	2800      	cmp	r0, #0
 800844a:	f040 8288 	bne.w	800895e <_dtoa_r+0x92e>
 800844e:	462a      	mov	r2, r5
 8008450:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008454:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008458:	f7f8 fb40 	bl	8000adc <__aeabi_dcmplt>
 800845c:	2800      	cmp	r0, #0
 800845e:	f040 827c 	bne.w	800895a <_dtoa_r+0x92a>
 8008462:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008466:	e9cd 2300 	strd	r2, r3, [sp]
 800846a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800846c:	2b00      	cmp	r3, #0
 800846e:	f2c0 8150 	blt.w	8008712 <_dtoa_r+0x6e2>
 8008472:	f1ba 0f0e 	cmp.w	sl, #14
 8008476:	f300 814c 	bgt.w	8008712 <_dtoa_r+0x6e2>
 800847a:	4b6a      	ldr	r3, [pc, #424]	; (8008624 <_dtoa_r+0x5f4>)
 800847c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008480:	ed93 7b00 	vldr	d7, [r3]
 8008484:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008486:	2b00      	cmp	r3, #0
 8008488:	ed8d 7b02 	vstr	d7, [sp, #8]
 800848c:	f280 80d8 	bge.w	8008640 <_dtoa_r+0x610>
 8008490:	f1b9 0f00 	cmp.w	r9, #0
 8008494:	f300 80d4 	bgt.w	8008640 <_dtoa_r+0x610>
 8008498:	f040 825e 	bne.w	8008958 <_dtoa_r+0x928>
 800849c:	2200      	movs	r2, #0
 800849e:	4b66      	ldr	r3, [pc, #408]	; (8008638 <_dtoa_r+0x608>)
 80084a0:	ec51 0b17 	vmov	r0, r1, d7
 80084a4:	f7f8 f8a8 	bl	80005f8 <__aeabi_dmul>
 80084a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80084ac:	f7f8 fb2a 	bl	8000b04 <__aeabi_dcmpge>
 80084b0:	464f      	mov	r7, r9
 80084b2:	464e      	mov	r6, r9
 80084b4:	2800      	cmp	r0, #0
 80084b6:	f040 8234 	bne.w	8008922 <_dtoa_r+0x8f2>
 80084ba:	2331      	movs	r3, #49	; 0x31
 80084bc:	f10b 0501 	add.w	r5, fp, #1
 80084c0:	f88b 3000 	strb.w	r3, [fp]
 80084c4:	f10a 0a01 	add.w	sl, sl, #1
 80084c8:	e22f      	b.n	800892a <_dtoa_r+0x8fa>
 80084ca:	07f2      	lsls	r2, r6, #31
 80084cc:	d505      	bpl.n	80084da <_dtoa_r+0x4aa>
 80084ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084d2:	f7f8 f891 	bl	80005f8 <__aeabi_dmul>
 80084d6:	3501      	adds	r5, #1
 80084d8:	2301      	movs	r3, #1
 80084da:	1076      	asrs	r6, r6, #1
 80084dc:	3708      	adds	r7, #8
 80084de:	e772      	b.n	80083c6 <_dtoa_r+0x396>
 80084e0:	2502      	movs	r5, #2
 80084e2:	e774      	b.n	80083ce <_dtoa_r+0x39e>
 80084e4:	f8cd a020 	str.w	sl, [sp, #32]
 80084e8:	464f      	mov	r7, r9
 80084ea:	e791      	b.n	8008410 <_dtoa_r+0x3e0>
 80084ec:	4b4d      	ldr	r3, [pc, #308]	; (8008624 <_dtoa_r+0x5f4>)
 80084ee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80084f2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80084f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d047      	beq.n	800858c <_dtoa_r+0x55c>
 80084fc:	4602      	mov	r2, r0
 80084fe:	460b      	mov	r3, r1
 8008500:	2000      	movs	r0, #0
 8008502:	494e      	ldr	r1, [pc, #312]	; (800863c <_dtoa_r+0x60c>)
 8008504:	f7f8 f9a2 	bl	800084c <__aeabi_ddiv>
 8008508:	462a      	mov	r2, r5
 800850a:	4633      	mov	r3, r6
 800850c:	f7f7 febc 	bl	8000288 <__aeabi_dsub>
 8008510:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008514:	465d      	mov	r5, fp
 8008516:	e9dd 0100 	ldrd	r0, r1, [sp]
 800851a:	f7f8 fb1d 	bl	8000b58 <__aeabi_d2iz>
 800851e:	4606      	mov	r6, r0
 8008520:	f7f8 f800 	bl	8000524 <__aeabi_i2d>
 8008524:	4602      	mov	r2, r0
 8008526:	460b      	mov	r3, r1
 8008528:	e9dd 0100 	ldrd	r0, r1, [sp]
 800852c:	f7f7 feac 	bl	8000288 <__aeabi_dsub>
 8008530:	3630      	adds	r6, #48	; 0x30
 8008532:	f805 6b01 	strb.w	r6, [r5], #1
 8008536:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800853a:	e9cd 0100 	strd	r0, r1, [sp]
 800853e:	f7f8 facd 	bl	8000adc <__aeabi_dcmplt>
 8008542:	2800      	cmp	r0, #0
 8008544:	d163      	bne.n	800860e <_dtoa_r+0x5de>
 8008546:	e9dd 2300 	ldrd	r2, r3, [sp]
 800854a:	2000      	movs	r0, #0
 800854c:	4937      	ldr	r1, [pc, #220]	; (800862c <_dtoa_r+0x5fc>)
 800854e:	f7f7 fe9b 	bl	8000288 <__aeabi_dsub>
 8008552:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008556:	f7f8 fac1 	bl	8000adc <__aeabi_dcmplt>
 800855a:	2800      	cmp	r0, #0
 800855c:	f040 80b7 	bne.w	80086ce <_dtoa_r+0x69e>
 8008560:	eba5 030b 	sub.w	r3, r5, fp
 8008564:	429f      	cmp	r7, r3
 8008566:	f77f af7c 	ble.w	8008462 <_dtoa_r+0x432>
 800856a:	2200      	movs	r2, #0
 800856c:	4b30      	ldr	r3, [pc, #192]	; (8008630 <_dtoa_r+0x600>)
 800856e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008572:	f7f8 f841 	bl	80005f8 <__aeabi_dmul>
 8008576:	2200      	movs	r2, #0
 8008578:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800857c:	4b2c      	ldr	r3, [pc, #176]	; (8008630 <_dtoa_r+0x600>)
 800857e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008582:	f7f8 f839 	bl	80005f8 <__aeabi_dmul>
 8008586:	e9cd 0100 	strd	r0, r1, [sp]
 800858a:	e7c4      	b.n	8008516 <_dtoa_r+0x4e6>
 800858c:	462a      	mov	r2, r5
 800858e:	4633      	mov	r3, r6
 8008590:	f7f8 f832 	bl	80005f8 <__aeabi_dmul>
 8008594:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008598:	eb0b 0507 	add.w	r5, fp, r7
 800859c:	465e      	mov	r6, fp
 800859e:	e9dd 0100 	ldrd	r0, r1, [sp]
 80085a2:	f7f8 fad9 	bl	8000b58 <__aeabi_d2iz>
 80085a6:	4607      	mov	r7, r0
 80085a8:	f7f7 ffbc 	bl	8000524 <__aeabi_i2d>
 80085ac:	3730      	adds	r7, #48	; 0x30
 80085ae:	4602      	mov	r2, r0
 80085b0:	460b      	mov	r3, r1
 80085b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80085b6:	f7f7 fe67 	bl	8000288 <__aeabi_dsub>
 80085ba:	f806 7b01 	strb.w	r7, [r6], #1
 80085be:	42ae      	cmp	r6, r5
 80085c0:	e9cd 0100 	strd	r0, r1, [sp]
 80085c4:	f04f 0200 	mov.w	r2, #0
 80085c8:	d126      	bne.n	8008618 <_dtoa_r+0x5e8>
 80085ca:	4b1c      	ldr	r3, [pc, #112]	; (800863c <_dtoa_r+0x60c>)
 80085cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80085d0:	f7f7 fe5c 	bl	800028c <__adddf3>
 80085d4:	4602      	mov	r2, r0
 80085d6:	460b      	mov	r3, r1
 80085d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80085dc:	f7f8 fa9c 	bl	8000b18 <__aeabi_dcmpgt>
 80085e0:	2800      	cmp	r0, #0
 80085e2:	d174      	bne.n	80086ce <_dtoa_r+0x69e>
 80085e4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80085e8:	2000      	movs	r0, #0
 80085ea:	4914      	ldr	r1, [pc, #80]	; (800863c <_dtoa_r+0x60c>)
 80085ec:	f7f7 fe4c 	bl	8000288 <__aeabi_dsub>
 80085f0:	4602      	mov	r2, r0
 80085f2:	460b      	mov	r3, r1
 80085f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80085f8:	f7f8 fa70 	bl	8000adc <__aeabi_dcmplt>
 80085fc:	2800      	cmp	r0, #0
 80085fe:	f43f af30 	beq.w	8008462 <_dtoa_r+0x432>
 8008602:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008606:	2b30      	cmp	r3, #48	; 0x30
 8008608:	f105 32ff 	add.w	r2, r5, #4294967295
 800860c:	d002      	beq.n	8008614 <_dtoa_r+0x5e4>
 800860e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008612:	e04a      	b.n	80086aa <_dtoa_r+0x67a>
 8008614:	4615      	mov	r5, r2
 8008616:	e7f4      	b.n	8008602 <_dtoa_r+0x5d2>
 8008618:	4b05      	ldr	r3, [pc, #20]	; (8008630 <_dtoa_r+0x600>)
 800861a:	f7f7 ffed 	bl	80005f8 <__aeabi_dmul>
 800861e:	e9cd 0100 	strd	r0, r1, [sp]
 8008622:	e7bc      	b.n	800859e <_dtoa_r+0x56e>
 8008624:	0800a9b8 	.word	0x0800a9b8
 8008628:	0800a990 	.word	0x0800a990
 800862c:	3ff00000 	.word	0x3ff00000
 8008630:	40240000 	.word	0x40240000
 8008634:	401c0000 	.word	0x401c0000
 8008638:	40140000 	.word	0x40140000
 800863c:	3fe00000 	.word	0x3fe00000
 8008640:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008644:	465d      	mov	r5, fp
 8008646:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800864a:	4630      	mov	r0, r6
 800864c:	4639      	mov	r1, r7
 800864e:	f7f8 f8fd 	bl	800084c <__aeabi_ddiv>
 8008652:	f7f8 fa81 	bl	8000b58 <__aeabi_d2iz>
 8008656:	4680      	mov	r8, r0
 8008658:	f7f7 ff64 	bl	8000524 <__aeabi_i2d>
 800865c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008660:	f7f7 ffca 	bl	80005f8 <__aeabi_dmul>
 8008664:	4602      	mov	r2, r0
 8008666:	460b      	mov	r3, r1
 8008668:	4630      	mov	r0, r6
 800866a:	4639      	mov	r1, r7
 800866c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8008670:	f7f7 fe0a 	bl	8000288 <__aeabi_dsub>
 8008674:	f805 6b01 	strb.w	r6, [r5], #1
 8008678:	eba5 060b 	sub.w	r6, r5, fp
 800867c:	45b1      	cmp	r9, r6
 800867e:	4602      	mov	r2, r0
 8008680:	460b      	mov	r3, r1
 8008682:	d139      	bne.n	80086f8 <_dtoa_r+0x6c8>
 8008684:	f7f7 fe02 	bl	800028c <__adddf3>
 8008688:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800868c:	4606      	mov	r6, r0
 800868e:	460f      	mov	r7, r1
 8008690:	f7f8 fa42 	bl	8000b18 <__aeabi_dcmpgt>
 8008694:	b9c8      	cbnz	r0, 80086ca <_dtoa_r+0x69a>
 8008696:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800869a:	4630      	mov	r0, r6
 800869c:	4639      	mov	r1, r7
 800869e:	f7f8 fa13 	bl	8000ac8 <__aeabi_dcmpeq>
 80086a2:	b110      	cbz	r0, 80086aa <_dtoa_r+0x67a>
 80086a4:	f018 0f01 	tst.w	r8, #1
 80086a8:	d10f      	bne.n	80086ca <_dtoa_r+0x69a>
 80086aa:	9904      	ldr	r1, [sp, #16]
 80086ac:	4620      	mov	r0, r4
 80086ae:	f000 fcaa 	bl	8009006 <_Bfree>
 80086b2:	2300      	movs	r3, #0
 80086b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80086b6:	702b      	strb	r3, [r5, #0]
 80086b8:	f10a 0301 	add.w	r3, sl, #1
 80086bc:	6013      	str	r3, [r2, #0]
 80086be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	f000 8241 	beq.w	8008b48 <_dtoa_r+0xb18>
 80086c6:	601d      	str	r5, [r3, #0]
 80086c8:	e23e      	b.n	8008b48 <_dtoa_r+0xb18>
 80086ca:	f8cd a020 	str.w	sl, [sp, #32]
 80086ce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80086d2:	2a39      	cmp	r2, #57	; 0x39
 80086d4:	f105 33ff 	add.w	r3, r5, #4294967295
 80086d8:	d108      	bne.n	80086ec <_dtoa_r+0x6bc>
 80086da:	459b      	cmp	fp, r3
 80086dc:	d10a      	bne.n	80086f4 <_dtoa_r+0x6c4>
 80086de:	9b08      	ldr	r3, [sp, #32]
 80086e0:	3301      	adds	r3, #1
 80086e2:	9308      	str	r3, [sp, #32]
 80086e4:	2330      	movs	r3, #48	; 0x30
 80086e6:	f88b 3000 	strb.w	r3, [fp]
 80086ea:	465b      	mov	r3, fp
 80086ec:	781a      	ldrb	r2, [r3, #0]
 80086ee:	3201      	adds	r2, #1
 80086f0:	701a      	strb	r2, [r3, #0]
 80086f2:	e78c      	b.n	800860e <_dtoa_r+0x5de>
 80086f4:	461d      	mov	r5, r3
 80086f6:	e7ea      	b.n	80086ce <_dtoa_r+0x69e>
 80086f8:	2200      	movs	r2, #0
 80086fa:	4b9b      	ldr	r3, [pc, #620]	; (8008968 <_dtoa_r+0x938>)
 80086fc:	f7f7 ff7c 	bl	80005f8 <__aeabi_dmul>
 8008700:	2200      	movs	r2, #0
 8008702:	2300      	movs	r3, #0
 8008704:	4606      	mov	r6, r0
 8008706:	460f      	mov	r7, r1
 8008708:	f7f8 f9de 	bl	8000ac8 <__aeabi_dcmpeq>
 800870c:	2800      	cmp	r0, #0
 800870e:	d09a      	beq.n	8008646 <_dtoa_r+0x616>
 8008710:	e7cb      	b.n	80086aa <_dtoa_r+0x67a>
 8008712:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008714:	2a00      	cmp	r2, #0
 8008716:	f000 808b 	beq.w	8008830 <_dtoa_r+0x800>
 800871a:	9a06      	ldr	r2, [sp, #24]
 800871c:	2a01      	cmp	r2, #1
 800871e:	dc6e      	bgt.n	80087fe <_dtoa_r+0x7ce>
 8008720:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008722:	2a00      	cmp	r2, #0
 8008724:	d067      	beq.n	80087f6 <_dtoa_r+0x7c6>
 8008726:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800872a:	9f07      	ldr	r7, [sp, #28]
 800872c:	9d05      	ldr	r5, [sp, #20]
 800872e:	9a05      	ldr	r2, [sp, #20]
 8008730:	2101      	movs	r1, #1
 8008732:	441a      	add	r2, r3
 8008734:	4620      	mov	r0, r4
 8008736:	9205      	str	r2, [sp, #20]
 8008738:	4498      	add	r8, r3
 800873a:	f000 fd04 	bl	8009146 <__i2b>
 800873e:	4606      	mov	r6, r0
 8008740:	2d00      	cmp	r5, #0
 8008742:	dd0c      	ble.n	800875e <_dtoa_r+0x72e>
 8008744:	f1b8 0f00 	cmp.w	r8, #0
 8008748:	dd09      	ble.n	800875e <_dtoa_r+0x72e>
 800874a:	4545      	cmp	r5, r8
 800874c:	9a05      	ldr	r2, [sp, #20]
 800874e:	462b      	mov	r3, r5
 8008750:	bfa8      	it	ge
 8008752:	4643      	movge	r3, r8
 8008754:	1ad2      	subs	r2, r2, r3
 8008756:	9205      	str	r2, [sp, #20]
 8008758:	1aed      	subs	r5, r5, r3
 800875a:	eba8 0803 	sub.w	r8, r8, r3
 800875e:	9b07      	ldr	r3, [sp, #28]
 8008760:	b1eb      	cbz	r3, 800879e <_dtoa_r+0x76e>
 8008762:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008764:	2b00      	cmp	r3, #0
 8008766:	d067      	beq.n	8008838 <_dtoa_r+0x808>
 8008768:	b18f      	cbz	r7, 800878e <_dtoa_r+0x75e>
 800876a:	4631      	mov	r1, r6
 800876c:	463a      	mov	r2, r7
 800876e:	4620      	mov	r0, r4
 8008770:	f000 fd88 	bl	8009284 <__pow5mult>
 8008774:	9a04      	ldr	r2, [sp, #16]
 8008776:	4601      	mov	r1, r0
 8008778:	4606      	mov	r6, r0
 800877a:	4620      	mov	r0, r4
 800877c:	f000 fcec 	bl	8009158 <__multiply>
 8008780:	9904      	ldr	r1, [sp, #16]
 8008782:	9008      	str	r0, [sp, #32]
 8008784:	4620      	mov	r0, r4
 8008786:	f000 fc3e 	bl	8009006 <_Bfree>
 800878a:	9b08      	ldr	r3, [sp, #32]
 800878c:	9304      	str	r3, [sp, #16]
 800878e:	9b07      	ldr	r3, [sp, #28]
 8008790:	1bda      	subs	r2, r3, r7
 8008792:	d004      	beq.n	800879e <_dtoa_r+0x76e>
 8008794:	9904      	ldr	r1, [sp, #16]
 8008796:	4620      	mov	r0, r4
 8008798:	f000 fd74 	bl	8009284 <__pow5mult>
 800879c:	9004      	str	r0, [sp, #16]
 800879e:	2101      	movs	r1, #1
 80087a0:	4620      	mov	r0, r4
 80087a2:	f000 fcd0 	bl	8009146 <__i2b>
 80087a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80087a8:	4607      	mov	r7, r0
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	f000 81d0 	beq.w	8008b50 <_dtoa_r+0xb20>
 80087b0:	461a      	mov	r2, r3
 80087b2:	4601      	mov	r1, r0
 80087b4:	4620      	mov	r0, r4
 80087b6:	f000 fd65 	bl	8009284 <__pow5mult>
 80087ba:	9b06      	ldr	r3, [sp, #24]
 80087bc:	2b01      	cmp	r3, #1
 80087be:	4607      	mov	r7, r0
 80087c0:	dc40      	bgt.n	8008844 <_dtoa_r+0x814>
 80087c2:	9b00      	ldr	r3, [sp, #0]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d139      	bne.n	800883c <_dtoa_r+0x80c>
 80087c8:	9b01      	ldr	r3, [sp, #4]
 80087ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d136      	bne.n	8008840 <_dtoa_r+0x810>
 80087d2:	9b01      	ldr	r3, [sp, #4]
 80087d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80087d8:	0d1b      	lsrs	r3, r3, #20
 80087da:	051b      	lsls	r3, r3, #20
 80087dc:	b12b      	cbz	r3, 80087ea <_dtoa_r+0x7ba>
 80087de:	9b05      	ldr	r3, [sp, #20]
 80087e0:	3301      	adds	r3, #1
 80087e2:	9305      	str	r3, [sp, #20]
 80087e4:	f108 0801 	add.w	r8, r8, #1
 80087e8:	2301      	movs	r3, #1
 80087ea:	9307      	str	r3, [sp, #28]
 80087ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d12a      	bne.n	8008848 <_dtoa_r+0x818>
 80087f2:	2001      	movs	r0, #1
 80087f4:	e030      	b.n	8008858 <_dtoa_r+0x828>
 80087f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80087f8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80087fc:	e795      	b.n	800872a <_dtoa_r+0x6fa>
 80087fe:	9b07      	ldr	r3, [sp, #28]
 8008800:	f109 37ff 	add.w	r7, r9, #4294967295
 8008804:	42bb      	cmp	r3, r7
 8008806:	bfbf      	itttt	lt
 8008808:	9b07      	ldrlt	r3, [sp, #28]
 800880a:	9707      	strlt	r7, [sp, #28]
 800880c:	1afa      	sublt	r2, r7, r3
 800880e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008810:	bfbb      	ittet	lt
 8008812:	189b      	addlt	r3, r3, r2
 8008814:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008816:	1bdf      	subge	r7, r3, r7
 8008818:	2700      	movlt	r7, #0
 800881a:	f1b9 0f00 	cmp.w	r9, #0
 800881e:	bfb5      	itete	lt
 8008820:	9b05      	ldrlt	r3, [sp, #20]
 8008822:	9d05      	ldrge	r5, [sp, #20]
 8008824:	eba3 0509 	sublt.w	r5, r3, r9
 8008828:	464b      	movge	r3, r9
 800882a:	bfb8      	it	lt
 800882c:	2300      	movlt	r3, #0
 800882e:	e77e      	b.n	800872e <_dtoa_r+0x6fe>
 8008830:	9f07      	ldr	r7, [sp, #28]
 8008832:	9d05      	ldr	r5, [sp, #20]
 8008834:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8008836:	e783      	b.n	8008740 <_dtoa_r+0x710>
 8008838:	9a07      	ldr	r2, [sp, #28]
 800883a:	e7ab      	b.n	8008794 <_dtoa_r+0x764>
 800883c:	2300      	movs	r3, #0
 800883e:	e7d4      	b.n	80087ea <_dtoa_r+0x7ba>
 8008840:	9b00      	ldr	r3, [sp, #0]
 8008842:	e7d2      	b.n	80087ea <_dtoa_r+0x7ba>
 8008844:	2300      	movs	r3, #0
 8008846:	9307      	str	r3, [sp, #28]
 8008848:	693b      	ldr	r3, [r7, #16]
 800884a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800884e:	6918      	ldr	r0, [r3, #16]
 8008850:	f000 fc2b 	bl	80090aa <__hi0bits>
 8008854:	f1c0 0020 	rsb	r0, r0, #32
 8008858:	4440      	add	r0, r8
 800885a:	f010 001f 	ands.w	r0, r0, #31
 800885e:	d047      	beq.n	80088f0 <_dtoa_r+0x8c0>
 8008860:	f1c0 0320 	rsb	r3, r0, #32
 8008864:	2b04      	cmp	r3, #4
 8008866:	dd3b      	ble.n	80088e0 <_dtoa_r+0x8b0>
 8008868:	9b05      	ldr	r3, [sp, #20]
 800886a:	f1c0 001c 	rsb	r0, r0, #28
 800886e:	4403      	add	r3, r0
 8008870:	9305      	str	r3, [sp, #20]
 8008872:	4405      	add	r5, r0
 8008874:	4480      	add	r8, r0
 8008876:	9b05      	ldr	r3, [sp, #20]
 8008878:	2b00      	cmp	r3, #0
 800887a:	dd05      	ble.n	8008888 <_dtoa_r+0x858>
 800887c:	461a      	mov	r2, r3
 800887e:	9904      	ldr	r1, [sp, #16]
 8008880:	4620      	mov	r0, r4
 8008882:	f000 fd4d 	bl	8009320 <__lshift>
 8008886:	9004      	str	r0, [sp, #16]
 8008888:	f1b8 0f00 	cmp.w	r8, #0
 800888c:	dd05      	ble.n	800889a <_dtoa_r+0x86a>
 800888e:	4639      	mov	r1, r7
 8008890:	4642      	mov	r2, r8
 8008892:	4620      	mov	r0, r4
 8008894:	f000 fd44 	bl	8009320 <__lshift>
 8008898:	4607      	mov	r7, r0
 800889a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800889c:	b353      	cbz	r3, 80088f4 <_dtoa_r+0x8c4>
 800889e:	4639      	mov	r1, r7
 80088a0:	9804      	ldr	r0, [sp, #16]
 80088a2:	f000 fd91 	bl	80093c8 <__mcmp>
 80088a6:	2800      	cmp	r0, #0
 80088a8:	da24      	bge.n	80088f4 <_dtoa_r+0x8c4>
 80088aa:	2300      	movs	r3, #0
 80088ac:	220a      	movs	r2, #10
 80088ae:	9904      	ldr	r1, [sp, #16]
 80088b0:	4620      	mov	r0, r4
 80088b2:	f000 fbbf 	bl	8009034 <__multadd>
 80088b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088b8:	9004      	str	r0, [sp, #16]
 80088ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80088be:	2b00      	cmp	r3, #0
 80088c0:	f000 814d 	beq.w	8008b5e <_dtoa_r+0xb2e>
 80088c4:	2300      	movs	r3, #0
 80088c6:	4631      	mov	r1, r6
 80088c8:	220a      	movs	r2, #10
 80088ca:	4620      	mov	r0, r4
 80088cc:	f000 fbb2 	bl	8009034 <__multadd>
 80088d0:	9b02      	ldr	r3, [sp, #8]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	4606      	mov	r6, r0
 80088d6:	dc4f      	bgt.n	8008978 <_dtoa_r+0x948>
 80088d8:	9b06      	ldr	r3, [sp, #24]
 80088da:	2b02      	cmp	r3, #2
 80088dc:	dd4c      	ble.n	8008978 <_dtoa_r+0x948>
 80088de:	e011      	b.n	8008904 <_dtoa_r+0x8d4>
 80088e0:	d0c9      	beq.n	8008876 <_dtoa_r+0x846>
 80088e2:	9a05      	ldr	r2, [sp, #20]
 80088e4:	331c      	adds	r3, #28
 80088e6:	441a      	add	r2, r3
 80088e8:	9205      	str	r2, [sp, #20]
 80088ea:	441d      	add	r5, r3
 80088ec:	4498      	add	r8, r3
 80088ee:	e7c2      	b.n	8008876 <_dtoa_r+0x846>
 80088f0:	4603      	mov	r3, r0
 80088f2:	e7f6      	b.n	80088e2 <_dtoa_r+0x8b2>
 80088f4:	f1b9 0f00 	cmp.w	r9, #0
 80088f8:	dc38      	bgt.n	800896c <_dtoa_r+0x93c>
 80088fa:	9b06      	ldr	r3, [sp, #24]
 80088fc:	2b02      	cmp	r3, #2
 80088fe:	dd35      	ble.n	800896c <_dtoa_r+0x93c>
 8008900:	f8cd 9008 	str.w	r9, [sp, #8]
 8008904:	9b02      	ldr	r3, [sp, #8]
 8008906:	b963      	cbnz	r3, 8008922 <_dtoa_r+0x8f2>
 8008908:	4639      	mov	r1, r7
 800890a:	2205      	movs	r2, #5
 800890c:	4620      	mov	r0, r4
 800890e:	f000 fb91 	bl	8009034 <__multadd>
 8008912:	4601      	mov	r1, r0
 8008914:	4607      	mov	r7, r0
 8008916:	9804      	ldr	r0, [sp, #16]
 8008918:	f000 fd56 	bl	80093c8 <__mcmp>
 800891c:	2800      	cmp	r0, #0
 800891e:	f73f adcc 	bgt.w	80084ba <_dtoa_r+0x48a>
 8008922:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008924:	465d      	mov	r5, fp
 8008926:	ea6f 0a03 	mvn.w	sl, r3
 800892a:	f04f 0900 	mov.w	r9, #0
 800892e:	4639      	mov	r1, r7
 8008930:	4620      	mov	r0, r4
 8008932:	f000 fb68 	bl	8009006 <_Bfree>
 8008936:	2e00      	cmp	r6, #0
 8008938:	f43f aeb7 	beq.w	80086aa <_dtoa_r+0x67a>
 800893c:	f1b9 0f00 	cmp.w	r9, #0
 8008940:	d005      	beq.n	800894e <_dtoa_r+0x91e>
 8008942:	45b1      	cmp	r9, r6
 8008944:	d003      	beq.n	800894e <_dtoa_r+0x91e>
 8008946:	4649      	mov	r1, r9
 8008948:	4620      	mov	r0, r4
 800894a:	f000 fb5c 	bl	8009006 <_Bfree>
 800894e:	4631      	mov	r1, r6
 8008950:	4620      	mov	r0, r4
 8008952:	f000 fb58 	bl	8009006 <_Bfree>
 8008956:	e6a8      	b.n	80086aa <_dtoa_r+0x67a>
 8008958:	2700      	movs	r7, #0
 800895a:	463e      	mov	r6, r7
 800895c:	e7e1      	b.n	8008922 <_dtoa_r+0x8f2>
 800895e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008962:	463e      	mov	r6, r7
 8008964:	e5a9      	b.n	80084ba <_dtoa_r+0x48a>
 8008966:	bf00      	nop
 8008968:	40240000 	.word	0x40240000
 800896c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800896e:	f8cd 9008 	str.w	r9, [sp, #8]
 8008972:	2b00      	cmp	r3, #0
 8008974:	f000 80fa 	beq.w	8008b6c <_dtoa_r+0xb3c>
 8008978:	2d00      	cmp	r5, #0
 800897a:	dd05      	ble.n	8008988 <_dtoa_r+0x958>
 800897c:	4631      	mov	r1, r6
 800897e:	462a      	mov	r2, r5
 8008980:	4620      	mov	r0, r4
 8008982:	f000 fccd 	bl	8009320 <__lshift>
 8008986:	4606      	mov	r6, r0
 8008988:	9b07      	ldr	r3, [sp, #28]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d04c      	beq.n	8008a28 <_dtoa_r+0x9f8>
 800898e:	6871      	ldr	r1, [r6, #4]
 8008990:	4620      	mov	r0, r4
 8008992:	f000 fb04 	bl	8008f9e <_Balloc>
 8008996:	6932      	ldr	r2, [r6, #16]
 8008998:	3202      	adds	r2, #2
 800899a:	4605      	mov	r5, r0
 800899c:	0092      	lsls	r2, r2, #2
 800899e:	f106 010c 	add.w	r1, r6, #12
 80089a2:	300c      	adds	r0, #12
 80089a4:	f000 faf0 	bl	8008f88 <memcpy>
 80089a8:	2201      	movs	r2, #1
 80089aa:	4629      	mov	r1, r5
 80089ac:	4620      	mov	r0, r4
 80089ae:	f000 fcb7 	bl	8009320 <__lshift>
 80089b2:	9b00      	ldr	r3, [sp, #0]
 80089b4:	f8cd b014 	str.w	fp, [sp, #20]
 80089b8:	f003 0301 	and.w	r3, r3, #1
 80089bc:	46b1      	mov	r9, r6
 80089be:	9307      	str	r3, [sp, #28]
 80089c0:	4606      	mov	r6, r0
 80089c2:	4639      	mov	r1, r7
 80089c4:	9804      	ldr	r0, [sp, #16]
 80089c6:	f7ff faa5 	bl	8007f14 <quorem>
 80089ca:	4649      	mov	r1, r9
 80089cc:	4605      	mov	r5, r0
 80089ce:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80089d2:	9804      	ldr	r0, [sp, #16]
 80089d4:	f000 fcf8 	bl	80093c8 <__mcmp>
 80089d8:	4632      	mov	r2, r6
 80089da:	9000      	str	r0, [sp, #0]
 80089dc:	4639      	mov	r1, r7
 80089de:	4620      	mov	r0, r4
 80089e0:	f000 fd0c 	bl	80093fc <__mdiff>
 80089e4:	68c3      	ldr	r3, [r0, #12]
 80089e6:	4602      	mov	r2, r0
 80089e8:	bb03      	cbnz	r3, 8008a2c <_dtoa_r+0x9fc>
 80089ea:	4601      	mov	r1, r0
 80089ec:	9008      	str	r0, [sp, #32]
 80089ee:	9804      	ldr	r0, [sp, #16]
 80089f0:	f000 fcea 	bl	80093c8 <__mcmp>
 80089f4:	9a08      	ldr	r2, [sp, #32]
 80089f6:	4603      	mov	r3, r0
 80089f8:	4611      	mov	r1, r2
 80089fa:	4620      	mov	r0, r4
 80089fc:	9308      	str	r3, [sp, #32]
 80089fe:	f000 fb02 	bl	8009006 <_Bfree>
 8008a02:	9b08      	ldr	r3, [sp, #32]
 8008a04:	b9a3      	cbnz	r3, 8008a30 <_dtoa_r+0xa00>
 8008a06:	9a06      	ldr	r2, [sp, #24]
 8008a08:	b992      	cbnz	r2, 8008a30 <_dtoa_r+0xa00>
 8008a0a:	9a07      	ldr	r2, [sp, #28]
 8008a0c:	b982      	cbnz	r2, 8008a30 <_dtoa_r+0xa00>
 8008a0e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008a12:	d029      	beq.n	8008a68 <_dtoa_r+0xa38>
 8008a14:	9b00      	ldr	r3, [sp, #0]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	dd01      	ble.n	8008a1e <_dtoa_r+0x9ee>
 8008a1a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8008a1e:	9b05      	ldr	r3, [sp, #20]
 8008a20:	1c5d      	adds	r5, r3, #1
 8008a22:	f883 8000 	strb.w	r8, [r3]
 8008a26:	e782      	b.n	800892e <_dtoa_r+0x8fe>
 8008a28:	4630      	mov	r0, r6
 8008a2a:	e7c2      	b.n	80089b2 <_dtoa_r+0x982>
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	e7e3      	b.n	80089f8 <_dtoa_r+0x9c8>
 8008a30:	9a00      	ldr	r2, [sp, #0]
 8008a32:	2a00      	cmp	r2, #0
 8008a34:	db04      	blt.n	8008a40 <_dtoa_r+0xa10>
 8008a36:	d125      	bne.n	8008a84 <_dtoa_r+0xa54>
 8008a38:	9a06      	ldr	r2, [sp, #24]
 8008a3a:	bb1a      	cbnz	r2, 8008a84 <_dtoa_r+0xa54>
 8008a3c:	9a07      	ldr	r2, [sp, #28]
 8008a3e:	bb0a      	cbnz	r2, 8008a84 <_dtoa_r+0xa54>
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	ddec      	ble.n	8008a1e <_dtoa_r+0x9ee>
 8008a44:	2201      	movs	r2, #1
 8008a46:	9904      	ldr	r1, [sp, #16]
 8008a48:	4620      	mov	r0, r4
 8008a4a:	f000 fc69 	bl	8009320 <__lshift>
 8008a4e:	4639      	mov	r1, r7
 8008a50:	9004      	str	r0, [sp, #16]
 8008a52:	f000 fcb9 	bl	80093c8 <__mcmp>
 8008a56:	2800      	cmp	r0, #0
 8008a58:	dc03      	bgt.n	8008a62 <_dtoa_r+0xa32>
 8008a5a:	d1e0      	bne.n	8008a1e <_dtoa_r+0x9ee>
 8008a5c:	f018 0f01 	tst.w	r8, #1
 8008a60:	d0dd      	beq.n	8008a1e <_dtoa_r+0x9ee>
 8008a62:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008a66:	d1d8      	bne.n	8008a1a <_dtoa_r+0x9ea>
 8008a68:	9b05      	ldr	r3, [sp, #20]
 8008a6a:	9a05      	ldr	r2, [sp, #20]
 8008a6c:	1c5d      	adds	r5, r3, #1
 8008a6e:	2339      	movs	r3, #57	; 0x39
 8008a70:	7013      	strb	r3, [r2, #0]
 8008a72:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008a76:	2b39      	cmp	r3, #57	; 0x39
 8008a78:	f105 32ff 	add.w	r2, r5, #4294967295
 8008a7c:	d04f      	beq.n	8008b1e <_dtoa_r+0xaee>
 8008a7e:	3301      	adds	r3, #1
 8008a80:	7013      	strb	r3, [r2, #0]
 8008a82:	e754      	b.n	800892e <_dtoa_r+0x8fe>
 8008a84:	9a05      	ldr	r2, [sp, #20]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	f102 0501 	add.w	r5, r2, #1
 8008a8c:	dd06      	ble.n	8008a9c <_dtoa_r+0xa6c>
 8008a8e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008a92:	d0e9      	beq.n	8008a68 <_dtoa_r+0xa38>
 8008a94:	f108 0801 	add.w	r8, r8, #1
 8008a98:	9b05      	ldr	r3, [sp, #20]
 8008a9a:	e7c2      	b.n	8008a22 <_dtoa_r+0x9f2>
 8008a9c:	9a02      	ldr	r2, [sp, #8]
 8008a9e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8008aa2:	eba5 030b 	sub.w	r3, r5, fp
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d021      	beq.n	8008aee <_dtoa_r+0xabe>
 8008aaa:	2300      	movs	r3, #0
 8008aac:	220a      	movs	r2, #10
 8008aae:	9904      	ldr	r1, [sp, #16]
 8008ab0:	4620      	mov	r0, r4
 8008ab2:	f000 fabf 	bl	8009034 <__multadd>
 8008ab6:	45b1      	cmp	r9, r6
 8008ab8:	9004      	str	r0, [sp, #16]
 8008aba:	f04f 0300 	mov.w	r3, #0
 8008abe:	f04f 020a 	mov.w	r2, #10
 8008ac2:	4649      	mov	r1, r9
 8008ac4:	4620      	mov	r0, r4
 8008ac6:	d105      	bne.n	8008ad4 <_dtoa_r+0xaa4>
 8008ac8:	f000 fab4 	bl	8009034 <__multadd>
 8008acc:	4681      	mov	r9, r0
 8008ace:	4606      	mov	r6, r0
 8008ad0:	9505      	str	r5, [sp, #20]
 8008ad2:	e776      	b.n	80089c2 <_dtoa_r+0x992>
 8008ad4:	f000 faae 	bl	8009034 <__multadd>
 8008ad8:	4631      	mov	r1, r6
 8008ada:	4681      	mov	r9, r0
 8008adc:	2300      	movs	r3, #0
 8008ade:	220a      	movs	r2, #10
 8008ae0:	4620      	mov	r0, r4
 8008ae2:	f000 faa7 	bl	8009034 <__multadd>
 8008ae6:	4606      	mov	r6, r0
 8008ae8:	e7f2      	b.n	8008ad0 <_dtoa_r+0xaa0>
 8008aea:	f04f 0900 	mov.w	r9, #0
 8008aee:	2201      	movs	r2, #1
 8008af0:	9904      	ldr	r1, [sp, #16]
 8008af2:	4620      	mov	r0, r4
 8008af4:	f000 fc14 	bl	8009320 <__lshift>
 8008af8:	4639      	mov	r1, r7
 8008afa:	9004      	str	r0, [sp, #16]
 8008afc:	f000 fc64 	bl	80093c8 <__mcmp>
 8008b00:	2800      	cmp	r0, #0
 8008b02:	dcb6      	bgt.n	8008a72 <_dtoa_r+0xa42>
 8008b04:	d102      	bne.n	8008b0c <_dtoa_r+0xadc>
 8008b06:	f018 0f01 	tst.w	r8, #1
 8008b0a:	d1b2      	bne.n	8008a72 <_dtoa_r+0xa42>
 8008b0c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008b10:	2b30      	cmp	r3, #48	; 0x30
 8008b12:	f105 32ff 	add.w	r2, r5, #4294967295
 8008b16:	f47f af0a 	bne.w	800892e <_dtoa_r+0x8fe>
 8008b1a:	4615      	mov	r5, r2
 8008b1c:	e7f6      	b.n	8008b0c <_dtoa_r+0xadc>
 8008b1e:	4593      	cmp	fp, r2
 8008b20:	d105      	bne.n	8008b2e <_dtoa_r+0xafe>
 8008b22:	2331      	movs	r3, #49	; 0x31
 8008b24:	f10a 0a01 	add.w	sl, sl, #1
 8008b28:	f88b 3000 	strb.w	r3, [fp]
 8008b2c:	e6ff      	b.n	800892e <_dtoa_r+0x8fe>
 8008b2e:	4615      	mov	r5, r2
 8008b30:	e79f      	b.n	8008a72 <_dtoa_r+0xa42>
 8008b32:	f8df b064 	ldr.w	fp, [pc, #100]	; 8008b98 <_dtoa_r+0xb68>
 8008b36:	e007      	b.n	8008b48 <_dtoa_r+0xb18>
 8008b38:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b3a:	f8df b060 	ldr.w	fp, [pc, #96]	; 8008b9c <_dtoa_r+0xb6c>
 8008b3e:	b11b      	cbz	r3, 8008b48 <_dtoa_r+0xb18>
 8008b40:	f10b 0308 	add.w	r3, fp, #8
 8008b44:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008b46:	6013      	str	r3, [r2, #0]
 8008b48:	4658      	mov	r0, fp
 8008b4a:	b017      	add	sp, #92	; 0x5c
 8008b4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b50:	9b06      	ldr	r3, [sp, #24]
 8008b52:	2b01      	cmp	r3, #1
 8008b54:	f77f ae35 	ble.w	80087c2 <_dtoa_r+0x792>
 8008b58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b5a:	9307      	str	r3, [sp, #28]
 8008b5c:	e649      	b.n	80087f2 <_dtoa_r+0x7c2>
 8008b5e:	9b02      	ldr	r3, [sp, #8]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	dc03      	bgt.n	8008b6c <_dtoa_r+0xb3c>
 8008b64:	9b06      	ldr	r3, [sp, #24]
 8008b66:	2b02      	cmp	r3, #2
 8008b68:	f73f aecc 	bgt.w	8008904 <_dtoa_r+0x8d4>
 8008b6c:	465d      	mov	r5, fp
 8008b6e:	4639      	mov	r1, r7
 8008b70:	9804      	ldr	r0, [sp, #16]
 8008b72:	f7ff f9cf 	bl	8007f14 <quorem>
 8008b76:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008b7a:	f805 8b01 	strb.w	r8, [r5], #1
 8008b7e:	9a02      	ldr	r2, [sp, #8]
 8008b80:	eba5 030b 	sub.w	r3, r5, fp
 8008b84:	429a      	cmp	r2, r3
 8008b86:	ddb0      	ble.n	8008aea <_dtoa_r+0xaba>
 8008b88:	2300      	movs	r3, #0
 8008b8a:	220a      	movs	r2, #10
 8008b8c:	9904      	ldr	r1, [sp, #16]
 8008b8e:	4620      	mov	r0, r4
 8008b90:	f000 fa50 	bl	8009034 <__multadd>
 8008b94:	9004      	str	r0, [sp, #16]
 8008b96:	e7ea      	b.n	8008b6e <_dtoa_r+0xb3e>
 8008b98:	0800a8fc 	.word	0x0800a8fc
 8008b9c:	0800a920 	.word	0x0800a920

08008ba0 <__sflush_r>:
 8008ba0:	898a      	ldrh	r2, [r1, #12]
 8008ba2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ba6:	4605      	mov	r5, r0
 8008ba8:	0710      	lsls	r0, r2, #28
 8008baa:	460c      	mov	r4, r1
 8008bac:	d458      	bmi.n	8008c60 <__sflush_r+0xc0>
 8008bae:	684b      	ldr	r3, [r1, #4]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	dc05      	bgt.n	8008bc0 <__sflush_r+0x20>
 8008bb4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	dc02      	bgt.n	8008bc0 <__sflush_r+0x20>
 8008bba:	2000      	movs	r0, #0
 8008bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bc0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008bc2:	2e00      	cmp	r6, #0
 8008bc4:	d0f9      	beq.n	8008bba <__sflush_r+0x1a>
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008bcc:	682f      	ldr	r7, [r5, #0]
 8008bce:	6a21      	ldr	r1, [r4, #32]
 8008bd0:	602b      	str	r3, [r5, #0]
 8008bd2:	d032      	beq.n	8008c3a <__sflush_r+0x9a>
 8008bd4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008bd6:	89a3      	ldrh	r3, [r4, #12]
 8008bd8:	075a      	lsls	r2, r3, #29
 8008bda:	d505      	bpl.n	8008be8 <__sflush_r+0x48>
 8008bdc:	6863      	ldr	r3, [r4, #4]
 8008bde:	1ac0      	subs	r0, r0, r3
 8008be0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008be2:	b10b      	cbz	r3, 8008be8 <__sflush_r+0x48>
 8008be4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008be6:	1ac0      	subs	r0, r0, r3
 8008be8:	2300      	movs	r3, #0
 8008bea:	4602      	mov	r2, r0
 8008bec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008bee:	6a21      	ldr	r1, [r4, #32]
 8008bf0:	4628      	mov	r0, r5
 8008bf2:	47b0      	blx	r6
 8008bf4:	1c43      	adds	r3, r0, #1
 8008bf6:	89a3      	ldrh	r3, [r4, #12]
 8008bf8:	d106      	bne.n	8008c08 <__sflush_r+0x68>
 8008bfa:	6829      	ldr	r1, [r5, #0]
 8008bfc:	291d      	cmp	r1, #29
 8008bfe:	d848      	bhi.n	8008c92 <__sflush_r+0xf2>
 8008c00:	4a29      	ldr	r2, [pc, #164]	; (8008ca8 <__sflush_r+0x108>)
 8008c02:	40ca      	lsrs	r2, r1
 8008c04:	07d6      	lsls	r6, r2, #31
 8008c06:	d544      	bpl.n	8008c92 <__sflush_r+0xf2>
 8008c08:	2200      	movs	r2, #0
 8008c0a:	6062      	str	r2, [r4, #4]
 8008c0c:	04d9      	lsls	r1, r3, #19
 8008c0e:	6922      	ldr	r2, [r4, #16]
 8008c10:	6022      	str	r2, [r4, #0]
 8008c12:	d504      	bpl.n	8008c1e <__sflush_r+0x7e>
 8008c14:	1c42      	adds	r2, r0, #1
 8008c16:	d101      	bne.n	8008c1c <__sflush_r+0x7c>
 8008c18:	682b      	ldr	r3, [r5, #0]
 8008c1a:	b903      	cbnz	r3, 8008c1e <__sflush_r+0x7e>
 8008c1c:	6560      	str	r0, [r4, #84]	; 0x54
 8008c1e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c20:	602f      	str	r7, [r5, #0]
 8008c22:	2900      	cmp	r1, #0
 8008c24:	d0c9      	beq.n	8008bba <__sflush_r+0x1a>
 8008c26:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c2a:	4299      	cmp	r1, r3
 8008c2c:	d002      	beq.n	8008c34 <__sflush_r+0x94>
 8008c2e:	4628      	mov	r0, r5
 8008c30:	f000 fc9e 	bl	8009570 <_free_r>
 8008c34:	2000      	movs	r0, #0
 8008c36:	6360      	str	r0, [r4, #52]	; 0x34
 8008c38:	e7c0      	b.n	8008bbc <__sflush_r+0x1c>
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	4628      	mov	r0, r5
 8008c3e:	47b0      	blx	r6
 8008c40:	1c41      	adds	r1, r0, #1
 8008c42:	d1c8      	bne.n	8008bd6 <__sflush_r+0x36>
 8008c44:	682b      	ldr	r3, [r5, #0]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d0c5      	beq.n	8008bd6 <__sflush_r+0x36>
 8008c4a:	2b1d      	cmp	r3, #29
 8008c4c:	d001      	beq.n	8008c52 <__sflush_r+0xb2>
 8008c4e:	2b16      	cmp	r3, #22
 8008c50:	d101      	bne.n	8008c56 <__sflush_r+0xb6>
 8008c52:	602f      	str	r7, [r5, #0]
 8008c54:	e7b1      	b.n	8008bba <__sflush_r+0x1a>
 8008c56:	89a3      	ldrh	r3, [r4, #12]
 8008c58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c5c:	81a3      	strh	r3, [r4, #12]
 8008c5e:	e7ad      	b.n	8008bbc <__sflush_r+0x1c>
 8008c60:	690f      	ldr	r7, [r1, #16]
 8008c62:	2f00      	cmp	r7, #0
 8008c64:	d0a9      	beq.n	8008bba <__sflush_r+0x1a>
 8008c66:	0793      	lsls	r3, r2, #30
 8008c68:	680e      	ldr	r6, [r1, #0]
 8008c6a:	bf08      	it	eq
 8008c6c:	694b      	ldreq	r3, [r1, #20]
 8008c6e:	600f      	str	r7, [r1, #0]
 8008c70:	bf18      	it	ne
 8008c72:	2300      	movne	r3, #0
 8008c74:	eba6 0807 	sub.w	r8, r6, r7
 8008c78:	608b      	str	r3, [r1, #8]
 8008c7a:	f1b8 0f00 	cmp.w	r8, #0
 8008c7e:	dd9c      	ble.n	8008bba <__sflush_r+0x1a>
 8008c80:	4643      	mov	r3, r8
 8008c82:	463a      	mov	r2, r7
 8008c84:	6a21      	ldr	r1, [r4, #32]
 8008c86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008c88:	4628      	mov	r0, r5
 8008c8a:	47b0      	blx	r6
 8008c8c:	2800      	cmp	r0, #0
 8008c8e:	dc06      	bgt.n	8008c9e <__sflush_r+0xfe>
 8008c90:	89a3      	ldrh	r3, [r4, #12]
 8008c92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c96:	81a3      	strh	r3, [r4, #12]
 8008c98:	f04f 30ff 	mov.w	r0, #4294967295
 8008c9c:	e78e      	b.n	8008bbc <__sflush_r+0x1c>
 8008c9e:	4407      	add	r7, r0
 8008ca0:	eba8 0800 	sub.w	r8, r8, r0
 8008ca4:	e7e9      	b.n	8008c7a <__sflush_r+0xda>
 8008ca6:	bf00      	nop
 8008ca8:	20400001 	.word	0x20400001

08008cac <_fflush_r>:
 8008cac:	b538      	push	{r3, r4, r5, lr}
 8008cae:	690b      	ldr	r3, [r1, #16]
 8008cb0:	4605      	mov	r5, r0
 8008cb2:	460c      	mov	r4, r1
 8008cb4:	b1db      	cbz	r3, 8008cee <_fflush_r+0x42>
 8008cb6:	b118      	cbz	r0, 8008cc0 <_fflush_r+0x14>
 8008cb8:	6983      	ldr	r3, [r0, #24]
 8008cba:	b90b      	cbnz	r3, 8008cc0 <_fflush_r+0x14>
 8008cbc:	f000 f860 	bl	8008d80 <__sinit>
 8008cc0:	4b0c      	ldr	r3, [pc, #48]	; (8008cf4 <_fflush_r+0x48>)
 8008cc2:	429c      	cmp	r4, r3
 8008cc4:	d109      	bne.n	8008cda <_fflush_r+0x2e>
 8008cc6:	686c      	ldr	r4, [r5, #4]
 8008cc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ccc:	b17b      	cbz	r3, 8008cee <_fflush_r+0x42>
 8008cce:	4621      	mov	r1, r4
 8008cd0:	4628      	mov	r0, r5
 8008cd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008cd6:	f7ff bf63 	b.w	8008ba0 <__sflush_r>
 8008cda:	4b07      	ldr	r3, [pc, #28]	; (8008cf8 <_fflush_r+0x4c>)
 8008cdc:	429c      	cmp	r4, r3
 8008cde:	d101      	bne.n	8008ce4 <_fflush_r+0x38>
 8008ce0:	68ac      	ldr	r4, [r5, #8]
 8008ce2:	e7f1      	b.n	8008cc8 <_fflush_r+0x1c>
 8008ce4:	4b05      	ldr	r3, [pc, #20]	; (8008cfc <_fflush_r+0x50>)
 8008ce6:	429c      	cmp	r4, r3
 8008ce8:	bf08      	it	eq
 8008cea:	68ec      	ldreq	r4, [r5, #12]
 8008cec:	e7ec      	b.n	8008cc8 <_fflush_r+0x1c>
 8008cee:	2000      	movs	r0, #0
 8008cf0:	bd38      	pop	{r3, r4, r5, pc}
 8008cf2:	bf00      	nop
 8008cf4:	0800a950 	.word	0x0800a950
 8008cf8:	0800a970 	.word	0x0800a970
 8008cfc:	0800a930 	.word	0x0800a930

08008d00 <std>:
 8008d00:	2300      	movs	r3, #0
 8008d02:	b510      	push	{r4, lr}
 8008d04:	4604      	mov	r4, r0
 8008d06:	e9c0 3300 	strd	r3, r3, [r0]
 8008d0a:	6083      	str	r3, [r0, #8]
 8008d0c:	8181      	strh	r1, [r0, #12]
 8008d0e:	6643      	str	r3, [r0, #100]	; 0x64
 8008d10:	81c2      	strh	r2, [r0, #14]
 8008d12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008d16:	6183      	str	r3, [r0, #24]
 8008d18:	4619      	mov	r1, r3
 8008d1a:	2208      	movs	r2, #8
 8008d1c:	305c      	adds	r0, #92	; 0x5c
 8008d1e:	f7fe faa3 	bl	8007268 <memset>
 8008d22:	4b05      	ldr	r3, [pc, #20]	; (8008d38 <std+0x38>)
 8008d24:	6263      	str	r3, [r4, #36]	; 0x24
 8008d26:	4b05      	ldr	r3, [pc, #20]	; (8008d3c <std+0x3c>)
 8008d28:	62a3      	str	r3, [r4, #40]	; 0x28
 8008d2a:	4b05      	ldr	r3, [pc, #20]	; (8008d40 <std+0x40>)
 8008d2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008d2e:	4b05      	ldr	r3, [pc, #20]	; (8008d44 <std+0x44>)
 8008d30:	6224      	str	r4, [r4, #32]
 8008d32:	6323      	str	r3, [r4, #48]	; 0x30
 8008d34:	bd10      	pop	{r4, pc}
 8008d36:	bf00      	nop
 8008d38:	08009961 	.word	0x08009961
 8008d3c:	08009983 	.word	0x08009983
 8008d40:	080099bb 	.word	0x080099bb
 8008d44:	080099df 	.word	0x080099df

08008d48 <_cleanup_r>:
 8008d48:	4901      	ldr	r1, [pc, #4]	; (8008d50 <_cleanup_r+0x8>)
 8008d4a:	f000 b885 	b.w	8008e58 <_fwalk_reent>
 8008d4e:	bf00      	nop
 8008d50:	08008cad 	.word	0x08008cad

08008d54 <__sfmoreglue>:
 8008d54:	b570      	push	{r4, r5, r6, lr}
 8008d56:	1e4a      	subs	r2, r1, #1
 8008d58:	2568      	movs	r5, #104	; 0x68
 8008d5a:	4355      	muls	r5, r2
 8008d5c:	460e      	mov	r6, r1
 8008d5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008d62:	f000 fc53 	bl	800960c <_malloc_r>
 8008d66:	4604      	mov	r4, r0
 8008d68:	b140      	cbz	r0, 8008d7c <__sfmoreglue+0x28>
 8008d6a:	2100      	movs	r1, #0
 8008d6c:	e9c0 1600 	strd	r1, r6, [r0]
 8008d70:	300c      	adds	r0, #12
 8008d72:	60a0      	str	r0, [r4, #8]
 8008d74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008d78:	f7fe fa76 	bl	8007268 <memset>
 8008d7c:	4620      	mov	r0, r4
 8008d7e:	bd70      	pop	{r4, r5, r6, pc}

08008d80 <__sinit>:
 8008d80:	6983      	ldr	r3, [r0, #24]
 8008d82:	b510      	push	{r4, lr}
 8008d84:	4604      	mov	r4, r0
 8008d86:	bb33      	cbnz	r3, 8008dd6 <__sinit+0x56>
 8008d88:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8008d8c:	6503      	str	r3, [r0, #80]	; 0x50
 8008d8e:	4b12      	ldr	r3, [pc, #72]	; (8008dd8 <__sinit+0x58>)
 8008d90:	4a12      	ldr	r2, [pc, #72]	; (8008ddc <__sinit+0x5c>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	6282      	str	r2, [r0, #40]	; 0x28
 8008d96:	4298      	cmp	r0, r3
 8008d98:	bf04      	itt	eq
 8008d9a:	2301      	moveq	r3, #1
 8008d9c:	6183      	streq	r3, [r0, #24]
 8008d9e:	f000 f81f 	bl	8008de0 <__sfp>
 8008da2:	6060      	str	r0, [r4, #4]
 8008da4:	4620      	mov	r0, r4
 8008da6:	f000 f81b 	bl	8008de0 <__sfp>
 8008daa:	60a0      	str	r0, [r4, #8]
 8008dac:	4620      	mov	r0, r4
 8008dae:	f000 f817 	bl	8008de0 <__sfp>
 8008db2:	2200      	movs	r2, #0
 8008db4:	60e0      	str	r0, [r4, #12]
 8008db6:	2104      	movs	r1, #4
 8008db8:	6860      	ldr	r0, [r4, #4]
 8008dba:	f7ff ffa1 	bl	8008d00 <std>
 8008dbe:	2201      	movs	r2, #1
 8008dc0:	2109      	movs	r1, #9
 8008dc2:	68a0      	ldr	r0, [r4, #8]
 8008dc4:	f7ff ff9c 	bl	8008d00 <std>
 8008dc8:	2202      	movs	r2, #2
 8008dca:	2112      	movs	r1, #18
 8008dcc:	68e0      	ldr	r0, [r4, #12]
 8008dce:	f7ff ff97 	bl	8008d00 <std>
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	61a3      	str	r3, [r4, #24]
 8008dd6:	bd10      	pop	{r4, pc}
 8008dd8:	0800a8e8 	.word	0x0800a8e8
 8008ddc:	08008d49 	.word	0x08008d49

08008de0 <__sfp>:
 8008de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008de2:	4b1b      	ldr	r3, [pc, #108]	; (8008e50 <__sfp+0x70>)
 8008de4:	681e      	ldr	r6, [r3, #0]
 8008de6:	69b3      	ldr	r3, [r6, #24]
 8008de8:	4607      	mov	r7, r0
 8008dea:	b913      	cbnz	r3, 8008df2 <__sfp+0x12>
 8008dec:	4630      	mov	r0, r6
 8008dee:	f7ff ffc7 	bl	8008d80 <__sinit>
 8008df2:	3648      	adds	r6, #72	; 0x48
 8008df4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008df8:	3b01      	subs	r3, #1
 8008dfa:	d503      	bpl.n	8008e04 <__sfp+0x24>
 8008dfc:	6833      	ldr	r3, [r6, #0]
 8008dfe:	b133      	cbz	r3, 8008e0e <__sfp+0x2e>
 8008e00:	6836      	ldr	r6, [r6, #0]
 8008e02:	e7f7      	b.n	8008df4 <__sfp+0x14>
 8008e04:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008e08:	b16d      	cbz	r5, 8008e26 <__sfp+0x46>
 8008e0a:	3468      	adds	r4, #104	; 0x68
 8008e0c:	e7f4      	b.n	8008df8 <__sfp+0x18>
 8008e0e:	2104      	movs	r1, #4
 8008e10:	4638      	mov	r0, r7
 8008e12:	f7ff ff9f 	bl	8008d54 <__sfmoreglue>
 8008e16:	6030      	str	r0, [r6, #0]
 8008e18:	2800      	cmp	r0, #0
 8008e1a:	d1f1      	bne.n	8008e00 <__sfp+0x20>
 8008e1c:	230c      	movs	r3, #12
 8008e1e:	603b      	str	r3, [r7, #0]
 8008e20:	4604      	mov	r4, r0
 8008e22:	4620      	mov	r0, r4
 8008e24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e26:	4b0b      	ldr	r3, [pc, #44]	; (8008e54 <__sfp+0x74>)
 8008e28:	6665      	str	r5, [r4, #100]	; 0x64
 8008e2a:	e9c4 5500 	strd	r5, r5, [r4]
 8008e2e:	60a5      	str	r5, [r4, #8]
 8008e30:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8008e34:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8008e38:	2208      	movs	r2, #8
 8008e3a:	4629      	mov	r1, r5
 8008e3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008e40:	f7fe fa12 	bl	8007268 <memset>
 8008e44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008e48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008e4c:	e7e9      	b.n	8008e22 <__sfp+0x42>
 8008e4e:	bf00      	nop
 8008e50:	0800a8e8 	.word	0x0800a8e8
 8008e54:	ffff0001 	.word	0xffff0001

08008e58 <_fwalk_reent>:
 8008e58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e5c:	4680      	mov	r8, r0
 8008e5e:	4689      	mov	r9, r1
 8008e60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008e64:	2600      	movs	r6, #0
 8008e66:	b914      	cbnz	r4, 8008e6e <_fwalk_reent+0x16>
 8008e68:	4630      	mov	r0, r6
 8008e6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e6e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8008e72:	3f01      	subs	r7, #1
 8008e74:	d501      	bpl.n	8008e7a <_fwalk_reent+0x22>
 8008e76:	6824      	ldr	r4, [r4, #0]
 8008e78:	e7f5      	b.n	8008e66 <_fwalk_reent+0xe>
 8008e7a:	89ab      	ldrh	r3, [r5, #12]
 8008e7c:	2b01      	cmp	r3, #1
 8008e7e:	d907      	bls.n	8008e90 <_fwalk_reent+0x38>
 8008e80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008e84:	3301      	adds	r3, #1
 8008e86:	d003      	beq.n	8008e90 <_fwalk_reent+0x38>
 8008e88:	4629      	mov	r1, r5
 8008e8a:	4640      	mov	r0, r8
 8008e8c:	47c8      	blx	r9
 8008e8e:	4306      	orrs	r6, r0
 8008e90:	3568      	adds	r5, #104	; 0x68
 8008e92:	e7ee      	b.n	8008e72 <_fwalk_reent+0x1a>

08008e94 <_localeconv_r>:
 8008e94:	4b04      	ldr	r3, [pc, #16]	; (8008ea8 <_localeconv_r+0x14>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	6a18      	ldr	r0, [r3, #32]
 8008e9a:	4b04      	ldr	r3, [pc, #16]	; (8008eac <_localeconv_r+0x18>)
 8008e9c:	2800      	cmp	r0, #0
 8008e9e:	bf08      	it	eq
 8008ea0:	4618      	moveq	r0, r3
 8008ea2:	30f0      	adds	r0, #240	; 0xf0
 8008ea4:	4770      	bx	lr
 8008ea6:	bf00      	nop
 8008ea8:	20000014 	.word	0x20000014
 8008eac:	20000078 	.word	0x20000078

08008eb0 <__swhatbuf_r>:
 8008eb0:	b570      	push	{r4, r5, r6, lr}
 8008eb2:	460e      	mov	r6, r1
 8008eb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008eb8:	2900      	cmp	r1, #0
 8008eba:	b096      	sub	sp, #88	; 0x58
 8008ebc:	4614      	mov	r4, r2
 8008ebe:	461d      	mov	r5, r3
 8008ec0:	da07      	bge.n	8008ed2 <__swhatbuf_r+0x22>
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	602b      	str	r3, [r5, #0]
 8008ec6:	89b3      	ldrh	r3, [r6, #12]
 8008ec8:	061a      	lsls	r2, r3, #24
 8008eca:	d410      	bmi.n	8008eee <__swhatbuf_r+0x3e>
 8008ecc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ed0:	e00e      	b.n	8008ef0 <__swhatbuf_r+0x40>
 8008ed2:	466a      	mov	r2, sp
 8008ed4:	f000 fdaa 	bl	8009a2c <_fstat_r>
 8008ed8:	2800      	cmp	r0, #0
 8008eda:	dbf2      	blt.n	8008ec2 <__swhatbuf_r+0x12>
 8008edc:	9a01      	ldr	r2, [sp, #4]
 8008ede:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008ee2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008ee6:	425a      	negs	r2, r3
 8008ee8:	415a      	adcs	r2, r3
 8008eea:	602a      	str	r2, [r5, #0]
 8008eec:	e7ee      	b.n	8008ecc <__swhatbuf_r+0x1c>
 8008eee:	2340      	movs	r3, #64	; 0x40
 8008ef0:	2000      	movs	r0, #0
 8008ef2:	6023      	str	r3, [r4, #0]
 8008ef4:	b016      	add	sp, #88	; 0x58
 8008ef6:	bd70      	pop	{r4, r5, r6, pc}

08008ef8 <__smakebuf_r>:
 8008ef8:	898b      	ldrh	r3, [r1, #12]
 8008efa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008efc:	079d      	lsls	r5, r3, #30
 8008efe:	4606      	mov	r6, r0
 8008f00:	460c      	mov	r4, r1
 8008f02:	d507      	bpl.n	8008f14 <__smakebuf_r+0x1c>
 8008f04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008f08:	6023      	str	r3, [r4, #0]
 8008f0a:	6123      	str	r3, [r4, #16]
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	6163      	str	r3, [r4, #20]
 8008f10:	b002      	add	sp, #8
 8008f12:	bd70      	pop	{r4, r5, r6, pc}
 8008f14:	ab01      	add	r3, sp, #4
 8008f16:	466a      	mov	r2, sp
 8008f18:	f7ff ffca 	bl	8008eb0 <__swhatbuf_r>
 8008f1c:	9900      	ldr	r1, [sp, #0]
 8008f1e:	4605      	mov	r5, r0
 8008f20:	4630      	mov	r0, r6
 8008f22:	f000 fb73 	bl	800960c <_malloc_r>
 8008f26:	b948      	cbnz	r0, 8008f3c <__smakebuf_r+0x44>
 8008f28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f2c:	059a      	lsls	r2, r3, #22
 8008f2e:	d4ef      	bmi.n	8008f10 <__smakebuf_r+0x18>
 8008f30:	f023 0303 	bic.w	r3, r3, #3
 8008f34:	f043 0302 	orr.w	r3, r3, #2
 8008f38:	81a3      	strh	r3, [r4, #12]
 8008f3a:	e7e3      	b.n	8008f04 <__smakebuf_r+0xc>
 8008f3c:	4b0d      	ldr	r3, [pc, #52]	; (8008f74 <__smakebuf_r+0x7c>)
 8008f3e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008f40:	89a3      	ldrh	r3, [r4, #12]
 8008f42:	6020      	str	r0, [r4, #0]
 8008f44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f48:	81a3      	strh	r3, [r4, #12]
 8008f4a:	9b00      	ldr	r3, [sp, #0]
 8008f4c:	6163      	str	r3, [r4, #20]
 8008f4e:	9b01      	ldr	r3, [sp, #4]
 8008f50:	6120      	str	r0, [r4, #16]
 8008f52:	b15b      	cbz	r3, 8008f6c <__smakebuf_r+0x74>
 8008f54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f58:	4630      	mov	r0, r6
 8008f5a:	f000 fd79 	bl	8009a50 <_isatty_r>
 8008f5e:	b128      	cbz	r0, 8008f6c <__smakebuf_r+0x74>
 8008f60:	89a3      	ldrh	r3, [r4, #12]
 8008f62:	f023 0303 	bic.w	r3, r3, #3
 8008f66:	f043 0301 	orr.w	r3, r3, #1
 8008f6a:	81a3      	strh	r3, [r4, #12]
 8008f6c:	89a3      	ldrh	r3, [r4, #12]
 8008f6e:	431d      	orrs	r5, r3
 8008f70:	81a5      	strh	r5, [r4, #12]
 8008f72:	e7cd      	b.n	8008f10 <__smakebuf_r+0x18>
 8008f74:	08008d49 	.word	0x08008d49

08008f78 <malloc>:
 8008f78:	4b02      	ldr	r3, [pc, #8]	; (8008f84 <malloc+0xc>)
 8008f7a:	4601      	mov	r1, r0
 8008f7c:	6818      	ldr	r0, [r3, #0]
 8008f7e:	f000 bb45 	b.w	800960c <_malloc_r>
 8008f82:	bf00      	nop
 8008f84:	20000014 	.word	0x20000014

08008f88 <memcpy>:
 8008f88:	b510      	push	{r4, lr}
 8008f8a:	1e43      	subs	r3, r0, #1
 8008f8c:	440a      	add	r2, r1
 8008f8e:	4291      	cmp	r1, r2
 8008f90:	d100      	bne.n	8008f94 <memcpy+0xc>
 8008f92:	bd10      	pop	{r4, pc}
 8008f94:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f98:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f9c:	e7f7      	b.n	8008f8e <memcpy+0x6>

08008f9e <_Balloc>:
 8008f9e:	b570      	push	{r4, r5, r6, lr}
 8008fa0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008fa2:	4604      	mov	r4, r0
 8008fa4:	460e      	mov	r6, r1
 8008fa6:	b93d      	cbnz	r5, 8008fb8 <_Balloc+0x1a>
 8008fa8:	2010      	movs	r0, #16
 8008faa:	f7ff ffe5 	bl	8008f78 <malloc>
 8008fae:	6260      	str	r0, [r4, #36]	; 0x24
 8008fb0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008fb4:	6005      	str	r5, [r0, #0]
 8008fb6:	60c5      	str	r5, [r0, #12]
 8008fb8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008fba:	68eb      	ldr	r3, [r5, #12]
 8008fbc:	b183      	cbz	r3, 8008fe0 <_Balloc+0x42>
 8008fbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008fc0:	68db      	ldr	r3, [r3, #12]
 8008fc2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008fc6:	b9b8      	cbnz	r0, 8008ff8 <_Balloc+0x5a>
 8008fc8:	2101      	movs	r1, #1
 8008fca:	fa01 f506 	lsl.w	r5, r1, r6
 8008fce:	1d6a      	adds	r2, r5, #5
 8008fd0:	0092      	lsls	r2, r2, #2
 8008fd2:	4620      	mov	r0, r4
 8008fd4:	f000 fabe 	bl	8009554 <_calloc_r>
 8008fd8:	b160      	cbz	r0, 8008ff4 <_Balloc+0x56>
 8008fda:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8008fde:	e00e      	b.n	8008ffe <_Balloc+0x60>
 8008fe0:	2221      	movs	r2, #33	; 0x21
 8008fe2:	2104      	movs	r1, #4
 8008fe4:	4620      	mov	r0, r4
 8008fe6:	f000 fab5 	bl	8009554 <_calloc_r>
 8008fea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008fec:	60e8      	str	r0, [r5, #12]
 8008fee:	68db      	ldr	r3, [r3, #12]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d1e4      	bne.n	8008fbe <_Balloc+0x20>
 8008ff4:	2000      	movs	r0, #0
 8008ff6:	bd70      	pop	{r4, r5, r6, pc}
 8008ff8:	6802      	ldr	r2, [r0, #0]
 8008ffa:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8008ffe:	2300      	movs	r3, #0
 8009000:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009004:	e7f7      	b.n	8008ff6 <_Balloc+0x58>

08009006 <_Bfree>:
 8009006:	b570      	push	{r4, r5, r6, lr}
 8009008:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800900a:	4606      	mov	r6, r0
 800900c:	460d      	mov	r5, r1
 800900e:	b93c      	cbnz	r4, 8009020 <_Bfree+0x1a>
 8009010:	2010      	movs	r0, #16
 8009012:	f7ff ffb1 	bl	8008f78 <malloc>
 8009016:	6270      	str	r0, [r6, #36]	; 0x24
 8009018:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800901c:	6004      	str	r4, [r0, #0]
 800901e:	60c4      	str	r4, [r0, #12]
 8009020:	b13d      	cbz	r5, 8009032 <_Bfree+0x2c>
 8009022:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009024:	686a      	ldr	r2, [r5, #4]
 8009026:	68db      	ldr	r3, [r3, #12]
 8009028:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800902c:	6029      	str	r1, [r5, #0]
 800902e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8009032:	bd70      	pop	{r4, r5, r6, pc}

08009034 <__multadd>:
 8009034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009038:	690d      	ldr	r5, [r1, #16]
 800903a:	461f      	mov	r7, r3
 800903c:	4606      	mov	r6, r0
 800903e:	460c      	mov	r4, r1
 8009040:	f101 0c14 	add.w	ip, r1, #20
 8009044:	2300      	movs	r3, #0
 8009046:	f8dc 0000 	ldr.w	r0, [ip]
 800904a:	b281      	uxth	r1, r0
 800904c:	fb02 7101 	mla	r1, r2, r1, r7
 8009050:	0c0f      	lsrs	r7, r1, #16
 8009052:	0c00      	lsrs	r0, r0, #16
 8009054:	fb02 7000 	mla	r0, r2, r0, r7
 8009058:	b289      	uxth	r1, r1
 800905a:	3301      	adds	r3, #1
 800905c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009060:	429d      	cmp	r5, r3
 8009062:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009066:	f84c 1b04 	str.w	r1, [ip], #4
 800906a:	dcec      	bgt.n	8009046 <__multadd+0x12>
 800906c:	b1d7      	cbz	r7, 80090a4 <__multadd+0x70>
 800906e:	68a3      	ldr	r3, [r4, #8]
 8009070:	42ab      	cmp	r3, r5
 8009072:	dc12      	bgt.n	800909a <__multadd+0x66>
 8009074:	6861      	ldr	r1, [r4, #4]
 8009076:	4630      	mov	r0, r6
 8009078:	3101      	adds	r1, #1
 800907a:	f7ff ff90 	bl	8008f9e <_Balloc>
 800907e:	6922      	ldr	r2, [r4, #16]
 8009080:	3202      	adds	r2, #2
 8009082:	f104 010c 	add.w	r1, r4, #12
 8009086:	4680      	mov	r8, r0
 8009088:	0092      	lsls	r2, r2, #2
 800908a:	300c      	adds	r0, #12
 800908c:	f7ff ff7c 	bl	8008f88 <memcpy>
 8009090:	4621      	mov	r1, r4
 8009092:	4630      	mov	r0, r6
 8009094:	f7ff ffb7 	bl	8009006 <_Bfree>
 8009098:	4644      	mov	r4, r8
 800909a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800909e:	3501      	adds	r5, #1
 80090a0:	615f      	str	r7, [r3, #20]
 80090a2:	6125      	str	r5, [r4, #16]
 80090a4:	4620      	mov	r0, r4
 80090a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080090aa <__hi0bits>:
 80090aa:	0c02      	lsrs	r2, r0, #16
 80090ac:	0412      	lsls	r2, r2, #16
 80090ae:	4603      	mov	r3, r0
 80090b0:	b9b2      	cbnz	r2, 80090e0 <__hi0bits+0x36>
 80090b2:	0403      	lsls	r3, r0, #16
 80090b4:	2010      	movs	r0, #16
 80090b6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80090ba:	bf04      	itt	eq
 80090bc:	021b      	lsleq	r3, r3, #8
 80090be:	3008      	addeq	r0, #8
 80090c0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80090c4:	bf04      	itt	eq
 80090c6:	011b      	lsleq	r3, r3, #4
 80090c8:	3004      	addeq	r0, #4
 80090ca:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80090ce:	bf04      	itt	eq
 80090d0:	009b      	lsleq	r3, r3, #2
 80090d2:	3002      	addeq	r0, #2
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	db06      	blt.n	80090e6 <__hi0bits+0x3c>
 80090d8:	005b      	lsls	r3, r3, #1
 80090da:	d503      	bpl.n	80090e4 <__hi0bits+0x3a>
 80090dc:	3001      	adds	r0, #1
 80090de:	4770      	bx	lr
 80090e0:	2000      	movs	r0, #0
 80090e2:	e7e8      	b.n	80090b6 <__hi0bits+0xc>
 80090e4:	2020      	movs	r0, #32
 80090e6:	4770      	bx	lr

080090e8 <__lo0bits>:
 80090e8:	6803      	ldr	r3, [r0, #0]
 80090ea:	f013 0207 	ands.w	r2, r3, #7
 80090ee:	4601      	mov	r1, r0
 80090f0:	d00b      	beq.n	800910a <__lo0bits+0x22>
 80090f2:	07da      	lsls	r2, r3, #31
 80090f4:	d423      	bmi.n	800913e <__lo0bits+0x56>
 80090f6:	0798      	lsls	r0, r3, #30
 80090f8:	bf49      	itett	mi
 80090fa:	085b      	lsrmi	r3, r3, #1
 80090fc:	089b      	lsrpl	r3, r3, #2
 80090fe:	2001      	movmi	r0, #1
 8009100:	600b      	strmi	r3, [r1, #0]
 8009102:	bf5c      	itt	pl
 8009104:	600b      	strpl	r3, [r1, #0]
 8009106:	2002      	movpl	r0, #2
 8009108:	4770      	bx	lr
 800910a:	b298      	uxth	r0, r3
 800910c:	b9a8      	cbnz	r0, 800913a <__lo0bits+0x52>
 800910e:	0c1b      	lsrs	r3, r3, #16
 8009110:	2010      	movs	r0, #16
 8009112:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009116:	bf04      	itt	eq
 8009118:	0a1b      	lsreq	r3, r3, #8
 800911a:	3008      	addeq	r0, #8
 800911c:	071a      	lsls	r2, r3, #28
 800911e:	bf04      	itt	eq
 8009120:	091b      	lsreq	r3, r3, #4
 8009122:	3004      	addeq	r0, #4
 8009124:	079a      	lsls	r2, r3, #30
 8009126:	bf04      	itt	eq
 8009128:	089b      	lsreq	r3, r3, #2
 800912a:	3002      	addeq	r0, #2
 800912c:	07da      	lsls	r2, r3, #31
 800912e:	d402      	bmi.n	8009136 <__lo0bits+0x4e>
 8009130:	085b      	lsrs	r3, r3, #1
 8009132:	d006      	beq.n	8009142 <__lo0bits+0x5a>
 8009134:	3001      	adds	r0, #1
 8009136:	600b      	str	r3, [r1, #0]
 8009138:	4770      	bx	lr
 800913a:	4610      	mov	r0, r2
 800913c:	e7e9      	b.n	8009112 <__lo0bits+0x2a>
 800913e:	2000      	movs	r0, #0
 8009140:	4770      	bx	lr
 8009142:	2020      	movs	r0, #32
 8009144:	4770      	bx	lr

08009146 <__i2b>:
 8009146:	b510      	push	{r4, lr}
 8009148:	460c      	mov	r4, r1
 800914a:	2101      	movs	r1, #1
 800914c:	f7ff ff27 	bl	8008f9e <_Balloc>
 8009150:	2201      	movs	r2, #1
 8009152:	6144      	str	r4, [r0, #20]
 8009154:	6102      	str	r2, [r0, #16]
 8009156:	bd10      	pop	{r4, pc}

08009158 <__multiply>:
 8009158:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800915c:	4614      	mov	r4, r2
 800915e:	690a      	ldr	r2, [r1, #16]
 8009160:	6923      	ldr	r3, [r4, #16]
 8009162:	429a      	cmp	r2, r3
 8009164:	bfb8      	it	lt
 8009166:	460b      	movlt	r3, r1
 8009168:	4688      	mov	r8, r1
 800916a:	bfbc      	itt	lt
 800916c:	46a0      	movlt	r8, r4
 800916e:	461c      	movlt	r4, r3
 8009170:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009174:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009178:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800917c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009180:	eb07 0609 	add.w	r6, r7, r9
 8009184:	42b3      	cmp	r3, r6
 8009186:	bfb8      	it	lt
 8009188:	3101      	addlt	r1, #1
 800918a:	f7ff ff08 	bl	8008f9e <_Balloc>
 800918e:	f100 0514 	add.w	r5, r0, #20
 8009192:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8009196:	462b      	mov	r3, r5
 8009198:	2200      	movs	r2, #0
 800919a:	4573      	cmp	r3, lr
 800919c:	d316      	bcc.n	80091cc <__multiply+0x74>
 800919e:	f104 0214 	add.w	r2, r4, #20
 80091a2:	f108 0114 	add.w	r1, r8, #20
 80091a6:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80091aa:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80091ae:	9300      	str	r3, [sp, #0]
 80091b0:	9b00      	ldr	r3, [sp, #0]
 80091b2:	9201      	str	r2, [sp, #4]
 80091b4:	4293      	cmp	r3, r2
 80091b6:	d80c      	bhi.n	80091d2 <__multiply+0x7a>
 80091b8:	2e00      	cmp	r6, #0
 80091ba:	dd03      	ble.n	80091c4 <__multiply+0x6c>
 80091bc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d05d      	beq.n	8009280 <__multiply+0x128>
 80091c4:	6106      	str	r6, [r0, #16]
 80091c6:	b003      	add	sp, #12
 80091c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091cc:	f843 2b04 	str.w	r2, [r3], #4
 80091d0:	e7e3      	b.n	800919a <__multiply+0x42>
 80091d2:	f8b2 b000 	ldrh.w	fp, [r2]
 80091d6:	f1bb 0f00 	cmp.w	fp, #0
 80091da:	d023      	beq.n	8009224 <__multiply+0xcc>
 80091dc:	4689      	mov	r9, r1
 80091de:	46ac      	mov	ip, r5
 80091e0:	f04f 0800 	mov.w	r8, #0
 80091e4:	f859 4b04 	ldr.w	r4, [r9], #4
 80091e8:	f8dc a000 	ldr.w	sl, [ip]
 80091ec:	b2a3      	uxth	r3, r4
 80091ee:	fa1f fa8a 	uxth.w	sl, sl
 80091f2:	fb0b a303 	mla	r3, fp, r3, sl
 80091f6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80091fa:	f8dc 4000 	ldr.w	r4, [ip]
 80091fe:	4443      	add	r3, r8
 8009200:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009204:	fb0b 840a 	mla	r4, fp, sl, r8
 8009208:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800920c:	46e2      	mov	sl, ip
 800920e:	b29b      	uxth	r3, r3
 8009210:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009214:	454f      	cmp	r7, r9
 8009216:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800921a:	f84a 3b04 	str.w	r3, [sl], #4
 800921e:	d82b      	bhi.n	8009278 <__multiply+0x120>
 8009220:	f8cc 8004 	str.w	r8, [ip, #4]
 8009224:	9b01      	ldr	r3, [sp, #4]
 8009226:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800922a:	3204      	adds	r2, #4
 800922c:	f1ba 0f00 	cmp.w	sl, #0
 8009230:	d020      	beq.n	8009274 <__multiply+0x11c>
 8009232:	682b      	ldr	r3, [r5, #0]
 8009234:	4689      	mov	r9, r1
 8009236:	46a8      	mov	r8, r5
 8009238:	f04f 0b00 	mov.w	fp, #0
 800923c:	f8b9 c000 	ldrh.w	ip, [r9]
 8009240:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8009244:	fb0a 440c 	mla	r4, sl, ip, r4
 8009248:	445c      	add	r4, fp
 800924a:	46c4      	mov	ip, r8
 800924c:	b29b      	uxth	r3, r3
 800924e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009252:	f84c 3b04 	str.w	r3, [ip], #4
 8009256:	f859 3b04 	ldr.w	r3, [r9], #4
 800925a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800925e:	0c1b      	lsrs	r3, r3, #16
 8009260:	fb0a b303 	mla	r3, sl, r3, fp
 8009264:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009268:	454f      	cmp	r7, r9
 800926a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800926e:	d805      	bhi.n	800927c <__multiply+0x124>
 8009270:	f8c8 3004 	str.w	r3, [r8, #4]
 8009274:	3504      	adds	r5, #4
 8009276:	e79b      	b.n	80091b0 <__multiply+0x58>
 8009278:	46d4      	mov	ip, sl
 800927a:	e7b3      	b.n	80091e4 <__multiply+0x8c>
 800927c:	46e0      	mov	r8, ip
 800927e:	e7dd      	b.n	800923c <__multiply+0xe4>
 8009280:	3e01      	subs	r6, #1
 8009282:	e799      	b.n	80091b8 <__multiply+0x60>

08009284 <__pow5mult>:
 8009284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009288:	4615      	mov	r5, r2
 800928a:	f012 0203 	ands.w	r2, r2, #3
 800928e:	4606      	mov	r6, r0
 8009290:	460f      	mov	r7, r1
 8009292:	d007      	beq.n	80092a4 <__pow5mult+0x20>
 8009294:	3a01      	subs	r2, #1
 8009296:	4c21      	ldr	r4, [pc, #132]	; (800931c <__pow5mult+0x98>)
 8009298:	2300      	movs	r3, #0
 800929a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800929e:	f7ff fec9 	bl	8009034 <__multadd>
 80092a2:	4607      	mov	r7, r0
 80092a4:	10ad      	asrs	r5, r5, #2
 80092a6:	d035      	beq.n	8009314 <__pow5mult+0x90>
 80092a8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80092aa:	b93c      	cbnz	r4, 80092bc <__pow5mult+0x38>
 80092ac:	2010      	movs	r0, #16
 80092ae:	f7ff fe63 	bl	8008f78 <malloc>
 80092b2:	6270      	str	r0, [r6, #36]	; 0x24
 80092b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80092b8:	6004      	str	r4, [r0, #0]
 80092ba:	60c4      	str	r4, [r0, #12]
 80092bc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80092c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80092c4:	b94c      	cbnz	r4, 80092da <__pow5mult+0x56>
 80092c6:	f240 2171 	movw	r1, #625	; 0x271
 80092ca:	4630      	mov	r0, r6
 80092cc:	f7ff ff3b 	bl	8009146 <__i2b>
 80092d0:	2300      	movs	r3, #0
 80092d2:	f8c8 0008 	str.w	r0, [r8, #8]
 80092d6:	4604      	mov	r4, r0
 80092d8:	6003      	str	r3, [r0, #0]
 80092da:	f04f 0800 	mov.w	r8, #0
 80092de:	07eb      	lsls	r3, r5, #31
 80092e0:	d50a      	bpl.n	80092f8 <__pow5mult+0x74>
 80092e2:	4639      	mov	r1, r7
 80092e4:	4622      	mov	r2, r4
 80092e6:	4630      	mov	r0, r6
 80092e8:	f7ff ff36 	bl	8009158 <__multiply>
 80092ec:	4639      	mov	r1, r7
 80092ee:	4681      	mov	r9, r0
 80092f0:	4630      	mov	r0, r6
 80092f2:	f7ff fe88 	bl	8009006 <_Bfree>
 80092f6:	464f      	mov	r7, r9
 80092f8:	106d      	asrs	r5, r5, #1
 80092fa:	d00b      	beq.n	8009314 <__pow5mult+0x90>
 80092fc:	6820      	ldr	r0, [r4, #0]
 80092fe:	b938      	cbnz	r0, 8009310 <__pow5mult+0x8c>
 8009300:	4622      	mov	r2, r4
 8009302:	4621      	mov	r1, r4
 8009304:	4630      	mov	r0, r6
 8009306:	f7ff ff27 	bl	8009158 <__multiply>
 800930a:	6020      	str	r0, [r4, #0]
 800930c:	f8c0 8000 	str.w	r8, [r0]
 8009310:	4604      	mov	r4, r0
 8009312:	e7e4      	b.n	80092de <__pow5mult+0x5a>
 8009314:	4638      	mov	r0, r7
 8009316:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800931a:	bf00      	nop
 800931c:	0800aa80 	.word	0x0800aa80

08009320 <__lshift>:
 8009320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009324:	460c      	mov	r4, r1
 8009326:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800932a:	6923      	ldr	r3, [r4, #16]
 800932c:	6849      	ldr	r1, [r1, #4]
 800932e:	eb0a 0903 	add.w	r9, sl, r3
 8009332:	68a3      	ldr	r3, [r4, #8]
 8009334:	4607      	mov	r7, r0
 8009336:	4616      	mov	r6, r2
 8009338:	f109 0501 	add.w	r5, r9, #1
 800933c:	42ab      	cmp	r3, r5
 800933e:	db32      	blt.n	80093a6 <__lshift+0x86>
 8009340:	4638      	mov	r0, r7
 8009342:	f7ff fe2c 	bl	8008f9e <_Balloc>
 8009346:	2300      	movs	r3, #0
 8009348:	4680      	mov	r8, r0
 800934a:	f100 0114 	add.w	r1, r0, #20
 800934e:	461a      	mov	r2, r3
 8009350:	4553      	cmp	r3, sl
 8009352:	db2b      	blt.n	80093ac <__lshift+0x8c>
 8009354:	6920      	ldr	r0, [r4, #16]
 8009356:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800935a:	f104 0314 	add.w	r3, r4, #20
 800935e:	f016 021f 	ands.w	r2, r6, #31
 8009362:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009366:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800936a:	d025      	beq.n	80093b8 <__lshift+0x98>
 800936c:	f1c2 0e20 	rsb	lr, r2, #32
 8009370:	2000      	movs	r0, #0
 8009372:	681e      	ldr	r6, [r3, #0]
 8009374:	468a      	mov	sl, r1
 8009376:	4096      	lsls	r6, r2
 8009378:	4330      	orrs	r0, r6
 800937a:	f84a 0b04 	str.w	r0, [sl], #4
 800937e:	f853 0b04 	ldr.w	r0, [r3], #4
 8009382:	459c      	cmp	ip, r3
 8009384:	fa20 f00e 	lsr.w	r0, r0, lr
 8009388:	d814      	bhi.n	80093b4 <__lshift+0x94>
 800938a:	6048      	str	r0, [r1, #4]
 800938c:	b108      	cbz	r0, 8009392 <__lshift+0x72>
 800938e:	f109 0502 	add.w	r5, r9, #2
 8009392:	3d01      	subs	r5, #1
 8009394:	4638      	mov	r0, r7
 8009396:	f8c8 5010 	str.w	r5, [r8, #16]
 800939a:	4621      	mov	r1, r4
 800939c:	f7ff fe33 	bl	8009006 <_Bfree>
 80093a0:	4640      	mov	r0, r8
 80093a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093a6:	3101      	adds	r1, #1
 80093a8:	005b      	lsls	r3, r3, #1
 80093aa:	e7c7      	b.n	800933c <__lshift+0x1c>
 80093ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80093b0:	3301      	adds	r3, #1
 80093b2:	e7cd      	b.n	8009350 <__lshift+0x30>
 80093b4:	4651      	mov	r1, sl
 80093b6:	e7dc      	b.n	8009372 <__lshift+0x52>
 80093b8:	3904      	subs	r1, #4
 80093ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80093be:	f841 2f04 	str.w	r2, [r1, #4]!
 80093c2:	459c      	cmp	ip, r3
 80093c4:	d8f9      	bhi.n	80093ba <__lshift+0x9a>
 80093c6:	e7e4      	b.n	8009392 <__lshift+0x72>

080093c8 <__mcmp>:
 80093c8:	6903      	ldr	r3, [r0, #16]
 80093ca:	690a      	ldr	r2, [r1, #16]
 80093cc:	1a9b      	subs	r3, r3, r2
 80093ce:	b530      	push	{r4, r5, lr}
 80093d0:	d10c      	bne.n	80093ec <__mcmp+0x24>
 80093d2:	0092      	lsls	r2, r2, #2
 80093d4:	3014      	adds	r0, #20
 80093d6:	3114      	adds	r1, #20
 80093d8:	1884      	adds	r4, r0, r2
 80093da:	4411      	add	r1, r2
 80093dc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80093e0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80093e4:	4295      	cmp	r5, r2
 80093e6:	d003      	beq.n	80093f0 <__mcmp+0x28>
 80093e8:	d305      	bcc.n	80093f6 <__mcmp+0x2e>
 80093ea:	2301      	movs	r3, #1
 80093ec:	4618      	mov	r0, r3
 80093ee:	bd30      	pop	{r4, r5, pc}
 80093f0:	42a0      	cmp	r0, r4
 80093f2:	d3f3      	bcc.n	80093dc <__mcmp+0x14>
 80093f4:	e7fa      	b.n	80093ec <__mcmp+0x24>
 80093f6:	f04f 33ff 	mov.w	r3, #4294967295
 80093fa:	e7f7      	b.n	80093ec <__mcmp+0x24>

080093fc <__mdiff>:
 80093fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009400:	460d      	mov	r5, r1
 8009402:	4607      	mov	r7, r0
 8009404:	4611      	mov	r1, r2
 8009406:	4628      	mov	r0, r5
 8009408:	4614      	mov	r4, r2
 800940a:	f7ff ffdd 	bl	80093c8 <__mcmp>
 800940e:	1e06      	subs	r6, r0, #0
 8009410:	d108      	bne.n	8009424 <__mdiff+0x28>
 8009412:	4631      	mov	r1, r6
 8009414:	4638      	mov	r0, r7
 8009416:	f7ff fdc2 	bl	8008f9e <_Balloc>
 800941a:	2301      	movs	r3, #1
 800941c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009424:	bfa4      	itt	ge
 8009426:	4623      	movge	r3, r4
 8009428:	462c      	movge	r4, r5
 800942a:	4638      	mov	r0, r7
 800942c:	6861      	ldr	r1, [r4, #4]
 800942e:	bfa6      	itte	ge
 8009430:	461d      	movge	r5, r3
 8009432:	2600      	movge	r6, #0
 8009434:	2601      	movlt	r6, #1
 8009436:	f7ff fdb2 	bl	8008f9e <_Balloc>
 800943a:	692b      	ldr	r3, [r5, #16]
 800943c:	60c6      	str	r6, [r0, #12]
 800943e:	6926      	ldr	r6, [r4, #16]
 8009440:	f105 0914 	add.w	r9, r5, #20
 8009444:	f104 0214 	add.w	r2, r4, #20
 8009448:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800944c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009450:	f100 0514 	add.w	r5, r0, #20
 8009454:	f04f 0e00 	mov.w	lr, #0
 8009458:	f852 ab04 	ldr.w	sl, [r2], #4
 800945c:	f859 4b04 	ldr.w	r4, [r9], #4
 8009460:	fa1e f18a 	uxtah	r1, lr, sl
 8009464:	b2a3      	uxth	r3, r4
 8009466:	1ac9      	subs	r1, r1, r3
 8009468:	0c23      	lsrs	r3, r4, #16
 800946a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800946e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009472:	b289      	uxth	r1, r1
 8009474:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009478:	45c8      	cmp	r8, r9
 800947a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800947e:	4694      	mov	ip, r2
 8009480:	f845 3b04 	str.w	r3, [r5], #4
 8009484:	d8e8      	bhi.n	8009458 <__mdiff+0x5c>
 8009486:	45bc      	cmp	ip, r7
 8009488:	d304      	bcc.n	8009494 <__mdiff+0x98>
 800948a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800948e:	b183      	cbz	r3, 80094b2 <__mdiff+0xb6>
 8009490:	6106      	str	r6, [r0, #16]
 8009492:	e7c5      	b.n	8009420 <__mdiff+0x24>
 8009494:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009498:	fa1e f381 	uxtah	r3, lr, r1
 800949c:	141a      	asrs	r2, r3, #16
 800949e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80094a2:	b29b      	uxth	r3, r3
 80094a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80094a8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80094ac:	f845 3b04 	str.w	r3, [r5], #4
 80094b0:	e7e9      	b.n	8009486 <__mdiff+0x8a>
 80094b2:	3e01      	subs	r6, #1
 80094b4:	e7e9      	b.n	800948a <__mdiff+0x8e>

080094b6 <__d2b>:
 80094b6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80094ba:	460e      	mov	r6, r1
 80094bc:	2101      	movs	r1, #1
 80094be:	ec59 8b10 	vmov	r8, r9, d0
 80094c2:	4615      	mov	r5, r2
 80094c4:	f7ff fd6b 	bl	8008f9e <_Balloc>
 80094c8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80094cc:	4607      	mov	r7, r0
 80094ce:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80094d2:	bb34      	cbnz	r4, 8009522 <__d2b+0x6c>
 80094d4:	9301      	str	r3, [sp, #4]
 80094d6:	f1b8 0300 	subs.w	r3, r8, #0
 80094da:	d027      	beq.n	800952c <__d2b+0x76>
 80094dc:	a802      	add	r0, sp, #8
 80094de:	f840 3d08 	str.w	r3, [r0, #-8]!
 80094e2:	f7ff fe01 	bl	80090e8 <__lo0bits>
 80094e6:	9900      	ldr	r1, [sp, #0]
 80094e8:	b1f0      	cbz	r0, 8009528 <__d2b+0x72>
 80094ea:	9a01      	ldr	r2, [sp, #4]
 80094ec:	f1c0 0320 	rsb	r3, r0, #32
 80094f0:	fa02 f303 	lsl.w	r3, r2, r3
 80094f4:	430b      	orrs	r3, r1
 80094f6:	40c2      	lsrs	r2, r0
 80094f8:	617b      	str	r3, [r7, #20]
 80094fa:	9201      	str	r2, [sp, #4]
 80094fc:	9b01      	ldr	r3, [sp, #4]
 80094fe:	61bb      	str	r3, [r7, #24]
 8009500:	2b00      	cmp	r3, #0
 8009502:	bf14      	ite	ne
 8009504:	2102      	movne	r1, #2
 8009506:	2101      	moveq	r1, #1
 8009508:	6139      	str	r1, [r7, #16]
 800950a:	b1c4      	cbz	r4, 800953e <__d2b+0x88>
 800950c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009510:	4404      	add	r4, r0
 8009512:	6034      	str	r4, [r6, #0]
 8009514:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009518:	6028      	str	r0, [r5, #0]
 800951a:	4638      	mov	r0, r7
 800951c:	b003      	add	sp, #12
 800951e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009522:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009526:	e7d5      	b.n	80094d4 <__d2b+0x1e>
 8009528:	6179      	str	r1, [r7, #20]
 800952a:	e7e7      	b.n	80094fc <__d2b+0x46>
 800952c:	a801      	add	r0, sp, #4
 800952e:	f7ff fddb 	bl	80090e8 <__lo0bits>
 8009532:	9b01      	ldr	r3, [sp, #4]
 8009534:	617b      	str	r3, [r7, #20]
 8009536:	2101      	movs	r1, #1
 8009538:	6139      	str	r1, [r7, #16]
 800953a:	3020      	adds	r0, #32
 800953c:	e7e5      	b.n	800950a <__d2b+0x54>
 800953e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009542:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009546:	6030      	str	r0, [r6, #0]
 8009548:	6918      	ldr	r0, [r3, #16]
 800954a:	f7ff fdae 	bl	80090aa <__hi0bits>
 800954e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009552:	e7e1      	b.n	8009518 <__d2b+0x62>

08009554 <_calloc_r>:
 8009554:	b538      	push	{r3, r4, r5, lr}
 8009556:	fb02 f401 	mul.w	r4, r2, r1
 800955a:	4621      	mov	r1, r4
 800955c:	f000 f856 	bl	800960c <_malloc_r>
 8009560:	4605      	mov	r5, r0
 8009562:	b118      	cbz	r0, 800956c <_calloc_r+0x18>
 8009564:	4622      	mov	r2, r4
 8009566:	2100      	movs	r1, #0
 8009568:	f7fd fe7e 	bl	8007268 <memset>
 800956c:	4628      	mov	r0, r5
 800956e:	bd38      	pop	{r3, r4, r5, pc}

08009570 <_free_r>:
 8009570:	b538      	push	{r3, r4, r5, lr}
 8009572:	4605      	mov	r5, r0
 8009574:	2900      	cmp	r1, #0
 8009576:	d045      	beq.n	8009604 <_free_r+0x94>
 8009578:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800957c:	1f0c      	subs	r4, r1, #4
 800957e:	2b00      	cmp	r3, #0
 8009580:	bfb8      	it	lt
 8009582:	18e4      	addlt	r4, r4, r3
 8009584:	f000 fa98 	bl	8009ab8 <__malloc_lock>
 8009588:	4a1f      	ldr	r2, [pc, #124]	; (8009608 <_free_r+0x98>)
 800958a:	6813      	ldr	r3, [r2, #0]
 800958c:	4610      	mov	r0, r2
 800958e:	b933      	cbnz	r3, 800959e <_free_r+0x2e>
 8009590:	6063      	str	r3, [r4, #4]
 8009592:	6014      	str	r4, [r2, #0]
 8009594:	4628      	mov	r0, r5
 8009596:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800959a:	f000 ba8e 	b.w	8009aba <__malloc_unlock>
 800959e:	42a3      	cmp	r3, r4
 80095a0:	d90c      	bls.n	80095bc <_free_r+0x4c>
 80095a2:	6821      	ldr	r1, [r4, #0]
 80095a4:	1862      	adds	r2, r4, r1
 80095a6:	4293      	cmp	r3, r2
 80095a8:	bf04      	itt	eq
 80095aa:	681a      	ldreq	r2, [r3, #0]
 80095ac:	685b      	ldreq	r3, [r3, #4]
 80095ae:	6063      	str	r3, [r4, #4]
 80095b0:	bf04      	itt	eq
 80095b2:	1852      	addeq	r2, r2, r1
 80095b4:	6022      	streq	r2, [r4, #0]
 80095b6:	6004      	str	r4, [r0, #0]
 80095b8:	e7ec      	b.n	8009594 <_free_r+0x24>
 80095ba:	4613      	mov	r3, r2
 80095bc:	685a      	ldr	r2, [r3, #4]
 80095be:	b10a      	cbz	r2, 80095c4 <_free_r+0x54>
 80095c0:	42a2      	cmp	r2, r4
 80095c2:	d9fa      	bls.n	80095ba <_free_r+0x4a>
 80095c4:	6819      	ldr	r1, [r3, #0]
 80095c6:	1858      	adds	r0, r3, r1
 80095c8:	42a0      	cmp	r0, r4
 80095ca:	d10b      	bne.n	80095e4 <_free_r+0x74>
 80095cc:	6820      	ldr	r0, [r4, #0]
 80095ce:	4401      	add	r1, r0
 80095d0:	1858      	adds	r0, r3, r1
 80095d2:	4282      	cmp	r2, r0
 80095d4:	6019      	str	r1, [r3, #0]
 80095d6:	d1dd      	bne.n	8009594 <_free_r+0x24>
 80095d8:	6810      	ldr	r0, [r2, #0]
 80095da:	6852      	ldr	r2, [r2, #4]
 80095dc:	605a      	str	r2, [r3, #4]
 80095de:	4401      	add	r1, r0
 80095e0:	6019      	str	r1, [r3, #0]
 80095e2:	e7d7      	b.n	8009594 <_free_r+0x24>
 80095e4:	d902      	bls.n	80095ec <_free_r+0x7c>
 80095e6:	230c      	movs	r3, #12
 80095e8:	602b      	str	r3, [r5, #0]
 80095ea:	e7d3      	b.n	8009594 <_free_r+0x24>
 80095ec:	6820      	ldr	r0, [r4, #0]
 80095ee:	1821      	adds	r1, r4, r0
 80095f0:	428a      	cmp	r2, r1
 80095f2:	bf04      	itt	eq
 80095f4:	6811      	ldreq	r1, [r2, #0]
 80095f6:	6852      	ldreq	r2, [r2, #4]
 80095f8:	6062      	str	r2, [r4, #4]
 80095fa:	bf04      	itt	eq
 80095fc:	1809      	addeq	r1, r1, r0
 80095fe:	6021      	streq	r1, [r4, #0]
 8009600:	605c      	str	r4, [r3, #4]
 8009602:	e7c7      	b.n	8009594 <_free_r+0x24>
 8009604:	bd38      	pop	{r3, r4, r5, pc}
 8009606:	bf00      	nop
 8009608:	20000244 	.word	0x20000244

0800960c <_malloc_r>:
 800960c:	b570      	push	{r4, r5, r6, lr}
 800960e:	1ccd      	adds	r5, r1, #3
 8009610:	f025 0503 	bic.w	r5, r5, #3
 8009614:	3508      	adds	r5, #8
 8009616:	2d0c      	cmp	r5, #12
 8009618:	bf38      	it	cc
 800961a:	250c      	movcc	r5, #12
 800961c:	2d00      	cmp	r5, #0
 800961e:	4606      	mov	r6, r0
 8009620:	db01      	blt.n	8009626 <_malloc_r+0x1a>
 8009622:	42a9      	cmp	r1, r5
 8009624:	d903      	bls.n	800962e <_malloc_r+0x22>
 8009626:	230c      	movs	r3, #12
 8009628:	6033      	str	r3, [r6, #0]
 800962a:	2000      	movs	r0, #0
 800962c:	bd70      	pop	{r4, r5, r6, pc}
 800962e:	f000 fa43 	bl	8009ab8 <__malloc_lock>
 8009632:	4a21      	ldr	r2, [pc, #132]	; (80096b8 <_malloc_r+0xac>)
 8009634:	6814      	ldr	r4, [r2, #0]
 8009636:	4621      	mov	r1, r4
 8009638:	b991      	cbnz	r1, 8009660 <_malloc_r+0x54>
 800963a:	4c20      	ldr	r4, [pc, #128]	; (80096bc <_malloc_r+0xb0>)
 800963c:	6823      	ldr	r3, [r4, #0]
 800963e:	b91b      	cbnz	r3, 8009648 <_malloc_r+0x3c>
 8009640:	4630      	mov	r0, r6
 8009642:	f000 f97d 	bl	8009940 <_sbrk_r>
 8009646:	6020      	str	r0, [r4, #0]
 8009648:	4629      	mov	r1, r5
 800964a:	4630      	mov	r0, r6
 800964c:	f000 f978 	bl	8009940 <_sbrk_r>
 8009650:	1c43      	adds	r3, r0, #1
 8009652:	d124      	bne.n	800969e <_malloc_r+0x92>
 8009654:	230c      	movs	r3, #12
 8009656:	6033      	str	r3, [r6, #0]
 8009658:	4630      	mov	r0, r6
 800965a:	f000 fa2e 	bl	8009aba <__malloc_unlock>
 800965e:	e7e4      	b.n	800962a <_malloc_r+0x1e>
 8009660:	680b      	ldr	r3, [r1, #0]
 8009662:	1b5b      	subs	r3, r3, r5
 8009664:	d418      	bmi.n	8009698 <_malloc_r+0x8c>
 8009666:	2b0b      	cmp	r3, #11
 8009668:	d90f      	bls.n	800968a <_malloc_r+0x7e>
 800966a:	600b      	str	r3, [r1, #0]
 800966c:	50cd      	str	r5, [r1, r3]
 800966e:	18cc      	adds	r4, r1, r3
 8009670:	4630      	mov	r0, r6
 8009672:	f000 fa22 	bl	8009aba <__malloc_unlock>
 8009676:	f104 000b 	add.w	r0, r4, #11
 800967a:	1d23      	adds	r3, r4, #4
 800967c:	f020 0007 	bic.w	r0, r0, #7
 8009680:	1ac3      	subs	r3, r0, r3
 8009682:	d0d3      	beq.n	800962c <_malloc_r+0x20>
 8009684:	425a      	negs	r2, r3
 8009686:	50e2      	str	r2, [r4, r3]
 8009688:	e7d0      	b.n	800962c <_malloc_r+0x20>
 800968a:	428c      	cmp	r4, r1
 800968c:	684b      	ldr	r3, [r1, #4]
 800968e:	bf16      	itet	ne
 8009690:	6063      	strne	r3, [r4, #4]
 8009692:	6013      	streq	r3, [r2, #0]
 8009694:	460c      	movne	r4, r1
 8009696:	e7eb      	b.n	8009670 <_malloc_r+0x64>
 8009698:	460c      	mov	r4, r1
 800969a:	6849      	ldr	r1, [r1, #4]
 800969c:	e7cc      	b.n	8009638 <_malloc_r+0x2c>
 800969e:	1cc4      	adds	r4, r0, #3
 80096a0:	f024 0403 	bic.w	r4, r4, #3
 80096a4:	42a0      	cmp	r0, r4
 80096a6:	d005      	beq.n	80096b4 <_malloc_r+0xa8>
 80096a8:	1a21      	subs	r1, r4, r0
 80096aa:	4630      	mov	r0, r6
 80096ac:	f000 f948 	bl	8009940 <_sbrk_r>
 80096b0:	3001      	adds	r0, #1
 80096b2:	d0cf      	beq.n	8009654 <_malloc_r+0x48>
 80096b4:	6025      	str	r5, [r4, #0]
 80096b6:	e7db      	b.n	8009670 <_malloc_r+0x64>
 80096b8:	20000244 	.word	0x20000244
 80096bc:	20000248 	.word	0x20000248

080096c0 <__sfputc_r>:
 80096c0:	6893      	ldr	r3, [r2, #8]
 80096c2:	3b01      	subs	r3, #1
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	b410      	push	{r4}
 80096c8:	6093      	str	r3, [r2, #8]
 80096ca:	da08      	bge.n	80096de <__sfputc_r+0x1e>
 80096cc:	6994      	ldr	r4, [r2, #24]
 80096ce:	42a3      	cmp	r3, r4
 80096d0:	db01      	blt.n	80096d6 <__sfputc_r+0x16>
 80096d2:	290a      	cmp	r1, #10
 80096d4:	d103      	bne.n	80096de <__sfputc_r+0x1e>
 80096d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80096da:	f7fe bb5b 	b.w	8007d94 <__swbuf_r>
 80096de:	6813      	ldr	r3, [r2, #0]
 80096e0:	1c58      	adds	r0, r3, #1
 80096e2:	6010      	str	r0, [r2, #0]
 80096e4:	7019      	strb	r1, [r3, #0]
 80096e6:	4608      	mov	r0, r1
 80096e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80096ec:	4770      	bx	lr

080096ee <__sfputs_r>:
 80096ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096f0:	4606      	mov	r6, r0
 80096f2:	460f      	mov	r7, r1
 80096f4:	4614      	mov	r4, r2
 80096f6:	18d5      	adds	r5, r2, r3
 80096f8:	42ac      	cmp	r4, r5
 80096fa:	d101      	bne.n	8009700 <__sfputs_r+0x12>
 80096fc:	2000      	movs	r0, #0
 80096fe:	e007      	b.n	8009710 <__sfputs_r+0x22>
 8009700:	463a      	mov	r2, r7
 8009702:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009706:	4630      	mov	r0, r6
 8009708:	f7ff ffda 	bl	80096c0 <__sfputc_r>
 800970c:	1c43      	adds	r3, r0, #1
 800970e:	d1f3      	bne.n	80096f8 <__sfputs_r+0xa>
 8009710:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009714 <_vfiprintf_r>:
 8009714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009718:	460c      	mov	r4, r1
 800971a:	b09d      	sub	sp, #116	; 0x74
 800971c:	4617      	mov	r7, r2
 800971e:	461d      	mov	r5, r3
 8009720:	4606      	mov	r6, r0
 8009722:	b118      	cbz	r0, 800972c <_vfiprintf_r+0x18>
 8009724:	6983      	ldr	r3, [r0, #24]
 8009726:	b90b      	cbnz	r3, 800972c <_vfiprintf_r+0x18>
 8009728:	f7ff fb2a 	bl	8008d80 <__sinit>
 800972c:	4b7c      	ldr	r3, [pc, #496]	; (8009920 <_vfiprintf_r+0x20c>)
 800972e:	429c      	cmp	r4, r3
 8009730:	d158      	bne.n	80097e4 <_vfiprintf_r+0xd0>
 8009732:	6874      	ldr	r4, [r6, #4]
 8009734:	89a3      	ldrh	r3, [r4, #12]
 8009736:	0718      	lsls	r0, r3, #28
 8009738:	d55e      	bpl.n	80097f8 <_vfiprintf_r+0xe4>
 800973a:	6923      	ldr	r3, [r4, #16]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d05b      	beq.n	80097f8 <_vfiprintf_r+0xe4>
 8009740:	2300      	movs	r3, #0
 8009742:	9309      	str	r3, [sp, #36]	; 0x24
 8009744:	2320      	movs	r3, #32
 8009746:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800974a:	2330      	movs	r3, #48	; 0x30
 800974c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009750:	9503      	str	r5, [sp, #12]
 8009752:	f04f 0b01 	mov.w	fp, #1
 8009756:	46b8      	mov	r8, r7
 8009758:	4645      	mov	r5, r8
 800975a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800975e:	b10b      	cbz	r3, 8009764 <_vfiprintf_r+0x50>
 8009760:	2b25      	cmp	r3, #37	; 0x25
 8009762:	d154      	bne.n	800980e <_vfiprintf_r+0xfa>
 8009764:	ebb8 0a07 	subs.w	sl, r8, r7
 8009768:	d00b      	beq.n	8009782 <_vfiprintf_r+0x6e>
 800976a:	4653      	mov	r3, sl
 800976c:	463a      	mov	r2, r7
 800976e:	4621      	mov	r1, r4
 8009770:	4630      	mov	r0, r6
 8009772:	f7ff ffbc 	bl	80096ee <__sfputs_r>
 8009776:	3001      	adds	r0, #1
 8009778:	f000 80c2 	beq.w	8009900 <_vfiprintf_r+0x1ec>
 800977c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800977e:	4453      	add	r3, sl
 8009780:	9309      	str	r3, [sp, #36]	; 0x24
 8009782:	f898 3000 	ldrb.w	r3, [r8]
 8009786:	2b00      	cmp	r3, #0
 8009788:	f000 80ba 	beq.w	8009900 <_vfiprintf_r+0x1ec>
 800978c:	2300      	movs	r3, #0
 800978e:	f04f 32ff 	mov.w	r2, #4294967295
 8009792:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009796:	9304      	str	r3, [sp, #16]
 8009798:	9307      	str	r3, [sp, #28]
 800979a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800979e:	931a      	str	r3, [sp, #104]	; 0x68
 80097a0:	46a8      	mov	r8, r5
 80097a2:	2205      	movs	r2, #5
 80097a4:	f818 1b01 	ldrb.w	r1, [r8], #1
 80097a8:	485e      	ldr	r0, [pc, #376]	; (8009924 <_vfiprintf_r+0x210>)
 80097aa:	f7f6 fd19 	bl	80001e0 <memchr>
 80097ae:	9b04      	ldr	r3, [sp, #16]
 80097b0:	bb78      	cbnz	r0, 8009812 <_vfiprintf_r+0xfe>
 80097b2:	06d9      	lsls	r1, r3, #27
 80097b4:	bf44      	itt	mi
 80097b6:	2220      	movmi	r2, #32
 80097b8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80097bc:	071a      	lsls	r2, r3, #28
 80097be:	bf44      	itt	mi
 80097c0:	222b      	movmi	r2, #43	; 0x2b
 80097c2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80097c6:	782a      	ldrb	r2, [r5, #0]
 80097c8:	2a2a      	cmp	r2, #42	; 0x2a
 80097ca:	d02a      	beq.n	8009822 <_vfiprintf_r+0x10e>
 80097cc:	9a07      	ldr	r2, [sp, #28]
 80097ce:	46a8      	mov	r8, r5
 80097d0:	2000      	movs	r0, #0
 80097d2:	250a      	movs	r5, #10
 80097d4:	4641      	mov	r1, r8
 80097d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097da:	3b30      	subs	r3, #48	; 0x30
 80097dc:	2b09      	cmp	r3, #9
 80097de:	d969      	bls.n	80098b4 <_vfiprintf_r+0x1a0>
 80097e0:	b360      	cbz	r0, 800983c <_vfiprintf_r+0x128>
 80097e2:	e024      	b.n	800982e <_vfiprintf_r+0x11a>
 80097e4:	4b50      	ldr	r3, [pc, #320]	; (8009928 <_vfiprintf_r+0x214>)
 80097e6:	429c      	cmp	r4, r3
 80097e8:	d101      	bne.n	80097ee <_vfiprintf_r+0xda>
 80097ea:	68b4      	ldr	r4, [r6, #8]
 80097ec:	e7a2      	b.n	8009734 <_vfiprintf_r+0x20>
 80097ee:	4b4f      	ldr	r3, [pc, #316]	; (800992c <_vfiprintf_r+0x218>)
 80097f0:	429c      	cmp	r4, r3
 80097f2:	bf08      	it	eq
 80097f4:	68f4      	ldreq	r4, [r6, #12]
 80097f6:	e79d      	b.n	8009734 <_vfiprintf_r+0x20>
 80097f8:	4621      	mov	r1, r4
 80097fa:	4630      	mov	r0, r6
 80097fc:	f7fe fb1c 	bl	8007e38 <__swsetup_r>
 8009800:	2800      	cmp	r0, #0
 8009802:	d09d      	beq.n	8009740 <_vfiprintf_r+0x2c>
 8009804:	f04f 30ff 	mov.w	r0, #4294967295
 8009808:	b01d      	add	sp, #116	; 0x74
 800980a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800980e:	46a8      	mov	r8, r5
 8009810:	e7a2      	b.n	8009758 <_vfiprintf_r+0x44>
 8009812:	4a44      	ldr	r2, [pc, #272]	; (8009924 <_vfiprintf_r+0x210>)
 8009814:	1a80      	subs	r0, r0, r2
 8009816:	fa0b f000 	lsl.w	r0, fp, r0
 800981a:	4318      	orrs	r0, r3
 800981c:	9004      	str	r0, [sp, #16]
 800981e:	4645      	mov	r5, r8
 8009820:	e7be      	b.n	80097a0 <_vfiprintf_r+0x8c>
 8009822:	9a03      	ldr	r2, [sp, #12]
 8009824:	1d11      	adds	r1, r2, #4
 8009826:	6812      	ldr	r2, [r2, #0]
 8009828:	9103      	str	r1, [sp, #12]
 800982a:	2a00      	cmp	r2, #0
 800982c:	db01      	blt.n	8009832 <_vfiprintf_r+0x11e>
 800982e:	9207      	str	r2, [sp, #28]
 8009830:	e004      	b.n	800983c <_vfiprintf_r+0x128>
 8009832:	4252      	negs	r2, r2
 8009834:	f043 0302 	orr.w	r3, r3, #2
 8009838:	9207      	str	r2, [sp, #28]
 800983a:	9304      	str	r3, [sp, #16]
 800983c:	f898 3000 	ldrb.w	r3, [r8]
 8009840:	2b2e      	cmp	r3, #46	; 0x2e
 8009842:	d10e      	bne.n	8009862 <_vfiprintf_r+0x14e>
 8009844:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009848:	2b2a      	cmp	r3, #42	; 0x2a
 800984a:	d138      	bne.n	80098be <_vfiprintf_r+0x1aa>
 800984c:	9b03      	ldr	r3, [sp, #12]
 800984e:	1d1a      	adds	r2, r3, #4
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	9203      	str	r2, [sp, #12]
 8009854:	2b00      	cmp	r3, #0
 8009856:	bfb8      	it	lt
 8009858:	f04f 33ff 	movlt.w	r3, #4294967295
 800985c:	f108 0802 	add.w	r8, r8, #2
 8009860:	9305      	str	r3, [sp, #20]
 8009862:	4d33      	ldr	r5, [pc, #204]	; (8009930 <_vfiprintf_r+0x21c>)
 8009864:	f898 1000 	ldrb.w	r1, [r8]
 8009868:	2203      	movs	r2, #3
 800986a:	4628      	mov	r0, r5
 800986c:	f7f6 fcb8 	bl	80001e0 <memchr>
 8009870:	b140      	cbz	r0, 8009884 <_vfiprintf_r+0x170>
 8009872:	2340      	movs	r3, #64	; 0x40
 8009874:	1b40      	subs	r0, r0, r5
 8009876:	fa03 f000 	lsl.w	r0, r3, r0
 800987a:	9b04      	ldr	r3, [sp, #16]
 800987c:	4303      	orrs	r3, r0
 800987e:	f108 0801 	add.w	r8, r8, #1
 8009882:	9304      	str	r3, [sp, #16]
 8009884:	f898 1000 	ldrb.w	r1, [r8]
 8009888:	482a      	ldr	r0, [pc, #168]	; (8009934 <_vfiprintf_r+0x220>)
 800988a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800988e:	2206      	movs	r2, #6
 8009890:	f108 0701 	add.w	r7, r8, #1
 8009894:	f7f6 fca4 	bl	80001e0 <memchr>
 8009898:	2800      	cmp	r0, #0
 800989a:	d037      	beq.n	800990c <_vfiprintf_r+0x1f8>
 800989c:	4b26      	ldr	r3, [pc, #152]	; (8009938 <_vfiprintf_r+0x224>)
 800989e:	bb1b      	cbnz	r3, 80098e8 <_vfiprintf_r+0x1d4>
 80098a0:	9b03      	ldr	r3, [sp, #12]
 80098a2:	3307      	adds	r3, #7
 80098a4:	f023 0307 	bic.w	r3, r3, #7
 80098a8:	3308      	adds	r3, #8
 80098aa:	9303      	str	r3, [sp, #12]
 80098ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098ae:	444b      	add	r3, r9
 80098b0:	9309      	str	r3, [sp, #36]	; 0x24
 80098b2:	e750      	b.n	8009756 <_vfiprintf_r+0x42>
 80098b4:	fb05 3202 	mla	r2, r5, r2, r3
 80098b8:	2001      	movs	r0, #1
 80098ba:	4688      	mov	r8, r1
 80098bc:	e78a      	b.n	80097d4 <_vfiprintf_r+0xc0>
 80098be:	2300      	movs	r3, #0
 80098c0:	f108 0801 	add.w	r8, r8, #1
 80098c4:	9305      	str	r3, [sp, #20]
 80098c6:	4619      	mov	r1, r3
 80098c8:	250a      	movs	r5, #10
 80098ca:	4640      	mov	r0, r8
 80098cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80098d0:	3a30      	subs	r2, #48	; 0x30
 80098d2:	2a09      	cmp	r2, #9
 80098d4:	d903      	bls.n	80098de <_vfiprintf_r+0x1ca>
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d0c3      	beq.n	8009862 <_vfiprintf_r+0x14e>
 80098da:	9105      	str	r1, [sp, #20]
 80098dc:	e7c1      	b.n	8009862 <_vfiprintf_r+0x14e>
 80098de:	fb05 2101 	mla	r1, r5, r1, r2
 80098e2:	2301      	movs	r3, #1
 80098e4:	4680      	mov	r8, r0
 80098e6:	e7f0      	b.n	80098ca <_vfiprintf_r+0x1b6>
 80098e8:	ab03      	add	r3, sp, #12
 80098ea:	9300      	str	r3, [sp, #0]
 80098ec:	4622      	mov	r2, r4
 80098ee:	4b13      	ldr	r3, [pc, #76]	; (800993c <_vfiprintf_r+0x228>)
 80098f0:	a904      	add	r1, sp, #16
 80098f2:	4630      	mov	r0, r6
 80098f4:	f7fd fd54 	bl	80073a0 <_printf_float>
 80098f8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80098fc:	4681      	mov	r9, r0
 80098fe:	d1d5      	bne.n	80098ac <_vfiprintf_r+0x198>
 8009900:	89a3      	ldrh	r3, [r4, #12]
 8009902:	065b      	lsls	r3, r3, #25
 8009904:	f53f af7e 	bmi.w	8009804 <_vfiprintf_r+0xf0>
 8009908:	9809      	ldr	r0, [sp, #36]	; 0x24
 800990a:	e77d      	b.n	8009808 <_vfiprintf_r+0xf4>
 800990c:	ab03      	add	r3, sp, #12
 800990e:	9300      	str	r3, [sp, #0]
 8009910:	4622      	mov	r2, r4
 8009912:	4b0a      	ldr	r3, [pc, #40]	; (800993c <_vfiprintf_r+0x228>)
 8009914:	a904      	add	r1, sp, #16
 8009916:	4630      	mov	r0, r6
 8009918:	f7fd fff8 	bl	800790c <_printf_i>
 800991c:	e7ec      	b.n	80098f8 <_vfiprintf_r+0x1e4>
 800991e:	bf00      	nop
 8009920:	0800a950 	.word	0x0800a950
 8009924:	0800aa8c 	.word	0x0800aa8c
 8009928:	0800a970 	.word	0x0800a970
 800992c:	0800a930 	.word	0x0800a930
 8009930:	0800aa92 	.word	0x0800aa92
 8009934:	0800aa96 	.word	0x0800aa96
 8009938:	080073a1 	.word	0x080073a1
 800993c:	080096ef 	.word	0x080096ef

08009940 <_sbrk_r>:
 8009940:	b538      	push	{r3, r4, r5, lr}
 8009942:	4c06      	ldr	r4, [pc, #24]	; (800995c <_sbrk_r+0x1c>)
 8009944:	2300      	movs	r3, #0
 8009946:	4605      	mov	r5, r0
 8009948:	4608      	mov	r0, r1
 800994a:	6023      	str	r3, [r4, #0]
 800994c:	f7f8 fe40 	bl	80025d0 <_sbrk>
 8009950:	1c43      	adds	r3, r0, #1
 8009952:	d102      	bne.n	800995a <_sbrk_r+0x1a>
 8009954:	6823      	ldr	r3, [r4, #0]
 8009956:	b103      	cbz	r3, 800995a <_sbrk_r+0x1a>
 8009958:	602b      	str	r3, [r5, #0]
 800995a:	bd38      	pop	{r3, r4, r5, pc}
 800995c:	200039c8 	.word	0x200039c8

08009960 <__sread>:
 8009960:	b510      	push	{r4, lr}
 8009962:	460c      	mov	r4, r1
 8009964:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009968:	f000 f8a8 	bl	8009abc <_read_r>
 800996c:	2800      	cmp	r0, #0
 800996e:	bfab      	itete	ge
 8009970:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009972:	89a3      	ldrhlt	r3, [r4, #12]
 8009974:	181b      	addge	r3, r3, r0
 8009976:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800997a:	bfac      	ite	ge
 800997c:	6563      	strge	r3, [r4, #84]	; 0x54
 800997e:	81a3      	strhlt	r3, [r4, #12]
 8009980:	bd10      	pop	{r4, pc}

08009982 <__swrite>:
 8009982:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009986:	461f      	mov	r7, r3
 8009988:	898b      	ldrh	r3, [r1, #12]
 800998a:	05db      	lsls	r3, r3, #23
 800998c:	4605      	mov	r5, r0
 800998e:	460c      	mov	r4, r1
 8009990:	4616      	mov	r6, r2
 8009992:	d505      	bpl.n	80099a0 <__swrite+0x1e>
 8009994:	2302      	movs	r3, #2
 8009996:	2200      	movs	r2, #0
 8009998:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800999c:	f000 f868 	bl	8009a70 <_lseek_r>
 80099a0:	89a3      	ldrh	r3, [r4, #12]
 80099a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80099aa:	81a3      	strh	r3, [r4, #12]
 80099ac:	4632      	mov	r2, r6
 80099ae:	463b      	mov	r3, r7
 80099b0:	4628      	mov	r0, r5
 80099b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80099b6:	f000 b817 	b.w	80099e8 <_write_r>

080099ba <__sseek>:
 80099ba:	b510      	push	{r4, lr}
 80099bc:	460c      	mov	r4, r1
 80099be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099c2:	f000 f855 	bl	8009a70 <_lseek_r>
 80099c6:	1c43      	adds	r3, r0, #1
 80099c8:	89a3      	ldrh	r3, [r4, #12]
 80099ca:	bf15      	itete	ne
 80099cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80099ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80099d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80099d6:	81a3      	strheq	r3, [r4, #12]
 80099d8:	bf18      	it	ne
 80099da:	81a3      	strhne	r3, [r4, #12]
 80099dc:	bd10      	pop	{r4, pc}

080099de <__sclose>:
 80099de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099e2:	f000 b813 	b.w	8009a0c <_close_r>
	...

080099e8 <_write_r>:
 80099e8:	b538      	push	{r3, r4, r5, lr}
 80099ea:	4c07      	ldr	r4, [pc, #28]	; (8009a08 <_write_r+0x20>)
 80099ec:	4605      	mov	r5, r0
 80099ee:	4608      	mov	r0, r1
 80099f0:	4611      	mov	r1, r2
 80099f2:	2200      	movs	r2, #0
 80099f4:	6022      	str	r2, [r4, #0]
 80099f6:	461a      	mov	r2, r3
 80099f8:	f7f8 fd99 	bl	800252e <_write>
 80099fc:	1c43      	adds	r3, r0, #1
 80099fe:	d102      	bne.n	8009a06 <_write_r+0x1e>
 8009a00:	6823      	ldr	r3, [r4, #0]
 8009a02:	b103      	cbz	r3, 8009a06 <_write_r+0x1e>
 8009a04:	602b      	str	r3, [r5, #0]
 8009a06:	bd38      	pop	{r3, r4, r5, pc}
 8009a08:	200039c8 	.word	0x200039c8

08009a0c <_close_r>:
 8009a0c:	b538      	push	{r3, r4, r5, lr}
 8009a0e:	4c06      	ldr	r4, [pc, #24]	; (8009a28 <_close_r+0x1c>)
 8009a10:	2300      	movs	r3, #0
 8009a12:	4605      	mov	r5, r0
 8009a14:	4608      	mov	r0, r1
 8009a16:	6023      	str	r3, [r4, #0]
 8009a18:	f7f8 fda5 	bl	8002566 <_close>
 8009a1c:	1c43      	adds	r3, r0, #1
 8009a1e:	d102      	bne.n	8009a26 <_close_r+0x1a>
 8009a20:	6823      	ldr	r3, [r4, #0]
 8009a22:	b103      	cbz	r3, 8009a26 <_close_r+0x1a>
 8009a24:	602b      	str	r3, [r5, #0]
 8009a26:	bd38      	pop	{r3, r4, r5, pc}
 8009a28:	200039c8 	.word	0x200039c8

08009a2c <_fstat_r>:
 8009a2c:	b538      	push	{r3, r4, r5, lr}
 8009a2e:	4c07      	ldr	r4, [pc, #28]	; (8009a4c <_fstat_r+0x20>)
 8009a30:	2300      	movs	r3, #0
 8009a32:	4605      	mov	r5, r0
 8009a34:	4608      	mov	r0, r1
 8009a36:	4611      	mov	r1, r2
 8009a38:	6023      	str	r3, [r4, #0]
 8009a3a:	f7f8 fda0 	bl	800257e <_fstat>
 8009a3e:	1c43      	adds	r3, r0, #1
 8009a40:	d102      	bne.n	8009a48 <_fstat_r+0x1c>
 8009a42:	6823      	ldr	r3, [r4, #0]
 8009a44:	b103      	cbz	r3, 8009a48 <_fstat_r+0x1c>
 8009a46:	602b      	str	r3, [r5, #0]
 8009a48:	bd38      	pop	{r3, r4, r5, pc}
 8009a4a:	bf00      	nop
 8009a4c:	200039c8 	.word	0x200039c8

08009a50 <_isatty_r>:
 8009a50:	b538      	push	{r3, r4, r5, lr}
 8009a52:	4c06      	ldr	r4, [pc, #24]	; (8009a6c <_isatty_r+0x1c>)
 8009a54:	2300      	movs	r3, #0
 8009a56:	4605      	mov	r5, r0
 8009a58:	4608      	mov	r0, r1
 8009a5a:	6023      	str	r3, [r4, #0]
 8009a5c:	f7f8 fd9f 	bl	800259e <_isatty>
 8009a60:	1c43      	adds	r3, r0, #1
 8009a62:	d102      	bne.n	8009a6a <_isatty_r+0x1a>
 8009a64:	6823      	ldr	r3, [r4, #0]
 8009a66:	b103      	cbz	r3, 8009a6a <_isatty_r+0x1a>
 8009a68:	602b      	str	r3, [r5, #0]
 8009a6a:	bd38      	pop	{r3, r4, r5, pc}
 8009a6c:	200039c8 	.word	0x200039c8

08009a70 <_lseek_r>:
 8009a70:	b538      	push	{r3, r4, r5, lr}
 8009a72:	4c07      	ldr	r4, [pc, #28]	; (8009a90 <_lseek_r+0x20>)
 8009a74:	4605      	mov	r5, r0
 8009a76:	4608      	mov	r0, r1
 8009a78:	4611      	mov	r1, r2
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	6022      	str	r2, [r4, #0]
 8009a7e:	461a      	mov	r2, r3
 8009a80:	f7f8 fd98 	bl	80025b4 <_lseek>
 8009a84:	1c43      	adds	r3, r0, #1
 8009a86:	d102      	bne.n	8009a8e <_lseek_r+0x1e>
 8009a88:	6823      	ldr	r3, [r4, #0]
 8009a8a:	b103      	cbz	r3, 8009a8e <_lseek_r+0x1e>
 8009a8c:	602b      	str	r3, [r5, #0]
 8009a8e:	bd38      	pop	{r3, r4, r5, pc}
 8009a90:	200039c8 	.word	0x200039c8

08009a94 <__ascii_mbtowc>:
 8009a94:	b082      	sub	sp, #8
 8009a96:	b901      	cbnz	r1, 8009a9a <__ascii_mbtowc+0x6>
 8009a98:	a901      	add	r1, sp, #4
 8009a9a:	b142      	cbz	r2, 8009aae <__ascii_mbtowc+0x1a>
 8009a9c:	b14b      	cbz	r3, 8009ab2 <__ascii_mbtowc+0x1e>
 8009a9e:	7813      	ldrb	r3, [r2, #0]
 8009aa0:	600b      	str	r3, [r1, #0]
 8009aa2:	7812      	ldrb	r2, [r2, #0]
 8009aa4:	1c10      	adds	r0, r2, #0
 8009aa6:	bf18      	it	ne
 8009aa8:	2001      	movne	r0, #1
 8009aaa:	b002      	add	sp, #8
 8009aac:	4770      	bx	lr
 8009aae:	4610      	mov	r0, r2
 8009ab0:	e7fb      	b.n	8009aaa <__ascii_mbtowc+0x16>
 8009ab2:	f06f 0001 	mvn.w	r0, #1
 8009ab6:	e7f8      	b.n	8009aaa <__ascii_mbtowc+0x16>

08009ab8 <__malloc_lock>:
 8009ab8:	4770      	bx	lr

08009aba <__malloc_unlock>:
 8009aba:	4770      	bx	lr

08009abc <_read_r>:
 8009abc:	b538      	push	{r3, r4, r5, lr}
 8009abe:	4c07      	ldr	r4, [pc, #28]	; (8009adc <_read_r+0x20>)
 8009ac0:	4605      	mov	r5, r0
 8009ac2:	4608      	mov	r0, r1
 8009ac4:	4611      	mov	r1, r2
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	6022      	str	r2, [r4, #0]
 8009aca:	461a      	mov	r2, r3
 8009acc:	f7f8 fd12 	bl	80024f4 <_read>
 8009ad0:	1c43      	adds	r3, r0, #1
 8009ad2:	d102      	bne.n	8009ada <_read_r+0x1e>
 8009ad4:	6823      	ldr	r3, [r4, #0]
 8009ad6:	b103      	cbz	r3, 8009ada <_read_r+0x1e>
 8009ad8:	602b      	str	r3, [r5, #0]
 8009ada:	bd38      	pop	{r3, r4, r5, pc}
 8009adc:	200039c8 	.word	0x200039c8

08009ae0 <__ascii_wctomb>:
 8009ae0:	b149      	cbz	r1, 8009af6 <__ascii_wctomb+0x16>
 8009ae2:	2aff      	cmp	r2, #255	; 0xff
 8009ae4:	bf85      	ittet	hi
 8009ae6:	238a      	movhi	r3, #138	; 0x8a
 8009ae8:	6003      	strhi	r3, [r0, #0]
 8009aea:	700a      	strbls	r2, [r1, #0]
 8009aec:	f04f 30ff 	movhi.w	r0, #4294967295
 8009af0:	bf98      	it	ls
 8009af2:	2001      	movls	r0, #1
 8009af4:	4770      	bx	lr
 8009af6:	4608      	mov	r0, r1
 8009af8:	4770      	bx	lr
	...

08009afc <cosf>:
 8009afc:	ee10 3a10 	vmov	r3, s0
 8009b00:	b507      	push	{r0, r1, r2, lr}
 8009b02:	4a1c      	ldr	r2, [pc, #112]	; (8009b74 <cosf+0x78>)
 8009b04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009b08:	4293      	cmp	r3, r2
 8009b0a:	dc04      	bgt.n	8009b16 <cosf+0x1a>
 8009b0c:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8009b78 <cosf+0x7c>
 8009b10:	f000 fad8 	bl	800a0c4 <__kernel_cosf>
 8009b14:	e004      	b.n	8009b20 <cosf+0x24>
 8009b16:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009b1a:	db04      	blt.n	8009b26 <cosf+0x2a>
 8009b1c:	ee30 0a40 	vsub.f32	s0, s0, s0
 8009b20:	b003      	add	sp, #12
 8009b22:	f85d fb04 	ldr.w	pc, [sp], #4
 8009b26:	4668      	mov	r0, sp
 8009b28:	f000 f9a0 	bl	8009e6c <__ieee754_rem_pio2f>
 8009b2c:	f000 0003 	and.w	r0, r0, #3
 8009b30:	2801      	cmp	r0, #1
 8009b32:	d007      	beq.n	8009b44 <cosf+0x48>
 8009b34:	2802      	cmp	r0, #2
 8009b36:	d00e      	beq.n	8009b56 <cosf+0x5a>
 8009b38:	b9a0      	cbnz	r0, 8009b64 <cosf+0x68>
 8009b3a:	eddd 0a01 	vldr	s1, [sp, #4]
 8009b3e:	ed9d 0a00 	vldr	s0, [sp]
 8009b42:	e7e5      	b.n	8009b10 <cosf+0x14>
 8009b44:	eddd 0a01 	vldr	s1, [sp, #4]
 8009b48:	ed9d 0a00 	vldr	s0, [sp]
 8009b4c:	f000 fd9a 	bl	800a684 <__kernel_sinf>
 8009b50:	eeb1 0a40 	vneg.f32	s0, s0
 8009b54:	e7e4      	b.n	8009b20 <cosf+0x24>
 8009b56:	eddd 0a01 	vldr	s1, [sp, #4]
 8009b5a:	ed9d 0a00 	vldr	s0, [sp]
 8009b5e:	f000 fab1 	bl	800a0c4 <__kernel_cosf>
 8009b62:	e7f5      	b.n	8009b50 <cosf+0x54>
 8009b64:	2001      	movs	r0, #1
 8009b66:	eddd 0a01 	vldr	s1, [sp, #4]
 8009b6a:	ed9d 0a00 	vldr	s0, [sp]
 8009b6e:	f000 fd89 	bl	800a684 <__kernel_sinf>
 8009b72:	e7d5      	b.n	8009b20 <cosf+0x24>
 8009b74:	3f490fd8 	.word	0x3f490fd8
 8009b78:	00000000 	.word	0x00000000

08009b7c <fmaxf>:
 8009b7c:	b508      	push	{r3, lr}
 8009b7e:	ed2d 8b02 	vpush	{d8}
 8009b82:	eeb0 8a40 	vmov.f32	s16, s0
 8009b86:	eef0 8a60 	vmov.f32	s17, s1
 8009b8a:	f000 f82d 	bl	8009be8 <__fpclassifyf>
 8009b8e:	b148      	cbz	r0, 8009ba4 <fmaxf+0x28>
 8009b90:	eeb0 0a68 	vmov.f32	s0, s17
 8009b94:	f000 f828 	bl	8009be8 <__fpclassifyf>
 8009b98:	b130      	cbz	r0, 8009ba8 <fmaxf+0x2c>
 8009b9a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8009b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ba2:	dc01      	bgt.n	8009ba8 <fmaxf+0x2c>
 8009ba4:	eeb0 8a68 	vmov.f32	s16, s17
 8009ba8:	eeb0 0a48 	vmov.f32	s0, s16
 8009bac:	ecbd 8b02 	vpop	{d8}
 8009bb0:	bd08      	pop	{r3, pc}

08009bb2 <fminf>:
 8009bb2:	b508      	push	{r3, lr}
 8009bb4:	ed2d 8b02 	vpush	{d8}
 8009bb8:	eeb0 8a40 	vmov.f32	s16, s0
 8009bbc:	eef0 8a60 	vmov.f32	s17, s1
 8009bc0:	f000 f812 	bl	8009be8 <__fpclassifyf>
 8009bc4:	b148      	cbz	r0, 8009bda <fminf+0x28>
 8009bc6:	eeb0 0a68 	vmov.f32	s0, s17
 8009bca:	f000 f80d 	bl	8009be8 <__fpclassifyf>
 8009bce:	b130      	cbz	r0, 8009bde <fminf+0x2c>
 8009bd0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8009bd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bd8:	d401      	bmi.n	8009bde <fminf+0x2c>
 8009bda:	eeb0 8a68 	vmov.f32	s16, s17
 8009bde:	eeb0 0a48 	vmov.f32	s0, s16
 8009be2:	ecbd 8b02 	vpop	{d8}
 8009be6:	bd08      	pop	{r3, pc}

08009be8 <__fpclassifyf>:
 8009be8:	ee10 3a10 	vmov	r3, s0
 8009bec:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 8009bf0:	d00d      	beq.n	8009c0e <__fpclassifyf+0x26>
 8009bf2:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 8009bf6:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8009bfa:	d30a      	bcc.n	8009c12 <__fpclassifyf+0x2a>
 8009bfc:	4b07      	ldr	r3, [pc, #28]	; (8009c1c <__fpclassifyf+0x34>)
 8009bfe:	1e42      	subs	r2, r0, #1
 8009c00:	429a      	cmp	r2, r3
 8009c02:	d908      	bls.n	8009c16 <__fpclassifyf+0x2e>
 8009c04:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 8009c08:	4258      	negs	r0, r3
 8009c0a:	4158      	adcs	r0, r3
 8009c0c:	4770      	bx	lr
 8009c0e:	2002      	movs	r0, #2
 8009c10:	4770      	bx	lr
 8009c12:	2004      	movs	r0, #4
 8009c14:	4770      	bx	lr
 8009c16:	2003      	movs	r0, #3
 8009c18:	4770      	bx	lr
 8009c1a:	bf00      	nop
 8009c1c:	007ffffe 	.word	0x007ffffe

08009c20 <sinf>:
 8009c20:	ee10 3a10 	vmov	r3, s0
 8009c24:	b507      	push	{r0, r1, r2, lr}
 8009c26:	4a1d      	ldr	r2, [pc, #116]	; (8009c9c <sinf+0x7c>)
 8009c28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	dc05      	bgt.n	8009c3c <sinf+0x1c>
 8009c30:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8009ca0 <sinf+0x80>
 8009c34:	2000      	movs	r0, #0
 8009c36:	f000 fd25 	bl	800a684 <__kernel_sinf>
 8009c3a:	e004      	b.n	8009c46 <sinf+0x26>
 8009c3c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009c40:	db04      	blt.n	8009c4c <sinf+0x2c>
 8009c42:	ee30 0a40 	vsub.f32	s0, s0, s0
 8009c46:	b003      	add	sp, #12
 8009c48:	f85d fb04 	ldr.w	pc, [sp], #4
 8009c4c:	4668      	mov	r0, sp
 8009c4e:	f000 f90d 	bl	8009e6c <__ieee754_rem_pio2f>
 8009c52:	f000 0003 	and.w	r0, r0, #3
 8009c56:	2801      	cmp	r0, #1
 8009c58:	d008      	beq.n	8009c6c <sinf+0x4c>
 8009c5a:	2802      	cmp	r0, #2
 8009c5c:	d00d      	beq.n	8009c7a <sinf+0x5a>
 8009c5e:	b9b0      	cbnz	r0, 8009c8e <sinf+0x6e>
 8009c60:	2001      	movs	r0, #1
 8009c62:	eddd 0a01 	vldr	s1, [sp, #4]
 8009c66:	ed9d 0a00 	vldr	s0, [sp]
 8009c6a:	e7e4      	b.n	8009c36 <sinf+0x16>
 8009c6c:	eddd 0a01 	vldr	s1, [sp, #4]
 8009c70:	ed9d 0a00 	vldr	s0, [sp]
 8009c74:	f000 fa26 	bl	800a0c4 <__kernel_cosf>
 8009c78:	e7e5      	b.n	8009c46 <sinf+0x26>
 8009c7a:	2001      	movs	r0, #1
 8009c7c:	eddd 0a01 	vldr	s1, [sp, #4]
 8009c80:	ed9d 0a00 	vldr	s0, [sp]
 8009c84:	f000 fcfe 	bl	800a684 <__kernel_sinf>
 8009c88:	eeb1 0a40 	vneg.f32	s0, s0
 8009c8c:	e7db      	b.n	8009c46 <sinf+0x26>
 8009c8e:	eddd 0a01 	vldr	s1, [sp, #4]
 8009c92:	ed9d 0a00 	vldr	s0, [sp]
 8009c96:	f000 fa15 	bl	800a0c4 <__kernel_cosf>
 8009c9a:	e7f5      	b.n	8009c88 <sinf+0x68>
 8009c9c:	3f490fd8 	.word	0x3f490fd8
 8009ca0:	00000000 	.word	0x00000000

08009ca4 <fmodf>:
 8009ca4:	b5d0      	push	{r4, r6, r7, lr}
 8009ca6:	ed2d 8b02 	vpush	{d8}
 8009caa:	b08a      	sub	sp, #40	; 0x28
 8009cac:	eef0 8a40 	vmov.f32	s17, s0
 8009cb0:	eeb0 8a60 	vmov.f32	s16, s1
 8009cb4:	f000 f852 	bl	8009d5c <__ieee754_fmodf>
 8009cb8:	4b26      	ldr	r3, [pc, #152]	; (8009d54 <fmodf+0xb0>)
 8009cba:	f993 4000 	ldrsb.w	r4, [r3]
 8009cbe:	1c63      	adds	r3, r4, #1
 8009cc0:	d035      	beq.n	8009d2e <fmodf+0x8a>
 8009cc2:	eeb4 8a48 	vcmp.f32	s16, s16
 8009cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cca:	d630      	bvs.n	8009d2e <fmodf+0x8a>
 8009ccc:	eef4 8a68 	vcmp.f32	s17, s17
 8009cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cd4:	d62b      	bvs.n	8009d2e <fmodf+0x8a>
 8009cd6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8009cda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cde:	d126      	bne.n	8009d2e <fmodf+0x8a>
 8009ce0:	2301      	movs	r3, #1
 8009ce2:	9300      	str	r3, [sp, #0]
 8009ce4:	4b1c      	ldr	r3, [pc, #112]	; (8009d58 <fmodf+0xb4>)
 8009ce6:	9301      	str	r3, [sp, #4]
 8009ce8:	ee18 0a90 	vmov	r0, s17
 8009cec:	2300      	movs	r3, #0
 8009cee:	9308      	str	r3, [sp, #32]
 8009cf0:	f7f6 fc2a 	bl	8000548 <__aeabi_f2d>
 8009cf4:	4606      	mov	r6, r0
 8009cf6:	460f      	mov	r7, r1
 8009cf8:	ee18 0a10 	vmov	r0, s16
 8009cfc:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8009d00:	f7f6 fc22 	bl	8000548 <__aeabi_f2d>
 8009d04:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009d08:	b9ac      	cbnz	r4, 8009d36 <fmodf+0x92>
 8009d0a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009d0e:	4668      	mov	r0, sp
 8009d10:	f000 fd00 	bl	800a714 <matherr>
 8009d14:	b1c8      	cbz	r0, 8009d4a <fmodf+0xa6>
 8009d16:	9b08      	ldr	r3, [sp, #32]
 8009d18:	b11b      	cbz	r3, 8009d22 <fmodf+0x7e>
 8009d1a:	f7fd fa7b 	bl	8007214 <__errno>
 8009d1e:	9b08      	ldr	r3, [sp, #32]
 8009d20:	6003      	str	r3, [r0, #0]
 8009d22:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009d26:	f7f6 ff3f 	bl	8000ba8 <__aeabi_d2f>
 8009d2a:	ee00 0a10 	vmov	s0, r0
 8009d2e:	b00a      	add	sp, #40	; 0x28
 8009d30:	ecbd 8b02 	vpop	{d8}
 8009d34:	bdd0      	pop	{r4, r6, r7, pc}
 8009d36:	2200      	movs	r2, #0
 8009d38:	2300      	movs	r3, #0
 8009d3a:	4610      	mov	r0, r2
 8009d3c:	4619      	mov	r1, r3
 8009d3e:	f7f6 fd85 	bl	800084c <__aeabi_ddiv>
 8009d42:	2c02      	cmp	r4, #2
 8009d44:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009d48:	d1e1      	bne.n	8009d0e <fmodf+0x6a>
 8009d4a:	f7fd fa63 	bl	8007214 <__errno>
 8009d4e:	2321      	movs	r3, #33	; 0x21
 8009d50:	6003      	str	r3, [r0, #0]
 8009d52:	e7e0      	b.n	8009d16 <fmodf+0x72>
 8009d54:	200001e4 	.word	0x200001e4
 8009d58:	0800aba8 	.word	0x0800aba8

08009d5c <__ieee754_fmodf>:
 8009d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d5e:	ee10 6a90 	vmov	r6, s1
 8009d62:	f036 4500 	bics.w	r5, r6, #2147483648	; 0x80000000
 8009d66:	ee10 3a10 	vmov	r3, s0
 8009d6a:	d009      	beq.n	8009d80 <__ieee754_fmodf+0x24>
 8009d6c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009d70:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8009d74:	ee10 7a10 	vmov	r7, s0
 8009d78:	da02      	bge.n	8009d80 <__ieee754_fmodf+0x24>
 8009d7a:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8009d7e:	dd0a      	ble.n	8009d96 <__ieee754_fmodf+0x3a>
 8009d80:	ee07 3a90 	vmov	s15, r3
 8009d84:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8009d88:	eec0 7aa0 	vdiv.f32	s15, s1, s1
 8009d8c:	ee17 3a90 	vmov	r3, s15
 8009d90:	ee00 3a10 	vmov	s0, r3
 8009d94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d96:	42a9      	cmp	r1, r5
 8009d98:	dbfa      	blt.n	8009d90 <__ieee754_fmodf+0x34>
 8009d9a:	f003 4400 	and.w	r4, r3, #2147483648	; 0x80000000
 8009d9e:	d105      	bne.n	8009dac <__ieee754_fmodf+0x50>
 8009da0:	4a30      	ldr	r2, [pc, #192]	; (8009e64 <__ieee754_fmodf+0x108>)
 8009da2:	0fe3      	lsrs	r3, r4, #31
 8009da4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	e7f1      	b.n	8009d90 <__ieee754_fmodf+0x34>
 8009dac:	4b2e      	ldr	r3, [pc, #184]	; (8009e68 <__ieee754_fmodf+0x10c>)
 8009dae:	4299      	cmp	r1, r3
 8009db0:	dc3e      	bgt.n	8009e30 <__ieee754_fmodf+0xd4>
 8009db2:	020a      	lsls	r2, r1, #8
 8009db4:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 8009db8:	2a00      	cmp	r2, #0
 8009dba:	dc36      	bgt.n	8009e2a <__ieee754_fmodf+0xce>
 8009dbc:	429d      	cmp	r5, r3
 8009dbe:	dc3a      	bgt.n	8009e36 <__ieee754_fmodf+0xda>
 8009dc0:	022b      	lsls	r3, r5, #8
 8009dc2:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 8009dc6:	005b      	lsls	r3, r3, #1
 8009dc8:	f102 32ff 	add.w	r2, r2, #4294967295
 8009dcc:	d5fb      	bpl.n	8009dc6 <__ieee754_fmodf+0x6a>
 8009dce:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 8009dd2:	bfbb      	ittet	lt
 8009dd4:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 8009dd8:	1a1b      	sublt	r3, r3, r0
 8009dda:	f3c7 0116 	ubfxge	r1, r7, #0, #23
 8009dde:	4099      	lsllt	r1, r3
 8009de0:	bfa8      	it	ge
 8009de2:	f441 0100 	orrge.w	r1, r1, #8388608	; 0x800000
 8009de6:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 8009dea:	bfb5      	itete	lt
 8009dec:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 8009df0:	f3c6 0516 	ubfxge	r5, r6, #0, #23
 8009df4:	1a9b      	sublt	r3, r3, r2
 8009df6:	f445 0500 	orrge.w	r5, r5, #8388608	; 0x800000
 8009dfa:	bfb8      	it	lt
 8009dfc:	409d      	lsllt	r5, r3
 8009dfe:	1a80      	subs	r0, r0, r2
 8009e00:	1b4b      	subs	r3, r1, r5
 8009e02:	b9d8      	cbnz	r0, 8009e3c <__ieee754_fmodf+0xe0>
 8009e04:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 8009e08:	bf28      	it	cs
 8009e0a:	460b      	movcs	r3, r1
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d0c7      	beq.n	8009da0 <__ieee754_fmodf+0x44>
 8009e10:	4915      	ldr	r1, [pc, #84]	; (8009e68 <__ieee754_fmodf+0x10c>)
 8009e12:	428b      	cmp	r3, r1
 8009e14:	dd1a      	ble.n	8009e4c <__ieee754_fmodf+0xf0>
 8009e16:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 8009e1a:	db1a      	blt.n	8009e52 <__ieee754_fmodf+0xf6>
 8009e1c:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8009e20:	4323      	orrs	r3, r4
 8009e22:	327f      	adds	r2, #127	; 0x7f
 8009e24:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8009e28:	e7b2      	b.n	8009d90 <__ieee754_fmodf+0x34>
 8009e2a:	3801      	subs	r0, #1
 8009e2c:	0052      	lsls	r2, r2, #1
 8009e2e:	e7c3      	b.n	8009db8 <__ieee754_fmodf+0x5c>
 8009e30:	15c8      	asrs	r0, r1, #23
 8009e32:	387f      	subs	r0, #127	; 0x7f
 8009e34:	e7c2      	b.n	8009dbc <__ieee754_fmodf+0x60>
 8009e36:	15ea      	asrs	r2, r5, #23
 8009e38:	3a7f      	subs	r2, #127	; 0x7f
 8009e3a:	e7c8      	b.n	8009dce <__ieee754_fmodf+0x72>
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	da02      	bge.n	8009e46 <__ieee754_fmodf+0xea>
 8009e40:	0049      	lsls	r1, r1, #1
 8009e42:	3801      	subs	r0, #1
 8009e44:	e7dc      	b.n	8009e00 <__ieee754_fmodf+0xa4>
 8009e46:	d0ab      	beq.n	8009da0 <__ieee754_fmodf+0x44>
 8009e48:	0059      	lsls	r1, r3, #1
 8009e4a:	e7fa      	b.n	8009e42 <__ieee754_fmodf+0xe6>
 8009e4c:	005b      	lsls	r3, r3, #1
 8009e4e:	3a01      	subs	r2, #1
 8009e50:	e7df      	b.n	8009e12 <__ieee754_fmodf+0xb6>
 8009e52:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009e56:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009e5a:	3282      	adds	r2, #130	; 0x82
 8009e5c:	4113      	asrs	r3, r2
 8009e5e:	4323      	orrs	r3, r4
 8009e60:	e796      	b.n	8009d90 <__ieee754_fmodf+0x34>
 8009e62:	bf00      	nop
 8009e64:	0800abb0 	.word	0x0800abb0
 8009e68:	007fffff 	.word	0x007fffff

08009e6c <__ieee754_rem_pio2f>:
 8009e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e6e:	ee10 6a10 	vmov	r6, s0
 8009e72:	4b86      	ldr	r3, [pc, #536]	; (800a08c <__ieee754_rem_pio2f+0x220>)
 8009e74:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8009e78:	429c      	cmp	r4, r3
 8009e7a:	b087      	sub	sp, #28
 8009e7c:	4605      	mov	r5, r0
 8009e7e:	dc05      	bgt.n	8009e8c <__ieee754_rem_pio2f+0x20>
 8009e80:	2300      	movs	r3, #0
 8009e82:	ed85 0a00 	vstr	s0, [r5]
 8009e86:	6043      	str	r3, [r0, #4]
 8009e88:	2000      	movs	r0, #0
 8009e8a:	e020      	b.n	8009ece <__ieee754_rem_pio2f+0x62>
 8009e8c:	4b80      	ldr	r3, [pc, #512]	; (800a090 <__ieee754_rem_pio2f+0x224>)
 8009e8e:	429c      	cmp	r4, r3
 8009e90:	dc38      	bgt.n	8009f04 <__ieee754_rem_pio2f+0x98>
 8009e92:	2e00      	cmp	r6, #0
 8009e94:	f024 040f 	bic.w	r4, r4, #15
 8009e98:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 800a094 <__ieee754_rem_pio2f+0x228>
 8009e9c:	4b7e      	ldr	r3, [pc, #504]	; (800a098 <__ieee754_rem_pio2f+0x22c>)
 8009e9e:	dd18      	ble.n	8009ed2 <__ieee754_rem_pio2f+0x66>
 8009ea0:	429c      	cmp	r4, r3
 8009ea2:	ee70 7a47 	vsub.f32	s15, s0, s14
 8009ea6:	bf09      	itett	eq
 8009ea8:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 800a09c <__ieee754_rem_pio2f+0x230>
 8009eac:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 800a0a0 <__ieee754_rem_pio2f+0x234>
 8009eb0:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8009eb4:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 800a0a4 <__ieee754_rem_pio2f+0x238>
 8009eb8:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8009ebc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009ec0:	edc0 6a00 	vstr	s13, [r0]
 8009ec4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009ec8:	edc0 7a01 	vstr	s15, [r0, #4]
 8009ecc:	2001      	movs	r0, #1
 8009ece:	b007      	add	sp, #28
 8009ed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ed2:	429c      	cmp	r4, r3
 8009ed4:	ee70 7a07 	vadd.f32	s15, s0, s14
 8009ed8:	bf09      	itett	eq
 8009eda:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 800a09c <__ieee754_rem_pio2f+0x230>
 8009ede:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 800a0a0 <__ieee754_rem_pio2f+0x234>
 8009ee2:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8009ee6:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 800a0a4 <__ieee754_rem_pio2f+0x238>
 8009eea:	ee77 6a87 	vadd.f32	s13, s15, s14
 8009eee:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009ef2:	edc0 6a00 	vstr	s13, [r0]
 8009ef6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009efa:	edc0 7a01 	vstr	s15, [r0, #4]
 8009efe:	f04f 30ff 	mov.w	r0, #4294967295
 8009f02:	e7e4      	b.n	8009ece <__ieee754_rem_pio2f+0x62>
 8009f04:	4b68      	ldr	r3, [pc, #416]	; (800a0a8 <__ieee754_rem_pio2f+0x23c>)
 8009f06:	429c      	cmp	r4, r3
 8009f08:	dc71      	bgt.n	8009fee <__ieee754_rem_pio2f+0x182>
 8009f0a:	f000 fc05 	bl	800a718 <fabsf>
 8009f0e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800a0ac <__ieee754_rem_pio2f+0x240>
 8009f12:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8009f16:	eee0 7a07 	vfma.f32	s15, s0, s14
 8009f1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009f1e:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8009f22:	ee17 0a90 	vmov	r0, s15
 8009f26:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800a094 <__ieee754_rem_pio2f+0x228>
 8009f2a:	eeb1 7a46 	vneg.f32	s14, s12
 8009f2e:	eea7 0a27 	vfma.f32	s0, s14, s15
 8009f32:	281f      	cmp	r0, #31
 8009f34:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800a0a0 <__ieee754_rem_pio2f+0x234>
 8009f38:	ee66 7a27 	vmul.f32	s15, s12, s15
 8009f3c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8009f40:	ee16 3a90 	vmov	r3, s13
 8009f44:	dc1c      	bgt.n	8009f80 <__ieee754_rem_pio2f+0x114>
 8009f46:	1e47      	subs	r7, r0, #1
 8009f48:	4959      	ldr	r1, [pc, #356]	; (800a0b0 <__ieee754_rem_pio2f+0x244>)
 8009f4a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8009f4e:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 8009f52:	428a      	cmp	r2, r1
 8009f54:	d014      	beq.n	8009f80 <__ieee754_rem_pio2f+0x114>
 8009f56:	602b      	str	r3, [r5, #0]
 8009f58:	ed95 7a00 	vldr	s14, [r5]
 8009f5c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8009f60:	2e00      	cmp	r6, #0
 8009f62:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009f66:	ed85 0a01 	vstr	s0, [r5, #4]
 8009f6a:	dab0      	bge.n	8009ece <__ieee754_rem_pio2f+0x62>
 8009f6c:	eeb1 7a47 	vneg.f32	s14, s14
 8009f70:	eeb1 0a40 	vneg.f32	s0, s0
 8009f74:	ed85 7a00 	vstr	s14, [r5]
 8009f78:	ed85 0a01 	vstr	s0, [r5, #4]
 8009f7c:	4240      	negs	r0, r0
 8009f7e:	e7a6      	b.n	8009ece <__ieee754_rem_pio2f+0x62>
 8009f80:	15e4      	asrs	r4, r4, #23
 8009f82:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8009f86:	1aa2      	subs	r2, r4, r2
 8009f88:	2a08      	cmp	r2, #8
 8009f8a:	dde4      	ble.n	8009f56 <__ieee754_rem_pio2f+0xea>
 8009f8c:	eddf 7a43 	vldr	s15, [pc, #268]	; 800a09c <__ieee754_rem_pio2f+0x230>
 8009f90:	eef0 6a40 	vmov.f32	s13, s0
 8009f94:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009f98:	ee30 0a66 	vsub.f32	s0, s0, s13
 8009f9c:	eea7 0a27 	vfma.f32	s0, s14, s15
 8009fa0:	eddf 7a40 	vldr	s15, [pc, #256]	; 800a0a4 <__ieee754_rem_pio2f+0x238>
 8009fa4:	ee96 0a27 	vfnms.f32	s0, s12, s15
 8009fa8:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8009fac:	eef0 7a40 	vmov.f32	s15, s0
 8009fb0:	ee15 3a90 	vmov	r3, s11
 8009fb4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8009fb8:	1aa4      	subs	r4, r4, r2
 8009fba:	2c19      	cmp	r4, #25
 8009fbc:	dc04      	bgt.n	8009fc8 <__ieee754_rem_pio2f+0x15c>
 8009fbe:	edc5 5a00 	vstr	s11, [r5]
 8009fc2:	eeb0 0a66 	vmov.f32	s0, s13
 8009fc6:	e7c7      	b.n	8009f58 <__ieee754_rem_pio2f+0xec>
 8009fc8:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800a0b4 <__ieee754_rem_pio2f+0x248>
 8009fcc:	eeb0 0a66 	vmov.f32	s0, s13
 8009fd0:	eea7 0a25 	vfma.f32	s0, s14, s11
 8009fd4:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8009fd8:	eee7 7a25 	vfma.f32	s15, s14, s11
 8009fdc:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800a0b8 <__ieee754_rem_pio2f+0x24c>
 8009fe0:	eed6 7a07 	vfnms.f32	s15, s12, s14
 8009fe4:	ee30 7a67 	vsub.f32	s14, s0, s15
 8009fe8:	ed85 7a00 	vstr	s14, [r5]
 8009fec:	e7b4      	b.n	8009f58 <__ieee754_rem_pio2f+0xec>
 8009fee:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8009ff2:	db06      	blt.n	800a002 <__ieee754_rem_pio2f+0x196>
 8009ff4:	ee70 7a40 	vsub.f32	s15, s0, s0
 8009ff8:	edc0 7a01 	vstr	s15, [r0, #4]
 8009ffc:	edc0 7a00 	vstr	s15, [r0]
 800a000:	e742      	b.n	8009e88 <__ieee754_rem_pio2f+0x1c>
 800a002:	15e2      	asrs	r2, r4, #23
 800a004:	3a86      	subs	r2, #134	; 0x86
 800a006:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 800a00a:	ee07 3a90 	vmov	s15, r3
 800a00e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800a012:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800a0bc <__ieee754_rem_pio2f+0x250>
 800a016:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a01a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a01e:	ed8d 7a03 	vstr	s14, [sp, #12]
 800a022:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a026:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800a02a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a02e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a032:	ed8d 7a04 	vstr	s14, [sp, #16]
 800a036:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a03a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a03e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a042:	edcd 7a05 	vstr	s15, [sp, #20]
 800a046:	d11e      	bne.n	800a086 <__ieee754_rem_pio2f+0x21a>
 800a048:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800a04c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a050:	bf0c      	ite	eq
 800a052:	2301      	moveq	r3, #1
 800a054:	2302      	movne	r3, #2
 800a056:	491a      	ldr	r1, [pc, #104]	; (800a0c0 <__ieee754_rem_pio2f+0x254>)
 800a058:	9101      	str	r1, [sp, #4]
 800a05a:	2102      	movs	r1, #2
 800a05c:	9100      	str	r1, [sp, #0]
 800a05e:	a803      	add	r0, sp, #12
 800a060:	4629      	mov	r1, r5
 800a062:	f000 f88d 	bl	800a180 <__kernel_rem_pio2f>
 800a066:	2e00      	cmp	r6, #0
 800a068:	f6bf af31 	bge.w	8009ece <__ieee754_rem_pio2f+0x62>
 800a06c:	edd5 7a00 	vldr	s15, [r5]
 800a070:	eef1 7a67 	vneg.f32	s15, s15
 800a074:	edc5 7a00 	vstr	s15, [r5]
 800a078:	edd5 7a01 	vldr	s15, [r5, #4]
 800a07c:	eef1 7a67 	vneg.f32	s15, s15
 800a080:	edc5 7a01 	vstr	s15, [r5, #4]
 800a084:	e77a      	b.n	8009f7c <__ieee754_rem_pio2f+0x110>
 800a086:	2303      	movs	r3, #3
 800a088:	e7e5      	b.n	800a056 <__ieee754_rem_pio2f+0x1ea>
 800a08a:	bf00      	nop
 800a08c:	3f490fd8 	.word	0x3f490fd8
 800a090:	4016cbe3 	.word	0x4016cbe3
 800a094:	3fc90f80 	.word	0x3fc90f80
 800a098:	3fc90fd0 	.word	0x3fc90fd0
 800a09c:	37354400 	.word	0x37354400
 800a0a0:	37354443 	.word	0x37354443
 800a0a4:	2e85a308 	.word	0x2e85a308
 800a0a8:	43490f80 	.word	0x43490f80
 800a0ac:	3f22f984 	.word	0x3f22f984
 800a0b0:	0800abb8 	.word	0x0800abb8
 800a0b4:	2e85a300 	.word	0x2e85a300
 800a0b8:	248d3132 	.word	0x248d3132
 800a0bc:	43800000 	.word	0x43800000
 800a0c0:	0800ac38 	.word	0x0800ac38

0800a0c4 <__kernel_cosf>:
 800a0c4:	ee10 3a10 	vmov	r3, s0
 800a0c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a0cc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800a0d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a0d4:	da05      	bge.n	800a0e2 <__kernel_cosf+0x1e>
 800a0d6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800a0da:	ee17 2a90 	vmov	r2, s15
 800a0de:	2a00      	cmp	r2, #0
 800a0e0:	d03b      	beq.n	800a15a <__kernel_cosf+0x96>
 800a0e2:	ee20 6a00 	vmul.f32	s12, s0, s0
 800a0e6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a0ea:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a160 <__kernel_cosf+0x9c>
 800a0ee:	4a1d      	ldr	r2, [pc, #116]	; (800a164 <__kernel_cosf+0xa0>)
 800a0f0:	ee66 7a07 	vmul.f32	s15, s12, s14
 800a0f4:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800a168 <__kernel_cosf+0xa4>
 800a0f8:	eea6 7a25 	vfma.f32	s14, s12, s11
 800a0fc:	4293      	cmp	r3, r2
 800a0fe:	eddf 5a1b 	vldr	s11, [pc, #108]	; 800a16c <__kernel_cosf+0xa8>
 800a102:	eee7 5a06 	vfma.f32	s11, s14, s12
 800a106:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800a170 <__kernel_cosf+0xac>
 800a10a:	eea5 7a86 	vfma.f32	s14, s11, s12
 800a10e:	eddf 5a19 	vldr	s11, [pc, #100]	; 800a174 <__kernel_cosf+0xb0>
 800a112:	eee7 5a06 	vfma.f32	s11, s14, s12
 800a116:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800a178 <__kernel_cosf+0xb4>
 800a11a:	eea5 7a86 	vfma.f32	s14, s11, s12
 800a11e:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 800a122:	ee27 7a06 	vmul.f32	s14, s14, s12
 800a126:	eee6 0a07 	vfma.f32	s1, s12, s14
 800a12a:	dc04      	bgt.n	800a136 <__kernel_cosf+0x72>
 800a12c:	ee77 0ae0 	vsub.f32	s1, s15, s1
 800a130:	ee36 0ae0 	vsub.f32	s0, s13, s1
 800a134:	4770      	bx	lr
 800a136:	4a11      	ldr	r2, [pc, #68]	; (800a17c <__kernel_cosf+0xb8>)
 800a138:	4293      	cmp	r3, r2
 800a13a:	bfda      	itte	le
 800a13c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800a140:	ee07 3a10 	vmovle	s14, r3
 800a144:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 800a148:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a14c:	ee36 0ac7 	vsub.f32	s0, s13, s14
 800a150:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800a154:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a158:	4770      	bx	lr
 800a15a:	eeb0 0a66 	vmov.f32	s0, s13
 800a15e:	4770      	bx	lr
 800a160:	ad47d74e 	.word	0xad47d74e
 800a164:	3e999999 	.word	0x3e999999
 800a168:	310f74f6 	.word	0x310f74f6
 800a16c:	b493f27c 	.word	0xb493f27c
 800a170:	37d00d01 	.word	0x37d00d01
 800a174:	bab60b61 	.word	0xbab60b61
 800a178:	3d2aaaab 	.word	0x3d2aaaab
 800a17c:	3f480000 	.word	0x3f480000

0800a180 <__kernel_rem_pio2f>:
 800a180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a184:	ed2d 8b04 	vpush	{d8-d9}
 800a188:	b0d7      	sub	sp, #348	; 0x15c
 800a18a:	469b      	mov	fp, r3
 800a18c:	460e      	mov	r6, r1
 800a18e:	4bbe      	ldr	r3, [pc, #760]	; (800a488 <__kernel_rem_pio2f+0x308>)
 800a190:	9964      	ldr	r1, [sp, #400]	; 0x190
 800a192:	9002      	str	r0, [sp, #8]
 800a194:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800a198:	9865      	ldr	r0, [sp, #404]	; 0x194
 800a19a:	ed9f 7abf 	vldr	s14, [pc, #764]	; 800a498 <__kernel_rem_pio2f+0x318>
 800a19e:	1ed1      	subs	r1, r2, #3
 800a1a0:	2308      	movs	r3, #8
 800a1a2:	fb91 f1f3 	sdiv	r1, r1, r3
 800a1a6:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800a1aa:	f10b 3aff 	add.w	sl, fp, #4294967295
 800a1ae:	1c4c      	adds	r4, r1, #1
 800a1b0:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 800a1b4:	eba1 050a 	sub.w	r5, r1, sl
 800a1b8:	aa1a      	add	r2, sp, #104	; 0x68
 800a1ba:	eb09 070a 	add.w	r7, r9, sl
 800a1be:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 800a1c2:	4696      	mov	lr, r2
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	42bb      	cmp	r3, r7
 800a1c8:	dd0f      	ble.n	800a1ea <__kernel_rem_pio2f+0x6a>
 800a1ca:	af42      	add	r7, sp, #264	; 0x108
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	454a      	cmp	r2, r9
 800a1d0:	dc27      	bgt.n	800a222 <__kernel_rem_pio2f+0xa2>
 800a1d2:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 800a1d6:	eb0b 0302 	add.w	r3, fp, r2
 800a1da:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 800a1de:	9d02      	ldr	r5, [sp, #8]
 800a1e0:	eddf 7aad 	vldr	s15, [pc, #692]	; 800a498 <__kernel_rem_pio2f+0x318>
 800a1e4:	f04f 0c00 	mov.w	ip, #0
 800a1e8:	e015      	b.n	800a216 <__kernel_rem_pio2f+0x96>
 800a1ea:	42dd      	cmn	r5, r3
 800a1ec:	bf5d      	ittte	pl
 800a1ee:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 800a1f2:	ee07 2a90 	vmovpl	s15, r2
 800a1f6:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800a1fa:	eef0 7a47 	vmovmi.f32	s15, s14
 800a1fe:	ecee 7a01 	vstmia	lr!, {s15}
 800a202:	3301      	adds	r3, #1
 800a204:	e7df      	b.n	800a1c6 <__kernel_rem_pio2f+0x46>
 800a206:	ecf5 6a01 	vldmia	r5!, {s13}
 800a20a:	ed33 7a01 	vldmdb	r3!, {s14}
 800a20e:	eee6 7a87 	vfma.f32	s15, s13, s14
 800a212:	f10c 0c01 	add.w	ip, ip, #1
 800a216:	45d4      	cmp	ip, sl
 800a218:	ddf5      	ble.n	800a206 <__kernel_rem_pio2f+0x86>
 800a21a:	ece7 7a01 	vstmia	r7!, {s15}
 800a21e:	3201      	adds	r2, #1
 800a220:	e7d5      	b.n	800a1ce <__kernel_rem_pio2f+0x4e>
 800a222:	ab06      	add	r3, sp, #24
 800a224:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800a228:	9304      	str	r3, [sp, #16]
 800a22a:	eddf 8a9a 	vldr	s17, [pc, #616]	; 800a494 <__kernel_rem_pio2f+0x314>
 800a22e:	ed9f 9a98 	vldr	s18, [pc, #608]	; 800a490 <__kernel_rem_pio2f+0x310>
 800a232:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800a236:	9303      	str	r3, [sp, #12]
 800a238:	464d      	mov	r5, r9
 800a23a:	ab56      	add	r3, sp, #344	; 0x158
 800a23c:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 800a240:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800a244:	3f01      	subs	r7, #1
 800a246:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 800a24a:	00bf      	lsls	r7, r7, #2
 800a24c:	ab56      	add	r3, sp, #344	; 0x158
 800a24e:	19da      	adds	r2, r3, r7
 800a250:	3a4c      	subs	r2, #76	; 0x4c
 800a252:	2300      	movs	r3, #0
 800a254:	1ae9      	subs	r1, r5, r3
 800a256:	2900      	cmp	r1, #0
 800a258:	dc4c      	bgt.n	800a2f4 <__kernel_rem_pio2f+0x174>
 800a25a:	4620      	mov	r0, r4
 800a25c:	f000 faa6 	bl	800a7ac <scalbnf>
 800a260:	eeb0 8a40 	vmov.f32	s16, s0
 800a264:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800a268:	ee28 0a00 	vmul.f32	s0, s16, s0
 800a26c:	f000 fa5c 	bl	800a728 <floorf>
 800a270:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800a274:	eea0 8a67 	vfms.f32	s16, s0, s15
 800a278:	2c00      	cmp	r4, #0
 800a27a:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800a27e:	edcd 7a01 	vstr	s15, [sp, #4]
 800a282:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a286:	ee38 8a67 	vsub.f32	s16, s16, s15
 800a28a:	dd48      	ble.n	800a31e <__kernel_rem_pio2f+0x19e>
 800a28c:	1e69      	subs	r1, r5, #1
 800a28e:	ab06      	add	r3, sp, #24
 800a290:	f1c4 0008 	rsb	r0, r4, #8
 800a294:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 800a298:	9a01      	ldr	r2, [sp, #4]
 800a29a:	fa4c f300 	asr.w	r3, ip, r0
 800a29e:	441a      	add	r2, r3
 800a2a0:	4083      	lsls	r3, r0
 800a2a2:	9201      	str	r2, [sp, #4]
 800a2a4:	ebac 0203 	sub.w	r2, ip, r3
 800a2a8:	ab06      	add	r3, sp, #24
 800a2aa:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800a2ae:	f1c4 0307 	rsb	r3, r4, #7
 800a2b2:	fa42 f803 	asr.w	r8, r2, r3
 800a2b6:	f1b8 0f00 	cmp.w	r8, #0
 800a2ba:	dd41      	ble.n	800a340 <__kernel_rem_pio2f+0x1c0>
 800a2bc:	9b01      	ldr	r3, [sp, #4]
 800a2be:	2000      	movs	r0, #0
 800a2c0:	3301      	adds	r3, #1
 800a2c2:	9301      	str	r3, [sp, #4]
 800a2c4:	4601      	mov	r1, r0
 800a2c6:	4285      	cmp	r5, r0
 800a2c8:	dc6d      	bgt.n	800a3a6 <__kernel_rem_pio2f+0x226>
 800a2ca:	2c00      	cmp	r4, #0
 800a2cc:	dd04      	ble.n	800a2d8 <__kernel_rem_pio2f+0x158>
 800a2ce:	2c01      	cmp	r4, #1
 800a2d0:	d07e      	beq.n	800a3d0 <__kernel_rem_pio2f+0x250>
 800a2d2:	2c02      	cmp	r4, #2
 800a2d4:	f000 8086 	beq.w	800a3e4 <__kernel_rem_pio2f+0x264>
 800a2d8:	f1b8 0f02 	cmp.w	r8, #2
 800a2dc:	d130      	bne.n	800a340 <__kernel_rem_pio2f+0x1c0>
 800a2de:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800a2e2:	ee30 8a48 	vsub.f32	s16, s0, s16
 800a2e6:	b359      	cbz	r1, 800a340 <__kernel_rem_pio2f+0x1c0>
 800a2e8:	4620      	mov	r0, r4
 800a2ea:	f000 fa5f 	bl	800a7ac <scalbnf>
 800a2ee:	ee38 8a40 	vsub.f32	s16, s16, s0
 800a2f2:	e025      	b.n	800a340 <__kernel_rem_pio2f+0x1c0>
 800a2f4:	ee60 7a28 	vmul.f32	s15, s0, s17
 800a2f8:	a806      	add	r0, sp, #24
 800a2fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a2fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a302:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800a306:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800a30a:	ee10 1a10 	vmov	r1, s0
 800a30e:	ed32 0a01 	vldmdb	r2!, {s0}
 800a312:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 800a316:	ee37 0a80 	vadd.f32	s0, s15, s0
 800a31a:	3301      	adds	r3, #1
 800a31c:	e79a      	b.n	800a254 <__kernel_rem_pio2f+0xd4>
 800a31e:	d106      	bne.n	800a32e <__kernel_rem_pio2f+0x1ae>
 800a320:	1e6b      	subs	r3, r5, #1
 800a322:	aa06      	add	r2, sp, #24
 800a324:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a328:	ea4f 2822 	mov.w	r8, r2, asr #8
 800a32c:	e7c3      	b.n	800a2b6 <__kernel_rem_pio2f+0x136>
 800a32e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800a332:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800a336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a33a:	da31      	bge.n	800a3a0 <__kernel_rem_pio2f+0x220>
 800a33c:	f04f 0800 	mov.w	r8, #0
 800a340:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800a344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a348:	f040 80a8 	bne.w	800a49c <__kernel_rem_pio2f+0x31c>
 800a34c:	1e6b      	subs	r3, r5, #1
 800a34e:	4618      	mov	r0, r3
 800a350:	2200      	movs	r2, #0
 800a352:	4548      	cmp	r0, r9
 800a354:	da4d      	bge.n	800a3f2 <__kernel_rem_pio2f+0x272>
 800a356:	2a00      	cmp	r2, #0
 800a358:	f000 8087 	beq.w	800a46a <__kernel_rem_pio2f+0x2ea>
 800a35c:	aa06      	add	r2, sp, #24
 800a35e:	3c08      	subs	r4, #8
 800a360:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a364:	2900      	cmp	r1, #0
 800a366:	f000 808d 	beq.w	800a484 <__kernel_rem_pio2f+0x304>
 800a36a:	4620      	mov	r0, r4
 800a36c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800a370:	9302      	str	r3, [sp, #8]
 800a372:	f000 fa1b 	bl	800a7ac <scalbnf>
 800a376:	9b02      	ldr	r3, [sp, #8]
 800a378:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800a494 <__kernel_rem_pio2f+0x314>
 800a37c:	0099      	lsls	r1, r3, #2
 800a37e:	aa42      	add	r2, sp, #264	; 0x108
 800a380:	1850      	adds	r0, r2, r1
 800a382:	1d05      	adds	r5, r0, #4
 800a384:	461c      	mov	r4, r3
 800a386:	2c00      	cmp	r4, #0
 800a388:	f280 80b8 	bge.w	800a4fc <__kernel_rem_pio2f+0x37c>
 800a38c:	2500      	movs	r5, #0
 800a38e:	1b5c      	subs	r4, r3, r5
 800a390:	2c00      	cmp	r4, #0
 800a392:	f2c0 80d8 	blt.w	800a546 <__kernel_rem_pio2f+0x3c6>
 800a396:	4f3d      	ldr	r7, [pc, #244]	; (800a48c <__kernel_rem_pio2f+0x30c>)
 800a398:	eddf 7a3f 	vldr	s15, [pc, #252]	; 800a498 <__kernel_rem_pio2f+0x318>
 800a39c:	2400      	movs	r4, #0
 800a39e:	e0c6      	b.n	800a52e <__kernel_rem_pio2f+0x3ae>
 800a3a0:	f04f 0802 	mov.w	r8, #2
 800a3a4:	e78a      	b.n	800a2bc <__kernel_rem_pio2f+0x13c>
 800a3a6:	ab06      	add	r3, sp, #24
 800a3a8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800a3ac:	b949      	cbnz	r1, 800a3c2 <__kernel_rem_pio2f+0x242>
 800a3ae:	b12b      	cbz	r3, 800a3bc <__kernel_rem_pio2f+0x23c>
 800a3b0:	aa06      	add	r2, sp, #24
 800a3b2:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800a3b6:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800a3ba:	2301      	movs	r3, #1
 800a3bc:	3001      	adds	r0, #1
 800a3be:	4619      	mov	r1, r3
 800a3c0:	e781      	b.n	800a2c6 <__kernel_rem_pio2f+0x146>
 800a3c2:	aa06      	add	r2, sp, #24
 800a3c4:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800a3c8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800a3cc:	460b      	mov	r3, r1
 800a3ce:	e7f5      	b.n	800a3bc <__kernel_rem_pio2f+0x23c>
 800a3d0:	1e68      	subs	r0, r5, #1
 800a3d2:	ab06      	add	r3, sp, #24
 800a3d4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800a3d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3dc:	aa06      	add	r2, sp, #24
 800a3de:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800a3e2:	e779      	b.n	800a2d8 <__kernel_rem_pio2f+0x158>
 800a3e4:	1e68      	subs	r0, r5, #1
 800a3e6:	ab06      	add	r3, sp, #24
 800a3e8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800a3ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a3f0:	e7f4      	b.n	800a3dc <__kernel_rem_pio2f+0x25c>
 800a3f2:	a906      	add	r1, sp, #24
 800a3f4:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800a3f8:	3801      	subs	r0, #1
 800a3fa:	430a      	orrs	r2, r1
 800a3fc:	e7a9      	b.n	800a352 <__kernel_rem_pio2f+0x1d2>
 800a3fe:	f10c 0c01 	add.w	ip, ip, #1
 800a402:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a406:	2a00      	cmp	r2, #0
 800a408:	d0f9      	beq.n	800a3fe <__kernel_rem_pio2f+0x27e>
 800a40a:	eb0b 0305 	add.w	r3, fp, r5
 800a40e:	aa1a      	add	r2, sp, #104	; 0x68
 800a410:	009b      	lsls	r3, r3, #2
 800a412:	1898      	adds	r0, r3, r2
 800a414:	3004      	adds	r0, #4
 800a416:	1c69      	adds	r1, r5, #1
 800a418:	3704      	adds	r7, #4
 800a41a:	2200      	movs	r2, #0
 800a41c:	4465      	add	r5, ip
 800a41e:	9005      	str	r0, [sp, #20]
 800a420:	428d      	cmp	r5, r1
 800a422:	f6ff af0a 	blt.w	800a23a <__kernel_rem_pio2f+0xba>
 800a426:	a81a      	add	r0, sp, #104	; 0x68
 800a428:	eb02 0c03 	add.w	ip, r2, r3
 800a42c:	4484      	add	ip, r0
 800a42e:	9803      	ldr	r0, [sp, #12]
 800a430:	f8dd e008 	ldr.w	lr, [sp, #8]
 800a434:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800a438:	9001      	str	r0, [sp, #4]
 800a43a:	ee07 0a90 	vmov	s15, r0
 800a43e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a442:	9805      	ldr	r0, [sp, #20]
 800a444:	edcc 7a00 	vstr	s15, [ip]
 800a448:	eddf 7a13 	vldr	s15, [pc, #76]	; 800a498 <__kernel_rem_pio2f+0x318>
 800a44c:	eb00 0802 	add.w	r8, r0, r2
 800a450:	f04f 0c00 	mov.w	ip, #0
 800a454:	45d4      	cmp	ip, sl
 800a456:	dd0c      	ble.n	800a472 <__kernel_rem_pio2f+0x2f2>
 800a458:	eb02 0c07 	add.w	ip, r2, r7
 800a45c:	a842      	add	r0, sp, #264	; 0x108
 800a45e:	4484      	add	ip, r0
 800a460:	edcc 7a01 	vstr	s15, [ip, #4]
 800a464:	3101      	adds	r1, #1
 800a466:	3204      	adds	r2, #4
 800a468:	e7da      	b.n	800a420 <__kernel_rem_pio2f+0x2a0>
 800a46a:	9b04      	ldr	r3, [sp, #16]
 800a46c:	f04f 0c01 	mov.w	ip, #1
 800a470:	e7c7      	b.n	800a402 <__kernel_rem_pio2f+0x282>
 800a472:	ecfe 6a01 	vldmia	lr!, {s13}
 800a476:	ed38 7a01 	vldmdb	r8!, {s14}
 800a47a:	f10c 0c01 	add.w	ip, ip, #1
 800a47e:	eee6 7a87 	vfma.f32	s15, s13, s14
 800a482:	e7e7      	b.n	800a454 <__kernel_rem_pio2f+0x2d4>
 800a484:	3b01      	subs	r3, #1
 800a486:	e769      	b.n	800a35c <__kernel_rem_pio2f+0x1dc>
 800a488:	0800af7c 	.word	0x0800af7c
 800a48c:	0800af50 	.word	0x0800af50
 800a490:	43800000 	.word	0x43800000
 800a494:	3b800000 	.word	0x3b800000
 800a498:	00000000 	.word	0x00000000
 800a49c:	4260      	negs	r0, r4
 800a49e:	eeb0 0a48 	vmov.f32	s0, s16
 800a4a2:	f000 f983 	bl	800a7ac <scalbnf>
 800a4a6:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 800a490 <__kernel_rem_pio2f+0x310>
 800a4aa:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800a4ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4b2:	db1a      	blt.n	800a4ea <__kernel_rem_pio2f+0x36a>
 800a4b4:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800a494 <__kernel_rem_pio2f+0x314>
 800a4b8:	ee60 7a27 	vmul.f32	s15, s0, s15
 800a4bc:	aa06      	add	r2, sp, #24
 800a4be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a4c2:	a906      	add	r1, sp, #24
 800a4c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a4c8:	3408      	adds	r4, #8
 800a4ca:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800a4ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a4d2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800a4d6:	ee10 3a10 	vmov	r3, s0
 800a4da:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800a4de:	1c6b      	adds	r3, r5, #1
 800a4e0:	ee17 2a90 	vmov	r2, s15
 800a4e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a4e8:	e73f      	b.n	800a36a <__kernel_rem_pio2f+0x1ea>
 800a4ea:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800a4ee:	aa06      	add	r2, sp, #24
 800a4f0:	ee10 3a10 	vmov	r3, s0
 800a4f4:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800a4f8:	462b      	mov	r3, r5
 800a4fa:	e736      	b.n	800a36a <__kernel_rem_pio2f+0x1ea>
 800a4fc:	aa06      	add	r2, sp, #24
 800a4fe:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800a502:	9202      	str	r2, [sp, #8]
 800a504:	ee07 2a90 	vmov	s15, r2
 800a508:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a50c:	3c01      	subs	r4, #1
 800a50e:	ee67 7a80 	vmul.f32	s15, s15, s0
 800a512:	ee20 0a07 	vmul.f32	s0, s0, s14
 800a516:	ed65 7a01 	vstmdb	r5!, {s15}
 800a51a:	e734      	b.n	800a386 <__kernel_rem_pio2f+0x206>
 800a51c:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 800a520:	ecf7 6a01 	vldmia	r7!, {s13}
 800a524:	ed9c 7a00 	vldr	s14, [ip]
 800a528:	eee6 7a87 	vfma.f32	s15, s13, s14
 800a52c:	3401      	adds	r4, #1
 800a52e:	454c      	cmp	r4, r9
 800a530:	dc01      	bgt.n	800a536 <__kernel_rem_pio2f+0x3b6>
 800a532:	42a5      	cmp	r5, r4
 800a534:	daf2      	bge.n	800a51c <__kernel_rem_pio2f+0x39c>
 800a536:	aa56      	add	r2, sp, #344	; 0x158
 800a538:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 800a53c:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 800a540:	3501      	adds	r5, #1
 800a542:	3804      	subs	r0, #4
 800a544:	e723      	b.n	800a38e <__kernel_rem_pio2f+0x20e>
 800a546:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800a548:	2a03      	cmp	r2, #3
 800a54a:	d84d      	bhi.n	800a5e8 <__kernel_rem_pio2f+0x468>
 800a54c:	e8df f002 	tbb	[pc, r2]
 800a550:	021f1f3e 	.word	0x021f1f3e
 800a554:	aa56      	add	r2, sp, #344	; 0x158
 800a556:	4411      	add	r1, r2
 800a558:	399c      	subs	r1, #156	; 0x9c
 800a55a:	4608      	mov	r0, r1
 800a55c:	461c      	mov	r4, r3
 800a55e:	2c00      	cmp	r4, #0
 800a560:	dc5f      	bgt.n	800a622 <__kernel_rem_pio2f+0x4a2>
 800a562:	4608      	mov	r0, r1
 800a564:	461c      	mov	r4, r3
 800a566:	2c01      	cmp	r4, #1
 800a568:	dc6b      	bgt.n	800a642 <__kernel_rem_pio2f+0x4c2>
 800a56a:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 800a498 <__kernel_rem_pio2f+0x318>
 800a56e:	2b01      	cmp	r3, #1
 800a570:	dc77      	bgt.n	800a662 <__kernel_rem_pio2f+0x4e2>
 800a572:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 800a576:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 800a57a:	f1b8 0f00 	cmp.w	r8, #0
 800a57e:	d176      	bne.n	800a66e <__kernel_rem_pio2f+0x4ee>
 800a580:	edc6 6a00 	vstr	s13, [r6]
 800a584:	ed86 7a01 	vstr	s14, [r6, #4]
 800a588:	edc6 7a02 	vstr	s15, [r6, #8]
 800a58c:	e02c      	b.n	800a5e8 <__kernel_rem_pio2f+0x468>
 800a58e:	aa56      	add	r2, sp, #344	; 0x158
 800a590:	4411      	add	r1, r2
 800a592:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 800a498 <__kernel_rem_pio2f+0x318>
 800a596:	399c      	subs	r1, #156	; 0x9c
 800a598:	4618      	mov	r0, r3
 800a59a:	2800      	cmp	r0, #0
 800a59c:	da32      	bge.n	800a604 <__kernel_rem_pio2f+0x484>
 800a59e:	f1b8 0f00 	cmp.w	r8, #0
 800a5a2:	d035      	beq.n	800a610 <__kernel_rem_pio2f+0x490>
 800a5a4:	eef1 7a47 	vneg.f32	s15, s14
 800a5a8:	edc6 7a00 	vstr	s15, [r6]
 800a5ac:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 800a5b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a5b4:	a82f      	add	r0, sp, #188	; 0xbc
 800a5b6:	2101      	movs	r1, #1
 800a5b8:	428b      	cmp	r3, r1
 800a5ba:	da2c      	bge.n	800a616 <__kernel_rem_pio2f+0x496>
 800a5bc:	f1b8 0f00 	cmp.w	r8, #0
 800a5c0:	d001      	beq.n	800a5c6 <__kernel_rem_pio2f+0x446>
 800a5c2:	eef1 7a67 	vneg.f32	s15, s15
 800a5c6:	edc6 7a01 	vstr	s15, [r6, #4]
 800a5ca:	e00d      	b.n	800a5e8 <__kernel_rem_pio2f+0x468>
 800a5cc:	aa56      	add	r2, sp, #344	; 0x158
 800a5ce:	4411      	add	r1, r2
 800a5d0:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 800a498 <__kernel_rem_pio2f+0x318>
 800a5d4:	399c      	subs	r1, #156	; 0x9c
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	da0e      	bge.n	800a5f8 <__kernel_rem_pio2f+0x478>
 800a5da:	f1b8 0f00 	cmp.w	r8, #0
 800a5de:	d001      	beq.n	800a5e4 <__kernel_rem_pio2f+0x464>
 800a5e0:	eef1 7a67 	vneg.f32	s15, s15
 800a5e4:	edc6 7a00 	vstr	s15, [r6]
 800a5e8:	9b01      	ldr	r3, [sp, #4]
 800a5ea:	f003 0007 	and.w	r0, r3, #7
 800a5ee:	b057      	add	sp, #348	; 0x15c
 800a5f0:	ecbd 8b04 	vpop	{d8-d9}
 800a5f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5f8:	ed31 7a01 	vldmdb	r1!, {s14}
 800a5fc:	3b01      	subs	r3, #1
 800a5fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a602:	e7e8      	b.n	800a5d6 <__kernel_rem_pio2f+0x456>
 800a604:	ed71 7a01 	vldmdb	r1!, {s15}
 800a608:	3801      	subs	r0, #1
 800a60a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a60e:	e7c4      	b.n	800a59a <__kernel_rem_pio2f+0x41a>
 800a610:	eef0 7a47 	vmov.f32	s15, s14
 800a614:	e7c8      	b.n	800a5a8 <__kernel_rem_pio2f+0x428>
 800a616:	ecb0 7a01 	vldmia	r0!, {s14}
 800a61a:	3101      	adds	r1, #1
 800a61c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a620:	e7ca      	b.n	800a5b8 <__kernel_rem_pio2f+0x438>
 800a622:	ed50 7a02 	vldr	s15, [r0, #-8]
 800a626:	ed70 6a01 	vldmdb	r0!, {s13}
 800a62a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800a62e:	3c01      	subs	r4, #1
 800a630:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a634:	ed00 7a01 	vstr	s14, [r0, #-4]
 800a638:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a63c:	edc0 7a00 	vstr	s15, [r0]
 800a640:	e78d      	b.n	800a55e <__kernel_rem_pio2f+0x3de>
 800a642:	ed50 7a02 	vldr	s15, [r0, #-8]
 800a646:	ed70 6a01 	vldmdb	r0!, {s13}
 800a64a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800a64e:	3c01      	subs	r4, #1
 800a650:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a654:	ed00 7a01 	vstr	s14, [r0, #-4]
 800a658:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a65c:	edc0 7a00 	vstr	s15, [r0]
 800a660:	e781      	b.n	800a566 <__kernel_rem_pio2f+0x3e6>
 800a662:	ed31 7a01 	vldmdb	r1!, {s14}
 800a666:	3b01      	subs	r3, #1
 800a668:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a66c:	e77f      	b.n	800a56e <__kernel_rem_pio2f+0x3ee>
 800a66e:	eef1 6a66 	vneg.f32	s13, s13
 800a672:	eeb1 7a47 	vneg.f32	s14, s14
 800a676:	edc6 6a00 	vstr	s13, [r6]
 800a67a:	ed86 7a01 	vstr	s14, [r6, #4]
 800a67e:	eef1 7a67 	vneg.f32	s15, s15
 800a682:	e781      	b.n	800a588 <__kernel_rem_pio2f+0x408>

0800a684 <__kernel_sinf>:
 800a684:	ee10 3a10 	vmov	r3, s0
 800a688:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a68c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800a690:	da04      	bge.n	800a69c <__kernel_sinf+0x18>
 800a692:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800a696:	ee17 3a90 	vmov	r3, s15
 800a69a:	b35b      	cbz	r3, 800a6f4 <__kernel_sinf+0x70>
 800a69c:	ee20 7a00 	vmul.f32	s14, s0, s0
 800a6a0:	eddf 7a15 	vldr	s15, [pc, #84]	; 800a6f8 <__kernel_sinf+0x74>
 800a6a4:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800a6fc <__kernel_sinf+0x78>
 800a6a8:	eea7 6a27 	vfma.f32	s12, s14, s15
 800a6ac:	eddf 7a14 	vldr	s15, [pc, #80]	; 800a700 <__kernel_sinf+0x7c>
 800a6b0:	eee6 7a07 	vfma.f32	s15, s12, s14
 800a6b4:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800a704 <__kernel_sinf+0x80>
 800a6b8:	eea7 6a87 	vfma.f32	s12, s15, s14
 800a6bc:	eddf 7a12 	vldr	s15, [pc, #72]	; 800a708 <__kernel_sinf+0x84>
 800a6c0:	ee60 6a07 	vmul.f32	s13, s0, s14
 800a6c4:	eee6 7a07 	vfma.f32	s15, s12, s14
 800a6c8:	b930      	cbnz	r0, 800a6d8 <__kernel_sinf+0x54>
 800a6ca:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800a70c <__kernel_sinf+0x88>
 800a6ce:	eea7 6a27 	vfma.f32	s12, s14, s15
 800a6d2:	eea6 0a26 	vfma.f32	s0, s12, s13
 800a6d6:	4770      	bx	lr
 800a6d8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800a6dc:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800a6e0:	eee0 7a86 	vfma.f32	s15, s1, s12
 800a6e4:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800a6e8:	eddf 7a09 	vldr	s15, [pc, #36]	; 800a710 <__kernel_sinf+0x8c>
 800a6ec:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800a6f0:	ee30 0a60 	vsub.f32	s0, s0, s1
 800a6f4:	4770      	bx	lr
 800a6f6:	bf00      	nop
 800a6f8:	2f2ec9d3 	.word	0x2f2ec9d3
 800a6fc:	b2d72f34 	.word	0xb2d72f34
 800a700:	3638ef1b 	.word	0x3638ef1b
 800a704:	b9500d01 	.word	0xb9500d01
 800a708:	3c088889 	.word	0x3c088889
 800a70c:	be2aaaab 	.word	0xbe2aaaab
 800a710:	3e2aaaab 	.word	0x3e2aaaab

0800a714 <matherr>:
 800a714:	2000      	movs	r0, #0
 800a716:	4770      	bx	lr

0800a718 <fabsf>:
 800a718:	ee10 3a10 	vmov	r3, s0
 800a71c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a720:	ee00 3a10 	vmov	s0, r3
 800a724:	4770      	bx	lr
	...

0800a728 <floorf>:
 800a728:	ee10 3a10 	vmov	r3, s0
 800a72c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a730:	0dca      	lsrs	r2, r1, #23
 800a732:	3a7f      	subs	r2, #127	; 0x7f
 800a734:	2a16      	cmp	r2, #22
 800a736:	dc2a      	bgt.n	800a78e <floorf+0x66>
 800a738:	2a00      	cmp	r2, #0
 800a73a:	da11      	bge.n	800a760 <floorf+0x38>
 800a73c:	eddf 7a18 	vldr	s15, [pc, #96]	; 800a7a0 <floorf+0x78>
 800a740:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a744:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a74c:	dd05      	ble.n	800a75a <floorf+0x32>
 800a74e:	2b00      	cmp	r3, #0
 800a750:	da23      	bge.n	800a79a <floorf+0x72>
 800a752:	4a14      	ldr	r2, [pc, #80]	; (800a7a4 <floorf+0x7c>)
 800a754:	2900      	cmp	r1, #0
 800a756:	bf18      	it	ne
 800a758:	4613      	movne	r3, r2
 800a75a:	ee00 3a10 	vmov	s0, r3
 800a75e:	4770      	bx	lr
 800a760:	4911      	ldr	r1, [pc, #68]	; (800a7a8 <floorf+0x80>)
 800a762:	4111      	asrs	r1, r2
 800a764:	420b      	tst	r3, r1
 800a766:	d0fa      	beq.n	800a75e <floorf+0x36>
 800a768:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800a7a0 <floorf+0x78>
 800a76c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a770:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a778:	ddef      	ble.n	800a75a <floorf+0x32>
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	bfbe      	ittt	lt
 800a77e:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800a782:	fa40 f202 	asrlt.w	r2, r0, r2
 800a786:	189b      	addlt	r3, r3, r2
 800a788:	ea23 0301 	bic.w	r3, r3, r1
 800a78c:	e7e5      	b.n	800a75a <floorf+0x32>
 800a78e:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800a792:	d3e4      	bcc.n	800a75e <floorf+0x36>
 800a794:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a798:	4770      	bx	lr
 800a79a:	2300      	movs	r3, #0
 800a79c:	e7dd      	b.n	800a75a <floorf+0x32>
 800a79e:	bf00      	nop
 800a7a0:	7149f2ca 	.word	0x7149f2ca
 800a7a4:	bf800000 	.word	0xbf800000
 800a7a8:	007fffff 	.word	0x007fffff

0800a7ac <scalbnf>:
 800a7ac:	b508      	push	{r3, lr}
 800a7ae:	ee10 2a10 	vmov	r2, s0
 800a7b2:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800a7b6:	ed2d 8b02 	vpush	{d8}
 800a7ba:	eef0 0a40 	vmov.f32	s1, s0
 800a7be:	d004      	beq.n	800a7ca <scalbnf+0x1e>
 800a7c0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a7c4:	d306      	bcc.n	800a7d4 <scalbnf+0x28>
 800a7c6:	ee70 0a00 	vadd.f32	s1, s0, s0
 800a7ca:	ecbd 8b02 	vpop	{d8}
 800a7ce:	eeb0 0a60 	vmov.f32	s0, s1
 800a7d2:	bd08      	pop	{r3, pc}
 800a7d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a7d8:	d21c      	bcs.n	800a814 <scalbnf+0x68>
 800a7da:	4b1f      	ldr	r3, [pc, #124]	; (800a858 <scalbnf+0xac>)
 800a7dc:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800a85c <scalbnf+0xb0>
 800a7e0:	4298      	cmp	r0, r3
 800a7e2:	ee60 0a27 	vmul.f32	s1, s0, s15
 800a7e6:	db10      	blt.n	800a80a <scalbnf+0x5e>
 800a7e8:	ee10 2a90 	vmov	r2, s1
 800a7ec:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 800a7f0:	3b19      	subs	r3, #25
 800a7f2:	4403      	add	r3, r0
 800a7f4:	2bfe      	cmp	r3, #254	; 0xfe
 800a7f6:	dd0f      	ble.n	800a818 <scalbnf+0x6c>
 800a7f8:	ed9f 8a19 	vldr	s16, [pc, #100]	; 800a860 <scalbnf+0xb4>
 800a7fc:	eeb0 0a48 	vmov.f32	s0, s16
 800a800:	f000 f834 	bl	800a86c <copysignf>
 800a804:	ee60 0a08 	vmul.f32	s1, s0, s16
 800a808:	e7df      	b.n	800a7ca <scalbnf+0x1e>
 800a80a:	eddf 7a16 	vldr	s15, [pc, #88]	; 800a864 <scalbnf+0xb8>
 800a80e:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800a812:	e7da      	b.n	800a7ca <scalbnf+0x1e>
 800a814:	0ddb      	lsrs	r3, r3, #23
 800a816:	e7ec      	b.n	800a7f2 <scalbnf+0x46>
 800a818:	2b00      	cmp	r3, #0
 800a81a:	dd06      	ble.n	800a82a <scalbnf+0x7e>
 800a81c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800a820:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800a824:	ee00 3a90 	vmov	s1, r3
 800a828:	e7cf      	b.n	800a7ca <scalbnf+0x1e>
 800a82a:	f113 0f16 	cmn.w	r3, #22
 800a82e:	da06      	bge.n	800a83e <scalbnf+0x92>
 800a830:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a834:	4298      	cmp	r0, r3
 800a836:	dcdf      	bgt.n	800a7f8 <scalbnf+0x4c>
 800a838:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 800a864 <scalbnf+0xb8>
 800a83c:	e7de      	b.n	800a7fc <scalbnf+0x50>
 800a83e:	3319      	adds	r3, #25
 800a840:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800a844:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800a848:	eddf 7a07 	vldr	s15, [pc, #28]	; 800a868 <scalbnf+0xbc>
 800a84c:	ee07 3a10 	vmov	s14, r3
 800a850:	ee67 0a27 	vmul.f32	s1, s14, s15
 800a854:	e7b9      	b.n	800a7ca <scalbnf+0x1e>
 800a856:	bf00      	nop
 800a858:	ffff3cb0 	.word	0xffff3cb0
 800a85c:	4c000000 	.word	0x4c000000
 800a860:	7149f2ca 	.word	0x7149f2ca
 800a864:	0da24260 	.word	0x0da24260
 800a868:	33000000 	.word	0x33000000

0800a86c <copysignf>:
 800a86c:	ee10 3a10 	vmov	r3, s0
 800a870:	ee10 2a90 	vmov	r2, s1
 800a874:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a878:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800a87c:	4313      	orrs	r3, r2
 800a87e:	ee00 3a10 	vmov	s0, r3
 800a882:	4770      	bx	lr

0800a884 <_init>:
 800a884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a886:	bf00      	nop
 800a888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a88a:	bc08      	pop	{r3}
 800a88c:	469e      	mov	lr, r3
 800a88e:	4770      	bx	lr

0800a890 <_fini>:
 800a890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a892:	bf00      	nop
 800a894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a896:	bc08      	pop	{r3}
 800a898:	469e      	mov	lr, r3
 800a89a:	4770      	bx	lr
